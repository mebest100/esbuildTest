"use strict";
(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __require = /* @__PURE__ */ ((x2) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x2, {
    get: (a2, b2) => (typeof require !== "undefined" ? require : a2)[b2]
  }) : x2)(function(x2) {
    if (typeof require !== "undefined")
      return require.apply(this, arguments);
    throw Error('Dynamic require of "' + x2 + '" is not supported');
  });
  var __commonJS = (cb, mod) => function __require2() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key2 of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key2) && key2 !== except)
          __defProp(to, key2, { get: () => from[key2], enumerable: !(desc = __getOwnPropDesc(from, key2)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));

  // node_modules/react/cjs/react.development.js
  var require_react_development = __commonJS({
    "node_modules/react/cjs/react.development.js"(exports2, module2) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var ReactVersion = "18.2.0";
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactCurrentDispatcher = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactCurrentBatchConfig = {
            transition: null
          };
          var ReactCurrentActQueue = {
            current: null,
            // Used to reproduce behavior of `batchedUpdates` in legacy mode.
            isBatchingLegacy: false,
            didScheduleLegacyUpdate: false
          };
          var ReactCurrentOwner = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactDebugCurrentFrame = {};
          var currentExtraStackFrame = null;
          function setExtraStackFrame(stack) {
            {
              currentExtraStackFrame = stack;
            }
          }
          {
            ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
              {
                currentExtraStackFrame = stack;
              }
            };
            ReactDebugCurrentFrame.getCurrentStack = null;
            ReactDebugCurrentFrame.getStackAddendum = function() {
              var stack = "";
              if (currentExtraStackFrame) {
                stack += currentExtraStackFrame;
              }
              var impl = ReactDebugCurrentFrame.getCurrentStack;
              if (impl) {
                stack += impl() || "";
              }
              return stack;
            };
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var ReactSharedInternals = {
            ReactCurrentDispatcher,
            ReactCurrentBatchConfig,
            ReactCurrentOwner
          };
          {
            ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
            ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
          }
          function warn3(format3) {
            {
              {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format3, args);
              }
            }
          }
          function error2(format3) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format3, args);
              }
            }
          }
          function printWarning(level, format3, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format3 += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format3);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var didWarnStateUpdateForUnmountedComponent = {};
          function warnNoop(publicInstance, callerName) {
            {
              var _constructor = publicInstance.constructor;
              var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
              var warningKey = componentName + "." + callerName;
              if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                return;
              }
              error2("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
              didWarnStateUpdateForUnmountedComponent[warningKey] = true;
            }
          }
          var ReactNoopUpdateQueue = {
            /**
             * Checks whether or not this composite component is mounted.
             * @param {ReactClass} publicInstance The instance we want to test.
             * @return {boolean} True if mounted, false otherwise.
             * @protected
             * @final
             */
            isMounted: function(publicInstance) {
              return false;
            },
            /**
             * Forces an update. This should only be invoked when it is known with
             * certainty that we are **not** in a DOM transaction.
             *
             * You may want to call this when you know that some deeper aspect of the
             * component's state has changed but `setState` was not called.
             *
             * This will not invoke `shouldComponentUpdate`, but it will invoke
             * `componentWillUpdate` and `componentDidUpdate`.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueForceUpdate: function(publicInstance, callback, callerName) {
              warnNoop(publicInstance, "forceUpdate");
            },
            /**
             * Replaces all of the state. Always use this or `setState` to mutate state.
             * You should treat `this.state` as immutable.
             *
             * There is no guarantee that `this.state` will be immediately updated, so
             * accessing `this.state` after calling this method may return the old value.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} completeState Next state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
              warnNoop(publicInstance, "replaceState");
            },
            /**
             * Sets a subset of the state. This only exists because _pendingState is
             * internal. This provides a merging strategy that is not available to deep
             * properties which is confusing. TODO: Expose pendingState or don't use it
             * during the merge.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} partialState Next partial state to be merged with state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} Name of the calling function in the public API.
             * @internal
             */
            enqueueSetState: function(publicInstance, partialState, callback, callerName) {
              warnNoop(publicInstance, "setState");
            }
          };
          var assign = Object.assign;
          var emptyObject = {};
          {
            Object.freeze(emptyObject);
          }
          function Component20(props, context2, updater) {
            this.props = props;
            this.context = context2;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          Component20.prototype.isReactComponent = {};
          Component20.prototype.setState = function(partialState, callback) {
            if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
              throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
            }
            this.updater.enqueueSetState(this, partialState, callback, "setState");
          };
          Component20.prototype.forceUpdate = function(callback) {
            this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
          };
          {
            var deprecatedAPIs = {
              isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
              replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
            };
            var defineDeprecationWarning = function(methodName, info) {
              Object.defineProperty(Component20.prototype, methodName, {
                get: function() {
                  warn3("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                  return void 0;
                }
              });
            };
            for (var fnName in deprecatedAPIs) {
              if (deprecatedAPIs.hasOwnProperty(fnName)) {
                defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
              }
            }
          }
          function ComponentDummy() {
          }
          ComponentDummy.prototype = Component20.prototype;
          function PureComponent2(props, context2, updater) {
            this.props = props;
            this.context = context2;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          var pureComponentPrototype = PureComponent2.prototype = new ComponentDummy();
          pureComponentPrototype.constructor = PureComponent2;
          assign(pureComponentPrototype, Component20.prototype);
          pureComponentPrototype.isPureReactComponent = true;
          function createRef7() {
            var refObject = {
              current: null
            };
            {
              Object.seal(refObject);
            }
            return refObject;
          }
          var isArrayImpl = Array.isArray;
          function isArray2(a2) {
            return isArrayImpl(a2);
          }
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type4 = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type4;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e3) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error2("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type4) {
            return type4.displayName || "Context";
          }
          function getComponentNameFromType(type4) {
            if (type4 == null) {
              return null;
            }
            {
              if (typeof type4.tag === "number") {
                error2("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type4 === "function") {
              return type4.displayName || type4.name || null;
            }
            if (typeof type4 === "string") {
              return type4;
            }
            switch (type4) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type4 === "object") {
              switch (type4.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context2 = type4;
                  return getContextName(context2) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type4;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type4, type4.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type4.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type4.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type4;
                  var payload = lazyComponent._payload;
                  var init2 = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init2(payload));
                  } catch (x2) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var hasOwnProperty2 = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty2.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty2.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function defineKeyPropWarningGetter(props, displayName) {
            var warnAboutAccessingKey = function() {
              {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error2("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
          function defineRefPropWarningGetter(props, displayName) {
            var warnAboutAccessingRef = function() {
              {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error2("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
          function warnIfStringRefCannotBeAutoConverted(config) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error2('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          var ReactElement = function(type4, key2, ref, self2, source, owner, props) {
            var element = {
              // This tag allows us to uniquely identify this as a React Element
              $$typeof: REACT_ELEMENT_TYPE,
              // Built-in properties that belong on the element
              type: type4,
              key: key2,
              ref,
              props,
              // Record the component responsible for creating this element.
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function createElement286(type4, config, children) {
            var propName;
            var props = {};
            var key2 = null;
            var ref = null;
            var self2 = null;
            var source = null;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                {
                  warnIfStringRefCannotBeAutoConverted(config);
                }
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key2 = "" + config.key;
              }
              self2 = config.__self === void 0 ? null : config.__self;
              source = config.__source === void 0 ? null : config.__source;
              for (propName in config) {
                if (hasOwnProperty2.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i3 = 0; i3 < childrenLength; i3++) {
                childArray[i3] = arguments[i3 + 2];
              }
              {
                if (Object.freeze) {
                  Object.freeze(childArray);
                }
              }
              props.children = childArray;
            }
            if (type4 && type4.defaultProps) {
              var defaultProps2 = type4.defaultProps;
              for (propName in defaultProps2) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps2[propName];
                }
              }
            }
            {
              if (key2 || ref) {
                var displayName = typeof type4 === "function" ? type4.displayName || type4.name || "Unknown" : type4;
                if (key2) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
            }
            return ReactElement(type4, key2, ref, self2, source, ReactCurrentOwner.current, props);
          }
          function cloneAndReplaceKey(oldElement, newKey) {
            var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
            return newElement;
          }
          function cloneElement20(element, config, children) {
            if (element === null || element === void 0) {
              throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
            }
            var propName;
            var props = assign({}, element.props);
            var key2 = element.key;
            var ref = element.ref;
            var self2 = element._self;
            var source = element._source;
            var owner = element._owner;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                owner = ReactCurrentOwner.current;
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key2 = "" + config.key;
              }
              var defaultProps2;
              if (element.type && element.type.defaultProps) {
                defaultProps2 = element.type.defaultProps;
              }
              for (propName in config) {
                if (hasOwnProperty2.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  if (config[propName] === void 0 && defaultProps2 !== void 0) {
                    props[propName] = defaultProps2[propName];
                  } else {
                    props[propName] = config[propName];
                  }
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i3 = 0; i3 < childrenLength; i3++) {
                childArray[i3] = arguments[i3 + 2];
              }
              props.children = childArray;
            }
            return ReactElement(element.type, key2, ref, self2, source, owner, props);
          }
          function isValidElement25(object4) {
            return typeof object4 === "object" && object4 !== null && object4.$$typeof === REACT_ELEMENT_TYPE;
          }
          var SEPARATOR = ".";
          var SUBSEPARATOR = ":";
          function escape2(key2) {
            var escapeRegex = /[=:]/g;
            var escaperLookup = {
              "=": "=0",
              ":": "=2"
            };
            var escapedString = key2.replace(escapeRegex, function(match2) {
              return escaperLookup[match2];
            });
            return "$" + escapedString;
          }
          var didWarnAboutMaps = false;
          var userProvidedKeyEscapeRegex = /\/+/g;
          function escapeUserProvidedKey(text) {
            return text.replace(userProvidedKeyEscapeRegex, "$&/");
          }
          function getElementKey(element, index2) {
            if (typeof element === "object" && element !== null && element.key != null) {
              {
                checkKeyStringCoercion(element.key);
              }
              return escape2("" + element.key);
            }
            return index2.toString(36);
          }
          function mapIntoArray(children, array4, escapedPrefix, nameSoFar, callback) {
            var type4 = typeof children;
            if (type4 === "undefined" || type4 === "boolean") {
              children = null;
            }
            var invokeCallback = false;
            if (children === null) {
              invokeCallback = true;
            } else {
              switch (type4) {
                case "string":
                case "number":
                  invokeCallback = true;
                  break;
                case "object":
                  switch (children.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                      invokeCallback = true;
                  }
              }
            }
            if (invokeCallback) {
              var _child = children;
              var mappedChild = callback(_child);
              var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
              if (isArray2(mappedChild)) {
                var escapedChildKey = "";
                if (childKey != null) {
                  escapedChildKey = escapeUserProvidedKey(childKey) + "/";
                }
                mapIntoArray(mappedChild, array4, escapedChildKey, "", function(c2) {
                  return c2;
                });
              } else if (mappedChild != null) {
                if (isValidElement25(mappedChild)) {
                  {
                    if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                      checkKeyStringCoercion(mappedChild.key);
                    }
                  }
                  mappedChild = cloneAndReplaceKey(
                    mappedChild,
                    // Keep both the (mapped) and old keys if they differ, just as
                    // traverseAllChildren used to do for objects as children
                    escapedPrefix + // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
                    (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? (
                      // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
                      // eslint-disable-next-line react-internal/safe-string-coercion
                      escapeUserProvidedKey("" + mappedChild.key) + "/"
                    ) : "") + childKey
                  );
                }
                array4.push(mappedChild);
              }
              return 1;
            }
            var child;
            var nextName;
            var subtreeCount = 0;
            var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
            if (isArray2(children)) {
              for (var i3 = 0; i3 < children.length; i3++) {
                child = children[i3];
                nextName = nextNamePrefix + getElementKey(child, i3);
                subtreeCount += mapIntoArray(child, array4, escapedPrefix, nextName, callback);
              }
            } else {
              var iteratorFn = getIteratorFn(children);
              if (typeof iteratorFn === "function") {
                var iterableChildren = children;
                {
                  if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) {
                      warn3("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    }
                    didWarnAboutMaps = true;
                  }
                }
                var iterator = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while (!(step = iterator.next()).done) {
                  child = step.value;
                  nextName = nextNamePrefix + getElementKey(child, ii++);
                  subtreeCount += mapIntoArray(child, array4, escapedPrefix, nextName, callback);
                }
              } else if (type4 === "object") {
                var childrenString = String(children);
                throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
              }
            }
            return subtreeCount;
          }
          function mapChildren(children, func, context2) {
            if (children == null) {
              return children;
            }
            var result2 = [];
            var count = 0;
            mapIntoArray(children, result2, "", "", function(child) {
              return func.call(context2, child, count++);
            });
            return result2;
          }
          function countChildren(children) {
            var n4 = 0;
            mapChildren(children, function() {
              n4++;
            });
            return n4;
          }
          function forEachChildren(children, forEachFunc, forEachContext) {
            mapChildren(children, function() {
              forEachFunc.apply(this, arguments);
            }, forEachContext);
          }
          function toArray9(children) {
            return mapChildren(children, function(child) {
              return child;
            }) || [];
          }
          function onlyChild(children) {
            if (!isValidElement25(children)) {
              throw new Error("React.Children.only expected to receive a single React element child.");
            }
            return children;
          }
          function createContext49(defaultValue) {
            var context2 = {
              $$typeof: REACT_CONTEXT_TYPE,
              // As a workaround to support multiple concurrent renderers, we categorize
              // some renderers as primary and others as secondary. We only expect
              // there to be two concurrent renderers at most: React Native (primary) and
              // Fabric (secondary); React DOM (primary) and React ART (secondary).
              // Secondary renderers store their context values on separate fields.
              _currentValue: defaultValue,
              _currentValue2: defaultValue,
              // Used to track how many concurrent renderers this context currently
              // supports within in a single renderer. Such as parallel server rendering.
              _threadCount: 0,
              // These are circular
              Provider: null,
              Consumer: null,
              // Add these to use same hidden class in VM as ServerContext
              _defaultValue: null,
              _globalName: null
            };
            context2.Provider = {
              $$typeof: REACT_PROVIDER_TYPE,
              _context: context2
            };
            var hasWarnedAboutUsingNestedContextConsumers = false;
            var hasWarnedAboutUsingConsumerProvider = false;
            var hasWarnedAboutDisplayNameOnConsumer = false;
            {
              var Consumer = {
                $$typeof: REACT_CONTEXT_TYPE,
                _context: context2
              };
              Object.defineProperties(Consumer, {
                Provider: {
                  get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                      hasWarnedAboutUsingConsumerProvider = true;
                      error2("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context2.Provider;
                  },
                  set: function(_Provider) {
                    context2.Provider = _Provider;
                  }
                },
                _currentValue: {
                  get: function() {
                    return context2._currentValue;
                  },
                  set: function(_currentValue) {
                    context2._currentValue = _currentValue;
                  }
                },
                _currentValue2: {
                  get: function() {
                    return context2._currentValue2;
                  },
                  set: function(_currentValue2) {
                    context2._currentValue2 = _currentValue2;
                  }
                },
                _threadCount: {
                  get: function() {
                    return context2._threadCount;
                  },
                  set: function(_threadCount) {
                    context2._threadCount = _threadCount;
                  }
                },
                Consumer: {
                  get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                      hasWarnedAboutUsingNestedContextConsumers = true;
                      error2("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context2.Consumer;
                  }
                },
                displayName: {
                  get: function() {
                    return context2.displayName;
                  },
                  set: function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                      warn3("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                      hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                  }
                }
              });
              context2.Consumer = Consumer;
            }
            {
              context2._currentRenderer = null;
              context2._currentRenderer2 = null;
            }
            return context2;
          }
          var Uninitialized = -1;
          var Pending = 0;
          var Resolved = 1;
          var Rejected = 2;
          function lazyInitializer(payload) {
            if (payload._status === Uninitialized) {
              var ctor = payload._result;
              var thenable = ctor();
              thenable.then(function(moduleObject2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var resolved = payload;
                  resolved._status = Resolved;
                  resolved._result = moduleObject2;
                }
              }, function(error3) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var rejected = payload;
                  rejected._status = Rejected;
                  rejected._result = error3;
                }
              });
              if (payload._status === Uninitialized) {
                var pending = payload;
                pending._status = Pending;
                pending._result = thenable;
              }
            }
            if (payload._status === Resolved) {
              var moduleObject = payload._result;
              {
                if (moduleObject === void 0) {
                  error2("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
                }
              }
              {
                if (!("default" in moduleObject)) {
                  error2("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                }
              }
              return moduleObject.default;
            } else {
              throw payload._result;
            }
          }
          function lazy2(ctor) {
            var payload = {
              // We use these fields to store the result.
              _status: Uninitialized,
              _result: ctor
            };
            var lazyType = {
              $$typeof: REACT_LAZY_TYPE,
              _payload: payload,
              _init: lazyInitializer
            };
            {
              var defaultProps2;
              var propTypes;
              Object.defineProperties(lazyType, {
                defaultProps: {
                  configurable: true,
                  get: function() {
                    return defaultProps2;
                  },
                  set: function(newDefaultProps) {
                    error2("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps2 = newDefaultProps;
                    Object.defineProperty(lazyType, "defaultProps", {
                      enumerable: true
                    });
                  }
                },
                propTypes: {
                  configurable: true,
                  get: function() {
                    return propTypes;
                  },
                  set: function(newPropTypes) {
                    error2("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes;
                    Object.defineProperty(lazyType, "propTypes", {
                      enumerable: true
                    });
                  }
                }
              });
            }
            return lazyType;
          }
          function forwardRef135(render2) {
            {
              if (render2 != null && render2.$$typeof === REACT_MEMO_TYPE) {
                error2("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
              } else if (typeof render2 !== "function") {
                error2("forwardRef requires a render function but was given %s.", render2 === null ? "null" : typeof render2);
              } else {
                if (render2.length !== 0 && render2.length !== 2) {
                  error2("forwardRef render functions accept exactly two parameters: props and ref. %s", render2.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
                }
              }
              if (render2 != null) {
                if (render2.defaultProps != null || render2.propTypes != null) {
                  error2("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
                }
              }
            }
            var elementType = {
              $$typeof: REACT_FORWARD_REF_TYPE,
              render: render2
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!render2.name && !render2.displayName) {
                    render2.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType2(type4) {
            if (typeof type4 === "string" || typeof type4 === "function") {
              return true;
            }
            if (type4 === REACT_FRAGMENT_TYPE || type4 === REACT_PROFILER_TYPE || enableDebugTracing || type4 === REACT_STRICT_MODE_TYPE || type4 === REACT_SUSPENSE_TYPE || type4 === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type4 === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type4 === "object" && type4 !== null) {
              if (type4.$$typeof === REACT_LAZY_TYPE || type4.$$typeof === REACT_MEMO_TYPE || type4.$$typeof === REACT_PROVIDER_TYPE || type4.$$typeof === REACT_CONTEXT_TYPE || type4.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
              // types supported by any Flight configuration anywhere since
              // we don't know which Flight build this will end up being used
              // with.
              type4.$$typeof === REACT_MODULE_REFERENCE || type4.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function memo10(type4, compare) {
            {
              if (!isValidElementType2(type4)) {
                error2("memo: The first argument must be a component. Instead received: %s", type4 === null ? "null" : typeof type4);
              }
            }
            var elementType = {
              $$typeof: REACT_MEMO_TYPE,
              type: type4,
              compare: compare === void 0 ? null : compare
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!type4.name && !type4.displayName) {
                    type4.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          function resolveDispatcher() {
            var dispatcher = ReactCurrentDispatcher.current;
            {
              if (dispatcher === null) {
                error2("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
            return dispatcher;
          }
          function useContext143(Context3) {
            var dispatcher = resolveDispatcher();
            {
              if (Context3._context !== void 0) {
                var realContext = Context3._context;
                if (realContext.Consumer === Context3) {
                  error2("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
                } else if (realContext.Provider === Context3) {
                  error2("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
                }
              }
            }
            return dispatcher.useContext(Context3);
          }
          function useState97(initialState10) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useState(initialState10);
          }
          function useReducer4(reducer, initialArg, init2) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useReducer(reducer, initialArg, init2);
          }
          function useRef122(initialValue) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useRef(initialValue);
          }
          function useEffect100(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useEffect(create, deps);
          }
          function useInsertionEffect(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useInsertionEffect(create, deps);
          }
          function useLayoutEffect12(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useLayoutEffect(create, deps);
          }
          function useCallback30(callback, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useCallback(callback, deps);
          }
          function useMemo86(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useMemo(create, deps);
          }
          function useImperativeHandle25(ref, create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useImperativeHandle(ref, create, deps);
          }
          function useDebugValue2(value, formatterFn) {
            {
              var dispatcher = resolveDispatcher();
              return dispatcher.useDebugValue(value, formatterFn);
            }
          }
          function useTransition() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useTransition();
          }
          function useDeferredValue(value) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDeferredValue(value);
          }
          function useId3() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useId();
          }
          function useSyncExternalStore(subscribe2, getSnapshot, getServerSnapshot) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useSyncExternalStore(subscribe2, getSnapshot, getServerSnapshot);
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign({}, props, {
                    value: prevLog
                  }),
                  info: assign({}, props, {
                    value: prevInfo
                  }),
                  warn: assign({}, props, {
                    value: prevWarn
                  }),
                  error: assign({}, props, {
                    value: prevError
                  }),
                  group: assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error2("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix2;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix2 === void 0) {
                try {
                  throw Error();
                } catch (x2) {
                  var match2 = x2.stack.trim().match(/\n( *(at )?)/);
                  prefix2 = match2 && match2[1] || "";
                }
              }
              return "\n" + prefix2 + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn2, construct) {
            if (!fn2 || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn2);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x2) {
                    control = x2;
                  }
                  Reflect.construct(fn2, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x2) {
                    control = x2;
                  }
                  fn2.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x2) {
                  control = x2;
                }
                fn2();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s2 = sampleLines.length - 1;
                var c2 = controlLines.length - 1;
                while (s2 >= 1 && c2 >= 0 && sampleLines[s2] !== controlLines[c2]) {
                  c2--;
                }
                for (; s2 >= 1 && c2 >= 0; s2--, c2--) {
                  if (sampleLines[s2] !== controlLines[c2]) {
                    if (s2 !== 1 || c2 !== 1) {
                      do {
                        s2--;
                        c2--;
                        if (c2 < 0 || sampleLines[s2] !== controlLines[c2]) {
                          var _frame = "\n" + sampleLines[s2].replace(" at new ", " at ");
                          if (fn2.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn2.displayName);
                          }
                          {
                            if (typeof fn2 === "function") {
                              componentFrameCache.set(fn2, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s2 >= 1 && c2 >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher$1.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn2 ? fn2.displayName || fn2.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn2 === "function") {
                componentFrameCache.set(fn2, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn2, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn2, false);
            }
          }
          function shouldConstruct(Component21) {
            var prototype3 = Component21.prototype;
            return !!(prototype3 && prototype3.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type4, source, ownerFn) {
            if (type4 == null) {
              return "";
            }
            if (typeof type4 === "function") {
              {
                return describeNativeComponentFrame(type4, shouldConstruct(type4));
              }
            }
            if (typeof type4 === "string") {
              return describeBuiltInComponentFrame(type4);
            }
            switch (type4) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type4 === "object") {
              switch (type4.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type4.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type4.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type4;
                  var payload = lazyComponent._payload;
                  var init2 = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init2(payload), source, ownerFn);
                  } catch (x2) {
                  }
                }
              }
            }
            return "";
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location, componentName, element) {
            {
              var has = Function.call.bind(hasOwnProperty2);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error2("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error2("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                setExtraStackFrame(stack);
              } else {
                setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function getDeclarationErrorAddendum() {
            if (ReactCurrentOwner.current) {
              var name = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (name) {
                return "\n\nCheck the render method of `" + name + "`.";
              }
            }
            return "";
          }
          function getSourceInfoErrorAddendum(source) {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
          function getSourceInfoErrorAddendumForProps(elementProps) {
            if (elementProps !== null && elementProps !== void 0) {
              return getSourceInfoErrorAddendum(elementProps.__source);
            }
            return "";
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
          function validateExplicitKey(element, parentType) {
            if (!element._store || element._store.validated || element.key != null) {
              return;
            }
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
              childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
            }
            {
              setCurrentlyValidatingElement$1(element);
              error2('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node, parentType) {
            if (typeof node !== "object") {
              return;
            }
            if (isArray2(node)) {
              for (var i3 = 0; i3 < node.length; i3++) {
                var child = node[i3];
                if (isValidElement25(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement25(node)) {
              if (node._store) {
                node._store.validated = true;
              }
            } else if (node) {
              var iteratorFn = getIteratorFn(node);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node.entries) {
                  var iterator = iteratorFn.call(node);
                  var step;
                  while (!(step = iterator.next()).done) {
                    if (isValidElement25(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type4 = element.type;
              if (type4 === null || type4 === void 0 || typeof type4 === "string") {
                return;
              }
              var propTypes;
              if (typeof type4 === "function") {
                propTypes = type4.propTypes;
              } else if (typeof type4 === "object" && (type4.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
              // Inner props are checked in the reconciler.
              type4.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type4.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentNameFromType(type4);
                checkPropTypes(propTypes, element.props, "prop", name, element);
              } else if (type4.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type4);
                error2("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type4.getDefaultProps === "function" && !type4.getDefaultProps.isReactClassApproved) {
                error2("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys2 = Object.keys(fragment.props);
              for (var i3 = 0; i3 < keys2.length; i3++) {
                var key2 = keys2[i3];
                if (key2 !== "children" && key2 !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error2("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key2);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error2("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function createElementWithValidation(type4, props, children) {
            var validType = isValidElementType2(type4);
            if (!validType) {
              var info = "";
              if (type4 === void 0 || typeof type4 === "object" && type4 !== null && Object.keys(type4).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendumForProps(props);
              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type4 === null) {
                typeString = "null";
              } else if (isArray2(type4)) {
                typeString = "array";
              } else if (type4 !== void 0 && type4.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type4.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type4;
              }
              {
                error2("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
            }
            var element = createElement286.apply(this, arguments);
            if (element == null) {
              return element;
            }
            if (validType) {
              for (var i3 = 2; i3 < arguments.length; i3++) {
                validateChildKeys(arguments[i3], type4);
              }
            }
            if (type4 === REACT_FRAGMENT_TYPE) {
              validateFragmentProps(element);
            } else {
              validatePropTypes(element);
            }
            return element;
          }
          var didWarnAboutDeprecatedCreateFactory = false;
          function createFactoryWithValidation(type4) {
            var validatedFactory = createElementWithValidation.bind(null, type4);
            validatedFactory.type = type4;
            {
              if (!didWarnAboutDeprecatedCreateFactory) {
                didWarnAboutDeprecatedCreateFactory = true;
                warn3("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
              }
              Object.defineProperty(validatedFactory, "type", {
                enumerable: false,
                get: function() {
                  warn3("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                  Object.defineProperty(this, "type", {
                    value: type4
                  });
                  return type4;
                }
              });
            }
            return validatedFactory;
          }
          function cloneElementWithValidation(element, props, children) {
            var newElement = cloneElement20.apply(this, arguments);
            for (var i3 = 2; i3 < arguments.length; i3++) {
              validateChildKeys(arguments[i3], newElement.type);
            }
            validatePropTypes(newElement);
            return newElement;
          }
          function startTransition(scope, options) {
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = {};
            var currentTransition = ReactCurrentBatchConfig.transition;
            {
              ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              scope();
            } finally {
              ReactCurrentBatchConfig.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn3("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          var didWarnAboutMessageChannel = false;
          var enqueueTaskImpl = null;
          function enqueueTask(task2) {
            if (enqueueTaskImpl === null) {
              try {
                var requireString = ("require" + Math.random()).slice(0, 7);
                var nodeRequire = module2 && module2[requireString];
                enqueueTaskImpl = nodeRequire.call(module2, "timers").setImmediate;
              } catch (_err) {
                enqueueTaskImpl = function(callback) {
                  {
                    if (didWarnAboutMessageChannel === false) {
                      didWarnAboutMessageChannel = true;
                      if (typeof MessageChannel === "undefined") {
                        error2("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                      }
                    }
                  }
                  var channel = new MessageChannel();
                  channel.port1.onmessage = callback;
                  channel.port2.postMessage(void 0);
                };
              }
            }
            return enqueueTaskImpl(task2);
          }
          var actScopeDepth = 0;
          var didWarnNoAwaitAct = false;
          function act(callback) {
            {
              var prevActScopeDepth = actScopeDepth;
              actScopeDepth++;
              if (ReactCurrentActQueue.current === null) {
                ReactCurrentActQueue.current = [];
              }
              var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
              var result2;
              try {
                ReactCurrentActQueue.isBatchingLegacy = true;
                result2 = callback();
                if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                  var queue = ReactCurrentActQueue.current;
                  if (queue !== null) {
                    ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                    flushActQueue(queue);
                  }
                }
              } catch (error3) {
                popActScope(prevActScopeDepth);
                throw error3;
              } finally {
                ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
              }
              if (result2 !== null && typeof result2 === "object" && typeof result2.then === "function") {
                var thenableResult = result2;
                var wasAwaited = false;
                var thenable = {
                  then: function(resolve, reject) {
                    wasAwaited = true;
                    thenableResult.then(function(returnValue2) {
                      popActScope(prevActScopeDepth);
                      if (actScopeDepth === 0) {
                        recursivelyFlushAsyncActWork(returnValue2, resolve, reject);
                      } else {
                        resolve(returnValue2);
                      }
                    }, function(error3) {
                      popActScope(prevActScopeDepth);
                      reject(error3);
                    });
                  }
                };
                {
                  if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                    Promise.resolve().then(function() {
                    }).then(function() {
                      if (!wasAwaited) {
                        didWarnNoAwaitAct = true;
                        error2("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                      }
                    });
                  }
                }
                return thenable;
              } else {
                var returnValue = result2;
                popActScope(prevActScopeDepth);
                if (actScopeDepth === 0) {
                  var _queue = ReactCurrentActQueue.current;
                  if (_queue !== null) {
                    flushActQueue(_queue);
                    ReactCurrentActQueue.current = null;
                  }
                  var _thenable = {
                    then: function(resolve, reject) {
                      if (ReactCurrentActQueue.current === null) {
                        ReactCurrentActQueue.current = [];
                        recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                      } else {
                        resolve(returnValue);
                      }
                    }
                  };
                  return _thenable;
                } else {
                  var _thenable2 = {
                    then: function(resolve, reject) {
                      resolve(returnValue);
                    }
                  };
                  return _thenable2;
                }
              }
            }
          }
          function popActScope(prevActScopeDepth) {
            {
              if (prevActScopeDepth !== actScopeDepth - 1) {
                error2("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
              }
              actScopeDepth = prevActScopeDepth;
            }
          }
          function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
            {
              var queue = ReactCurrentActQueue.current;
              if (queue !== null) {
                try {
                  flushActQueue(queue);
                  enqueueTask(function() {
                    if (queue.length === 0) {
                      ReactCurrentActQueue.current = null;
                      resolve(returnValue);
                    } else {
                      recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                    }
                  });
                } catch (error3) {
                  reject(error3);
                }
              } else {
                resolve(returnValue);
              }
            }
          }
          var isFlushing = false;
          function flushActQueue(queue) {
            {
              if (!isFlushing) {
                isFlushing = true;
                var i3 = 0;
                try {
                  for (; i3 < queue.length; i3++) {
                    var callback = queue[i3];
                    do {
                      callback = callback(true);
                    } while (callback !== null);
                  }
                  queue.length = 0;
                } catch (error3) {
                  queue = queue.slice(i3 + 1);
                  throw error3;
                } finally {
                  isFlushing = false;
                }
              }
            }
          }
          var createElement$1 = createElementWithValidation;
          var cloneElement$1 = cloneElementWithValidation;
          var createFactory = createFactoryWithValidation;
          var Children11 = {
            map: mapChildren,
            forEach: forEachChildren,
            count: countChildren,
            toArray: toArray9,
            only: onlyChild
          };
          exports2.Children = Children11;
          exports2.Component = Component20;
          exports2.Fragment = REACT_FRAGMENT_TYPE;
          exports2.Profiler = REACT_PROFILER_TYPE;
          exports2.PureComponent = PureComponent2;
          exports2.StrictMode = REACT_STRICT_MODE_TYPE;
          exports2.Suspense = REACT_SUSPENSE_TYPE;
          exports2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
          exports2.cloneElement = cloneElement$1;
          exports2.createContext = createContext49;
          exports2.createElement = createElement$1;
          exports2.createFactory = createFactory;
          exports2.createRef = createRef7;
          exports2.forwardRef = forwardRef135;
          exports2.isValidElement = isValidElement25;
          exports2.lazy = lazy2;
          exports2.memo = memo10;
          exports2.startTransition = startTransition;
          exports2.unstable_act = act;
          exports2.useCallback = useCallback30;
          exports2.useContext = useContext143;
          exports2.useDebugValue = useDebugValue2;
          exports2.useDeferredValue = useDeferredValue;
          exports2.useEffect = useEffect100;
          exports2.useId = useId3;
          exports2.useImperativeHandle = useImperativeHandle25;
          exports2.useInsertionEffect = useInsertionEffect;
          exports2.useLayoutEffect = useLayoutEffect12;
          exports2.useMemo = useMemo86;
          exports2.useReducer = useReducer4;
          exports2.useRef = useRef122;
          exports2.useState = useState97;
          exports2.useSyncExternalStore = useSyncExternalStore;
          exports2.useTransition = useTransition;
          exports2.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/react/index.js
  var require_react = __commonJS({
    "node_modules/react/index.js"(exports2, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_react_development();
      }
    }
  });

  // node_modules/scheduler/cjs/scheduler.development.js
  var require_scheduler_development = __commonJS({
    "node_modules/scheduler/cjs/scheduler.development.js"(exports2) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var enableSchedulerDebugging = false;
          var enableProfiling = false;
          var frameYieldMs = 5;
          function push(heap, node) {
            var index2 = heap.length;
            heap.push(node);
            siftUp(heap, node, index2);
          }
          function peek(heap) {
            return heap.length === 0 ? null : heap[0];
          }
          function pop(heap) {
            if (heap.length === 0) {
              return null;
            }
            var first = heap[0];
            var last = heap.pop();
            if (last !== first) {
              heap[0] = last;
              siftDown(heap, last, 0);
            }
            return first;
          }
          function siftUp(heap, node, i3) {
            var index2 = i3;
            while (index2 > 0) {
              var parentIndex = index2 - 1 >>> 1;
              var parent = heap[parentIndex];
              if (compare(parent, node) > 0) {
                heap[parentIndex] = node;
                heap[index2] = parent;
                index2 = parentIndex;
              } else {
                return;
              }
            }
          }
          function siftDown(heap, node, i3) {
            var index2 = i3;
            var length = heap.length;
            var halfLength = length >>> 1;
            while (index2 < halfLength) {
              var leftIndex = (index2 + 1) * 2 - 1;
              var left = heap[leftIndex];
              var rightIndex = leftIndex + 1;
              var right = heap[rightIndex];
              if (compare(left, node) < 0) {
                if (rightIndex < length && compare(right, left) < 0) {
                  heap[index2] = right;
                  heap[rightIndex] = node;
                  index2 = rightIndex;
                } else {
                  heap[index2] = left;
                  heap[leftIndex] = node;
                  index2 = leftIndex;
                }
              } else if (rightIndex < length && compare(right, node) < 0) {
                heap[index2] = right;
                heap[rightIndex] = node;
                index2 = rightIndex;
              } else {
                return;
              }
            }
          }
          function compare(a2, b2) {
            var diff = a2.sortIndex - b2.sortIndex;
            return diff !== 0 ? diff : a2.id - b2.id;
          }
          var ImmediatePriority = 1;
          var UserBlockingPriority = 2;
          var NormalPriority = 3;
          var LowPriority = 4;
          var IdlePriority = 5;
          function markTaskErrored(task2, ms) {
          }
          var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
          if (hasPerformanceNow) {
            var localPerformance = performance;
            exports2.unstable_now = function() {
              return localPerformance.now();
            };
          } else {
            var localDate = Date;
            var initialTime = localDate.now();
            exports2.unstable_now = function() {
              return localDate.now() - initialTime;
            };
          }
          var maxSigned31BitInt = 1073741823;
          var IMMEDIATE_PRIORITY_TIMEOUT = -1;
          var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
          var NORMAL_PRIORITY_TIMEOUT = 5e3;
          var LOW_PRIORITY_TIMEOUT = 1e4;
          var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
          var taskQueue = [];
          var timerQueue = [];
          var taskIdCounter = 1;
          var currentTask = null;
          var currentPriorityLevel = NormalPriority;
          var isPerformingWork = false;
          var isHostCallbackScheduled = false;
          var isHostTimeoutScheduled = false;
          var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
          var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
          var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
          var isInputPending = typeof navigator !== "undefined" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
          function advanceTimers(currentTime) {
            var timer = peek(timerQueue);
            while (timer !== null) {
              if (timer.callback === null) {
                pop(timerQueue);
              } else if (timer.startTime <= currentTime) {
                pop(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push(taskQueue, timer);
              } else {
                return;
              }
              timer = peek(timerQueue);
            }
          }
          function handleTimeout(currentTime) {
            isHostTimeoutScheduled = false;
            advanceTimers(currentTime);
            if (!isHostCallbackScheduled) {
              if (peek(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              } else {
                var firstTimer = peek(timerQueue);
                if (firstTimer !== null) {
                  requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                }
              }
            }
          }
          function flushWork(hasTimeRemaining, initialTime2) {
            isHostCallbackScheduled = false;
            if (isHostTimeoutScheduled) {
              isHostTimeoutScheduled = false;
              cancelHostTimeout();
            }
            isPerformingWork = true;
            var previousPriorityLevel = currentPriorityLevel;
            try {
              if (enableProfiling) {
                try {
                  return workLoop(hasTimeRemaining, initialTime2);
                } catch (error2) {
                  if (currentTask !== null) {
                    var currentTime = exports2.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                  }
                  throw error2;
                }
              } else {
                return workLoop(hasTimeRemaining, initialTime2);
              }
            } finally {
              currentTask = null;
              currentPriorityLevel = previousPriorityLevel;
              isPerformingWork = false;
            }
          }
          function workLoop(hasTimeRemaining, initialTime2) {
            var currentTime = initialTime2;
            advanceTimers(currentTime);
            currentTask = peek(taskQueue);
            while (currentTask !== null && !enableSchedulerDebugging) {
              if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
                break;
              }
              var callback = currentTask.callback;
              if (typeof callback === "function") {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports2.unstable_now();
                if (typeof continuationCallback === "function") {
                  currentTask.callback = continuationCallback;
                } else {
                  if (currentTask === peek(taskQueue)) {
                    pop(taskQueue);
                  }
                }
                advanceTimers(currentTime);
              } else {
                pop(taskQueue);
              }
              currentTask = peek(taskQueue);
            }
            if (currentTask !== null) {
              return true;
            } else {
              var firstTimer = peek(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
              return false;
            }
          }
          function unstable_runWithPriority(priorityLevel, eventHandler) {
            switch (priorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
              case LowPriority:
              case IdlePriority:
                break;
              default:
                priorityLevel = NormalPriority;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_next(eventHandler) {
            var priorityLevel;
            switch (currentPriorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
                priorityLevel = NormalPriority;
                break;
              default:
                priorityLevel = currentPriorityLevel;
                break;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_wrapCallback(callback) {
            var parentPriorityLevel = currentPriorityLevel;
            return function() {
              var previousPriorityLevel = currentPriorityLevel;
              currentPriorityLevel = parentPriorityLevel;
              try {
                return callback.apply(this, arguments);
              } finally {
                currentPriorityLevel = previousPriorityLevel;
              }
            };
          }
          function unstable_scheduleCallback(priorityLevel, callback, options) {
            var currentTime = exports2.unstable_now();
            var startTime2;
            if (typeof options === "object" && options !== null) {
              var delay = options.delay;
              if (typeof delay === "number" && delay > 0) {
                startTime2 = currentTime + delay;
              } else {
                startTime2 = currentTime;
              }
            } else {
              startTime2 = currentTime;
            }
            var timeout;
            switch (priorityLevel) {
              case ImmediatePriority:
                timeout = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
              case UserBlockingPriority:
                timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
              case IdlePriority:
                timeout = IDLE_PRIORITY_TIMEOUT;
                break;
              case LowPriority:
                timeout = LOW_PRIORITY_TIMEOUT;
                break;
              case NormalPriority:
              default:
                timeout = NORMAL_PRIORITY_TIMEOUT;
                break;
            }
            var expirationTime = startTime2 + timeout;
            var newTask = {
              id: taskIdCounter++,
              callback,
              priorityLevel,
              startTime: startTime2,
              expirationTime,
              sortIndex: -1
            };
            if (startTime2 > currentTime) {
              newTask.sortIndex = startTime2;
              push(timerQueue, newTask);
              if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
                if (isHostTimeoutScheduled) {
                  cancelHostTimeout();
                } else {
                  isHostTimeoutScheduled = true;
                }
                requestHostTimeout(handleTimeout, startTime2 - currentTime);
              }
            } else {
              newTask.sortIndex = expirationTime;
              push(taskQueue, newTask);
              if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              }
            }
            return newTask;
          }
          function unstable_pauseExecution() {
          }
          function unstable_continueExecution() {
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          function unstable_getFirstCallbackNode() {
            return peek(taskQueue);
          }
          function unstable_cancelCallback(task2) {
            task2.callback = null;
          }
          function unstable_getCurrentPriorityLevel() {
            return currentPriorityLevel;
          }
          var isMessageLoopRunning = false;
          var scheduledHostCallback = null;
          var taskTimeoutID = -1;
          var frameInterval = frameYieldMs;
          var startTime = -1;
          function shouldYieldToHost() {
            var timeElapsed = exports2.unstable_now() - startTime;
            if (timeElapsed < frameInterval) {
              return false;
            }
            return true;
          }
          function requestPaint() {
          }
          function forceFrameRate(fps) {
            if (fps < 0 || fps > 125) {
              console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
              return;
            }
            if (fps > 0) {
              frameInterval = Math.floor(1e3 / fps);
            } else {
              frameInterval = frameYieldMs;
            }
          }
          var performWorkUntilDeadline = function() {
            if (scheduledHostCallback !== null) {
              var currentTime = exports2.unstable_now();
              startTime = currentTime;
              var hasTimeRemaining = true;
              var hasMoreWork = true;
              try {
                hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
              } finally {
                if (hasMoreWork) {
                  schedulePerformWorkUntilDeadline();
                } else {
                  isMessageLoopRunning = false;
                  scheduledHostCallback = null;
                }
              }
            } else {
              isMessageLoopRunning = false;
            }
          };
          var schedulePerformWorkUntilDeadline;
          if (typeof localSetImmediate === "function") {
            schedulePerformWorkUntilDeadline = function() {
              localSetImmediate(performWorkUntilDeadline);
            };
          } else if (typeof MessageChannel !== "undefined") {
            var channel = new MessageChannel();
            var port = channel.port2;
            channel.port1.onmessage = performWorkUntilDeadline;
            schedulePerformWorkUntilDeadline = function() {
              port.postMessage(null);
            };
          } else {
            schedulePerformWorkUntilDeadline = function() {
              localSetTimeout(performWorkUntilDeadline, 0);
            };
          }
          function requestHostCallback(callback) {
            scheduledHostCallback = callback;
            if (!isMessageLoopRunning) {
              isMessageLoopRunning = true;
              schedulePerformWorkUntilDeadline();
            }
          }
          function requestHostTimeout(callback, ms) {
            taskTimeoutID = localSetTimeout(function() {
              callback(exports2.unstable_now());
            }, ms);
          }
          function cancelHostTimeout() {
            localClearTimeout(taskTimeoutID);
            taskTimeoutID = -1;
          }
          var unstable_requestPaint = requestPaint;
          var unstable_Profiling = null;
          exports2.unstable_IdlePriority = IdlePriority;
          exports2.unstable_ImmediatePriority = ImmediatePriority;
          exports2.unstable_LowPriority = LowPriority;
          exports2.unstable_NormalPriority = NormalPriority;
          exports2.unstable_Profiling = unstable_Profiling;
          exports2.unstable_UserBlockingPriority = UserBlockingPriority;
          exports2.unstable_cancelCallback = unstable_cancelCallback;
          exports2.unstable_continueExecution = unstable_continueExecution;
          exports2.unstable_forceFrameRate = forceFrameRate;
          exports2.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
          exports2.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
          exports2.unstable_next = unstable_next;
          exports2.unstable_pauseExecution = unstable_pauseExecution;
          exports2.unstable_requestPaint = unstable_requestPaint;
          exports2.unstable_runWithPriority = unstable_runWithPriority;
          exports2.unstable_scheduleCallback = unstable_scheduleCallback;
          exports2.unstable_shouldYield = shouldYieldToHost;
          exports2.unstable_wrapCallback = unstable_wrapCallback;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/scheduler/index.js
  var require_scheduler = __commonJS({
    "node_modules/scheduler/index.js"(exports2, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_scheduler_development();
      }
    }
  });

  // node_modules/react-dom/cjs/react-dom.development.js
  var require_react_dom_development = __commonJS({
    "node_modules/react-dom/cjs/react-dom.development.js"(exports2) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var React434 = require_react();
          var Scheduler = require_scheduler();
          var ReactSharedInternals = React434.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          var suppressWarning = false;
          function setSuppressWarning(newSuppressWarning) {
            {
              suppressWarning = newSuppressWarning;
            }
          }
          function warn3(format3) {
            {
              if (!suppressWarning) {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format3, args);
              }
            }
          }
          function error2(format3) {
            {
              if (!suppressWarning) {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format3, args);
              }
            }
          }
          function printWarning(level, format3, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format3 += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format3);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var FunctionComponent = 0;
          var ClassComponent = 1;
          var IndeterminateComponent = 2;
          var HostRoot = 3;
          var HostPortal = 4;
          var HostComponent = 5;
          var HostText = 6;
          var Fragment29 = 7;
          var Mode = 8;
          var ContextConsumer = 9;
          var ContextProvider = 10;
          var ForwardRef = 11;
          var Profiler = 12;
          var SuspenseComponent = 13;
          var MemoComponent = 14;
          var SimpleMemoComponent = 15;
          var LazyComponent = 16;
          var IncompleteClassComponent = 17;
          var DehydratedFragment = 18;
          var SuspenseListComponent = 19;
          var ScopeComponent = 21;
          var OffscreenComponent = 22;
          var LegacyHiddenComponent = 23;
          var CacheComponent = 24;
          var TracingMarkerComponent = 25;
          var enableClientRenderFallbackOnTextMismatch = true;
          var enableNewReconciler = false;
          var enableLazyContextPropagation = false;
          var enableLegacyHidden = false;
          var enableSuspenseAvoidThisFallback = false;
          var disableCommentsAsDOMContainers = true;
          var enableCustomElementPropertySupport = false;
          var warnAboutStringRefs = false;
          var enableSchedulingProfiler = true;
          var enableProfilerTimer = true;
          var enableProfilerCommitHooks = true;
          var allNativeEvents = /* @__PURE__ */ new Set();
          var registrationNameDependencies = {};
          var possibleRegistrationNames = {};
          function registerTwoPhaseEvent(registrationName, dependencies) {
            registerDirectEvent(registrationName, dependencies);
            registerDirectEvent(registrationName + "Capture", dependencies);
          }
          function registerDirectEvent(registrationName, dependencies) {
            {
              if (registrationNameDependencies[registrationName]) {
                error2("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
              }
            }
            registrationNameDependencies[registrationName] = dependencies;
            {
              var lowerCasedName = registrationName.toLowerCase();
              possibleRegistrationNames[lowerCasedName] = registrationName;
              if (registrationName === "onDoubleClick") {
                possibleRegistrationNames.ondblclick = registrationName;
              }
            }
            for (var i3 = 0; i3 < dependencies.length; i3++) {
              allNativeEvents.add(dependencies[i3]);
            }
          }
          var canUseDOM3 = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
          var hasOwnProperty2 = Object.prototype.hasOwnProperty;
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type4 = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type4;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e3) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkAttributeStringCoercion(value, attributeName) {
            {
              if (willCoercionThrow(value)) {
                error2("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error2("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkPropStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error2("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkCSSPropertyStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error2("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkHtmlStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error2("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkFormFieldValueStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error2("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          var RESERVED = 0;
          var STRING = 1;
          var BOOLEANISH_STRING = 2;
          var BOOLEAN = 3;
          var OVERLOADED_BOOLEAN = 4;
          var NUMERIC = 5;
          var POSITIVE_NUMERIC = 6;
          var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
          var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
          var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var illegalAttributeNameCache = {};
          var validatedAttributeNameCache = {};
          function isAttributeNameSafe(attributeName) {
            if (hasOwnProperty2.call(validatedAttributeNameCache, attributeName)) {
              return true;
            }
            if (hasOwnProperty2.call(illegalAttributeNameCache, attributeName)) {
              return false;
            }
            if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
              validatedAttributeNameCache[attributeName] = true;
              return true;
            }
            illegalAttributeNameCache[attributeName] = true;
            {
              error2("Invalid attribute name: `%s`", attributeName);
            }
            return false;
          }
          function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null) {
              return propertyInfo.type === RESERVED;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
              return true;
            }
            return false;
          }
          function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null && propertyInfo.type === RESERVED) {
              return false;
            }
            switch (typeof value) {
              case "function":
              case "symbol":
                return true;
              case "boolean": {
                if (isCustomComponentTag) {
                  return false;
                }
                if (propertyInfo !== null) {
                  return !propertyInfo.acceptsBooleans;
                } else {
                  var prefix3 = name.toLowerCase().slice(0, 5);
                  return prefix3 !== "data-" && prefix3 !== "aria-";
                }
              }
              default:
                return false;
            }
          }
          function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
            if (value === null || typeof value === "undefined") {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
              return true;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (propertyInfo !== null) {
              switch (propertyInfo.type) {
                case BOOLEAN:
                  return !value;
                case OVERLOADED_BOOLEAN:
                  return value === false;
                case NUMERIC:
                  return isNaN(value);
                case POSITIVE_NUMERIC:
                  return isNaN(value) || value < 1;
              }
            }
            return false;
          }
          function getPropertyInfo(name) {
            return properties.hasOwnProperty(name) ? properties[name] : null;
          }
          function PropertyInfoRecord(name, type4, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
            this.acceptsBooleans = type4 === BOOLEANISH_STRING || type4 === BOOLEAN || type4 === OVERLOADED_BOOLEAN;
            this.attributeName = attributeName;
            this.attributeNamespace = attributeNamespace;
            this.mustUseProperty = mustUseProperty;
            this.propertyName = name;
            this.type = type4;
            this.sanitizeURL = sanitizeURL2;
            this.removeEmptyString = removeEmptyString;
          }
          var properties = {};
          var reservedProps = [
            "children",
            "dangerouslySetInnerHTML",
            // TODO: This prevents the assignment of defaultValue to regular
            // elements (not just inputs). Now that ReactDOMInput assigns to the
            // defaultValue property -- do we need this?
            "defaultValue",
            "defaultChecked",
            "innerHTML",
            "suppressContentEditableWarning",
            "suppressHydrationWarning",
            "style"
          ];
          reservedProps.forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              RESERVED,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
            var name = _ref[0], attributeName = _ref[1];
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "allowFullScreen",
            "async",
            // Note: there is a special case that prevents it from being written to the DOM
            // on the client side because the browsers are inconsistent. Instead we call focus().
            "autoFocus",
            "autoPlay",
            "controls",
            "default",
            "defer",
            "disabled",
            "disablePictureInPicture",
            "disableRemotePlayback",
            "formNoValidate",
            "hidden",
            "loop",
            "noModule",
            "noValidate",
            "open",
            "playsInline",
            "readOnly",
            "required",
            "reversed",
            "scoped",
            "seamless",
            // Microdata
            "itemScope"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "checked",
            // Note: `option.selected` is not updated if `select.multiple` is
            // disabled with `removeAttribute`. We have special logic for handling this.
            "multiple",
            "muted",
            "selected"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              true,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "capture",
            "download"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              OVERLOADED_BOOLEAN,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "cols",
            "rows",
            "size",
            "span"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              POSITIVE_NUMERIC,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["rowSpan", "start"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              NUMERIC,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var CAMELIZE = /[\-\:]([a-z])/g;
          var capitalize2 = function(token) {
            return token[1].toUpperCase();
          };
          [
            "accent-height",
            "alignment-baseline",
            "arabic-form",
            "baseline-shift",
            "cap-height",
            "clip-path",
            "clip-rule",
            "color-interpolation",
            "color-interpolation-filters",
            "color-profile",
            "color-rendering",
            "dominant-baseline",
            "enable-background",
            "fill-opacity",
            "fill-rule",
            "flood-color",
            "flood-opacity",
            "font-family",
            "font-size",
            "font-size-adjust",
            "font-stretch",
            "font-style",
            "font-variant",
            "font-weight",
            "glyph-name",
            "glyph-orientation-horizontal",
            "glyph-orientation-vertical",
            "horiz-adv-x",
            "horiz-origin-x",
            "image-rendering",
            "letter-spacing",
            "lighting-color",
            "marker-end",
            "marker-mid",
            "marker-start",
            "overline-position",
            "overline-thickness",
            "paint-order",
            "panose-1",
            "pointer-events",
            "rendering-intent",
            "shape-rendering",
            "stop-color",
            "stop-opacity",
            "strikethrough-position",
            "strikethrough-thickness",
            "stroke-dasharray",
            "stroke-dashoffset",
            "stroke-linecap",
            "stroke-linejoin",
            "stroke-miterlimit",
            "stroke-opacity",
            "stroke-width",
            "text-anchor",
            "text-decoration",
            "text-rendering",
            "underline-position",
            "underline-thickness",
            "unicode-bidi",
            "unicode-range",
            "units-per-em",
            "v-alphabetic",
            "v-hanging",
            "v-ideographic",
            "v-mathematical",
            "vector-effect",
            "vert-adv-y",
            "vert-origin-x",
            "vert-origin-y",
            "word-spacing",
            "writing-mode",
            "xmlns:xlink",
            "x-height"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize2);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xlink:actuate",
            "xlink:arcrole",
            "xlink:role",
            "xlink:show",
            "xlink:title",
            "xlink:type"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize2);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/1999/xlink",
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xml:base",
            "xml:lang",
            "xml:space"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize2);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/XML/1998/namespace",
              false,
              // sanitizeURL
              false
            );
          });
          ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var xlinkHref = "xlinkHref";
          properties[xlinkHref] = new PropertyInfoRecord(
            "xlinkHref",
            STRING,
            false,
            // mustUseProperty
            "xlink:href",
            "http://www.w3.org/1999/xlink",
            true,
            // sanitizeURL
            false
          );
          ["src", "href", "action", "formAction"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              true,
              // sanitizeURL
              true
            );
          });
          var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
          var didWarn = false;
          function sanitizeURL(url2) {
            {
              if (!didWarn && isJavaScriptProtocol.test(url2)) {
                didWarn = true;
                error2("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url2));
              }
            }
          }
          function getValueForProperty(node, name, expected, propertyInfo) {
            {
              if (propertyInfo.mustUseProperty) {
                var propertyName = propertyInfo.propertyName;
                return node[propertyName];
              } else {
                {
                  checkAttributeStringCoercion(expected, name);
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL("" + expected);
                }
                var attributeName = propertyInfo.attributeName;
                var stringValue = null;
                if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                  if (node.hasAttribute(attributeName)) {
                    var value = node.getAttribute(attributeName);
                    if (value === "") {
                      return true;
                    }
                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                      return value;
                    }
                    if (value === "" + expected) {
                      return expected;
                    }
                    return value;
                  }
                } else if (node.hasAttribute(attributeName)) {
                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return node.getAttribute(attributeName);
                  }
                  if (propertyInfo.type === BOOLEAN) {
                    return expected;
                  }
                  stringValue = node.getAttribute(attributeName);
                }
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return stringValue === null ? expected : stringValue;
                } else if (stringValue === "" + expected) {
                  return expected;
                } else {
                  return stringValue;
                }
              }
            }
          }
          function getValueForAttribute(node, name, expected, isCustomComponentTag) {
            {
              if (!isAttributeNameSafe(name)) {
                return;
              }
              if (!node.hasAttribute(name)) {
                return expected === void 0 ? void 0 : null;
              }
              var value = node.getAttribute(name);
              {
                checkAttributeStringCoercion(expected, name);
              }
              if (value === "" + expected) {
                return expected;
              }
              return value;
            }
          }
          function setValueForProperty(node, name, value, isCustomComponentTag) {
            var propertyInfo = getPropertyInfo(name);
            if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
              return;
            }
            if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
              value = null;
            }
            if (isCustomComponentTag || propertyInfo === null) {
              if (isAttributeNameSafe(name)) {
                var _attributeName = name;
                if (value === null) {
                  node.removeAttribute(_attributeName);
                } else {
                  {
                    checkAttributeStringCoercion(value, name);
                  }
                  node.setAttribute(_attributeName, "" + value);
                }
              }
              return;
            }
            var mustUseProperty = propertyInfo.mustUseProperty;
            if (mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              if (value === null) {
                var type4 = propertyInfo.type;
                node[propertyName] = type4 === BOOLEAN ? false : "";
              } else {
                node[propertyName] = value;
              }
              return;
            }
            var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
            if (value === null) {
              node.removeAttribute(attributeName);
            } else {
              var _type = propertyInfo.type;
              var attributeValue;
              if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
                attributeValue = "";
              } else {
                {
                  {
                    checkAttributeStringCoercion(value, attributeName);
                  }
                  attributeValue = "" + value;
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL(attributeValue.toString());
                }
              }
              if (attributeNamespace) {
                node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
              } else {
                node.setAttribute(attributeName, attributeValue);
              }
            }
          }
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_SCOPE_TYPE = Symbol.for("react.scope");
          var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
          var REACT_CACHE_TYPE = Symbol.for("react.cache");
          var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var assign = Object.assign;
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign({}, props, {
                    value: prevLog
                  }),
                  info: assign({}, props, {
                    value: prevInfo
                  }),
                  warn: assign({}, props, {
                    value: prevWarn
                  }),
                  error: assign({}, props, {
                    value: prevError
                  }),
                  group: assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error2("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix2;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix2 === void 0) {
                try {
                  throw Error();
                } catch (x2) {
                  var match2 = x2.stack.trim().match(/\n( *(at )?)/);
                  prefix2 = match2 && match2[1] || "";
                }
              }
              return "\n" + prefix2 + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn2, construct) {
            if (!fn2 || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn2);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x2) {
                    control = x2;
                  }
                  Reflect.construct(fn2, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x2) {
                    control = x2;
                  }
                  fn2.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x2) {
                  control = x2;
                }
                fn2();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s2 = sampleLines.length - 1;
                var c2 = controlLines.length - 1;
                while (s2 >= 1 && c2 >= 0 && sampleLines[s2] !== controlLines[c2]) {
                  c2--;
                }
                for (; s2 >= 1 && c2 >= 0; s2--, c2--) {
                  if (sampleLines[s2] !== controlLines[c2]) {
                    if (s2 !== 1 || c2 !== 1) {
                      do {
                        s2--;
                        c2--;
                        if (c2 < 0 || sampleLines[s2] !== controlLines[c2]) {
                          var _frame = "\n" + sampleLines[s2].replace(" at new ", " at ");
                          if (fn2.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn2.displayName);
                          }
                          {
                            if (typeof fn2 === "function") {
                              componentFrameCache.set(fn2, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s2 >= 1 && c2 >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn2 ? fn2.displayName || fn2.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn2 === "function") {
                componentFrameCache.set(fn2, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeClassComponentFrame(ctor, source, ownerFn) {
            {
              return describeNativeComponentFrame(ctor, true);
            }
          }
          function describeFunctionComponentFrame(fn2, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn2, false);
            }
          }
          function shouldConstruct(Component20) {
            var prototype3 = Component20.prototype;
            return !!(prototype3 && prototype3.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type4, source, ownerFn) {
            if (type4 == null) {
              return "";
            }
            if (typeof type4 === "function") {
              {
                return describeNativeComponentFrame(type4, shouldConstruct(type4));
              }
            }
            if (typeof type4 === "string") {
              return describeBuiltInComponentFrame(type4);
            }
            switch (type4) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type4 === "object") {
              switch (type4.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type4.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type4.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type4;
                  var payload = lazyComponent._payload;
                  var init2 = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init2(payload), source, ownerFn);
                  } catch (x2) {
                  }
                }
              }
            }
            return "";
          }
          function describeFiber(fiber) {
            var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
            var source = fiber._debugSource;
            switch (fiber.tag) {
              case HostComponent:
                return describeBuiltInComponentFrame(fiber.type);
              case LazyComponent:
                return describeBuiltInComponentFrame("Lazy");
              case SuspenseComponent:
                return describeBuiltInComponentFrame("Suspense");
              case SuspenseListComponent:
                return describeBuiltInComponentFrame("SuspenseList");
              case FunctionComponent:
              case IndeterminateComponent:
              case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type);
              case ForwardRef:
                return describeFunctionComponentFrame(fiber.type.render);
              case ClassComponent:
                return describeClassComponentFrame(fiber.type);
              default:
                return "";
            }
          }
          function getStackByFiberInDevAndProd(workInProgress2) {
            try {
              var info = "";
              var node = workInProgress2;
              do {
                info += describeFiber(node);
                node = node.return;
              } while (node);
              return info;
            } catch (x2) {
              return "\nError generating stack: " + x2.message + "\n" + x2.stack;
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type4) {
            return type4.displayName || "Context";
          }
          function getComponentNameFromType(type4) {
            if (type4 == null) {
              return null;
            }
            {
              if (typeof type4.tag === "number") {
                error2("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type4 === "function") {
              return type4.displayName || type4.name || null;
            }
            if (typeof type4 === "string") {
              return type4;
            }
            switch (type4) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type4 === "object") {
              switch (type4.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context2 = type4;
                  return getContextName(context2) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type4;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type4, type4.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type4.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type4.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type4;
                  var payload = lazyComponent._payload;
                  var init2 = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init2(payload));
                  } catch (x2) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          function getWrappedName$1(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getContextName$1(type4) {
            return type4.displayName || "Context";
          }
          function getComponentNameFromFiber(fiber) {
            var tag = fiber.tag, type4 = fiber.type;
            switch (tag) {
              case CacheComponent:
                return "Cache";
              case ContextConsumer:
                var context2 = type4;
                return getContextName$1(context2) + ".Consumer";
              case ContextProvider:
                var provider = type4;
                return getContextName$1(provider._context) + ".Provider";
              case DehydratedFragment:
                return "DehydratedFragment";
              case ForwardRef:
                return getWrappedName$1(type4, type4.render, "ForwardRef");
              case Fragment29:
                return "Fragment";
              case HostComponent:
                return type4;
              case HostPortal:
                return "Portal";
              case HostRoot:
                return "Root";
              case HostText:
                return "Text";
              case LazyComponent:
                return getComponentNameFromType(type4);
              case Mode:
                if (type4 === REACT_STRICT_MODE_TYPE) {
                  return "StrictMode";
                }
                return "Mode";
              case OffscreenComponent:
                return "Offscreen";
              case Profiler:
                return "Profiler";
              case ScopeComponent:
                return "Scope";
              case SuspenseComponent:
                return "Suspense";
              case SuspenseListComponent:
                return "SuspenseList";
              case TracingMarkerComponent:
                return "TracingMarker";
              case ClassComponent:
              case FunctionComponent:
              case IncompleteClassComponent:
              case IndeterminateComponent:
              case MemoComponent:
              case SimpleMemoComponent:
                if (typeof type4 === "function") {
                  return type4.displayName || type4.name || null;
                }
                if (typeof type4 === "string") {
                  return type4;
                }
                break;
            }
            return null;
          }
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          var current = null;
          var isRendering = false;
          function getCurrentFiberOwnerNameInDevOrNull() {
            {
              if (current === null) {
                return null;
              }
              var owner = current._debugOwner;
              if (owner !== null && typeof owner !== "undefined") {
                return getComponentNameFromFiber(owner);
              }
            }
            return null;
          }
          function getCurrentFiberStackInDev() {
            {
              if (current === null) {
                return "";
              }
              return getStackByFiberInDevAndProd(current);
            }
          }
          function resetCurrentFiber() {
            {
              ReactDebugCurrentFrame.getCurrentStack = null;
              current = null;
              isRendering = false;
            }
          }
          function setCurrentFiber(fiber) {
            {
              ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
              current = fiber;
              isRendering = false;
            }
          }
          function getCurrentFiber() {
            {
              return current;
            }
          }
          function setIsRendering(rendering) {
            {
              isRendering = rendering;
            }
          }
          function toString3(value) {
            return "" + value;
          }
          function getToStringValue(value) {
            switch (typeof value) {
              case "boolean":
              case "number":
              case "string":
              case "undefined":
                return value;
              case "object":
                {
                  checkFormFieldValueStringCoercion(value);
                }
                return value;
              default:
                return "";
            }
          }
          var hasReadOnlyValue = {
            button: true,
            checkbox: true,
            image: true,
            hidden: true,
            radio: true,
            reset: true,
            submit: true
          };
          function checkControlledValueProps(tagName, props) {
            {
              if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
                error2("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
              }
              if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
                error2("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
              }
            }
          }
          function isCheckable(elem) {
            var type4 = elem.type;
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (type4 === "checkbox" || type4 === "radio");
          }
          function getTracker(node) {
            return node._valueTracker;
          }
          function detachTracker(node) {
            node._valueTracker = null;
          }
          function getValueFromNode(node) {
            var value = "";
            if (!node) {
              return value;
            }
            if (isCheckable(node)) {
              value = node.checked ? "true" : "false";
            } else {
              value = node.value;
            }
            return value;
          }
          function trackValueOnNode(node) {
            var valueField = isCheckable(node) ? "checked" : "value";
            var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
            {
              checkFormFieldValueStringCoercion(node[valueField]);
            }
            var currentValue = "" + node[valueField];
            if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
              return;
            }
            var get4 = descriptor.get, set3 = descriptor.set;
            Object.defineProperty(node, valueField, {
              configurable: true,
              get: function() {
                return get4.call(this);
              },
              set: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
                set3.call(this, value);
              }
            });
            Object.defineProperty(node, valueField, {
              enumerable: descriptor.enumerable
            });
            var tracker = {
              getValue: function() {
                return currentValue;
              },
              setValue: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
              },
              stopTracking: function() {
                detachTracker(node);
                delete node[valueField];
              }
            };
            return tracker;
          }
          function track(node) {
            if (getTracker(node)) {
              return;
            }
            node._valueTracker = trackValueOnNode(node);
          }
          function updateValueIfChanged(node) {
            if (!node) {
              return false;
            }
            var tracker = getTracker(node);
            if (!tracker) {
              return true;
            }
            var lastValue = tracker.getValue();
            var nextValue = getValueFromNode(node);
            if (nextValue !== lastValue) {
              tracker.setValue(nextValue);
              return true;
            }
            return false;
          }
          function getActiveElement(doc) {
            doc = doc || (typeof document !== "undefined" ? document : void 0);
            if (typeof doc === "undefined") {
              return null;
            }
            try {
              return doc.activeElement || doc.body;
            } catch (e3) {
              return doc.body;
            }
          }
          var didWarnValueDefaultValue = false;
          var didWarnCheckedDefaultChecked = false;
          var didWarnControlledToUncontrolled = false;
          var didWarnUncontrolledToControlled = false;
          function isControlled(props) {
            var usesChecked = props.type === "checkbox" || props.type === "radio";
            return usesChecked ? props.checked != null : props.value != null;
          }
          function getHostProps(element, props) {
            var node = element;
            var checked = props.checked;
            var hostProps = assign({}, props, {
              defaultChecked: void 0,
              defaultValue: void 0,
              value: void 0,
              checked: checked != null ? checked : node._wrapperState.initialChecked
            });
            return hostProps;
          }
          function initWrapperState(element, props) {
            {
              checkControlledValueProps("input", props);
              if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
                error2("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnCheckedDefaultChecked = true;
              }
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
                error2("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnValueDefaultValue = true;
              }
            }
            var node = element;
            var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
            node._wrapperState = {
              initialChecked: props.checked != null ? props.checked : props.defaultChecked,
              initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
              controlled: isControlled(props)
            };
          }
          function updateChecked(element, props) {
            var node = element;
            var checked = props.checked;
            if (checked != null) {
              setValueForProperty(node, "checked", checked, false);
            }
          }
          function updateWrapper(element, props) {
            var node = element;
            {
              var controlled = isControlled(props);
              if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
                error2("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnUncontrolledToControlled = true;
              }
              if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
                error2("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnControlledToUncontrolled = true;
              }
            }
            updateChecked(element, props);
            var value = getToStringValue(props.value);
            var type4 = props.type;
            if (value != null) {
              if (type4 === "number") {
                if (value === 0 && node.value === "" || // We explicitly want to coerce to number here if possible.
                // eslint-disable-next-line
                node.value != value) {
                  node.value = toString3(value);
                }
              } else if (node.value !== toString3(value)) {
                node.value = toString3(value);
              }
            } else if (type4 === "submit" || type4 === "reset") {
              node.removeAttribute("value");
              return;
            }
            {
              if (props.hasOwnProperty("value")) {
                setDefaultValue(node, props.type, value);
              } else if (props.hasOwnProperty("defaultValue")) {
                setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
              }
            }
            {
              if (props.checked == null && props.defaultChecked != null) {
                node.defaultChecked = !!props.defaultChecked;
              }
            }
          }
          function postMountWrapper(element, props, isHydrating2) {
            var node = element;
            if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
              var type4 = props.type;
              var isButton = type4 === "submit" || type4 === "reset";
              if (isButton && (props.value === void 0 || props.value === null)) {
                return;
              }
              var initialValue = toString3(node._wrapperState.initialValue);
              if (!isHydrating2) {
                {
                  if (initialValue !== node.value) {
                    node.value = initialValue;
                  }
                }
              }
              {
                node.defaultValue = initialValue;
              }
            }
            var name = node.name;
            if (name !== "") {
              node.name = "";
            }
            {
              node.defaultChecked = !node.defaultChecked;
              node.defaultChecked = !!node._wrapperState.initialChecked;
            }
            if (name !== "") {
              node.name = name;
            }
          }
          function restoreControlledState(element, props) {
            var node = element;
            updateWrapper(node, props);
            updateNamedCousins(node, props);
          }
          function updateNamedCousins(rootNode, props) {
            var name = props.name;
            if (props.type === "radio" && name != null) {
              var queryRoot = rootNode;
              while (queryRoot.parentNode) {
                queryRoot = queryRoot.parentNode;
              }
              {
                checkAttributeStringCoercion(name, "name");
              }
              var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
              for (var i3 = 0; i3 < group.length; i3++) {
                var otherNode = group[i3];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                  continue;
                }
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps) {
                  throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                }
                updateValueIfChanged(otherNode);
                updateWrapper(otherNode, otherProps);
              }
            }
          }
          function setDefaultValue(node, type4, value) {
            if (
              // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
              type4 !== "number" || getActiveElement(node.ownerDocument) !== node
            ) {
              if (value == null) {
                node.defaultValue = toString3(node._wrapperState.initialValue);
              } else if (node.defaultValue !== toString3(value)) {
                node.defaultValue = toString3(value);
              }
            }
          }
          var didWarnSelectedSetOnOption = false;
          var didWarnInvalidChild = false;
          var didWarnInvalidInnerHTML = false;
          function validateProps(element, props) {
            {
              if (props.value == null) {
                if (typeof props.children === "object" && props.children !== null) {
                  React434.Children.forEach(props.children, function(child) {
                    if (child == null) {
                      return;
                    }
                    if (typeof child === "string" || typeof child === "number") {
                      return;
                    }
                    if (!didWarnInvalidChild) {
                      didWarnInvalidChild = true;
                      error2("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                    }
                  });
                } else if (props.dangerouslySetInnerHTML != null) {
                  if (!didWarnInvalidInnerHTML) {
                    didWarnInvalidInnerHTML = true;
                    error2("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                  }
                }
              }
              if (props.selected != null && !didWarnSelectedSetOnOption) {
                error2("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                didWarnSelectedSetOnOption = true;
              }
            }
          }
          function postMountWrapper$1(element, props) {
            if (props.value != null) {
              element.setAttribute("value", toString3(getToStringValue(props.value)));
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray2(a2) {
            return isArrayImpl(a2);
          }
          var didWarnValueDefaultValue$1;
          {
            didWarnValueDefaultValue$1 = false;
          }
          function getDeclarationErrorAddendum() {
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) {
              return "\n\nCheck the render method of `" + ownerName + "`.";
            }
            return "";
          }
          var valuePropNames = ["value", "defaultValue"];
          function checkSelectPropTypes(props) {
            {
              checkControlledValueProps("select", props);
              for (var i3 = 0; i3 < valuePropNames.length; i3++) {
                var propName = valuePropNames[i3];
                if (props[propName] == null) {
                  continue;
                }
                var propNameIsArray = isArray2(props[propName]);
                if (props.multiple && !propNameIsArray) {
                  error2("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
                } else if (!props.multiple && propNameIsArray) {
                  error2("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
                }
              }
            }
          }
          function updateOptions(node, multiple, propValue, setDefaultSelected) {
            var options2 = node.options;
            if (multiple) {
              var selectedValues = propValue;
              var selectedValue = {};
              for (var i3 = 0; i3 < selectedValues.length; i3++) {
                selectedValue["$" + selectedValues[i3]] = true;
              }
              for (var _i = 0; _i < options2.length; _i++) {
                var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
                if (options2[_i].selected !== selected) {
                  options2[_i].selected = selected;
                }
                if (selected && setDefaultSelected) {
                  options2[_i].defaultSelected = true;
                }
              }
            } else {
              var _selectedValue = toString3(getToStringValue(propValue));
              var defaultSelected = null;
              for (var _i2 = 0; _i2 < options2.length; _i2++) {
                if (options2[_i2].value === _selectedValue) {
                  options2[_i2].selected = true;
                  if (setDefaultSelected) {
                    options2[_i2].defaultSelected = true;
                  }
                  return;
                }
                if (defaultSelected === null && !options2[_i2].disabled) {
                  defaultSelected = options2[_i2];
                }
              }
              if (defaultSelected !== null) {
                defaultSelected.selected = true;
              }
            }
          }
          function getHostProps$1(element, props) {
            return assign({}, props, {
              value: void 0
            });
          }
          function initWrapperState$1(element, props) {
            var node = element;
            {
              checkSelectPropTypes(props);
            }
            node._wrapperState = {
              wasMultiple: !!props.multiple
            };
            {
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
                error2("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
                didWarnValueDefaultValue$1 = true;
              }
            }
          }
          function postMountWrapper$2(element, props) {
            var node = element;
            node.multiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            } else if (props.defaultValue != null) {
              updateOptions(node, !!props.multiple, props.defaultValue, true);
            }
          }
          function postUpdateWrapper(element, props) {
            var node = element;
            var wasMultiple = node._wrapperState.wasMultiple;
            node._wrapperState.wasMultiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            } else if (wasMultiple !== !!props.multiple) {
              if (props.defaultValue != null) {
                updateOptions(node, !!props.multiple, props.defaultValue, true);
              } else {
                updateOptions(node, !!props.multiple, props.multiple ? [] : "", false);
              }
            }
          }
          function restoreControlledState$1(element, props) {
            var node = element;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            }
          }
          var didWarnValDefaultVal = false;
          function getHostProps$2(element, props) {
            var node = element;
            if (props.dangerouslySetInnerHTML != null) {
              throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
            }
            var hostProps = assign({}, props, {
              value: void 0,
              defaultValue: void 0,
              children: toString3(node._wrapperState.initialValue)
            });
            return hostProps;
          }
          function initWrapperState$2(element, props) {
            var node = element;
            {
              checkControlledValueProps("textarea", props);
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
                error2("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
                didWarnValDefaultVal = true;
              }
            }
            var initialValue = props.value;
            if (initialValue == null) {
              var children = props.children, defaultValue = props.defaultValue;
              if (children != null) {
                {
                  error2("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                }
                {
                  if (defaultValue != null) {
                    throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                  }
                  if (isArray2(children)) {
                    if (children.length > 1) {
                      throw new Error("<textarea> can only have at most one child.");
                    }
                    children = children[0];
                  }
                  defaultValue = children;
                }
              }
              if (defaultValue == null) {
                defaultValue = "";
              }
              initialValue = defaultValue;
            }
            node._wrapperState = {
              initialValue: getToStringValue(initialValue)
            };
          }
          function updateWrapper$1(element, props) {
            var node = element;
            var value = getToStringValue(props.value);
            var defaultValue = getToStringValue(props.defaultValue);
            if (value != null) {
              var newValue = toString3(value);
              if (newValue !== node.value) {
                node.value = newValue;
              }
              if (props.defaultValue == null && node.defaultValue !== newValue) {
                node.defaultValue = newValue;
              }
            }
            if (defaultValue != null) {
              node.defaultValue = toString3(defaultValue);
            }
          }
          function postMountWrapper$3(element, props) {
            var node = element;
            var textContent = node.textContent;
            if (textContent === node._wrapperState.initialValue) {
              if (textContent !== "" && textContent !== null) {
                node.value = textContent;
              }
            }
          }
          function restoreControlledState$2(element, props) {
            updateWrapper$1(element, props);
          }
          var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
          var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
          var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
          function getIntrinsicNamespace(type4) {
            switch (type4) {
              case "svg":
                return SVG_NAMESPACE;
              case "math":
                return MATH_NAMESPACE;
              default:
                return HTML_NAMESPACE;
            }
          }
          function getChildNamespace(parentNamespace, type4) {
            if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
              return getIntrinsicNamespace(type4);
            }
            if (parentNamespace === SVG_NAMESPACE && type4 === "foreignObject") {
              return HTML_NAMESPACE;
            }
            return parentNamespace;
          }
          var createMicrosoftUnsafeLocalFunction = function(func) {
            if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
              return function(arg0, arg1, arg2, arg3) {
                MSApp.execUnsafeLocalFunction(function() {
                  return func(arg0, arg1, arg2, arg3);
                });
              };
            } else {
              return func;
            }
          };
          var reusableSVGContainer;
          var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
            if (node.namespaceURI === SVG_NAMESPACE) {
              if (!("innerHTML" in node)) {
                reusableSVGContainer = reusableSVGContainer || document.createElement("div");
                reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
                var svgNode = reusableSVGContainer.firstChild;
                while (node.firstChild) {
                  node.removeChild(node.firstChild);
                }
                while (svgNode.firstChild) {
                  node.appendChild(svgNode.firstChild);
                }
                return;
              }
            }
            node.innerHTML = html;
          });
          var ELEMENT_NODE = 1;
          var TEXT_NODE = 3;
          var COMMENT_NODE = 8;
          var DOCUMENT_NODE = 9;
          var DOCUMENT_FRAGMENT_NODE = 11;
          var setTextContent = function(node, text) {
            if (text) {
              var firstChild = node.firstChild;
              if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text;
                return;
              }
            }
            node.textContent = text;
          };
          var shorthandToLonghand = {
            animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
            background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
            backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
            border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
            borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
            borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
            borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
            borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
            borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
            borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
            borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
            borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
            borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
            borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
            borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
            columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
            columns: ["columnCount", "columnWidth"],
            flex: ["flexBasis", "flexGrow", "flexShrink"],
            flexFlow: ["flexDirection", "flexWrap"],
            font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
            fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
            gap: ["columnGap", "rowGap"],
            grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
            gridColumn: ["gridColumnEnd", "gridColumnStart"],
            gridColumnGap: ["columnGap"],
            gridGap: ["columnGap", "rowGap"],
            gridRow: ["gridRowEnd", "gridRowStart"],
            gridRowGap: ["rowGap"],
            gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
            margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
            marker: ["markerEnd", "markerMid", "markerStart"],
            mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
            maskPosition: ["maskPositionX", "maskPositionY"],
            outline: ["outlineColor", "outlineStyle", "outlineWidth"],
            overflow: ["overflowX", "overflowY"],
            padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
            placeContent: ["alignContent", "justifyContent"],
            placeItems: ["alignItems", "justifyItems"],
            placeSelf: ["alignSelf", "justifySelf"],
            textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
            textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
            transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
            wordWrap: ["overflowWrap"]
          };
          var isUnitlessNumber = {
            animationIterationCount: true,
            aspectRatio: true,
            borderImageOutset: true,
            borderImageSlice: true,
            borderImageWidth: true,
            boxFlex: true,
            boxFlexGroup: true,
            boxOrdinalGroup: true,
            columnCount: true,
            columns: true,
            flex: true,
            flexGrow: true,
            flexPositive: true,
            flexShrink: true,
            flexNegative: true,
            flexOrder: true,
            gridArea: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowSpan: true,
            gridRowStart: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnSpan: true,
            gridColumnStart: true,
            fontWeight: true,
            lineClamp: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            tabSize: true,
            widows: true,
            zIndex: true,
            zoom: true,
            // SVG-related properties
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeDasharray: true,
            strokeDashoffset: true,
            strokeMiterlimit: true,
            strokeOpacity: true,
            strokeWidth: true
          };
          function prefixKey(prefix3, key2) {
            return prefix3 + key2.charAt(0).toUpperCase() + key2.substring(1);
          }
          var prefixes = ["Webkit", "ms", "Moz", "O"];
          Object.keys(isUnitlessNumber).forEach(function(prop) {
            prefixes.forEach(function(prefix3) {
              isUnitlessNumber[prefixKey(prefix3, prop)] = isUnitlessNumber[prop];
            });
          });
          function dangerousStyleValue(name, value, isCustomProperty) {
            var isEmpty = value == null || typeof value === "boolean" || value === "";
            if (isEmpty) {
              return "";
            }
            if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
              return value + "px";
            }
            {
              checkCSSPropertyStringCoercion(value, name);
            }
            return ("" + value).trim();
          }
          var uppercasePattern = /([A-Z])/g;
          var msPattern = /^ms-/;
          function hyphenateStyleName(name) {
            return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
          }
          var warnValidStyle = function() {
          };
          {
            var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
            var msPattern$1 = /^-ms-/;
            var hyphenPattern = /-(.)/g;
            var badStyleValueWithSemicolonPattern = /;\s*$/;
            var warnedStyleNames = {};
            var warnedStyleValues = {};
            var warnedForNaNValue = false;
            var warnedForInfinityValue = false;
            var camelize = function(string3) {
              return string3.replace(hyphenPattern, function(_24, character) {
                return character.toUpperCase();
              });
            };
            var warnHyphenatedStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error2(
                "Unsupported style property %s. Did you mean %s?",
                name,
                // As Andi Smith suggests
                // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
                // is converted to lowercase `ms`.
                camelize(name.replace(msPattern$1, "ms-"))
              );
            };
            var warnBadVendoredStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error2("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
            };
            var warnStyleValueWithSemicolon = function(name, value) {
              if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
                return;
              }
              warnedStyleValues[value] = true;
              error2(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
            };
            var warnStyleValueIsNaN = function(name, value) {
              if (warnedForNaNValue) {
                return;
              }
              warnedForNaNValue = true;
              error2("`NaN` is an invalid value for the `%s` css style property.", name);
            };
            var warnStyleValueIsInfinity = function(name, value) {
              if (warnedForInfinityValue) {
                return;
              }
              warnedForInfinityValue = true;
              error2("`Infinity` is an invalid value for the `%s` css style property.", name);
            };
            warnValidStyle = function(name, value) {
              if (name.indexOf("-") > -1) {
                warnHyphenatedStyleName(name);
              } else if (badVendoredStyleNamePattern.test(name)) {
                warnBadVendoredStyleName(name);
              } else if (badStyleValueWithSemicolonPattern.test(value)) {
                warnStyleValueWithSemicolon(name, value);
              }
              if (typeof value === "number") {
                if (isNaN(value)) {
                  warnStyleValueIsNaN(name, value);
                } else if (!isFinite(value)) {
                  warnStyleValueIsInfinity(name, value);
                }
              }
            };
          }
          var warnValidStyle$1 = warnValidStyle;
          function createDangerousStringForStyles(styles) {
            {
              var serialized = "";
              var delimiter = "";
              for (var styleName in styles) {
                if (!styles.hasOwnProperty(styleName)) {
                  continue;
                }
                var styleValue = styles[styleName];
                if (styleValue != null) {
                  var isCustomProperty = styleName.indexOf("--") === 0;
                  serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
                  serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                  delimiter = ";";
                }
              }
              return serialized || null;
            }
          }
          function setValueForStyles(node, styles) {
            var style4 = node.style;
            for (var styleName in styles) {
              if (!styles.hasOwnProperty(styleName)) {
                continue;
              }
              var isCustomProperty = styleName.indexOf("--") === 0;
              {
                if (!isCustomProperty) {
                  warnValidStyle$1(styleName, styles[styleName]);
                }
              }
              var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
              if (styleName === "float") {
                styleName = "cssFloat";
              }
              if (isCustomProperty) {
                style4.setProperty(styleName, styleValue);
              } else {
                style4[styleName] = styleValue;
              }
            }
          }
          function isValueEmpty(value) {
            return value == null || typeof value === "boolean" || value === "";
          }
          function expandShorthandMap(styles) {
            var expanded = {};
            for (var key2 in styles) {
              var longhands = shorthandToLonghand[key2] || [key2];
              for (var i3 = 0; i3 < longhands.length; i3++) {
                expanded[longhands[i3]] = key2;
              }
            }
            return expanded;
          }
          function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
            {
              if (!nextStyles) {
                return;
              }
              var expandedUpdates = expandShorthandMap(styleUpdates);
              var expandedStyles = expandShorthandMap(nextStyles);
              var warnedAbout = {};
              for (var key2 in expandedUpdates) {
                var originalKey = expandedUpdates[key2];
                var correctOriginalKey = expandedStyles[key2];
                if (correctOriginalKey && originalKey !== correctOriginalKey) {
                  var warningKey = originalKey + "," + correctOriginalKey;
                  if (warnedAbout[warningKey]) {
                    continue;
                  }
                  warnedAbout[warningKey] = true;
                  error2("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
                }
              }
            }
          }
          var omittedCloseTags = {
            area: true,
            base: true,
            br: true,
            col: true,
            embed: true,
            hr: true,
            img: true,
            input: true,
            keygen: true,
            link: true,
            meta: true,
            param: true,
            source: true,
            track: true,
            wbr: true
            // NOTE: menuitem's close tag should be omitted, but that causes problems.
          };
          var voidElementTags = assign({
            menuitem: true
          }, omittedCloseTags);
          var HTML = "__html";
          function assertValidProps(tag, props) {
            if (!props) {
              return;
            }
            if (voidElementTags[tag]) {
              if (props.children != null || props.dangerouslySetInnerHTML != null) {
                throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
              }
            }
            if (props.dangerouslySetInnerHTML != null) {
              if (props.children != null) {
                throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
              }
              if (typeof props.dangerouslySetInnerHTML !== "object" || !(HTML in props.dangerouslySetInnerHTML)) {
                throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
              }
            }
            {
              if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
                error2("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
              }
            }
            if (props.style != null && typeof props.style !== "object") {
              throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
            }
          }
          function isCustomComponent(tagName, props) {
            if (tagName.indexOf("-") === -1) {
              return typeof props.is === "string";
            }
            switch (tagName) {
              case "annotation-xml":
              case "color-profile":
              case "font-face":
              case "font-face-src":
              case "font-face-uri":
              case "font-face-format":
              case "font-face-name":
              case "missing-glyph":
                return false;
              default:
                return true;
            }
          }
          var possibleStandardNames = {
            // HTML
            accept: "accept",
            acceptcharset: "acceptCharset",
            "accept-charset": "acceptCharset",
            accesskey: "accessKey",
            action: "action",
            allowfullscreen: "allowFullScreen",
            alt: "alt",
            as: "as",
            async: "async",
            autocapitalize: "autoCapitalize",
            autocomplete: "autoComplete",
            autocorrect: "autoCorrect",
            autofocus: "autoFocus",
            autoplay: "autoPlay",
            autosave: "autoSave",
            capture: "capture",
            cellpadding: "cellPadding",
            cellspacing: "cellSpacing",
            challenge: "challenge",
            charset: "charSet",
            checked: "checked",
            children: "children",
            cite: "cite",
            class: "className",
            classid: "classID",
            classname: "className",
            cols: "cols",
            colspan: "colSpan",
            content: "content",
            contenteditable: "contentEditable",
            contextmenu: "contextMenu",
            controls: "controls",
            controlslist: "controlsList",
            coords: "coords",
            crossorigin: "crossOrigin",
            dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
            data: "data",
            datetime: "dateTime",
            default: "default",
            defaultchecked: "defaultChecked",
            defaultvalue: "defaultValue",
            defer: "defer",
            dir: "dir",
            disabled: "disabled",
            disablepictureinpicture: "disablePictureInPicture",
            disableremoteplayback: "disableRemotePlayback",
            download: "download",
            draggable: "draggable",
            enctype: "encType",
            enterkeyhint: "enterKeyHint",
            for: "htmlFor",
            form: "form",
            formmethod: "formMethod",
            formaction: "formAction",
            formenctype: "formEncType",
            formnovalidate: "formNoValidate",
            formtarget: "formTarget",
            frameborder: "frameBorder",
            headers: "headers",
            height: "height",
            hidden: "hidden",
            high: "high",
            href: "href",
            hreflang: "hrefLang",
            htmlfor: "htmlFor",
            httpequiv: "httpEquiv",
            "http-equiv": "httpEquiv",
            icon: "icon",
            id: "id",
            imagesizes: "imageSizes",
            imagesrcset: "imageSrcSet",
            innerhtml: "innerHTML",
            inputmode: "inputMode",
            integrity: "integrity",
            is: "is",
            itemid: "itemID",
            itemprop: "itemProp",
            itemref: "itemRef",
            itemscope: "itemScope",
            itemtype: "itemType",
            keyparams: "keyParams",
            keytype: "keyType",
            kind: "kind",
            label: "label",
            lang: "lang",
            list: "list",
            loop: "loop",
            low: "low",
            manifest: "manifest",
            marginwidth: "marginWidth",
            marginheight: "marginHeight",
            max: "max",
            maxlength: "maxLength",
            media: "media",
            mediagroup: "mediaGroup",
            method: "method",
            min: "min",
            minlength: "minLength",
            multiple: "multiple",
            muted: "muted",
            name: "name",
            nomodule: "noModule",
            nonce: "nonce",
            novalidate: "noValidate",
            open: "open",
            optimum: "optimum",
            pattern: "pattern",
            placeholder: "placeholder",
            playsinline: "playsInline",
            poster: "poster",
            preload: "preload",
            profile: "profile",
            radiogroup: "radioGroup",
            readonly: "readOnly",
            referrerpolicy: "referrerPolicy",
            rel: "rel",
            required: "required",
            reversed: "reversed",
            role: "role",
            rows: "rows",
            rowspan: "rowSpan",
            sandbox: "sandbox",
            scope: "scope",
            scoped: "scoped",
            scrolling: "scrolling",
            seamless: "seamless",
            selected: "selected",
            shape: "shape",
            size: "size",
            sizes: "sizes",
            span: "span",
            spellcheck: "spellCheck",
            src: "src",
            srcdoc: "srcDoc",
            srclang: "srcLang",
            srcset: "srcSet",
            start: "start",
            step: "step",
            style: "style",
            summary: "summary",
            tabindex: "tabIndex",
            target: "target",
            title: "title",
            type: "type",
            usemap: "useMap",
            value: "value",
            width: "width",
            wmode: "wmode",
            wrap: "wrap",
            // SVG
            about: "about",
            accentheight: "accentHeight",
            "accent-height": "accentHeight",
            accumulate: "accumulate",
            additive: "additive",
            alignmentbaseline: "alignmentBaseline",
            "alignment-baseline": "alignmentBaseline",
            allowreorder: "allowReorder",
            alphabetic: "alphabetic",
            amplitude: "amplitude",
            arabicform: "arabicForm",
            "arabic-form": "arabicForm",
            ascent: "ascent",
            attributename: "attributeName",
            attributetype: "attributeType",
            autoreverse: "autoReverse",
            azimuth: "azimuth",
            basefrequency: "baseFrequency",
            baselineshift: "baselineShift",
            "baseline-shift": "baselineShift",
            baseprofile: "baseProfile",
            bbox: "bbox",
            begin: "begin",
            bias: "bias",
            by: "by",
            calcmode: "calcMode",
            capheight: "capHeight",
            "cap-height": "capHeight",
            clip: "clip",
            clippath: "clipPath",
            "clip-path": "clipPath",
            clippathunits: "clipPathUnits",
            cliprule: "clipRule",
            "clip-rule": "clipRule",
            color: "color",
            colorinterpolation: "colorInterpolation",
            "color-interpolation": "colorInterpolation",
            colorinterpolationfilters: "colorInterpolationFilters",
            "color-interpolation-filters": "colorInterpolationFilters",
            colorprofile: "colorProfile",
            "color-profile": "colorProfile",
            colorrendering: "colorRendering",
            "color-rendering": "colorRendering",
            contentscripttype: "contentScriptType",
            contentstyletype: "contentStyleType",
            cursor: "cursor",
            cx: "cx",
            cy: "cy",
            d: "d",
            datatype: "datatype",
            decelerate: "decelerate",
            descent: "descent",
            diffuseconstant: "diffuseConstant",
            direction: "direction",
            display: "display",
            divisor: "divisor",
            dominantbaseline: "dominantBaseline",
            "dominant-baseline": "dominantBaseline",
            dur: "dur",
            dx: "dx",
            dy: "dy",
            edgemode: "edgeMode",
            elevation: "elevation",
            enablebackground: "enableBackground",
            "enable-background": "enableBackground",
            end: "end",
            exponent: "exponent",
            externalresourcesrequired: "externalResourcesRequired",
            fill: "fill",
            fillopacity: "fillOpacity",
            "fill-opacity": "fillOpacity",
            fillrule: "fillRule",
            "fill-rule": "fillRule",
            filter: "filter",
            filterres: "filterRes",
            filterunits: "filterUnits",
            floodopacity: "floodOpacity",
            "flood-opacity": "floodOpacity",
            floodcolor: "floodColor",
            "flood-color": "floodColor",
            focusable: "focusable",
            fontfamily: "fontFamily",
            "font-family": "fontFamily",
            fontsize: "fontSize",
            "font-size": "fontSize",
            fontsizeadjust: "fontSizeAdjust",
            "font-size-adjust": "fontSizeAdjust",
            fontstretch: "fontStretch",
            "font-stretch": "fontStretch",
            fontstyle: "fontStyle",
            "font-style": "fontStyle",
            fontvariant: "fontVariant",
            "font-variant": "fontVariant",
            fontweight: "fontWeight",
            "font-weight": "fontWeight",
            format: "format",
            from: "from",
            fx: "fx",
            fy: "fy",
            g1: "g1",
            g2: "g2",
            glyphname: "glyphName",
            "glyph-name": "glyphName",
            glyphorientationhorizontal: "glyphOrientationHorizontal",
            "glyph-orientation-horizontal": "glyphOrientationHorizontal",
            glyphorientationvertical: "glyphOrientationVertical",
            "glyph-orientation-vertical": "glyphOrientationVertical",
            glyphref: "glyphRef",
            gradienttransform: "gradientTransform",
            gradientunits: "gradientUnits",
            hanging: "hanging",
            horizadvx: "horizAdvX",
            "horiz-adv-x": "horizAdvX",
            horizoriginx: "horizOriginX",
            "horiz-origin-x": "horizOriginX",
            ideographic: "ideographic",
            imagerendering: "imageRendering",
            "image-rendering": "imageRendering",
            in2: "in2",
            in: "in",
            inlist: "inlist",
            intercept: "intercept",
            k1: "k1",
            k2: "k2",
            k3: "k3",
            k4: "k4",
            k: "k",
            kernelmatrix: "kernelMatrix",
            kernelunitlength: "kernelUnitLength",
            kerning: "kerning",
            keypoints: "keyPoints",
            keysplines: "keySplines",
            keytimes: "keyTimes",
            lengthadjust: "lengthAdjust",
            letterspacing: "letterSpacing",
            "letter-spacing": "letterSpacing",
            lightingcolor: "lightingColor",
            "lighting-color": "lightingColor",
            limitingconeangle: "limitingConeAngle",
            local: "local",
            markerend: "markerEnd",
            "marker-end": "markerEnd",
            markerheight: "markerHeight",
            markermid: "markerMid",
            "marker-mid": "markerMid",
            markerstart: "markerStart",
            "marker-start": "markerStart",
            markerunits: "markerUnits",
            markerwidth: "markerWidth",
            mask: "mask",
            maskcontentunits: "maskContentUnits",
            maskunits: "maskUnits",
            mathematical: "mathematical",
            mode: "mode",
            numoctaves: "numOctaves",
            offset: "offset",
            opacity: "opacity",
            operator: "operator",
            order: "order",
            orient: "orient",
            orientation: "orientation",
            origin: "origin",
            overflow: "overflow",
            overlineposition: "overlinePosition",
            "overline-position": "overlinePosition",
            overlinethickness: "overlineThickness",
            "overline-thickness": "overlineThickness",
            paintorder: "paintOrder",
            "paint-order": "paintOrder",
            panose1: "panose1",
            "panose-1": "panose1",
            pathlength: "pathLength",
            patterncontentunits: "patternContentUnits",
            patterntransform: "patternTransform",
            patternunits: "patternUnits",
            pointerevents: "pointerEvents",
            "pointer-events": "pointerEvents",
            points: "points",
            pointsatx: "pointsAtX",
            pointsaty: "pointsAtY",
            pointsatz: "pointsAtZ",
            prefix: "prefix",
            preservealpha: "preserveAlpha",
            preserveaspectratio: "preserveAspectRatio",
            primitiveunits: "primitiveUnits",
            property: "property",
            r: "r",
            radius: "radius",
            refx: "refX",
            refy: "refY",
            renderingintent: "renderingIntent",
            "rendering-intent": "renderingIntent",
            repeatcount: "repeatCount",
            repeatdur: "repeatDur",
            requiredextensions: "requiredExtensions",
            requiredfeatures: "requiredFeatures",
            resource: "resource",
            restart: "restart",
            result: "result",
            results: "results",
            rotate: "rotate",
            rx: "rx",
            ry: "ry",
            scale: "scale",
            security: "security",
            seed: "seed",
            shaperendering: "shapeRendering",
            "shape-rendering": "shapeRendering",
            slope: "slope",
            spacing: "spacing",
            specularconstant: "specularConstant",
            specularexponent: "specularExponent",
            speed: "speed",
            spreadmethod: "spreadMethod",
            startoffset: "startOffset",
            stddeviation: "stdDeviation",
            stemh: "stemh",
            stemv: "stemv",
            stitchtiles: "stitchTiles",
            stopcolor: "stopColor",
            "stop-color": "stopColor",
            stopopacity: "stopOpacity",
            "stop-opacity": "stopOpacity",
            strikethroughposition: "strikethroughPosition",
            "strikethrough-position": "strikethroughPosition",
            strikethroughthickness: "strikethroughThickness",
            "strikethrough-thickness": "strikethroughThickness",
            string: "string",
            stroke: "stroke",
            strokedasharray: "strokeDasharray",
            "stroke-dasharray": "strokeDasharray",
            strokedashoffset: "strokeDashoffset",
            "stroke-dashoffset": "strokeDashoffset",
            strokelinecap: "strokeLinecap",
            "stroke-linecap": "strokeLinecap",
            strokelinejoin: "strokeLinejoin",
            "stroke-linejoin": "strokeLinejoin",
            strokemiterlimit: "strokeMiterlimit",
            "stroke-miterlimit": "strokeMiterlimit",
            strokewidth: "strokeWidth",
            "stroke-width": "strokeWidth",
            strokeopacity: "strokeOpacity",
            "stroke-opacity": "strokeOpacity",
            suppresscontenteditablewarning: "suppressContentEditableWarning",
            suppresshydrationwarning: "suppressHydrationWarning",
            surfacescale: "surfaceScale",
            systemlanguage: "systemLanguage",
            tablevalues: "tableValues",
            targetx: "targetX",
            targety: "targetY",
            textanchor: "textAnchor",
            "text-anchor": "textAnchor",
            textdecoration: "textDecoration",
            "text-decoration": "textDecoration",
            textlength: "textLength",
            textrendering: "textRendering",
            "text-rendering": "textRendering",
            to: "to",
            transform: "transform",
            typeof: "typeof",
            u1: "u1",
            u2: "u2",
            underlineposition: "underlinePosition",
            "underline-position": "underlinePosition",
            underlinethickness: "underlineThickness",
            "underline-thickness": "underlineThickness",
            unicode: "unicode",
            unicodebidi: "unicodeBidi",
            "unicode-bidi": "unicodeBidi",
            unicoderange: "unicodeRange",
            "unicode-range": "unicodeRange",
            unitsperem: "unitsPerEm",
            "units-per-em": "unitsPerEm",
            unselectable: "unselectable",
            valphabetic: "vAlphabetic",
            "v-alphabetic": "vAlphabetic",
            values: "values",
            vectoreffect: "vectorEffect",
            "vector-effect": "vectorEffect",
            version: "version",
            vertadvy: "vertAdvY",
            "vert-adv-y": "vertAdvY",
            vertoriginx: "vertOriginX",
            "vert-origin-x": "vertOriginX",
            vertoriginy: "vertOriginY",
            "vert-origin-y": "vertOriginY",
            vhanging: "vHanging",
            "v-hanging": "vHanging",
            videographic: "vIdeographic",
            "v-ideographic": "vIdeographic",
            viewbox: "viewBox",
            viewtarget: "viewTarget",
            visibility: "visibility",
            vmathematical: "vMathematical",
            "v-mathematical": "vMathematical",
            vocab: "vocab",
            widths: "widths",
            wordspacing: "wordSpacing",
            "word-spacing": "wordSpacing",
            writingmode: "writingMode",
            "writing-mode": "writingMode",
            x1: "x1",
            x2: "x2",
            x: "x",
            xchannelselector: "xChannelSelector",
            xheight: "xHeight",
            "x-height": "xHeight",
            xlinkactuate: "xlinkActuate",
            "xlink:actuate": "xlinkActuate",
            xlinkarcrole: "xlinkArcrole",
            "xlink:arcrole": "xlinkArcrole",
            xlinkhref: "xlinkHref",
            "xlink:href": "xlinkHref",
            xlinkrole: "xlinkRole",
            "xlink:role": "xlinkRole",
            xlinkshow: "xlinkShow",
            "xlink:show": "xlinkShow",
            xlinktitle: "xlinkTitle",
            "xlink:title": "xlinkTitle",
            xlinktype: "xlinkType",
            "xlink:type": "xlinkType",
            xmlbase: "xmlBase",
            "xml:base": "xmlBase",
            xmllang: "xmlLang",
            "xml:lang": "xmlLang",
            xmlns: "xmlns",
            "xml:space": "xmlSpace",
            xmlnsxlink: "xmlnsXlink",
            "xmlns:xlink": "xmlnsXlink",
            xmlspace: "xmlSpace",
            y1: "y1",
            y2: "y2",
            y: "y",
            ychannelselector: "yChannelSelector",
            z: "z",
            zoomandpan: "zoomAndPan"
          };
          var ariaProperties = {
            "aria-current": 0,
            // state
            "aria-description": 0,
            "aria-details": 0,
            "aria-disabled": 0,
            // state
            "aria-hidden": 0,
            // state
            "aria-invalid": 0,
            // state
            "aria-keyshortcuts": 0,
            "aria-label": 0,
            "aria-roledescription": 0,
            // Widget Attributes
            "aria-autocomplete": 0,
            "aria-checked": 0,
            "aria-expanded": 0,
            "aria-haspopup": 0,
            "aria-level": 0,
            "aria-modal": 0,
            "aria-multiline": 0,
            "aria-multiselectable": 0,
            "aria-orientation": 0,
            "aria-placeholder": 0,
            "aria-pressed": 0,
            "aria-readonly": 0,
            "aria-required": 0,
            "aria-selected": 0,
            "aria-sort": 0,
            "aria-valuemax": 0,
            "aria-valuemin": 0,
            "aria-valuenow": 0,
            "aria-valuetext": 0,
            // Live Region Attributes
            "aria-atomic": 0,
            "aria-busy": 0,
            "aria-live": 0,
            "aria-relevant": 0,
            // Drag-and-Drop Attributes
            "aria-dropeffect": 0,
            "aria-grabbed": 0,
            // Relationship Attributes
            "aria-activedescendant": 0,
            "aria-colcount": 0,
            "aria-colindex": 0,
            "aria-colspan": 0,
            "aria-controls": 0,
            "aria-describedby": 0,
            "aria-errormessage": 0,
            "aria-flowto": 0,
            "aria-labelledby": 0,
            "aria-owns": 0,
            "aria-posinset": 0,
            "aria-rowcount": 0,
            "aria-rowindex": 0,
            "aria-rowspan": 0,
            "aria-setsize": 0
          };
          var warnedProperties = {};
          var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          function validateProperty(tagName, name) {
            {
              if (hasOwnProperty2.call(warnedProperties, name) && warnedProperties[name]) {
                return true;
              }
              if (rARIACamel.test(name)) {
                var ariaName = "aria-" + name.slice(4).toLowerCase();
                var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
                if (correctName == null) {
                  error2("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                  warnedProperties[name] = true;
                  return true;
                }
                if (name !== correctName) {
                  error2("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
              if (rARIA.test(name)) {
                var lowerCasedName = name.toLowerCase();
                var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
                if (standardName == null) {
                  warnedProperties[name] = true;
                  return false;
                }
                if (name !== standardName) {
                  error2("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
            }
            return true;
          }
          function warnInvalidARIAProps(type4, props) {
            {
              var invalidProps = [];
              for (var key2 in props) {
                var isValid = validateProperty(type4, key2);
                if (!isValid) {
                  invalidProps.push(key2);
                }
              }
              var unknownPropString = invalidProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (invalidProps.length === 1) {
                error2("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type4);
              } else if (invalidProps.length > 1) {
                error2("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type4);
              }
            }
          }
          function validateProperties(type4, props) {
            if (isCustomComponent(type4, props)) {
              return;
            }
            warnInvalidARIAProps(type4, props);
          }
          var didWarnValueNull = false;
          function validateProperties$1(type4, props) {
            {
              if (type4 !== "input" && type4 !== "textarea" && type4 !== "select") {
                return;
              }
              if (props != null && props.value === null && !didWarnValueNull) {
                didWarnValueNull = true;
                if (type4 === "select" && props.multiple) {
                  error2("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type4);
                } else {
                  error2("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type4);
                }
              }
            }
          }
          var validateProperty$1 = function() {
          };
          {
            var warnedProperties$1 = {};
            var EVENT_NAME_REGEX = /^on./;
            var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
            var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
            var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
            validateProperty$1 = function(tagName, name, value, eventRegistry) {
              if (hasOwnProperty2.call(warnedProperties$1, name) && warnedProperties$1[name]) {
                return true;
              }
              var lowerCasedName = name.toLowerCase();
              if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
                error2("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (eventRegistry != null) {
                var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
                if (registrationNameDependencies2.hasOwnProperty(name)) {
                  return true;
                }
                var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
                if (registrationName != null) {
                  error2("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                  warnedProperties$1[name] = true;
                  return true;
                }
                if (EVENT_NAME_REGEX.test(name)) {
                  error2("Unknown event handler property `%s`. It will be ignored.", name);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (EVENT_NAME_REGEX.test(name)) {
                if (INVALID_EVENT_NAME_REGEX.test(name)) {
                  error2("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
                return true;
              }
              if (lowerCasedName === "innerhtml") {
                error2("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "aria") {
                error2("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
                error2("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "number" && isNaN(value)) {
                error2("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
                warnedProperties$1[name] = true;
                return true;
              }
              var propertyInfo = getPropertyInfo(name);
              var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
              if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                var standardName = possibleStandardNames[lowerCasedName];
                if (standardName !== name) {
                  error2("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (!isReserved && name !== lowerCasedName) {
                error2("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                if (value) {
                  error2('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
                } else {
                  error2('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (isReserved) {
                return true;
              }
              if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                warnedProperties$1[name] = true;
                return false;
              }
              if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
                error2("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
                warnedProperties$1[name] = true;
                return true;
              }
              return true;
            };
          }
          var warnUnknownProperties = function(type4, props, eventRegistry) {
            {
              var unknownProps = [];
              for (var key2 in props) {
                var isValid = validateProperty$1(type4, key2, props[key2], eventRegistry);
                if (!isValid) {
                  unknownProps.push(key2);
                }
              }
              var unknownPropString = unknownProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (unknownProps.length === 1) {
                error2("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type4);
              } else if (unknownProps.length > 1) {
                error2("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type4);
              }
            }
          };
          function validateProperties$2(type4, props, eventRegistry) {
            if (isCustomComponent(type4, props)) {
              return;
            }
            warnUnknownProperties(type4, props, eventRegistry);
          }
          var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
          var IS_NON_DELEGATED = 1 << 1;
          var IS_CAPTURE_PHASE = 1 << 2;
          var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
          var currentReplayingEvent = null;
          function setReplayingEvent(event) {
            {
              if (currentReplayingEvent !== null) {
                error2("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = event;
          }
          function resetReplayingEvent() {
            {
              if (currentReplayingEvent === null) {
                error2("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = null;
          }
          function isReplayingEvent(event) {
            return event === currentReplayingEvent;
          }
          function getEventTarget(nativeEvent) {
            var target = nativeEvent.target || nativeEvent.srcElement || window;
            if (target.correspondingUseElement) {
              target = target.correspondingUseElement;
            }
            return target.nodeType === TEXT_NODE ? target.parentNode : target;
          }
          var restoreImpl = null;
          var restoreTarget = null;
          var restoreQueue = null;
          function restoreStateOfTarget(target) {
            var internalInstance = getInstanceFromNode(target);
            if (!internalInstance) {
              return;
            }
            if (typeof restoreImpl !== "function") {
              throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
            }
            var stateNode = internalInstance.stateNode;
            if (stateNode) {
              var _props = getFiberCurrentPropsFromNode(stateNode);
              restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
            }
          }
          function setRestoreImplementation(impl) {
            restoreImpl = impl;
          }
          function enqueueStateRestore(target) {
            if (restoreTarget) {
              if (restoreQueue) {
                restoreQueue.push(target);
              } else {
                restoreQueue = [target];
              }
            } else {
              restoreTarget = target;
            }
          }
          function needsStateRestore() {
            return restoreTarget !== null || restoreQueue !== null;
          }
          function restoreStateIfNeeded() {
            if (!restoreTarget) {
              return;
            }
            var target = restoreTarget;
            var queuedTargets = restoreQueue;
            restoreTarget = null;
            restoreQueue = null;
            restoreStateOfTarget(target);
            if (queuedTargets) {
              for (var i3 = 0; i3 < queuedTargets.length; i3++) {
                restoreStateOfTarget(queuedTargets[i3]);
              }
            }
          }
          var batchedUpdatesImpl = function(fn2, bookkeeping) {
            return fn2(bookkeeping);
          };
          var flushSyncImpl = function() {
          };
          var isInsideEventHandler = false;
          function finishEventHandler() {
            var controlledComponentsHavePendingUpdates = needsStateRestore();
            if (controlledComponentsHavePendingUpdates) {
              flushSyncImpl();
              restoreStateIfNeeded();
            }
          }
          function batchedUpdates(fn2, a2, b2) {
            if (isInsideEventHandler) {
              return fn2(a2, b2);
            }
            isInsideEventHandler = true;
            try {
              return batchedUpdatesImpl(fn2, a2, b2);
            } finally {
              isInsideEventHandler = false;
              finishEventHandler();
            }
          }
          function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
            batchedUpdatesImpl = _batchedUpdatesImpl;
            flushSyncImpl = _flushSyncImpl;
          }
          function isInteractive(tag) {
            return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
          }
          function shouldPreventMouseEvent(name, type4, props) {
            switch (name) {
              case "onClick":
              case "onClickCapture":
              case "onDoubleClick":
              case "onDoubleClickCapture":
              case "onMouseDown":
              case "onMouseDownCapture":
              case "onMouseMove":
              case "onMouseMoveCapture":
              case "onMouseUp":
              case "onMouseUpCapture":
              case "onMouseEnter":
                return !!(props.disabled && isInteractive(type4));
              default:
                return false;
            }
          }
          function getListener(inst, registrationName) {
            var stateNode = inst.stateNode;
            if (stateNode === null) {
              return null;
            }
            var props = getFiberCurrentPropsFromNode(stateNode);
            if (props === null) {
              return null;
            }
            var listener2 = props[registrationName];
            if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
              return null;
            }
            if (listener2 && typeof listener2 !== "function") {
              throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener2 + "` type.");
            }
            return listener2;
          }
          var passiveBrowserEventsSupported = false;
          if (canUseDOM3) {
            try {
              var options = {};
              Object.defineProperty(options, "passive", {
                get: function() {
                  passiveBrowserEventsSupported = true;
                }
              });
              window.addEventListener("test", options, options);
              window.removeEventListener("test", options, options);
            } catch (e3) {
              passiveBrowserEventsSupported = false;
            }
          }
          function invokeGuardedCallbackProd(name, func, context2, a2, b2, c2, d2, e3, f2) {
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            try {
              func.apply(context2, funcArgs);
            } catch (error3) {
              this.onError(error3);
            }
          }
          var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
          {
            if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
              var fakeNode = document.createElement("react");
              invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context2, a2, b2, c2, d2, e3, f2) {
                if (typeof document === "undefined" || document === null) {
                  throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                }
                var evt = document.createEvent("Event");
                var didCall = false;
                var didError = true;
                var windowEvent = window.event;
                var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
                function restoreAfterDispatch() {
                  fakeNode.removeEventListener(evtType, callCallback2, false);
                  if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                    window.event = windowEvent;
                  }
                }
                var funcArgs = Array.prototype.slice.call(arguments, 3);
                function callCallback2() {
                  didCall = true;
                  restoreAfterDispatch();
                  func.apply(context2, funcArgs);
                  didError = false;
                }
                var error3;
                var didSetError = false;
                var isCrossOriginError = false;
                function handleWindowError(event) {
                  error3 = event.error;
                  didSetError = true;
                  if (error3 === null && event.colno === 0 && event.lineno === 0) {
                    isCrossOriginError = true;
                  }
                  if (event.defaultPrevented) {
                    if (error3 != null && typeof error3 === "object") {
                      try {
                        error3._suppressLogging = true;
                      } catch (inner) {
                      }
                    }
                  }
                }
                var evtType = "react-" + (name ? name : "invokeguardedcallback");
                window.addEventListener("error", handleWindowError);
                fakeNode.addEventListener(evtType, callCallback2, false);
                evt.initEvent(evtType, false, false);
                fakeNode.dispatchEvent(evt);
                if (windowEventDescriptor) {
                  Object.defineProperty(window, "event", windowEventDescriptor);
                }
                if (didCall && didError) {
                  if (!didSetError) {
                    error3 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                  } else if (isCrossOriginError) {
                    error3 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                  }
                  this.onError(error3);
                }
                window.removeEventListener("error", handleWindowError);
                if (!didCall) {
                  restoreAfterDispatch();
                  return invokeGuardedCallbackProd.apply(this, arguments);
                }
              };
            }
          }
          var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
          var hasError = false;
          var caughtError = null;
          var hasRethrowError = false;
          var rethrowError = null;
          var reporter = {
            onError: function(error3) {
              hasError = true;
              caughtError = error3;
            }
          };
          function invokeGuardedCallback(name, func, context2, a2, b2, c2, d2, e3, f2) {
            hasError = false;
            caughtError = null;
            invokeGuardedCallbackImpl$1.apply(reporter, arguments);
          }
          function invokeGuardedCallbackAndCatchFirstError(name, func, context2, a2, b2, c2, d2, e3, f2) {
            invokeGuardedCallback.apply(this, arguments);
            if (hasError) {
              var error3 = clearCaughtError();
              if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error3;
              }
            }
          }
          function rethrowCaughtError() {
            if (hasRethrowError) {
              var error3 = rethrowError;
              hasRethrowError = false;
              rethrowError = null;
              throw error3;
            }
          }
          function hasCaughtError() {
            return hasError;
          }
          function clearCaughtError() {
            if (hasError) {
              var error3 = caughtError;
              hasError = false;
              caughtError = null;
              return error3;
            } else {
              throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function get3(key2) {
            return key2._reactInternals;
          }
          function has(key2) {
            return key2._reactInternals !== void 0;
          }
          function set2(key2, value) {
            key2._reactInternals = value;
          }
          var NoFlags = (
            /*                      */
            0
          );
          var PerformedWork = (
            /*                */
            1
          );
          var Placement = (
            /*                    */
            2
          );
          var Update = (
            /*                       */
            4
          );
          var ChildDeletion = (
            /*                */
            16
          );
          var ContentReset = (
            /*                 */
            32
          );
          var Callback = (
            /*                     */
            64
          );
          var DidCapture = (
            /*                   */
            128
          );
          var ForceClientRender = (
            /*            */
            256
          );
          var Ref = (
            /*                          */
            512
          );
          var Snapshot = (
            /*                     */
            1024
          );
          var Passive = (
            /*                      */
            2048
          );
          var Hydrating = (
            /*                    */
            4096
          );
          var Visibility = (
            /*                   */
            8192
          );
          var StoreConsistency = (
            /*             */
            16384
          );
          var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency;
          var HostEffectMask = (
            /*               */
            32767
          );
          var Incomplete = (
            /*                   */
            32768
          );
          var ShouldCapture = (
            /*                */
            65536
          );
          var ForceUpdateForLegacySuspense = (
            /* */
            131072
          );
          var Forked = (
            /*                       */
            1048576
          );
          var RefStatic = (
            /*                    */
            2097152
          );
          var LayoutStatic = (
            /*                 */
            4194304
          );
          var PassiveStatic = (
            /*                */
            8388608
          );
          var MountLayoutDev = (
            /*               */
            16777216
          );
          var MountPassiveDev = (
            /*              */
            33554432
          );
          var BeforeMutationMask = (
            // TODO: Remove Update flag from before mutation phase by re-landing Visibility
            // flag logic (see #20043)
            Update | Snapshot | 0
          );
          var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
          var LayoutMask = Update | Callback | Ref | Visibility;
          var PassiveMask = Passive | ChildDeletion;
          var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          function getNearestMountedFiber(fiber) {
            var node = fiber;
            var nearestMounted = fiber;
            if (!fiber.alternate) {
              var nextNode = node;
              do {
                node = nextNode;
                if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
                  nearestMounted = node.return;
                }
                nextNode = node.return;
              } while (nextNode);
            } else {
              while (node.return) {
                node = node.return;
              }
            }
            if (node.tag === HostRoot) {
              return nearestMounted;
            }
            return null;
          }
          function getSuspenseInstanceFromFiber(fiber) {
            if (fiber.tag === SuspenseComponent) {
              var suspenseState = fiber.memoizedState;
              if (suspenseState === null) {
                var current2 = fiber.alternate;
                if (current2 !== null) {
                  suspenseState = current2.memoizedState;
                }
              }
              if (suspenseState !== null) {
                return suspenseState.dehydrated;
              }
            }
            return null;
          }
          function getContainerFromFiber(fiber) {
            return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
          }
          function isFiberMounted(fiber) {
            return getNearestMountedFiber(fiber) === fiber;
          }
          function isMounted(component) {
            {
              var owner = ReactCurrentOwner.current;
              if (owner !== null && owner.tag === ClassComponent) {
                var ownerFiber = owner;
                var instance2 = ownerFiber.stateNode;
                if (!instance2._warnedAboutRefsInRender) {
                  error2("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
                }
                instance2._warnedAboutRefsInRender = true;
              }
            }
            var fiber = get3(component);
            if (!fiber) {
              return false;
            }
            return getNearestMountedFiber(fiber) === fiber;
          }
          function assertIsMounted(fiber) {
            if (getNearestMountedFiber(fiber) !== fiber) {
              throw new Error("Unable to find node on an unmounted component.");
            }
          }
          function findCurrentFiberUsingSlowPath(fiber) {
            var alternate = fiber.alternate;
            if (!alternate) {
              var nearestMounted = getNearestMountedFiber(fiber);
              if (nearestMounted === null) {
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (nearestMounted !== fiber) {
                return null;
              }
              return fiber;
            }
            var a2 = fiber;
            var b2 = alternate;
            while (true) {
              var parentA = a2.return;
              if (parentA === null) {
                break;
              }
              var parentB = parentA.alternate;
              if (parentB === null) {
                var nextParent = parentA.return;
                if (nextParent !== null) {
                  a2 = b2 = nextParent;
                  continue;
                }
                break;
              }
              if (parentA.child === parentB.child) {
                var child = parentA.child;
                while (child) {
                  if (child === a2) {
                    assertIsMounted(parentA);
                    return fiber;
                  }
                  if (child === b2) {
                    assertIsMounted(parentA);
                    return alternate;
                  }
                  child = child.sibling;
                }
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (a2.return !== b2.return) {
                a2 = parentA;
                b2 = parentB;
              } else {
                var didFindChild = false;
                var _child = parentA.child;
                while (_child) {
                  if (_child === a2) {
                    didFindChild = true;
                    a2 = parentA;
                    b2 = parentB;
                    break;
                  }
                  if (_child === b2) {
                    didFindChild = true;
                    b2 = parentA;
                    a2 = parentB;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  _child = parentB.child;
                  while (_child) {
                    if (_child === a2) {
                      didFindChild = true;
                      a2 = parentB;
                      b2 = parentA;
                      break;
                    }
                    if (_child === b2) {
                      didFindChild = true;
                      b2 = parentB;
                      a2 = parentA;
                      break;
                    }
                    _child = _child.sibling;
                  }
                  if (!didFindChild) {
                    throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                  }
                }
              }
              if (a2.alternate !== b2) {
                throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (a2.tag !== HostRoot) {
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (a2.stateNode.current === a2) {
              return fiber;
            }
            return alternate;
          }
          function findCurrentHostFiber(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
          }
          function findCurrentHostFiberImpl(node) {
            if (node.tag === HostComponent || node.tag === HostText) {
              return node;
            }
            var child = node.child;
            while (child !== null) {
              var match2 = findCurrentHostFiberImpl(child);
              if (match2 !== null) {
                return match2;
              }
              child = child.sibling;
            }
            return null;
          }
          function findCurrentHostFiberWithNoPortals(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
          }
          function findCurrentHostFiberWithNoPortalsImpl(node) {
            if (node.tag === HostComponent || node.tag === HostText) {
              return node;
            }
            var child = node.child;
            while (child !== null) {
              if (child.tag !== HostPortal) {
                var match2 = findCurrentHostFiberWithNoPortalsImpl(child);
                if (match2 !== null) {
                  return match2;
                }
              }
              child = child.sibling;
            }
            return null;
          }
          var scheduleCallback = Scheduler.unstable_scheduleCallback;
          var cancelCallback = Scheduler.unstable_cancelCallback;
          var shouldYield = Scheduler.unstable_shouldYield;
          var requestPaint = Scheduler.unstable_requestPaint;
          var now2 = Scheduler.unstable_now;
          var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
          var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
          var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
          var NormalPriority = Scheduler.unstable_NormalPriority;
          var LowPriority = Scheduler.unstable_LowPriority;
          var IdlePriority = Scheduler.unstable_IdlePriority;
          var unstable_yieldValue = Scheduler.unstable_yieldValue;
          var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;
          var rendererID = null;
          var injectedHook = null;
          var injectedProfilingHooks = null;
          var hasLoggedError = false;
          var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
          function injectInternals(internals) {
            if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
              return false;
            }
            var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
            if (hook.isDisabled) {
              return true;
            }
            if (!hook.supportsFiber) {
              {
                error2("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
              }
              return true;
            }
            try {
              if (enableSchedulingProfiler) {
                internals = assign({}, internals, {
                  getLaneLabelMap,
                  injectProfilingHooks
                });
              }
              rendererID = hook.inject(internals);
              injectedHook = hook;
            } catch (err) {
              {
                error2("React instrumentation encountered an error: %s.", err);
              }
            }
            if (hook.checkDCE) {
              return true;
            } else {
              return false;
            }
          }
          function onScheduleRoot(root4, children) {
            {
              if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
                try {
                  injectedHook.onScheduleFiberRoot(rendererID, root4, children);
                } catch (err) {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error2("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitRoot(root4, eventPriority) {
            if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
              try {
                var didError = (root4.current.flags & DidCapture) === DidCapture;
                if (enableProfilerTimer) {
                  var schedulerPriority;
                  switch (eventPriority) {
                    case DiscreteEventPriority:
                      schedulerPriority = ImmediatePriority;
                      break;
                    case ContinuousEventPriority:
                      schedulerPriority = UserBlockingPriority;
                      break;
                    case DefaultEventPriority:
                      schedulerPriority = NormalPriority;
                      break;
                    case IdleEventPriority:
                      schedulerPriority = IdlePriority;
                      break;
                    default:
                      schedulerPriority = NormalPriority;
                      break;
                  }
                  injectedHook.onCommitFiberRoot(rendererID, root4, schedulerPriority, didError);
                } else {
                  injectedHook.onCommitFiberRoot(rendererID, root4, void 0, didError);
                }
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error2("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onPostCommitRoot(root4) {
            if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") {
              try {
                injectedHook.onPostCommitFiberRoot(rendererID, root4);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error2("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitUnmount(fiber) {
            if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
              try {
                injectedHook.onCommitFiberUnmount(rendererID, fiber);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error2("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function setIsStrictModeForDevtools(newIsStrictMode) {
            {
              if (typeof unstable_yieldValue === "function") {
                unstable_setDisableYieldValue(newIsStrictMode);
                setSuppressWarning(newIsStrictMode);
              }
              if (injectedHook && typeof injectedHook.setStrictMode === "function") {
                try {
                  injectedHook.setStrictMode(rendererID, newIsStrictMode);
                } catch (err) {
                  {
                    if (!hasLoggedError) {
                      hasLoggedError = true;
                      error2("React instrumentation encountered an error: %s", err);
                    }
                  }
                }
              }
            }
          }
          function injectProfilingHooks(profilingHooks) {
            injectedProfilingHooks = profilingHooks;
          }
          function getLaneLabelMap() {
            {
              var map = /* @__PURE__ */ new Map();
              var lane = 1;
              for (var index3 = 0; index3 < TotalLanes; index3++) {
                var label = getLabelForLane(lane);
                map.set(lane, label);
                lane *= 2;
              }
              return map;
            }
          }
          function markCommitStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") {
                injectedProfilingHooks.markCommitStarted(lanes);
              }
            }
          }
          function markCommitStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") {
                injectedProfilingHooks.markCommitStopped();
              }
            }
          }
          function markComponentRenderStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") {
                injectedProfilingHooks.markComponentRenderStarted(fiber);
              }
            }
          }
          function markComponentRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") {
                injectedProfilingHooks.markComponentRenderStopped();
              }
            }
          }
          function markComponentPassiveEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStopped();
              }
            }
          }
          function markComponentPassiveEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
              }
            }
          }
          function markComponentLayoutEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStopped();
              }
            }
          }
          function markComponentLayoutEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
              }
            }
          }
          function markComponentErrored(fiber, thrownValue, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") {
                injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
              }
            }
          }
          function markComponentSuspended(fiber, wakeable, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") {
                injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
              }
            }
          }
          function markLayoutEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") {
                injectedProfilingHooks.markLayoutEffectsStarted(lanes);
              }
            }
          }
          function markLayoutEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") {
                injectedProfilingHooks.markLayoutEffectsStopped();
              }
            }
          }
          function markPassiveEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") {
                injectedProfilingHooks.markPassiveEffectsStarted(lanes);
              }
            }
          }
          function markPassiveEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") {
                injectedProfilingHooks.markPassiveEffectsStopped();
              }
            }
          }
          function markRenderStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") {
                injectedProfilingHooks.markRenderStarted(lanes);
              }
            }
          }
          function markRenderYielded() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") {
                injectedProfilingHooks.markRenderYielded();
              }
            }
          }
          function markRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") {
                injectedProfilingHooks.markRenderStopped();
              }
            }
          }
          function markRenderScheduled(lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") {
                injectedProfilingHooks.markRenderScheduled(lane);
              }
            }
          }
          function markForceUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") {
                injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
              }
            }
          }
          function markStateUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") {
                injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
              }
            }
          }
          var NoMode = (
            /*                         */
            0
          );
          var ConcurrentMode = (
            /*                 */
            1
          );
          var ProfileMode = (
            /*                    */
            2
          );
          var StrictLegacyMode = (
            /*               */
            8
          );
          var StrictEffectsMode = (
            /*              */
            16
          );
          var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
          var log2 = Math.log;
          var LN2 = Math.LN2;
          function clz32Fallback(x2) {
            var asUint = x2 >>> 0;
            if (asUint === 0) {
              return 32;
            }
            return 31 - (log2(asUint) / LN2 | 0) | 0;
          }
          var TotalLanes = 31;
          var NoLanes = (
            /*                        */
            0
          );
          var NoLane = (
            /*                          */
            0
          );
          var SyncLane = (
            /*                        */
            1
          );
          var InputContinuousHydrationLane = (
            /*    */
            2
          );
          var InputContinuousLane = (
            /*             */
            4
          );
          var DefaultHydrationLane = (
            /*            */
            8
          );
          var DefaultLane = (
            /*                     */
            16
          );
          var TransitionHydrationLane = (
            /*                */
            32
          );
          var TransitionLanes = (
            /*                       */
            4194240
          );
          var TransitionLane1 = (
            /*                        */
            64
          );
          var TransitionLane2 = (
            /*                        */
            128
          );
          var TransitionLane3 = (
            /*                        */
            256
          );
          var TransitionLane4 = (
            /*                        */
            512
          );
          var TransitionLane5 = (
            /*                        */
            1024
          );
          var TransitionLane6 = (
            /*                        */
            2048
          );
          var TransitionLane7 = (
            /*                        */
            4096
          );
          var TransitionLane8 = (
            /*                        */
            8192
          );
          var TransitionLane9 = (
            /*                        */
            16384
          );
          var TransitionLane10 = (
            /*                       */
            32768
          );
          var TransitionLane11 = (
            /*                       */
            65536
          );
          var TransitionLane12 = (
            /*                       */
            131072
          );
          var TransitionLane13 = (
            /*                       */
            262144
          );
          var TransitionLane14 = (
            /*                       */
            524288
          );
          var TransitionLane15 = (
            /*                       */
            1048576
          );
          var TransitionLane16 = (
            /*                       */
            2097152
          );
          var RetryLanes = (
            /*                            */
            130023424
          );
          var RetryLane1 = (
            /*                             */
            4194304
          );
          var RetryLane2 = (
            /*                             */
            8388608
          );
          var RetryLane3 = (
            /*                             */
            16777216
          );
          var RetryLane4 = (
            /*                             */
            33554432
          );
          var RetryLane5 = (
            /*                             */
            67108864
          );
          var SomeRetryLane = RetryLane1;
          var SelectiveHydrationLane = (
            /*          */
            134217728
          );
          var NonIdleLanes = (
            /*                          */
            268435455
          );
          var IdleHydrationLane = (
            /*               */
            268435456
          );
          var IdleLane = (
            /*                        */
            536870912
          );
          var OffscreenLane = (
            /*                   */
            1073741824
          );
          function getLabelForLane(lane) {
            {
              if (lane & SyncLane) {
                return "Sync";
              }
              if (lane & InputContinuousHydrationLane) {
                return "InputContinuousHydration";
              }
              if (lane & InputContinuousLane) {
                return "InputContinuous";
              }
              if (lane & DefaultHydrationLane) {
                return "DefaultHydration";
              }
              if (lane & DefaultLane) {
                return "Default";
              }
              if (lane & TransitionHydrationLane) {
                return "TransitionHydration";
              }
              if (lane & TransitionLanes) {
                return "Transition";
              }
              if (lane & RetryLanes) {
                return "Retry";
              }
              if (lane & SelectiveHydrationLane) {
                return "SelectiveHydration";
              }
              if (lane & IdleHydrationLane) {
                return "IdleHydration";
              }
              if (lane & IdleLane) {
                return "Idle";
              }
              if (lane & OffscreenLane) {
                return "Offscreen";
              }
            }
          }
          var NoTimestamp = -1;
          var nextTransitionLane = TransitionLane1;
          var nextRetryLane = RetryLane1;
          function getHighestPriorityLanes(lanes) {
            switch (getHighestPriorityLane(lanes)) {
              case SyncLane:
                return SyncLane;
              case InputContinuousHydrationLane:
                return InputContinuousHydrationLane;
              case InputContinuousLane:
                return InputContinuousLane;
              case DefaultHydrationLane:
                return DefaultHydrationLane;
              case DefaultLane:
                return DefaultLane;
              case TransitionHydrationLane:
                return TransitionHydrationLane;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return lanes & TransitionLanes;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return lanes & RetryLanes;
              case SelectiveHydrationLane:
                return SelectiveHydrationLane;
              case IdleHydrationLane:
                return IdleHydrationLane;
              case IdleLane:
                return IdleLane;
              case OffscreenLane:
                return OffscreenLane;
              default:
                {
                  error2("Should have found matching lanes. This is a bug in React.");
                }
                return lanes;
            }
          }
          function getNextLanes(root4, wipLanes) {
            var pendingLanes = root4.pendingLanes;
            if (pendingLanes === NoLanes) {
              return NoLanes;
            }
            var nextLanes = NoLanes;
            var suspendedLanes = root4.suspendedLanes;
            var pingedLanes = root4.pingedLanes;
            var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
            if (nonIdlePendingLanes !== NoLanes) {
              var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
              if (nonIdleUnblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
              } else {
                var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                if (nonIdlePingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                }
              }
            } else {
              var unblockedLanes = pendingLanes & ~suspendedLanes;
              if (unblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(unblockedLanes);
              } else {
                if (pingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(pingedLanes);
                }
              }
            }
            if (nextLanes === NoLanes) {
              return NoLanes;
            }
            if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
            // bother waiting until the root is complete.
            (wipLanes & suspendedLanes) === NoLanes) {
              var nextLane = getHighestPriorityLane(nextLanes);
              var wipLane = getHighestPriorityLane(wipLanes);
              if (
                // Tests whether the next lane is equal or lower priority than the wip
                // one. This works because the bits decrease in priority as you go left.
                nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The
                // only difference between default updates and transition updates is that
                // default updates do not support refresh transitions.
                nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes
              ) {
                return wipLanes;
              }
            }
            if ((nextLanes & InputContinuousLane) !== NoLanes) {
              nextLanes |= pendingLanes & DefaultLane;
            }
            var entangledLanes = root4.entangledLanes;
            if (entangledLanes !== NoLanes) {
              var entanglements = root4.entanglements;
              var lanes = nextLanes & entangledLanes;
              while (lanes > 0) {
                var index3 = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index3;
                nextLanes |= entanglements[index3];
                lanes &= ~lane;
              }
            }
            return nextLanes;
          }
          function getMostRecentEventTime(root4, lanes) {
            var eventTimes = root4.eventTimes;
            var mostRecentEventTime = NoTimestamp;
            while (lanes > 0) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              var eventTime = eventTimes[index3];
              if (eventTime > mostRecentEventTime) {
                mostRecentEventTime = eventTime;
              }
              lanes &= ~lane;
            }
            return mostRecentEventTime;
          }
          function computeExpirationTime(lane, currentTime) {
            switch (lane) {
              case SyncLane:
              case InputContinuousHydrationLane:
              case InputContinuousLane:
                return currentTime + 250;
              case DefaultHydrationLane:
              case DefaultLane:
              case TransitionHydrationLane:
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return currentTime + 5e3;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return NoTimestamp;
              case SelectiveHydrationLane:
              case IdleHydrationLane:
              case IdleLane:
              case OffscreenLane:
                return NoTimestamp;
              default:
                {
                  error2("Should have found matching lanes. This is a bug in React.");
                }
                return NoTimestamp;
            }
          }
          function markStarvedLanesAsExpired(root4, currentTime) {
            var pendingLanes = root4.pendingLanes;
            var suspendedLanes = root4.suspendedLanes;
            var pingedLanes = root4.pingedLanes;
            var expirationTimes = root4.expirationTimes;
            var lanes = pendingLanes;
            while (lanes > 0) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              var expirationTime = expirationTimes[index3];
              if (expirationTime === NoTimestamp) {
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                  expirationTimes[index3] = computeExpirationTime(lane, currentTime);
                }
              } else if (expirationTime <= currentTime) {
                root4.expiredLanes |= lane;
              }
              lanes &= ~lane;
            }
          }
          function getHighestPriorityPendingLanes(root4) {
            return getHighestPriorityLanes(root4.pendingLanes);
          }
          function getLanesToRetrySynchronouslyOnError(root4) {
            var everythingButOffscreen = root4.pendingLanes & ~OffscreenLane;
            if (everythingButOffscreen !== NoLanes) {
              return everythingButOffscreen;
            }
            if (everythingButOffscreen & OffscreenLane) {
              return OffscreenLane;
            }
            return NoLanes;
          }
          function includesSyncLane(lanes) {
            return (lanes & SyncLane) !== NoLanes;
          }
          function includesNonIdleWork(lanes) {
            return (lanes & NonIdleLanes) !== NoLanes;
          }
          function includesOnlyRetries(lanes) {
            return (lanes & RetryLanes) === lanes;
          }
          function includesOnlyNonUrgentLanes(lanes) {
            var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
            return (lanes & UrgentLanes) === NoLanes;
          }
          function includesOnlyTransitions(lanes) {
            return (lanes & TransitionLanes) === lanes;
          }
          function includesBlockingLane(root4, lanes) {
            var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
            return (lanes & SyncDefaultLanes) !== NoLanes;
          }
          function includesExpiredLane(root4, lanes) {
            return (lanes & root4.expiredLanes) !== NoLanes;
          }
          function isTransitionLane(lane) {
            return (lane & TransitionLanes) !== NoLanes;
          }
          function claimNextTransitionLane() {
            var lane = nextTransitionLane;
            nextTransitionLane <<= 1;
            if ((nextTransitionLane & TransitionLanes) === NoLanes) {
              nextTransitionLane = TransitionLane1;
            }
            return lane;
          }
          function claimNextRetryLane() {
            var lane = nextRetryLane;
            nextRetryLane <<= 1;
            if ((nextRetryLane & RetryLanes) === NoLanes) {
              nextRetryLane = RetryLane1;
            }
            return lane;
          }
          function getHighestPriorityLane(lanes) {
            return lanes & -lanes;
          }
          function pickArbitraryLane(lanes) {
            return getHighestPriorityLane(lanes);
          }
          function pickArbitraryLaneIndex(lanes) {
            return 31 - clz32(lanes);
          }
          function laneToIndex(lane) {
            return pickArbitraryLaneIndex(lane);
          }
          function includesSomeLane(a2, b2) {
            return (a2 & b2) !== NoLanes;
          }
          function isSubsetOfLanes(set3, subset) {
            return (set3 & subset) === subset;
          }
          function mergeLanes(a2, b2) {
            return a2 | b2;
          }
          function removeLanes(set3, subset) {
            return set3 & ~subset;
          }
          function intersectLanes(a2, b2) {
            return a2 & b2;
          }
          function laneToLanes(lane) {
            return lane;
          }
          function higherPriorityLane(a2, b2) {
            return a2 !== NoLane && a2 < b2 ? a2 : b2;
          }
          function createLaneMap(initial) {
            var laneMap = [];
            for (var i3 = 0; i3 < TotalLanes; i3++) {
              laneMap.push(initial);
            }
            return laneMap;
          }
          function markRootUpdated(root4, updateLane, eventTime) {
            root4.pendingLanes |= updateLane;
            if (updateLane !== IdleLane) {
              root4.suspendedLanes = NoLanes;
              root4.pingedLanes = NoLanes;
            }
            var eventTimes = root4.eventTimes;
            var index3 = laneToIndex(updateLane);
            eventTimes[index3] = eventTime;
          }
          function markRootSuspended(root4, suspendedLanes) {
            root4.suspendedLanes |= suspendedLanes;
            root4.pingedLanes &= ~suspendedLanes;
            var expirationTimes = root4.expirationTimes;
            var lanes = suspendedLanes;
            while (lanes > 0) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              expirationTimes[index3] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootPinged(root4, pingedLanes, eventTime) {
            root4.pingedLanes |= root4.suspendedLanes & pingedLanes;
          }
          function markRootFinished(root4, remainingLanes) {
            var noLongerPendingLanes = root4.pendingLanes & ~remainingLanes;
            root4.pendingLanes = remainingLanes;
            root4.suspendedLanes = NoLanes;
            root4.pingedLanes = NoLanes;
            root4.expiredLanes &= remainingLanes;
            root4.mutableReadLanes &= remainingLanes;
            root4.entangledLanes &= remainingLanes;
            var entanglements = root4.entanglements;
            var eventTimes = root4.eventTimes;
            var expirationTimes = root4.expirationTimes;
            var lanes = noLongerPendingLanes;
            while (lanes > 0) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              entanglements[index3] = NoLanes;
              eventTimes[index3] = NoTimestamp;
              expirationTimes[index3] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootEntangled(root4, entangledLanes) {
            var rootEntangledLanes = root4.entangledLanes |= entangledLanes;
            var entanglements = root4.entanglements;
            var lanes = rootEntangledLanes;
            while (lanes) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              if (
                // Is this one of the newly entangled lanes?
                lane & entangledLanes | // Is this lane transitively entangled with the newly entangled lanes?
                entanglements[index3] & entangledLanes
              ) {
                entanglements[index3] |= entangledLanes;
              }
              lanes &= ~lane;
            }
          }
          function getBumpedLaneForHydration(root4, renderLanes2) {
            var renderLane = getHighestPriorityLane(renderLanes2);
            var lane;
            switch (renderLane) {
              case InputContinuousLane:
                lane = InputContinuousHydrationLane;
                break;
              case DefaultLane:
                lane = DefaultHydrationLane;
                break;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                lane = TransitionHydrationLane;
                break;
              case IdleLane:
                lane = IdleHydrationLane;
                break;
              default:
                lane = NoLane;
                break;
            }
            if ((lane & (root4.suspendedLanes | renderLanes2)) !== NoLane) {
              return NoLane;
            }
            return lane;
          }
          function addFiberToLanesMap(root4, fiber, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root4.pendingUpdatersLaneMap;
            while (lanes > 0) {
              var index3 = laneToIndex(lanes);
              var lane = 1 << index3;
              var updaters = pendingUpdatersLaneMap[index3];
              updaters.add(fiber);
              lanes &= ~lane;
            }
          }
          function movePendingFibersToMemoized(root4, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root4.pendingUpdatersLaneMap;
            var memoizedUpdaters = root4.memoizedUpdaters;
            while (lanes > 0) {
              var index3 = laneToIndex(lanes);
              var lane = 1 << index3;
              var updaters = pendingUpdatersLaneMap[index3];
              if (updaters.size > 0) {
                updaters.forEach(function(fiber) {
                  var alternate = fiber.alternate;
                  if (alternate === null || !memoizedUpdaters.has(alternate)) {
                    memoizedUpdaters.add(fiber);
                  }
                });
                updaters.clear();
              }
              lanes &= ~lane;
            }
          }
          function getTransitionsForLanes(root4, lanes) {
            {
              return null;
            }
          }
          var DiscreteEventPriority = SyncLane;
          var ContinuousEventPriority = InputContinuousLane;
          var DefaultEventPriority = DefaultLane;
          var IdleEventPriority = IdleLane;
          var currentUpdatePriority = NoLane;
          function getCurrentUpdatePriority() {
            return currentUpdatePriority;
          }
          function setCurrentUpdatePriority(newPriority) {
            currentUpdatePriority = newPriority;
          }
          function runWithPriority(priority, fn2) {
            var previousPriority = currentUpdatePriority;
            try {
              currentUpdatePriority = priority;
              return fn2();
            } finally {
              currentUpdatePriority = previousPriority;
            }
          }
          function higherEventPriority(a2, b2) {
            return a2 !== 0 && a2 < b2 ? a2 : b2;
          }
          function lowerEventPriority(a2, b2) {
            return a2 === 0 || a2 > b2 ? a2 : b2;
          }
          function isHigherEventPriority(a2, b2) {
            return a2 !== 0 && a2 < b2;
          }
          function lanesToEventPriority(lanes) {
            var lane = getHighestPriorityLane(lanes);
            if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
              return DiscreteEventPriority;
            }
            if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
              return ContinuousEventPriority;
            }
            if (includesNonIdleWork(lane)) {
              return DefaultEventPriority;
            }
            return IdleEventPriority;
          }
          function isRootDehydrated(root4) {
            var currentState = root4.current.memoizedState;
            return currentState.isDehydrated;
          }
          var _attemptSynchronousHydration;
          function setAttemptSynchronousHydration(fn2) {
            _attemptSynchronousHydration = fn2;
          }
          function attemptSynchronousHydration(fiber) {
            _attemptSynchronousHydration(fiber);
          }
          var attemptContinuousHydration;
          function setAttemptContinuousHydration(fn2) {
            attemptContinuousHydration = fn2;
          }
          var attemptHydrationAtCurrentPriority;
          function setAttemptHydrationAtCurrentPriority(fn2) {
            attemptHydrationAtCurrentPriority = fn2;
          }
          var getCurrentUpdatePriority$1;
          function setGetCurrentUpdatePriority(fn2) {
            getCurrentUpdatePriority$1 = fn2;
          }
          var attemptHydrationAtPriority;
          function setAttemptHydrationAtPriority(fn2) {
            attemptHydrationAtPriority = fn2;
          }
          var hasScheduledReplayAttempt = false;
          var queuedDiscreteEvents = [];
          var queuedFocus = null;
          var queuedDrag = null;
          var queuedMouse = null;
          var queuedPointers = /* @__PURE__ */ new Map();
          var queuedPointerCaptures = /* @__PURE__ */ new Map();
          var queuedExplicitHydrationTargets = [];
          var discreteReplayableEvents = [
            "mousedown",
            "mouseup",
            "touchcancel",
            "touchend",
            "touchstart",
            "auxclick",
            "dblclick",
            "pointercancel",
            "pointerdown",
            "pointerup",
            "dragend",
            "dragstart",
            "drop",
            "compositionend",
            "compositionstart",
            "keydown",
            "keypress",
            "keyup",
            "input",
            "textInput",
            // Intentionally camelCase
            "copy",
            "cut",
            "paste",
            "click",
            "change",
            "contextmenu",
            "reset",
            "submit"
          ];
          function isDiscreteEventThatRequiresHydration(eventType) {
            return discreteReplayableEvents.indexOf(eventType) > -1;
          }
          function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return {
              blockedOn,
              domEventName,
              eventSystemFlags,
              nativeEvent,
              targetContainers: [targetContainer]
            };
          }
          function clearIfContinuousEvent(domEventName, nativeEvent) {
            switch (domEventName) {
              case "focusin":
              case "focusout":
                queuedFocus = null;
                break;
              case "dragenter":
              case "dragleave":
                queuedDrag = null;
                break;
              case "mouseover":
              case "mouseout":
                queuedMouse = null;
                break;
              case "pointerover":
              case "pointerout": {
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
              }
              case "gotpointercapture":
              case "lostpointercapture": {
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
              }
            }
          }
          function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
              var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode(blockedOn);
                if (_fiber2 !== null) {
                  attemptContinuousHydration(_fiber2);
                }
              }
              return queuedEvent;
            }
            existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
            var targetContainers = existingQueuedEvent.targetContainers;
            if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
              targetContainers.push(targetContainer);
            }
            return existingQueuedEvent;
          }
          function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            switch (domEventName) {
              case "focusin": {
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
              }
              case "dragenter": {
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
              }
              case "mouseover": {
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
              }
              case "pointerover": {
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
              }
              case "gotpointercapture": {
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
              }
            }
            return false;
          }
          function attemptExplicitHydrationTarget(queuedTarget) {
            var targetInst = getClosestInstanceFromNode(queuedTarget.target);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted !== null) {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance2 = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance2 !== null) {
                    queuedTarget.blockedOn = instance2;
                    attemptHydrationAtPriority(queuedTarget.priority, function() {
                      attemptHydrationAtCurrentPriority(nearestMounted);
                    });
                    return;
                  }
                } else if (tag === HostRoot) {
                  var root4 = nearestMounted.stateNode;
                  if (isRootDehydrated(root4)) {
                    queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                    return;
                  }
                }
              }
            }
            queuedTarget.blockedOn = null;
          }
          function queueExplicitHydrationTarget(target) {
            var updatePriority = getCurrentUpdatePriority$1();
            var queuedTarget = {
              blockedOn: null,
              target,
              priority: updatePriority
            };
            var i3 = 0;
            for (; i3 < queuedExplicitHydrationTargets.length; i3++) {
              if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i3].priority)) {
                break;
              }
            }
            queuedExplicitHydrationTargets.splice(i3, 0, queuedTarget);
            if (i3 === 0) {
              attemptExplicitHydrationTarget(queuedTarget);
            }
          }
          function attemptReplayContinuousQueuedEvent(queuedEvent) {
            if (queuedEvent.blockedOn !== null) {
              return false;
            }
            var targetContainers = queuedEvent.targetContainers;
            while (targetContainers.length > 0) {
              var targetContainer = targetContainers[0];
              var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
              if (nextBlockedOn === null) {
                {
                  var nativeEvent = queuedEvent.nativeEvent;
                  var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
                  setReplayingEvent(nativeEventClone);
                  nativeEvent.target.dispatchEvent(nativeEventClone);
                  resetReplayingEvent();
                }
              } else {
                var _fiber3 = getInstanceFromNode(nextBlockedOn);
                if (_fiber3 !== null) {
                  attemptContinuousHydration(_fiber3);
                }
                queuedEvent.blockedOn = nextBlockedOn;
                return false;
              }
              targetContainers.shift();
            }
            return true;
          }
          function attemptReplayContinuousQueuedEventInMap(queuedEvent, key2, map) {
            if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
              map.delete(key2);
            }
          }
          function replayUnblockedEvents() {
            hasScheduledReplayAttempt = false;
            if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
              queuedFocus = null;
            }
            if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
              queuedDrag = null;
            }
            if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
              queuedMouse = null;
            }
            queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
            queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
          }
          function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
            if (queuedEvent.blockedOn === unblocked) {
              queuedEvent.blockedOn = null;
              if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true;
                Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
              }
            }
          }
          function retryIfBlockedOn(unblocked) {
            if (queuedDiscreteEvents.length > 0) {
              scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
              for (var i3 = 1; i3 < queuedDiscreteEvents.length; i3++) {
                var queuedEvent = queuedDiscreteEvents[i3];
                if (queuedEvent.blockedOn === unblocked) {
                  queuedEvent.blockedOn = null;
                }
              }
            }
            if (queuedFocus !== null) {
              scheduleCallbackIfUnblocked(queuedFocus, unblocked);
            }
            if (queuedDrag !== null) {
              scheduleCallbackIfUnblocked(queuedDrag, unblocked);
            }
            if (queuedMouse !== null) {
              scheduleCallbackIfUnblocked(queuedMouse, unblocked);
            }
            var unblock = function(queuedEvent2) {
              return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
            };
            queuedPointers.forEach(unblock);
            queuedPointerCaptures.forEach(unblock);
            for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
              var queuedTarget = queuedExplicitHydrationTargets[_i];
              if (queuedTarget.blockedOn === unblocked) {
                queuedTarget.blockedOn = null;
              }
            }
            while (queuedExplicitHydrationTargets.length > 0) {
              var nextExplicitTarget = queuedExplicitHydrationTargets[0];
              if (nextExplicitTarget.blockedOn !== null) {
                break;
              } else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) {
                  queuedExplicitHydrationTargets.shift();
                }
              }
            }
          }
          var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
          var _enabled = true;
          function setEnabled(enabled) {
            _enabled = !!enabled;
          }
          function isEnabled() {
            return _enabled;
          }
          function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
            var eventPriority = getEventPriority(domEventName);
            var listenerWrapper;
            switch (eventPriority) {
              case DiscreteEventPriority:
                listenerWrapper = dispatchDiscreteEvent;
                break;
              case ContinuousEventPriority:
                listenerWrapper = dispatchContinuousEvent;
                break;
              case DefaultEventPriority:
              default:
                listenerWrapper = dispatchEvent;
                break;
            }
            return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
          }
          function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(DiscreteEventPriority);
              dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(ContinuousEventPriority);
              dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (!_enabled) {
              return;
            }
            {
              dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            }
          }
          function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn === null) {
              dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
              clearIfContinuousEvent(domEventName, nativeEvent);
              return;
            }
            if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
              nativeEvent.stopPropagation();
              return;
            }
            clearIfContinuousEvent(domEventName, nativeEvent);
            if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
              while (blockedOn !== null) {
                var fiber = getInstanceFromNode(blockedOn);
                if (fiber !== null) {
                  attemptSynchronousHydration(fiber);
                }
                var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
                if (nextBlockedOn === null) {
                  dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
                }
                if (nextBlockedOn === blockedOn) {
                  break;
                }
                blockedOn = nextBlockedOn;
              }
              if (blockedOn !== null) {
                nativeEvent.stopPropagation();
              }
              return;
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
          }
          var return_targetInst = null;
          function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return_targetInst = null;
            var nativeEventTarget = getEventTarget(nativeEvent);
            var targetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted === null) {
                targetInst = null;
              } else {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance2 = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance2 !== null) {
                    return instance2;
                  }
                  targetInst = null;
                } else if (tag === HostRoot) {
                  var root4 = nearestMounted.stateNode;
                  if (isRootDehydrated(root4)) {
                    return getContainerFromFiber(nearestMounted);
                  }
                  targetInst = null;
                } else if (nearestMounted !== targetInst) {
                  targetInst = null;
                }
              }
            }
            return_targetInst = targetInst;
            return null;
          }
          function getEventPriority(domEventName) {
            switch (domEventName) {
              case "cancel":
              case "click":
              case "close":
              case "contextmenu":
              case "copy":
              case "cut":
              case "auxclick":
              case "dblclick":
              case "dragend":
              case "dragstart":
              case "drop":
              case "focusin":
              case "focusout":
              case "input":
              case "invalid":
              case "keydown":
              case "keypress":
              case "keyup":
              case "mousedown":
              case "mouseup":
              case "paste":
              case "pause":
              case "play":
              case "pointercancel":
              case "pointerdown":
              case "pointerup":
              case "ratechange":
              case "reset":
              case "resize":
              case "seeked":
              case "submit":
              case "touchcancel":
              case "touchend":
              case "touchstart":
              case "volumechange":
              case "change":
              case "selectionchange":
              case "textInput":
              case "compositionstart":
              case "compositionend":
              case "compositionupdate":
              case "beforeblur":
              case "afterblur":
              case "beforeinput":
              case "blur":
              case "fullscreenchange":
              case "focus":
              case "hashchange":
              case "popstate":
              case "select":
              case "selectstart":
                return DiscreteEventPriority;
              case "drag":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "mousemove":
              case "mouseout":
              case "mouseover":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "scroll":
              case "toggle":
              case "touchmove":
              case "wheel":
              case "mouseenter":
              case "mouseleave":
              case "pointerenter":
              case "pointerleave":
                return ContinuousEventPriority;
              case "message": {
                var schedulerPriority = getCurrentPriorityLevel();
                switch (schedulerPriority) {
                  case ImmediatePriority:
                    return DiscreteEventPriority;
                  case UserBlockingPriority:
                    return ContinuousEventPriority;
                  case NormalPriority:
                  case LowPriority:
                    return DefaultEventPriority;
                  case IdlePriority:
                    return IdleEventPriority;
                  default:
                    return DefaultEventPriority;
                }
              }
              default:
                return DefaultEventPriority;
            }
          }
          function addEventBubbleListener(target, eventType, listener2) {
            target.addEventListener(eventType, listener2, false);
            return listener2;
          }
          function addEventCaptureListener(target, eventType, listener2) {
            target.addEventListener(eventType, listener2, true);
            return listener2;
          }
          function addEventCaptureListenerWithPassiveFlag(target, eventType, listener2, passive) {
            target.addEventListener(eventType, listener2, {
              capture: true,
              passive
            });
            return listener2;
          }
          function addEventBubbleListenerWithPassiveFlag(target, eventType, listener2, passive) {
            target.addEventListener(eventType, listener2, {
              passive
            });
            return listener2;
          }
          var root3 = null;
          var startText = null;
          var fallbackText = null;
          function initialize(nativeEventTarget) {
            root3 = nativeEventTarget;
            startText = getText();
            return true;
          }
          function reset() {
            root3 = null;
            startText = null;
            fallbackText = null;
          }
          function getData() {
            if (fallbackText) {
              return fallbackText;
            }
            var start;
            var startValue = startText;
            var startLength = startValue.length;
            var end;
            var endValue = getText();
            var endLength = endValue.length;
            for (start = 0; start < startLength; start++) {
              if (startValue[start] !== endValue[start]) {
                break;
              }
            }
            var minEnd = startLength - start;
            for (end = 1; end <= minEnd; end++) {
              if (startValue[startLength - end] !== endValue[endLength - end]) {
                break;
              }
            }
            var sliceTail = end > 1 ? 1 - end : void 0;
            fallbackText = endValue.slice(start, sliceTail);
            return fallbackText;
          }
          function getText() {
            if ("value" in root3) {
              return root3.value;
            }
            return root3.textContent;
          }
          function getEventCharCode(nativeEvent) {
            var charCode;
            var keyCode = nativeEvent.keyCode;
            if ("charCode" in nativeEvent) {
              charCode = nativeEvent.charCode;
              if (charCode === 0 && keyCode === 13) {
                charCode = 13;
              }
            } else {
              charCode = keyCode;
            }
            if (charCode === 10) {
              charCode = 13;
            }
            if (charCode >= 32 || charCode === 13) {
              return charCode;
            }
            return 0;
          }
          function functionThatReturnsTrue() {
            return true;
          }
          function functionThatReturnsFalse() {
            return false;
          }
          function createSyntheticEvent(Interface) {
            function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
              this._reactName = reactName;
              this._targetInst = targetInst;
              this.type = reactEventType;
              this.nativeEvent = nativeEvent;
              this.target = nativeEventTarget;
              this.currentTarget = null;
              for (var _propName in Interface) {
                if (!Interface.hasOwnProperty(_propName)) {
                  continue;
                }
                var normalize2 = Interface[_propName];
                if (normalize2) {
                  this[_propName] = normalize2(nativeEvent);
                } else {
                  this[_propName] = nativeEvent[_propName];
                }
              }
              var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
              if (defaultPrevented) {
                this.isDefaultPrevented = functionThatReturnsTrue;
              } else {
                this.isDefaultPrevented = functionThatReturnsFalse;
              }
              this.isPropagationStopped = functionThatReturnsFalse;
              return this;
            }
            assign(SyntheticBaseEvent.prototype, {
              preventDefault: function() {
                this.defaultPrevented = true;
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.preventDefault) {
                  event.preventDefault();
                } else if (typeof event.returnValue !== "unknown") {
                  event.returnValue = false;
                }
                this.isDefaultPrevented = functionThatReturnsTrue;
              },
              stopPropagation: function() {
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.stopPropagation) {
                  event.stopPropagation();
                } else if (typeof event.cancelBubble !== "unknown") {
                  event.cancelBubble = true;
                }
                this.isPropagationStopped = functionThatReturnsTrue;
              },
              /**
               * We release all dispatched `SyntheticEvent`s after each event loop, adding
               * them back into the pool. This allows a way to hold onto a reference that
               * won't be added back into the pool.
               */
              persist: function() {
              },
              /**
               * Checks if this event should be released back into the pool.
               *
               * @return {boolean} True if this should not be released, false otherwise.
               */
              isPersistent: functionThatReturnsTrue
            });
            return SyntheticBaseEvent;
          }
          var EventInterface = {
            eventPhase: 0,
            bubbles: 0,
            cancelable: 0,
            timeStamp: function(event) {
              return event.timeStamp || Date.now();
            },
            defaultPrevented: 0,
            isTrusted: 0
          };
          var SyntheticEvent = createSyntheticEvent(EventInterface);
          var UIEventInterface = assign({}, EventInterface, {
            view: 0,
            detail: 0
          });
          var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
          var lastMovementX;
          var lastMovementY;
          var lastMouseEvent;
          function updateMouseMovementPolyfillState(event) {
            if (event !== lastMouseEvent) {
              if (lastMouseEvent && event.type === "mousemove") {
                lastMovementX = event.screenX - lastMouseEvent.screenX;
                lastMovementY = event.screenY - lastMouseEvent.screenY;
              } else {
                lastMovementX = 0;
                lastMovementY = 0;
              }
              lastMouseEvent = event;
            }
          }
          var MouseEventInterface = assign({}, UIEventInterface, {
            screenX: 0,
            screenY: 0,
            clientX: 0,
            clientY: 0,
            pageX: 0,
            pageY: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            getModifierState: getEventModifierState,
            button: 0,
            buttons: 0,
            relatedTarget: function(event) {
              if (event.relatedTarget === void 0)
                return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
              return event.relatedTarget;
            },
            movementX: function(event) {
              if ("movementX" in event) {
                return event.movementX;
              }
              updateMouseMovementPolyfillState(event);
              return lastMovementX;
            },
            movementY: function(event) {
              if ("movementY" in event) {
                return event.movementY;
              }
              return lastMovementY;
            }
          });
          var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
          var DragEventInterface = assign({}, MouseEventInterface, {
            dataTransfer: 0
          });
          var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
          var FocusEventInterface = assign({}, UIEventInterface, {
            relatedTarget: 0
          });
          var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
          var AnimationEventInterface = assign({}, EventInterface, {
            animationName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
          var ClipboardEventInterface = assign({}, EventInterface, {
            clipboardData: function(event) {
              return "clipboardData" in event ? event.clipboardData : window.clipboardData;
            }
          });
          var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
          var CompositionEventInterface = assign({}, EventInterface, {
            data: 0
          });
          var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
          var SyntheticInputEvent = SyntheticCompositionEvent;
          var normalizeKey = {
            Esc: "Escape",
            Spacebar: " ",
            Left: "ArrowLeft",
            Up: "ArrowUp",
            Right: "ArrowRight",
            Down: "ArrowDown",
            Del: "Delete",
            Win: "OS",
            Menu: "ContextMenu",
            Apps: "ContextMenu",
            Scroll: "ScrollLock",
            MozPrintableKey: "Unidentified"
          };
          var translateToKey = {
            "8": "Backspace",
            "9": "Tab",
            "12": "Clear",
            "13": "Enter",
            "16": "Shift",
            "17": "Control",
            "18": "Alt",
            "19": "Pause",
            "20": "CapsLock",
            "27": "Escape",
            "32": " ",
            "33": "PageUp",
            "34": "PageDown",
            "35": "End",
            "36": "Home",
            "37": "ArrowLeft",
            "38": "ArrowUp",
            "39": "ArrowRight",
            "40": "ArrowDown",
            "45": "Insert",
            "46": "Delete",
            "112": "F1",
            "113": "F2",
            "114": "F3",
            "115": "F4",
            "116": "F5",
            "117": "F6",
            "118": "F7",
            "119": "F8",
            "120": "F9",
            "121": "F10",
            "122": "F11",
            "123": "F12",
            "144": "NumLock",
            "145": "ScrollLock",
            "224": "Meta"
          };
          function getEventKey(nativeEvent) {
            if (nativeEvent.key) {
              var key2 = normalizeKey[nativeEvent.key] || nativeEvent.key;
              if (key2 !== "Unidentified") {
                return key2;
              }
            }
            if (nativeEvent.type === "keypress") {
              var charCode = getEventCharCode(nativeEvent);
              return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
            }
            if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
              return translateToKey[nativeEvent.keyCode] || "Unidentified";
            }
            return "";
          }
          var modifierKeyToProp = {
            Alt: "altKey",
            Control: "ctrlKey",
            Meta: "metaKey",
            Shift: "shiftKey"
          };
          function modifierStateGetter(keyArg) {
            var syntheticEvent = this;
            var nativeEvent = syntheticEvent.nativeEvent;
            if (nativeEvent.getModifierState) {
              return nativeEvent.getModifierState(keyArg);
            }
            var keyProp = modifierKeyToProp[keyArg];
            return keyProp ? !!nativeEvent[keyProp] : false;
          }
          function getEventModifierState(nativeEvent) {
            return modifierStateGetter;
          }
          var KeyboardEventInterface = assign({}, UIEventInterface, {
            key: getEventKey,
            code: 0,
            location: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            repeat: 0,
            locale: 0,
            getModifierState: getEventModifierState,
            // Legacy Interface
            charCode: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              return 0;
            },
            keyCode: function(event) {
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            },
            which: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            }
          });
          var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
          var PointerEventInterface = assign({}, MouseEventInterface, {
            pointerId: 0,
            width: 0,
            height: 0,
            pressure: 0,
            tangentialPressure: 0,
            tiltX: 0,
            tiltY: 0,
            twist: 0,
            pointerType: 0,
            isPrimary: 0
          });
          var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
          var TouchEventInterface = assign({}, UIEventInterface, {
            touches: 0,
            targetTouches: 0,
            changedTouches: 0,
            altKey: 0,
            metaKey: 0,
            ctrlKey: 0,
            shiftKey: 0,
            getModifierState: getEventModifierState
          });
          var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
          var TransitionEventInterface = assign({}, EventInterface, {
            propertyName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
          var WheelEventInterface = assign({}, MouseEventInterface, {
            deltaX: function(event) {
              return "deltaX" in event ? event.deltaX : (
                // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
                "wheelDeltaX" in event ? -event.wheelDeltaX : 0
              );
            },
            deltaY: function(event) {
              return "deltaY" in event ? event.deltaY : (
                // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
                "wheelDeltaY" in event ? -event.wheelDeltaY : (
                  // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
                  "wheelDelta" in event ? -event.wheelDelta : 0
                )
              );
            },
            deltaZ: 0,
            // Browsers without "deltaMode" is reporting in raw wheel delta where one
            // notch on the scroll is always +/- 120, roughly equivalent to pixels.
            // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
            // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
            deltaMode: 0
          });
          var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
          var END_KEYCODES = [9, 13, 27, 32];
          var START_KEYCODE = 229;
          var canUseCompositionEvent = canUseDOM3 && "CompositionEvent" in window;
          var documentMode = null;
          if (canUseDOM3 && "documentMode" in document) {
            documentMode = document.documentMode;
          }
          var canUseTextInputEvent = canUseDOM3 && "TextEvent" in window && !documentMode;
          var useFallbackCompositionData = canUseDOM3 && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
          var SPACEBAR_CODE = 32;
          var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
          function registerEvents() {
            registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
            registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          }
          var hasSpaceKeypress = false;
          function isKeypressCommand(nativeEvent) {
            return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
            !(nativeEvent.ctrlKey && nativeEvent.altKey);
          }
          function getCompositionEventType(domEventName) {
            switch (domEventName) {
              case "compositionstart":
                return "onCompositionStart";
              case "compositionend":
                return "onCompositionEnd";
              case "compositionupdate":
                return "onCompositionUpdate";
            }
          }
          function isFallbackCompositionStart(domEventName, nativeEvent) {
            return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
          }
          function isFallbackCompositionEnd(domEventName, nativeEvent) {
            switch (domEventName) {
              case "keyup":
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
              case "keydown":
                return nativeEvent.keyCode !== START_KEYCODE;
              case "keypress":
              case "mousedown":
              case "focusout":
                return true;
              default:
                return false;
            }
          }
          function getDataFromCustomEvent(nativeEvent) {
            var detail = nativeEvent.detail;
            if (typeof detail === "object" && "data" in detail) {
              return detail.data;
            }
            return null;
          }
          function isUsingKoreanIME(nativeEvent) {
            return nativeEvent.locale === "ko";
          }
          var isComposing = false;
          function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var eventType;
            var fallbackData;
            if (canUseCompositionEvent) {
              eventType = getCompositionEventType(domEventName);
            } else if (!isComposing) {
              if (isFallbackCompositionStart(domEventName, nativeEvent)) {
                eventType = "onCompositionStart";
              }
            } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
              eventType = "onCompositionEnd";
            }
            if (!eventType) {
              return null;
            }
            if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
              if (!isComposing && eventType === "onCompositionStart") {
                isComposing = initialize(nativeEventTarget);
              } else if (eventType === "onCompositionEnd") {
                if (isComposing) {
                  fallbackData = getData();
                }
              }
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
            if (listeners.length > 0) {
              var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              if (fallbackData) {
                event.data = fallbackData;
              } else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) {
                  event.data = customData;
                }
              }
            }
          }
          function getNativeBeforeInputChars(domEventName, nativeEvent) {
            switch (domEventName) {
              case "compositionend":
                return getDataFromCustomEvent(nativeEvent);
              case "keypress":
                var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) {
                  return null;
                }
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
              case "textInput":
                var chars = nativeEvent.data;
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                  return null;
                }
                return chars;
              default:
                return null;
            }
          }
          function getFallbackBeforeInputChars(domEventName, nativeEvent) {
            if (isComposing) {
              if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                var chars = getData();
                reset();
                isComposing = false;
                return chars;
              }
              return null;
            }
            switch (domEventName) {
              case "paste":
                return null;
              case "keypress":
                if (!isKeypressCommand(nativeEvent)) {
                  if (nativeEvent.char && nativeEvent.char.length > 1) {
                    return nativeEvent.char;
                  } else if (nativeEvent.which) {
                    return String.fromCharCode(nativeEvent.which);
                  }
                }
                return null;
              case "compositionend":
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
              default:
                return null;
            }
          }
          function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var chars;
            if (canUseTextInputEvent) {
              chars = getNativeBeforeInputChars(domEventName, nativeEvent);
            } else {
              chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
            }
            if (!chars) {
              return null;
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
            if (listeners.length > 0) {
              var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.data = chars;
            }
          }
          function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
          var supportedInputTypes = {
            color: true,
            date: true,
            datetime: true,
            "datetime-local": true,
            email: true,
            month: true,
            number: true,
            password: true,
            range: true,
            search: true,
            tel: true,
            text: true,
            time: true,
            url: true,
            week: true
          };
          function isTextInputElement(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            if (nodeName === "input") {
              return !!supportedInputTypes[elem.type];
            }
            if (nodeName === "textarea") {
              return true;
            }
            return false;
          }
          function isEventSupported(eventNameSuffix) {
            if (!canUseDOM3) {
              return false;
            }
            var eventName = "on" + eventNameSuffix;
            var isSupported = eventName in document;
            if (!isSupported) {
              var element = document.createElement("div");
              element.setAttribute(eventName, "return;");
              isSupported = typeof element[eventName] === "function";
            }
            return isSupported;
          }
          function registerEvents$1() {
            registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
          }
          function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
            enqueueStateRestore(target);
            var listeners = accumulateTwoPhaseListeners(inst, "onChange");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          var activeElement = null;
          var activeElementInst = null;
          function shouldUseChangeEvent(elem) {
            var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName === "select" || nodeName === "input" && elem.type === "file";
          }
          function manualDispatchChangeEvent(nativeEvent) {
            var dispatchQueue = [];
            createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
            batchedUpdates(runEventInBatch, dispatchQueue);
          }
          function runEventInBatch(dispatchQueue) {
            processDispatchQueue(dispatchQueue, 0);
          }
          function getInstIfValueChanged(targetInst) {
            var targetNode = getNodeFromInstance(targetInst);
            if (updateValueIfChanged(targetNode)) {
              return targetInst;
            }
          }
          function getTargetInstForChangeEvent(domEventName, targetInst) {
            if (domEventName === "change") {
              return targetInst;
            }
          }
          var isInputEventSupported = false;
          if (canUseDOM3) {
            isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
          }
          function startWatchingForValueChange(target, targetInst) {
            activeElement = target;
            activeElementInst = targetInst;
            activeElement.attachEvent("onpropertychange", handlePropertyChange);
          }
          function stopWatchingForValueChange() {
            if (!activeElement) {
              return;
            }
            activeElement.detachEvent("onpropertychange", handlePropertyChange);
            activeElement = null;
            activeElementInst = null;
          }
          function handlePropertyChange(nativeEvent) {
            if (nativeEvent.propertyName !== "value") {
              return;
            }
            if (getInstIfValueChanged(activeElementInst)) {
              manualDispatchChangeEvent(nativeEvent);
            }
          }
          function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
            if (domEventName === "focusin") {
              stopWatchingForValueChange();
              startWatchingForValueChange(target, targetInst);
            } else if (domEventName === "focusout") {
              stopWatchingForValueChange();
            }
          }
          function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
            if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
              return getInstIfValueChanged(activeElementInst);
            }
          }
          function shouldUseClickEvent(elem) {
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
          }
          function getTargetInstForClickEvent(domEventName, targetInst) {
            if (domEventName === "click") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
            if (domEventName === "input" || domEventName === "change") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function handleControlledInputBlur(node) {
            var state = node._wrapperState;
            if (!state || !state.controlled || node.type !== "number") {
              return;
            }
            {
              setDefaultValue(node, "number", node.value);
            }
          }
          function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            var getTargetInstFunc, handleEventFunc;
            if (shouldUseChangeEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForChangeEvent;
            } else if (isTextInputElement(targetNode)) {
              if (isInputEventSupported) {
                getTargetInstFunc = getTargetInstForInputOrChangeEvent;
              } else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
              }
            } else if (shouldUseClickEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForClickEvent;
            }
            if (getTargetInstFunc) {
              var inst = getTargetInstFunc(domEventName, targetInst);
              if (inst) {
                createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                return;
              }
            }
            if (handleEventFunc) {
              handleEventFunc(domEventName, targetNode, targetInst);
            }
            if (domEventName === "focusout") {
              handleControlledInputBlur(targetNode);
            }
          }
          function registerEvents$2() {
            registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
            registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
            registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
            registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
          }
          function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
            var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
            if (isOverEvent && !isReplayingEvent(nativeEvent)) {
              var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
              if (related) {
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                  return;
                }
              }
            }
            if (!isOutEvent && !isOverEvent) {
              return;
            }
            var win;
            if (nativeEventTarget.window === nativeEventTarget) {
              win = nativeEventTarget;
            } else {
              var doc = nativeEventTarget.ownerDocument;
              if (doc) {
                win = doc.defaultView || doc.parentWindow;
              } else {
                win = window;
              }
            }
            var from;
            var to;
            if (isOutEvent) {
              var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
              from = targetInst;
              to = _related ? getClosestInstanceFromNode(_related) : null;
              if (to !== null) {
                var nearestMounted = getNearestMountedFiber(to);
                if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                  to = null;
                }
              }
            } else {
              from = null;
              to = targetInst;
            }
            if (from === to) {
              return;
            }
            var SyntheticEventCtor = SyntheticMouseEvent;
            var leaveEventType = "onMouseLeave";
            var enterEventType = "onMouseEnter";
            var eventTypePrefix = "mouse";
            if (domEventName === "pointerout" || domEventName === "pointerover") {
              SyntheticEventCtor = SyntheticPointerEvent;
              leaveEventType = "onPointerLeave";
              enterEventType = "onPointerEnter";
              eventTypePrefix = "pointer";
            }
            var fromNode = from == null ? win : getNodeFromInstance(from);
            var toNode = to == null ? win : getNodeFromInstance(to);
            var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from, nativeEvent, nativeEventTarget);
            leave.target = fromNode;
            leave.relatedTarget = toNode;
            var enter = null;
            var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (nativeTargetInst === targetInst) {
              var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
              enterEvent.target = toNode;
              enterEvent.relatedTarget = fromNode;
              enter = enterEvent;
            }
            accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
          }
          function is(x2, y2) {
            return x2 === y2 && (x2 !== 0 || 1 / x2 === 1 / y2) || x2 !== x2 && y2 !== y2;
          }
          var objectIs = typeof Object.is === "function" ? Object.is : is;
          function shallowEqual5(objA, objB) {
            if (objectIs(objA, objB)) {
              return true;
            }
            if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
              return false;
            }
            var keysA = Object.keys(objA);
            var keysB = Object.keys(objB);
            if (keysA.length !== keysB.length) {
              return false;
            }
            for (var i3 = 0; i3 < keysA.length; i3++) {
              var currentKey = keysA[i3];
              if (!hasOwnProperty2.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
                return false;
              }
            }
            return true;
          }
          function getLeafNode(node) {
            while (node && node.firstChild) {
              node = node.firstChild;
            }
            return node;
          }
          function getSiblingNode(node) {
            while (node) {
              if (node.nextSibling) {
                return node.nextSibling;
              }
              node = node.parentNode;
            }
          }
          function getNodeForCharacterOffset(root4, offset4) {
            var node = getLeafNode(root4);
            var nodeStart = 0;
            var nodeEnd = 0;
            while (node) {
              if (node.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node.textContent.length;
                if (nodeStart <= offset4 && nodeEnd >= offset4) {
                  return {
                    node,
                    offset: offset4 - nodeStart
                  };
                }
                nodeStart = nodeEnd;
              }
              node = getLeafNode(getSiblingNode(node));
            }
          }
          function getOffsets(outerNode) {
            var ownerDocument = outerNode.ownerDocument;
            var win = ownerDocument && ownerDocument.defaultView || window;
            var selection = win.getSelection && win.getSelection();
            if (!selection || selection.rangeCount === 0) {
              return null;
            }
            var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
            try {
              anchorNode.nodeType;
              focusNode.nodeType;
            } catch (e3) {
              return null;
            }
            return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
          }
          function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
            var length = 0;
            var start = -1;
            var end = -1;
            var indexWithinAnchor = 0;
            var indexWithinFocus = 0;
            var node = outerNode;
            var parentNode = null;
            outer:
              while (true) {
                var next = null;
                while (true) {
                  if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                    start = length + anchorOffset;
                  }
                  if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                    end = length + focusOffset;
                  }
                  if (node.nodeType === TEXT_NODE) {
                    length += node.nodeValue.length;
                  }
                  if ((next = node.firstChild) === null) {
                    break;
                  }
                  parentNode = node;
                  node = next;
                }
                while (true) {
                  if (node === outerNode) {
                    break outer;
                  }
                  if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                    start = length;
                  }
                  if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                    end = length;
                  }
                  if ((next = node.nextSibling) !== null) {
                    break;
                  }
                  node = parentNode;
                  parentNode = node.parentNode;
                }
                node = next;
              }
            if (start === -1 || end === -1) {
              return null;
            }
            return {
              start,
              end
            };
          }
          function setOffsets(node, offsets) {
            var doc = node.ownerDocument || document;
            var win = doc && doc.defaultView || window;
            if (!win.getSelection) {
              return;
            }
            var selection = win.getSelection();
            var length = node.textContent.length;
            var start = Math.min(offsets.start, length);
            var end = offsets.end === void 0 ? start : Math.min(offsets.end, length);
            if (!selection.extend && start > end) {
              var temp = end;
              end = start;
              start = temp;
            }
            var startMarker = getNodeForCharacterOffset(node, start);
            var endMarker = getNodeForCharacterOffset(node, end);
            if (startMarker && endMarker) {
              if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
                return;
              }
              var range3 = doc.createRange();
              range3.setStart(startMarker.node, startMarker.offset);
              selection.removeAllRanges();
              if (start > end) {
                selection.addRange(range3);
                selection.extend(endMarker.node, endMarker.offset);
              } else {
                range3.setEnd(endMarker.node, endMarker.offset);
                selection.addRange(range3);
              }
            }
          }
          function isTextNode(node) {
            return node && node.nodeType === TEXT_NODE;
          }
          function containsNode(outerNode, innerNode) {
            if (!outerNode || !innerNode) {
              return false;
            } else if (outerNode === innerNode) {
              return true;
            } else if (isTextNode(outerNode)) {
              return false;
            } else if (isTextNode(innerNode)) {
              return containsNode(outerNode, innerNode.parentNode);
            } else if ("contains" in outerNode) {
              return outerNode.contains(innerNode);
            } else if (outerNode.compareDocumentPosition) {
              return !!(outerNode.compareDocumentPosition(innerNode) & 16);
            } else {
              return false;
            }
          }
          function isInDocument(node) {
            return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
          }
          function isSameOriginFrame(iframe) {
            try {
              return typeof iframe.contentWindow.location.href === "string";
            } catch (err) {
              return false;
            }
          }
          function getActiveElementDeep() {
            var win = window;
            var element = getActiveElement();
            while (element instanceof win.HTMLIFrameElement) {
              if (isSameOriginFrame(element)) {
                win = element.contentWindow;
              } else {
                return element;
              }
              element = getActiveElement(win.document);
            }
            return element;
          }
          function hasSelectionCapabilities(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
          }
          function getSelectionInformation() {
            var focusedElem = getActiveElementDeep();
            return {
              focusedElem,
              selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
            };
          }
          function restoreSelection(priorSelectionInformation) {
            var curFocusedElem = getActiveElementDeep();
            var priorFocusedElem = priorSelectionInformation.focusedElem;
            var priorSelectionRange = priorSelectionInformation.selectionRange;
            if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
              if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
                setSelection(priorFocusedElem, priorSelectionRange);
              }
              var ancestors = [];
              var ancestor = priorFocusedElem;
              while (ancestor = ancestor.parentNode) {
                if (ancestor.nodeType === ELEMENT_NODE) {
                  ancestors.push({
                    element: ancestor,
                    left: ancestor.scrollLeft,
                    top: ancestor.scrollTop
                  });
                }
              }
              if (typeof priorFocusedElem.focus === "function") {
                priorFocusedElem.focus();
              }
              for (var i3 = 0; i3 < ancestors.length; i3++) {
                var info = ancestors[i3];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
              }
            }
          }
          function getSelection(input) {
            var selection;
            if ("selectionStart" in input) {
              selection = {
                start: input.selectionStart,
                end: input.selectionEnd
              };
            } else {
              selection = getOffsets(input);
            }
            return selection || {
              start: 0,
              end: 0
            };
          }
          function setSelection(input, offsets) {
            var start = offsets.start;
            var end = offsets.end;
            if (end === void 0) {
              end = start;
            }
            if ("selectionStart" in input) {
              input.selectionStart = start;
              input.selectionEnd = Math.min(end, input.value.length);
            } else {
              setOffsets(input, offsets);
            }
          }
          var skipSelectionChangeEvent = canUseDOM3 && "documentMode" in document && document.documentMode <= 11;
          function registerEvents$3() {
            registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
          }
          var activeElement$1 = null;
          var activeElementInst$1 = null;
          var lastSelection = null;
          var mouseDown = false;
          function getSelection$1(node) {
            if ("selectionStart" in node && hasSelectionCapabilities(node)) {
              return {
                start: node.selectionStart,
                end: node.selectionEnd
              };
            } else {
              var win = node.ownerDocument && node.ownerDocument.defaultView || window;
              var selection = win.getSelection();
              return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset
              };
            }
          }
          function getEventTargetDocument(eventTarget) {
            return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
          }
          function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
            var doc = getEventTargetDocument(nativeEventTarget);
            if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
              return;
            }
            var currentSelection = getSelection$1(activeElement$1);
            if (!lastSelection || !shallowEqual5(lastSelection, currentSelection)) {
              lastSelection = currentSelection;
              var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
              if (listeners.length > 0) {
                var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event,
                  listeners
                });
                event.target = activeElement$1;
              }
            }
          }
          function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            switch (domEventName) {
              case "focusin":
                if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                  activeElement$1 = targetNode;
                  activeElementInst$1 = targetInst;
                  lastSelection = null;
                }
                break;
              case "focusout":
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
              case "mousedown":
                mouseDown = true;
                break;
              case "contextmenu":
              case "mouseup":
              case "dragend":
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
              case "selectionchange":
                if (skipSelectionChangeEvent) {
                  break;
                }
              case "keydown":
              case "keyup":
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
            }
          }
          function makePrefixMap2(styleProp, eventName) {
            var prefixes2 = {};
            prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
            prefixes2["Webkit" + styleProp] = "webkit" + eventName;
            prefixes2["Moz" + styleProp] = "moz" + eventName;
            return prefixes2;
          }
          var vendorPrefixes2 = {
            animationend: makePrefixMap2("Animation", "AnimationEnd"),
            animationiteration: makePrefixMap2("Animation", "AnimationIteration"),
            animationstart: makePrefixMap2("Animation", "AnimationStart"),
            transitionend: makePrefixMap2("Transition", "TransitionEnd")
          };
          var prefixedEventNames2 = {};
          var style3 = {};
          if (canUseDOM3) {
            style3 = document.createElement("div").style;
            if (!("AnimationEvent" in window)) {
              delete vendorPrefixes2.animationend.animation;
              delete vendorPrefixes2.animationiteration.animation;
              delete vendorPrefixes2.animationstart.animation;
            }
            if (!("TransitionEvent" in window)) {
              delete vendorPrefixes2.transitionend.transition;
            }
          }
          function getVendorPrefixedEventName2(eventName) {
            if (prefixedEventNames2[eventName]) {
              return prefixedEventNames2[eventName];
            } else if (!vendorPrefixes2[eventName]) {
              return eventName;
            }
            var prefixMap = vendorPrefixes2[eventName];
            for (var styleProp in prefixMap) {
              if (prefixMap.hasOwnProperty(styleProp) && styleProp in style3) {
                return prefixedEventNames2[eventName] = prefixMap[styleProp];
              }
            }
            return eventName;
          }
          var ANIMATION_END = getVendorPrefixedEventName2("animationend");
          var ANIMATION_ITERATION = getVendorPrefixedEventName2("animationiteration");
          var ANIMATION_START = getVendorPrefixedEventName2("animationstart");
          var TRANSITION_END = getVendorPrefixedEventName2("transitionend");
          var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
          var simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
          function registerSimpleEvent(domEventName, reactName) {
            topLevelEventsToReactNames.set(domEventName, reactName);
            registerTwoPhaseEvent(reactName, [domEventName]);
          }
          function registerSimpleEvents() {
            for (var i3 = 0; i3 < simpleEventPluginEvents.length; i3++) {
              var eventName = simpleEventPluginEvents[i3];
              var domEventName = eventName.toLowerCase();
              var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
              registerSimpleEvent(domEventName, "on" + capitalizedEvent);
            }
            registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
            registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
            registerSimpleEvent(ANIMATION_START, "onAnimationStart");
            registerSimpleEvent("dblclick", "onDoubleClick");
            registerSimpleEvent("focusin", "onFocus");
            registerSimpleEvent("focusout", "onBlur");
            registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
          }
          function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var reactName = topLevelEventsToReactNames.get(domEventName);
            if (reactName === void 0) {
              return;
            }
            var SyntheticEventCtor = SyntheticEvent;
            var reactEventType = domEventName;
            switch (domEventName) {
              case "keypress":
                if (getEventCharCode(nativeEvent) === 0) {
                  return;
                }
              case "keydown":
              case "keyup":
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
              case "focusin":
                reactEventType = "focus";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "focusout":
                reactEventType = "blur";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "beforeblur":
              case "afterblur":
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "click":
                if (nativeEvent.button === 2) {
                  return;
                }
              case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              case "mouseout":
              case "mouseover":
              case "contextmenu":
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                SyntheticEventCtor = SyntheticDragEvent;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
              case ANIMATION_END:
              case ANIMATION_ITERATION:
              case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
              case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
              case "scroll":
                SyntheticEventCtor = SyntheticUIEvent;
                break;
              case "wheel":
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
              case "copy":
              case "cut":
              case "paste":
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
            }
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            {
              var accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from
              // nonDelegatedEvents list in DOMPluginEventSystem.
              // Then we can remove this special list.
              // This is a breaking change that can wait until React 18.
              domEventName === "scroll";
              var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
              if (_listeners.length > 0) {
                var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event: _event,
                  listeners: _listeners
                });
              }
            }
          }
          registerSimpleEvents();
          registerEvents$2();
          registerEvents$1();
          registerEvents$3();
          registerEvents();
          function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
            if (shouldProcessPolyfillPlugins) {
              extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            }
          }
          var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
          var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
          function executeDispatch(event, listener2, currentTarget) {
            var type4 = event.type || "unknown-event";
            event.currentTarget = currentTarget;
            invokeGuardedCallbackAndCatchFirstError(type4, listener2, void 0, event);
            event.currentTarget = null;
          }
          function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
            var previousInstance;
            if (inCapturePhase) {
              for (var i3 = dispatchListeners.length - 1; i3 >= 0; i3--) {
                var _dispatchListeners$i = dispatchListeners[i3], instance2 = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener2 = _dispatchListeners$i.listener;
                if (instance2 !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, listener2, currentTarget);
                previousInstance = instance2;
              }
            } else {
              for (var _i = 0; _i < dispatchListeners.length; _i++) {
                var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
                if (_instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, _listener, _currentTarget);
                previousInstance = _instance;
              }
            }
          }
          function processDispatchQueue(dispatchQueue, eventSystemFlags) {
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            for (var i3 = 0; i3 < dispatchQueue.length; i3++) {
              var _dispatchQueue$i = dispatchQueue[i3], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
              processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
            }
            rethrowCaughtError();
          }
          function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var dispatchQueue = [];
            extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            processDispatchQueue(dispatchQueue, eventSystemFlags);
          }
          function listenToNonDelegatedEvent(domEventName, targetElement) {
            {
              if (!nonDelegatedEvents.has(domEventName)) {
                error2('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var isCapturePhaseListener = false;
            var listenerSet = getEventListenerSet(targetElement);
            var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
            if (!listenerSet.has(listenerSetKey)) {
              addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
              listenerSet.add(listenerSetKey);
            }
          }
          function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
            {
              if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
                error2('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var eventSystemFlags = 0;
            if (isCapturePhaseListener) {
              eventSystemFlags |= IS_CAPTURE_PHASE;
            }
            addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
          }
          var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
          function listenToAllSupportedEvents(rootContainerElement) {
            if (!rootContainerElement[listeningMarker]) {
              rootContainerElement[listeningMarker] = true;
              allNativeEvents.forEach(function(domEventName) {
                if (domEventName !== "selectionchange") {
                  if (!nonDelegatedEvents.has(domEventName)) {
                    listenToNativeEvent(domEventName, false, rootContainerElement);
                  }
                  listenToNativeEvent(domEventName, true, rootContainerElement);
                }
              });
              var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
              if (ownerDocument !== null) {
                if (!ownerDocument[listeningMarker]) {
                  ownerDocument[listeningMarker] = true;
                  listenToNativeEvent("selectionchange", false, ownerDocument);
                }
              }
            }
          }
          function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
            var listener2 = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
            var isPassiveListener = void 0;
            if (passiveBrowserEventsSupported) {
              if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
                isPassiveListener = true;
              }
            }
            targetContainer = targetContainer;
            var unsubscribeListener;
            if (isCapturePhaseListener) {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener2, isPassiveListener);
              } else {
                unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener2);
              }
            } else {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener2, isPassiveListener);
              } else {
                unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener2);
              }
            }
          }
          function isMatchingRootContainer(grandContainer, targetContainer) {
            return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
          }
          function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var ancestorInst = targetInst;
            if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
              var targetContainerNode = targetContainer;
              if (targetInst !== null) {
                var node = targetInst;
                mainLoop:
                  while (true) {
                    if (node === null) {
                      return;
                    }
                    var nodeTag = node.tag;
                    if (nodeTag === HostRoot || nodeTag === HostPortal) {
                      var container = node.stateNode.containerInfo;
                      if (isMatchingRootContainer(container, targetContainerNode)) {
                        break;
                      }
                      if (nodeTag === HostPortal) {
                        var grandNode = node.return;
                        while (grandNode !== null) {
                          var grandTag = grandNode.tag;
                          if (grandTag === HostRoot || grandTag === HostPortal) {
                            var grandContainer = grandNode.stateNode.containerInfo;
                            if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                              return;
                            }
                          }
                          grandNode = grandNode.return;
                        }
                      }
                      while (container !== null) {
                        var parentNode = getClosestInstanceFromNode(container);
                        if (parentNode === null) {
                          return;
                        }
                        var parentTag = parentNode.tag;
                        if (parentTag === HostComponent || parentTag === HostText) {
                          node = ancestorInst = parentNode;
                          continue mainLoop;
                        }
                        container = container.parentNode;
                      }
                    }
                    node = node.return;
                  }
              }
            }
            batchedUpdates(function() {
              return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
            });
          }
          function createDispatchListener(instance2, listener2, currentTarget) {
            return {
              instance: instance2,
              listener: listener2,
              currentTarget
            };
          }
          function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
            var captureName = reactName !== null ? reactName + "Capture" : null;
            var reactEventName = inCapturePhase ? captureName : reactName;
            var listeners = [];
            var instance2 = targetFiber;
            var lastHostComponent = null;
            while (instance2 !== null) {
              var _instance2 = instance2, stateNode = _instance2.stateNode, tag = _instance2.tag;
              if (tag === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode;
                if (reactEventName !== null) {
                  var listener2 = getListener(instance2, reactEventName);
                  if (listener2 != null) {
                    listeners.push(createDispatchListener(instance2, listener2, lastHostComponent));
                  }
                }
              }
              if (accumulateTargetOnly) {
                break;
              }
              instance2 = instance2.return;
            }
            return listeners;
          }
          function accumulateTwoPhaseListeners(targetFiber, reactName) {
            var captureName = reactName + "Capture";
            var listeners = [];
            var instance2 = targetFiber;
            while (instance2 !== null) {
              var _instance3 = instance2, stateNode = _instance3.stateNode, tag = _instance3.tag;
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                var captureListener = getListener(instance2, captureName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance2, captureListener, currentTarget));
                }
                var bubbleListener = getListener(instance2, reactName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance2, bubbleListener, currentTarget));
                }
              }
              instance2 = instance2.return;
            }
            return listeners;
          }
          function getParent3(inst) {
            if (inst === null) {
              return null;
            }
            do {
              inst = inst.return;
            } while (inst && inst.tag !== HostComponent);
            if (inst) {
              return inst;
            }
            return null;
          }
          function getLowestCommonAncestor(instA, instB) {
            var nodeA = instA;
            var nodeB = instB;
            var depthA = 0;
            for (var tempA = nodeA; tempA; tempA = getParent3(tempA)) {
              depthA++;
            }
            var depthB = 0;
            for (var tempB = nodeB; tempB; tempB = getParent3(tempB)) {
              depthB++;
            }
            while (depthA - depthB > 0) {
              nodeA = getParent3(nodeA);
              depthA--;
            }
            while (depthB - depthA > 0) {
              nodeB = getParent3(nodeB);
              depthB--;
            }
            var depth = depthA;
            while (depth--) {
              if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
                return nodeA;
              }
              nodeA = getParent3(nodeA);
              nodeB = getParent3(nodeB);
            }
            return null;
          }
          function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
            var registrationName = event._reactName;
            var listeners = [];
            var instance2 = target;
            while (instance2 !== null) {
              if (instance2 === common) {
                break;
              }
              var _instance4 = instance2, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
              if (alternate !== null && alternate === common) {
                break;
              }
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                if (inCapturePhase) {
                  var captureListener = getListener(instance2, registrationName);
                  if (captureListener != null) {
                    listeners.unshift(createDispatchListener(instance2, captureListener, currentTarget));
                  }
                } else if (!inCapturePhase) {
                  var bubbleListener = getListener(instance2, registrationName);
                  if (bubbleListener != null) {
                    listeners.push(createDispatchListener(instance2, bubbleListener, currentTarget));
                  }
                }
              }
              instance2 = instance2.return;
            }
            if (listeners.length !== 0) {
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
            var common = from && to ? getLowestCommonAncestor(from, to) : null;
            if (from !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
            }
            if (to !== null && enterEvent !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
            }
          }
          function getListenerSetKey(domEventName, capture) {
            return domEventName + "__" + (capture ? "capture" : "bubble");
          }
          var didWarnInvalidHydration = false;
          var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
          var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
          var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
          var AUTOFOCUS = "autoFocus";
          var CHILDREN = "children";
          var STYLE = "style";
          var HTML$1 = "__html";
          var warnedUnknownTags;
          var validatePropertiesInDevelopment;
          var warnForPropDifference;
          var warnForExtraAttributes;
          var warnForInvalidEventListener;
          var canDiffStyleForHydrationWarning;
          var normalizeHTML;
          {
            warnedUnknownTags = {
              // There are working polyfills for <dialog>. Let people use it.
              dialog: true,
              // Electron ships a custom <webview> tag to display external web content in
              // an isolated frame and process.
              // This tag is not present in non Electron environments such as JSDom which
              // is often used for testing purposes.
              // @see https://electronjs.org/docs/api/webview-tag
              webview: true
            };
            validatePropertiesInDevelopment = function(type4, props) {
              validateProperties(type4, props);
              validateProperties$1(type4, props);
              validateProperties$2(type4, props, {
                registrationNameDependencies,
                possibleRegistrationNames
              });
            };
            canDiffStyleForHydrationWarning = canUseDOM3 && !document.documentMode;
            warnForPropDifference = function(propName, serverValue, clientValue) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
              var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
              if (normalizedServerValue === normalizedClientValue) {
                return;
              }
              didWarnInvalidHydration = true;
              error2("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
            };
            warnForExtraAttributes = function(attributeNames) {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              var names2 = [];
              attributeNames.forEach(function(name) {
                names2.push(name);
              });
              error2("Extra attributes from the server: %s", names2);
            };
            warnForInvalidEventListener = function(registrationName, listener2) {
              if (listener2 === false) {
                error2("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
              } else {
                error2("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener2);
              }
            };
            normalizeHTML = function(parent, html) {
              var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
              testElement.innerHTML = html;
              return testElement.innerHTML;
            };
          }
          var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
          var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
          function normalizeMarkupForTextOrAttribute(markup) {
            {
              checkHtmlStringCoercion(markup);
            }
            var markupString = typeof markup === "string" ? markup : "" + markup;
            return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
          }
          function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
            var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
            var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
            if (normalizedServerText === normalizedClientText) {
              return;
            }
            if (shouldWarnDev) {
              {
                if (!didWarnInvalidHydration) {
                  didWarnInvalidHydration = true;
                  error2('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
                }
              }
            }
            if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
              throw new Error("Text content does not match server-rendered HTML.");
            }
          }
          function getOwnerDocumentFromRootContainer(rootContainerElement) {
            return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
          }
          function noop9() {
          }
          function trapClickOnNonInteractiveElement(node) {
            node.onclick = noop9;
          }
          function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
            for (var propKey in nextProps) {
              if (!nextProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = nextProps[propKey];
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                setValueForStyles(domElement, nextProp);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  setInnerHTML(domElement, nextHtml);
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  var canSetTextContent = tag !== "textarea" || nextProp !== "";
                  if (canSetTextContent) {
                    setTextContent(domElement, nextProp);
                  }
                } else if (typeof nextProp === "number") {
                  setTextContent(domElement, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (nextProp != null) {
                setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
              }
            }
          }
          function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
            for (var i3 = 0; i3 < updatePayload.length; i3 += 2) {
              var propKey = updatePayload[i3];
              var propValue = updatePayload[i3 + 1];
              if (propKey === STYLE) {
                setValueForStyles(domElement, propValue);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                setInnerHTML(domElement, propValue);
              } else if (propKey === CHILDREN) {
                setTextContent(domElement, propValue);
              } else {
                setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
              }
            }
          }
          function createElement286(type4, props, rootContainerElement, parentNamespace) {
            var isCustomComponentTag;
            var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
            var domElement;
            var namespaceURI = parentNamespace;
            if (namespaceURI === HTML_NAMESPACE) {
              namespaceURI = getIntrinsicNamespace(type4);
            }
            if (namespaceURI === HTML_NAMESPACE) {
              {
                isCustomComponentTag = isCustomComponent(type4, props);
                if (!isCustomComponentTag && type4 !== type4.toLowerCase()) {
                  error2("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type4);
                }
              }
              if (type4 === "script") {
                var div = ownerDocument.createElement("div");
                div.innerHTML = "<script><\/script>";
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
              } else if (typeof props.is === "string") {
                domElement = ownerDocument.createElement(type4, {
                  is: props.is
                });
              } else {
                domElement = ownerDocument.createElement(type4);
                if (type4 === "select") {
                  var node = domElement;
                  if (props.multiple) {
                    node.multiple = true;
                  } else if (props.size) {
                    node.size = props.size;
                  }
                }
              }
            } else {
              domElement = ownerDocument.createElementNS(namespaceURI, type4);
            }
            {
              if (namespaceURI === HTML_NAMESPACE) {
                if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty2.call(warnedUnknownTags, type4)) {
                  warnedUnknownTags[type4] = true;
                  error2("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type4);
                }
              }
            }
            return domElement;
          }
          function createTextNode(text, rootContainerElement) {
            return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
          }
          function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
            var isCustomComponentTag = isCustomComponent(tag, rawProps);
            {
              validatePropertiesInDevelopment(tag, rawProps);
            }
            var props;
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                props = rawProps;
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "video":
              case "audio":
                for (var i3 = 0; i3 < mediaEventTypes.length; i3++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i3], domElement);
                }
                props = rawProps;
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                props = rawProps;
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                props = rawProps;
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                props = rawProps;
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              default:
                props = rawProps;
            }
            assertValidProps(tag, props);
            setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "option":
                postMountWrapper$1(domElement, rawProps);
                break;
              case "select":
                postMountWrapper$2(domElement, rawProps);
                break;
              default:
                if (typeof props.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
          }
          function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
            {
              validatePropertiesInDevelopment(tag, nextRawProps);
            }
            var updatePayload = null;
            var lastProps;
            var nextProps;
            switch (tag) {
              case "input":
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "select":
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "textarea":
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
              default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            assertValidProps(tag, nextProps);
            var propKey;
            var styleName;
            var styleUpdates = null;
            for (propKey in lastProps) {
              if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
                continue;
              }
              if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for (styleName in lastStyle) {
                  if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
                ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (!updatePayload) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, null);
              }
            }
            for (propKey in nextProps) {
              var nextProp = nextProps[propKey];
              var lastProp = lastProps != null ? lastProps[propKey] : void 0;
              if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
                continue;
              }
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                if (lastProp) {
                  for (styleName in lastProp) {
                    if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = "";
                    }
                  }
                  for (styleName in nextProp) {
                    if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = nextProp[styleName];
                    }
                  }
                } else {
                  if (!styleUpdates) {
                    if (!updatePayload) {
                      updatePayload = [];
                    }
                    updatePayload.push(propKey, styleUpdates);
                  }
                  styleUpdates = nextProp;
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  if (lastHtml !== nextHtml) {
                    (updatePayload = updatePayload || []).push(propKey, nextHtml);
                  }
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string" || typeof nextProp === "number") {
                  (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
                if (!updatePayload && lastProp !== nextProp) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, nextProp);
              }
            }
            if (styleUpdates) {
              {
                validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
              }
              (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
            }
            return updatePayload;
          }
          function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
            if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
              updateChecked(domElement, nextRawProps);
            }
            var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
            var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
            updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
            switch (tag) {
              case "input":
                updateWrapper(domElement, nextRawProps);
                break;
              case "textarea":
                updateWrapper$1(domElement, nextRawProps);
                break;
              case "select":
                postUpdateWrapper(domElement, nextRawProps);
                break;
            }
          }
          function getPossibleStandardName(propName) {
            {
              var lowerCasedName = propName.toLowerCase();
              if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                return null;
              }
              return possibleStandardNames[lowerCasedName] || null;
            }
          }
          function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
            var isCustomComponentTag;
            var extraAttributeNames;
            {
              isCustomComponentTag = isCustomComponent(tag, rawProps);
              validatePropertiesInDevelopment(tag, rawProps);
            }
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "video":
              case "audio":
                for (var i3 = 0; i3 < mediaEventTypes.length; i3++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i3], domElement);
                }
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
            }
            assertValidProps(tag, rawProps);
            {
              extraAttributeNames = /* @__PURE__ */ new Set();
              var attributes2 = domElement.attributes;
              for (var _i = 0; _i < attributes2.length; _i++) {
                var name = attributes2[_i].name.toLowerCase();
                switch (name) {
                  case "value":
                    break;
                  case "checked":
                    break;
                  case "selected":
                    break;
                  default:
                    extraAttributeNames.add(attributes2[_i].name);
                }
              }
            }
            var updatePayload = null;
            for (var propKey in rawProps) {
              if (!rawProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = rawProps[propKey];
              if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  if (domElement.textContent !== nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, nextProp];
                  }
                } else if (typeof nextProp === "number") {
                  if (domElement.textContent !== "" + nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, "" + nextProp];
                  }
                }
              } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (shouldWarnDev && true && // Convince Flow we've calculated it (it's DEV-only in this method.)
              typeof isCustomComponentTag === "boolean") {
                var serverValue = void 0;
                var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
                if (rawProps[SUPPRESS_HYDRATION_WARNING] === true)
                  ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
                // TODO: Only ignore them on controlled tags.
                propKey === "value" || propKey === "checked" || propKey === "selected")
                  ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                  var serverHTML = domElement.innerHTML;
                  var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                  if (nextHtml != null) {
                    var expectedHTML = normalizeHTML(domElement, nextHtml);
                    if (expectedHTML !== serverHTML) {
                      warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                  }
                } else if (propKey === STYLE) {
                  extraAttributeNames.delete(propKey);
                  if (canDiffStyleForHydrationWarning) {
                    var expectedStyle = createDangerousStringForStyles(nextProp);
                    serverValue = domElement.getAttribute("style");
                    if (expectedStyle !== serverValue) {
                      warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                  }
                } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
                  extraAttributeNames.delete(propKey.toLowerCase());
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  if (nextProp !== serverValue) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                  var isMismatchDueToBadCasing = false;
                  if (propertyInfo !== null) {
                    extraAttributeNames.delete(propertyInfo.attributeName);
                    serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                  } else {
                    var ownNamespace = parentNamespace;
                    if (ownNamespace === HTML_NAMESPACE) {
                      ownNamespace = getIntrinsicNamespace(tag);
                    }
                    if (ownNamespace === HTML_NAMESPACE) {
                      extraAttributeNames.delete(propKey.toLowerCase());
                    } else {
                      var standardName = getPossibleStandardName(propKey);
                      if (standardName !== null && standardName !== propKey) {
                        isMismatchDueToBadCasing = true;
                        extraAttributeNames.delete(standardName);
                      }
                      extraAttributeNames.delete(propKey);
                    }
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  }
                  var dontWarnCustomElement = enableCustomElementPropertySupport;
                  if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                }
              }
            }
            {
              if (shouldWarnDev) {
                if (
                  // $FlowFixMe - Should be inferred as not undefined.
                  extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true
                ) {
                  warnForExtraAttributes(extraAttributeNames);
                }
              }
            }
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "select":
              case "option":
                break;
              default:
                if (typeof rawProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            return updatePayload;
          }
          function diffHydratedText(textNode, text, isConcurrentMode) {
            var isDifferent = textNode.nodeValue !== text;
            return isDifferent;
          }
          function warnForDeletedHydratableElement(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error2("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
            }
          }
          function warnForDeletedHydratableText(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error2('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedElement(parentNode, tag, props) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error2("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedText(parentNode, text) {
            {
              if (text === "") {
                return;
              }
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error2('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
            }
          }
          function restoreControlledState$3(domElement, tag, props) {
            switch (tag) {
              case "input":
                restoreControlledState(domElement, props);
                return;
              case "textarea":
                restoreControlledState$2(domElement, props);
                return;
              case "select":
                restoreControlledState$1(domElement, props);
                return;
            }
          }
          var validateDOMNesting = function() {
          };
          var updatedAncestorInfo = function() {
          };
          {
            var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
            var inScopeTags = [
              "applet",
              "caption",
              "html",
              "table",
              "td",
              "th",
              "marquee",
              "object",
              "template",
              // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
              // TODO: Distinguish by namespace here -- for <title>, including it here
              // errs on the side of fewer warnings
              "foreignObject",
              "desc",
              "title"
            ];
            var buttonScopeTags = inScopeTags.concat(["button"]);
            var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
            var emptyAncestorInfo = {
              current: null,
              formTag: null,
              aTagInScope: null,
              buttonTagInScope: null,
              nobrTagInScope: null,
              pTagInButtonScope: null,
              listItemTagAutoclosing: null,
              dlItemTagAutoclosing: null
            };
            updatedAncestorInfo = function(oldInfo, tag) {
              var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
              var info = {
                tag
              };
              if (inScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.aTagInScope = null;
                ancestorInfo.buttonTagInScope = null;
                ancestorInfo.nobrTagInScope = null;
              }
              if (buttonScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.pTagInButtonScope = null;
              }
              if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
                ancestorInfo.listItemTagAutoclosing = null;
                ancestorInfo.dlItemTagAutoclosing = null;
              }
              ancestorInfo.current = info;
              if (tag === "form") {
                ancestorInfo.formTag = info;
              }
              if (tag === "a") {
                ancestorInfo.aTagInScope = info;
              }
              if (tag === "button") {
                ancestorInfo.buttonTagInScope = info;
              }
              if (tag === "nobr") {
                ancestorInfo.nobrTagInScope = info;
              }
              if (tag === "p") {
                ancestorInfo.pTagInButtonScope = info;
              }
              if (tag === "li") {
                ancestorInfo.listItemTagAutoclosing = info;
              }
              if (tag === "dd" || tag === "dt") {
                ancestorInfo.dlItemTagAutoclosing = info;
              }
              return ancestorInfo;
            };
            var isTagValidWithParent = function(tag, parentTag) {
              switch (parentTag) {
                case "select":
                  return tag === "option" || tag === "optgroup" || tag === "#text";
                case "optgroup":
                  return tag === "option" || tag === "#text";
                case "option":
                  return tag === "#text";
                case "tr":
                  return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
                case "tbody":
                case "thead":
                case "tfoot":
                  return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
                case "colgroup":
                  return tag === "col" || tag === "template";
                case "table":
                  return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
                case "head":
                  return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
                case "html":
                  return tag === "head" || tag === "body" || tag === "frameset";
                case "frameset":
                  return tag === "frame";
                case "#document":
                  return tag === "html";
              }
              switch (tag) {
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
                case "rp":
                case "rt":
                  return impliedEndTags.indexOf(parentTag) === -1;
                case "body":
                case "caption":
                case "col":
                case "colgroup":
                case "frameset":
                case "frame":
                case "head":
                case "html":
                case "tbody":
                case "td":
                case "tfoot":
                case "th":
                case "thead":
                case "tr":
                  return parentTag == null;
              }
              return true;
            };
            var findInvalidAncestorForTag = function(tag, ancestorInfo) {
              switch (tag) {
                case "address":
                case "article":
                case "aside":
                case "blockquote":
                case "center":
                case "details":
                case "dialog":
                case "dir":
                case "div":
                case "dl":
                case "fieldset":
                case "figcaption":
                case "figure":
                case "footer":
                case "header":
                case "hgroup":
                case "main":
                case "menu":
                case "nav":
                case "ol":
                case "p":
                case "section":
                case "summary":
                case "ul":
                case "pre":
                case "listing":
                case "table":
                case "hr":
                case "xmp":
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return ancestorInfo.pTagInButtonScope;
                case "form":
                  return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
                case "li":
                  return ancestorInfo.listItemTagAutoclosing;
                case "dd":
                case "dt":
                  return ancestorInfo.dlItemTagAutoclosing;
                case "button":
                  return ancestorInfo.buttonTagInScope;
                case "a":
                  return ancestorInfo.aTagInScope;
                case "nobr":
                  return ancestorInfo.nobrTagInScope;
              }
              return null;
            };
            var didWarn$1 = {};
            validateDOMNesting = function(childTag, childText, ancestorInfo) {
              ancestorInfo = ancestorInfo || emptyAncestorInfo;
              var parentInfo = ancestorInfo.current;
              var parentTag = parentInfo && parentInfo.tag;
              if (childText != null) {
                if (childTag != null) {
                  error2("validateDOMNesting: when childText is passed, childTag should be null");
                }
                childTag = "#text";
              }
              var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
              var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
              var invalidParentOrAncestor = invalidParent || invalidAncestor;
              if (!invalidParentOrAncestor) {
                return;
              }
              var ancestorTag = invalidParentOrAncestor.tag;
              var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
              if (didWarn$1[warnKey]) {
                return;
              }
              didWarn$1[warnKey] = true;
              var tagDisplayName = childTag;
              var whitespaceInfo = "";
              if (childTag === "#text") {
                if (/\S/.test(childText)) {
                  tagDisplayName = "Text nodes";
                } else {
                  tagDisplayName = "Whitespace text nodes";
                  whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
                }
              } else {
                tagDisplayName = "<" + childTag + ">";
              }
              if (invalidParent) {
                var info = "";
                if (ancestorTag === "table" && childTag === "tr") {
                  info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
                }
                error2("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
              } else {
                error2("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
              }
            };
          }
          var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
          var SUSPENSE_START_DATA = "$";
          var SUSPENSE_END_DATA = "/$";
          var SUSPENSE_PENDING_START_DATA = "$?";
          var SUSPENSE_FALLBACK_START_DATA = "$!";
          var STYLE$1 = "style";
          var eventsEnabled = null;
          var selectionInformation = null;
          function getRootHostContext(rootContainerInstance) {
            var type4;
            var namespace;
            var nodeType = rootContainerInstance.nodeType;
            switch (nodeType) {
              case DOCUMENT_NODE:
              case DOCUMENT_FRAGMENT_NODE: {
                type4 = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
                var root4 = rootContainerInstance.documentElement;
                namespace = root4 ? root4.namespaceURI : getChildNamespace(null, "");
                break;
              }
              default: {
                var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container.namespaceURI || null;
                type4 = container.tagName;
                namespace = getChildNamespace(ownNamespace, type4);
                break;
              }
            }
            {
              var validatedTag = type4.toLowerCase();
              var ancestorInfo = updatedAncestorInfo(null, validatedTag);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getChildHostContext(parentHostContext, type4, rootContainerInstance) {
            {
              var parentHostContextDev = parentHostContext;
              var namespace = getChildNamespace(parentHostContextDev.namespace, type4);
              var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type4);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getPublicInstance(instance2) {
            return instance2;
          }
          function prepareForCommit(containerInfo) {
            eventsEnabled = isEnabled();
            selectionInformation = getSelectionInformation();
            var activeInstance = null;
            setEnabled(false);
            return activeInstance;
          }
          function resetAfterCommit(containerInfo) {
            restoreSelection(selectionInformation);
            setEnabled(eventsEnabled);
            eventsEnabled = null;
            selectionInformation = null;
          }
          function createInstance2(type4, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              validateDOMNesting(type4, null, hostContextDev.ancestorInfo);
              if (typeof props.children === "string" || typeof props.children === "number") {
                var string3 = "" + props.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type4);
                validateDOMNesting(null, string3, ownAncestorInfo);
              }
              parentNamespace = hostContextDev.namespace;
            }
            var domElement = createElement286(type4, props, rootContainerInstance, parentNamespace);
            precacheFiberNode(internalInstanceHandle, domElement);
            updateFiberProps(domElement, props);
            return domElement;
          }
          function appendInitialChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function finalizeInitialChildren(domElement, type4, props, rootContainerInstance, hostContext) {
            setInitialProperties(domElement, type4, props, rootContainerInstance);
            switch (type4) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                return !!props.autoFocus;
              case "img":
                return true;
              default:
                return false;
            }
          }
          function prepareUpdate(domElement, type4, oldProps, newProps, rootContainerInstance, hostContext) {
            {
              var hostContextDev = hostContext;
              if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
                var string3 = "" + newProps.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type4);
                validateDOMNesting(null, string3, ownAncestorInfo);
              }
            }
            return diffProperties(domElement, type4, oldProps, newProps);
          }
          function shouldSetTextContent(type4, props) {
            return type4 === "textarea" || type4 === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
          }
          function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
            {
              var hostContextDev = hostContext;
              validateDOMNesting(null, text, hostContextDev.ancestorInfo);
            }
            var textNode = createTextNode(text, rootContainerInstance);
            precacheFiberNode(internalInstanceHandle, textNode);
            return textNode;
          }
          function getCurrentEventPriority() {
            var currentEvent = window.event;
            if (currentEvent === void 0) {
              return DefaultEventPriority;
            }
            return getEventPriority(currentEvent.type);
          }
          var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
          var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
          var noTimeout = -1;
          var localPromise = typeof Promise === "function" ? Promise : void 0;
          var scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
            return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
          } : scheduleTimeout;
          function handleErrorInNextTick(error3) {
            setTimeout(function() {
              throw error3;
            });
          }
          function commitMount(domElement, type4, newProps, internalInstanceHandle) {
            switch (type4) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                if (newProps.autoFocus) {
                  domElement.focus();
                }
                return;
              case "img": {
                if (newProps.src) {
                  domElement.src = newProps.src;
                }
                return;
              }
            }
          }
          function commitUpdate(domElement, updatePayload, type4, oldProps, newProps, internalInstanceHandle) {
            updateProperties(domElement, updatePayload, type4, oldProps, newProps);
            updateFiberProps(domElement, newProps);
          }
          function resetTextContent(domElement) {
            setTextContent(domElement, "");
          }
          function commitTextUpdate(textInstance, oldText, newText) {
            textInstance.nodeValue = newText;
          }
          function appendChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function appendChildToContainer(container, child) {
            var parentNode;
            if (container.nodeType === COMMENT_NODE) {
              parentNode = container.parentNode;
              parentNode.insertBefore(child, container);
            } else {
              parentNode = container;
              parentNode.appendChild(child);
            }
            var reactRootContainer = container._reactRootContainer;
            if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
              trapClickOnNonInteractiveElement(parentNode);
            }
          }
          function insertBefore(parentInstance, child, beforeChild) {
            parentInstance.insertBefore(child, beforeChild);
          }
          function insertInContainerBefore(container, child, beforeChild) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.insertBefore(child, beforeChild);
            } else {
              container.insertBefore(child, beforeChild);
            }
          }
          function removeChild(parentInstance, child) {
            parentInstance.removeChild(child);
          }
          function removeChildFromContainer(container, child) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.removeChild(child);
            } else {
              container.removeChild(child);
            }
          }
          function clearSuspenseBoundary(parentInstance, suspenseInstance) {
            var node = suspenseInstance;
            var depth = 0;
            do {
              var nextNode = node.nextSibling;
              parentInstance.removeChild(node);
              if (nextNode && nextNode.nodeType === COMMENT_NODE) {
                var data = nextNode.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    parentInstance.removeChild(nextNode);
                    retryIfBlockedOn(suspenseInstance);
                    return;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {
                  depth++;
                }
              }
              node = nextNode;
            } while (node);
            retryIfBlockedOn(suspenseInstance);
          }
          function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
            if (container.nodeType === COMMENT_NODE) {
              clearSuspenseBoundary(container.parentNode, suspenseInstance);
            } else if (container.nodeType === ELEMENT_NODE) {
              clearSuspenseBoundary(container, suspenseInstance);
            }
            retryIfBlockedOn(container);
          }
          function hideInstance(instance2) {
            instance2 = instance2;
            var style4 = instance2.style;
            if (typeof style4.setProperty === "function") {
              style4.setProperty("display", "none", "important");
            } else {
              style4.display = "none";
            }
          }
          function hideTextInstance(textInstance) {
            textInstance.nodeValue = "";
          }
          function unhideInstance(instance2, props) {
            instance2 = instance2;
            var styleProp = props[STYLE$1];
            var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
            instance2.style.display = dangerousStyleValue("display", display);
          }
          function unhideTextInstance(textInstance, text) {
            textInstance.nodeValue = text;
          }
          function clearContainer(container) {
            if (container.nodeType === ELEMENT_NODE) {
              container.textContent = "";
            } else if (container.nodeType === DOCUMENT_NODE) {
              if (container.documentElement) {
                container.removeChild(container.documentElement);
              }
            }
          }
          function canHydrateInstance(instance2, type4, props) {
            if (instance2.nodeType !== ELEMENT_NODE || type4.toLowerCase() !== instance2.nodeName.toLowerCase()) {
              return null;
            }
            return instance2;
          }
          function canHydrateTextInstance(instance2, text) {
            if (text === "" || instance2.nodeType !== TEXT_NODE) {
              return null;
            }
            return instance2;
          }
          function canHydrateSuspenseInstance(instance2) {
            if (instance2.nodeType !== COMMENT_NODE) {
              return null;
            }
            return instance2;
          }
          function isSuspenseInstancePending(instance2) {
            return instance2.data === SUSPENSE_PENDING_START_DATA;
          }
          function isSuspenseInstanceFallback(instance2) {
            return instance2.data === SUSPENSE_FALLBACK_START_DATA;
          }
          function getSuspenseInstanceFallbackErrorDetails(instance2) {
            var dataset = instance2.nextSibling && instance2.nextSibling.dataset;
            var digest, message, stack;
            if (dataset) {
              digest = dataset.dgst;
              {
                message = dataset.msg;
                stack = dataset.stck;
              }
            }
            {
              return {
                message,
                digest,
                stack
              };
            }
          }
          function registerSuspenseInstanceRetry(instance2, callback) {
            instance2._reactRetry = callback;
          }
          function getNextHydratable(node) {
            for (; node != null; node = node.nextSibling) {
              var nodeType = node.nodeType;
              if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
                break;
              }
              if (nodeType === COMMENT_NODE) {
                var nodeData = node.data;
                if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
                  break;
                }
                if (nodeData === SUSPENSE_END_DATA) {
                  return null;
                }
              }
            }
            return node;
          }
          function getNextHydratableSibling(instance2) {
            return getNextHydratable(instance2.nextSibling);
          }
          function getFirstHydratableChild(parentInstance) {
            return getNextHydratable(parentInstance.firstChild);
          }
          function getFirstHydratableChildWithinContainer(parentContainer) {
            return getNextHydratable(parentContainer.firstChild);
          }
          function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
            return getNextHydratable(parentInstance.nextSibling);
          }
          function hydrateInstance(instance2, type4, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, instance2);
            updateFiberProps(instance2, props);
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              parentNamespace = hostContextDev.namespace;
            }
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedProperties(instance2, type4, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
          }
          function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, textInstance);
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedText(textInstance, text);
          }
          function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, suspenseInstance);
          }
          function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
            var node = suspenseInstance.nextSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    return getNextHydratableSibling(node);
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  depth++;
                }
              }
              node = node.nextSibling;
            }
            return null;
          }
          function getParentSuspenseInstance(targetInstance) {
            var node = targetInstance.previousSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  if (depth === 0) {
                    return node;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_END_DATA) {
                  depth++;
                }
              }
              node = node.previousSibling;
            }
            return null;
          }
          function commitHydratedContainer(container) {
            retryIfBlockedOn(container);
          }
          function commitHydratedSuspenseInstance(suspenseInstance) {
            retryIfBlockedOn(suspenseInstance);
          }
          function shouldDeleteUnhydratedTailInstances(parentType) {
            return parentType !== "head" && parentType !== "body";
          }
          function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
            var shouldWarnDev = true;
            checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
          }
          function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              var shouldWarnDev = true;
              checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
            }
          }
          function didNotHydrateInstanceWithinContainer(parentContainer, instance2) {
            {
              if (instance2.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentContainer, instance2);
              } else if (instance2.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentContainer, instance2);
              }
            }
          }
          function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance2) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null) {
                if (instance2.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentNode, instance2);
                } else if (instance2.nodeType === COMMENT_NODE)
                  ;
                else {
                  warnForDeletedHydratableText(parentNode, instance2);
                }
              }
            }
          }
          function didNotHydrateInstance(parentType, parentProps, parentInstance, instance2, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                if (instance2.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentInstance, instance2);
                } else if (instance2.nodeType === COMMENT_NODE)
                  ;
                else {
                  warnForDeletedHydratableText(parentInstance, instance2);
                }
              }
            }
          }
          function didNotFindHydratableInstanceWithinContainer(parentContainer, type4, props) {
            {
              warnForInsertedHydratedElement(parentContainer, type4);
            }
          }
          function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
            {
              warnForInsertedHydratedText(parentContainer, text);
            }
          }
          function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type4, props) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null)
                warnForInsertedHydratedElement(parentNode, type4);
            }
          }
          function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null)
                warnForInsertedHydratedText(parentNode, text);
            }
          }
          function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type4, props, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedElement(parentInstance, type4);
              }
            }
          }
          function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedText(parentInstance, text);
              }
            }
          }
          function errorHydratingContainer(parentContainer) {
            {
              error2("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
            }
          }
          function preparePortalMount(portalInstance) {
            listenToAllSupportedEvents(portalInstance);
          }
          var randomKey = Math.random().toString(36).slice(2);
          var internalInstanceKey = "__reactFiber$" + randomKey;
          var internalPropsKey = "__reactProps$" + randomKey;
          var internalContainerInstanceKey = "__reactContainer$" + randomKey;
          var internalEventHandlersKey = "__reactEvents$" + randomKey;
          var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
          var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
          function detachDeletedInstance(node) {
            delete node[internalInstanceKey];
            delete node[internalPropsKey];
            delete node[internalEventHandlersKey];
            delete node[internalEventHandlerListenersKey];
            delete node[internalEventHandlesSetKey];
          }
          function precacheFiberNode(hostInst, node) {
            node[internalInstanceKey] = hostInst;
          }
          function markContainerAsRoot(hostRoot, node) {
            node[internalContainerInstanceKey] = hostRoot;
          }
          function unmarkContainerAsRoot(node) {
            node[internalContainerInstanceKey] = null;
          }
          function isContainerMarkedAsRoot(node) {
            return !!node[internalContainerInstanceKey];
          }
          function getClosestInstanceFromNode(targetNode) {
            var targetInst = targetNode[internalInstanceKey];
            if (targetInst) {
              return targetInst;
            }
            var parentNode = targetNode.parentNode;
            while (parentNode) {
              targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
              if (targetInst) {
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                  var suspenseInstance = getParentSuspenseInstance(targetNode);
                  while (suspenseInstance !== null) {
                    var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                    if (targetSuspenseInst) {
                      return targetSuspenseInst;
                    }
                    suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                  }
                }
                return targetInst;
              }
              targetNode = parentNode;
              parentNode = targetNode.parentNode;
            }
            return null;
          }
          function getInstanceFromNode(node) {
            var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
            if (inst) {
              if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
                return inst;
              } else {
                return null;
              }
            }
            return null;
          }
          function getNodeFromInstance(inst) {
            if (inst.tag === HostComponent || inst.tag === HostText) {
              return inst.stateNode;
            }
            throw new Error("getNodeFromInstance: Invalid argument.");
          }
          function getFiberCurrentPropsFromNode(node) {
            return node[internalPropsKey] || null;
          }
          function updateFiberProps(node, props) {
            node[internalPropsKey] = props;
          }
          function getEventListenerSet(node) {
            var elementListenerSet = node[internalEventHandlersKey];
            if (elementListenerSet === void 0) {
              elementListenerSet = node[internalEventHandlersKey] = /* @__PURE__ */ new Set();
            }
            return elementListenerSet;
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location, componentName, element) {
            {
              var has2 = Function.call.bind(hasOwnProperty2);
              for (var typeSpecName in typeSpecs) {
                if (has2(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error2("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error2("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var valueStack = [];
          var fiberStack;
          {
            fiberStack = [];
          }
          var index2 = -1;
          function createCursor(defaultValue) {
            return {
              current: defaultValue
            };
          }
          function pop(cursor, fiber) {
            if (index2 < 0) {
              {
                error2("Unexpected pop.");
              }
              return;
            }
            {
              if (fiber !== fiberStack[index2]) {
                error2("Unexpected Fiber popped.");
              }
            }
            cursor.current = valueStack[index2];
            valueStack[index2] = null;
            {
              fiberStack[index2] = null;
            }
            index2--;
          }
          function push(cursor, value, fiber) {
            index2++;
            valueStack[index2] = cursor.current;
            {
              fiberStack[index2] = fiber;
            }
            cursor.current = value;
          }
          var warnedAboutMissingGetChildContext;
          {
            warnedAboutMissingGetChildContext = {};
          }
          var emptyContextObject = {};
          {
            Object.freeze(emptyContextObject);
          }
          var contextStackCursor = createCursor(emptyContextObject);
          var didPerformWorkStackCursor = createCursor(false);
          var previousContext = emptyContextObject;
          function getUnmaskedContext(workInProgress2, Component20, didPushOwnContextIfProvider) {
            {
              if (didPushOwnContextIfProvider && isContextProvider(Component20)) {
                return previousContext;
              }
              return contextStackCursor.current;
            }
          }
          function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
            {
              var instance2 = workInProgress2.stateNode;
              instance2.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
              instance2.__reactInternalMemoizedMaskedChildContext = maskedContext;
            }
          }
          function getMaskedContext(workInProgress2, unmaskedContext) {
            {
              var type4 = workInProgress2.type;
              var contextTypes = type4.contextTypes;
              if (!contextTypes) {
                return emptyContextObject;
              }
              var instance2 = workInProgress2.stateNode;
              if (instance2 && instance2.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
                return instance2.__reactInternalMemoizedMaskedChildContext;
              }
              var context2 = {};
              for (var key2 in contextTypes) {
                context2[key2] = unmaskedContext[key2];
              }
              {
                var name = getComponentNameFromFiber(workInProgress2) || "Unknown";
                checkPropTypes(contextTypes, context2, "context", name);
              }
              if (instance2) {
                cacheContext(workInProgress2, unmaskedContext, context2);
              }
              return context2;
            }
          }
          function hasContextChanged() {
            {
              return didPerformWorkStackCursor.current;
            }
          }
          function isContextProvider(type4) {
            {
              var childContextTypes = type4.childContextTypes;
              return childContextTypes !== null && childContextTypes !== void 0;
            }
          }
          function popContext(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function popTopLevelContextObject(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function pushTopLevelContextObject(fiber, context2, didChange) {
            {
              if (contextStackCursor.current !== emptyContextObject) {
                throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
              }
              push(contextStackCursor, context2, fiber);
              push(didPerformWorkStackCursor, didChange, fiber);
            }
          }
          function processChildContext(fiber, type4, parentContext) {
            {
              var instance2 = fiber.stateNode;
              var childContextTypes = type4.childContextTypes;
              if (typeof instance2.getChildContext !== "function") {
                {
                  var componentName = getComponentNameFromFiber(fiber) || "Unknown";
                  if (!warnedAboutMissingGetChildContext[componentName]) {
                    warnedAboutMissingGetChildContext[componentName] = true;
                    error2("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                  }
                }
                return parentContext;
              }
              var childContext = instance2.getChildContext();
              for (var contextKey in childContext) {
                if (!(contextKey in childContextTypes)) {
                  throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                }
              }
              {
                var name = getComponentNameFromFiber(fiber) || "Unknown";
                checkPropTypes(childContextTypes, childContext, "child context", name);
              }
              return assign({}, parentContext, childContext);
            }
          }
          function pushContextProvider(workInProgress2) {
            {
              var instance2 = workInProgress2.stateNode;
              var memoizedMergedChildContext = instance2 && instance2.__reactInternalMemoizedMergedChildContext || emptyContextObject;
              previousContext = contextStackCursor.current;
              push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
              push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
              return true;
            }
          }
          function invalidateContextProvider(workInProgress2, type4, didChange) {
            {
              var instance2 = workInProgress2.stateNode;
              if (!instance2) {
                throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
              }
              if (didChange) {
                var mergedContext = processChildContext(workInProgress2, type4, previousContext);
                instance2.__reactInternalMemoizedMergedChildContext = mergedContext;
                pop(didPerformWorkStackCursor, workInProgress2);
                pop(contextStackCursor, workInProgress2);
                push(contextStackCursor, mergedContext, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              } else {
                pop(didPerformWorkStackCursor, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              }
            }
          }
          function findCurrentUnmaskedContext(fiber) {
            {
              if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
                throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
              }
              var node = fiber;
              do {
                switch (node.tag) {
                  case HostRoot:
                    return node.stateNode.context;
                  case ClassComponent: {
                    var Component20 = node.type;
                    if (isContextProvider(Component20)) {
                      return node.stateNode.__reactInternalMemoizedMergedChildContext;
                    }
                    break;
                  }
                }
                node = node.return;
              } while (node !== null);
              throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          var LegacyRoot = 0;
          var ConcurrentRoot = 1;
          var syncQueue = null;
          var includesLegacySyncCallbacks = false;
          var isFlushingSyncQueue = false;
          function scheduleSyncCallback(callback) {
            if (syncQueue === null) {
              syncQueue = [callback];
            } else {
              syncQueue.push(callback);
            }
          }
          function scheduleLegacySyncCallback(callback) {
            includesLegacySyncCallbacks = true;
            scheduleSyncCallback(callback);
          }
          function flushSyncCallbacksOnlyInLegacyMode() {
            if (includesLegacySyncCallbacks) {
              flushSyncCallbacks();
            }
          }
          function flushSyncCallbacks() {
            if (!isFlushingSyncQueue && syncQueue !== null) {
              isFlushingSyncQueue = true;
              var i3 = 0;
              var previousUpdatePriority = getCurrentUpdatePriority();
              try {
                var isSync = true;
                var queue = syncQueue;
                setCurrentUpdatePriority(DiscreteEventPriority);
                for (; i3 < queue.length; i3++) {
                  var callback = queue[i3];
                  do {
                    callback = callback(isSync);
                  } while (callback !== null);
                }
                syncQueue = null;
                includesLegacySyncCallbacks = false;
              } catch (error3) {
                if (syncQueue !== null) {
                  syncQueue = syncQueue.slice(i3 + 1);
                }
                scheduleCallback(ImmediatePriority, flushSyncCallbacks);
                throw error3;
              } finally {
                setCurrentUpdatePriority(previousUpdatePriority);
                isFlushingSyncQueue = false;
              }
            }
            return null;
          }
          var forkStack = [];
          var forkStackIndex = 0;
          var treeForkProvider = null;
          var treeForkCount = 0;
          var idStack = [];
          var idStackIndex = 0;
          var treeContextProvider = null;
          var treeContextId = 1;
          var treeContextOverflow = "";
          function isForkedChild(workInProgress2) {
            warnIfNotHydrating();
            return (workInProgress2.flags & Forked) !== NoFlags;
          }
          function getForksAtLevel(workInProgress2) {
            warnIfNotHydrating();
            return treeForkCount;
          }
          function getTreeId() {
            var overflow = treeContextOverflow;
            var idWithLeadingBit = treeContextId;
            var id2 = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
            return id2.toString(32) + overflow;
          }
          function pushTreeFork(workInProgress2, totalChildren) {
            warnIfNotHydrating();
            forkStack[forkStackIndex++] = treeForkCount;
            forkStack[forkStackIndex++] = treeForkProvider;
            treeForkProvider = workInProgress2;
            treeForkCount = totalChildren;
          }
          function pushTreeId(workInProgress2, totalChildren, index3) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextProvider = workInProgress2;
            var baseIdWithLeadingBit = treeContextId;
            var baseOverflow = treeContextOverflow;
            var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
            var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
            var slot = index3 + 1;
            var length = getBitLength(totalChildren) + baseLength;
            if (length > 30) {
              var numberOfOverflowBits = baseLength - baseLength % 5;
              var newOverflowBits = (1 << numberOfOverflowBits) - 1;
              var newOverflow = (baseId & newOverflowBits).toString(32);
              var restOfBaseId = baseId >> numberOfOverflowBits;
              var restOfBaseLength = baseLength - numberOfOverflowBits;
              var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
              var restOfNewBits = slot << restOfBaseLength;
              var id2 = restOfNewBits | restOfBaseId;
              var overflow = newOverflow + baseOverflow;
              treeContextId = 1 << restOfLength | id2;
              treeContextOverflow = overflow;
            } else {
              var newBits = slot << baseLength;
              var _id = newBits | baseId;
              var _overflow = baseOverflow;
              treeContextId = 1 << length | _id;
              treeContextOverflow = _overflow;
            }
          }
          function pushMaterializedTreeId(workInProgress2) {
            warnIfNotHydrating();
            var returnFiber = workInProgress2.return;
            if (returnFiber !== null) {
              var numberOfForks = 1;
              var slotIndex = 0;
              pushTreeFork(workInProgress2, numberOfForks);
              pushTreeId(workInProgress2, numberOfForks, slotIndex);
            }
          }
          function getBitLength(number4) {
            return 32 - clz32(number4);
          }
          function getLeadingBit(id2) {
            return 1 << getBitLength(id2) - 1;
          }
          function popTreeContext(workInProgress2) {
            while (workInProgress2 === treeForkProvider) {
              treeForkProvider = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
              treeForkCount = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
            }
            while (workInProgress2 === treeContextProvider) {
              treeContextProvider = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextOverflow = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextId = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
            }
          }
          function getSuspendedTreeContext() {
            warnIfNotHydrating();
            if (treeContextProvider !== null) {
              return {
                id: treeContextId,
                overflow: treeContextOverflow
              };
            } else {
              return null;
            }
          }
          function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextId = suspendedContext.id;
            treeContextOverflow = suspendedContext.overflow;
            treeContextProvider = workInProgress2;
          }
          function warnIfNotHydrating() {
            {
              if (!getIsHydrating()) {
                error2("Expected to be hydrating. This is a bug in React. Please file an issue.");
              }
            }
          }
          var hydrationParentFiber = null;
          var nextHydratableInstance = null;
          var isHydrating = false;
          var didSuspendOrErrorDEV = false;
          var hydrationErrors = null;
          function warnIfHydrating() {
            {
              if (isHydrating) {
                error2("We should not be hydrating here. This is a bug in React. Please file a bug.");
              }
            }
          }
          function markDidThrowWhileHydratingDEV() {
            {
              didSuspendOrErrorDEV = true;
            }
          }
          function didSuspendOrErrorWhileHydratingDEV() {
            {
              return didSuspendOrErrorDEV;
            }
          }
          function enterHydrationState(fiber) {
            var parentInstance = fiber.stateNode.containerInfo;
            nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            return true;
          }
          function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
            nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            if (treeContext !== null) {
              restoreSuspendedTreeContext(fiber, treeContext);
            }
            return true;
          }
          function warnUnhydratedInstance(returnFiber, instance2) {
            {
              switch (returnFiber.tag) {
                case HostRoot: {
                  didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance2);
                  break;
                }
                case HostComponent: {
                  var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotHydrateInstance(
                    returnFiber.type,
                    returnFiber.memoizedProps,
                    returnFiber.stateNode,
                    instance2,
                    // TODO: Delete this argument when we remove the legacy root API.
                    isConcurrentMode
                  );
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  if (suspenseState.dehydrated !== null)
                    didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance2);
                  break;
                }
              }
            }
          }
          function deleteHydratableInstance(returnFiber, instance2) {
            warnUnhydratedInstance(returnFiber, instance2);
            var childToDelete = createFiberFromHostInstanceForDeletion();
            childToDelete.stateNode = instance2;
            childToDelete.return = returnFiber;
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [childToDelete];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(childToDelete);
            }
          }
          function warnNonhydratedInstance(returnFiber, fiber) {
            {
              if (didSuspendOrErrorDEV) {
                return;
              }
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  switch (fiber.tag) {
                    case HostComponent:
                      var type4 = fiber.type;
                      var props = fiber.pendingProps;
                      didNotFindHydratableInstanceWithinContainer(parentContainer, type4);
                      break;
                    case HostText:
                      var text = fiber.pendingProps;
                      didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                      break;
                  }
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  switch (fiber.tag) {
                    case HostComponent: {
                      var _type = fiber.type;
                      var _props = fiber.pendingProps;
                      var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _type,
                        _props,
                        // TODO: Delete this argument when we remove the legacy root API.
                        isConcurrentMode
                      );
                      break;
                    }
                    case HostText: {
                      var _text = fiber.pendingProps;
                      var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableTextInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _text,
                        // TODO: Delete this argument when we remove the legacy root API.
                        _isConcurrentMode
                      );
                      break;
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  var _parentInstance = suspenseState.dehydrated;
                  if (_parentInstance !== null)
                    switch (fiber.tag) {
                      case HostComponent:
                        var _type2 = fiber.type;
                        var _props2 = fiber.pendingProps;
                        didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                        break;
                      case HostText:
                        var _text2 = fiber.pendingProps;
                        didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                        break;
                    }
                  break;
                }
                default:
                  return;
              }
            }
          }
          function insertNonHydratedInstance(returnFiber, fiber) {
            fiber.flags = fiber.flags & ~Hydrating | Placement;
            warnNonhydratedInstance(returnFiber, fiber);
          }
          function tryHydrate(fiber, nextInstance) {
            switch (fiber.tag) {
              case HostComponent: {
                var type4 = fiber.type;
                var props = fiber.pendingProps;
                var instance2 = canHydrateInstance(nextInstance, type4);
                if (instance2 !== null) {
                  fiber.stateNode = instance2;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = getFirstHydratableChild(instance2);
                  return true;
                }
                return false;
              }
              case HostText: {
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);
                if (textInstance !== null) {
                  fiber.stateNode = textInstance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              case SuspenseComponent: {
                var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
                if (suspenseInstance !== null) {
                  var suspenseState = {
                    dehydrated: suspenseInstance,
                    treeContext: getSuspendedTreeContext(),
                    retryLane: OffscreenLane
                  };
                  fiber.memoizedState = suspenseState;
                  var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
                  dehydratedFragment.return = fiber;
                  fiber.child = dehydratedFragment;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              default:
                return false;
            }
          }
          function shouldClientRenderOnMismatch(fiber) {
            return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
          }
          function throwOnHydrationMismatch(fiber) {
            throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
          }
          function tryToClaimNextHydratableInstance(fiber) {
            if (!isHydrating) {
              return;
            }
            var nextInstance = nextHydratableInstance;
            if (!nextInstance) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            var firstAttemptedInstance = nextInstance;
            if (!tryHydrate(fiber, nextInstance)) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              nextInstance = getNextHydratableSibling(firstAttemptedInstance);
              var prevHydrationParentFiber = hydrationParentFiber;
              if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
              }
              deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
            }
          }
          function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
            var instance2 = fiber.stateNode;
            var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
            var updatePayload = hydrateInstance(instance2, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
            fiber.updateQueue = updatePayload;
            if (updatePayload !== null) {
              return true;
            }
            return false;
          }
          function prepareToHydrateHostTextInstance(fiber) {
            var textInstance = fiber.stateNode;
            var textContent = fiber.memoizedProps;
            var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
            if (shouldUpdate) {
              var returnFiber = hydrationParentFiber;
              if (returnFiber !== null) {
                switch (returnFiber.tag) {
                  case HostRoot: {
                    var parentContainer = returnFiber.stateNode.containerInfo;
                    var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedContainerTextInstance(
                      parentContainer,
                      textInstance,
                      textContent,
                      // TODO: Delete this argument when we remove the legacy root API.
                      isConcurrentMode
                    );
                    break;
                  }
                  case HostComponent: {
                    var parentType = returnFiber.type;
                    var parentProps = returnFiber.memoizedProps;
                    var parentInstance = returnFiber.stateNode;
                    var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedTextInstance(
                      parentType,
                      parentProps,
                      parentInstance,
                      textInstance,
                      textContent,
                      // TODO: Delete this argument when we remove the legacy root API.
                      _isConcurrentMode2
                    );
                    break;
                  }
                }
              }
            }
            return shouldUpdate;
          }
          function prepareToHydrateHostSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            hydrateSuspenseInstance(suspenseInstance, fiber);
          }
          function skipPastDehydratedSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
          }
          function popToNextHostParent(fiber) {
            var parent = fiber.return;
            while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
              parent = parent.return;
            }
            hydrationParentFiber = parent;
          }
          function popHydrationState(fiber) {
            if (fiber !== hydrationParentFiber) {
              return false;
            }
            if (!isHydrating) {
              popToNextHostParent(fiber);
              isHydrating = true;
              return false;
            }
            if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
              var nextInstance = nextHydratableInstance;
              if (nextInstance) {
                if (shouldClientRenderOnMismatch(fiber)) {
                  warnIfUnhydratedTailNodes(fiber);
                  throwOnHydrationMismatch();
                } else {
                  while (nextInstance) {
                    deleteHydratableInstance(fiber, nextInstance);
                    nextInstance = getNextHydratableSibling(nextInstance);
                  }
                }
              }
            }
            popToNextHostParent(fiber);
            if (fiber.tag === SuspenseComponent) {
              nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
            } else {
              nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
            }
            return true;
          }
          function hasUnhydratedTailNodes() {
            return isHydrating && nextHydratableInstance !== null;
          }
          function warnIfUnhydratedTailNodes(fiber) {
            var nextInstance = nextHydratableInstance;
            while (nextInstance) {
              warnUnhydratedInstance(fiber, nextInstance);
              nextInstance = getNextHydratableSibling(nextInstance);
            }
          }
          function resetHydrationState() {
            hydrationParentFiber = null;
            nextHydratableInstance = null;
            isHydrating = false;
            didSuspendOrErrorDEV = false;
          }
          function upgradeHydrationErrorsToRecoverable() {
            if (hydrationErrors !== null) {
              queueRecoverableErrors(hydrationErrors);
              hydrationErrors = null;
            }
          }
          function getIsHydrating() {
            return isHydrating;
          }
          function queueHydrationError(error3) {
            if (hydrationErrors === null) {
              hydrationErrors = [error3];
            } else {
              hydrationErrors.push(error3);
            }
          }
          var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
          var NoTransition = null;
          function requestCurrentTransition() {
            return ReactCurrentBatchConfig$1.transition;
          }
          var ReactStrictModeWarnings = {
            recordUnsafeLifecycleWarnings: function(fiber, instance2) {
            },
            flushPendingUnsafeLifecycleWarnings: function() {
            },
            recordLegacyContextWarning: function(fiber, instance2) {
            },
            flushLegacyContextWarning: function() {
            },
            discardPendingWarnings: function() {
            }
          };
          {
            var findStrictRoot = function(fiber) {
              var maybeStrictRoot = null;
              var node = fiber;
              while (node !== null) {
                if (node.mode & StrictLegacyMode) {
                  maybeStrictRoot = node;
                }
                node = node.return;
              }
              return maybeStrictRoot;
            };
            var setToSortedString = function(set3) {
              var array4 = [];
              set3.forEach(function(value) {
                array4.push(value);
              });
              return array4.sort().join(", ");
            };
            var pendingComponentWillMountWarnings = [];
            var pendingUNSAFE_ComponentWillMountWarnings = [];
            var pendingComponentWillReceivePropsWarnings = [];
            var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            var pendingComponentWillUpdateWarnings = [];
            var pendingUNSAFE_ComponentWillUpdateWarnings = [];
            var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance2) {
              if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
                return;
              }
              if (typeof instance2.componentWillMount === "function" && // Don't warn about react-lifecycles-compat polyfilled components.
              instance2.componentWillMount.__suppressDeprecationWarning !== true) {
                pendingComponentWillMountWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance2.UNSAFE_componentWillMount === "function") {
                pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
              }
              if (typeof instance2.componentWillReceiveProps === "function" && instance2.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                pendingComponentWillReceivePropsWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance2.UNSAFE_componentWillReceiveProps === "function") {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
              }
              if (typeof instance2.componentWillUpdate === "function" && instance2.componentWillUpdate.__suppressDeprecationWarning !== true) {
                pendingComponentWillUpdateWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance2.UNSAFE_componentWillUpdate === "function") {
                pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
              var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillMountWarnings.length > 0) {
                pendingComponentWillMountWarnings.forEach(function(fiber) {
                  componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillMountWarnings = [];
              }
              var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
                pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillMountWarnings = [];
              }
              var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillReceivePropsWarnings.length > 0) {
                pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillReceivePropsWarnings = [];
              }
              var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              }
              var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillUpdateWarnings.length > 0) {
                pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                  componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillUpdateWarnings = [];
              }
              var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
                pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillUpdateWarnings = [];
              }
              if (UNSAFE_componentWillMountUniqueNames.size > 0) {
                var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
                error2("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
              }
              if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
                error2("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
              }
              if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
                error2("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
              }
              if (componentWillMountUniqueNames.size > 0) {
                var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
                warn3("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
              }
              if (componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
                warn3("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
              }
              if (componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
                warn3("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
              }
            };
            var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance2) {
              var strictRoot = findStrictRoot(fiber);
              if (strictRoot === null) {
                error2("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
                return;
              }
              if (didWarnAboutLegacyContext.has(fiber.type)) {
                return;
              }
              var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
              if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance2 !== null && typeof instance2.getChildContext === "function") {
                if (warningsForRoot === void 0) {
                  warningsForRoot = [];
                  pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
                }
                warningsForRoot.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushLegacyContextWarning = function() {
              pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
                if (fiberArray.length === 0) {
                  return;
                }
                var firstFiber = fiberArray[0];
                var uniqueNames = /* @__PURE__ */ new Set();
                fiberArray.forEach(function(fiber) {
                  uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutLegacyContext.add(fiber.type);
                });
                var sortedNames = setToSortedString(uniqueNames);
                try {
                  setCurrentFiber(firstFiber);
                  error2("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
                } finally {
                  resetCurrentFiber();
                }
              });
            };
            ReactStrictModeWarnings.discardPendingWarnings = function() {
              pendingComponentWillMountWarnings = [];
              pendingUNSAFE_ComponentWillMountWarnings = [];
              pendingComponentWillReceivePropsWarnings = [];
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              pendingComponentWillUpdateWarnings = [];
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
              pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            };
          }
          function resolveDefaultProps(Component20, baseProps) {
            if (Component20 && Component20.defaultProps) {
              var props = assign({}, baseProps);
              var defaultProps2 = Component20.defaultProps;
              for (var propName in defaultProps2) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps2[propName];
                }
              }
              return props;
            }
            return baseProps;
          }
          var valueCursor = createCursor(null);
          var rendererSigil;
          {
            rendererSigil = {};
          }
          var currentlyRenderingFiber = null;
          var lastContextDependency = null;
          var lastFullyObservedContext = null;
          var isDisallowedContextReadInDEV = false;
          function resetContextDependencies() {
            currentlyRenderingFiber = null;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function enterDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = true;
            }
          }
          function exitDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function pushProvider(providerFiber, context2, nextValue) {
            {
              push(valueCursor, context2._currentValue, providerFiber);
              context2._currentValue = nextValue;
              {
                if (context2._currentRenderer !== void 0 && context2._currentRenderer !== null && context2._currentRenderer !== rendererSigil) {
                  error2("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
                }
                context2._currentRenderer = rendererSigil;
              }
            }
          }
          function popProvider(context2, providerFiber) {
            var currentValue = valueCursor.current;
            pop(valueCursor, providerFiber);
            {
              {
                context2._currentValue = currentValue;
              }
            }
          }
          function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
            var node = parent;
            while (node !== null) {
              var alternate = node.alternate;
              if (!isSubsetOfLanes(node.childLanes, renderLanes2)) {
                node.childLanes = mergeLanes(node.childLanes, renderLanes2);
                if (alternate !== null) {
                  alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
                }
              } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              }
              if (node === propagationRoot) {
                break;
              }
              node = node.return;
            }
            {
              if (node !== propagationRoot) {
                error2("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function propagateContextChange(workInProgress2, context2, renderLanes2) {
            {
              propagateContextChange_eager(workInProgress2, context2, renderLanes2);
            }
          }
          function propagateContextChange_eager(workInProgress2, context2, renderLanes2) {
            var fiber = workInProgress2.child;
            if (fiber !== null) {
              fiber.return = workInProgress2;
            }
            while (fiber !== null) {
              var nextFiber = void 0;
              var list = fiber.dependencies;
              if (list !== null) {
                nextFiber = fiber.child;
                var dependency = list.firstContext;
                while (dependency !== null) {
                  if (dependency.context === context2) {
                    if (fiber.tag === ClassComponent) {
                      var lane = pickArbitraryLane(renderLanes2);
                      var update = createUpdate(NoTimestamp, lane);
                      update.tag = ForceUpdate;
                      var updateQueue = fiber.updateQueue;
                      if (updateQueue === null)
                        ;
                      else {
                        var sharedQueue = updateQueue.shared;
                        var pending = sharedQueue.pending;
                        if (pending === null) {
                          update.next = update;
                        } else {
                          update.next = pending.next;
                          pending.next = update;
                        }
                        sharedQueue.pending = update;
                      }
                    }
                    fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                    var alternate = fiber.alternate;
                    if (alternate !== null) {
                      alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                    }
                    scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2);
                    list.lanes = mergeLanes(list.lanes, renderLanes2);
                    break;
                  }
                  dependency = dependency.next;
                }
              } else if (fiber.tag === ContextProvider) {
                nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
              } else if (fiber.tag === DehydratedFragment) {
                var parentSuspense = fiber.return;
                if (parentSuspense === null) {
                  throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
                }
                parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
                var _alternate = parentSuspense.alternate;
                if (_alternate !== null) {
                  _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2);
                }
                scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2);
                nextFiber = fiber.sibling;
              } else {
                nextFiber = fiber.child;
              }
              if (nextFiber !== null) {
                nextFiber.return = fiber;
              } else {
                nextFiber = fiber;
                while (nextFiber !== null) {
                  if (nextFiber === workInProgress2) {
                    nextFiber = null;
                    break;
                  }
                  var sibling = nextFiber.sibling;
                  if (sibling !== null) {
                    sibling.return = nextFiber.return;
                    nextFiber = sibling;
                    break;
                  }
                  nextFiber = nextFiber.return;
                }
              }
              fiber = nextFiber;
            }
          }
          function prepareToReadContext(workInProgress2, renderLanes2) {
            currentlyRenderingFiber = workInProgress2;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            var dependencies = workInProgress2.dependencies;
            if (dependencies !== null) {
              {
                var firstContext = dependencies.firstContext;
                if (firstContext !== null) {
                  if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                    markWorkInProgressReceivedUpdate();
                  }
                  dependencies.firstContext = null;
                }
              }
            }
          }
          function readContext(context2) {
            {
              if (isDisallowedContextReadInDEV) {
                error2("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
            }
            var value = context2._currentValue;
            if (lastFullyObservedContext === context2)
              ;
            else {
              var contextItem = {
                context: context2,
                memoizedValue: value,
                next: null
              };
              if (lastContextDependency === null) {
                if (currentlyRenderingFiber === null) {
                  throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                }
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                  lanes: NoLanes,
                  firstContext: contextItem
                };
              } else {
                lastContextDependency = lastContextDependency.next = contextItem;
              }
            }
            return value;
          }
          var concurrentQueues = null;
          function pushConcurrentUpdateQueue(queue) {
            if (concurrentQueues === null) {
              concurrentQueues = [queue];
            } else {
              concurrentQueues.push(queue);
            }
          }
          function finishQueueingConcurrentUpdates() {
            if (concurrentQueues !== null) {
              for (var i3 = 0; i3 < concurrentQueues.length; i3++) {
                var queue = concurrentQueues[i3];
                var lastInterleavedUpdate = queue.interleaved;
                if (lastInterleavedUpdate !== null) {
                  queue.interleaved = null;
                  var firstInterleavedUpdate = lastInterleavedUpdate.next;
                  var lastPendingUpdate = queue.pending;
                  if (lastPendingUpdate !== null) {
                    var firstPendingUpdate = lastPendingUpdate.next;
                    lastPendingUpdate.next = firstInterleavedUpdate;
                    lastInterleavedUpdate.next = firstPendingUpdate;
                  }
                  queue.pending = lastInterleavedUpdate;
                }
              }
              concurrentQueues = null;
            }
          }
          function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
          }
          function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentRenderForLane(fiber, lane) {
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
          function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
            var alternate = sourceFiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, lane);
            }
            {
              if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
                warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
              }
            }
            var node = sourceFiber;
            var parent = sourceFiber.return;
            while (parent !== null) {
              parent.childLanes = mergeLanes(parent.childLanes, lane);
              alternate = parent.alternate;
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, lane);
              } else {
                {
                  if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                    warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                  }
                }
              }
              node = parent;
              parent = parent.return;
            }
            if (node.tag === HostRoot) {
              var root4 = node.stateNode;
              return root4;
            } else {
              return null;
            }
          }
          var UpdateState = 0;
          var ReplaceState = 1;
          var ForceUpdate = 2;
          var CaptureUpdate = 3;
          var hasForceUpdate = false;
          var didWarnUpdateInsideUpdate;
          var currentlyProcessingQueue;
          {
            didWarnUpdateInsideUpdate = false;
            currentlyProcessingQueue = null;
          }
          function initializeUpdateQueue(fiber) {
            var queue = {
              baseState: fiber.memoizedState,
              firstBaseUpdate: null,
              lastBaseUpdate: null,
              shared: {
                pending: null,
                interleaved: null,
                lanes: NoLanes
              },
              effects: null
            };
            fiber.updateQueue = queue;
          }
          function cloneUpdateQueue(current2, workInProgress2) {
            var queue = workInProgress2.updateQueue;
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var clone2 = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: currentQueue.firstBaseUpdate,
                lastBaseUpdate: currentQueue.lastBaseUpdate,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = clone2;
            }
          }
          function createUpdate(eventTime, lane) {
            var update = {
              eventTime,
              lane,
              tag: UpdateState,
              payload: null,
              callback: null,
              next: null
            };
            return update;
          }
          function enqueueUpdate(fiber, update, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return null;
            }
            var sharedQueue = updateQueue.shared;
            {
              if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
                error2("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
                didWarnUpdateInsideUpdate = true;
              }
            }
            if (isUnsafeClassRenderPhaseUpdate()) {
              var pending = sharedQueue.pending;
              if (pending === null) {
                update.next = update;
              } else {
                update.next = pending.next;
                pending.next = update;
              }
              sharedQueue.pending = update;
              return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
            } else {
              return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
            }
          }
          function entangleTransitions(root4, fiber, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return;
            }
            var sharedQueue = updateQueue.shared;
            if (isTransitionLane(lane)) {
              var queueLanes = sharedQueue.lanes;
              queueLanes = intersectLanes(queueLanes, root4.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              sharedQueue.lanes = newQueueLanes;
              markRootEntangled(root4, newQueueLanes);
            }
          }
          function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
            var queue = workInProgress2.updateQueue;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              if (queue === currentQueue) {
                var newFirst = null;
                var newLast = null;
                var firstBaseUpdate = queue.firstBaseUpdate;
                if (firstBaseUpdate !== null) {
                  var update = firstBaseUpdate;
                  do {
                    var clone2 = {
                      eventTime: update.eventTime,
                      lane: update.lane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    if (newLast === null) {
                      newFirst = newLast = clone2;
                    } else {
                      newLast.next = clone2;
                      newLast = clone2;
                    }
                    update = update.next;
                  } while (update !== null);
                  if (newLast === null) {
                    newFirst = newLast = capturedUpdate;
                  } else {
                    newLast.next = capturedUpdate;
                    newLast = capturedUpdate;
                  }
                } else {
                  newFirst = newLast = capturedUpdate;
                }
                queue = {
                  baseState: currentQueue.baseState,
                  firstBaseUpdate: newFirst,
                  lastBaseUpdate: newLast,
                  shared: currentQueue.shared,
                  effects: currentQueue.effects
                };
                workInProgress2.updateQueue = queue;
                return;
              }
            }
            var lastBaseUpdate = queue.lastBaseUpdate;
            if (lastBaseUpdate === null) {
              queue.firstBaseUpdate = capturedUpdate;
            } else {
              lastBaseUpdate.next = capturedUpdate;
            }
            queue.lastBaseUpdate = capturedUpdate;
          }
          function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance2) {
            switch (update.tag) {
              case ReplaceState: {
                var payload = update.payload;
                if (typeof payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  var nextState = payload.call(instance2, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        payload.call(instance2, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                  return nextState;
                }
                return payload;
              }
              case CaptureUpdate: {
                workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
              }
              case UpdateState: {
                var _payload = update.payload;
                var partialState;
                if (typeof _payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  partialState = _payload.call(instance2, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        _payload.call(instance2, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                } else {
                  partialState = _payload;
                }
                if (partialState === null || partialState === void 0) {
                  return prevState;
                }
                return assign({}, prevState, partialState);
              }
              case ForceUpdate: {
                hasForceUpdate = true;
                return prevState;
              }
            }
            return prevState;
          }
          function processUpdateQueue(workInProgress2, props, instance2, renderLanes2) {
            var queue = workInProgress2.updateQueue;
            hasForceUpdate = false;
            {
              currentlyProcessingQueue = queue.shared;
            }
            var firstBaseUpdate = queue.firstBaseUpdate;
            var lastBaseUpdate = queue.lastBaseUpdate;
            var pendingQueue = queue.shared.pending;
            if (pendingQueue !== null) {
              queue.shared.pending = null;
              var lastPendingUpdate = pendingQueue;
              var firstPendingUpdate = lastPendingUpdate.next;
              lastPendingUpdate.next = null;
              if (lastBaseUpdate === null) {
                firstBaseUpdate = firstPendingUpdate;
              } else {
                lastBaseUpdate.next = firstPendingUpdate;
              }
              lastBaseUpdate = lastPendingUpdate;
              var current2 = workInProgress2.alternate;
              if (current2 !== null) {
                var currentQueue = current2.updateQueue;
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                  if (currentLastBaseUpdate === null) {
                    currentQueue.firstBaseUpdate = firstPendingUpdate;
                  } else {
                    currentLastBaseUpdate.next = firstPendingUpdate;
                  }
                  currentQueue.lastBaseUpdate = lastPendingUpdate;
                }
              }
            }
            if (firstBaseUpdate !== null) {
              var newState = queue.baseState;
              var newLanes = NoLanes;
              var newBaseState = null;
              var newFirstBaseUpdate = null;
              var newLastBaseUpdate = null;
              var update = firstBaseUpdate;
              do {
                var updateLane = update.lane;
                var updateEventTime = update.eventTime;
                if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                  var clone2 = {
                    eventTime: updateEventTime,
                    lane: updateLane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  if (newLastBaseUpdate === null) {
                    newFirstBaseUpdate = newLastBaseUpdate = clone2;
                    newBaseState = newState;
                  } else {
                    newLastBaseUpdate = newLastBaseUpdate.next = clone2;
                  }
                  newLanes = mergeLanes(newLanes, updateLane);
                } else {
                  if (newLastBaseUpdate !== null) {
                    var _clone = {
                      eventTime: updateEventTime,
                      // This update is going to be committed so we never want uncommit
                      // it. Using NoLane works because 0 is a subset of all bitmasks, so
                      // this will never be skipped by the check above.
                      lane: NoLane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                  }
                  newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance2);
                  var callback = update.callback;
                  if (callback !== null && // If the update was already committed, we should not queue its
                  // callback again.
                  update.lane !== NoLane) {
                    workInProgress2.flags |= Callback;
                    var effects = queue.effects;
                    if (effects === null) {
                      queue.effects = [update];
                    } else {
                      effects.push(update);
                    }
                  }
                }
                update = update.next;
                if (update === null) {
                  pendingQueue = queue.shared.pending;
                  if (pendingQueue === null) {
                    break;
                  } else {
                    var _lastPendingUpdate = pendingQueue;
                    var _firstPendingUpdate = _lastPendingUpdate.next;
                    _lastPendingUpdate.next = null;
                    update = _firstPendingUpdate;
                    queue.lastBaseUpdate = _lastPendingUpdate;
                    queue.shared.pending = null;
                  }
                }
              } while (true);
              if (newLastBaseUpdate === null) {
                newBaseState = newState;
              }
              queue.baseState = newBaseState;
              queue.firstBaseUpdate = newFirstBaseUpdate;
              queue.lastBaseUpdate = newLastBaseUpdate;
              var lastInterleaved = queue.shared.interleaved;
              if (lastInterleaved !== null) {
                var interleaved = lastInterleaved;
                do {
                  newLanes = mergeLanes(newLanes, interleaved.lane);
                  interleaved = interleaved.next;
                } while (interleaved !== lastInterleaved);
              } else if (firstBaseUpdate === null) {
                queue.shared.lanes = NoLanes;
              }
              markSkippedUpdateLanes(newLanes);
              workInProgress2.lanes = newLanes;
              workInProgress2.memoizedState = newState;
            }
            {
              currentlyProcessingQueue = null;
            }
          }
          function callCallback(callback, context2) {
            if (typeof callback !== "function") {
              throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
            }
            callback.call(context2);
          }
          function resetHasForceUpdateBeforeProcessing() {
            hasForceUpdate = false;
          }
          function checkHasForceUpdateAfterProcessing() {
            return hasForceUpdate;
          }
          function commitUpdateQueue(finishedWork, finishedQueue, instance2) {
            var effects = finishedQueue.effects;
            finishedQueue.effects = null;
            if (effects !== null) {
              for (var i3 = 0; i3 < effects.length; i3++) {
                var effect = effects[i3];
                var callback = effect.callback;
                if (callback !== null) {
                  effect.callback = null;
                  callCallback(callback, instance2);
                }
              }
            }
          }
          var fakeInternalInstance = {};
          var emptyRefsObject = new React434.Component().refs;
          var didWarnAboutStateAssignmentForComponent;
          var didWarnAboutUninitializedState;
          var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
          var didWarnAboutLegacyLifecyclesAndDerivedState;
          var didWarnAboutUndefinedDerivedState;
          var warnOnUndefinedDerivedState;
          var warnOnInvalidCallback;
          var didWarnAboutDirectlyAssigningPropsToState;
          var didWarnAboutContextTypeAndContextTypes;
          var didWarnAboutInvalidateContextType;
          {
            didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
            didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
            didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
            didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
            didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
            var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
            warnOnInvalidCallback = function(callback, callerName) {
              if (callback === null || typeof callback === "function") {
                return;
              }
              var key2 = callerName + "_" + callback;
              if (!didWarnOnInvalidCallback.has(key2)) {
                didWarnOnInvalidCallback.add(key2);
                error2("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            };
            warnOnUndefinedDerivedState = function(type4, partialState) {
              if (partialState === void 0) {
                var componentName = getComponentNameFromType(type4) || "Component";
                if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                  didWarnAboutUndefinedDerivedState.add(componentName);
                  error2("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
                }
              }
            };
            Object.defineProperty(fakeInternalInstance, "_processChildContext", {
              enumerable: false,
              value: function() {
                throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
              }
            });
            Object.freeze(fakeInternalInstance);
          }
          function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
            var prevState = workInProgress2.memoizedState;
            var partialState = getDerivedStateFromProps(nextProps, prevState);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  partialState = getDerivedStateFromProps(nextProps, prevState);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              warnOnUndefinedDerivedState(ctor, partialState);
            }
            var memoizedState = partialState === null || partialState === void 0 ? prevState : assign({}, prevState, partialState);
            workInProgress2.memoizedState = memoizedState;
            if (workInProgress2.lanes === NoLanes) {
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = memoizedState;
            }
          }
          var classComponentUpdater = {
            isMounted,
            enqueueSetState: function(inst, payload, callback) {
              var fiber = get3(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "setState");
                }
                update.callback = callback;
              }
              var root4 = enqueueUpdate(fiber, update, lane);
              if (root4 !== null) {
                scheduleUpdateOnFiber(root4, fiber, lane, eventTime);
                entangleTransitions(root4, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueReplaceState: function(inst, payload, callback) {
              var fiber = get3(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ReplaceState;
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "replaceState");
                }
                update.callback = callback;
              }
              var root4 = enqueueUpdate(fiber, update, lane);
              if (root4 !== null) {
                scheduleUpdateOnFiber(root4, fiber, lane, eventTime);
                entangleTransitions(root4, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueForceUpdate: function(inst, callback) {
              var fiber = get3(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ForceUpdate;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "forceUpdate");
                }
                update.callback = callback;
              }
              var root4 = enqueueUpdate(fiber, update, lane);
              if (root4 !== null) {
                scheduleUpdateOnFiber(root4, fiber, lane, eventTime);
                entangleTransitions(root4, fiber, lane);
              }
              {
                markForceUpdateScheduled(fiber, lane);
              }
            }
          };
          function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
            var instance2 = workInProgress2.stateNode;
            if (typeof instance2.shouldComponentUpdate === "function") {
              var shouldUpdate = instance2.shouldComponentUpdate(newProps, newState, nextContext);
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    shouldUpdate = instance2.shouldComponentUpdate(newProps, newState, nextContext);
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                if (shouldUpdate === void 0) {
                  error2("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
                }
              }
              return shouldUpdate;
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent) {
              return !shallowEqual5(oldProps, newProps) || !shallowEqual5(oldState, newState);
            }
            return true;
          }
          function checkClassInstance(workInProgress2, ctor, newProps) {
            var instance2 = workInProgress2.stateNode;
            {
              var name = getComponentNameFromType(ctor) || "Component";
              var renderPresent = instance2.render;
              if (!renderPresent) {
                if (ctor.prototype && typeof ctor.prototype.render === "function") {
                  error2("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
                } else {
                  error2("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
                }
              }
              if (instance2.getInitialState && !instance2.getInitialState.isReactClassApproved && !instance2.state) {
                error2("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
              }
              if (instance2.getDefaultProps && !instance2.getDefaultProps.isReactClassApproved) {
                error2("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
              }
              if (instance2.propTypes) {
                error2("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
              }
              if (instance2.contextType) {
                error2("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
              }
              {
                if (instance2.contextTypes) {
                  error2("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
                }
                if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                  didWarnAboutContextTypeAndContextTypes.add(ctor);
                  error2("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
                }
              }
              if (typeof instance2.componentShouldUpdate === "function") {
                error2("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
              }
              if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance2.shouldComponentUpdate !== "undefined") {
                error2("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
              }
              if (typeof instance2.componentDidUnmount === "function") {
                error2("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
              }
              if (typeof instance2.componentDidReceiveProps === "function") {
                error2("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
              }
              if (typeof instance2.componentWillRecieveProps === "function") {
                error2("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
              }
              if (typeof instance2.UNSAFE_componentWillRecieveProps === "function") {
                error2("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
              }
              var hasMutatedProps = instance2.props !== newProps;
              if (instance2.props !== void 0 && hasMutatedProps) {
                error2("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
              }
              if (instance2.defaultProps) {
                error2("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
              }
              if (typeof instance2.getSnapshotBeforeUpdate === "function" && typeof instance2.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
                didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
                error2("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
              }
              if (typeof instance2.getDerivedStateFromProps === "function") {
                error2("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof instance2.getDerivedStateFromError === "function") {
                error2("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof ctor.getSnapshotBeforeUpdate === "function") {
                error2("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
              }
              var _state = instance2.state;
              if (_state && (typeof _state !== "object" || isArray2(_state))) {
                error2("%s.state: must be set to an object or null", name);
              }
              if (typeof instance2.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
                error2("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
              }
            }
          }
          function adoptClassInstance(workInProgress2, instance2) {
            instance2.updater = classComponentUpdater;
            workInProgress2.stateNode = instance2;
            set2(instance2, workInProgress2);
            {
              instance2._reactInternalInstance = fakeInternalInstance;
            }
          }
          function constructClassInstance(workInProgress2, ctor, props) {
            var isLegacyContextConsumer = false;
            var unmaskedContext = emptyContextObject;
            var context2 = emptyContextObject;
            var contextType = ctor.contextType;
            {
              if ("contextType" in ctor) {
                var isValid = (
                  // Allow null for conditional declaration
                  contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0
                );
                if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                  didWarnAboutInvalidateContextType.add(ctor);
                  var addendum = "";
                  if (contextType === void 0) {
                    addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                  } else if (typeof contextType !== "object") {
                    addendum = " However, it is set to a " + typeof contextType + ".";
                  } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                    addendum = " Did you accidentally pass the Context.Provider instead?";
                  } else if (contextType._context !== void 0) {
                    addendum = " Did you accidentally pass the Context.Consumer instead?";
                  } else {
                    addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                  }
                  error2("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
                }
              }
            }
            if (typeof contextType === "object" && contextType !== null) {
              context2 = readContext(contextType);
            } else {
              unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              var contextTypes = ctor.contextTypes;
              isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
              context2 = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
            }
            var instance2 = new ctor(props, context2);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  instance2 = new ctor(props, context2);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
            }
            var state = workInProgress2.memoizedState = instance2.state !== null && instance2.state !== void 0 ? instance2.state : null;
            adoptClassInstance(workInProgress2, instance2);
            {
              if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutUninitializedState.has(componentName)) {
                  didWarnAboutUninitializedState.add(componentName);
                  error2("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance2.state === null ? "null" : "undefined", componentName);
                }
              }
              if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance2.getSnapshotBeforeUpdate === "function") {
                var foundWillMountName = null;
                var foundWillReceivePropsName = null;
                var foundWillUpdateName = null;
                if (typeof instance2.componentWillMount === "function" && instance2.componentWillMount.__suppressDeprecationWarning !== true) {
                  foundWillMountName = "componentWillMount";
                } else if (typeof instance2.UNSAFE_componentWillMount === "function") {
                  foundWillMountName = "UNSAFE_componentWillMount";
                }
                if (typeof instance2.componentWillReceiveProps === "function" && instance2.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                  foundWillReceivePropsName = "componentWillReceiveProps";
                } else if (typeof instance2.UNSAFE_componentWillReceiveProps === "function") {
                  foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
                }
                if (typeof instance2.componentWillUpdate === "function" && instance2.componentWillUpdate.__suppressDeprecationWarning !== true) {
                  foundWillUpdateName = "componentWillUpdate";
                } else if (typeof instance2.UNSAFE_componentWillUpdate === "function") {
                  foundWillUpdateName = "UNSAFE_componentWillUpdate";
                }
                if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                  var _componentName = getComponentNameFromType(ctor) || "Component";
                  var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                  if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error2("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                  }
                }
              }
            }
            if (isLegacyContextConsumer) {
              cacheContext(workInProgress2, unmaskedContext, context2);
            }
            return instance2;
          }
          function callComponentWillMount(workInProgress2, instance2) {
            var oldState = instance2.state;
            if (typeof instance2.componentWillMount === "function") {
              instance2.componentWillMount();
            }
            if (typeof instance2.UNSAFE_componentWillMount === "function") {
              instance2.UNSAFE_componentWillMount();
            }
            if (oldState !== instance2.state) {
              {
                error2("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component");
              }
              classComponentUpdater.enqueueReplaceState(instance2, instance2.state, null);
            }
          }
          function callComponentWillReceiveProps(workInProgress2, instance2, newProps, nextContext) {
            var oldState = instance2.state;
            if (typeof instance2.componentWillReceiveProps === "function") {
              instance2.componentWillReceiveProps(newProps, nextContext);
            }
            if (typeof instance2.UNSAFE_componentWillReceiveProps === "function") {
              instance2.UNSAFE_componentWillReceiveProps(newProps, nextContext);
            }
            if (instance2.state !== oldState) {
              {
                var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
                if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                  didWarnAboutStateAssignmentForComponent.add(componentName);
                  error2("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
                }
              }
              classComponentUpdater.enqueueReplaceState(instance2, instance2.state, null);
            }
          }
          function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            {
              checkClassInstance(workInProgress2, ctor, newProps);
            }
            var instance2 = workInProgress2.stateNode;
            instance2.props = newProps;
            instance2.state = workInProgress2.memoizedState;
            instance2.refs = emptyRefsObject;
            initializeUpdateQueue(workInProgress2);
            var contextType = ctor.contextType;
            if (typeof contextType === "object" && contextType !== null) {
              instance2.context = readContext(contextType);
            } else {
              var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              instance2.context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            {
              if (instance2.state === newProps) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                  didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                  error2("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance2);
              }
              {
                ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance2);
              }
            }
            instance2.state = workInProgress2.memoizedState;
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              instance2.state = workInProgress2.memoizedState;
            }
            if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance2.getSnapshotBeforeUpdate !== "function" && (typeof instance2.UNSAFE_componentWillMount === "function" || typeof instance2.componentWillMount === "function")) {
              callComponentWillMount(workInProgress2, instance2);
              processUpdateQueue(workInProgress2, newProps, instance2, renderLanes2);
              instance2.state = workInProgress2.memoizedState;
            }
            if (typeof instance2.componentDidMount === "function") {
              var fiberFlags = Update;
              {
                fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= fiberFlags;
            }
          }
          function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            var instance2 = workInProgress2.stateNode;
            var oldProps = workInProgress2.memoizedProps;
            instance2.props = oldProps;
            var oldContext = instance2.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance2.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance2.UNSAFE_componentWillReceiveProps === "function" || typeof instance2.componentWillReceiveProps === "function")) {
              if (oldProps !== newProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance2, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance2.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance2, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance2.componentDidMount === "function") {
                var fiberFlags = Update;
                {
                  fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= fiberFlags;
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance2.UNSAFE_componentWillMount === "function" || typeof instance2.componentWillMount === "function")) {
                if (typeof instance2.componentWillMount === "function") {
                  instance2.componentWillMount();
                }
                if (typeof instance2.UNSAFE_componentWillMount === "function") {
                  instance2.UNSAFE_componentWillMount();
                }
              }
              if (typeof instance2.componentDidMount === "function") {
                var _fiberFlags = Update;
                {
                  _fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags;
              }
            } else {
              if (typeof instance2.componentDidMount === "function") {
                var _fiberFlags2 = Update;
                {
                  _fiberFlags2 |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags2 |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags2;
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance2.props = newProps;
            instance2.state = newState;
            instance2.context = nextContext;
            return shouldUpdate;
          }
          function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
            var instance2 = workInProgress2.stateNode;
            cloneUpdateQueue(current2, workInProgress2);
            var unresolvedOldProps = workInProgress2.memoizedProps;
            var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
            instance2.props = oldProps;
            var unresolvedNewProps = workInProgress2.pendingProps;
            var oldContext = instance2.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance2.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance2.UNSAFE_componentWillReceiveProps === "function" || typeof instance2.componentWillReceiveProps === "function")) {
              if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance2, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance2.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance2, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
              if (typeof instance2.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance2.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || // TODO: In some cases, we'll end up checking if context has changed twice,
            // both before and after `shouldComponentUpdate` has been called. Not ideal,
            // but I'm loath to refactor this function. This only happens for memoized
            // components so it's not that common.
            enableLazyContextPropagation;
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance2.UNSAFE_componentWillUpdate === "function" || typeof instance2.componentWillUpdate === "function")) {
                if (typeof instance2.componentWillUpdate === "function") {
                  instance2.componentWillUpdate(newProps, newState, nextContext);
                }
                if (typeof instance2.UNSAFE_componentWillUpdate === "function") {
                  instance2.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
                }
              }
              if (typeof instance2.componentDidUpdate === "function") {
                workInProgress2.flags |= Update;
              }
              if (typeof instance2.getSnapshotBeforeUpdate === "function") {
                workInProgress2.flags |= Snapshot;
              }
            } else {
              if (typeof instance2.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance2.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance2.props = newProps;
            instance2.state = newState;
            instance2.context = nextContext;
            return shouldUpdate;
          }
          var didWarnAboutMaps;
          var didWarnAboutGenerators;
          var didWarnAboutStringRefs;
          var ownerHasKeyUseWarning;
          var ownerHasFunctionTypeWarning;
          var warnForMissingKey = function(child, returnFiber) {
          };
          {
            didWarnAboutMaps = false;
            didWarnAboutGenerators = false;
            didWarnAboutStringRefs = {};
            ownerHasKeyUseWarning = {};
            ownerHasFunctionTypeWarning = {};
            warnForMissingKey = function(child, returnFiber) {
              if (child === null || typeof child !== "object") {
                return;
              }
              if (!child._store || child._store.validated || child.key != null) {
                return;
              }
              if (typeof child._store !== "object") {
                throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
              }
              child._store.validated = true;
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasKeyUseWarning[componentName]) {
                return;
              }
              ownerHasKeyUseWarning[componentName] = true;
              error2('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
            };
          }
          function coerceRef(returnFiber, current2, element) {
            var mixedRef = element.ref;
            if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
              {
                if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
                // because these cannot be automatically converted to an arrow function
                // using a codemod. Therefore, we don't have to warn about string refs again.
                !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                  var componentName = getComponentNameFromFiber(returnFiber) || "Component";
                  if (!didWarnAboutStringRefs[componentName]) {
                    {
                      error2('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                    }
                    didWarnAboutStringRefs[componentName] = true;
                  }
                }
              }
              if (element._owner) {
                var owner = element._owner;
                var inst;
                if (owner) {
                  var ownerFiber = owner;
                  if (ownerFiber.tag !== ClassComponent) {
                    throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                  }
                  inst = ownerFiber.stateNode;
                }
                if (!inst) {
                  throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                }
                var resolvedInst = inst;
                {
                  checkPropStringCoercion(mixedRef, "ref");
                }
                var stringRef = "" + mixedRef;
                if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                  return current2.ref;
                }
                var ref = function(value) {
                  var refs = resolvedInst.refs;
                  if (refs === emptyRefsObject) {
                    refs = resolvedInst.refs = {};
                  }
                  if (value === null) {
                    delete refs[stringRef];
                  } else {
                    refs[stringRef] = value;
                  }
                };
                ref._stringRef = stringRef;
                return ref;
              } else {
                if (typeof mixedRef !== "string") {
                  throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                }
                if (!element._owner) {
                  throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
                }
              }
            }
            return mixedRef;
          }
          function throwOnInvalidObjectType(returnFiber, newChild) {
            var childString = Object.prototype.toString.call(newChild);
            throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
          }
          function warnOnFunctionType(returnFiber) {
            {
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasFunctionTypeWarning[componentName]) {
                return;
              }
              ownerHasFunctionTypeWarning[componentName] = true;
              error2("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
            }
          }
          function resolveLazy(lazyType) {
            var payload = lazyType._payload;
            var init2 = lazyType._init;
            return init2(payload);
          }
          function ChildReconciler(shouldTrackSideEffects) {
            function deleteChild(returnFiber, childToDelete) {
              if (!shouldTrackSideEffects) {
                return;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [childToDelete];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(childToDelete);
              }
            }
            function deleteRemainingChildren(returnFiber, currentFirstChild) {
              if (!shouldTrackSideEffects) {
                return null;
              }
              var childToDelete = currentFirstChild;
              while (childToDelete !== null) {
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
              }
              return null;
            }
            function mapRemainingChildren(returnFiber, currentFirstChild) {
              var existingChildren = /* @__PURE__ */ new Map();
              var existingChild = currentFirstChild;
              while (existingChild !== null) {
                if (existingChild.key !== null) {
                  existingChildren.set(existingChild.key, existingChild);
                } else {
                  existingChildren.set(existingChild.index, existingChild);
                }
                existingChild = existingChild.sibling;
              }
              return existingChildren;
            }
            function useFiber(fiber, pendingProps) {
              var clone2 = createWorkInProgress(fiber, pendingProps);
              clone2.index = 0;
              clone2.sibling = null;
              return clone2;
            }
            function placeChild(newFiber, lastPlacedIndex, newIndex) {
              newFiber.index = newIndex;
              if (!shouldTrackSideEffects) {
                newFiber.flags |= Forked;
                return lastPlacedIndex;
              }
              var current2 = newFiber.alternate;
              if (current2 !== null) {
                var oldIndex = current2.index;
                if (oldIndex < lastPlacedIndex) {
                  newFiber.flags |= Placement;
                  return lastPlacedIndex;
                } else {
                  return oldIndex;
                }
              } else {
                newFiber.flags |= Placement;
                return lastPlacedIndex;
              }
            }
            function placeSingleChild(newFiber) {
              if (shouldTrackSideEffects && newFiber.alternate === null) {
                newFiber.flags |= Placement;
              }
              return newFiber;
            }
            function updateTextNode(returnFiber, current2, textContent, lanes) {
              if (current2 === null || current2.tag !== HostText) {
                var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, textContent);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateElement(returnFiber, current2, element, lanes) {
              var elementType = element.type;
              if (elementType === REACT_FRAGMENT_TYPE) {
                return updateFragment2(returnFiber, current2, element.props.children, lanes, element.key);
              }
              if (current2 !== null) {
                if (current2.elementType === elementType || // Keep this check inline so it only runs on the false path:
                isCompatibleFamilyForHotReloading(current2, element) || // Lazy types should reconcile their resolved type.
                // We need to do this after the Hot Reloading check above,
                // because hot reloading has different semantics than prod because
                // it doesn't resuspend. So we can't let the call below suspend.
                typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current2.type) {
                  var existing = useFiber(current2, element.props);
                  existing.ref = coerceRef(returnFiber, current2, element);
                  existing.return = returnFiber;
                  {
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                  }
                  return existing;
                }
              }
              var created = createFiberFromElement(element, returnFiber.mode, lanes);
              created.ref = coerceRef(returnFiber, current2, element);
              created.return = returnFiber;
              return created;
            }
            function updatePortal(returnFiber, current2, portal, lanes) {
              if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, portal.children || []);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateFragment2(returnFiber, current2, fragment, lanes, key2) {
              if (current2 === null || current2.tag !== Fragment29) {
                var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key2);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, fragment);
                existing.return = returnFiber;
                return existing;
              }
            }
            function createChild(returnFiber, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                    _created.ref = coerceRef(returnFiber, null, newChild);
                    _created.return = returnFiber;
                    return _created;
                  }
                  case REACT_PORTAL_TYPE: {
                    var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                    _created2.return = returnFiber;
                    return _created2;
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init2 = newChild._init;
                    return createChild(returnFiber, init2(payload), lanes);
                  }
                }
                if (isArray2(newChild) || getIteratorFn(newChild)) {
                  var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                  _created3.return = returnFiber;
                  return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateSlot(returnFiber, oldFiber, newChild, lanes) {
              var key2 = oldFiber !== null ? oldFiber.key : null;
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                if (key2 !== null) {
                  return null;
                }
                return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    if (newChild.key === key2) {
                      return updateElement(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_PORTAL_TYPE: {
                    if (newChild.key === key2) {
                      return updatePortal(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init2 = newChild._init;
                    return updateSlot(returnFiber, oldFiber, init2(payload), lanes);
                  }
                }
                if (isArray2(newChild) || getIteratorFn(newChild)) {
                  if (key2 !== null) {
                    return null;
                  }
                  return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                  }
                  case REACT_PORTAL_TYPE: {
                    var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                  }
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init2 = newChild._init;
                    return updateFromMap(existingChildren, returnFiber, newIdx, init2(payload), lanes);
                }
                if (isArray2(newChild) || getIteratorFn(newChild)) {
                  var _matchedFiber3 = existingChildren.get(newIdx) || null;
                  return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function warnOnInvalidKey(child, knownKeys, returnFiber) {
              {
                if (typeof child !== "object" || child === null) {
                  return knownKeys;
                }
                switch (child.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    warnForMissingKey(child, returnFiber);
                    var key2 = child.key;
                    if (typeof key2 !== "string") {
                      break;
                    }
                    if (knownKeys === null) {
                      knownKeys = /* @__PURE__ */ new Set();
                      knownKeys.add(key2);
                      break;
                    }
                    if (!knownKeys.has(key2)) {
                      knownKeys.add(key2);
                      break;
                    }
                    error2("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key2);
                    break;
                  case REACT_LAZY_TYPE:
                    var payload = child._payload;
                    var init2 = child._init;
                    warnOnInvalidKey(init2(payload), knownKeys, returnFiber);
                    break;
                }
              }
              return knownKeys;
            }
            function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
              {
                var knownKeys = null;
                for (var i3 = 0; i3 < newChildren.length; i3++) {
                  var child = newChildren[i3];
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (newIdx === newChildren.length) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; newIdx < newChildren.length; newIdx++) {
                  var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                  if (_newFiber === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber;
                  } else {
                    previousNewFiber.sibling = _newFiber;
                  }
                  previousNewFiber = _newFiber;
                }
                if (getIsHydrating()) {
                  var _numberOfForks = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                if (_newFiber2 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber2.alternate !== null) {
                      existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber2;
                  } else {
                    previousNewFiber.sibling = _newFiber2;
                  }
                  previousNewFiber = _newFiber2;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks2 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks2);
              }
              return resultingFirstChild;
            }
            function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
              var iteratorFn = getIteratorFn(newChildrenIterable);
              if (typeof iteratorFn !== "function") {
                throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
              }
              {
                if (typeof Symbol === "function" && // $FlowFixMe Flow doesn't know about toStringTag
                newChildrenIterable[Symbol.toStringTag] === "Generator") {
                  if (!didWarnAboutGenerators) {
                    error2("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                  }
                  didWarnAboutGenerators = true;
                }
                if (newChildrenIterable.entries === iteratorFn) {
                  if (!didWarnAboutMaps) {
                    error2("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
                var _newChildren = iteratorFn.call(newChildrenIterable);
                if (_newChildren) {
                  var knownKeys = null;
                  var _step = _newChildren.next();
                  for (; !_step.done; _step = _newChildren.next()) {
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                  }
                }
              }
              var newChildren = iteratorFn.call(newChildrenIterable);
              if (newChildren == null) {
                throw new Error("An iterable object provided no iterator.");
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              var step = newChildren.next();
              for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (step.done) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; !step.done; newIdx++, step = newChildren.next()) {
                  var _newFiber3 = createChild(returnFiber, step.value, lanes);
                  if (_newFiber3 === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber3;
                  } else {
                    previousNewFiber.sibling = _newFiber3;
                  }
                  previousNewFiber = _newFiber3;
                }
                if (getIsHydrating()) {
                  var _numberOfForks3 = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks3);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
                if (_newFiber4 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber4.alternate !== null) {
                      existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber4;
                  } else {
                    previousNewFiber.sibling = _newFiber4;
                  }
                  previousNewFiber = _newFiber4;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks4 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks4);
              }
              return resultingFirstChild;
            }
            function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
              if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent);
                existing.return = returnFiber;
                return existing;
              }
              deleteRemainingChildren(returnFiber, currentFirstChild);
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
              var key2 = element.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key2) {
                  var elementType = element.type;
                  if (elementType === REACT_FRAGMENT_TYPE) {
                    if (child.tag === Fragment29) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var existing = useFiber(child, element.props.children);
                      existing.return = returnFiber;
                      {
                        existing._debugSource = element._source;
                        existing._debugOwner = element._owner;
                      }
                      return existing;
                    }
                  } else {
                    if (child.elementType === elementType || // Keep this check inline so it only runs on the false path:
                    isCompatibleFamilyForHotReloading(child, element) || // Lazy types should reconcile their resolved type.
                    // We need to do this after the Hot Reloading check above,
                    // because hot reloading has different semantics than prod because
                    // it doesn't resuspend. So we can't let the call below suspend.
                    typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var _existing = useFiber(child, element.props);
                      _existing.ref = coerceRef(returnFiber, child, element);
                      _existing.return = returnFiber;
                      {
                        _existing._debugSource = element._source;
                        _existing._debugOwner = element._owner;
                      }
                      return _existing;
                    }
                  }
                  deleteRemainingChildren(returnFiber, child);
                  break;
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              if (element.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
                created.return = returnFiber;
                return created;
              } else {
                var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                _created4.return = returnFiber;
                return _created4;
              }
            }
            function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
              var key2 = portal.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key2) {
                  if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, portal.children || []);
                    existing.return = returnFiber;
                    return existing;
                  } else {
                    deleteRemainingChildren(returnFiber, child);
                    break;
                  }
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
              var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
              if (isUnkeyedTopLevelFragment) {
                newChild = newChild.props.children;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_PORTAL_TYPE:
                    return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init2 = newChild._init;
                    return reconcileChildFibers2(returnFiber, currentFirstChild, init2(payload), lanes);
                }
                if (isArray2(newChild)) {
                  return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
                }
                if (getIteratorFn(newChild)) {
                  return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return deleteRemainingChildren(returnFiber, currentFirstChild);
            }
            return reconcileChildFibers2;
          }
          var reconcileChildFibers = ChildReconciler(true);
          var mountChildFibers = ChildReconciler(false);
          function cloneChildFibers(current2, workInProgress2) {
            if (current2 !== null && workInProgress2.child !== current2.child) {
              throw new Error("Resuming work not yet implemented.");
            }
            if (workInProgress2.child === null) {
              return;
            }
            var currentChild = workInProgress2.child;
            var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
            workInProgress2.child = newChild;
            newChild.return = workInProgress2;
            while (currentChild.sibling !== null) {
              currentChild = currentChild.sibling;
              newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
              newChild.return = workInProgress2;
            }
            newChild.sibling = null;
          }
          function resetChildFibers(workInProgress2, lanes) {
            var child = workInProgress2.child;
            while (child !== null) {
              resetWorkInProgress(child, lanes);
              child = child.sibling;
            }
          }
          var NO_CONTEXT = {};
          var contextStackCursor$1 = createCursor(NO_CONTEXT);
          var contextFiberStackCursor = createCursor(NO_CONTEXT);
          var rootInstanceStackCursor = createCursor(NO_CONTEXT);
          function requiredContext(c2) {
            if (c2 === NO_CONTEXT) {
              throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
            }
            return c2;
          }
          function getRootHostContainer() {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            return rootInstance;
          }
          function pushHostContainer(fiber, nextRootInstance) {
            push(rootInstanceStackCursor, nextRootInstance, fiber);
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, NO_CONTEXT, fiber);
            var nextRootContext = getRootHostContext(nextRootInstance);
            pop(contextStackCursor$1, fiber);
            push(contextStackCursor$1, nextRootContext, fiber);
          }
          function popHostContainer(fiber) {
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
            pop(rootInstanceStackCursor, fiber);
          }
          function getHostContext() {
            var context2 = requiredContext(contextStackCursor$1.current);
            return context2;
          }
          function pushHostContext(fiber) {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            var context2 = requiredContext(contextStackCursor$1.current);
            var nextContext = getChildHostContext(context2, fiber.type);
            if (context2 === nextContext) {
              return;
            }
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, nextContext, fiber);
          }
          function popHostContext(fiber) {
            if (contextFiberStackCursor.current !== fiber) {
              return;
            }
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
          }
          var DefaultSuspenseContext = 0;
          var SubtreeSuspenseContextMask = 1;
          var InvisibleParentSuspenseContext = 1;
          var ForceSuspenseFallback = 2;
          var suspenseStackCursor = createCursor(DefaultSuspenseContext);
          function hasSuspenseContext(parentContext, flag) {
            return (parentContext & flag) !== 0;
          }
          function setDefaultShallowSuspenseContext(parentContext) {
            return parentContext & SubtreeSuspenseContextMask;
          }
          function setShallowSuspenseContext(parentContext, shallowContext) {
            return parentContext & SubtreeSuspenseContextMask | shallowContext;
          }
          function addSubtreeSuspenseContext(parentContext, subtreeContext) {
            return parentContext | subtreeContext;
          }
          function pushSuspenseContext(fiber, newContext) {
            push(suspenseStackCursor, newContext, fiber);
          }
          function popSuspenseContext(fiber) {
            pop(suspenseStackCursor, fiber);
          }
          function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
            var nextState = workInProgress2.memoizedState;
            if (nextState !== null) {
              if (nextState.dehydrated !== null) {
                return true;
              }
              return false;
            }
            var props = workInProgress2.memoizedProps;
            {
              return true;
            }
          }
          function findFirstSuspended(row) {
            var node = row;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                  var dehydrated = state.dehydrated;
                  if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                    return node;
                  }
                }
              } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
              // keep track of whether it suspended or not.
              node.memoizedProps.revealOrder !== void 0) {
                var didSuspend = (node.flags & DidCapture) !== NoFlags;
                if (didSuspend) {
                  return node;
                }
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === row) {
                return null;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === row) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return null;
          }
          var NoFlags$1 = (
            /*   */
            0
          );
          var HasEffect = (
            /* */
            1
          );
          var Insertion = (
            /*  */
            2
          );
          var Layout3 = (
            /*    */
            4
          );
          var Passive$1 = (
            /*   */
            8
          );
          var workInProgressSources = [];
          function resetWorkInProgressVersions() {
            for (var i3 = 0; i3 < workInProgressSources.length; i3++) {
              var mutableSource = workInProgressSources[i3];
              {
                mutableSource._workInProgressVersionPrimary = null;
              }
            }
            workInProgressSources.length = 0;
          }
          function registerMutableSourceForHydration(root4, mutableSource) {
            var getVersion = mutableSource._getVersion;
            var version2 = getVersion(mutableSource._source);
            if (root4.mutableSourceEagerHydrationData == null) {
              root4.mutableSourceEagerHydrationData = [mutableSource, version2];
            } else {
              root4.mutableSourceEagerHydrationData.push(mutableSource, version2);
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
          var didWarnAboutMismatchedHooksForComponent;
          var didWarnUncachedGetSnapshot;
          {
            didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
          }
          var renderLanes = NoLanes;
          var currentlyRenderingFiber$1 = null;
          var currentHook = null;
          var workInProgressHook = null;
          var didScheduleRenderPhaseUpdate = false;
          var didScheduleRenderPhaseUpdateDuringThisPass = false;
          var localIdCounter = 0;
          var globalClientIdCounter = 0;
          var RE_RENDER_LIMIT = 25;
          var currentHookNameInDev = null;
          var hookTypesDev = null;
          var hookTypesUpdateIndexDev = -1;
          var ignorePreviousDependencies = false;
          function mountHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev === null) {
                hookTypesDev = [hookName];
              } else {
                hookTypesDev.push(hookName);
              }
            }
          }
          function updateHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev !== null) {
                hookTypesUpdateIndexDev++;
                if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                  warnOnHookMismatchInDev(hookName);
                }
              }
            }
          }
          function checkDepsAreArrayDev(deps) {
            {
              if (deps !== void 0 && deps !== null && !isArray2(deps)) {
                error2("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
              }
            }
          }
          function warnOnHookMismatchInDev(currentHookName) {
            {
              var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
              if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
                didWarnAboutMismatchedHooksForComponent.add(componentName);
                if (hookTypesDev !== null) {
                  var table = "";
                  var secondColumnStart = 30;
                  for (var i3 = 0; i3 <= hookTypesUpdateIndexDev; i3++) {
                    var oldHookName = hookTypesDev[i3];
                    var newHookName = i3 === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i3 + 1 + ". " + oldHookName;
                    while (row.length < secondColumnStart) {
                      row += " ";
                    }
                    row += newHookName + "\n";
                    table += row;
                  }
                  error2("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
                }
              }
            }
          }
          function throwInvalidHookError() {
            throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
          }
          function areHookInputsEqual(nextDeps, prevDeps) {
            {
              if (ignorePreviousDependencies) {
                return false;
              }
            }
            if (prevDeps === null) {
              {
                error2("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
              }
              return false;
            }
            {
              if (nextDeps.length !== prevDeps.length) {
                error2("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
              }
            }
            for (var i3 = 0; i3 < prevDeps.length && i3 < nextDeps.length; i3++) {
              if (objectIs(nextDeps[i3], prevDeps[i3])) {
                continue;
              }
              return false;
            }
            return true;
          }
          function renderWithHooks(current2, workInProgress2, Component20, props, secondArg, nextRenderLanes) {
            renderLanes = nextRenderLanes;
            currentlyRenderingFiber$1 = workInProgress2;
            {
              hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
              hookTypesUpdateIndexDev = -1;
              ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
            }
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.lanes = NoLanes;
            {
              if (current2 !== null && current2.memoizedState !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
              } else if (hookTypesDev !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
              } else {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
              }
            }
            var children = Component20(props, secondArg);
            if (didScheduleRenderPhaseUpdateDuringThisPass) {
              var numberOfReRenders = 0;
              do {
                didScheduleRenderPhaseUpdateDuringThisPass = false;
                localIdCounter = 0;
                if (numberOfReRenders >= RE_RENDER_LIMIT) {
                  throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                }
                numberOfReRenders += 1;
                {
                  ignorePreviousDependencies = false;
                }
                currentHook = null;
                workInProgressHook = null;
                workInProgress2.updateQueue = null;
                {
                  hookTypesUpdateIndexDev = -1;
                }
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                children = Component20(props, secondArg);
              } while (didScheduleRenderPhaseUpdateDuringThisPass);
            }
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            {
              workInProgress2._debugHookTypes = hookTypesDev;
            }
            var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              currentHookNameInDev = null;
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              if (current2 !== null && (current2.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird
              // and creates false positives. To make this work in legacy mode, we'd
              // need to mark fibers that commit in an incomplete state, somehow. For
              // now I'll disable the warning that most of the bugs that would trigger
              // it are either exclusive to concurrent mode or exist in both.
              (current2.mode & ConcurrentMode) !== NoMode) {
                error2("Internal React error: Expected static flag was missing. Please notify the React team.");
              }
            }
            didScheduleRenderPhaseUpdate = false;
            if (didRenderTooFewHooks) {
              throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
            }
            return children;
          }
          function checkDidRenderIdHook() {
            var didRenderIdHook = localIdCounter !== 0;
            localIdCounter = 0;
            return didRenderIdHook;
          }
          function bailoutHooks(current2, workInProgress2, lanes) {
            workInProgress2.updateQueue = current2.updateQueue;
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
            } else {
              workInProgress2.flags &= ~(Passive | Update);
            }
            current2.lanes = removeLanes(current2.lanes, lanes);
          }
          function resetHooksAfterThrow() {
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            if (didScheduleRenderPhaseUpdate) {
              var hook = currentlyRenderingFiber$1.memoizedState;
              while (hook !== null) {
                var queue = hook.queue;
                if (queue !== null) {
                  queue.pending = null;
                }
                hook = hook.next;
              }
              didScheduleRenderPhaseUpdate = false;
            }
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              currentHookNameInDev = null;
              isUpdatingOpaqueValueInRenderPhase = false;
            }
            didScheduleRenderPhaseUpdateDuringThisPass = false;
            localIdCounter = 0;
          }
          function mountWorkInProgressHook() {
            var hook = {
              memoizedState: null,
              baseState: null,
              baseQueue: null,
              queue: null,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
            } else {
              workInProgressHook = workInProgressHook.next = hook;
            }
            return workInProgressHook;
          }
          function updateWorkInProgressHook() {
            var nextCurrentHook;
            if (currentHook === null) {
              var current2 = currentlyRenderingFiber$1.alternate;
              if (current2 !== null) {
                nextCurrentHook = current2.memoizedState;
              } else {
                nextCurrentHook = null;
              }
            } else {
              nextCurrentHook = currentHook.next;
            }
            var nextWorkInProgressHook;
            if (workInProgressHook === null) {
              nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
            } else {
              nextWorkInProgressHook = workInProgressHook.next;
            }
            if (nextWorkInProgressHook !== null) {
              workInProgressHook = nextWorkInProgressHook;
              nextWorkInProgressHook = workInProgressHook.next;
              currentHook = nextCurrentHook;
            } else {
              if (nextCurrentHook === null) {
                throw new Error("Rendered more hooks than during the previous render.");
              }
              currentHook = nextCurrentHook;
              var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null
              };
              if (workInProgressHook === null) {
                currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
              } else {
                workInProgressHook = workInProgressHook.next = newHook;
              }
            }
            return workInProgressHook;
          }
          function createFunctionComponentUpdateQueue() {
            return {
              lastEffect: null,
              stores: null
            };
          }
          function basicStateReducer(state, action) {
            return typeof action === "function" ? action(state) : action;
          }
          function mountReducer(reducer, initialArg, init2) {
            var hook = mountWorkInProgressHook();
            var initialState10;
            if (init2 !== void 0) {
              initialState10 = init2(initialArg);
            } else {
              initialState10 = initialArg;
            }
            hook.memoizedState = hook.baseState = initialState10;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: reducer,
              lastRenderedState: initialState10
            };
            hook.queue = queue;
            var dispatch2 = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch2];
          }
          function updateReducer(reducer, initialArg, init2) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var current2 = currentHook;
            var baseQueue = current2.baseQueue;
            var pendingQueue = queue.pending;
            if (pendingQueue !== null) {
              if (baseQueue !== null) {
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
              }
              {
                if (current2.baseQueue !== baseQueue) {
                  error2("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
                }
              }
              current2.baseQueue = baseQueue = pendingQueue;
              queue.pending = null;
            }
            if (baseQueue !== null) {
              var first = baseQueue.next;
              var newState = current2.baseState;
              var newBaseState = null;
              var newBaseQueueFirst = null;
              var newBaseQueueLast = null;
              var update = first;
              do {
                var updateLane = update.lane;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                  var clone2 = {
                    lane: updateLane,
                    action: update.action,
                    hasEagerState: update.hasEagerState,
                    eagerState: update.eagerState,
                    next: null
                  };
                  if (newBaseQueueLast === null) {
                    newBaseQueueFirst = newBaseQueueLast = clone2;
                    newBaseState = newState;
                  } else {
                    newBaseQueueLast = newBaseQueueLast.next = clone2;
                  }
                  currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                  markSkippedUpdateLanes(updateLane);
                } else {
                  if (newBaseQueueLast !== null) {
                    var _clone = {
                      // This update is going to be committed so we never want uncommit
                      // it. Using NoLane works because 0 is a subset of all bitmasks, so
                      // this will never be skipped by the check above.
                      lane: NoLane,
                      action: update.action,
                      hasEagerState: update.hasEagerState,
                      eagerState: update.eagerState,
                      next: null
                    };
                    newBaseQueueLast = newBaseQueueLast.next = _clone;
                  }
                  if (update.hasEagerState) {
                    newState = update.eagerState;
                  } else {
                    var action = update.action;
                    newState = reducer(newState, action);
                  }
                }
                update = update.next;
              } while (update !== null && update !== first);
              if (newBaseQueueLast === null) {
                newBaseState = newState;
              } else {
                newBaseQueueLast.next = newBaseQueueFirst;
              }
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              hook.baseState = newBaseState;
              hook.baseQueue = newBaseQueueLast;
              queue.lastRenderedState = newState;
            }
            var lastInterleaved = queue.interleaved;
            if (lastInterleaved !== null) {
              var interleaved = lastInterleaved;
              do {
                var interleavedLane = interleaved.lane;
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
                markSkippedUpdateLanes(interleavedLane);
                interleaved = interleaved.next;
              } while (interleaved !== lastInterleaved);
            } else if (baseQueue === null) {
              queue.lanes = NoLanes;
            }
            var dispatch2 = queue.dispatch;
            return [hook.memoizedState, dispatch2];
          }
          function rerenderReducer(reducer, initialArg, init2) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var dispatch2 = queue.dispatch;
            var lastRenderPhaseUpdate = queue.pending;
            var newState = hook.memoizedState;
            if (lastRenderPhaseUpdate !== null) {
              queue.pending = null;
              var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              var update = firstRenderPhaseUpdate;
              do {
                var action = update.action;
                newState = reducer(newState, action);
                update = update.next;
              } while (update !== firstRenderPhaseUpdate);
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              if (hook.baseQueue === null) {
                hook.baseState = newState;
              }
              queue.lastRenderedState = newState;
            }
            return [newState, dispatch2];
          }
          function mountMutableSource(source, getSnapshot, subscribe2) {
            {
              return void 0;
            }
          }
          function updateMutableSource(source, getSnapshot, subscribe2) {
            {
              return void 0;
            }
          }
          function mountSyncExternalStore(subscribe2, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = mountWorkInProgressHook();
            var nextSnapshot;
            var isHydrating2 = getIsHydrating();
            if (isHydrating2) {
              if (getServerSnapshot === void 0) {
                throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
              }
              nextSnapshot = getServerSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  if (nextSnapshot !== getServerSnapshot()) {
                    error2("The result of getServerSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
            } else {
              nextSnapshot = getSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  var cachedSnapshot = getSnapshot();
                  if (!objectIs(nextSnapshot, cachedSnapshot)) {
                    error2("The result of getSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
              var root4 = getWorkInProgressRoot();
              if (root4 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root4, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            hook.memoizedState = nextSnapshot;
            var inst = {
              value: nextSnapshot,
              getSnapshot
            };
            hook.queue = inst;
            mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe2), [subscribe2]);
            fiber.flags |= Passive;
            pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
            return nextSnapshot;
          }
          function updateSyncExternalStore(subscribe2, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = updateWorkInProgressHook();
            var nextSnapshot = getSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                var cachedSnapshot = getSnapshot();
                if (!objectIs(nextSnapshot, cachedSnapshot)) {
                  error2("The result of getSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
            var prevSnapshot = hook.memoizedState;
            var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
            if (snapshotChanged) {
              hook.memoizedState = nextSnapshot;
              markWorkInProgressReceivedUpdate();
            }
            var inst = hook.queue;
            updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe2), [subscribe2]);
            if (inst.getSnapshot !== getSnapshot || snapshotChanged || // Check if the susbcribe function changed. We can save some memory by
            // checking whether we scheduled a subscription effect above.
            workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
              fiber.flags |= Passive;
              pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
              var root4 = getWorkInProgressRoot();
              if (root4 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root4, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            return nextSnapshot;
          }
          function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
            fiber.flags |= StoreConsistency;
            var check = {
              getSnapshot,
              value: renderedSnapshot
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.stores = [check];
            } else {
              var stores = componentUpdateQueue.stores;
              if (stores === null) {
                componentUpdateQueue.stores = [check];
              } else {
                stores.push(check);
              }
            }
          }
          function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
            inst.value = nextSnapshot;
            inst.getSnapshot = getSnapshot;
            if (checkIfSnapshotChanged(inst)) {
              forceStoreRerender(fiber);
            }
          }
          function subscribeToStore(fiber, inst, subscribe2) {
            var handleStoreChange = function() {
              if (checkIfSnapshotChanged(inst)) {
                forceStoreRerender(fiber);
              }
            };
            return subscribe2(handleStoreChange);
          }
          function checkIfSnapshotChanged(inst) {
            var latestGetSnapshot = inst.getSnapshot;
            var prevValue = inst.value;
            try {
              var nextValue = latestGetSnapshot();
              return !objectIs(prevValue, nextValue);
            } catch (error3) {
              return true;
            }
          }
          function forceStoreRerender(fiber) {
            var root4 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root4 !== null) {
              scheduleUpdateOnFiber(root4, fiber, SyncLane, NoTimestamp);
            }
          }
          function mountState(initialState10) {
            var hook = mountWorkInProgressHook();
            if (typeof initialState10 === "function") {
              initialState10 = initialState10();
            }
            hook.memoizedState = hook.baseState = initialState10;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: initialState10
            };
            hook.queue = queue;
            var dispatch2 = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch2];
          }
          function updateState(initialState10) {
            return updateReducer(basicStateReducer);
          }
          function rerenderState(initialState10) {
            return rerenderReducer(basicStateReducer);
          }
          function pushEffect(tag, create, destroy3, deps) {
            var effect = {
              tag,
              create,
              destroy: destroy3,
              deps,
              // Circular
              next: null
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var lastEffect = componentUpdateQueue.lastEffect;
              if (lastEffect === null) {
                componentUpdateQueue.lastEffect = effect.next = effect;
              } else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect;
                effect.next = firstEffect;
                componentUpdateQueue.lastEffect = effect;
              }
            }
            return effect;
          }
          function mountRef(initialValue) {
            var hook = mountWorkInProgressHook();
            {
              var _ref2 = {
                current: initialValue
              };
              hook.memoizedState = _ref2;
              return _ref2;
            }
          }
          function updateRef(initialValue) {
            var hook = updateWorkInProgressHook();
            return hook.memoizedState;
          }
          function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, void 0, nextDeps);
          }
          function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var destroy3 = void 0;
            if (currentHook !== null) {
              var prevEffect = currentHook.memoizedState;
              destroy3 = prevEffect.destroy;
              if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  hook.memoizedState = pushEffect(hookFlags, create, destroy3, nextDeps);
                  return;
                }
              }
            }
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy3, nextDeps);
          }
          function mountEffect(create, deps) {
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps);
            } else {
              return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);
            }
          }
          function updateEffect(create, deps) {
            return updateEffectImpl(Passive, Passive$1, create, deps);
          }
          function mountInsertionEffect(create, deps) {
            return mountEffectImpl(Update, Insertion, create, deps);
          }
          function updateInsertionEffect(create, deps) {
            return updateEffectImpl(Update, Insertion, create, deps);
          }
          function mountLayoutEffect(create, deps) {
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout3, create, deps);
          }
          function updateLayoutEffect(create, deps) {
            return updateEffectImpl(Update, Layout3, create, deps);
          }
          function imperativeHandleEffect(create, ref) {
            if (typeof ref === "function") {
              var refCallback = ref;
              var _inst = create();
              refCallback(_inst);
              return function() {
                refCallback(null);
              };
            } else if (ref !== null && ref !== void 0) {
              var refObject = ref;
              {
                if (!refObject.hasOwnProperty("current")) {
                  error2("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
                }
              }
              var _inst2 = create();
              refObject.current = _inst2;
              return function() {
                refObject.current = null;
              };
            }
          }
          function mountImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error2("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout3, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function updateImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error2("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return updateEffectImpl(Update, Layout3, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function mountDebugValue(value, formatterFn) {
          }
          var updateDebugValue = mountDebugValue;
          function mountCallback(callback, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function updateCallback(callback, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function mountMemo(nextCreate, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function updateMemo(nextCreate, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function mountDeferredValue(value) {
            var hook = mountWorkInProgressHook();
            hook.memoizedState = value;
            return value;
          }
          function updateDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            var resolvedCurrentHook = currentHook;
            var prevValue = resolvedCurrentHook.memoizedState;
            return updateDeferredValueImpl(hook, prevValue, value);
          }
          function rerenderDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            if (currentHook === null) {
              hook.memoizedState = value;
              return value;
            } else {
              var prevValue = currentHook.memoizedState;
              return updateDeferredValueImpl(hook, prevValue, value);
            }
          }
          function updateDeferredValueImpl(hook, prevValue, value) {
            var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
            if (shouldDeferValue) {
              if (!objectIs(value, prevValue)) {
                var deferredLane = claimNextTransitionLane();
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
                markSkippedUpdateLanes(deferredLane);
                hook.baseState = true;
              }
              return prevValue;
            } else {
              if (hook.baseState) {
                hook.baseState = false;
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = value;
              return value;
            }
          }
          function startTransition(setPending, callback, options2) {
            var previousPriority = getCurrentUpdatePriority();
            setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
            setPending(true);
            var prevTransition = ReactCurrentBatchConfig$2.transition;
            ReactCurrentBatchConfig$2.transition = {};
            var currentTransition = ReactCurrentBatchConfig$2.transition;
            {
              ReactCurrentBatchConfig$2.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              setPending(false);
              callback();
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$2.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn3("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          function mountTransition() {
            var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1];
            var start = startTransition.bind(null, setPending);
            var hook = mountWorkInProgressHook();
            hook.memoizedState = start;
            return [isPending, start];
          }
          function updateTransition() {
            var _updateState = updateState(), isPending = _updateState[0];
            var hook = updateWorkInProgressHook();
            var start = hook.memoizedState;
            return [isPending, start];
          }
          function rerenderTransition() {
            var _rerenderState = rerenderState(), isPending = _rerenderState[0];
            var hook = updateWorkInProgressHook();
            var start = hook.memoizedState;
            return [isPending, start];
          }
          var isUpdatingOpaqueValueInRenderPhase = false;
          function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
            {
              return isUpdatingOpaqueValueInRenderPhase;
            }
          }
          function mountId() {
            var hook = mountWorkInProgressHook();
            var root4 = getWorkInProgressRoot();
            var identifierPrefix = root4.identifierPrefix;
            var id2;
            if (getIsHydrating()) {
              var treeId = getTreeId();
              id2 = ":" + identifierPrefix + "R" + treeId;
              var localId = localIdCounter++;
              if (localId > 0) {
                id2 += "H" + localId.toString(32);
              }
              id2 += ":";
            } else {
              var globalClientId = globalClientIdCounter++;
              id2 = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
            }
            hook.memoizedState = id2;
            return id2;
          }
          function updateId() {
            var hook = updateWorkInProgressHook();
            var id2 = hook.memoizedState;
            return id2;
          }
          function dispatchReducerAction(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error2("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update);
            } else {
              var root4 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
              if (root4 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root4, fiber, lane, eventTime);
                entangleTransitionUpdate(root4, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function dispatchSetState(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error2("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update);
            } else {
              var alternate = fiber.alternate;
              if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                  var prevDispatcher;
                  {
                    prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                  }
                  try {
                    var currentState = queue.lastRenderedState;
                    var eagerState = lastRenderedReducer(currentState, action);
                    update.hasEagerState = true;
                    update.eagerState = eagerState;
                    if (objectIs(eagerState, currentState)) {
                      enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
                      return;
                    }
                  } catch (error3) {
                  } finally {
                    {
                      ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                  }
                }
              }
              var root4 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
              if (root4 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root4, fiber, lane, eventTime);
                entangleTransitionUpdate(root4, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function isRenderPhaseUpdate(fiber) {
            var alternate = fiber.alternate;
            return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
          }
          function enqueueRenderPhaseUpdate(queue, update) {
            didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
            var pending = queue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            queue.pending = update;
          }
          function entangleTransitionUpdate(root4, queue, lane) {
            if (isTransitionLane(lane)) {
              var queueLanes = queue.lanes;
              queueLanes = intersectLanes(queueLanes, root4.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              queue.lanes = newQueueLanes;
              markRootEntangled(root4, newQueueLanes);
            }
          }
          function markUpdateInDevTools(fiber, lane, action) {
            {
              markStateUpdateScheduled(fiber, lane);
            }
          }
          var ContextOnlyDispatcher = {
            readContext,
            useCallback: throwInvalidHookError,
            useContext: throwInvalidHookError,
            useEffect: throwInvalidHookError,
            useImperativeHandle: throwInvalidHookError,
            useInsertionEffect: throwInvalidHookError,
            useLayoutEffect: throwInvalidHookError,
            useMemo: throwInvalidHookError,
            useReducer: throwInvalidHookError,
            useRef: throwInvalidHookError,
            useState: throwInvalidHookError,
            useDebugValue: throwInvalidHookError,
            useDeferredValue: throwInvalidHookError,
            useTransition: throwInvalidHookError,
            useMutableSource: throwInvalidHookError,
            useSyncExternalStore: throwInvalidHookError,
            useId: throwInvalidHookError,
            unstable_isNewReconciler: enableNewReconciler
          };
          var HooksDispatcherOnMountInDEV = null;
          var HooksDispatcherOnMountWithHookTypesInDEV = null;
          var HooksDispatcherOnUpdateInDEV = null;
          var HooksDispatcherOnRerenderInDEV = null;
          var InvalidNestedHooksDispatcherOnMountInDEV = null;
          var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
          var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
          {
            var warnInvalidContextAccess = function() {
              error2("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            };
            var warnInvalidHookAccess = function() {
              error2("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
            };
            HooksDispatcherOnMountInDEV = {
              readContext: function(context2) {
                return readContext(context2);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountCallback(callback, deps);
              },
              useContext: function(context2) {
                currentHookNameInDev = "useContext";
                mountHookTypesDev();
                return readContext(context2);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init2) {
                currentHookNameInDev = "useReducer";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState10) {
                currentHookNameInDev = "useState";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState10);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe2) {
                currentHookNameInDev = "useMutableSource";
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe2, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe2, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnMountWithHookTypesInDEV = {
              readContext: function(context2) {
                return readContext(context2);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context2) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context2);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init2) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState10) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState10);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe2) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe2, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return mountSyncExternalStore(subscribe2, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnUpdateInDEV = {
              readContext: function(context2) {
                return readContext(context2);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context2) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context2);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init2) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState10) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState10);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe2) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe2, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe2, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnRerenderInDEV = {
              readContext: function(context2) {
                return readContext(context2);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context2) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context2);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init2) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState10) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderState(initialState10);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe2) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe2, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe2, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnMountInDEV = {
              readContext: function(context2) {
                warnInvalidContextAccess();
                return readContext(context2);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context2) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return readContext(context2);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init2) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState10) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState10);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe2) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe2, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe2, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnUpdateInDEV = {
              readContext: function(context2) {
                warnInvalidContextAccess();
                return readContext(context2);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context2) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context2);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init2) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState10) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState10);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe2) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe2, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe2, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnRerenderInDEV = {
              readContext: function(context2) {
                warnInvalidContextAccess();
                return readContext(context2);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context2) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context2);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init2) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState10) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderState(initialState10);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe2) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe2, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe2, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
          }
          var now$1 = Scheduler.unstable_now;
          var commitTime = 0;
          var layoutEffectStartTime = -1;
          var profilerStartTime = -1;
          var passiveEffectStartTime = -1;
          var currentUpdateIsNested = false;
          var nestedUpdateScheduled = false;
          function isCurrentUpdateNested() {
            return currentUpdateIsNested;
          }
          function markNestedUpdateScheduled() {
            {
              nestedUpdateScheduled = true;
            }
          }
          function resetNestedUpdateFlag() {
            {
              currentUpdateIsNested = false;
              nestedUpdateScheduled = false;
            }
          }
          function syncNestedUpdateFlag() {
            {
              currentUpdateIsNested = nestedUpdateScheduled;
              nestedUpdateScheduled = false;
            }
          }
          function getCommitTime() {
            return commitTime;
          }
          function recordCommitTime() {
            commitTime = now$1();
          }
          function startProfilerTimer(fiber) {
            profilerStartTime = now$1();
            if (fiber.actualStartTime < 0) {
              fiber.actualStartTime = now$1();
            }
          }
          function stopProfilerTimerIfRunning(fiber) {
            profilerStartTime = -1;
          }
          function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
            if (profilerStartTime >= 0) {
              var elapsedTime = now$1() - profilerStartTime;
              fiber.actualDuration += elapsedTime;
              if (overrideBaseTime) {
                fiber.selfBaseDuration = elapsedTime;
              }
              profilerStartTime = -1;
            }
          }
          function recordLayoutEffectDuration(fiber) {
            if (layoutEffectStartTime >= 0) {
              var elapsedTime = now$1() - layoutEffectStartTime;
              layoutEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root4 = parentFiber.stateNode;
                    root4.effectDuration += elapsedTime;
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    parentStateNode.effectDuration += elapsedTime;
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function recordPassiveEffectDuration(fiber) {
            if (passiveEffectStartTime >= 0) {
              var elapsedTime = now$1() - passiveEffectStartTime;
              passiveEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root4 = parentFiber.stateNode;
                    if (root4 !== null) {
                      root4.passiveEffectDuration += elapsedTime;
                    }
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    if (parentStateNode !== null) {
                      parentStateNode.passiveEffectDuration += elapsedTime;
                    }
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function startLayoutEffectTimer() {
            layoutEffectStartTime = now$1();
          }
          function startPassiveEffectTimer() {
            passiveEffectStartTime = now$1();
          }
          function transferActualDuration(fiber) {
            var child = fiber.child;
            while (child) {
              fiber.actualDuration += child.actualDuration;
              child = child.sibling;
            }
          }
          function createCapturedValueAtFiber(value, source) {
            return {
              value,
              source,
              stack: getStackByFiberInDevAndProd(source),
              digest: null
            };
          }
          function createCapturedValue(value, digest, stack) {
            return {
              value,
              source: null,
              stack: stack != null ? stack : null,
              digest: digest != null ? digest : null
            };
          }
          function showErrorDialog(boundary, errorInfo) {
            return true;
          }
          function logCapturedError(boundary, errorInfo) {
            try {
              var logError = showErrorDialog(boundary, errorInfo);
              if (logError === false) {
                return;
              }
              var error3 = errorInfo.value;
              if (true) {
                var source = errorInfo.source;
                var stack = errorInfo.stack;
                var componentStack = stack !== null ? stack : "";
                if (error3 != null && error3._suppressLogging) {
                  if (boundary.tag === ClassComponent) {
                    return;
                  }
                  console["error"](error3);
                }
                var componentName = source ? getComponentNameFromFiber(source) : null;
                var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
                var errorBoundaryMessage;
                if (boundary.tag === HostRoot) {
                  errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
                } else {
                  var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
                  errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
                }
                var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
                console["error"](combinedMessage);
              } else {
                console["error"](error3);
              }
            } catch (e3) {
              setTimeout(function() {
                throw e3;
              });
            }
          }
          var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
          function createRootErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            update.payload = {
              element: null
            };
            var error3 = errorInfo.value;
            update.callback = function() {
              onUncaughtError(error3);
              logCapturedError(fiber, errorInfo);
            };
            return update;
          }
          function createClassErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
            if (typeof getDerivedStateFromError === "function") {
              var error$1 = errorInfo.value;
              update.payload = function() {
                return getDerivedStateFromError(error$1);
              };
              update.callback = function() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
              };
            }
            var inst = fiber.stateNode;
            if (inst !== null && typeof inst.componentDidCatch === "function") {
              update.callback = function callback() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
                if (typeof getDerivedStateFromError !== "function") {
                  markLegacyErrorBoundaryAsFailed(this);
                }
                var error$12 = errorInfo.value;
                var stack = errorInfo.stack;
                this.componentDidCatch(error$12, {
                  componentStack: stack !== null ? stack : ""
                });
                {
                  if (typeof getDerivedStateFromError !== "function") {
                    if (!includesSomeLane(fiber.lanes, SyncLane)) {
                      error2("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
                    }
                  }
                }
              };
            }
            return update;
          }
          function attachPingListener(root4, wakeable, lanes) {
            var pingCache = root4.pingCache;
            var threadIDs;
            if (pingCache === null) {
              pingCache = root4.pingCache = new PossiblyWeakMap$1();
              threadIDs = /* @__PURE__ */ new Set();
              pingCache.set(wakeable, threadIDs);
            } else {
              threadIDs = pingCache.get(wakeable);
              if (threadIDs === void 0) {
                threadIDs = /* @__PURE__ */ new Set();
                pingCache.set(wakeable, threadIDs);
              }
            }
            if (!threadIDs.has(lanes)) {
              threadIDs.add(lanes);
              var ping = pingSuspendedRoot.bind(null, root4, wakeable, lanes);
              {
                if (isDevToolsPresent) {
                  restorePendingUpdaters(root4, lanes);
                }
              }
              wakeable.then(ping, ping);
            }
          }
          function attachRetryListener(suspenseBoundary, root4, wakeable, lanes) {
            var wakeables = suspenseBoundary.updateQueue;
            if (wakeables === null) {
              var updateQueue = /* @__PURE__ */ new Set();
              updateQueue.add(wakeable);
              suspenseBoundary.updateQueue = updateQueue;
            } else {
              wakeables.add(wakeable);
            }
          }
          function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
            var tag = sourceFiber.tag;
            if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
              var currentSource = sourceFiber.alternate;
              if (currentSource) {
                sourceFiber.updateQueue = currentSource.updateQueue;
                sourceFiber.memoizedState = currentSource.memoizedState;
                sourceFiber.lanes = currentSource.lanes;
              } else {
                sourceFiber.updateQueue = null;
                sourceFiber.memoizedState = null;
              }
            }
          }
          function getNearestSuspenseBoundaryToCapture(returnFiber) {
            var node = returnFiber;
            do {
              if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) {
                return node;
              }
              node = node.return;
            } while (node !== null);
            return null;
          }
          function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root4, rootRenderLanes) {
            if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
              if (suspenseBoundary === returnFiber) {
                suspenseBoundary.flags |= ShouldCapture;
              } else {
                suspenseBoundary.flags |= DidCapture;
                sourceFiber.flags |= ForceUpdateForLegacySuspense;
                sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                if (sourceFiber.tag === ClassComponent) {
                  var currentSourceFiber = sourceFiber.alternate;
                  if (currentSourceFiber === null) {
                    sourceFiber.tag = IncompleteClassComponent;
                  } else {
                    var update = createUpdate(NoTimestamp, SyncLane);
                    update.tag = ForceUpdate;
                    enqueueUpdate(sourceFiber, update, SyncLane);
                  }
                }
                sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
              }
              return suspenseBoundary;
            }
            suspenseBoundary.flags |= ShouldCapture;
            suspenseBoundary.lanes = rootRenderLanes;
            return suspenseBoundary;
          }
          function throwException(root4, returnFiber, sourceFiber, value, rootRenderLanes) {
            sourceFiber.flags |= Incomplete;
            {
              if (isDevToolsPresent) {
                restorePendingUpdaters(root4, rootRenderLanes);
              }
            }
            if (value !== null && typeof value === "object" && typeof value.then === "function") {
              var wakeable = value;
              resetSuspendedComponent(sourceFiber);
              {
                if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                  markDidThrowWhileHydratingDEV();
                }
              }
              var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
              if (suspenseBoundary !== null) {
                suspenseBoundary.flags &= ~ForceClientRender;
                markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root4, rootRenderLanes);
                if (suspenseBoundary.mode & ConcurrentMode) {
                  attachPingListener(root4, wakeable, rootRenderLanes);
                }
                attachRetryListener(suspenseBoundary, root4, wakeable);
                return;
              } else {
                if (!includesSyncLane(rootRenderLanes)) {
                  attachPingListener(root4, wakeable, rootRenderLanes);
                  renderDidSuspendDelayIfPossible();
                  return;
                }
                var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
                value = uncaughtSuspenseError;
              }
            } else {
              if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                markDidThrowWhileHydratingDEV();
                var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
                if (_suspenseBoundary !== null) {
                  if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
                    _suspenseBoundary.flags |= ForceClientRender;
                  }
                  markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root4, rootRenderLanes);
                  queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
                  return;
                }
              }
            }
            value = createCapturedValueAtFiber(value, sourceFiber);
            renderDidError(value);
            var workInProgress2 = returnFiber;
            do {
              switch (workInProgress2.tag) {
                case HostRoot: {
                  var _errorInfo = value;
                  workInProgress2.flags |= ShouldCapture;
                  var lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                  enqueueCapturedUpdate(workInProgress2, update);
                  return;
                }
                case ClassComponent:
                  var errorInfo = value;
                  var ctor = workInProgress2.type;
                  var instance2 = workInProgress2.stateNode;
                  if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance2 !== null && typeof instance2.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance2))) {
                    workInProgress2.flags |= ShouldCapture;
                    var _lane = pickArbitraryLane(rootRenderLanes);
                    workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                    var _update = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                    enqueueCapturedUpdate(workInProgress2, _update);
                    return;
                  }
                  break;
              }
              workInProgress2 = workInProgress2.return;
            } while (workInProgress2 !== null);
          }
          function getSuspendedCache() {
            {
              return null;
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var didReceiveUpdate = false;
          var didWarnAboutBadClass;
          var didWarnAboutModulePatternComponent;
          var didWarnAboutContextTypeOnFunctionComponent;
          var didWarnAboutGetDerivedStateOnFunctionComponent;
          var didWarnAboutFunctionRefs;
          var didWarnAboutReassigningProps;
          var didWarnAboutRevealOrder;
          var didWarnAboutTailOptions;
          {
            didWarnAboutBadClass = {};
            didWarnAboutModulePatternComponent = {};
            didWarnAboutContextTypeOnFunctionComponent = {};
            didWarnAboutGetDerivedStateOnFunctionComponent = {};
            didWarnAboutFunctionRefs = {};
            didWarnAboutReassigningProps = false;
            didWarnAboutRevealOrder = {};
            didWarnAboutTailOptions = {};
          }
          function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
            if (current2 === null) {
              workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
            }
          }
          function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          }
          function updateForwardRef(current2, workInProgress2, Component20, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component20.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component20)
                  );
                }
              }
            }
            var render3 = Component20.render;
            var ref = workInProgress2.ref;
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, render3, nextProps, ref, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, render3, nextProps, ref, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMemoComponent(current2, workInProgress2, Component20, nextProps, renderLanes2) {
            if (current2 === null) {
              var type4 = Component20.type;
              if (isSimpleFunctionComponent(type4) && Component20.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
              Component20.defaultProps === void 0) {
                var resolvedType = type4;
                {
                  resolvedType = resolveFunctionForHotReloading(type4);
                }
                workInProgress2.tag = SimpleMemoComponent;
                workInProgress2.type = resolvedType;
                {
                  validateFunctionComponentInDev(workInProgress2, type4);
                }
                return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, renderLanes2);
              }
              {
                var innerPropTypes = type4.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(type4)
                  );
                }
              }
              var child = createFiberFromTypeAndProps(Component20.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
              child.ref = workInProgress2.ref;
              child.return = workInProgress2;
              workInProgress2.child = child;
              return child;
            }
            {
              var _type = Component20.type;
              var _innerPropTypes = _type.propTypes;
              if (_innerPropTypes) {
                checkPropTypes(
                  _innerPropTypes,
                  nextProps,
                  // Resolved props
                  "prop",
                  getComponentNameFromType(_type)
                );
              }
            }
            var currentChild = current2.child;
            var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
            if (!hasScheduledUpdateOrContext) {
              var prevProps = currentChild.memoizedProps;
              var compare = Component20.compare;
              compare = compare !== null ? compare : shallowEqual5;
              if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
            }
            workInProgress2.flags |= PerformedWork;
            var newChild = createWorkInProgress(currentChild, nextProps);
            newChild.ref = workInProgress2.ref;
            newChild.return = workInProgress2;
            workInProgress2.child = newChild;
            return newChild;
          }
          function updateSimpleMemoComponent(current2, workInProgress2, Component20, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerMemoType = workInProgress2.elementType;
                if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                  var lazyComponent = outerMemoType;
                  var payload = lazyComponent._payload;
                  var init2 = lazyComponent._init;
                  try {
                    outerMemoType = init2(payload);
                  } catch (x2) {
                    outerMemoType = null;
                  }
                  var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(
                      outerPropTypes,
                      nextProps,
                      // Resolved (SimpleMemoComponent has no defaultProps)
                      "prop",
                      getComponentNameFromType(outerMemoType)
                    );
                  }
                }
              }
            }
            if (current2 !== null) {
              var prevProps = current2.memoizedProps;
              if (shallowEqual5(prevProps, nextProps) && current2.ref === workInProgress2.ref && // Prevent bailout if the implementation changed due to hot reload.
              workInProgress2.type === current2.type) {
                didReceiveUpdate = false;
                workInProgress2.pendingProps = nextProps = prevProps;
                if (!checkScheduledUpdateOrContext(current2, renderLanes2)) {
                  workInProgress2.lanes = current2.lanes;
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                }
              }
            }
            return updateFunctionComponent(current2, workInProgress2, Component20, nextProps, renderLanes2);
          }
          function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            var prevState = current2 !== null ? current2.memoizedState : null;
            if (nextProps.mode === "hidden" || enableLegacyHidden) {
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                var nextState = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = nextState;
                pushRenderLanes(workInProgress2, renderLanes2);
              } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
                var spawnedCachePool = null;
                var nextBaseLanes;
                if (prevState !== null) {
                  var prevBaseLanes = prevState.baseLanes;
                  nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
                } else {
                  nextBaseLanes = renderLanes2;
                }
                workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
                var _nextState = {
                  baseLanes: nextBaseLanes,
                  cachePool: spawnedCachePool,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState;
                workInProgress2.updateQueue = null;
                pushRenderLanes(workInProgress2, nextBaseLanes);
                return null;
              } else {
                var _nextState2 = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState2;
                var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
                pushRenderLanes(workInProgress2, subtreeRenderLanes2);
              }
            } else {
              var _subtreeRenderLanes;
              if (prevState !== null) {
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
                workInProgress2.memoizedState = null;
              } else {
                _subtreeRenderLanes = renderLanes2;
              }
              pushRenderLanes(workInProgress2, _subtreeRenderLanes);
            }
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateFragment(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMode(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateProfiler(current2, workInProgress2, renderLanes2) {
            {
              workInProgress2.flags |= Update;
              {
                var stateNode = workInProgress2.stateNode;
                stateNode.effectDuration = 0;
                stateNode.passiveEffectDuration = 0;
              }
            }
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markRef(current2, workInProgress2) {
            var ref = workInProgress2.ref;
            if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
              workInProgress2.flags |= Ref;
              {
                workInProgress2.flags |= RefStatic;
              }
            }
          }
          function updateFunctionComponent(current2, workInProgress2, Component20, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component20.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component20)
                  );
                }
              }
            }
            var context2;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component20, true);
              context2 = getMaskedContext(workInProgress2, unmaskedContext);
            }
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, Component20, nextProps, context2, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, Component20, nextProps, context2, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateClassComponent(current2, workInProgress2, Component20, nextProps, renderLanes2) {
            {
              switch (shouldError(workInProgress2)) {
                case false: {
                  var _instance = workInProgress2.stateNode;
                  var ctor = workInProgress2.type;
                  var tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context);
                  var state = tempInstance.state;
                  _instance.updater.enqueueSetState(_instance, state, null);
                  break;
                }
                case true: {
                  workInProgress2.flags |= DidCapture;
                  workInProgress2.flags |= ShouldCapture;
                  var error$1 = new Error("Simulated error coming from DevTools");
                  var lane = pickArbitraryLane(renderLanes2);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update = createClassErrorUpdate(workInProgress2, createCapturedValueAtFiber(error$1, workInProgress2), lane);
                  enqueueCapturedUpdate(workInProgress2, update);
                  break;
                }
              }
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component20.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component20)
                  );
                }
              }
            }
            var hasContext;
            if (isContextProvider(Component20)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var instance2 = workInProgress2.stateNode;
            var shouldUpdate;
            if (instance2 === null) {
              resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2);
              constructClassInstance(workInProgress2, Component20, nextProps);
              mountClassInstance(workInProgress2, Component20, nextProps, renderLanes2);
              shouldUpdate = true;
            } else if (current2 === null) {
              shouldUpdate = resumeMountClassInstance(workInProgress2, Component20, nextProps, renderLanes2);
            } else {
              shouldUpdate = updateClassInstance(current2, workInProgress2, Component20, nextProps, renderLanes2);
            }
            var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component20, shouldUpdate, hasContext, renderLanes2);
            {
              var inst = workInProgress2.stateNode;
              if (shouldUpdate && inst.props !== nextProps) {
                if (!didWarnAboutReassigningProps) {
                  error2("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component");
                }
                didWarnAboutReassigningProps = true;
              }
            }
            return nextUnitOfWork;
          }
          function finishClassComponent(current2, workInProgress2, Component20, shouldUpdate, hasContext, renderLanes2) {
            markRef(current2, workInProgress2);
            var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (!shouldUpdate && !didCaptureError) {
              if (hasContext) {
                invalidateContextProvider(workInProgress2, Component20, false);
              }
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            var instance2 = workInProgress2.stateNode;
            ReactCurrentOwner$1.current = workInProgress2;
            var nextChildren;
            if (didCaptureError && typeof Component20.getDerivedStateFromError !== "function") {
              nextChildren = null;
              {
                stopProfilerTimerIfRunning();
              }
            } else {
              {
                markComponentRenderStarted(workInProgress2);
              }
              {
                setIsRendering(true);
                nextChildren = instance2.render();
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    instance2.render();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                setIsRendering(false);
              }
              {
                markComponentRenderStopped();
              }
            }
            workInProgress2.flags |= PerformedWork;
            if (current2 !== null && didCaptureError) {
              forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            workInProgress2.memoizedState = instance2.state;
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component20, true);
            }
            return workInProgress2.child;
          }
          function pushHostRootContext(workInProgress2) {
            var root4 = workInProgress2.stateNode;
            if (root4.pendingContext) {
              pushTopLevelContextObject(workInProgress2, root4.pendingContext, root4.pendingContext !== root4.context);
            } else if (root4.context) {
              pushTopLevelContextObject(workInProgress2, root4.context, false);
            }
            pushHostContainer(workInProgress2, root4.containerInfo);
          }
          function updateHostRoot(current2, workInProgress2, renderLanes2) {
            pushHostRootContext(workInProgress2);
            if (current2 === null) {
              throw new Error("Should have a current fiber. This is a bug in React.");
            }
            var nextProps = workInProgress2.pendingProps;
            var prevState = workInProgress2.memoizedState;
            var prevChildren = prevState.element;
            cloneUpdateQueue(current2, workInProgress2);
            processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
            var nextState = workInProgress2.memoizedState;
            var root4 = workInProgress2.stateNode;
            var nextChildren = nextState.element;
            if (prevState.isDehydrated) {
              var overrideState = {
                element: nextChildren,
                isDehydrated: false,
                cache: nextState.cache,
                pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
                transitions: nextState.transitions
              };
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = overrideState;
              workInProgress2.memoizedState = overrideState;
              if (workInProgress2.flags & ForceClientRender) {
                var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError);
              } else if (nextChildren !== prevChildren) {
                var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, _recoverableError);
              } else {
                enterHydrationState(workInProgress2);
                var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
                workInProgress2.child = child;
                var node = child;
                while (node) {
                  node.flags = node.flags & ~Placement | Hydrating;
                  node = node.sibling;
                }
              }
            } else {
              resetHydrationState();
              if (nextChildren === prevChildren) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError) {
            resetHydrationState();
            queueHydrationError(recoverableError);
            workInProgress2.flags |= ForceClientRender;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostComponent(current2, workInProgress2, renderLanes2) {
            pushHostContext(workInProgress2);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            var type4 = workInProgress2.type;
            var nextProps = workInProgress2.pendingProps;
            var prevProps = current2 !== null ? current2.memoizedProps : null;
            var nextChildren = nextProps.children;
            var isDirectTextChild = shouldSetTextContent(type4, nextProps);
            if (isDirectTextChild) {
              nextChildren = null;
            } else if (prevProps !== null && shouldSetTextContent(type4, prevProps)) {
              workInProgress2.flags |= ContentReset;
            }
            markRef(current2, workInProgress2);
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostText(current2, workInProgress2) {
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            return null;
          }
          function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var lazyComponent = elementType;
            var payload = lazyComponent._payload;
            var init2 = lazyComponent._init;
            var Component20 = init2(payload);
            workInProgress2.type = Component20;
            var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component20);
            var resolvedProps = resolveDefaultProps(Component20, props);
            var child;
            switch (resolvedTag) {
              case FunctionComponent: {
                {
                  validateFunctionComponentInDev(workInProgress2, Component20);
                  workInProgress2.type = Component20 = resolveFunctionForHotReloading(Component20);
                }
                child = updateFunctionComponent(null, workInProgress2, Component20, resolvedProps, renderLanes2);
                return child;
              }
              case ClassComponent: {
                {
                  workInProgress2.type = Component20 = resolveClassForHotReloading(Component20);
                }
                child = updateClassComponent(null, workInProgress2, Component20, resolvedProps, renderLanes2);
                return child;
              }
              case ForwardRef: {
                {
                  workInProgress2.type = Component20 = resolveForwardRefForHotReloading(Component20);
                }
                child = updateForwardRef(null, workInProgress2, Component20, resolvedProps, renderLanes2);
                return child;
              }
              case MemoComponent: {
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = Component20.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        resolvedProps,
                        // Resolved for outer only
                        "prop",
                        getComponentNameFromType(Component20)
                      );
                    }
                  }
                }
                child = updateMemoComponent(
                  null,
                  workInProgress2,
                  Component20,
                  resolveDefaultProps(Component20.type, resolvedProps),
                  // The inner type can have defaults too
                  renderLanes2
                );
                return child;
              }
            }
            var hint = "";
            {
              if (Component20 !== null && typeof Component20 === "object" && Component20.$$typeof === REACT_LAZY_TYPE) {
                hint = " Did you wrap a component in React.lazy() more than once?";
              }
            }
            throw new Error("Element type is invalid. Received a promise that resolves to: " + Component20 + ". " + ("Lazy element type must resolve to a class or function." + hint));
          }
          function mountIncompleteClassComponent(_current, workInProgress2, Component20, nextProps, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            workInProgress2.tag = ClassComponent;
            var hasContext;
            if (isContextProvider(Component20)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            constructClassInstance(workInProgress2, Component20, nextProps);
            mountClassInstance(workInProgress2, Component20, nextProps, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component20, true, hasContext, renderLanes2);
          }
          function mountIndeterminateComponent(_current, workInProgress2, Component20, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var context2;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component20, false);
              context2 = getMaskedContext(workInProgress2, unmaskedContext);
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var value;
            var hasId;
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              if (Component20.prototype && typeof Component20.prototype.render === "function") {
                var componentName = getComponentNameFromType(Component20) || "Unknown";
                if (!didWarnAboutBadClass[componentName]) {
                  error2("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                  didWarnAboutBadClass[componentName] = true;
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
              }
              setIsRendering(true);
              ReactCurrentOwner$1.current = workInProgress2;
              value = renderWithHooks(null, workInProgress2, Component20, props, context2, renderLanes2);
              hasId = checkDidRenderIdHook();
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            {
              if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
                var _componentName = getComponentNameFromType(Component20) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName]) {
                  error2("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                  didWarnAboutModulePatternComponent[_componentName] = true;
                }
              }
            }
            if (
              // Run these checks in production only if the flag is off.
              // Eventually we'll delete this branch altogether.
              typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0
            ) {
              {
                var _componentName2 = getComponentNameFromType(Component20) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName2]) {
                  error2("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                  didWarnAboutModulePatternComponent[_componentName2] = true;
                }
              }
              workInProgress2.tag = ClassComponent;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              var hasContext = false;
              if (isContextProvider(Component20)) {
                hasContext = true;
                pushContextProvider(workInProgress2);
              } else {
                hasContext = false;
              }
              workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
              initializeUpdateQueue(workInProgress2);
              adoptClassInstance(workInProgress2, value);
              mountClassInstance(workInProgress2, Component20, props, renderLanes2);
              return finishClassComponent(null, workInProgress2, Component20, true, hasContext, renderLanes2);
            } else {
              workInProgress2.tag = FunctionComponent;
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    value = renderWithHooks(null, workInProgress2, Component20, props, context2, renderLanes2);
                    hasId = checkDidRenderIdHook();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
              }
              if (getIsHydrating() && hasId) {
                pushMaterializedTreeId(workInProgress2);
              }
              reconcileChildren(null, workInProgress2, value, renderLanes2);
              {
                validateFunctionComponentInDev(workInProgress2, Component20);
              }
              return workInProgress2.child;
            }
          }
          function validateFunctionComponentInDev(workInProgress2, Component20) {
            {
              if (Component20) {
                if (Component20.childContextTypes) {
                  error2("%s(...): childContextTypes cannot be defined on a function component.", Component20.displayName || Component20.name || "Component");
                }
              }
              if (workInProgress2.ref !== null) {
                var info = "";
                var ownerName = getCurrentFiberOwnerNameInDevOrNull();
                if (ownerName) {
                  info += "\n\nCheck the render method of `" + ownerName + "`.";
                }
                var warningKey = ownerName || "";
                var debugSource = workInProgress2._debugSource;
                if (debugSource) {
                  warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
                }
                if (!didWarnAboutFunctionRefs[warningKey]) {
                  didWarnAboutFunctionRefs[warningKey] = true;
                  error2("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
                }
              }
              if (typeof Component20.getDerivedStateFromProps === "function") {
                var _componentName3 = getComponentNameFromType(Component20) || "Unknown";
                if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                  error2("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                  didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
                }
              }
              if (typeof Component20.contextType === "object" && Component20.contextType !== null) {
                var _componentName4 = getComponentNameFromType(Component20) || "Unknown";
                if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                  error2("%s: Function components do not support contextType.", _componentName4);
                  didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
                }
              }
            }
          }
          var SUSPENDED_MARKER = {
            dehydrated: null,
            treeContext: null,
            retryLane: NoLane
          };
          function mountSuspenseOffscreenState(renderLanes2) {
            return {
              baseLanes: renderLanes2,
              cachePool: getSuspendedCache(),
              transitions: null
            };
          }
          function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
            var cachePool = null;
            return {
              baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
              cachePool,
              transitions: prevOffscreenState.transitions
            };
          }
          function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              var suspenseState = current2.memoizedState;
              if (suspenseState === null) {
                return false;
              }
            }
            return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          }
          function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
            return removeLanes(current2.childLanes, renderLanes2);
          }
          function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            {
              if (shouldSuspend(workInProgress2)) {
                workInProgress2.flags |= DidCapture;
              }
            }
            var suspenseContext = suspenseStackCursor.current;
            var showFallback = false;
            var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
              showFallback = true;
              workInProgress2.flags &= ~DidCapture;
            } else {
              if (current2 === null || current2.memoizedState !== null) {
                {
                  suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
                }
              }
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            pushSuspenseContext(workInProgress2, suspenseContext);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
              var suspenseState = workInProgress2.memoizedState;
              if (suspenseState !== null) {
                var dehydrated = suspenseState.dehydrated;
                if (dehydrated !== null) {
                  return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
                }
              }
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var primaryChildFragment = workInProgress2.child;
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackFragment;
              } else {
                return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
              }
            } else {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                var _dehydrated = prevState.dehydrated;
                if (_dehydrated !== null) {
                  return updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, _dehydrated, prevState, renderLanes2);
                }
              }
              if (showFallback) {
                var _nextFallbackChildren = nextProps.fallback;
                var _nextPrimaryChildren = nextProps.children;
                var fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2);
                var _primaryChildFragment2 = workInProgress2.child;
                var prevOffscreenState = current2.child.memoizedState;
                _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
                _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              } else {
                var _nextPrimaryChildren2 = nextProps.children;
                var _primaryChildFragment3 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren2, renderLanes2);
                workInProgress2.memoizedState = null;
                return _primaryChildFragment3;
              }
            }
          }
          function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
            primaryChildFragment.return = workInProgress2;
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var progressedPrimaryFragment = workInProgress2.child;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            var fallbackChildFragment;
            if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = 0;
                primaryChildFragment.treeBaseDuration = 0;
              }
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            } else {
              primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            }
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes2) {
            return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
          }
          function updateWorkInProgressOffscreenFiber(current2, offscreenProps) {
            return createWorkInProgress(current2, offscreenProps);
          }
          function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
              mode: "visible",
              children: primaryChildren
            });
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              primaryChildFragment.lanes = renderLanes2;
            }
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = null;
            if (currentFallbackChildFragment !== null) {
              var deletions = workInProgress2.deletions;
              if (deletions === null) {
                workInProgress2.deletions = [currentFallbackChildFragment];
                workInProgress2.flags |= ChildDeletion;
              } else {
                deletions.push(currentFallbackChildFragment);
              }
            }
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            if (
              // In legacy mode, we commit the primary tree as if it successfully
              // completed, even though it's in an inconsistent state.
              (mode & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
              // already cloned. In legacy mode, the only case where this isn't true is
              // when DevTools forces us to display a fallback; we skip the first render
              // pass entirely and go straight to rendering the fallback. (In Concurrent
              // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
              // only codepath.)
              workInProgress2.child !== currentPrimaryChildFragment
            ) {
              var progressedPrimaryFragment = workInProgress2.child;
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
              }
              workInProgress2.deletions = null;
            } else {
              primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
              primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
            }
            var fallbackChildFragment;
            if (currentFallbackChildFragment !== null) {
              fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
            } else {
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
              fallbackChildFragment.flags |= Placement;
            }
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, recoverableError) {
            if (recoverableError !== null) {
              queueHydrationError(recoverableError);
            }
            reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            var nextProps = workInProgress2.pendingProps;
            var primaryChildren = nextProps.children;
            var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
            primaryChildFragment.flags |= Placement;
            workInProgress2.memoizedState = null;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var fiberMode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
            var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
            fallbackChildFragment.flags |= Placement;
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
              reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            }
            return fallbackChildFragment;
          }
          function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              {
                error2("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
              }
              workInProgress2.lanes = laneToLanes(SyncLane);
            } else if (isSuspenseInstanceFallback(suspenseInstance)) {
              workInProgress2.lanes = laneToLanes(DefaultHydrationLane);
            } else {
              workInProgress2.lanes = laneToLanes(OffscreenLane);
            }
            return null;
          }
          function updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes2) {
            if (!didSuspend) {
              warnIfHydrating();
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                return retrySuspenseComponentWithoutHydrating(
                  current2,
                  workInProgress2,
                  renderLanes2,
                  // TODO: When we delete legacy mode, we should make this error argument
                  // required — every concurrent mode path that causes hydration to
                  // de-opt to client rendering should have an error message.
                  null
                );
              }
              if (isSuspenseInstanceFallback(suspenseInstance)) {
                var digest, message, stack;
                {
                  var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
                  digest = _getSuspenseInstanceF.digest;
                  message = _getSuspenseInstanceF.message;
                  stack = _getSuspenseInstanceF.stack;
                }
                var error3;
                if (message) {
                  error3 = new Error(message);
                } else {
                  error3 = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
                }
                var capturedValue = createCapturedValue(error3, digest, stack);
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, capturedValue);
              }
              var hasContextChanged2 = includesSomeLane(renderLanes2, current2.childLanes);
              if (didReceiveUpdate || hasContextChanged2) {
                var root4 = getWorkInProgressRoot();
                if (root4 !== null) {
                  var attemptHydrationAtLane = getBumpedLaneForHydration(root4, renderLanes2);
                  if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                    suspenseState.retryLane = attemptHydrationAtLane;
                    var eventTime = NoTimestamp;
                    enqueueConcurrentRenderForLane(current2, attemptHydrationAtLane);
                    scheduleUpdateOnFiber(root4, current2, attemptHydrationAtLane, eventTime);
                  }
                }
                renderDidSuspendDelayIfPossible();
                var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue);
              } else if (isSuspenseInstancePending(suspenseInstance)) {
                workInProgress2.flags |= DidCapture;
                workInProgress2.child = current2.child;
                var retry = retryDehydratedSuspenseBoundary.bind(null, current2);
                registerSuspenseInstanceRetry(suspenseInstance, retry);
                return null;
              } else {
                reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
                var primaryChildren = nextProps.children;
                var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
                primaryChildFragment.flags |= Hydrating;
                return primaryChildFragment;
              }
            } else {
              if (workInProgress2.flags & ForceClientRender) {
                workInProgress2.flags &= ~ForceClientRender;
                var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue2);
              } else if (workInProgress2.memoizedState !== null) {
                workInProgress2.child = current2.child;
                workInProgress2.flags |= DidCapture;
                return null;
              } else {
                var nextPrimaryChildren = nextProps.children;
                var nextFallbackChildren = nextProps.fallback;
                var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var _primaryChildFragment4 = workInProgress2.child;
                _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              }
            }
          }
          function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
            fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
            }
            scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
          }
          function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
            var node = firstChild;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                  scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
                }
              } else if (node.tag === SuspenseListComponent) {
                scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === workInProgress2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          function findLastContentRow(firstChild) {
            var row = firstChild;
            var lastContentRow = null;
            while (row !== null) {
              var currentRow = row.alternate;
              if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                lastContentRow = row;
              }
              row = row.sibling;
            }
            return lastContentRow;
          }
          function validateRevealOrder(revealOrder) {
            {
              if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
                didWarnAboutRevealOrder[revealOrder] = true;
                if (typeof revealOrder === "string") {
                  switch (revealOrder.toLowerCase()) {
                    case "together":
                    case "forwards":
                    case "backwards": {
                      error2('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    case "forward":
                    case "backward": {
                      error2('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    default:
                      error2('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                      break;
                  }
                } else {
                  error2('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                }
              }
            }
          }
          function validateTailOptions(tailMode, revealOrder) {
            {
              if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
                if (tailMode !== "collapsed" && tailMode !== "hidden") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error2('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
                } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error2('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
                }
              }
            }
          }
          function validateSuspenseListNestedChild(childSlot, index3) {
            {
              var isAnArray = isArray2(childSlot);
              var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === "function";
              if (isAnArray || isIterable) {
                var type4 = isAnArray ? "array" : "iterable";
                error2("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type4, index3, type4);
                return false;
              }
            }
            return true;
          }
          function validateSuspenseListChildren(children, revealOrder) {
            {
              if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
                if (isArray2(children)) {
                  for (var i3 = 0; i3 < children.length; i3++) {
                    if (!validateSuspenseListNestedChild(children[i3], i3)) {
                      return;
                    }
                  }
                } else {
                  var iteratorFn = getIteratorFn(children);
                  if (typeof iteratorFn === "function") {
                    var childrenIterator = iteratorFn.call(children);
                    if (childrenIterator) {
                      var step = childrenIterator.next();
                      var _i = 0;
                      for (; !step.done; step = childrenIterator.next()) {
                        if (!validateSuspenseListNestedChild(step.value, _i)) {
                          return;
                        }
                        _i++;
                      }
                    }
                  } else {
                    error2('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                  }
                }
              }
            }
          }
          function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
            var renderState = workInProgress2.memoizedState;
            if (renderState === null) {
              workInProgress2.memoizedState = {
                isBackwards,
                rendering: null,
                renderingStartTime: 0,
                last: lastContentRow,
                tail,
                tailMode
              };
            } else {
              renderState.isBackwards = isBackwards;
              renderState.rendering = null;
              renderState.renderingStartTime = 0;
              renderState.last = lastContentRow;
              renderState.tail = tail;
              renderState.tailMode = tailMode;
            }
          }
          function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var revealOrder = nextProps.revealOrder;
            var tailMode = nextProps.tail;
            var newChildren = nextProps.children;
            validateRevealOrder(revealOrder);
            validateTailOptions(tailMode, revealOrder);
            validateSuspenseListChildren(newChildren, revealOrder);
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            var suspenseContext = suspenseStackCursor.current;
            var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
            if (shouldForceFallback) {
              suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
              workInProgress2.flags |= DidCapture;
            } else {
              var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
              if (didSuspendBefore) {
                propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
              }
              suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            }
            pushSuspenseContext(workInProgress2, suspenseContext);
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              workInProgress2.memoizedState = null;
            } else {
              switch (revealOrder) {
                case "forwards": {
                  var lastContentRow = findLastContentRow(workInProgress2.child);
                  var tail;
                  if (lastContentRow === null) {
                    tail = workInProgress2.child;
                    workInProgress2.child = null;
                  } else {
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    // isBackwards
                    tail,
                    lastContentRow,
                    tailMode
                  );
                  break;
                }
                case "backwards": {
                  var _tail = null;
                  var row = workInProgress2.child;
                  workInProgress2.child = null;
                  while (row !== null) {
                    var currentRow = row.alternate;
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                      workInProgress2.child = row;
                      break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    true,
                    // isBackwards
                    _tail,
                    null,
                    // last
                    tailMode
                  );
                  break;
                }
                case "together": {
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    // isBackwards
                    null,
                    // tail
                    null,
                    // last
                    void 0
                  );
                  break;
                }
                default: {
                  workInProgress2.memoizedState = null;
                }
              }
            }
            return workInProgress2.child;
          }
          function updatePortalComponent(current2, workInProgress2, renderLanes2) {
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            var nextChildren = workInProgress2.pendingProps;
            if (current2 === null) {
              workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
          function updateContextProvider(current2, workInProgress2, renderLanes2) {
            var providerType = workInProgress2.type;
            var context2 = providerType._context;
            var newProps = workInProgress2.pendingProps;
            var oldProps = workInProgress2.memoizedProps;
            var newValue = newProps.value;
            {
              if (!("value" in newProps)) {
                if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                  hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                  error2("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
                }
              }
              var providerPropTypes = workInProgress2.type.propTypes;
              if (providerPropTypes) {
                checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
              }
            }
            pushProvider(workInProgress2, context2, newValue);
            {
              if (oldProps !== null) {
                var oldValue = oldProps.value;
                if (objectIs(oldValue, newValue)) {
                  if (oldProps.children === newProps.children && !hasContextChanged()) {
                    return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                  }
                } else {
                  propagateContextChange(workInProgress2, context2, renderLanes2);
                }
              }
            }
            var newChildren = newProps.children;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingContextAsConsumer = false;
          function updateContextConsumer(current2, workInProgress2, renderLanes2) {
            var context2 = workInProgress2.type;
            {
              if (context2._context === void 0) {
                if (context2 !== context2.Consumer) {
                  if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error2("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                }
              } else {
                context2 = context2._context;
              }
            }
            var newProps = workInProgress2.pendingProps;
            var render3 = newProps.children;
            {
              if (typeof render3 !== "function") {
                error2("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
              }
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var newValue = readContext(context2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            var newChildren;
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              newChildren = render3(newValue);
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markWorkInProgressReceivedUpdate() {
            didReceiveUpdate = true;
          }
          function resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              if (current2 !== null) {
                current2.alternate = null;
                workInProgress2.alternate = null;
                workInProgress2.flags |= Placement;
              }
            }
          }
          function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              workInProgress2.dependencies = current2.dependencies;
            }
            {
              stopProfilerTimerIfRunning();
            }
            markSkippedUpdateLanes(workInProgress2.lanes);
            if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
              {
                return null;
              }
            }
            cloneChildFibers(current2, workInProgress2);
            return workInProgress2.child;
          }
          function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
            {
              var returnFiber = oldWorkInProgress.return;
              if (returnFiber === null) {
                throw new Error("Cannot swap the root fiber.");
              }
              current2.alternate = null;
              oldWorkInProgress.alternate = null;
              newWorkInProgress.index = oldWorkInProgress.index;
              newWorkInProgress.sibling = oldWorkInProgress.sibling;
              newWorkInProgress.return = oldWorkInProgress.return;
              newWorkInProgress.ref = oldWorkInProgress.ref;
              if (oldWorkInProgress === returnFiber.child) {
                returnFiber.child = newWorkInProgress;
              } else {
                var prevSibling = returnFiber.child;
                if (prevSibling === null) {
                  throw new Error("Expected parent to have a child.");
                }
                while (prevSibling.sibling !== oldWorkInProgress) {
                  prevSibling = prevSibling.sibling;
                  if (prevSibling === null) {
                    throw new Error("Expected to find the previous sibling.");
                  }
                }
                prevSibling.sibling = newWorkInProgress;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [current2];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(current2);
              }
              newWorkInProgress.flags |= Placement;
              return newWorkInProgress;
            }
          }
          function checkScheduledUpdateOrContext(current2, renderLanes2) {
            var updateLanes = current2.lanes;
            if (includesSomeLane(updateLanes, renderLanes2)) {
              return true;
            }
            return false;
          }
          function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
            switch (workInProgress2.tag) {
              case HostRoot:
                pushHostRootContext(workInProgress2);
                var root4 = workInProgress2.stateNode;
                resetHydrationState();
                break;
              case HostComponent:
                pushHostContext(workInProgress2);
                break;
              case ClassComponent: {
                var Component20 = workInProgress2.type;
                if (isContextProvider(Component20)) {
                  pushContextProvider(workInProgress2);
                }
                break;
              }
              case HostPortal:
                pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                break;
              case ContextProvider: {
                var newValue = workInProgress2.memoizedProps.value;
                var context2 = workInProgress2.type._context;
                pushProvider(workInProgress2, context2, newValue);
                break;
              }
              case Profiler:
                {
                  var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                  if (hasChildWork) {
                    workInProgress2.flags |= Update;
                  }
                  {
                    var stateNode = workInProgress2.stateNode;
                    stateNode.effectDuration = 0;
                    stateNode.passiveEffectDuration = 0;
                  }
                }
                break;
              case SuspenseComponent: {
                var state = workInProgress2.memoizedState;
                if (state !== null) {
                  if (state.dehydrated !== null) {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    workInProgress2.flags |= DidCapture;
                    return null;
                  }
                  var primaryChildFragment = workInProgress2.child;
                  var primaryChildLanes = primaryChildFragment.childLanes;
                  if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                    return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                  } else {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                    if (child !== null) {
                      return child.sibling;
                    } else {
                      return null;
                    }
                  }
                } else {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                }
                break;
              }
              case SuspenseListComponent: {
                var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
                var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                if (didSuspendBefore) {
                  if (_hasChildWork) {
                    return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                  }
                  workInProgress2.flags |= DidCapture;
                }
                var renderState = workInProgress2.memoizedState;
                if (renderState !== null) {
                  renderState.rendering = null;
                  renderState.tail = null;
                  renderState.lastEffect = null;
                }
                pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                if (_hasChildWork) {
                  break;
                } else {
                  return null;
                }
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                workInProgress2.lanes = NoLanes;
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          function beginWork(current2, workInProgress2, renderLanes2) {
            {
              if (workInProgress2._debugNeedsRemount && current2 !== null) {
                return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
              }
            }
            if (current2 !== null) {
              var oldProps = current2.memoizedProps;
              var newProps = workInProgress2.pendingProps;
              if (oldProps !== newProps || hasContextChanged() || // Force a re-render if the implementation changed due to hot reload:
              workInProgress2.type !== current2.type) {
                didReceiveUpdate = true;
              } else {
                var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
                if (!hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there
                // may not be work scheduled on `current`, so we check for this flag.
                (workInProgress2.flags & DidCapture) === NoFlags) {
                  didReceiveUpdate = false;
                  return attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2);
                }
                if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                } else {
                  didReceiveUpdate = false;
                }
              }
            } else {
              didReceiveUpdate = false;
              if (getIsHydrating() && isForkedChild(workInProgress2)) {
                var slotIndex = workInProgress2.index;
                var numberOfForks = getForksAtLevel();
                pushTreeId(workInProgress2, numberOfForks, slotIndex);
              }
            }
            workInProgress2.lanes = NoLanes;
            switch (workInProgress2.tag) {
              case IndeterminateComponent: {
                return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
              }
              case LazyComponent: {
                var elementType = workInProgress2.elementType;
                return mountLazyComponent(current2, workInProgress2, elementType, renderLanes2);
              }
              case FunctionComponent: {
                var Component20 = workInProgress2.type;
                var unresolvedProps = workInProgress2.pendingProps;
                var resolvedProps = workInProgress2.elementType === Component20 ? unresolvedProps : resolveDefaultProps(Component20, unresolvedProps);
                return updateFunctionComponent(current2, workInProgress2, Component20, resolvedProps, renderLanes2);
              }
              case ClassComponent: {
                var _Component = workInProgress2.type;
                var _unresolvedProps = workInProgress2.pendingProps;
                var _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
                return updateClassComponent(current2, workInProgress2, _Component, _resolvedProps, renderLanes2);
              }
              case HostRoot:
                return updateHostRoot(current2, workInProgress2, renderLanes2);
              case HostComponent:
                return updateHostComponent(current2, workInProgress2, renderLanes2);
              case HostText:
                return updateHostText(current2, workInProgress2);
              case SuspenseComponent:
                return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
              case HostPortal:
                return updatePortalComponent(current2, workInProgress2, renderLanes2);
              case ForwardRef: {
                var type4 = workInProgress2.type;
                var _unresolvedProps2 = workInProgress2.pendingProps;
                var _resolvedProps2 = workInProgress2.elementType === type4 ? _unresolvedProps2 : resolveDefaultProps(type4, _unresolvedProps2);
                return updateForwardRef(current2, workInProgress2, type4, _resolvedProps2, renderLanes2);
              }
              case Fragment29:
                return updateFragment(current2, workInProgress2, renderLanes2);
              case Mode:
                return updateMode(current2, workInProgress2, renderLanes2);
              case Profiler:
                return updateProfiler(current2, workInProgress2, renderLanes2);
              case ContextProvider:
                return updateContextProvider(current2, workInProgress2, renderLanes2);
              case ContextConsumer:
                return updateContextConsumer(current2, workInProgress2, renderLanes2);
              case MemoComponent: {
                var _type2 = workInProgress2.type;
                var _unresolvedProps3 = workInProgress2.pendingProps;
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        _resolvedProps3,
                        // Resolved for outer only
                        "prop",
                        getComponentNameFromType(_type2)
                      );
                    }
                  }
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, renderLanes2);
              }
              case SimpleMemoComponent: {
                return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
              }
              case IncompleteClassComponent: {
                var _Component2 = workInProgress2.type;
                var _unresolvedProps4 = workInProgress2.pendingProps;
                var _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
                return mountIncompleteClassComponent(current2, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
              }
              case SuspenseListComponent: {
                return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent: {
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function markUpdate(workInProgress2) {
            workInProgress2.flags |= Update;
          }
          function markRef$1(workInProgress2) {
            workInProgress2.flags |= Ref;
            {
              workInProgress2.flags |= RefStatic;
            }
          }
          var appendAllChildren;
          var updateHostContainer;
          var updateHostComponent$1;
          var updateHostText$1;
          {
            appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden2) {
              var node = workInProgress2.child;
              while (node !== null) {
                if (node.tag === HostComponent || node.tag === HostText) {
                  appendInitialChild(parent, node.stateNode);
                } else if (node.tag === HostPortal)
                  ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === workInProgress2) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === workInProgress2) {
                    return;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            };
            updateHostContainer = function(current2, workInProgress2) {
            };
            updateHostComponent$1 = function(current2, workInProgress2, type4, newProps, rootContainerInstance) {
              var oldProps = current2.memoizedProps;
              if (oldProps === newProps) {
                return;
              }
              var instance2 = workInProgress2.stateNode;
              var currentHostContext = getHostContext();
              var updatePayload = prepareUpdate(instance2, type4, oldProps, newProps, rootContainerInstance, currentHostContext);
              workInProgress2.updateQueue = updatePayload;
              if (updatePayload) {
                markUpdate(workInProgress2);
              }
            };
            updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
              if (oldText !== newText) {
                markUpdate(workInProgress2);
              }
            };
          }
          function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
            if (getIsHydrating()) {
              return;
            }
            switch (renderState.tailMode) {
              case "hidden": {
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while (tailNode !== null) {
                  if (tailNode.alternate !== null) {
                    lastTailNode = tailNode;
                  }
                  tailNode = tailNode.sibling;
                }
                if (lastTailNode === null) {
                  renderState.tail = null;
                } else {
                  lastTailNode.sibling = null;
                }
                break;
              }
              case "collapsed": {
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while (_tailNode !== null) {
                  if (_tailNode.alternate !== null) {
                    _lastTailNode = _tailNode;
                  }
                  _tailNode = _tailNode.sibling;
                }
                if (_lastTailNode === null) {
                  if (!hasRenderedATailFallback && renderState.tail !== null) {
                    renderState.tail.sibling = null;
                  } else {
                    renderState.tail = null;
                  }
                } else {
                  _lastTailNode.sibling = null;
                }
                break;
              }
            }
          }
          function bubbleProperties(completedWork) {
            var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
            var newChildLanes = NoLanes;
            var subtreeFlags = NoFlags;
            if (!didBailout) {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var actualDuration = completedWork.actualDuration;
                var treeBaseDuration = completedWork.selfBaseDuration;
                var child = completedWork.child;
                while (child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                  subtreeFlags |= child.subtreeFlags;
                  subtreeFlags |= child.flags;
                  actualDuration += child.actualDuration;
                  treeBaseDuration += child.treeBaseDuration;
                  child = child.sibling;
                }
                completedWork.actualDuration = actualDuration;
                completedWork.treeBaseDuration = treeBaseDuration;
              } else {
                var _child = completedWork.child;
                while (_child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                  subtreeFlags |= _child.subtreeFlags;
                  subtreeFlags |= _child.flags;
                  _child.return = completedWork;
                  _child = _child.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            } else {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var _treeBaseDuration = completedWork.selfBaseDuration;
                var _child2 = completedWork.child;
                while (_child2 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));
                  subtreeFlags |= _child2.subtreeFlags & StaticMask;
                  subtreeFlags |= _child2.flags & StaticMask;
                  _treeBaseDuration += _child2.treeBaseDuration;
                  _child2 = _child2.sibling;
                }
                completedWork.treeBaseDuration = _treeBaseDuration;
              } else {
                var _child3 = completedWork.child;
                while (_child3 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));
                  subtreeFlags |= _child3.subtreeFlags & StaticMask;
                  subtreeFlags |= _child3.flags & StaticMask;
                  _child3.return = completedWork;
                  _child3 = _child3.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            }
            completedWork.childLanes = newChildLanes;
            return didBailout;
          }
          function completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState) {
            if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags) {
              warnIfUnhydratedTailNodes(workInProgress2);
              resetHydrationState();
              workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture;
              return false;
            }
            var wasHydrated = popHydrationState(workInProgress2);
            if (nextState !== null && nextState.dehydrated !== null) {
              if (current2 === null) {
                if (!wasHydrated) {
                  throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
                }
                prepareToHydrateHostSuspenseInstance(workInProgress2);
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var isTimedOutSuspense = nextState !== null;
                    if (isTimedOutSuspense) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              } else {
                resetHydrationState();
                if ((workInProgress2.flags & DidCapture) === NoFlags) {
                  workInProgress2.memoizedState = null;
                }
                workInProgress2.flags |= Update;
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var _isTimedOutSuspense = nextState !== null;
                    if (_isTimedOutSuspense) {
                      var _primaryChildFragment = workInProgress2.child;
                      if (_primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              }
            } else {
              upgradeHydrationErrorsToRecoverable();
              return true;
            }
          }
          function completeWork(current2, workInProgress2, renderLanes2) {
            var newProps = workInProgress2.pendingProps;
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case LazyComponent:
              case SimpleMemoComponent:
              case FunctionComponent:
              case ForwardRef:
              case Fragment29:
              case Mode:
              case Profiler:
              case ContextConsumer:
              case MemoComponent:
                bubbleProperties(workInProgress2);
                return null;
              case ClassComponent: {
                var Component20 = workInProgress2.type;
                if (isContextProvider(Component20)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostRoot: {
                var fiberRoot = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                if (fiberRoot.pendingContext) {
                  fiberRoot.context = fiberRoot.pendingContext;
                  fiberRoot.pendingContext = null;
                }
                if (current2 === null || current2.child === null) {
                  var wasHydrated = popHydrationState(workInProgress2);
                  if (wasHydrated) {
                    markUpdate(workInProgress2);
                  } else {
                    if (current2 !== null) {
                      var prevState = current2.memoizedState;
                      if (
                        // Check if this is a client root
                        !prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)
                        (workInProgress2.flags & ForceClientRender) !== NoFlags
                      ) {
                        workInProgress2.flags |= Snapshot;
                        upgradeHydrationErrorsToRecoverable();
                      }
                    }
                  }
                }
                updateHostContainer(current2, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                var rootContainerInstance = getRootHostContainer();
                var type4 = workInProgress2.type;
                if (current2 !== null && workInProgress2.stateNode != null) {
                  updateHostComponent$1(current2, workInProgress2, type4, newProps, rootContainerInstance);
                  if (current2.ref !== workInProgress2.ref) {
                    markRef$1(workInProgress2);
                  }
                } else {
                  if (!newProps) {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    bubbleProperties(workInProgress2);
                    return null;
                  }
                  var currentHostContext = getHostContext();
                  var _wasHydrated = popHydrationState(workInProgress2);
                  if (_wasHydrated) {
                    if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    var instance2 = createInstance2(type4, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                    appendAllChildren(instance2, workInProgress2, false, false);
                    workInProgress2.stateNode = instance2;
                    if (finalizeInitialChildren(instance2, type4, newProps, rootContainerInstance)) {
                      markUpdate(workInProgress2);
                    }
                  }
                  if (workInProgress2.ref !== null) {
                    markRef$1(workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostText: {
                var newText = newProps;
                if (current2 && workInProgress2.stateNode != null) {
                  var oldText = current2.memoizedProps;
                  updateHostText$1(current2, workInProgress2, oldText, newText);
                } else {
                  if (typeof newText !== "string") {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                  var _rootContainerInstance = getRootHostContainer();
                  var _currentHostContext = getHostContext();
                  var _wasHydrated2 = popHydrationState(workInProgress2);
                  if (_wasHydrated2) {
                    if (prepareToHydrateHostTextInstance(workInProgress2)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var nextState = workInProgress2.memoizedState;
                if (current2 === null || current2.memoizedState !== null && current2.memoizedState.dehydrated !== null) {
                  var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState);
                  if (!fallthroughToNormalSuspensePath) {
                    if (workInProgress2.flags & ShouldCapture) {
                      return workInProgress2;
                    } else {
                      return null;
                    }
                  }
                }
                if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                  workInProgress2.lanes = renderLanes2;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = current2 !== null && current2.memoizedState !== null;
                if (nextDidTimeout !== prevDidTimeout) {
                  if (nextDidTimeout) {
                    var _offscreenFiber2 = workInProgress2.child;
                    _offscreenFiber2.flags |= Visibility;
                    if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
                      var hasInvisibleChildContext = current2 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                      if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                        renderDidSuspend();
                      } else {
                        renderDidSuspendDelayIfPossible();
                      }
                    }
                  }
                }
                var wakeables = workInProgress2.updateQueue;
                if (wakeables !== null) {
                  workInProgress2.flags |= Update;
                }
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    if (nextDidTimeout) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                updateHostContainer(current2, workInProgress2);
                if (current2 === null) {
                  preparePortalMount(workInProgress2.stateNode.containerInfo);
                }
                bubbleProperties(workInProgress2);
                return null;
              case ContextProvider:
                var context2 = workInProgress2.type._context;
                popProvider(context2, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              case IncompleteClassComponent: {
                var _Component = workInProgress2.type;
                if (isContextProvider(_Component)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                var renderState = workInProgress2.memoizedState;
                if (renderState === null) {
                  bubbleProperties(workInProgress2);
                  return null;
                }
                var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                  if (!didSuspendAlready) {
                    var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                    if (!cannotBeSuspended) {
                      var row = workInProgress2.child;
                      while (row !== null) {
                        var suspended = findFirstSuspended(row);
                        if (suspended !== null) {
                          didSuspendAlready = true;
                          workInProgress2.flags |= DidCapture;
                          cutOffTailIfNeeded(renderState, false);
                          var newThenables = suspended.updateQueue;
                          if (newThenables !== null) {
                            workInProgress2.updateQueue = newThenables;
                            workInProgress2.flags |= Update;
                          }
                          workInProgress2.subtreeFlags = NoFlags;
                          resetChildFibers(workInProgress2, renderLanes2);
                          pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                          return workInProgress2.child;
                        }
                        row = row.sibling;
                      }
                    }
                    if (renderState.tail !== null && now2() > getRenderTargetTime()) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  } else {
                    cutOffTailIfNeeded(renderState, false);
                  }
                } else {
                  if (!didSuspendAlready) {
                    var _suspended = findFirstSuspended(renderedTail);
                    if (_suspended !== null) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      var _newThenables = _suspended.updateQueue;
                      if (_newThenables !== null) {
                        workInProgress2.updateQueue = _newThenables;
                        workInProgress2.flags |= Update;
                      }
                      cutOffTailIfNeeded(renderState, true);
                      if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                        bubbleProperties(workInProgress2);
                        return null;
                      }
                    } else if (
                      // The time it took to render last row is greater than the remaining
                      // time we have to render. So rendering one more row would likely
                      // exceed it.
                      now2() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane
                    ) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  }
                  if (renderState.isBackwards) {
                    renderedTail.sibling = workInProgress2.child;
                    workInProgress2.child = renderedTail;
                  } else {
                    var previousSibling = renderState.last;
                    if (previousSibling !== null) {
                      previousSibling.sibling = renderedTail;
                    } else {
                      workInProgress2.child = renderedTail;
                    }
                    renderState.last = renderedTail;
                  }
                }
                if (renderState.tail !== null) {
                  var next = renderState.tail;
                  renderState.rendering = next;
                  renderState.tail = next.sibling;
                  renderState.renderingStartTime = now2();
                  next.sibling = null;
                  var suspenseContext = suspenseStackCursor.current;
                  if (didSuspendAlready) {
                    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                  } else {
                    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                  }
                  pushSuspenseContext(workInProgress2, suspenseContext);
                  return next;
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                popRenderLanes(workInProgress2);
                var _nextState = workInProgress2.memoizedState;
                var nextIsHidden = _nextState !== null;
                if (current2 !== null) {
                  var _prevState = current2.memoizedState;
                  var prevIsHidden = _prevState !== null;
                  if (prevIsHidden !== nextIsHidden && // LegacyHidden doesn't do any hiding — it only pre-renders.
                  !enableLegacyHidden) {
                    workInProgress2.flags |= Visibility;
                  }
                }
                if (!nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode) {
                  bubbleProperties(workInProgress2);
                } else {
                  if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
                    bubbleProperties(workInProgress2);
                    {
                      if (workInProgress2.subtreeFlags & (Placement | Update)) {
                        workInProgress2.flags |= Visibility;
                      }
                    }
                  }
                }
                return null;
              }
              case CacheComponent: {
                return null;
              }
              case TracingMarkerComponent: {
                return null;
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function unwindWork(current2, workInProgress2, renderLanes2) {
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case ClassComponent: {
                var Component20 = workInProgress2.type;
                if (isContextProvider(Component20)) {
                  popContext(workInProgress2);
                }
                var flags = workInProgress2.flags;
                if (flags & ShouldCapture) {
                  workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case HostRoot: {
                var root4 = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                var _flags = workInProgress2.flags;
                if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
                  workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                  return workInProgress2;
                }
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var suspenseState = workInProgress2.memoizedState;
                if (suspenseState !== null && suspenseState.dehydrated !== null) {
                  if (workInProgress2.alternate === null) {
                    throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
                  }
                  resetHydrationState();
                }
                var _flags2 = workInProgress2.flags;
                if (_flags2 & ShouldCapture) {
                  workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                return null;
              case ContextProvider:
                var context2 = workInProgress2.type._context;
                popProvider(context2, workInProgress2);
                return null;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(workInProgress2);
                return null;
              case CacheComponent:
                return null;
              default:
                return null;
            }
          }
          function unwindInterruptedWork(current2, interruptedWork, renderLanes2) {
            popTreeContext(interruptedWork);
            switch (interruptedWork.tag) {
              case ClassComponent: {
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== void 0) {
                  popContext(interruptedWork);
                }
                break;
              }
              case HostRoot: {
                var root4 = interruptedWork.stateNode;
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
              }
              case HostComponent: {
                popHostContext(interruptedWork);
                break;
              }
              case HostPortal:
                popHostContainer(interruptedWork);
                break;
              case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
              case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
              case ContextProvider:
                var context2 = interruptedWork.type._context;
                popProvider(context2, interruptedWork);
                break;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(interruptedWork);
                break;
            }
          }
          var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
          {
            didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
          }
          var offscreenSubtreeIsHidden = false;
          var offscreenSubtreeWasHidden = false;
          var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
          var nextEffect = null;
          var inProgressLanes = null;
          var inProgressRoot = null;
          function reportUncaughtErrorInDEV(error3) {
            {
              invokeGuardedCallback(null, function() {
                throw error3;
              });
              clearCaughtError();
            }
          }
          var callComponentWillUnmountWithTimer = function(current2, instance2) {
            instance2.props = current2.memoizedProps;
            instance2.state = current2.memoizedState;
            if (current2.mode & ProfileMode) {
              try {
                startLayoutEffectTimer();
                instance2.componentWillUnmount();
              } finally {
                recordLayoutEffectDuration(current2);
              }
            } else {
              instance2.componentWillUnmount();
            }
          };
          function safelyCallCommitHookLayoutEffectListMount(current2, nearestMountedAncestor) {
            try {
              commitHookEffectListMount(Layout3, current2);
            } catch (error3) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error3);
            }
          }
          function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance2) {
            try {
              callComponentWillUnmountWithTimer(current2, instance2);
            } catch (error3) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error3);
            }
          }
          function safelyCallComponentDidMount(current2, nearestMountedAncestor, instance2) {
            try {
              instance2.componentDidMount();
            } catch (error3) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error3);
            }
          }
          function safelyAttachRef(current2, nearestMountedAncestor) {
            try {
              commitAttachRef(current2);
            } catch (error3) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error3);
            }
          }
          function safelyDetachRef(current2, nearestMountedAncestor) {
            var ref = current2.ref;
            if (ref !== null) {
              if (typeof ref === "function") {
                var retVal;
                try {
                  if (enableProfilerTimer && enableProfilerCommitHooks && current2.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      retVal = ref(null);
                    } finally {
                      recordLayoutEffectDuration(current2);
                    }
                  } else {
                    retVal = ref(null);
                  }
                } catch (error3) {
                  captureCommitPhaseError(current2, nearestMountedAncestor, error3);
                }
                {
                  if (typeof retVal === "function") {
                    error2("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current2));
                  }
                }
              } else {
                ref.current = null;
              }
            }
          }
          function safelyCallDestroy(current2, nearestMountedAncestor, destroy3) {
            try {
              destroy3();
            } catch (error3) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error3);
            }
          }
          var focusedInstanceHandle = null;
          var shouldFireAfterActiveInstanceBlur = false;
          function commitBeforeMutationEffects(root4, firstChild) {
            focusedInstanceHandle = prepareForCommit(root4.containerInfo);
            nextEffect = firstChild;
            commitBeforeMutationEffects_begin();
            var shouldFire = shouldFireAfterActiveInstanceBlur;
            shouldFireAfterActiveInstanceBlur = false;
            focusedInstanceHandle = null;
            return shouldFire;
          }
          function commitBeforeMutationEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitBeforeMutationEffects_complete();
              }
            }
          }
          function commitBeforeMutationEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                commitBeforeMutationEffectsOnFiber(fiber);
              } catch (error3) {
                captureCommitPhaseError(fiber, fiber.return, error3);
              }
              resetCurrentFiber();
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitBeforeMutationEffectsOnFiber(finishedWork) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            if ((flags & Snapshot) !== NoFlags) {
              setCurrentFiber(finishedWork);
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  break;
                }
                case ClassComponent: {
                  if (current2 !== null) {
                    var prevProps = current2.memoizedProps;
                    var prevState = current2.memoizedState;
                    var instance2 = finishedWork.stateNode;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance2.props !== finishedWork.memoizedProps) {
                          error2("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance2.state !== finishedWork.memoizedState) {
                          error2("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    var snapshot = instance2.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                    {
                      var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                      if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                        didWarnSet.add(finishedWork.type);
                        error2("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                      }
                    }
                    instance2.__reactInternalSnapshotBeforeUpdate = snapshot;
                  }
                  break;
                }
                case HostRoot: {
                  {
                    var root4 = finishedWork.stateNode;
                    clearContainer(root4.containerInfo);
                  }
                  break;
                }
                case HostComponent:
                case HostText:
                case HostPortal:
                case IncompleteClassComponent:
                  break;
                default: {
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              resetCurrentFiber();
            }
          }
          function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & flags) === flags) {
                  var destroy3 = effect.destroy;
                  effect.destroy = void 0;
                  if (destroy3 !== void 0) {
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStarted(finishedWork);
                      } else if ((flags & Layout3) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStarted(finishedWork);
                      }
                    }
                    {
                      if ((flags & Insertion) !== NoFlags$1) {
                        setIsRunningInsertionEffect(true);
                      }
                    }
                    safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy3);
                    {
                      if ((flags & Insertion) !== NoFlags$1) {
                        setIsRunningInsertionEffect(false);
                      }
                    }
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStopped();
                      } else if ((flags & Layout3) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStopped();
                      }
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitHookEffectListMount(flags, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & flags) === flags) {
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStarted(finishedWork);
                    } else if ((flags & Layout3) !== NoFlags$1) {
                      markComponentLayoutEffectMountStarted(finishedWork);
                    }
                  }
                  var create = effect.create;
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(true);
                    }
                  }
                  effect.destroy = create();
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(false);
                    }
                  }
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStopped();
                    } else if ((flags & Layout3) !== NoFlags$1) {
                      markComponentLayoutEffectMountStopped();
                    }
                  }
                  {
                    var destroy3 = effect.destroy;
                    if (destroy3 !== void 0 && typeof destroy3 !== "function") {
                      var hookName = void 0;
                      if ((effect.tag & Layout3) !== NoFlags) {
                        hookName = "useLayoutEffect";
                      } else if ((effect.tag & Insertion) !== NoFlags) {
                        hookName = "useInsertionEffect";
                      } else {
                        hookName = "useEffect";
                      }
                      var addendum = void 0;
                      if (destroy3 === null) {
                        addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                      } else if (typeof destroy3.then === "function") {
                        addendum = "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                      } else {
                        addendum = " You returned: " + destroy3;
                      }
                      error2("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitPassiveEffectDurations(finishedRoot, finishedWork) {
            {
              if ((finishedWork.flags & Update) !== NoFlags) {
                switch (finishedWork.tag) {
                  case Profiler: {
                    var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                    var _finishedWork$memoize = finishedWork.memoizedProps, id2 = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
                    var commitTime2 = getCommitTime();
                    var phase = finishedWork.alternate === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onPostCommit === "function") {
                      onPostCommit(id2, phase, passiveEffectDuration, commitTime2);
                    }
                    var parentFiber = finishedWork.return;
                    outer:
                      while (parentFiber !== null) {
                        switch (parentFiber.tag) {
                          case HostRoot:
                            var root4 = parentFiber.stateNode;
                            root4.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                          case Profiler:
                            var parentStateNode = parentFiber.stateNode;
                            parentStateNode.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                        }
                        parentFiber = parentFiber.return;
                      }
                    break;
                  }
                }
              }
            }
          }
          function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork, committedLanes) {
            if ((finishedWork.flags & LayoutMask) !== NoFlags) {
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  if (!offscreenSubtreeWasHidden) {
                    if (finishedWork.mode & ProfileMode) {
                      try {
                        startLayoutEffectTimer();
                        commitHookEffectListMount(Layout3 | HasEffect, finishedWork);
                      } finally {
                        recordLayoutEffectDuration(finishedWork);
                      }
                    } else {
                      commitHookEffectListMount(Layout3 | HasEffect, finishedWork);
                    }
                  }
                  break;
                }
                case ClassComponent: {
                  var instance2 = finishedWork.stateNode;
                  if (finishedWork.flags & Update) {
                    if (!offscreenSubtreeWasHidden) {
                      if (current2 === null) {
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance2.props !== finishedWork.memoizedProps) {
                              error2("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance2.state !== finishedWork.memoizedState) {
                              error2("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance2.componentDidMount();
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance2.componentDidMount();
                        }
                      } else {
                        var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                        var prevState = current2.memoizedState;
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance2.props !== finishedWork.memoizedProps) {
                              error2("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance2.state !== finishedWork.memoizedState) {
                              error2("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance2.componentDidUpdate(prevProps, prevState, instance2.__reactInternalSnapshotBeforeUpdate);
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance2.componentDidUpdate(prevProps, prevState, instance2.__reactInternalSnapshotBeforeUpdate);
                        }
                      }
                    }
                  }
                  var updateQueue = finishedWork.updateQueue;
                  if (updateQueue !== null) {
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance2.props !== finishedWork.memoizedProps) {
                          error2("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance2.state !== finishedWork.memoizedState) {
                          error2("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    commitUpdateQueue(finishedWork, updateQueue, instance2);
                  }
                  break;
                }
                case HostRoot: {
                  var _updateQueue = finishedWork.updateQueue;
                  if (_updateQueue !== null) {
                    var _instance = null;
                    if (finishedWork.child !== null) {
                      switch (finishedWork.child.tag) {
                        case HostComponent:
                          _instance = getPublicInstance(finishedWork.child.stateNode);
                          break;
                        case ClassComponent:
                          _instance = finishedWork.child.stateNode;
                          break;
                      }
                    }
                    commitUpdateQueue(finishedWork, _updateQueue, _instance);
                  }
                  break;
                }
                case HostComponent: {
                  var _instance2 = finishedWork.stateNode;
                  if (current2 === null && finishedWork.flags & Update) {
                    var type4 = finishedWork.type;
                    var props = finishedWork.memoizedProps;
                    commitMount(_instance2, type4, props);
                  }
                  break;
                }
                case HostText: {
                  break;
                }
                case HostPortal: {
                  break;
                }
                case Profiler: {
                  {
                    var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                    var effectDuration = finishedWork.stateNode.effectDuration;
                    var commitTime2 = getCommitTime();
                    var phase = current2 === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onRender === "function") {
                      onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
                    }
                    {
                      if (typeof onCommit === "function") {
                        onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2);
                      }
                      enqueuePendingPassiveProfilerEffect(finishedWork);
                      var parentFiber = finishedWork.return;
                      outer:
                        while (parentFiber !== null) {
                          switch (parentFiber.tag) {
                            case HostRoot:
                              var root4 = parentFiber.stateNode;
                              root4.effectDuration += effectDuration;
                              break outer;
                            case Profiler:
                              var parentStateNode = parentFiber.stateNode;
                              parentStateNode.effectDuration += effectDuration;
                              break outer;
                          }
                          parentFiber = parentFiber.return;
                        }
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                  break;
                }
                case SuspenseListComponent:
                case IncompleteClassComponent:
                case ScopeComponent:
                case OffscreenComponent:
                case LegacyHiddenComponent:
                case TracingMarkerComponent: {
                  break;
                }
                default:
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (!offscreenSubtreeWasHidden) {
              {
                if (finishedWork.flags & Ref) {
                  commitAttachRef(finishedWork);
                }
              }
            }
          }
          function reappearLayoutEffectsOnFiber(node) {
            switch (node.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (node.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    safelyCallCommitHookLayoutEffectListMount(node, node.return);
                  } finally {
                    recordLayoutEffectDuration(node);
                  }
                } else {
                  safelyCallCommitHookLayoutEffectListMount(node, node.return);
                }
                break;
              }
              case ClassComponent: {
                var instance2 = node.stateNode;
                if (typeof instance2.componentDidMount === "function") {
                  safelyCallComponentDidMount(node, node.return, instance2);
                }
                safelyAttachRef(node, node.return);
                break;
              }
              case HostComponent: {
                safelyAttachRef(node, node.return);
                break;
              }
            }
          }
          function hideOrUnhideAllChildren(finishedWork, isHidden2) {
            var hostSubtreeRoot = null;
            {
              var node = finishedWork;
              while (true) {
                if (node.tag === HostComponent) {
                  if (hostSubtreeRoot === null) {
                    hostSubtreeRoot = node;
                    try {
                      var instance2 = node.stateNode;
                      if (isHidden2) {
                        hideInstance(instance2);
                      } else {
                        unhideInstance(node.stateNode, node.memoizedProps);
                      }
                    } catch (error3) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error3);
                    }
                  }
                } else if (node.tag === HostText) {
                  if (hostSubtreeRoot === null) {
                    try {
                      var _instance3 = node.stateNode;
                      if (isHidden2) {
                        hideTextInstance(_instance3);
                      } else {
                        unhideTextInstance(_instance3, node.memoizedProps);
                      }
                    } catch (error3) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error3);
                    }
                  }
                } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork)
                  ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === finishedWork) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === finishedWork) {
                    return;
                  }
                  if (hostSubtreeRoot === node) {
                    hostSubtreeRoot = null;
                  }
                  node = node.return;
                }
                if (hostSubtreeRoot === node) {
                  hostSubtreeRoot = null;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
          }
          function commitAttachRef(finishedWork) {
            var ref = finishedWork.ref;
            if (ref !== null) {
              var instance2 = finishedWork.stateNode;
              var instanceToUse;
              switch (finishedWork.tag) {
                case HostComponent:
                  instanceToUse = getPublicInstance(instance2);
                  break;
                default:
                  instanceToUse = instance2;
              }
              if (typeof ref === "function") {
                var retVal;
                if (finishedWork.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    retVal = ref(instanceToUse);
                  } finally {
                    recordLayoutEffectDuration(finishedWork);
                  }
                } else {
                  retVal = ref(instanceToUse);
                }
                {
                  if (typeof retVal === "function") {
                    error2("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
                  }
                }
              } else {
                {
                  if (!ref.hasOwnProperty("current")) {
                    error2("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
                  }
                }
                ref.current = instanceToUse;
              }
            }
          }
          function detachFiberMutation(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.return = null;
            }
            fiber.return = null;
          }
          function detachFiberAfterEffects(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              fiber.alternate = null;
              detachFiberAfterEffects(alternate);
            }
            {
              fiber.child = null;
              fiber.deletions = null;
              fiber.sibling = null;
              if (fiber.tag === HostComponent) {
                var hostInstance = fiber.stateNode;
                if (hostInstance !== null) {
                  detachDeletedInstance(hostInstance);
                }
              }
              fiber.stateNode = null;
              {
                fiber._debugOwner = null;
              }
              {
                fiber.return = null;
                fiber.dependencies = null;
                fiber.memoizedProps = null;
                fiber.memoizedState = null;
                fiber.pendingProps = null;
                fiber.stateNode = null;
                fiber.updateQueue = null;
              }
            }
          }
          function getHostParentFiber(fiber) {
            var parent = fiber.return;
            while (parent !== null) {
              if (isHostParent(parent)) {
                return parent;
              }
              parent = parent.return;
            }
            throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
          }
          function isHostParent(fiber) {
            return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
          }
          function getHostSibling(fiber) {
            var node = fiber;
            siblings:
              while (true) {
                while (node.sibling === null) {
                  if (node.return === null || isHostParent(node.return)) {
                    return null;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
                while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
                  if (node.flags & Placement) {
                    continue siblings;
                  }
                  if (node.child === null || node.tag === HostPortal) {
                    continue siblings;
                  } else {
                    node.child.return = node;
                    node = node.child;
                  }
                }
                if (!(node.flags & Placement)) {
                  return node.stateNode;
                }
              }
          }
          function commitPlacement(finishedWork) {
            var parentFiber = getHostParentFiber(finishedWork);
            switch (parentFiber.tag) {
              case HostComponent: {
                var parent = parentFiber.stateNode;
                if (parentFiber.flags & ContentReset) {
                  resetTextContent(parent);
                  parentFiber.flags &= ~ContentReset;
                }
                var before = getHostSibling(finishedWork);
                insertOrAppendPlacementNode(finishedWork, before, parent);
                break;
              }
              case HostRoot:
              case HostPortal: {
                var _parent = parentFiber.stateNode.containerInfo;
                var _before = getHostSibling(finishedWork);
                insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
                break;
              }
              default:
                throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node.stateNode;
              if (before) {
                insertInContainerBefore(parent, stateNode, before);
              } else {
                appendChildToContainer(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function insertOrAppendPlacementNode(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node.stateNode;
              if (before) {
                insertBefore(parent, stateNode, before);
              } else {
                appendChild(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNode(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          var hostParent = null;
          var hostParentIsContainer = false;
          function commitDeletionEffects(root4, returnFiber, deletedFiber) {
            {
              var parent = returnFiber;
              findParent:
                while (parent !== null) {
                  switch (parent.tag) {
                    case HostComponent: {
                      hostParent = parent.stateNode;
                      hostParentIsContainer = false;
                      break findParent;
                    }
                    case HostRoot: {
                      hostParent = parent.stateNode.containerInfo;
                      hostParentIsContainer = true;
                      break findParent;
                    }
                    case HostPortal: {
                      hostParent = parent.stateNode.containerInfo;
                      hostParentIsContainer = true;
                      break findParent;
                    }
                  }
                  parent = parent.return;
                }
              if (hostParent === null) {
                throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
              }
              commitDeletionEffectsOnFiber(root4, returnFiber, deletedFiber);
              hostParent = null;
              hostParentIsContainer = false;
            }
            detachFiberMutation(deletedFiber);
          }
          function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
            var child = parent.child;
            while (child !== null) {
              commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
              child = child.sibling;
            }
          }
          function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
            onCommitUnmount(deletedFiber);
            switch (deletedFiber.tag) {
              case HostComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                }
              }
              case HostText: {
                {
                  var prevHostParent = hostParent;
                  var prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = prevHostParent;
                  hostParentIsContainer = prevHostParentIsContainer;
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      removeChildFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      removeChild(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case DehydratedFragment: {
                {
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                {
                  var _prevHostParent = hostParent;
                  var _prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = deletedFiber.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = _prevHostParent;
                  hostParentIsContainer = _prevHostParentIsContainer;
                }
                return;
              }
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                if (!offscreenSubtreeWasHidden) {
                  var updateQueue = deletedFiber.updateQueue;
                  if (updateQueue !== null) {
                    var lastEffect = updateQueue.lastEffect;
                    if (lastEffect !== null) {
                      var firstEffect = lastEffect.next;
                      var effect = firstEffect;
                      do {
                        var _effect = effect, destroy3 = _effect.destroy, tag = _effect.tag;
                        if (destroy3 !== void 0) {
                          if ((tag & Insertion) !== NoFlags$1) {
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy3);
                          } else if ((tag & Layout3) !== NoFlags$1) {
                            {
                              markComponentLayoutEffectUnmountStarted(deletedFiber);
                            }
                            if (deletedFiber.mode & ProfileMode) {
                              startLayoutEffectTimer();
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy3);
                              recordLayoutEffectDuration(deletedFiber);
                            } else {
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy3);
                            }
                            {
                              markComponentLayoutEffectUnmountStopped();
                            }
                          }
                        }
                        effect = effect.next;
                      } while (effect !== firstEffect);
                    }
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ClassComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                  var instance2 = deletedFiber.stateNode;
                  if (typeof instance2.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance2);
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ScopeComponent: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case OffscreenComponent: {
                if (
                  // TODO: Remove this dead flag
                  deletedFiber.mode & ConcurrentMode
                ) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                }
                break;
              }
              default: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
            }
          }
          function commitSuspenseCallback(finishedWork) {
            var newState = finishedWork.memoizedState;
          }
          function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState === null) {
              var current2 = finishedWork.alternate;
              if (current2 !== null) {
                var prevState = current2.memoizedState;
                if (prevState !== null) {
                  var suspenseInstance = prevState.dehydrated;
                  if (suspenseInstance !== null) {
                    commitHydratedSuspenseInstance(suspenseInstance);
                  }
                }
              }
            }
          }
          function attachSuspenseRetryListeners(finishedWork) {
            var wakeables = finishedWork.updateQueue;
            if (wakeables !== null) {
              finishedWork.updateQueue = null;
              var retryCache = finishedWork.stateNode;
              if (retryCache === null) {
                retryCache = finishedWork.stateNode = new PossiblyWeakSet();
              }
              wakeables.forEach(function(wakeable) {
                var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                if (!retryCache.has(wakeable)) {
                  retryCache.add(wakeable);
                  {
                    if (isDevToolsPresent) {
                      if (inProgressLanes !== null && inProgressRoot !== null) {
                        restorePendingUpdaters(inProgressRoot, inProgressLanes);
                      } else {
                        throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                      }
                    }
                  }
                  wakeable.then(retry, retry);
                }
              });
            }
          }
          function commitMutationEffects(root4, finishedWork, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root4;
            setCurrentFiber(finishedWork);
            commitMutationEffectsOnFiber(finishedWork, root4);
            setCurrentFiber(finishedWork);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function recursivelyTraverseMutationEffects(root4, parentFiber, lanes) {
            var deletions = parentFiber.deletions;
            if (deletions !== null) {
              for (var i3 = 0; i3 < deletions.length; i3++) {
                var childToDelete = deletions[i3];
                try {
                  commitDeletionEffects(root4, parentFiber, childToDelete);
                } catch (error3) {
                  captureCommitPhaseError(childToDelete, parentFiber, error3);
                }
              }
            }
            var prevDebugFiber = getCurrentFiber();
            if (parentFiber.subtreeFlags & MutationMask) {
              var child = parentFiber.child;
              while (child !== null) {
                setCurrentFiber(child);
                commitMutationEffectsOnFiber(child, root4);
                child = child.sibling;
              }
            }
            setCurrentFiber(prevDebugFiber);
          }
          function commitMutationEffectsOnFiber(finishedWork, root4, lanes) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                recursivelyTraverseMutationEffects(root4, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  try {
                    commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);
                    commitHookEffectListMount(Insertion | HasEffect, finishedWork);
                  } catch (error3) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error3);
                  }
                  if (finishedWork.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout3 | HasEffect, finishedWork, finishedWork.return);
                    } catch (error3) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error3);
                    }
                    recordLayoutEffectDuration(finishedWork);
                  } else {
                    try {
                      commitHookEffectListUnmount(Layout3 | HasEffect, finishedWork, finishedWork.return);
                    } catch (error3) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error3);
                    }
                  }
                }
                return;
              }
              case ClassComponent: {
                recursivelyTraverseMutationEffects(root4, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                return;
              }
              case HostComponent: {
                recursivelyTraverseMutationEffects(root4, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                {
                  if (finishedWork.flags & ContentReset) {
                    var instance2 = finishedWork.stateNode;
                    try {
                      resetTextContent(instance2);
                    } catch (error3) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error3);
                    }
                  }
                  if (flags & Update) {
                    var _instance4 = finishedWork.stateNode;
                    if (_instance4 != null) {
                      var newProps = finishedWork.memoizedProps;
                      var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                      var type4 = finishedWork.type;
                      var updatePayload = finishedWork.updateQueue;
                      finishedWork.updateQueue = null;
                      if (updatePayload !== null) {
                        try {
                          commitUpdate(_instance4, updatePayload, type4, oldProps, newProps, finishedWork);
                        } catch (error3) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error3);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostText: {
                recursivelyTraverseMutationEffects(root4, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (finishedWork.stateNode === null) {
                      throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    var textInstance = finishedWork.stateNode;
                    var newText = finishedWork.memoizedProps;
                    var oldText = current2 !== null ? current2.memoizedProps : newText;
                    try {
                      commitTextUpdate(textInstance, oldText, newText);
                    } catch (error3) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error3);
                    }
                  }
                }
                return;
              }
              case HostRoot: {
                recursivelyTraverseMutationEffects(root4, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (current2 !== null) {
                      var prevRootState = current2.memoizedState;
                      if (prevRootState.isDehydrated) {
                        try {
                          commitHydratedContainer(root4.containerInfo);
                        } catch (error3) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error3);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                recursivelyTraverseMutationEffects(root4, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
              case SuspenseComponent: {
                recursivelyTraverseMutationEffects(root4, finishedWork);
                commitReconciliationEffects(finishedWork);
                var offscreenFiber = finishedWork.child;
                if (offscreenFiber.flags & Visibility) {
                  var offscreenInstance = offscreenFiber.stateNode;
                  var newState = offscreenFiber.memoizedState;
                  var isHidden2 = newState !== null;
                  offscreenInstance.isHidden = isHidden2;
                  if (isHidden2) {
                    var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                    if (!wasHidden) {
                      markCommitTimeOfFallback();
                    }
                  }
                }
                if (flags & Update) {
                  try {
                    commitSuspenseCallback(finishedWork);
                  } catch (error3) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error3);
                  }
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case OffscreenComponent: {
                var _wasHidden = current2 !== null && current2.memoizedState !== null;
                if (
                  // TODO: Remove this dead flag
                  finishedWork.mode & ConcurrentMode
                ) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
                  recursivelyTraverseMutationEffects(root4, finishedWork);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseMutationEffects(root4, finishedWork);
                }
                commitReconciliationEffects(finishedWork);
                if (flags & Visibility) {
                  var _offscreenInstance = finishedWork.stateNode;
                  var _newState = finishedWork.memoizedState;
                  var _isHidden = _newState !== null;
                  var offscreenBoundary = finishedWork;
                  _offscreenInstance.isHidden = _isHidden;
                  {
                    if (_isHidden) {
                      if (!_wasHidden) {
                        if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                          nextEffect = offscreenBoundary;
                          var offscreenChild = offscreenBoundary.child;
                          while (offscreenChild !== null) {
                            nextEffect = offscreenChild;
                            disappearLayoutEffects_begin(offscreenChild);
                            offscreenChild = offscreenChild.sibling;
                          }
                        }
                      }
                    }
                  }
                  {
                    hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
                  }
                }
                return;
              }
              case SuspenseListComponent: {
                recursivelyTraverseMutationEffects(root4, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case ScopeComponent: {
                return;
              }
              default: {
                recursivelyTraverseMutationEffects(root4, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
            }
          }
          function commitReconciliationEffects(finishedWork) {
            var flags = finishedWork.flags;
            if (flags & Placement) {
              try {
                commitPlacement(finishedWork);
              } catch (error3) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error3);
              }
              finishedWork.flags &= ~Placement;
            }
            if (flags & Hydrating) {
              finishedWork.flags &= ~Hydrating;
            }
          }
          function commitLayoutEffects(finishedWork, root4, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root4;
            nextEffect = finishedWork;
            commitLayoutEffects_begin(finishedWork, root4, committedLanes);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function commitLayoutEffects_begin(subtreeRoot, root4, committedLanes) {
            var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent && isModernRoot) {
                var isHidden2 = fiber.memoizedState !== null;
                var newOffscreenSubtreeIsHidden = isHidden2 || offscreenSubtreeIsHidden;
                if (newOffscreenSubtreeIsHidden) {
                  commitLayoutMountEffects_complete(subtreeRoot, root4, committedLanes);
                  continue;
                } else {
                  var current2 = fiber.alternate;
                  var wasHidden = current2 !== null && current2.memoizedState !== null;
                  var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
                  var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
                  if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                    nextEffect = fiber;
                    reappearLayoutEffects_begin(fiber);
                  }
                  var child = firstChild;
                  while (child !== null) {
                    nextEffect = child;
                    commitLayoutEffects_begin(
                      child,
                      // New root; bubble back up to here and stop.
                      root4,
                      committedLanes
                    );
                    child = child.sibling;
                  }
                  nextEffect = fiber;
                  offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                  commitLayoutMountEffects_complete(subtreeRoot, root4, committedLanes);
                  continue;
                }
              }
              if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitLayoutMountEffects_complete(subtreeRoot, root4, committedLanes);
              }
            }
          }
          function commitLayoutMountEffects_complete(subtreeRoot, root4, committedLanes) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & LayoutMask) !== NoFlags) {
                var current2 = fiber.alternate;
                setCurrentFiber(fiber);
                try {
                  commitLayoutEffectOnFiber(root4, current2, fiber, committedLanes);
                } catch (error3) {
                  captureCommitPhaseError(fiber, fiber.return, error3);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function disappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case MemoComponent:
                case SimpleMemoComponent: {
                  if (fiber.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout3, fiber, fiber.return);
                    } finally {
                      recordLayoutEffectDuration(fiber);
                    }
                  } else {
                    commitHookEffectListUnmount(Layout3, fiber, fiber.return);
                  }
                  break;
                }
                case ClassComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  var instance2 = fiber.stateNode;
                  if (typeof instance2.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance2);
                  }
                  break;
                }
                case HostComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  break;
                }
                case OffscreenComponent: {
                  var isHidden2 = fiber.memoizedState !== null;
                  if (isHidden2) {
                    disappearLayoutEffects_complete(subtreeRoot);
                    continue;
                  }
                  break;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                disappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function disappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function reappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent) {
                var isHidden2 = fiber.memoizedState !== null;
                if (isHidden2) {
                  reappearLayoutEffects_complete(subtreeRoot);
                  continue;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                reappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function reappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                reappearLayoutEffectsOnFiber(fiber);
              } catch (error3) {
                captureCommitPhaseError(fiber, fiber.return, error3);
              }
              resetCurrentFiber();
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountEffects(root4, finishedWork, committedLanes, committedTransitions) {
            nextEffect = finishedWork;
            commitPassiveMountEffects_begin(finishedWork, root4, committedLanes, committedTransitions);
          }
          function commitPassiveMountEffects_begin(subtreeRoot, root4, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitPassiveMountEffects_complete(subtreeRoot, root4, committedLanes, committedTransitions);
              }
            }
          }
          function commitPassiveMountEffects_complete(subtreeRoot, root4, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                try {
                  commitPassiveMountOnFiber(root4, fiber, committedLanes, committedTransitions);
                } catch (error3) {
                  captureCommitPhaseError(fiber, fiber.return, error3);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                  } finally {
                    recordPassiveEffectDuration(finishedWork);
                  }
                } else {
                  commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffects(firstChild) {
            nextEffect = firstChild;
            commitPassiveUnmountEffects_begin();
          }
          function commitPassiveUnmountEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
                var deletions = fiber.deletions;
                if (deletions !== null) {
                  for (var i3 = 0; i3 < deletions.length; i3++) {
                    var fiberToDelete = deletions[i3];
                    nextEffect = fiberToDelete;
                    commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
                  }
                  {
                    var previousFiber = fiber.alternate;
                    if (previousFiber !== null) {
                      var detachedChild = previousFiber.child;
                      if (detachedChild !== null) {
                        previousFiber.child = null;
                        do {
                          var detachedSibling = detachedChild.sibling;
                          detachedChild.sibling = null;
                          detachedChild = detachedSibling;
                        } while (detachedChild !== null);
                      }
                    }
                  }
                  nextEffect = fiber;
                }
              }
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffects_complete();
              }
            }
          }
          function commitPassiveUnmountEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                commitPassiveUnmountOnFiber(fiber);
                resetCurrentFiber();
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveUnmountOnFiber(finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                  recordPassiveEffectDuration(finishedWork);
                } else {
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
              resetCurrentFiber();
              var child = fiber.child;
              if (child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var sibling = fiber.sibling;
              var returnFiber = fiber.return;
              {
                detachFiberAfterEffects(fiber);
                if (fiber === deletedSubtreeRoot) {
                  nextEffect = null;
                  return;
                }
              }
              if (sibling !== null) {
                sibling.return = returnFiber;
                nextEffect = sibling;
                return;
              }
              nextEffect = returnFiber;
            }
          }
          function commitPassiveUnmountInsideDeletedTreeOnFiber(current2, nearestMountedAncestor) {
            switch (current2.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (current2.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                  recordPassiveEffectDuration(current2);
                } else {
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                }
                break;
              }
            }
          }
          function invokeLayoutEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Layout3 | HasEffect, fiber);
                  } catch (error3) {
                    captureCommitPhaseError(fiber, fiber.return, error3);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance2 = fiber.stateNode;
                  try {
                    instance2.componentDidMount();
                  } catch (error3) {
                    captureCommitPhaseError(fiber, fiber.return, error3);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, fiber);
                  } catch (error3) {
                    captureCommitPhaseError(fiber, fiber.return, error3);
                  }
                  break;
                }
              }
            }
          }
          function invokeLayoutEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Layout3 | HasEffect, fiber, fiber.return);
                  } catch (error3) {
                    captureCommitPhaseError(fiber, fiber.return, error3);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance2 = fiber.stateNode;
                  if (typeof instance2.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance2);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
                  } catch (error3) {
                    captureCommitPhaseError(fiber, fiber.return, error3);
                  }
                }
              }
            }
          }
          var COMPONENT_TYPE = 0;
          var HAS_PSEUDO_CLASS_TYPE = 1;
          var ROLE_TYPE = 2;
          var TEST_NAME_TYPE = 3;
          var TEXT_TYPE = 4;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            COMPONENT_TYPE = symbolFor("selector.component");
            HAS_PSEUDO_CLASS_TYPE = symbolFor("selector.has_pseudo_class");
            ROLE_TYPE = symbolFor("selector.role");
            TEST_NAME_TYPE = symbolFor("selector.test_id");
            TEXT_TYPE = symbolFor("selector.text");
          }
          var commitHooks = [];
          function onCommitRoot$1() {
            {
              commitHooks.forEach(function(commitHook) {
                return commitHook();
              });
            }
          }
          var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
          function isLegacyActEnvironment(fiber) {
            {
              var isReactActEnvironmentGlobal = (
                // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
                typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
              );
              var jestIsDefined = typeof jest !== "undefined";
              return jestIsDefined && isReactActEnvironmentGlobal !== false;
            }
          }
          function isConcurrentActEnvironment() {
            {
              var isReactActEnvironmentGlobal = (
                // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
                typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
              );
              if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
                error2("The current testing environment is not configured to support act(...)");
              }
              return isReactActEnvironmentGlobal;
            }
          }
          var ceil = Math.ceil;
          var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
          var NoContext = (
            /*             */
            0
          );
          var BatchedContext = (
            /*               */
            1
          );
          var RenderContext = (
            /*                */
            2
          );
          var CommitContext = (
            /*                */
            4
          );
          var RootInProgress = 0;
          var RootFatalErrored = 1;
          var RootErrored = 2;
          var RootSuspended = 3;
          var RootSuspendedWithDelay = 4;
          var RootCompleted = 5;
          var RootDidNotComplete = 6;
          var executionContext = NoContext;
          var workInProgressRoot = null;
          var workInProgress = null;
          var workInProgressRootRenderLanes = NoLanes;
          var subtreeRenderLanes = NoLanes;
          var subtreeRenderLanesCursor = createCursor(NoLanes);
          var workInProgressRootExitStatus = RootInProgress;
          var workInProgressRootFatalError = null;
          var workInProgressRootIncludedLanes = NoLanes;
          var workInProgressRootSkippedLanes = NoLanes;
          var workInProgressRootInterleavedUpdatedLanes = NoLanes;
          var workInProgressRootPingedLanes = NoLanes;
          var workInProgressRootConcurrentErrors = null;
          var workInProgressRootRecoverableErrors = null;
          var globalMostRecentFallbackTime = 0;
          var FALLBACK_THROTTLE_MS = 500;
          var workInProgressRootRenderTargetTime = Infinity;
          var RENDER_TIMEOUT_MS = 500;
          var workInProgressTransitions = null;
          function resetRenderTimer() {
            workInProgressRootRenderTargetTime = now2() + RENDER_TIMEOUT_MS;
          }
          function getRenderTargetTime() {
            return workInProgressRootRenderTargetTime;
          }
          var hasUncaughtError = false;
          var firstUncaughtError = null;
          var legacyErrorBoundariesThatAlreadyFailed = null;
          var rootDoesHavePassiveEffects = false;
          var rootWithPendingPassiveEffects = null;
          var pendingPassiveEffectsLanes = NoLanes;
          var pendingPassiveProfilerEffects = [];
          var pendingPassiveTransitions = null;
          var NESTED_UPDATE_LIMIT = 50;
          var nestedUpdateCount = 0;
          var rootWithNestedUpdates = null;
          var isFlushingPassiveEffects = false;
          var didScheduleUpdateDuringPassiveEffects = false;
          var NESTED_PASSIVE_UPDATE_LIMIT = 50;
          var nestedPassiveUpdateCount = 0;
          var rootWithPassiveNestedUpdates = null;
          var currentEventTime = NoTimestamp;
          var currentEventTransitionLane = NoLanes;
          var isRunningInsertionEffect = false;
          function getWorkInProgressRoot() {
            return workInProgressRoot;
          }
          function requestEventTime() {
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              return now2();
            }
            if (currentEventTime !== NoTimestamp) {
              return currentEventTime;
            }
            currentEventTime = now2();
            return currentEventTime;
          }
          function requestUpdateLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
              return pickArbitraryLane(workInProgressRootRenderLanes);
            }
            var isTransition = requestCurrentTransition() !== NoTransition;
            if (isTransition) {
              if (ReactCurrentBatchConfig$3.transition !== null) {
                var transition = ReactCurrentBatchConfig$3.transition;
                if (!transition._updatedFibers) {
                  transition._updatedFibers = /* @__PURE__ */ new Set();
                }
                transition._updatedFibers.add(fiber);
              }
              if (currentEventTransitionLane === NoLane) {
                currentEventTransitionLane = claimNextTransitionLane();
              }
              return currentEventTransitionLane;
            }
            var updateLane = getCurrentUpdatePriority();
            if (updateLane !== NoLane) {
              return updateLane;
            }
            var eventLane = getCurrentEventPriority();
            return eventLane;
          }
          function requestRetryLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            }
            return claimNextRetryLane();
          }
          function scheduleUpdateOnFiber(root4, fiber, lane, eventTime) {
            checkForNestedUpdates();
            {
              if (isRunningInsertionEffect) {
                error2("useInsertionEffect must not schedule updates.");
              }
            }
            {
              if (isFlushingPassiveEffects) {
                didScheduleUpdateDuringPassiveEffects = true;
              }
            }
            markRootUpdated(root4, lane, eventTime);
            if ((executionContext & RenderContext) !== NoLanes && root4 === workInProgressRoot) {
              warnAboutRenderPhaseUpdatesInDEV(fiber);
            } else {
              {
                if (isDevToolsPresent) {
                  addFiberToLanesMap(root4, fiber, lane);
                }
              }
              warnIfUpdatesNotWrappedWithActDEV(fiber);
              if (root4 === workInProgressRoot) {
                if ((executionContext & RenderContext) === NoContext) {
                  workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
                }
                if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                  markRootSuspended$1(root4, workInProgressRootRenderLanes);
                }
              }
              ensureRootIsScheduled(root4, eventTime);
              if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
              !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function scheduleInitialHydrationOnRoot(root4, lane, eventTime) {
            var current2 = root4.current;
            current2.lanes = lane;
            markRootUpdated(root4, lane, eventTime);
            ensureRootIsScheduled(root4, eventTime);
          }
          function isUnsafeClassRenderPhaseUpdate(fiber) {
            return (
              // TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We
              // decided not to enable it.
              (executionContext & RenderContext) !== NoContext
            );
          }
          function ensureRootIsScheduled(root4, currentTime) {
            var existingCallbackNode = root4.callbackNode;
            markStarvedLanesAsExpired(root4, currentTime);
            var nextLanes = getNextLanes(root4, root4 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (nextLanes === NoLanes) {
              if (existingCallbackNode !== null) {
                cancelCallback$1(existingCallbackNode);
              }
              root4.callbackNode = null;
              root4.callbackPriority = NoLane;
              return;
            }
            var newCallbackPriority = getHighestPriorityLane(nextLanes);
            var existingCallbackPriority = root4.callbackPriority;
            if (existingCallbackPriority === newCallbackPriority && // Special case related to `act`. If the currently scheduled task is a
            // Scheduler task, rather than an `act` task, cancel it and re-scheduled
            // on the `act` queue.
            !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
              {
                if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
                  error2("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              return;
            }
            if (existingCallbackNode != null) {
              cancelCallback$1(existingCallbackNode);
            }
            var newCallbackNode;
            if (newCallbackPriority === SyncLane) {
              if (root4.tag === LegacyRoot) {
                if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {
                  ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
                }
                scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root4));
              } else {
                scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root4));
              }
              {
                if (ReactCurrentActQueue$1.current !== null) {
                  ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
                } else {
                  scheduleMicrotask(function() {
                    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                      flushSyncCallbacks();
                    }
                  });
                }
              }
              newCallbackNode = null;
            } else {
              var schedulerPriorityLevel;
              switch (lanesToEventPriority(nextLanes)) {
                case DiscreteEventPriority:
                  schedulerPriorityLevel = ImmediatePriority;
                  break;
                case ContinuousEventPriority:
                  schedulerPriorityLevel = UserBlockingPriority;
                  break;
                case DefaultEventPriority:
                  schedulerPriorityLevel = NormalPriority;
                  break;
                case IdleEventPriority:
                  schedulerPriorityLevel = IdlePriority;
                  break;
                default:
                  schedulerPriorityLevel = NormalPriority;
                  break;
              }
              newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root4));
            }
            root4.callbackPriority = newCallbackPriority;
            root4.callbackNode = newCallbackNode;
          }
          function performConcurrentWorkOnRoot(root4, didTimeout) {
            {
              resetNestedUpdateFlag();
            }
            currentEventTime = NoTimestamp;
            currentEventTransitionLane = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var originalCallbackNode = root4.callbackNode;
            var didFlushPassiveEffects = flushPassiveEffects();
            if (didFlushPassiveEffects) {
              if (root4.callbackNode !== originalCallbackNode) {
                return null;
              }
            }
            var lanes = getNextLanes(root4, root4 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (lanes === NoLanes) {
              return null;
            }
            var shouldTimeSlice = !includesBlockingLane(root4, lanes) && !includesExpiredLane(root4, lanes) && !didTimeout;
            var exitStatus = shouldTimeSlice ? renderRootConcurrent(root4, lanes) : renderRootSync(root4, lanes);
            if (exitStatus !== RootInProgress) {
              if (exitStatus === RootErrored) {
                var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root4);
                if (errorRetryLanes !== NoLanes) {
                  lanes = errorRetryLanes;
                  exitStatus = recoverFromConcurrentError(root4, errorRetryLanes);
                }
              }
              if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root4, NoLanes);
                markRootSuspended$1(root4, lanes);
                ensureRootIsScheduled(root4, now2());
                throw fatalError;
              }
              if (exitStatus === RootDidNotComplete) {
                markRootSuspended$1(root4, lanes);
              } else {
                var renderWasConcurrent = !includesBlockingLane(root4, lanes);
                var finishedWork = root4.current.alternate;
                if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
                  exitStatus = renderRootSync(root4, lanes);
                  if (exitStatus === RootErrored) {
                    var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root4);
                    if (_errorRetryLanes !== NoLanes) {
                      lanes = _errorRetryLanes;
                      exitStatus = recoverFromConcurrentError(root4, _errorRetryLanes);
                    }
                  }
                  if (exitStatus === RootFatalErrored) {
                    var _fatalError = workInProgressRootFatalError;
                    prepareFreshStack(root4, NoLanes);
                    markRootSuspended$1(root4, lanes);
                    ensureRootIsScheduled(root4, now2());
                    throw _fatalError;
                  }
                }
                root4.finishedWork = finishedWork;
                root4.finishedLanes = lanes;
                finishConcurrentRender(root4, exitStatus, lanes);
              }
            }
            ensureRootIsScheduled(root4, now2());
            if (root4.callbackNode === originalCallbackNode) {
              return performConcurrentWorkOnRoot.bind(null, root4);
            }
            return null;
          }
          function recoverFromConcurrentError(root4, errorRetryLanes) {
            var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
            if (isRootDehydrated(root4)) {
              var rootWorkInProgress = prepareFreshStack(root4, errorRetryLanes);
              rootWorkInProgress.flags |= ForceClientRender;
              {
                errorHydratingContainer(root4.containerInfo);
              }
            }
            var exitStatus = renderRootSync(root4, errorRetryLanes);
            if (exitStatus !== RootErrored) {
              var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
              workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
              if (errorsFromSecondAttempt !== null) {
                queueRecoverableErrors(errorsFromSecondAttempt);
              }
            }
            return exitStatus;
          }
          function queueRecoverableErrors(errors) {
            if (workInProgressRootRecoverableErrors === null) {
              workInProgressRootRecoverableErrors = errors;
            } else {
              workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
            }
          }
          function finishConcurrentRender(root4, exitStatus, lanes) {
            switch (exitStatus) {
              case RootInProgress:
              case RootFatalErrored: {
                throw new Error("Root did not complete. This is a bug in React.");
              }
              case RootErrored: {
                commitRoot(root4, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspended: {
                markRootSuspended$1(root4, lanes);
                if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
                !shouldForceFlushFallbacksInDEV()) {
                  var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now2();
                  if (msUntilTimeout > 10) {
                    var nextLanes = getNextLanes(root4, NoLanes);
                    if (nextLanes !== NoLanes) {
                      break;
                    }
                    var suspendedLanes = root4.suspendedLanes;
                    if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                      var eventTime = requestEventTime();
                      markRootPinged(root4, suspendedLanes);
                      break;
                    }
                    root4.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root4, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root4, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspendedWithDelay: {
                markRootSuspended$1(root4, lanes);
                if (includesOnlyTransitions(lanes)) {
                  break;
                }
                if (!shouldForceFlushFallbacksInDEV()) {
                  var mostRecentEventTime = getMostRecentEventTime(root4, lanes);
                  var eventTimeMs = mostRecentEventTime;
                  var timeElapsedMs = now2() - eventTimeMs;
                  var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                  if (_msUntilTimeout > 10) {
                    root4.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root4, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root4, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootCompleted: {
                commitRoot(root4, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              default: {
                throw new Error("Unknown root exit status.");
              }
            }
          }
          function isRenderConsistentWithExternalStores(finishedWork) {
            var node = finishedWork;
            while (true) {
              if (node.flags & StoreConsistency) {
                var updateQueue = node.updateQueue;
                if (updateQueue !== null) {
                  var checks = updateQueue.stores;
                  if (checks !== null) {
                    for (var i3 = 0; i3 < checks.length; i3++) {
                      var check = checks[i3];
                      var getSnapshot = check.getSnapshot;
                      var renderedValue = check.value;
                      try {
                        if (!objectIs(getSnapshot(), renderedValue)) {
                          return false;
                        }
                      } catch (error3) {
                        return false;
                      }
                    }
                  }
                }
              }
              var child = node.child;
              if (node.subtreeFlags & StoreConsistency && child !== null) {
                child.return = node;
                node = child;
                continue;
              }
              if (node === finishedWork) {
                return true;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === finishedWork) {
                  return true;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return true;
          }
          function markRootSuspended$1(root4, suspendedLanes) {
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
            markRootSuspended(root4, suspendedLanes);
          }
          function performSyncWorkOnRoot(root4) {
            {
              syncNestedUpdateFlag();
            }
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            flushPassiveEffects();
            var lanes = getNextLanes(root4, NoLanes);
            if (!includesSomeLane(lanes, SyncLane)) {
              ensureRootIsScheduled(root4, now2());
              return null;
            }
            var exitStatus = renderRootSync(root4, lanes);
            if (root4.tag !== LegacyRoot && exitStatus === RootErrored) {
              var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root4);
              if (errorRetryLanes !== NoLanes) {
                lanes = errorRetryLanes;
                exitStatus = recoverFromConcurrentError(root4, errorRetryLanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root4, NoLanes);
              markRootSuspended$1(root4, lanes);
              ensureRootIsScheduled(root4, now2());
              throw fatalError;
            }
            if (exitStatus === RootDidNotComplete) {
              throw new Error("Root did not complete. This is a bug in React.");
            }
            var finishedWork = root4.current.alternate;
            root4.finishedWork = finishedWork;
            root4.finishedLanes = lanes;
            commitRoot(root4, workInProgressRootRecoverableErrors, workInProgressTransitions);
            ensureRootIsScheduled(root4, now2());
            return null;
          }
          function flushRoot(root4, lanes) {
            if (lanes !== NoLanes) {
              markRootEntangled(root4, mergeLanes(lanes, SyncLane));
              ensureRootIsScheduled(root4, now2());
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                resetRenderTimer();
                flushSyncCallbacks();
              }
            }
          }
          function batchedUpdates$1(fn2, a2) {
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            try {
              return fn2(a2);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
              !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function discreteUpdates(fn2, a2, b2, c2, d2) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              return fn2(a2, b2, c2, d2);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              if (executionContext === NoContext) {
                resetRenderTimer();
              }
            }
          }
          function flushSync3(fn2) {
            if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
              flushPassiveEffects();
            }
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            var previousPriority = getCurrentUpdatePriority();
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              if (fn2) {
                return fn2();
              } else {
                return void 0;
              }
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              executionContext = prevExecutionContext;
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                flushSyncCallbacks();
              }
            }
          }
          function isAlreadyRendering() {
            return (executionContext & (RenderContext | CommitContext)) !== NoContext;
          }
          function pushRenderLanes(fiber, lanes) {
            push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
            subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
            workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
          }
          function popRenderLanes(fiber) {
            subtreeRenderLanes = subtreeRenderLanesCursor.current;
            pop(subtreeRenderLanesCursor, fiber);
          }
          function prepareFreshStack(root4, lanes) {
            root4.finishedWork = null;
            root4.finishedLanes = NoLanes;
            var timeoutHandle = root4.timeoutHandle;
            if (timeoutHandle !== noTimeout) {
              root4.timeoutHandle = noTimeout;
              cancelTimeout(timeoutHandle);
            }
            if (workInProgress !== null) {
              var interruptedWork = workInProgress.return;
              while (interruptedWork !== null) {
                var current2 = interruptedWork.alternate;
                unwindInterruptedWork(current2, interruptedWork);
                interruptedWork = interruptedWork.return;
              }
            }
            workInProgressRoot = root4;
            var rootWorkInProgress = createWorkInProgress(root4.current, null);
            workInProgress = rootWorkInProgress;
            workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
            workInProgressRootExitStatus = RootInProgress;
            workInProgressRootFatalError = null;
            workInProgressRootSkippedLanes = NoLanes;
            workInProgressRootInterleavedUpdatedLanes = NoLanes;
            workInProgressRootPingedLanes = NoLanes;
            workInProgressRootConcurrentErrors = null;
            workInProgressRootRecoverableErrors = null;
            finishQueueingConcurrentUpdates();
            {
              ReactStrictModeWarnings.discardPendingWarnings();
            }
            return rootWorkInProgress;
          }
          function handleError(root4, thrownValue) {
            do {
              var erroredWork = workInProgress;
              try {
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber();
                ReactCurrentOwner$2.current = null;
                if (erroredWork === null || erroredWork.return === null) {
                  workInProgressRootExitStatus = RootFatalErrored;
                  workInProgressRootFatalError = thrownValue;
                  workInProgress = null;
                  return;
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                }
                if (enableSchedulingProfiler) {
                  markComponentRenderStopped();
                  if (thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function") {
                    var wakeable = thrownValue;
                    markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
                  } else {
                    markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
                  }
                }
                throwException(root4, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                completeUnitOfWork(erroredWork);
              } catch (yetAnotherThrownValue) {
                thrownValue = yetAnotherThrownValue;
                if (workInProgress === erroredWork && erroredWork !== null) {
                  erroredWork = erroredWork.return;
                  workInProgress = erroredWork;
                } else {
                  erroredWork = workInProgress;
                }
                continue;
              }
              return;
            } while (true);
          }
          function pushDispatcher() {
            var prevDispatcher = ReactCurrentDispatcher$2.current;
            ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
            if (prevDispatcher === null) {
              return ContextOnlyDispatcher;
            } else {
              return prevDispatcher;
            }
          }
          function popDispatcher(prevDispatcher) {
            ReactCurrentDispatcher$2.current = prevDispatcher;
          }
          function markCommitTimeOfFallback() {
            globalMostRecentFallbackTime = now2();
          }
          function markSkippedUpdateLanes(lane) {
            workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
          }
          function renderDidSuspend() {
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootSuspended;
            }
          }
          function renderDidSuspendDelayIfPossible() {
            if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
              workInProgressRootExitStatus = RootSuspendedWithDelay;
            }
            if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
              markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
            }
          }
          function renderDidError(error3) {
            if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
              workInProgressRootExitStatus = RootErrored;
            }
            if (workInProgressRootConcurrentErrors === null) {
              workInProgressRootConcurrentErrors = [error3];
            } else {
              workInProgressRootConcurrentErrors.push(error3);
            }
          }
          function renderHasNotSuspendedYet() {
            return workInProgressRootExitStatus === RootInProgress;
          }
          function renderRootSync(root4, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root4 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root4.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root4, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root4, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              prepareFreshStack(root4, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopSync();
                break;
              } catch (thrownValue) {
                handleError(root4, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            executionContext = prevExecutionContext;
            popDispatcher(prevDispatcher);
            if (workInProgress !== null) {
              throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
            }
            {
              markRenderStopped();
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
          function workLoopSync() {
            while (workInProgress !== null) {
              performUnitOfWork(workInProgress);
            }
          }
          function renderRootConcurrent(root4, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root4 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root4.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root4, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root4, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              resetRenderTimer();
              prepareFreshStack(root4, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopConcurrent();
                break;
              } catch (thrownValue) {
                handleError(root4, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            popDispatcher(prevDispatcher);
            executionContext = prevExecutionContext;
            if (workInProgress !== null) {
              {
                markRenderYielded();
              }
              return RootInProgress;
            } else {
              {
                markRenderStopped();
              }
              workInProgressRoot = null;
              workInProgressRootRenderLanes = NoLanes;
              return workInProgressRootExitStatus;
            }
          }
          function workLoopConcurrent() {
            while (workInProgress !== null && !shouldYield()) {
              performUnitOfWork(workInProgress);
            }
          }
          function performUnitOfWork(unitOfWork) {
            var current2 = unitOfWork.alternate;
            setCurrentFiber(unitOfWork);
            var next;
            if ((unitOfWork.mode & ProfileMode) !== NoMode) {
              startProfilerTimer(unitOfWork);
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
              stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
            } else {
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            }
            resetCurrentFiber();
            unitOfWork.memoizedProps = unitOfWork.pendingProps;
            if (next === null) {
              completeUnitOfWork(unitOfWork);
            } else {
              workInProgress = next;
            }
            ReactCurrentOwner$2.current = null;
          }
          function completeUnitOfWork(unitOfWork) {
            var completedWork = unitOfWork;
            do {
              var current2 = completedWork.alternate;
              var returnFiber = completedWork.return;
              if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber(completedWork);
                var next = void 0;
                if ((completedWork.mode & ProfileMode) === NoMode) {
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                } else {
                  startProfilerTimer(completedWork);
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                }
                resetCurrentFiber();
                if (next !== null) {
                  workInProgress = next;
                  return;
                }
              } else {
                var _next = unwindWork(current2, completedWork);
                if (_next !== null) {
                  _next.flags &= HostEffectMask;
                  workInProgress = _next;
                  return;
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                  var actualDuration = completedWork.actualDuration;
                  var child = completedWork.child;
                  while (child !== null) {
                    actualDuration += child.actualDuration;
                    child = child.sibling;
                  }
                  completedWork.actualDuration = actualDuration;
                }
                if (returnFiber !== null) {
                  returnFiber.flags |= Incomplete;
                  returnFiber.subtreeFlags = NoFlags;
                  returnFiber.deletions = null;
                } else {
                  workInProgressRootExitStatus = RootDidNotComplete;
                  workInProgress = null;
                  return;
                }
              }
              var siblingFiber = completedWork.sibling;
              if (siblingFiber !== null) {
                workInProgress = siblingFiber;
                return;
              }
              completedWork = returnFiber;
              workInProgress = completedWork;
            } while (completedWork !== null);
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootCompleted;
            }
          }
          function commitRoot(root4, recoverableErrors, transitions) {
            var previousUpdateLanePriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              commitRootImpl(root4, recoverableErrors, transitions, previousUpdateLanePriority);
            } finally {
              ReactCurrentBatchConfig$3.transition = prevTransition;
              setCurrentUpdatePriority(previousUpdateLanePriority);
            }
            return null;
          }
          function commitRootImpl(root4, recoverableErrors, transitions, renderPriorityLevel) {
            do {
              flushPassiveEffects();
            } while (rootWithPendingPassiveEffects !== null);
            flushRenderPhaseStrictModeWarningsInDEV();
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var finishedWork = root4.finishedWork;
            var lanes = root4.finishedLanes;
            {
              markCommitStarted(lanes);
            }
            if (finishedWork === null) {
              {
                markCommitStopped();
              }
              return null;
            } else {
              {
                if (lanes === NoLanes) {
                  error2("root.finishedLanes should not be empty during a commit. This is a bug in React.");
                }
              }
            }
            root4.finishedWork = null;
            root4.finishedLanes = NoLanes;
            if (finishedWork === root4.current) {
              throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
            }
            root4.callbackNode = null;
            root4.callbackPriority = NoLane;
            var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
            markRootFinished(root4, remainingLanes);
            if (root4 === workInProgressRoot) {
              workInProgressRoot = null;
              workInProgress = null;
              workInProgressRootRenderLanes = NoLanes;
            }
            if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                pendingPassiveTransitions = transitions;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
            var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            if (subtreeHasEffects || rootHasEffect) {
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              ReactCurrentBatchConfig$3.transition = null;
              var previousPriority = getCurrentUpdatePriority();
              setCurrentUpdatePriority(DiscreteEventPriority);
              var prevExecutionContext = executionContext;
              executionContext |= CommitContext;
              ReactCurrentOwner$2.current = null;
              var shouldFireAfterActiveInstanceBlur2 = commitBeforeMutationEffects(root4, finishedWork);
              {
                recordCommitTime();
              }
              commitMutationEffects(root4, finishedWork, lanes);
              resetAfterCommit(root4.containerInfo);
              root4.current = finishedWork;
              {
                markLayoutEffectsStarted(lanes);
              }
              commitLayoutEffects(finishedWork, root4, lanes);
              {
                markLayoutEffectsStopped();
              }
              requestPaint();
              executionContext = prevExecutionContext;
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
            } else {
              root4.current = finishedWork;
              {
                recordCommitTime();
              }
            }
            var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
            if (rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = false;
              rootWithPendingPassiveEffects = root4;
              pendingPassiveEffectsLanes = lanes;
            } else {
              {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
              }
            }
            remainingLanes = root4.pendingLanes;
            if (remainingLanes === NoLanes) {
              legacyErrorBoundariesThatAlreadyFailed = null;
            }
            {
              if (!rootDidHavePassiveEffects) {
                commitDoubleInvokeEffectsInDEV(root4.current, false);
              }
            }
            onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
            {
              if (isDevToolsPresent) {
                root4.memoizedUpdaters.clear();
              }
            }
            {
              onCommitRoot$1();
            }
            ensureRootIsScheduled(root4, now2());
            if (recoverableErrors !== null) {
              var onRecoverableError = root4.onRecoverableError;
              for (var i3 = 0; i3 < recoverableErrors.length; i3++) {
                var recoverableError = recoverableErrors[i3];
                var componentStack = recoverableError.stack;
                var digest = recoverableError.digest;
                onRecoverableError(recoverableError.value, {
                  componentStack,
                  digest
                });
              }
            }
            if (hasUncaughtError) {
              hasUncaughtError = false;
              var error$1 = firstUncaughtError;
              firstUncaughtError = null;
              throw error$1;
            }
            if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root4.tag !== LegacyRoot) {
              flushPassiveEffects();
            }
            remainingLanes = root4.pendingLanes;
            if (includesSomeLane(remainingLanes, SyncLane)) {
              {
                markNestedUpdateScheduled();
              }
              if (root4 === rootWithNestedUpdates) {
                nestedUpdateCount++;
              } else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root4;
              }
            } else {
              nestedUpdateCount = 0;
            }
            flushSyncCallbacks();
            {
              markCommitStopped();
            }
            return null;
          }
          function flushPassiveEffects() {
            if (rootWithPendingPassiveEffects !== null) {
              var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
              var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              var previousPriority = getCurrentUpdatePriority();
              try {
                ReactCurrentBatchConfig$3.transition = null;
                setCurrentUpdatePriority(priority);
                return flushPassiveEffectsImpl();
              } finally {
                setCurrentUpdatePriority(previousPriority);
                ReactCurrentBatchConfig$3.transition = prevTransition;
              }
            }
            return false;
          }
          function enqueuePendingPassiveProfilerEffect(fiber) {
            {
              pendingPassiveProfilerEffects.push(fiber);
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
          }
          function flushPassiveEffectsImpl() {
            if (rootWithPendingPassiveEffects === null) {
              return false;
            }
            var transitions = pendingPassiveTransitions;
            pendingPassiveTransitions = null;
            var root4 = rootWithPendingPassiveEffects;
            var lanes = pendingPassiveEffectsLanes;
            rootWithPendingPassiveEffects = null;
            pendingPassiveEffectsLanes = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Cannot flush passive effects while already rendering.");
            }
            {
              isFlushingPassiveEffects = true;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            {
              markPassiveEffectsStarted(lanes);
            }
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            commitPassiveUnmountEffects(root4.current);
            commitPassiveMountEffects(root4, root4.current, lanes, transitions);
            {
              var profilerEffects = pendingPassiveProfilerEffects;
              pendingPassiveProfilerEffects = [];
              for (var i3 = 0; i3 < profilerEffects.length; i3++) {
                var _fiber = profilerEffects[i3];
                commitPassiveEffectDurations(root4, _fiber);
              }
            }
            {
              markPassiveEffectsStopped();
            }
            {
              commitDoubleInvokeEffectsInDEV(root4.current, true);
            }
            executionContext = prevExecutionContext;
            flushSyncCallbacks();
            {
              if (didScheduleUpdateDuringPassiveEffects) {
                if (root4 === rootWithPassiveNestedUpdates) {
                  nestedPassiveUpdateCount++;
                } else {
                  nestedPassiveUpdateCount = 0;
                  rootWithPassiveNestedUpdates = root4;
                }
              } else {
                nestedPassiveUpdateCount = 0;
              }
              isFlushingPassiveEffects = false;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            onPostCommitRoot(root4);
            {
              var stateNode = root4.current.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
            return true;
          }
          function isAlreadyFailedLegacyErrorBoundary(instance2) {
            return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance2);
          }
          function markLegacyErrorBoundaryAsFailed(instance2) {
            if (legacyErrorBoundariesThatAlreadyFailed === null) {
              legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance2]);
            } else {
              legacyErrorBoundariesThatAlreadyFailed.add(instance2);
            }
          }
          function prepareToThrowUncaughtError(error3) {
            if (!hasUncaughtError) {
              hasUncaughtError = true;
              firstUncaughtError = error3;
            }
          }
          var onUncaughtError = prepareToThrowUncaughtError;
          function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error3) {
            var errorInfo = createCapturedValueAtFiber(error3, sourceFiber);
            var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
            var root4 = enqueueUpdate(rootFiber, update, SyncLane);
            var eventTime = requestEventTime();
            if (root4 !== null) {
              markRootUpdated(root4, SyncLane, eventTime);
              ensureRootIsScheduled(root4, eventTime);
            }
          }
          function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
            {
              reportUncaughtErrorInDEV(error$1);
              setIsRunningInsertionEffect(false);
            }
            if (sourceFiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
              return;
            }
            var fiber = null;
            {
              fiber = nearestMountedAncestor;
            }
            while (fiber !== null) {
              if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
                return;
              } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance2 = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === "function" || typeof instance2.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance2)) {
                  var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
                  var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                  var root4 = enqueueUpdate(fiber, update, SyncLane);
                  var eventTime = requestEventTime();
                  if (root4 !== null) {
                    markRootUpdated(root4, SyncLane, eventTime);
                    ensureRootIsScheduled(root4, eventTime);
                  }
                  return;
                }
              }
              fiber = fiber.return;
            }
            {
              error2("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
            }
          }
          function pingSuspendedRoot(root4, wakeable, pingedLanes) {
            var pingCache = root4.pingCache;
            if (pingCache !== null) {
              pingCache.delete(wakeable);
            }
            var eventTime = requestEventTime();
            markRootPinged(root4, pingedLanes);
            warnIfSuspenseResolutionNotWrappedWithActDEV(root4);
            if (workInProgressRoot === root4 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
              if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now2() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
                prepareFreshStack(root4, NoLanes);
              } else {
                workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
              }
            }
            ensureRootIsScheduled(root4, eventTime);
          }
          function retryTimedOutBoundary(boundaryFiber, retryLane) {
            if (retryLane === NoLane) {
              retryLane = requestRetryLane(boundaryFiber);
            }
            var eventTime = requestEventTime();
            var root4 = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
            if (root4 !== null) {
              markRootUpdated(root4, retryLane, eventTime);
              ensureRootIsScheduled(root4, eventTime);
            }
          }
          function retryDehydratedSuspenseBoundary(boundaryFiber) {
            var suspenseState = boundaryFiber.memoizedState;
            var retryLane = NoLane;
            if (suspenseState !== null) {
              retryLane = suspenseState.retryLane;
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function resolveRetryWakeable(boundaryFiber, wakeable) {
            var retryLane = NoLane;
            var retryCache;
            switch (boundaryFiber.tag) {
              case SuspenseComponent:
                retryCache = boundaryFiber.stateNode;
                var suspenseState = boundaryFiber.memoizedState;
                if (suspenseState !== null) {
                  retryLane = suspenseState.retryLane;
                }
                break;
              case SuspenseListComponent:
                retryCache = boundaryFiber.stateNode;
                break;
              default:
                throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
            }
            if (retryCache !== null) {
              retryCache.delete(wakeable);
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function jnd(timeElapsed) {
            return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
          }
          function checkForNestedUpdates() {
            if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = null;
              throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
            }
            {
              if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
                error2("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
              }
            }
          }
          function flushRenderPhaseStrictModeWarningsInDEV() {
            {
              ReactStrictModeWarnings.flushLegacyContextWarning();
              {
                ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
              }
            }
          }
          function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
            {
              setCurrentFiber(fiber);
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
              }
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
              }
              resetCurrentFiber();
            }
          }
          function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
            {
              var current2 = firstChild;
              var subtreeRoot = null;
              while (current2 !== null) {
                var primarySubtreeFlag = current2.subtreeFlags & fiberFlags;
                if (current2 !== subtreeRoot && current2.child !== null && primarySubtreeFlag !== NoFlags) {
                  current2 = current2.child;
                } else {
                  if ((current2.flags & fiberFlags) !== NoFlags) {
                    invokeEffectFn(current2);
                  }
                  if (current2.sibling !== null) {
                    current2 = current2.sibling;
                  } else {
                    current2 = subtreeRoot = current2.return;
                  }
                }
              }
            }
          }
          var didWarnStateUpdateForNotYetMountedComponent = null;
          function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
            {
              if ((executionContext & RenderContext) !== NoContext) {
                return;
              }
              if (!(fiber.mode & ConcurrentMode)) {
                return;
              }
              var tag = fiber.tag;
              if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
                return;
              }
              var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
              if (didWarnStateUpdateForNotYetMountedComponent !== null) {
                if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                  return;
                }
                didWarnStateUpdateForNotYetMountedComponent.add(componentName);
              } else {
                didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
              }
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error2("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
          var beginWork$1;
          {
            var dummyFiber = null;
            beginWork$1 = function(current2, unitOfWork, lanes) {
              var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
              try {
                return beginWork(current2, unitOfWork, lanes);
              } catch (originalError) {
                if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                  throw originalError;
                }
                resetContextDependencies();
                resetHooksAfterThrow();
                unwindInterruptedWork(current2, unitOfWork);
                assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
                if (unitOfWork.mode & ProfileMode) {
                  startProfilerTimer(unitOfWork);
                }
                invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
                if (hasCaughtError()) {
                  var replayError = clearCaughtError();
                  if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging) {
                    originalError._suppressLogging = true;
                  }
                }
                throw originalError;
              }
            };
          }
          var didWarnAboutUpdateInRender = false;
          var didWarnAboutUpdateInRenderForAnotherComponent;
          {
            didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
          }
          function warnAboutRenderPhaseUpdatesInDEV(fiber) {
            {
              if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
                switch (fiber.tag) {
                  case FunctionComponent:
                  case ForwardRef:
                  case SimpleMemoComponent: {
                    var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                    var dedupeKey = renderingComponentName;
                    if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                      didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                      var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                      error2("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                    }
                    break;
                  }
                  case ClassComponent: {
                    if (!didWarnAboutUpdateInRender) {
                      error2("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                      didWarnAboutUpdateInRender = true;
                    }
                    break;
                  }
                }
              }
            }
          }
          function restorePendingUpdaters(root4, lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root4.memoizedUpdaters;
                memoizedUpdaters.forEach(function(schedulingFiber) {
                  addFiberToLanesMap(root4, schedulingFiber, lanes);
                });
              }
            }
          }
          var fakeActCallbackNode = {};
          function scheduleCallback$1(priorityLevel, callback) {
            {
              var actQueue = ReactCurrentActQueue$1.current;
              if (actQueue !== null) {
                actQueue.push(callback);
                return fakeActCallbackNode;
              } else {
                return scheduleCallback(priorityLevel, callback);
              }
            }
          }
          function cancelCallback$1(callbackNode) {
            if (callbackNode === fakeActCallbackNode) {
              return;
            }
            return cancelCallback(callbackNode);
          }
          function shouldForceFlushFallbacksInDEV() {
            return ReactCurrentActQueue$1.current !== null;
          }
          function warnIfUpdatesNotWrappedWithActDEV(fiber) {
            {
              if (fiber.mode & ConcurrentMode) {
                if (!isConcurrentActEnvironment()) {
                  return;
                }
              } else {
                if (!isLegacyActEnvironment()) {
                  return;
                }
                if (executionContext !== NoContext) {
                  return;
                }
                if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {
                  return;
                }
              }
              if (ReactCurrentActQueue$1.current === null) {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error2("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          function warnIfSuspenseResolutionNotWrappedWithActDEV(root4) {
            {
              if (root4.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
                error2("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
              }
            }
          }
          function setIsRunningInsertionEffect(isRunning) {
            {
              isRunningInsertionEffect = isRunning;
            }
          }
          var resolveFamily = null;
          var failedBoundaries = null;
          var setRefreshHandler = function(handler) {
            {
              resolveFamily = handler;
            }
          };
          function resolveFunctionForHotReloading(type4) {
            {
              if (resolveFamily === null) {
                return type4;
              }
              var family = resolveFamily(type4);
              if (family === void 0) {
                return type4;
              }
              return family.current;
            }
          }
          function resolveClassForHotReloading(type4) {
            return resolveFunctionForHotReloading(type4);
          }
          function resolveForwardRefForHotReloading(type4) {
            {
              if (resolveFamily === null) {
                return type4;
              }
              var family = resolveFamily(type4);
              if (family === void 0) {
                if (type4 !== null && type4 !== void 0 && typeof type4.render === "function") {
                  var currentRender = resolveFunctionForHotReloading(type4.render);
                  if (type4.render !== currentRender) {
                    var syntheticType = {
                      $$typeof: REACT_FORWARD_REF_TYPE,
                      render: currentRender
                    };
                    if (type4.displayName !== void 0) {
                      syntheticType.displayName = type4.displayName;
                    }
                    return syntheticType;
                  }
                }
                return type4;
              }
              return family.current;
            }
          }
          function isCompatibleFamilyForHotReloading(fiber, element) {
            {
              if (resolveFamily === null) {
                return false;
              }
              var prevType = fiber.elementType;
              var nextType = element.type;
              var needsCompareFamilies = false;
              var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
              switch (fiber.tag) {
                case ClassComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case FunctionComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case ForwardRef: {
                  if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case MemoComponent:
                case SimpleMemoComponent: {
                  if ($$typeofNextType === REACT_MEMO_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                default:
                  return false;
              }
              if (needsCompareFamilies) {
                var prevFamily = resolveFamily(prevType);
                if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                  return true;
                }
              }
              return false;
            }
          }
          function markFailedErrorBoundaryForHotReloading(fiber) {
            {
              if (resolveFamily === null) {
                return;
              }
              if (typeof WeakSet !== "function") {
                return;
              }
              if (failedBoundaries === null) {
                failedBoundaries = /* @__PURE__ */ new WeakSet();
              }
              failedBoundaries.add(fiber);
            }
          }
          var scheduleRefresh = function(root4, update) {
            {
              if (resolveFamily === null) {
                return;
              }
              var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
              flushPassiveEffects();
              flushSync3(function() {
                scheduleFibersWithFamiliesRecursively(root4.current, updatedFamilies, staleFamilies);
              });
            }
          };
          var scheduleRoot = function(root4, element) {
            {
              if (root4.context !== emptyContextObject) {
                return;
              }
              flushPassiveEffects();
              flushSync3(function() {
                updateContainer(element, root4, null, null);
              });
            }
          };
          function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
            {
              var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type4 = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type4;
                  break;
                case ForwardRef:
                  candidateType = type4.render;
                  break;
              }
              if (resolveFamily === null) {
                throw new Error("Expected resolveFamily to be set during hot reload.");
              }
              var needsRender = false;
              var needsRemount = false;
              if (candidateType !== null) {
                var family = resolveFamily(candidateType);
                if (family !== void 0) {
                  if (staleFamilies.has(family)) {
                    needsRemount = true;
                  } else if (updatedFamilies.has(family)) {
                    if (tag === ClassComponent) {
                      needsRemount = true;
                    } else {
                      needsRender = true;
                    }
                  }
                }
              }
              if (failedBoundaries !== null) {
                if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                  needsRemount = true;
                }
              }
              if (needsRemount) {
                fiber._debugNeedsRemount = true;
              }
              if (needsRemount || needsRender) {
                var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (_root !== null) {
                  scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
                }
              }
              if (child !== null && !needsRemount) {
                scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
              }
              if (sibling !== null) {
                scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
              }
            }
          }
          var findHostInstancesForRefresh = function(root4, families) {
            {
              var hostInstances = /* @__PURE__ */ new Set();
              var types2 = new Set(families.map(function(family) {
                return family.current;
              }));
              findHostInstancesForMatchingFibersRecursively(root4.current, types2, hostInstances);
              return hostInstances;
            }
          };
          function findHostInstancesForMatchingFibersRecursively(fiber, types2, hostInstances) {
            {
              var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type4 = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type4;
                  break;
                case ForwardRef:
                  candidateType = type4.render;
                  break;
              }
              var didMatch = false;
              if (candidateType !== null) {
                if (types2.has(candidateType)) {
                  didMatch = true;
                }
              }
              if (didMatch) {
                findHostInstancesForFiberShallowly(fiber, hostInstances);
              } else {
                if (child !== null) {
                  findHostInstancesForMatchingFibersRecursively(child, types2, hostInstances);
                }
              }
              if (sibling !== null) {
                findHostInstancesForMatchingFibersRecursively(sibling, types2, hostInstances);
              }
            }
          }
          function findHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
              if (foundHostInstances) {
                return;
              }
              var node = fiber;
              while (true) {
                switch (node.tag) {
                  case HostComponent:
                    hostInstances.add(node.stateNode);
                    return;
                  case HostPortal:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                  case HostRoot:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                }
                if (node.return === null) {
                  throw new Error("Expected to reach root first.");
                }
                node = node.return;
              }
            }
          }
          function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var node = fiber;
              var foundHostInstances = false;
              while (true) {
                if (node.tag === HostComponent) {
                  foundHostInstances = true;
                  hostInstances.add(node.stateNode);
                } else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === fiber) {
                  return foundHostInstances;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === fiber) {
                    return foundHostInstances;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
            return false;
          }
          var hasBadMapPolyfill;
          {
            hasBadMapPolyfill = false;
            try {
              var nonExtensibleObject = Object.preventExtensions({});
              /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
              /* @__PURE__ */ new Set([nonExtensibleObject]);
            } catch (e3) {
              hasBadMapPolyfill = true;
            }
          }
          function FiberNode(tag, pendingProps, key2, mode) {
            this.tag = tag;
            this.key = key2;
            this.elementType = null;
            this.type = null;
            this.stateNode = null;
            this.return = null;
            this.child = null;
            this.sibling = null;
            this.index = 0;
            this.ref = null;
            this.pendingProps = pendingProps;
            this.memoizedProps = null;
            this.updateQueue = null;
            this.memoizedState = null;
            this.dependencies = null;
            this.mode = mode;
            this.flags = NoFlags;
            this.subtreeFlags = NoFlags;
            this.deletions = null;
            this.lanes = NoLanes;
            this.childLanes = NoLanes;
            this.alternate = null;
            {
              this.actualDuration = Number.NaN;
              this.actualStartTime = Number.NaN;
              this.selfBaseDuration = Number.NaN;
              this.treeBaseDuration = Number.NaN;
              this.actualDuration = 0;
              this.actualStartTime = -1;
              this.selfBaseDuration = 0;
              this.treeBaseDuration = 0;
            }
            {
              this._debugSource = null;
              this._debugOwner = null;
              this._debugNeedsRemount = false;
              this._debugHookTypes = null;
              if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
                Object.preventExtensions(this);
              }
            }
          }
          var createFiber = function(tag, pendingProps, key2, mode) {
            return new FiberNode(tag, pendingProps, key2, mode);
          };
          function shouldConstruct$1(Component20) {
            var prototype3 = Component20.prototype;
            return !!(prototype3 && prototype3.isReactComponent);
          }
          function isSimpleFunctionComponent(type4) {
            return typeof type4 === "function" && !shouldConstruct$1(type4) && type4.defaultProps === void 0;
          }
          function resolveLazyComponentTag(Component20) {
            if (typeof Component20 === "function") {
              return shouldConstruct$1(Component20) ? ClassComponent : FunctionComponent;
            } else if (Component20 !== void 0 && Component20 !== null) {
              var $$typeof = Component20.$$typeof;
              if ($$typeof === REACT_FORWARD_REF_TYPE) {
                return ForwardRef;
              }
              if ($$typeof === REACT_MEMO_TYPE) {
                return MemoComponent;
              }
            }
            return IndeterminateComponent;
          }
          function createWorkInProgress(current2, pendingProps) {
            var workInProgress2 = current2.alternate;
            if (workInProgress2 === null) {
              workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
              workInProgress2.elementType = current2.elementType;
              workInProgress2.type = current2.type;
              workInProgress2.stateNode = current2.stateNode;
              {
                workInProgress2._debugSource = current2._debugSource;
                workInProgress2._debugOwner = current2._debugOwner;
                workInProgress2._debugHookTypes = current2._debugHookTypes;
              }
              workInProgress2.alternate = current2;
              current2.alternate = workInProgress2;
            } else {
              workInProgress2.pendingProps = pendingProps;
              workInProgress2.type = current2.type;
              workInProgress2.flags = NoFlags;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              {
                workInProgress2.actualDuration = 0;
                workInProgress2.actualStartTime = -1;
              }
            }
            workInProgress2.flags = current2.flags & StaticMask;
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            workInProgress2.sibling = current2.sibling;
            workInProgress2.index = current2.index;
            workInProgress2.ref = current2.ref;
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
            {
              workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
              switch (workInProgress2.tag) {
                case IndeterminateComponent:
                case FunctionComponent:
                case SimpleMemoComponent:
                  workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                  break;
                case ClassComponent:
                  workInProgress2.type = resolveClassForHotReloading(current2.type);
                  break;
                case ForwardRef:
                  workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                  break;
              }
            }
            return workInProgress2;
          }
          function resetWorkInProgress(workInProgress2, renderLanes2) {
            workInProgress2.flags &= StaticMask | Placement;
            var current2 = workInProgress2.alternate;
            if (current2 === null) {
              workInProgress2.childLanes = NoLanes;
              workInProgress2.lanes = renderLanes2;
              workInProgress2.child = null;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.memoizedProps = null;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              workInProgress2.dependencies = null;
              workInProgress2.stateNode = null;
              {
                workInProgress2.selfBaseDuration = 0;
                workInProgress2.treeBaseDuration = 0;
              }
            } else {
              workInProgress2.childLanes = current2.childLanes;
              workInProgress2.lanes = current2.lanes;
              workInProgress2.child = current2.child;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              workInProgress2.memoizedProps = current2.memoizedProps;
              workInProgress2.memoizedState = current2.memoizedState;
              workInProgress2.updateQueue = current2.updateQueue;
              workInProgress2.type = current2.type;
              var currentDependencies = current2.dependencies;
              workInProgress2.dependencies = currentDependencies === null ? null : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext
              };
              {
                workInProgress2.selfBaseDuration = current2.selfBaseDuration;
                workInProgress2.treeBaseDuration = current2.treeBaseDuration;
              }
            }
            return workInProgress2;
          }
          function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
            var mode;
            if (tag === ConcurrentRoot) {
              mode = ConcurrentMode;
              if (isStrictMode === true) {
                mode |= StrictLegacyMode;
                {
                  mode |= StrictEffectsMode;
                }
              }
            } else {
              mode = NoMode;
            }
            if (isDevToolsPresent) {
              mode |= ProfileMode;
            }
            return createFiber(HostRoot, null, null, mode);
          }
          function createFiberFromTypeAndProps(type4, key2, pendingProps, owner, mode, lanes) {
            var fiberTag = IndeterminateComponent;
            var resolvedType = type4;
            if (typeof type4 === "function") {
              if (shouldConstruct$1(type4)) {
                fiberTag = ClassComponent;
                {
                  resolvedType = resolveClassForHotReloading(resolvedType);
                }
              } else {
                {
                  resolvedType = resolveFunctionForHotReloading(resolvedType);
                }
              }
            } else if (typeof type4 === "string") {
              fiberTag = HostComponent;
            } else {
              getTag:
                switch (type4) {
                  case REACT_FRAGMENT_TYPE:
                    return createFiberFromFragment(pendingProps.children, mode, lanes, key2);
                  case REACT_STRICT_MODE_TYPE:
                    fiberTag = Mode;
                    mode |= StrictLegacyMode;
                    if ((mode & ConcurrentMode) !== NoMode) {
                      mode |= StrictEffectsMode;
                    }
                    break;
                  case REACT_PROFILER_TYPE:
                    return createFiberFromProfiler(pendingProps, mode, lanes, key2);
                  case REACT_SUSPENSE_TYPE:
                    return createFiberFromSuspense(pendingProps, mode, lanes, key2);
                  case REACT_SUSPENSE_LIST_TYPE:
                    return createFiberFromSuspenseList(pendingProps, mode, lanes, key2);
                  case REACT_OFFSCREEN_TYPE:
                    return createFiberFromOffscreen(pendingProps, mode, lanes, key2);
                  case REACT_LEGACY_HIDDEN_TYPE:
                  case REACT_SCOPE_TYPE:
                  case REACT_CACHE_TYPE:
                  case REACT_TRACING_MARKER_TYPE:
                  case REACT_DEBUG_TRACING_MODE_TYPE:
                  default: {
                    if (typeof type4 === "object" && type4 !== null) {
                      switch (type4.$$typeof) {
                        case REACT_PROVIDER_TYPE:
                          fiberTag = ContextProvider;
                          break getTag;
                        case REACT_CONTEXT_TYPE:
                          fiberTag = ContextConsumer;
                          break getTag;
                        case REACT_FORWARD_REF_TYPE:
                          fiberTag = ForwardRef;
                          {
                            resolvedType = resolveForwardRefForHotReloading(resolvedType);
                          }
                          break getTag;
                        case REACT_MEMO_TYPE:
                          fiberTag = MemoComponent;
                          break getTag;
                        case REACT_LAZY_TYPE:
                          fiberTag = LazyComponent;
                          resolvedType = null;
                          break getTag;
                      }
                    }
                    var info = "";
                    {
                      if (type4 === void 0 || typeof type4 === "object" && type4 !== null && Object.keys(type4).length === 0) {
                        info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                      }
                      var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                      if (ownerName) {
                        info += "\n\nCheck the render method of `" + ownerName + "`.";
                      }
                    }
                    throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type4 == null ? type4 : typeof type4) + "." + info));
                  }
                }
            }
            var fiber = createFiber(fiberTag, pendingProps, key2, mode);
            fiber.elementType = type4;
            fiber.type = resolvedType;
            fiber.lanes = lanes;
            {
              fiber._debugOwner = owner;
            }
            return fiber;
          }
          function createFiberFromElement(element, mode, lanes) {
            var owner = null;
            {
              owner = element._owner;
            }
            var type4 = element.type;
            var key2 = element.key;
            var pendingProps = element.props;
            var fiber = createFiberFromTypeAndProps(type4, key2, pendingProps, owner, mode, lanes);
            {
              fiber._debugSource = element._source;
              fiber._debugOwner = element._owner;
            }
            return fiber;
          }
          function createFiberFromFragment(elements, mode, lanes, key2) {
            var fiber = createFiber(Fragment29, elements, key2, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromProfiler(pendingProps, mode, lanes, key2) {
            {
              if (typeof pendingProps.id !== "string") {
                error2('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
              }
            }
            var fiber = createFiber(Profiler, pendingProps, key2, mode | ProfileMode);
            fiber.elementType = REACT_PROFILER_TYPE;
            fiber.lanes = lanes;
            {
              fiber.stateNode = {
                effectDuration: 0,
                passiveEffectDuration: 0
              };
            }
            return fiber;
          }
          function createFiberFromSuspense(pendingProps, mode, lanes, key2) {
            var fiber = createFiber(SuspenseComponent, pendingProps, key2, mode);
            fiber.elementType = REACT_SUSPENSE_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromSuspenseList(pendingProps, mode, lanes, key2) {
            var fiber = createFiber(SuspenseListComponent, pendingProps, key2, mode);
            fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromOffscreen(pendingProps, mode, lanes, key2) {
            var fiber = createFiber(OffscreenComponent, pendingProps, key2, mode);
            fiber.elementType = REACT_OFFSCREEN_TYPE;
            fiber.lanes = lanes;
            var primaryChildInstance = {
              isHidden: false
            };
            fiber.stateNode = primaryChildInstance;
            return fiber;
          }
          function createFiberFromText(content, mode, lanes) {
            var fiber = createFiber(HostText, content, null, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromHostInstanceForDeletion() {
            var fiber = createFiber(HostComponent, null, null, NoMode);
            fiber.elementType = "DELETED";
            return fiber;
          }
          function createFiberFromDehydratedFragment(dehydratedNode) {
            var fiber = createFiber(DehydratedFragment, null, null, NoMode);
            fiber.stateNode = dehydratedNode;
            return fiber;
          }
          function createFiberFromPortal(portal, mode, lanes) {
            var pendingProps = portal.children !== null ? portal.children : [];
            var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
            fiber.lanes = lanes;
            fiber.stateNode = {
              containerInfo: portal.containerInfo,
              pendingChildren: null,
              // Used by persistent updates
              implementation: portal.implementation
            };
            return fiber;
          }
          function assignFiberPropertiesInDEV(target, source) {
            if (target === null) {
              target = createFiber(IndeterminateComponent, null, null, NoMode);
            }
            target.tag = source.tag;
            target.key = source.key;
            target.elementType = source.elementType;
            target.type = source.type;
            target.stateNode = source.stateNode;
            target.return = source.return;
            target.child = source.child;
            target.sibling = source.sibling;
            target.index = source.index;
            target.ref = source.ref;
            target.pendingProps = source.pendingProps;
            target.memoizedProps = source.memoizedProps;
            target.updateQueue = source.updateQueue;
            target.memoizedState = source.memoizedState;
            target.dependencies = source.dependencies;
            target.mode = source.mode;
            target.flags = source.flags;
            target.subtreeFlags = source.subtreeFlags;
            target.deletions = source.deletions;
            target.lanes = source.lanes;
            target.childLanes = source.childLanes;
            target.alternate = source.alternate;
            {
              target.actualDuration = source.actualDuration;
              target.actualStartTime = source.actualStartTime;
              target.selfBaseDuration = source.selfBaseDuration;
              target.treeBaseDuration = source.treeBaseDuration;
            }
            target._debugSource = source._debugSource;
            target._debugOwner = source._debugOwner;
            target._debugNeedsRemount = source._debugNeedsRemount;
            target._debugHookTypes = source._debugHookTypes;
            return target;
          }
          function FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError) {
            this.tag = tag;
            this.containerInfo = containerInfo;
            this.pendingChildren = null;
            this.current = null;
            this.pingCache = null;
            this.finishedWork = null;
            this.timeoutHandle = noTimeout;
            this.context = null;
            this.pendingContext = null;
            this.callbackNode = null;
            this.callbackPriority = NoLane;
            this.eventTimes = createLaneMap(NoLanes);
            this.expirationTimes = createLaneMap(NoTimestamp);
            this.pendingLanes = NoLanes;
            this.suspendedLanes = NoLanes;
            this.pingedLanes = NoLanes;
            this.expiredLanes = NoLanes;
            this.mutableReadLanes = NoLanes;
            this.finishedLanes = NoLanes;
            this.entangledLanes = NoLanes;
            this.entanglements = createLaneMap(NoLanes);
            this.identifierPrefix = identifierPrefix;
            this.onRecoverableError = onRecoverableError;
            {
              this.mutableSourceEagerHydrationData = null;
            }
            {
              this.effectDuration = 0;
              this.passiveEffectDuration = 0;
            }
            {
              this.memoizedUpdaters = /* @__PURE__ */ new Set();
              var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
              for (var _i = 0; _i < TotalLanes; _i++) {
                pendingUpdatersLaneMap.push(/* @__PURE__ */ new Set());
              }
            }
            {
              switch (tag) {
                case ConcurrentRoot:
                  this._debugRootType = hydrate2 ? "hydrateRoot()" : "createRoot()";
                  break;
                case LegacyRoot:
                  this._debugRootType = hydrate2 ? "hydrate()" : "render()";
                  break;
              }
            }
          }
          function createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var root4 = new FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError);
            var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
            root4.current = uninitializedFiber;
            uninitializedFiber.stateNode = root4;
            {
              var _initialState = {
                element: initialChildren,
                isDehydrated: hydrate2,
                cache: null,
                // not enabled yet
                transitions: null,
                pendingSuspenseBoundaries: null
              };
              uninitializedFiber.memoizedState = _initialState;
            }
            initializeUpdateQueue(uninitializedFiber);
            return root4;
          }
          var ReactVersion = "18.2.0";
          function createPortal2(children, containerInfo, implementation) {
            var key2 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
            {
              checkKeyStringCoercion(key2);
            }
            return {
              // This tag allow us to uniquely identify this as a React Portal
              $$typeof: REACT_PORTAL_TYPE,
              key: key2 == null ? null : "" + key2,
              children,
              containerInfo,
              implementation
            };
          }
          var didWarnAboutNestedUpdates;
          var didWarnAboutFindNodeInStrictMode;
          {
            didWarnAboutNestedUpdates = false;
            didWarnAboutFindNodeInStrictMode = {};
          }
          function getContextForSubtree(parentComponent) {
            if (!parentComponent) {
              return emptyContextObject;
            }
            var fiber = get3(parentComponent);
            var parentContext = findCurrentUnmaskedContext(fiber);
            if (fiber.tag === ClassComponent) {
              var Component20 = fiber.type;
              if (isContextProvider(Component20)) {
                return processChildContext(fiber, Component20, parentContext);
              }
            }
            return parentContext;
          }
          function findHostInstanceWithWarning(component, methodName) {
            {
              var fiber = get3(component);
              if (fiber === void 0) {
                if (typeof component.render === "function") {
                  throw new Error("Unable to find node on an unmounted component.");
                } else {
                  var keys2 = Object.keys(component).join(",");
                  throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys2);
                }
              }
              var hostFiber = findCurrentHostFiber(fiber);
              if (hostFiber === null) {
                return null;
              }
              if (hostFiber.mode & StrictLegacyMode) {
                var componentName = getComponentNameFromFiber(fiber) || "Component";
                if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                  didWarnAboutFindNodeInStrictMode[componentName] = true;
                  var previousFiber = current;
                  try {
                    setCurrentFiber(hostFiber);
                    if (fiber.mode & StrictLegacyMode) {
                      error2("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    } else {
                      error2("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    }
                  } finally {
                    if (previousFiber) {
                      setCurrentFiber(previousFiber);
                    } else {
                      resetCurrentFiber();
                    }
                  }
                }
              }
              return hostFiber.stateNode;
            }
          }
          function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = false;
            var initialChildren = null;
            return createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          }
          function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = true;
            var root4 = createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            root4.context = getContextForSubtree(null);
            var current2 = root4.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current2);
            var update = createUpdate(eventTime, lane);
            update.callback = callback !== void 0 && callback !== null ? callback : null;
            enqueueUpdate(current2, update, lane);
            scheduleInitialHydrationOnRoot(root4, lane, eventTime);
            return root4;
          }
          function updateContainer(element, container, parentComponent, callback) {
            {
              onScheduleRoot(container, element);
            }
            var current$1 = container.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current$1);
            {
              markRenderScheduled(lane);
            }
            var context2 = getContextForSubtree(parentComponent);
            if (container.context === null) {
              container.context = context2;
            } else {
              container.pendingContext = context2;
            }
            {
              if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
                didWarnAboutNestedUpdates = true;
                error2("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current) || "Unknown");
              }
            }
            var update = createUpdate(eventTime, lane);
            update.payload = {
              element
            };
            callback = callback === void 0 ? null : callback;
            if (callback !== null) {
              {
                if (typeof callback !== "function") {
                  error2("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
                }
              }
              update.callback = callback;
            }
            var root4 = enqueueUpdate(current$1, update, lane);
            if (root4 !== null) {
              scheduleUpdateOnFiber(root4, current$1, lane, eventTime);
              entangleTransitions(root4, current$1, lane);
            }
            return lane;
          }
          function getPublicRootInstance(container) {
            var containerFiber = container.current;
            if (!containerFiber.child) {
              return null;
            }
            switch (containerFiber.child.tag) {
              case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
              default:
                return containerFiber.child.stateNode;
            }
          }
          function attemptSynchronousHydration$1(fiber) {
            switch (fiber.tag) {
              case HostRoot: {
                var root4 = fiber.stateNode;
                if (isRootDehydrated(root4)) {
                  var lanes = getHighestPriorityPendingLanes(root4);
                  flushRoot(root4, lanes);
                }
                break;
              }
              case SuspenseComponent: {
                flushSync3(function() {
                  var root5 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                  if (root5 !== null) {
                    var eventTime = requestEventTime();
                    scheduleUpdateOnFiber(root5, fiber, SyncLane, eventTime);
                  }
                });
                var retryLane = SyncLane;
                markRetryLaneIfNotHydrated(fiber, retryLane);
                break;
              }
            }
          }
          function markRetryLaneImpl(fiber, retryLane) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState !== null && suspenseState.dehydrated !== null) {
              suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
            }
          }
          function markRetryLaneIfNotHydrated(fiber, retryLane) {
            markRetryLaneImpl(fiber, retryLane);
            var alternate = fiber.alternate;
            if (alternate) {
              markRetryLaneImpl(alternate, retryLane);
            }
          }
          function attemptContinuousHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = SelectiveHydrationLane;
            var root4 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root4 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root4, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function attemptHydrationAtCurrentPriority$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = requestUpdateLane(fiber);
            var root4 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root4 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root4, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function findHostInstanceWithNoPortals(fiber) {
            var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          var shouldErrorImpl = function(fiber) {
            return null;
          };
          function shouldError(fiber) {
            return shouldErrorImpl(fiber);
          }
          var shouldSuspendImpl = function(fiber) {
            return false;
          };
          function shouldSuspend(fiber) {
            return shouldSuspendImpl(fiber);
          }
          var overrideHookState = null;
          var overrideHookStateDeletePath = null;
          var overrideHookStateRenamePath = null;
          var overrideProps = null;
          var overridePropsDeletePath = null;
          var overridePropsRenamePath = null;
          var scheduleUpdate = null;
          var setErrorHandler = null;
          var setSuspenseHandler = null;
          {
            var copyWithDeleteImpl = function(obj, path2, index3) {
              var key2 = path2[index3];
              var updated = isArray2(obj) ? obj.slice() : assign({}, obj);
              if (index3 + 1 === path2.length) {
                if (isArray2(updated)) {
                  updated.splice(key2, 1);
                } else {
                  delete updated[key2];
                }
                return updated;
              }
              updated[key2] = copyWithDeleteImpl(obj[key2], path2, index3 + 1);
              return updated;
            };
            var copyWithDelete = function(obj, path2) {
              return copyWithDeleteImpl(obj, path2, 0);
            };
            var copyWithRenameImpl = function(obj, oldPath, newPath, index3) {
              var oldKey = oldPath[index3];
              var updated = isArray2(obj) ? obj.slice() : assign({}, obj);
              if (index3 + 1 === oldPath.length) {
                var newKey = newPath[index3];
                updated[newKey] = updated[oldKey];
                if (isArray2(updated)) {
                  updated.splice(oldKey, 1);
                } else {
                  delete updated[oldKey];
                }
              } else {
                updated[oldKey] = copyWithRenameImpl(
                  // $FlowFixMe number or string is fine here
                  obj[oldKey],
                  oldPath,
                  newPath,
                  index3 + 1
                );
              }
              return updated;
            };
            var copyWithRename = function(obj, oldPath, newPath) {
              if (oldPath.length !== newPath.length) {
                warn3("copyWithRename() expects paths of the same length");
                return;
              } else {
                for (var i3 = 0; i3 < newPath.length - 1; i3++) {
                  if (oldPath[i3] !== newPath[i3]) {
                    warn3("copyWithRename() expects paths to be the same except for the deepest key");
                    return;
                  }
                }
              }
              return copyWithRenameImpl(obj, oldPath, newPath, 0);
            };
            var copyWithSetImpl = function(obj, path2, index3, value) {
              if (index3 >= path2.length) {
                return value;
              }
              var key2 = path2[index3];
              var updated = isArray2(obj) ? obj.slice() : assign({}, obj);
              updated[key2] = copyWithSetImpl(obj[key2], path2, index3 + 1, value);
              return updated;
            };
            var copyWithSet = function(obj, path2, value) {
              return copyWithSetImpl(obj, path2, 0, value);
            };
            var findHook = function(fiber, id2) {
              var currentHook2 = fiber.memoizedState;
              while (currentHook2 !== null && id2 > 0) {
                currentHook2 = currentHook2.next;
                id2--;
              }
              return currentHook2;
            };
            overrideHookState = function(fiber, id2, path2, value) {
              var hook = findHook(fiber, id2);
              if (hook !== null) {
                var newState = copyWithSet(hook.memoizedState, path2, value);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign({}, fiber.memoizedProps);
                var root4 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root4 !== null) {
                  scheduleUpdateOnFiber(root4, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateDeletePath = function(fiber, id2, path2) {
              var hook = findHook(fiber, id2);
              if (hook !== null) {
                var newState = copyWithDelete(hook.memoizedState, path2);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign({}, fiber.memoizedProps);
                var root4 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root4 !== null) {
                  scheduleUpdateOnFiber(root4, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateRenamePath = function(fiber, id2, oldPath, newPath) {
              var hook = findHook(fiber, id2);
              if (hook !== null) {
                var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign({}, fiber.memoizedProps);
                var root4 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root4 !== null) {
                  scheduleUpdateOnFiber(root4, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideProps = function(fiber, path2, value) {
              fiber.pendingProps = copyWithSet(fiber.memoizedProps, path2, value);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root4 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root4 !== null) {
                scheduleUpdateOnFiber(root4, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsDeletePath = function(fiber, path2) {
              fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path2);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root4 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root4 !== null) {
                scheduleUpdateOnFiber(root4, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsRenamePath = function(fiber, oldPath, newPath) {
              fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root4 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root4 !== null) {
                scheduleUpdateOnFiber(root4, fiber, SyncLane, NoTimestamp);
              }
            };
            scheduleUpdate = function(fiber) {
              var root4 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root4 !== null) {
                scheduleUpdateOnFiber(root4, fiber, SyncLane, NoTimestamp);
              }
            };
            setErrorHandler = function(newShouldErrorImpl) {
              shouldErrorImpl = newShouldErrorImpl;
            };
            setSuspenseHandler = function(newShouldSuspendImpl) {
              shouldSuspendImpl = newShouldSuspendImpl;
            };
          }
          function findHostInstanceByFiber(fiber) {
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          function emptyFindFiberByHostInstance(instance2) {
            return null;
          }
          function getCurrentFiberForDevTools() {
            return current;
          }
          function injectIntoDevTools(devToolsConfig) {
            var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
            var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
            return injectInternals({
              bundleType: devToolsConfig.bundleType,
              version: devToolsConfig.version,
              rendererPackageName: devToolsConfig.rendererPackageName,
              rendererConfig: devToolsConfig.rendererConfig,
              overrideHookState,
              overrideHookStateDeletePath,
              overrideHookStateRenamePath,
              overrideProps,
              overridePropsDeletePath,
              overridePropsRenamePath,
              setErrorHandler,
              setSuspenseHandler,
              scheduleUpdate,
              currentDispatcherRef: ReactCurrentDispatcher2,
              findHostInstanceByFiber,
              findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
              // React Refresh
              findHostInstancesForRefresh,
              scheduleRefresh,
              scheduleRoot,
              setRefreshHandler,
              // Enables DevTools to append owner stacks to error messages in DEV mode.
              getCurrentFiber: getCurrentFiberForDevTools,
              // Enables DevTools to detect reconciler version rather than renderer version
              // which may not match for third party renderers.
              reconcilerVersion: ReactVersion
            });
          }
          var defaultOnRecoverableError = typeof reportError === "function" ? (
            // In modern browsers, reportError will dispatch an error event,
            // emulating an uncaught JavaScript error.
            reportError
          ) : function(error3) {
            console["error"](error3);
          };
          function ReactDOMRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
            var root4 = this._internalRoot;
            if (root4 === null) {
              throw new Error("Cannot update an unmounted root.");
            }
            {
              if (typeof arguments[1] === "function") {
                error2("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              } else if (isValidContainer(arguments[1])) {
                error2("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
              } else if (typeof arguments[1] !== "undefined") {
                error2("You passed a second argument to root.render(...) but it only accepts one argument.");
              }
              var container = root4.containerInfo;
              if (container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(root4.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error2("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                  }
                }
              }
            }
            updateContainer(children, root4, null, null);
          };
          ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
            {
              if (typeof arguments[0] === "function") {
                error2("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
            }
            var root4 = this._internalRoot;
            if (root4 !== null) {
              this._internalRoot = null;
              var container = root4.containerInfo;
              {
                if (isAlreadyRendering()) {
                  error2("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
                }
              }
              flushSync3(function() {
                updateContainer(null, root4, null, null);
              });
              unmarkContainerAsRoot(container);
            }
          };
          function createRoot2(container, options2) {
            if (!isValidContainer(container)) {
              throw new Error("createRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container);
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            var transitionCallbacks = null;
            if (options2 !== null && options2 !== void 0) {
              {
                if (options2.hydrate) {
                  warn3("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
                } else {
                  if (typeof options2 === "object" && options2 !== null && options2.$$typeof === REACT_ELEMENT_TYPE) {
                    error2("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
                  }
                }
              }
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
              if (options2.transitionCallbacks !== void 0) {
                transitionCallbacks = options2.transitionCallbacks;
              }
            }
            var root4 = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root4.current, container);
            var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(rootContainerElement);
            return new ReactDOMRoot(root4);
          }
          function ReactDOMHydrationRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          function scheduleHydration(target) {
            if (target) {
              queueExplicitHydrationTarget(target);
            }
          }
          ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
          function hydrateRoot(container, initialChildren, options2) {
            if (!isValidContainer(container)) {
              throw new Error("hydrateRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container);
            {
              if (initialChildren === void 0) {
                error2("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
              }
            }
            var hydrationCallbacks = options2 != null ? options2 : null;
            var mutableSources = options2 != null && options2.hydratedSources || null;
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            if (options2 !== null && options2 !== void 0) {
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
            }
            var root4 = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root4.current, container);
            listenToAllSupportedEvents(container);
            if (mutableSources) {
              for (var i3 = 0; i3 < mutableSources.length; i3++) {
                var mutableSource = mutableSources[i3];
                registerMutableSourceForHydration(root4, mutableSource);
              }
            }
            return new ReactDOMHydrationRoot(root4);
          }
          function isValidContainer(node) {
            return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
          }
          function isValidContainerLegacy(node) {
            return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
          }
          function warnIfReactDOMContainerInDEV(container) {
            {
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error2("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
              }
              if (isContainerMarkedAsRoot(container)) {
                if (container._reactRootContainer) {
                  error2("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
                } else {
                  error2("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
                }
              }
            }
          }
          var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
          var topLevelUpdateWarnings;
          {
            topLevelUpdateWarnings = function(container) {
              if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error2("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                  }
                }
              }
              var isRootRenderedBySomeReact = !!container._reactRootContainer;
              var rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
              if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
                error2("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
              }
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error2("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
              }
            };
          }
          function getReactRootElementInContainer(container) {
            if (!container) {
              return null;
            }
            if (container.nodeType === DOCUMENT_NODE) {
              return container.documentElement;
            } else {
              return container.firstChild;
            }
          }
          function noopOnRecoverableError() {
          }
          function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
            if (isHydrationContainer) {
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance2 = getPublicRootInstance(root4);
                  originalCallback.call(instance2);
                };
              }
              var root4 = createHydrationContainer(
                initialChildren,
                callback,
                container,
                LegacyRoot,
                null,
                // hydrationCallbacks
                false,
                // isStrictMode
                false,
                // concurrentUpdatesByDefaultOverride,
                "",
                // identifierPrefix
                noopOnRecoverableError
              );
              container._reactRootContainer = root4;
              markContainerAsRoot(root4.current, container);
              var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(rootContainerElement);
              flushSync3();
              return root4;
            } else {
              var rootSibling;
              while (rootSibling = container.lastChild) {
                container.removeChild(rootSibling);
              }
              if (typeof callback === "function") {
                var _originalCallback = callback;
                callback = function() {
                  var instance2 = getPublicRootInstance(_root);
                  _originalCallback.call(instance2);
                };
              }
              var _root = createContainer(
                container,
                LegacyRoot,
                null,
                // hydrationCallbacks
                false,
                // isStrictMode
                false,
                // concurrentUpdatesByDefaultOverride,
                "",
                // identifierPrefix
                noopOnRecoverableError
              );
              container._reactRootContainer = _root;
              markContainerAsRoot(_root.current, container);
              var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(_rootContainerElement);
              flushSync3(function() {
                updateContainer(initialChildren, _root, parentComponent, callback);
              });
              return _root;
            }
          }
          function warnOnInvalidCallback$1(callback, callerName) {
            {
              if (callback !== null && typeof callback !== "function") {
                error2("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            }
          }
          function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
            {
              topLevelUpdateWarnings(container);
              warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
            }
            var maybeRoot = container._reactRootContainer;
            var root4;
            if (!maybeRoot) {
              root4 = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
            } else {
              root4 = maybeRoot;
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance2 = getPublicRootInstance(root4);
                  originalCallback.call(instance2);
                };
              }
              updateContainer(children, root4, parentComponent, callback);
            }
            return getPublicRootInstance(root4);
          }
          function findDOMNode2(componentOrElement) {
            {
              var owner = ReactCurrentOwner$3.current;
              if (owner !== null && owner.stateNode !== null) {
                var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
                if (!warnedAboutRefsInRender) {
                  error2("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
                }
                owner.stateNode._warnedAboutRefsInRender = true;
              }
            }
            if (componentOrElement == null) {
              return null;
            }
            if (componentOrElement.nodeType === ELEMENT_NODE) {
              return componentOrElement;
            }
            {
              return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
            }
          }
          function hydrate(element, container, callback) {
            {
              error2("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error2("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
          }
          function render2(element, container, callback) {
            {
              error2("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error2("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
          }
          function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            {
              error2("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(containerNode)) {
              throw new Error("Target container is not a DOM element.");
            }
            if (parentComponent == null || !has(parentComponent)) {
              throw new Error("parentComponent must be a valid React Component");
            }
            return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
          }
          function unmountComponentAtNode2(container) {
            if (!isValidContainerLegacy(container)) {
              throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error2("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
              }
            }
            if (container._reactRootContainer) {
              {
                var rootEl = getReactRootElementInContainer(container);
                var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
                if (renderedByDifferentReact) {
                  error2("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
                }
              }
              flushSync3(function() {
                legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                  container._reactRootContainer = null;
                  unmarkContainerAsRoot(container);
                });
              });
              return true;
            } else {
              {
                var _rootEl = getReactRootElementInContainer(container);
                var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
                var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;
                if (hasNonRootReactChild) {
                  error2("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
                }
              }
              return false;
            }
          }
          setAttemptSynchronousHydration(attemptSynchronousHydration$1);
          setAttemptContinuousHydration(attemptContinuousHydration$1);
          setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
          setGetCurrentUpdatePriority(getCurrentUpdatePriority);
          setAttemptHydrationAtPriority(runWithPriority);
          {
            if (typeof Map !== "function" || // $FlowIssue Flow incorrectly thinks Map has no prototype
            Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || // $FlowIssue Flow incorrectly thinks Set has no prototype
            Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
              error2("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            }
          }
          setRestoreImplementation(restoreControlledState$3);
          setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync3);
          function createPortal$1(children, container) {
            var key2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            if (!isValidContainer(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            return createPortal2(children, container, null, key2);
          }
          function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
          }
          var Internals = {
            usingClientEntryPoint: false,
            // Keep in sync with ReactTestUtils.js.
            // This is an array for better minification.
            Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
          };
          function createRoot$1(container, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error2('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return createRoot2(container, options2);
          }
          function hydrateRoot$1(container, initialChildren, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error2('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return hydrateRoot(container, initialChildren, options2);
          }
          function flushSync$1(fn2) {
            {
              if (isAlreadyRendering()) {
                error2("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
              }
            }
            return flushSync3(fn2);
          }
          var foundDevTools = injectIntoDevTools({
            findFiberByHostInstance: getClosestInstanceFromNode,
            bundleType: 1,
            version: ReactVersion,
            rendererPackageName: "react-dom"
          });
          {
            if (!foundDevTools && canUseDOM3 && window.top === window.self) {
              if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
                var protocol = window.location.protocol;
                if (/^(https?|file):$/.test(protocol)) {
                  console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
                }
              }
            }
          }
          exports2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
          exports2.createPortal = createPortal$1;
          exports2.createRoot = createRoot$1;
          exports2.findDOMNode = findDOMNode2;
          exports2.flushSync = flushSync$1;
          exports2.hydrate = hydrate;
          exports2.hydrateRoot = hydrateRoot$1;
          exports2.render = render2;
          exports2.unmountComponentAtNode = unmountComponentAtNode2;
          exports2.unstable_batchedUpdates = batchedUpdates$1;
          exports2.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
          exports2.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/react-dom/index.js
  var require_react_dom = __commonJS({
    "node_modules/react-dom/index.js"(exports2, module2) {
      "use strict";
      if (false) {
        checkDCE();
        module2.exports = null;
      } else {
        module2.exports = require_react_dom_development();
      }
    }
  });

  // node_modules/react-dom/client.js
  var require_client = __commonJS({
    "node_modules/react-dom/client.js"(exports2) {
      "use strict";
      var m2 = require_react_dom();
      if (false) {
        exports2.createRoot = m2.createRoot;
        exports2.hydrateRoot = m2.hydrateRoot;
      } else {
        i3 = m2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        exports2.createRoot = function(c2, o3) {
          i3.usingClientEntryPoint = true;
          try {
            return m2.createRoot(c2, o3);
          } finally {
            i3.usingClientEntryPoint = false;
          }
        };
        exports2.hydrateRoot = function(c2, h2, o3) {
          i3.usingClientEntryPoint = true;
          try {
            return m2.hydrateRoot(c2, h2, o3);
          } finally {
            i3.usingClientEntryPoint = false;
          }
        };
      }
      var i3;
    }
  });

  // node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development = __commonJS({
    "node_modules/react-is/cjs/react-is.development.js"(exports2) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var hasSymbol = typeof Symbol === "function" && Symbol.for;
          var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
          var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
          var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
          var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
          var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
          var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
          var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
          var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
          var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
          var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
          var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
          var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
          var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
          var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
          var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
          var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
          var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
          var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
          function isValidElementType2(type4) {
            return typeof type4 === "string" || typeof type4 === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
            type4 === REACT_FRAGMENT_TYPE || type4 === REACT_CONCURRENT_MODE_TYPE || type4 === REACT_PROFILER_TYPE || type4 === REACT_STRICT_MODE_TYPE || type4 === REACT_SUSPENSE_TYPE || type4 === REACT_SUSPENSE_LIST_TYPE || typeof type4 === "object" && type4 !== null && (type4.$$typeof === REACT_LAZY_TYPE || type4.$$typeof === REACT_MEMO_TYPE || type4.$$typeof === REACT_PROVIDER_TYPE || type4.$$typeof === REACT_CONTEXT_TYPE || type4.$$typeof === REACT_FORWARD_REF_TYPE || type4.$$typeof === REACT_FUNDAMENTAL_TYPE || type4.$$typeof === REACT_RESPONDER_TYPE || type4.$$typeof === REACT_SCOPE_TYPE || type4.$$typeof === REACT_BLOCK_TYPE);
          }
          function typeOf(object4) {
            if (typeof object4 === "object" && object4 !== null) {
              var $$typeof = object4.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type4 = object4.type;
                  switch (type4) {
                    case REACT_ASYNC_MODE_TYPE:
                    case REACT_CONCURRENT_MODE_TYPE:
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                      return type4;
                    default:
                      var $$typeofType = type4 && type4.$$typeof;
                      switch ($$typeofType) {
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var AsyncMode = REACT_ASYNC_MODE_TYPE;
          var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element4 = REACT_ELEMENT_TYPE;
          var ForwardRef = REACT_FORWARD_REF_TYPE;
          var Fragment29 = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo = REACT_MEMO_TYPE;
          var Portal3 = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode = REACT_STRICT_MODE_TYPE;
          var Suspense = REACT_SUSPENSE_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          function isAsyncMode(object4) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
              }
            }
            return isConcurrentMode(object4) || typeOf(object4) === REACT_ASYNC_MODE_TYPE;
          }
          function isConcurrentMode(object4) {
            return typeOf(object4) === REACT_CONCURRENT_MODE_TYPE;
          }
          function isContextConsumer2(object4) {
            return typeOf(object4) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object4) {
            return typeOf(object4) === REACT_PROVIDER_TYPE;
          }
          function isElement(object4) {
            return typeof object4 === "object" && object4 !== null && object4.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object4) {
            return typeOf(object4) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment4(object4) {
            return typeOf(object4) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object4) {
            return typeOf(object4) === REACT_LAZY_TYPE;
          }
          function isMemo2(object4) {
            return typeOf(object4) === REACT_MEMO_TYPE;
          }
          function isPortal(object4) {
            return typeOf(object4) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object4) {
            return typeOf(object4) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object4) {
            return typeOf(object4) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object4) {
            return typeOf(object4) === REACT_SUSPENSE_TYPE;
          }
          exports2.AsyncMode = AsyncMode;
          exports2.ConcurrentMode = ConcurrentMode;
          exports2.ContextConsumer = ContextConsumer;
          exports2.ContextProvider = ContextProvider;
          exports2.Element = Element4;
          exports2.ForwardRef = ForwardRef;
          exports2.Fragment = Fragment29;
          exports2.Lazy = Lazy;
          exports2.Memo = Memo;
          exports2.Portal = Portal3;
          exports2.Profiler = Profiler;
          exports2.StrictMode = StrictMode;
          exports2.Suspense = Suspense;
          exports2.isAsyncMode = isAsyncMode;
          exports2.isConcurrentMode = isConcurrentMode;
          exports2.isContextConsumer = isContextConsumer2;
          exports2.isContextProvider = isContextProvider;
          exports2.isElement = isElement;
          exports2.isForwardRef = isForwardRef;
          exports2.isFragment = isFragment4;
          exports2.isLazy = isLazy;
          exports2.isMemo = isMemo2;
          exports2.isPortal = isPortal;
          exports2.isProfiler = isProfiler;
          exports2.isStrictMode = isStrictMode;
          exports2.isSuspense = isSuspense;
          exports2.isValidElementType = isValidElementType2;
          exports2.typeOf = typeOf;
        })();
      }
    }
  });

  // node_modules/react-is/index.js
  var require_react_is = __commonJS({
    "node_modules/react-is/index.js"(exports2, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_react_is_development();
      }
    }
  });

  // node_modules/object-assign/index.js
  var require_object_assign = __commonJS({
    "node_modules/object-assign/index.js"(exports2, module2) {
      "use strict";
      var getOwnPropertySymbols = Object.getOwnPropertySymbols;
      var hasOwnProperty2 = Object.prototype.hasOwnProperty;
      var propIsEnumerable = Object.prototype.propertyIsEnumerable;
      function toObject(val) {
        if (val === null || val === void 0) {
          throw new TypeError("Object.assign cannot be called with null or undefined");
        }
        return Object(val);
      }
      function shouldUseNative() {
        try {
          if (!Object.assign) {
            return false;
          }
          var test1 = new String("abc");
          test1[5] = "de";
          if (Object.getOwnPropertyNames(test1)[0] === "5") {
            return false;
          }
          var test2 = {};
          for (var i3 = 0; i3 < 10; i3++) {
            test2["_" + String.fromCharCode(i3)] = i3;
          }
          var order2 = Object.getOwnPropertyNames(test2).map(function(n4) {
            return test2[n4];
          });
          if (order2.join("") !== "0123456789") {
            return false;
          }
          var test3 = {};
          "abcdefghijklmnopqrst".split("").forEach(function(letter) {
            test3[letter] = letter;
          });
          if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
            return false;
          }
          return true;
        } catch (err) {
          return false;
        }
      }
      module2.exports = shouldUseNative() ? Object.assign : function(target, source) {
        var from;
        var to = toObject(target);
        var symbols;
        for (var s2 = 1; s2 < arguments.length; s2++) {
          from = Object(arguments[s2]);
          for (var key2 in from) {
            if (hasOwnProperty2.call(from, key2)) {
              to[key2] = from[key2];
            }
          }
          if (getOwnPropertySymbols) {
            symbols = getOwnPropertySymbols(from);
            for (var i3 = 0; i3 < symbols.length; i3++) {
              if (propIsEnumerable.call(from, symbols[i3])) {
                to[symbols[i3]] = from[symbols[i3]];
              }
            }
          }
        }
        return to;
      };
    }
  });

  // node_modules/prop-types/lib/ReactPropTypesSecret.js
  var require_ReactPropTypesSecret = __commonJS({
    "node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports2, module2) {
      "use strict";
      var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
      module2.exports = ReactPropTypesSecret;
    }
  });

  // node_modules/prop-types/lib/has.js
  var require_has = __commonJS({
    "node_modules/prop-types/lib/has.js"(exports2, module2) {
      module2.exports = Function.call.bind(Object.prototype.hasOwnProperty);
    }
  });

  // node_modules/prop-types/checkPropTypes.js
  var require_checkPropTypes = __commonJS({
    "node_modules/prop-types/checkPropTypes.js"(exports2, module2) {
      "use strict";
      var printWarning = function() {
      };
      if (true) {
        ReactPropTypesSecret = require_ReactPropTypesSecret();
        loggedTypeFailures = {};
        has = require_has();
        printWarning = function(text) {
          var message = "Warning: " + text;
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x2) {
          }
        };
      }
      var ReactPropTypesSecret;
      var loggedTypeFailures;
      var has;
      function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
        if (true) {
          for (var typeSpecName in typeSpecs) {
            if (has(typeSpecs, typeSpecName)) {
              var error2;
              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err = Error(
                    (componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
                  );
                  err.name = "Invariant Violation";
                  throw err;
                }
                error2 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
              } catch (ex) {
                error2 = ex;
              }
              if (error2 && !(error2 instanceof Error)) {
                printWarning(
                  (componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error2 + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
                );
              }
              if (error2 instanceof Error && !(error2.message in loggedTypeFailures)) {
                loggedTypeFailures[error2.message] = true;
                var stack = getStack ? getStack() : "";
                printWarning(
                  "Failed " + location + " type: " + error2.message + (stack != null ? stack : "")
                );
              }
            }
          }
        }
      }
      checkPropTypes.resetWarningCache = function() {
        if (true) {
          loggedTypeFailures = {};
        }
      };
      module2.exports = checkPropTypes;
    }
  });

  // node_modules/prop-types/factoryWithTypeCheckers.js
  var require_factoryWithTypeCheckers = __commonJS({
    "node_modules/prop-types/factoryWithTypeCheckers.js"(exports2, module2) {
      "use strict";
      var ReactIs = require_react_is();
      var assign = require_object_assign();
      var ReactPropTypesSecret = require_ReactPropTypesSecret();
      var has = require_has();
      var checkPropTypes = require_checkPropTypes();
      var printWarning = function() {
      };
      if (true) {
        printWarning = function(text) {
          var message = "Warning: " + text;
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x2) {
          }
        };
      }
      function emptyFunctionThatReturnsNull() {
        return null;
      }
      module2.exports = function(isValidElement25, throwOnDirectAccess) {
        var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
          if (typeof iteratorFn === "function") {
            return iteratorFn;
          }
        }
        var ANONYMOUS = "<<anonymous>>";
        var ReactPropTypes = {
          array: createPrimitiveTypeChecker("array"),
          bigint: createPrimitiveTypeChecker("bigint"),
          bool: createPrimitiveTypeChecker("boolean"),
          func: createPrimitiveTypeChecker("function"),
          number: createPrimitiveTypeChecker("number"),
          object: createPrimitiveTypeChecker("object"),
          string: createPrimitiveTypeChecker("string"),
          symbol: createPrimitiveTypeChecker("symbol"),
          any: createAnyTypeChecker(),
          arrayOf: createArrayOfTypeChecker,
          element: createElementTypeChecker(),
          elementType: createElementTypeTypeChecker(),
          instanceOf: createInstanceTypeChecker,
          node: createNodeChecker(),
          objectOf: createObjectOfTypeChecker,
          oneOf: createEnumTypeChecker,
          oneOfType: createUnionTypeChecker,
          shape: createShapeTypeChecker,
          exact: createStrictShapeTypeChecker
        };
        function is(x2, y2) {
          if (x2 === y2) {
            return x2 !== 0 || 1 / x2 === 1 / y2;
          } else {
            return x2 !== x2 && y2 !== y2;
          }
        }
        function PropTypeError(message, data) {
          this.message = message;
          this.data = data && typeof data === "object" ? data : {};
          this.stack = "";
        }
        PropTypeError.prototype = Error.prototype;
        function createChainableTypeChecker(validate) {
          if (true) {
            var manualPropTypeCallCache = {};
            var manualPropTypeWarningCount = 0;
          }
          function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
            componentName = componentName || ANONYMOUS;
            propFullName = propFullName || propName;
            if (secret !== ReactPropTypesSecret) {
              if (throwOnDirectAccess) {
                var err = new Error(
                  "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
                );
                err.name = "Invariant Violation";
                throw err;
              } else if (typeof console !== "undefined") {
                var cacheKey = componentName + ":" + propName;
                if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
                manualPropTypeWarningCount < 3) {
                  printWarning(
                    "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
                  );
                  manualPropTypeCallCache[cacheKey] = true;
                  manualPropTypeWarningCount++;
                }
              }
            }
            if (props[propName] == null) {
              if (isRequired) {
                if (props[propName] === null) {
                  return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
                }
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
              }
              return null;
            } else {
              return validate(props, propName, componentName, location, propFullName);
            }
          }
          var chainedCheckType = checkType.bind(null, false);
          chainedCheckType.isRequired = checkType.bind(null, true);
          return chainedCheckType;
        }
        function createPrimitiveTypeChecker(expectedType) {
          function validate(props, propName, componentName, location, propFullName, secret) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== expectedType) {
              var preciseType = getPreciseType(propValue);
              return new PropTypeError(
                "Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."),
                { expectedType }
              );
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createAnyTypeChecker() {
          return createChainableTypeChecker(emptyFunctionThatReturnsNull);
        }
        function createArrayOfTypeChecker(typeChecker) {
          function validate(props, propName, componentName, location, propFullName) {
            if (typeof typeChecker !== "function") {
              return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
            }
            var propValue = props[propName];
            if (!Array.isArray(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
            }
            for (var i3 = 0; i3 < propValue.length; i3++) {
              var error2 = typeChecker(propValue, i3, componentName, location, propFullName + "[" + i3 + "]", ReactPropTypesSecret);
              if (error2 instanceof Error) {
                return error2;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createElementTypeChecker() {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            if (!isValidElement25(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createElementTypeTypeChecker() {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            if (!ReactIs.isValidElementType(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createInstanceTypeChecker(expectedClass) {
          function validate(props, propName, componentName, location, propFullName) {
            if (!(props[propName] instanceof expectedClass)) {
              var expectedClassName = expectedClass.name || ANONYMOUS;
              var actualClassName = getClassName(props[propName]);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createEnumTypeChecker(expectedValues) {
          if (!Array.isArray(expectedValues)) {
            if (true) {
              if (arguments.length > 1) {
                printWarning(
                  "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
                );
              } else {
                printWarning("Invalid argument supplied to oneOf, expected an array.");
              }
            }
            return emptyFunctionThatReturnsNull;
          }
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            for (var i3 = 0; i3 < expectedValues.length; i3++) {
              if (is(propValue, expectedValues[i3])) {
                return null;
              }
            }
            var valuesString = JSON.stringify(expectedValues, function replacer(key2, value) {
              var type4 = getPreciseType(value);
              if (type4 === "symbol") {
                return String(value);
              }
              return value;
            });
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
          }
          return createChainableTypeChecker(validate);
        }
        function createObjectOfTypeChecker(typeChecker) {
          function validate(props, propName, componentName, location, propFullName) {
            if (typeof typeChecker !== "function") {
              return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
            }
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
            }
            for (var key2 in propValue) {
              if (has(propValue, key2)) {
                var error2 = typeChecker(propValue, key2, componentName, location, propFullName + "." + key2, ReactPropTypesSecret);
                if (error2 instanceof Error) {
                  return error2;
                }
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createUnionTypeChecker(arrayOfTypeCheckers) {
          if (!Array.isArray(arrayOfTypeCheckers)) {
            true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
            return emptyFunctionThatReturnsNull;
          }
          for (var i3 = 0; i3 < arrayOfTypeCheckers.length; i3++) {
            var checker = arrayOfTypeCheckers[i3];
            if (typeof checker !== "function") {
              printWarning(
                "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i3 + "."
              );
              return emptyFunctionThatReturnsNull;
            }
          }
          function validate(props, propName, componentName, location, propFullName) {
            var expectedTypes = [];
            for (var i4 = 0; i4 < arrayOfTypeCheckers.length; i4++) {
              var checker2 = arrayOfTypeCheckers[i4];
              var checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
              if (checkerResult == null) {
                return null;
              }
              if (checkerResult.data && has(checkerResult.data, "expectedType")) {
                expectedTypes.push(checkerResult.data.expectedType);
              }
            }
            var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
          }
          return createChainableTypeChecker(validate);
        }
        function createNodeChecker() {
          function validate(props, propName, componentName, location, propFullName) {
            if (!isNode(props[propName])) {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function invalidValidatorError(componentName, location, propFullName, key2, type4) {
          return new PropTypeError(
            (componentName || "React class") + ": " + location + " type `" + propFullName + "." + key2 + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type4 + "`."
          );
        }
        function createShapeTypeChecker(shapeTypes) {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
            }
            for (var key2 in shapeTypes) {
              var checker = shapeTypes[key2];
              if (typeof checker !== "function") {
                return invalidValidatorError(componentName, location, propFullName, key2, getPreciseType(checker));
              }
              var error2 = checker(propValue, key2, componentName, location, propFullName + "." + key2, ReactPropTypesSecret);
              if (error2) {
                return error2;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createStrictShapeTypeChecker(shapeTypes) {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
            }
            var allKeys = assign({}, props[propName], shapeTypes);
            for (var key2 in allKeys) {
              var checker = shapeTypes[key2];
              if (has(shapeTypes, key2) && typeof checker !== "function") {
                return invalidValidatorError(componentName, location, propFullName, key2, getPreciseType(checker));
              }
              if (!checker) {
                return new PropTypeError(
                  "Invalid " + location + " `" + propFullName + "` key `" + key2 + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
                );
              }
              var error2 = checker(propValue, key2, componentName, location, propFullName + "." + key2, ReactPropTypesSecret);
              if (error2) {
                return error2;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function isNode(propValue) {
          switch (typeof propValue) {
            case "number":
            case "string":
            case "undefined":
              return true;
            case "boolean":
              return !propValue;
            case "object":
              if (Array.isArray(propValue)) {
                return propValue.every(isNode);
              }
              if (propValue === null || isValidElement25(propValue)) {
                return true;
              }
              var iteratorFn = getIteratorFn(propValue);
              if (iteratorFn) {
                var iterator = iteratorFn.call(propValue);
                var step;
                if (iteratorFn !== propValue.entries) {
                  while (!(step = iterator.next()).done) {
                    if (!isNode(step.value)) {
                      return false;
                    }
                  }
                } else {
                  while (!(step = iterator.next()).done) {
                    var entry = step.value;
                    if (entry) {
                      if (!isNode(entry[1])) {
                        return false;
                      }
                    }
                  }
                }
              } else {
                return false;
              }
              return true;
            default:
              return false;
          }
        }
        function isSymbol(propType, propValue) {
          if (propType === "symbol") {
            return true;
          }
          if (!propValue) {
            return false;
          }
          if (propValue["@@toStringTag"] === "Symbol") {
            return true;
          }
          if (typeof Symbol === "function" && propValue instanceof Symbol) {
            return true;
          }
          return false;
        }
        function getPropType(propValue) {
          var propType = typeof propValue;
          if (Array.isArray(propValue)) {
            return "array";
          }
          if (propValue instanceof RegExp) {
            return "object";
          }
          if (isSymbol(propType, propValue)) {
            return "symbol";
          }
          return propType;
        }
        function getPreciseType(propValue) {
          if (typeof propValue === "undefined" || propValue === null) {
            return "" + propValue;
          }
          var propType = getPropType(propValue);
          if (propType === "object") {
            if (propValue instanceof Date) {
              return "date";
            } else if (propValue instanceof RegExp) {
              return "regexp";
            }
          }
          return propType;
        }
        function getPostfixForTypeWarning(value) {
          var type4 = getPreciseType(value);
          switch (type4) {
            case "array":
            case "object":
              return "an " + type4;
            case "boolean":
            case "date":
            case "regexp":
              return "a " + type4;
            default:
              return type4;
          }
        }
        function getClassName(propValue) {
          if (!propValue.constructor || !propValue.constructor.name) {
            return ANONYMOUS;
          }
          return propValue.constructor.name;
        }
        ReactPropTypes.checkPropTypes = checkPropTypes;
        ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
        ReactPropTypes.PropTypes = ReactPropTypes;
        return ReactPropTypes;
      };
    }
  });

  // node_modules/prop-types/index.js
  var require_prop_types = __commonJS({
    "node_modules/prop-types/index.js"(exports2, module2) {
      if (true) {
        ReactIs = require_react_is();
        throwOnDirectAccess = true;
        module2.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
      } else {
        module2.exports = null();
      }
      var ReactIs;
      var throwOnDirectAccess;
    }
  });

  // node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js
  var require_hoist_non_react_statics_cjs = __commonJS({
    "node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js"(exports2, module2) {
      "use strict";
      var reactIs = require_react_is();
      var REACT_STATICS = {
        childContextTypes: true,
        contextType: true,
        contextTypes: true,
        defaultProps: true,
        displayName: true,
        getDefaultProps: true,
        getDerivedStateFromError: true,
        getDerivedStateFromProps: true,
        mixins: true,
        propTypes: true,
        type: true
      };
      var KNOWN_STATICS = {
        name: true,
        length: true,
        prototype: true,
        caller: true,
        callee: true,
        arguments: true,
        arity: true
      };
      var FORWARD_REF_STATICS = {
        "$$typeof": true,
        render: true,
        defaultProps: true,
        displayName: true,
        propTypes: true
      };
      var MEMO_STATICS = {
        "$$typeof": true,
        compare: true,
        defaultProps: true,
        displayName: true,
        propTypes: true,
        type: true
      };
      var TYPE_STATICS = {};
      TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
      TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
      function getStatics(component) {
        if (reactIs.isMemo(component)) {
          return MEMO_STATICS;
        }
        return TYPE_STATICS[component["$$typeof"]] || REACT_STATICS;
      }
      var defineProperty = Object.defineProperty;
      var getOwnPropertyNames = Object.getOwnPropertyNames;
      var getOwnPropertySymbols = Object.getOwnPropertySymbols;
      var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
      var getPrototypeOf2 = Object.getPrototypeOf;
      var objectPrototype = Object.prototype;
      function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
        if (typeof sourceComponent !== "string") {
          if (objectPrototype) {
            var inheritedComponent = getPrototypeOf2(sourceComponent);
            if (inheritedComponent && inheritedComponent !== objectPrototype) {
              hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
            }
          }
          var keys2 = getOwnPropertyNames(sourceComponent);
          if (getOwnPropertySymbols) {
            keys2 = keys2.concat(getOwnPropertySymbols(sourceComponent));
          }
          var targetStatics = getStatics(targetComponent);
          var sourceStatics = getStatics(sourceComponent);
          for (var i3 = 0; i3 < keys2.length; ++i3) {
            var key2 = keys2[i3];
            if (!KNOWN_STATICS[key2] && !(blacklist && blacklist[key2]) && !(sourceStatics && sourceStatics[key2]) && !(targetStatics && targetStatics[key2])) {
              var descriptor = getOwnPropertyDescriptor(sourceComponent, key2);
              try {
                defineProperty(targetComponent, key2, descriptor);
              } catch (e3) {
              }
            }
          }
        }
        return targetComponent;
      }
      module2.exports = hoistNonReactStatics;
    }
  });

  // node_modules/classnames/index.js
  var require_classnames = __commonJS({
    "node_modules/classnames/index.js"(exports2, module2) {
      (function() {
        "use strict";
        var hasOwn = {}.hasOwnProperty;
        var nativeCodeString = "[native code]";
        function classNames140() {
          var classes = [];
          for (var i3 = 0; i3 < arguments.length; i3++) {
            var arg = arguments[i3];
            if (!arg)
              continue;
            var argType = typeof arg;
            if (argType === "string" || argType === "number") {
              classes.push(arg);
            } else if (Array.isArray(arg)) {
              if (arg.length) {
                var inner = classNames140.apply(null, arg);
                if (inner) {
                  classes.push(inner);
                }
              }
            } else if (argType === "object") {
              if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes("[native code]")) {
                classes.push(arg.toString());
                continue;
              }
              for (var key2 in arg) {
                if (hasOwn.call(arg, key2) && arg[key2]) {
                  classes.push(key2);
                }
              }
            }
          }
          return classes.join(" ");
        }
        if (typeof module2 !== "undefined" && module2.exports) {
          classNames140.default = classNames140;
          module2.exports = classNames140;
        } else if (typeof define === "function" && typeof define.amd === "object" && define.amd) {
          define("classnames", [], function() {
            return classNames140;
          });
        } else {
          window.classNames = classNames140;
        }
      })();
    }
  });

  // node_modules/lodash/_freeGlobal.js
  var require_freeGlobal = __commonJS({
    "node_modules/lodash/_freeGlobal.js"(exports2, module2) {
      var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
      module2.exports = freeGlobal;
    }
  });

  // node_modules/lodash/_root.js
  var require_root = __commonJS({
    "node_modules/lodash/_root.js"(exports2, module2) {
      var freeGlobal = require_freeGlobal();
      var freeSelf = typeof self == "object" && self && self.Object === Object && self;
      var root3 = freeGlobal || freeSelf || Function("return this")();
      module2.exports = root3;
    }
  });

  // node_modules/lodash/_Symbol.js
  var require_Symbol = __commonJS({
    "node_modules/lodash/_Symbol.js"(exports2, module2) {
      var root3 = require_root();
      var Symbol2 = root3.Symbol;
      module2.exports = Symbol2;
    }
  });

  // node_modules/lodash/_arrayMap.js
  var require_arrayMap = __commonJS({
    "node_modules/lodash/_arrayMap.js"(exports2, module2) {
      function arrayMap(array4, iteratee) {
        var index2 = -1, length = array4 == null ? 0 : array4.length, result2 = Array(length);
        while (++index2 < length) {
          result2[index2] = iteratee(array4[index2], index2, array4);
        }
        return result2;
      }
      module2.exports = arrayMap;
    }
  });

  // node_modules/lodash/isArray.js
  var require_isArray = __commonJS({
    "node_modules/lodash/isArray.js"(exports2, module2) {
      var isArray2 = Array.isArray;
      module2.exports = isArray2;
    }
  });

  // node_modules/lodash/_getRawTag.js
  var require_getRawTag = __commonJS({
    "node_modules/lodash/_getRawTag.js"(exports2, module2) {
      var Symbol2 = require_Symbol();
      var objectProto = Object.prototype;
      var hasOwnProperty2 = objectProto.hasOwnProperty;
      var nativeObjectToString = objectProto.toString;
      var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
      function getRawTag(value) {
        var isOwn = hasOwnProperty2.call(value, symToStringTag), tag = value[symToStringTag];
        try {
          value[symToStringTag] = void 0;
          var unmasked = true;
        } catch (e3) {
        }
        var result2 = nativeObjectToString.call(value);
        if (unmasked) {
          if (isOwn) {
            value[symToStringTag] = tag;
          } else {
            delete value[symToStringTag];
          }
        }
        return result2;
      }
      module2.exports = getRawTag;
    }
  });

  // node_modules/lodash/_objectToString.js
  var require_objectToString = __commonJS({
    "node_modules/lodash/_objectToString.js"(exports2, module2) {
      var objectProto = Object.prototype;
      var nativeObjectToString = objectProto.toString;
      function objectToString(value) {
        return nativeObjectToString.call(value);
      }
      module2.exports = objectToString;
    }
  });

  // node_modules/lodash/_baseGetTag.js
  var require_baseGetTag = __commonJS({
    "node_modules/lodash/_baseGetTag.js"(exports2, module2) {
      var Symbol2 = require_Symbol();
      var getRawTag = require_getRawTag();
      var objectToString = require_objectToString();
      var nullTag = "[object Null]";
      var undefinedTag = "[object Undefined]";
      var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
      function baseGetTag(value) {
        if (value == null) {
          return value === void 0 ? undefinedTag : nullTag;
        }
        return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
      }
      module2.exports = baseGetTag;
    }
  });

  // node_modules/lodash/isObjectLike.js
  var require_isObjectLike = __commonJS({
    "node_modules/lodash/isObjectLike.js"(exports2, module2) {
      function isObjectLike(value) {
        return value != null && typeof value == "object";
      }
      module2.exports = isObjectLike;
    }
  });

  // node_modules/lodash/isSymbol.js
  var require_isSymbol = __commonJS({
    "node_modules/lodash/isSymbol.js"(exports2, module2) {
      var baseGetTag = require_baseGetTag();
      var isObjectLike = require_isObjectLike();
      var symbolTag = "[object Symbol]";
      function isSymbol(value) {
        return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
      }
      module2.exports = isSymbol;
    }
  });

  // node_modules/lodash/_baseToString.js
  var require_baseToString = __commonJS({
    "node_modules/lodash/_baseToString.js"(exports2, module2) {
      var Symbol2 = require_Symbol();
      var arrayMap = require_arrayMap();
      var isArray2 = require_isArray();
      var isSymbol = require_isSymbol();
      var INFINITY = 1 / 0;
      var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
      var symbolToString = symbolProto ? symbolProto.toString : void 0;
      function baseToString(value) {
        if (typeof value == "string") {
          return value;
        }
        if (isArray2(value)) {
          return arrayMap(value, baseToString) + "";
        }
        if (isSymbol(value)) {
          return symbolToString ? symbolToString.call(value) : "";
        }
        var result2 = value + "";
        return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
      }
      module2.exports = baseToString;
    }
  });

  // node_modules/lodash/toString.js
  var require_toString = __commonJS({
    "node_modules/lodash/toString.js"(exports2, module2) {
      var baseToString = require_baseToString();
      function toString3(value) {
        return value == null ? "" : baseToString(value);
      }
      module2.exports = toString3;
    }
  });

  // node_modules/lodash/_baseSlice.js
  var require_baseSlice = __commonJS({
    "node_modules/lodash/_baseSlice.js"(exports2, module2) {
      function baseSlice(array4, start, end) {
        var index2 = -1, length = array4.length;
        if (start < 0) {
          start = -start > length ? 0 : length + start;
        }
        end = end > length ? length : end;
        if (end < 0) {
          end += length;
        }
        length = start > end ? 0 : end - start >>> 0;
        start >>>= 0;
        var result2 = Array(length);
        while (++index2 < length) {
          result2[index2] = array4[index2 + start];
        }
        return result2;
      }
      module2.exports = baseSlice;
    }
  });

  // node_modules/lodash/_castSlice.js
  var require_castSlice = __commonJS({
    "node_modules/lodash/_castSlice.js"(exports2, module2) {
      var baseSlice = require_baseSlice();
      function castSlice(array4, start, end) {
        var length = array4.length;
        end = end === void 0 ? length : end;
        return !start && end >= length ? array4 : baseSlice(array4, start, end);
      }
      module2.exports = castSlice;
    }
  });

  // node_modules/lodash/_hasUnicode.js
  var require_hasUnicode = __commonJS({
    "node_modules/lodash/_hasUnicode.js"(exports2, module2) {
      var rsAstralRange = "\\ud800-\\udfff";
      var rsComboMarksRange = "\\u0300-\\u036f";
      var reComboHalfMarksRange = "\\ufe20-\\ufe2f";
      var rsComboSymbolsRange = "\\u20d0-\\u20ff";
      var rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;
      var rsVarRange = "\\ufe0e\\ufe0f";
      var rsZWJ = "\\u200d";
      var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]");
      function hasUnicode(string3) {
        return reHasUnicode.test(string3);
      }
      module2.exports = hasUnicode;
    }
  });

  // node_modules/lodash/_asciiToArray.js
  var require_asciiToArray = __commonJS({
    "node_modules/lodash/_asciiToArray.js"(exports2, module2) {
      function asciiToArray(string3) {
        return string3.split("");
      }
      module2.exports = asciiToArray;
    }
  });

  // node_modules/lodash/_unicodeToArray.js
  var require_unicodeToArray = __commonJS({
    "node_modules/lodash/_unicodeToArray.js"(exports2, module2) {
      var rsAstralRange = "\\ud800-\\udfff";
      var rsComboMarksRange = "\\u0300-\\u036f";
      var reComboHalfMarksRange = "\\ufe20-\\ufe2f";
      var rsComboSymbolsRange = "\\u20d0-\\u20ff";
      var rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;
      var rsVarRange = "\\ufe0e\\ufe0f";
      var rsAstral = "[" + rsAstralRange + "]";
      var rsCombo = "[" + rsComboRange + "]";
      var rsFitz = "\\ud83c[\\udffb-\\udfff]";
      var rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")";
      var rsNonAstral = "[^" + rsAstralRange + "]";
      var rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}";
      var rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]";
      var rsZWJ = "\\u200d";
      var reOptMod = rsModifier + "?";
      var rsOptVar = "[" + rsVarRange + "]?";
      var rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*";
      var rsSeq = rsOptVar + reOptMod + rsOptJoin;
      var rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
      var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
      function unicodeToArray(string3) {
        return string3.match(reUnicode) || [];
      }
      module2.exports = unicodeToArray;
    }
  });

  // node_modules/lodash/_stringToArray.js
  var require_stringToArray = __commonJS({
    "node_modules/lodash/_stringToArray.js"(exports2, module2) {
      var asciiToArray = require_asciiToArray();
      var hasUnicode = require_hasUnicode();
      var unicodeToArray = require_unicodeToArray();
      function stringToArray(string3) {
        return hasUnicode(string3) ? unicodeToArray(string3) : asciiToArray(string3);
      }
      module2.exports = stringToArray;
    }
  });

  // node_modules/lodash/_createCaseFirst.js
  var require_createCaseFirst = __commonJS({
    "node_modules/lodash/_createCaseFirst.js"(exports2, module2) {
      var castSlice = require_castSlice();
      var hasUnicode = require_hasUnicode();
      var stringToArray = require_stringToArray();
      var toString3 = require_toString();
      function createCaseFirst(methodName) {
        return function(string3) {
          string3 = toString3(string3);
          var strSymbols = hasUnicode(string3) ? stringToArray(string3) : void 0;
          var chr = strSymbols ? strSymbols[0] : string3.charAt(0);
          var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string3.slice(1);
          return chr[methodName]() + trailing;
        };
      }
      module2.exports = createCaseFirst;
    }
  });

  // node_modules/lodash/upperFirst.js
  var require_upperFirst = __commonJS({
    "node_modules/lodash/upperFirst.js"(exports2, module2) {
      var createCaseFirst = require_createCaseFirst();
      var upperFirst = createCaseFirst("toUpperCase");
      module2.exports = upperFirst;
    }
  });

  // node_modules/lodash/capitalize.js
  var require_capitalize = __commonJS({
    "node_modules/lodash/capitalize.js"(exports2, module2) {
      var toString3 = require_toString();
      var upperFirst = require_upperFirst();
      function capitalize2(string3) {
        return upperFirst(toString3(string3).toLowerCase());
      }
      module2.exports = capitalize2;
    }
  });

  // node_modules/lodash/_arrayReduce.js
  var require_arrayReduce = __commonJS({
    "node_modules/lodash/_arrayReduce.js"(exports2, module2) {
      function arrayReduce(array4, iteratee, accumulator, initAccum) {
        var index2 = -1, length = array4 == null ? 0 : array4.length;
        if (initAccum && length) {
          accumulator = array4[++index2];
        }
        while (++index2 < length) {
          accumulator = iteratee(accumulator, array4[index2], index2, array4);
        }
        return accumulator;
      }
      module2.exports = arrayReduce;
    }
  });

  // node_modules/lodash/_basePropertyOf.js
  var require_basePropertyOf = __commonJS({
    "node_modules/lodash/_basePropertyOf.js"(exports2, module2) {
      function basePropertyOf(object4) {
        return function(key2) {
          return object4 == null ? void 0 : object4[key2];
        };
      }
      module2.exports = basePropertyOf;
    }
  });

  // node_modules/lodash/_deburrLetter.js
  var require_deburrLetter = __commonJS({
    "node_modules/lodash/_deburrLetter.js"(exports2, module2) {
      var basePropertyOf = require_basePropertyOf();
      var deburredLetters = {
        // Latin-1 Supplement block.
        "\xC0": "A",
        "\xC1": "A",
        "\xC2": "A",
        "\xC3": "A",
        "\xC4": "A",
        "\xC5": "A",
        "\xE0": "a",
        "\xE1": "a",
        "\xE2": "a",
        "\xE3": "a",
        "\xE4": "a",
        "\xE5": "a",
        "\xC7": "C",
        "\xE7": "c",
        "\xD0": "D",
        "\xF0": "d",
        "\xC8": "E",
        "\xC9": "E",
        "\xCA": "E",
        "\xCB": "E",
        "\xE8": "e",
        "\xE9": "e",
        "\xEA": "e",
        "\xEB": "e",
        "\xCC": "I",
        "\xCD": "I",
        "\xCE": "I",
        "\xCF": "I",
        "\xEC": "i",
        "\xED": "i",
        "\xEE": "i",
        "\xEF": "i",
        "\xD1": "N",
        "\xF1": "n",
        "\xD2": "O",
        "\xD3": "O",
        "\xD4": "O",
        "\xD5": "O",
        "\xD6": "O",
        "\xD8": "O",
        "\xF2": "o",
        "\xF3": "o",
        "\xF4": "o",
        "\xF5": "o",
        "\xF6": "o",
        "\xF8": "o",
        "\xD9": "U",
        "\xDA": "U",
        "\xDB": "U",
        "\xDC": "U",
        "\xF9": "u",
        "\xFA": "u",
        "\xFB": "u",
        "\xFC": "u",
        "\xDD": "Y",
        "\xFD": "y",
        "\xFF": "y",
        "\xC6": "Ae",
        "\xE6": "ae",
        "\xDE": "Th",
        "\xFE": "th",
        "\xDF": "ss",
        // Latin Extended-A block.
        "\u0100": "A",
        "\u0102": "A",
        "\u0104": "A",
        "\u0101": "a",
        "\u0103": "a",
        "\u0105": "a",
        "\u0106": "C",
        "\u0108": "C",
        "\u010A": "C",
        "\u010C": "C",
        "\u0107": "c",
        "\u0109": "c",
        "\u010B": "c",
        "\u010D": "c",
        "\u010E": "D",
        "\u0110": "D",
        "\u010F": "d",
        "\u0111": "d",
        "\u0112": "E",
        "\u0114": "E",
        "\u0116": "E",
        "\u0118": "E",
        "\u011A": "E",
        "\u0113": "e",
        "\u0115": "e",
        "\u0117": "e",
        "\u0119": "e",
        "\u011B": "e",
        "\u011C": "G",
        "\u011E": "G",
        "\u0120": "G",
        "\u0122": "G",
        "\u011D": "g",
        "\u011F": "g",
        "\u0121": "g",
        "\u0123": "g",
        "\u0124": "H",
        "\u0126": "H",
        "\u0125": "h",
        "\u0127": "h",
        "\u0128": "I",
        "\u012A": "I",
        "\u012C": "I",
        "\u012E": "I",
        "\u0130": "I",
        "\u0129": "i",
        "\u012B": "i",
        "\u012D": "i",
        "\u012F": "i",
        "\u0131": "i",
        "\u0134": "J",
        "\u0135": "j",
        "\u0136": "K",
        "\u0137": "k",
        "\u0138": "k",
        "\u0139": "L",
        "\u013B": "L",
        "\u013D": "L",
        "\u013F": "L",
        "\u0141": "L",
        "\u013A": "l",
        "\u013C": "l",
        "\u013E": "l",
        "\u0140": "l",
        "\u0142": "l",
        "\u0143": "N",
        "\u0145": "N",
        "\u0147": "N",
        "\u014A": "N",
        "\u0144": "n",
        "\u0146": "n",
        "\u0148": "n",
        "\u014B": "n",
        "\u014C": "O",
        "\u014E": "O",
        "\u0150": "O",
        "\u014D": "o",
        "\u014F": "o",
        "\u0151": "o",
        "\u0154": "R",
        "\u0156": "R",
        "\u0158": "R",
        "\u0155": "r",
        "\u0157": "r",
        "\u0159": "r",
        "\u015A": "S",
        "\u015C": "S",
        "\u015E": "S",
        "\u0160": "S",
        "\u015B": "s",
        "\u015D": "s",
        "\u015F": "s",
        "\u0161": "s",
        "\u0162": "T",
        "\u0164": "T",
        "\u0166": "T",
        "\u0163": "t",
        "\u0165": "t",
        "\u0167": "t",
        "\u0168": "U",
        "\u016A": "U",
        "\u016C": "U",
        "\u016E": "U",
        "\u0170": "U",
        "\u0172": "U",
        "\u0169": "u",
        "\u016B": "u",
        "\u016D": "u",
        "\u016F": "u",
        "\u0171": "u",
        "\u0173": "u",
        "\u0174": "W",
        "\u0175": "w",
        "\u0176": "Y",
        "\u0177": "y",
        "\u0178": "Y",
        "\u0179": "Z",
        "\u017B": "Z",
        "\u017D": "Z",
        "\u017A": "z",
        "\u017C": "z",
        "\u017E": "z",
        "\u0132": "IJ",
        "\u0133": "ij",
        "\u0152": "Oe",
        "\u0153": "oe",
        "\u0149": "'n",
        "\u017F": "s"
      };
      var deburrLetter = basePropertyOf(deburredLetters);
      module2.exports = deburrLetter;
    }
  });

  // node_modules/lodash/deburr.js
  var require_deburr = __commonJS({
    "node_modules/lodash/deburr.js"(exports2, module2) {
      var deburrLetter = require_deburrLetter();
      var toString3 = require_toString();
      var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
      var rsComboMarksRange = "\\u0300-\\u036f";
      var reComboHalfMarksRange = "\\ufe20-\\ufe2f";
      var rsComboSymbolsRange = "\\u20d0-\\u20ff";
      var rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;
      var rsCombo = "[" + rsComboRange + "]";
      var reComboMark = RegExp(rsCombo, "g");
      function deburr(string3) {
        string3 = toString3(string3);
        return string3 && string3.replace(reLatin, deburrLetter).replace(reComboMark, "");
      }
      module2.exports = deburr;
    }
  });

  // node_modules/lodash/_asciiWords.js
  var require_asciiWords = __commonJS({
    "node_modules/lodash/_asciiWords.js"(exports2, module2) {
      var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
      function asciiWords(string3) {
        return string3.match(reAsciiWord) || [];
      }
      module2.exports = asciiWords;
    }
  });

  // node_modules/lodash/_hasUnicodeWord.js
  var require_hasUnicodeWord = __commonJS({
    "node_modules/lodash/_hasUnicodeWord.js"(exports2, module2) {
      var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
      function hasUnicodeWord(string3) {
        return reHasUnicodeWord.test(string3);
      }
      module2.exports = hasUnicodeWord;
    }
  });

  // node_modules/lodash/_unicodeWords.js
  var require_unicodeWords = __commonJS({
    "node_modules/lodash/_unicodeWords.js"(exports2, module2) {
      var rsAstralRange = "\\ud800-\\udfff";
      var rsComboMarksRange = "\\u0300-\\u036f";
      var reComboHalfMarksRange = "\\ufe20-\\ufe2f";
      var rsComboSymbolsRange = "\\u20d0-\\u20ff";
      var rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;
      var rsDingbatRange = "\\u2700-\\u27bf";
      var rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff";
      var rsMathOpRange = "\\xac\\xb1\\xd7\\xf7";
      var rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf";
      var rsPunctuationRange = "\\u2000-\\u206f";
      var rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000";
      var rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde";
      var rsVarRange = "\\ufe0e\\ufe0f";
      var rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
      var rsApos = "['\u2019]";
      var rsBreak = "[" + rsBreakRange + "]";
      var rsCombo = "[" + rsComboRange + "]";
      var rsDigits = "\\d+";
      var rsDingbat = "[" + rsDingbatRange + "]";
      var rsLower = "[" + rsLowerRange + "]";
      var rsMisc = "[^" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]";
      var rsFitz = "\\ud83c[\\udffb-\\udfff]";
      var rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")";
      var rsNonAstral = "[^" + rsAstralRange + "]";
      var rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}";
      var rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]";
      var rsUpper = "[" + rsUpperRange + "]";
      var rsZWJ = "\\u200d";
      var rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")";
      var rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")";
      var rsOptContrLower = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?";
      var rsOptContrUpper = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?";
      var reOptMod = rsModifier + "?";
      var rsOptVar = "[" + rsVarRange + "]?";
      var rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*";
      var rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])";
      var rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])";
      var rsSeq = rsOptVar + reOptMod + rsOptJoin;
      var rsEmoji = "(?:" + [rsDingbat, rsRegional, rsSurrPair].join("|") + ")" + rsSeq;
      var reUnicodeWord = RegExp([
        rsUpper + "?" + rsLower + "+" + rsOptContrLower + "(?=" + [rsBreak, rsUpper, "$"].join("|") + ")",
        rsMiscUpper + "+" + rsOptContrUpper + "(?=" + [rsBreak, rsUpper + rsMiscLower, "$"].join("|") + ")",
        rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower,
        rsUpper + "+" + rsOptContrUpper,
        rsOrdUpper,
        rsOrdLower,
        rsDigits,
        rsEmoji
      ].join("|"), "g");
      function unicodeWords(string3) {
        return string3.match(reUnicodeWord) || [];
      }
      module2.exports = unicodeWords;
    }
  });

  // node_modules/lodash/words.js
  var require_words = __commonJS({
    "node_modules/lodash/words.js"(exports2, module2) {
      var asciiWords = require_asciiWords();
      var hasUnicodeWord = require_hasUnicodeWord();
      var toString3 = require_toString();
      var unicodeWords = require_unicodeWords();
      function words(string3, pattern4, guard) {
        string3 = toString3(string3);
        pattern4 = guard ? void 0 : pattern4;
        if (pattern4 === void 0) {
          return hasUnicodeWord(string3) ? unicodeWords(string3) : asciiWords(string3);
        }
        return string3.match(pattern4) || [];
      }
      module2.exports = words;
    }
  });

  // node_modules/lodash/_createCompounder.js
  var require_createCompounder = __commonJS({
    "node_modules/lodash/_createCompounder.js"(exports2, module2) {
      var arrayReduce = require_arrayReduce();
      var deburr = require_deburr();
      var words = require_words();
      var rsApos = "['\u2019]";
      var reApos = RegExp(rsApos, "g");
      function createCompounder(callback) {
        return function(string3) {
          return arrayReduce(words(deburr(string3).replace(reApos, "")), callback, "");
        };
      }
      module2.exports = createCompounder;
    }
  });

  // node_modules/lodash/camelCase.js
  var require_camelCase = __commonJS({
    "node_modules/lodash/camelCase.js"(exports2, module2) {
      var capitalize2 = require_capitalize();
      var createCompounder = require_createCompounder();
      var camelCase2 = createCompounder(function(result2, word, index2) {
        word = word.toLowerCase();
        return result2 + (index2 ? capitalize2(word) : word);
      });
      module2.exports = camelCase2;
    }
  });

  // node_modules/moment/moment.js
  var require_moment = __commonJS({
    "node_modules/moment/moment.js"(exports2, module2) {
      (function(global2, factory) {
        typeof exports2 === "object" && typeof module2 !== "undefined" ? module2.exports = factory() : typeof define === "function" && define.amd ? define(factory) : global2.moment = factory();
      })(exports2, function() {
        "use strict";
        var hookCallback;
        function hooks() {
          return hookCallback.apply(null, arguments);
        }
        function setHookCallback(callback) {
          hookCallback = callback;
        }
        function isArray2(input) {
          return input instanceof Array || Object.prototype.toString.call(input) === "[object Array]";
        }
        function isObject3(input) {
          return input != null && Object.prototype.toString.call(input) === "[object Object]";
        }
        function hasOwnProp(a2, b2) {
          return Object.prototype.hasOwnProperty.call(a2, b2);
        }
        function isObjectEmpty(obj) {
          if (Object.getOwnPropertyNames) {
            return Object.getOwnPropertyNames(obj).length === 0;
          } else {
            var k2;
            for (k2 in obj) {
              if (hasOwnProp(obj, k2)) {
                return false;
              }
            }
            return true;
          }
        }
        function isUndefined2(input) {
          return input === void 0;
        }
        function isNumber2(input) {
          return typeof input === "number" || Object.prototype.toString.call(input) === "[object Number]";
        }
        function isDate3(input) {
          return input instanceof Date || Object.prototype.toString.call(input) === "[object Date]";
        }
        function map(arr, fn2) {
          var res = [], i3, arrLen = arr.length;
          for (i3 = 0; i3 < arrLen; ++i3) {
            res.push(fn2(arr[i3], i3));
          }
          return res;
        }
        function extend2(a2, b2) {
          for (var i3 in b2) {
            if (hasOwnProp(b2, i3)) {
              a2[i3] = b2[i3];
            }
          }
          if (hasOwnProp(b2, "toString")) {
            a2.toString = b2.toString;
          }
          if (hasOwnProp(b2, "valueOf")) {
            a2.valueOf = b2.valueOf;
          }
          return a2;
        }
        function createUTC(input, format4, locale5, strict) {
          return createLocalOrUTC(input, format4, locale5, strict, true).utc();
        }
        function defaultParsingFlags() {
          return {
            empty: false,
            unusedTokens: [],
            unusedInput: [],
            overflow: -2,
            charsLeftOver: 0,
            nullInput: false,
            invalidEra: null,
            invalidMonth: null,
            invalidFormat: false,
            userInvalidated: false,
            iso: false,
            parsedDateParts: [],
            era: null,
            meridiem: null,
            rfc2822: false,
            weekdayMismatch: false
          };
        }
        function getParsingFlags(m2) {
          if (m2._pf == null) {
            m2._pf = defaultParsingFlags();
          }
          return m2._pf;
        }
        var some;
        if (Array.prototype.some) {
          some = Array.prototype.some;
        } else {
          some = function(fun) {
            var t4 = Object(this), len = t4.length >>> 0, i3;
            for (i3 = 0; i3 < len; i3++) {
              if (i3 in t4 && fun.call(this, t4[i3], i3, t4)) {
                return true;
              }
            }
            return false;
          };
        }
        function isValid(m2) {
          if (m2._isValid == null) {
            var flags = getParsingFlags(m2), parsedParts = some.call(flags.parsedDateParts, function(i3) {
              return i3 != null;
            }), isNowValid = !isNaN(m2._d.getTime()) && flags.overflow < 0 && !flags.empty && !flags.invalidEra && !flags.invalidMonth && !flags.invalidWeekday && !flags.weekdayMismatch && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated && (!flags.meridiem || flags.meridiem && parsedParts);
            if (m2._strict) {
              isNowValid = isNowValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === void 0;
            }
            if (Object.isFrozen == null || !Object.isFrozen(m2)) {
              m2._isValid = isNowValid;
            } else {
              return isNowValid;
            }
          }
          return m2._isValid;
        }
        function createInvalid(flags) {
          var m2 = createUTC(NaN);
          if (flags != null) {
            extend2(getParsingFlags(m2), flags);
          } else {
            getParsingFlags(m2).userInvalidated = true;
          }
          return m2;
        }
        var momentProperties = hooks.momentProperties = [], updateInProgress = false;
        function copyConfig(to2, from2) {
          var i3, prop, val, momentPropertiesLen = momentProperties.length;
          if (!isUndefined2(from2._isAMomentObject)) {
            to2._isAMomentObject = from2._isAMomentObject;
          }
          if (!isUndefined2(from2._i)) {
            to2._i = from2._i;
          }
          if (!isUndefined2(from2._f)) {
            to2._f = from2._f;
          }
          if (!isUndefined2(from2._l)) {
            to2._l = from2._l;
          }
          if (!isUndefined2(from2._strict)) {
            to2._strict = from2._strict;
          }
          if (!isUndefined2(from2._tzm)) {
            to2._tzm = from2._tzm;
          }
          if (!isUndefined2(from2._isUTC)) {
            to2._isUTC = from2._isUTC;
          }
          if (!isUndefined2(from2._offset)) {
            to2._offset = from2._offset;
          }
          if (!isUndefined2(from2._pf)) {
            to2._pf = getParsingFlags(from2);
          }
          if (!isUndefined2(from2._locale)) {
            to2._locale = from2._locale;
          }
          if (momentPropertiesLen > 0) {
            for (i3 = 0; i3 < momentPropertiesLen; i3++) {
              prop = momentProperties[i3];
              val = from2[prop];
              if (!isUndefined2(val)) {
                to2[prop] = val;
              }
            }
          }
          return to2;
        }
        function Moment(config) {
          copyConfig(this, config);
          this._d = new Date(config._d != null ? config._d.getTime() : NaN);
          if (!this.isValid()) {
            this._d = /* @__PURE__ */ new Date(NaN);
          }
          if (updateInProgress === false) {
            updateInProgress = true;
            hooks.updateOffset(this);
            updateInProgress = false;
          }
        }
        function isMoment(obj) {
          return obj instanceof Moment || obj != null && obj._isAMomentObject != null;
        }
        function warn3(msg) {
          if (hooks.suppressDeprecationWarnings === false && typeof console !== "undefined" && console.warn) {
            console.warn("Deprecation warning: " + msg);
          }
        }
        function deprecate(msg, fn2) {
          var firstTime = true;
          return extend2(function() {
            if (hooks.deprecationHandler != null) {
              hooks.deprecationHandler(null, msg);
            }
            if (firstTime) {
              var args = [], arg, i3, key2, argLen = arguments.length;
              for (i3 = 0; i3 < argLen; i3++) {
                arg = "";
                if (typeof arguments[i3] === "object") {
                  arg += "\n[" + i3 + "] ";
                  for (key2 in arguments[0]) {
                    if (hasOwnProp(arguments[0], key2)) {
                      arg += key2 + ": " + arguments[0][key2] + ", ";
                    }
                  }
                  arg = arg.slice(0, -2);
                } else {
                  arg = arguments[i3];
                }
                args.push(arg);
              }
              warn3(
                msg + "\nArguments: " + Array.prototype.slice.call(args).join("") + "\n" + new Error().stack
              );
              firstTime = false;
            }
            return fn2.apply(this, arguments);
          }, fn2);
        }
        var deprecations = {};
        function deprecateSimple(name, msg) {
          if (hooks.deprecationHandler != null) {
            hooks.deprecationHandler(name, msg);
          }
          if (!deprecations[name]) {
            warn3(msg);
            deprecations[name] = true;
          }
        }
        hooks.suppressDeprecationWarnings = false;
        hooks.deprecationHandler = null;
        function isFunction2(input) {
          return typeof Function !== "undefined" && input instanceof Function || Object.prototype.toString.call(input) === "[object Function]";
        }
        function set2(config) {
          var prop, i3;
          for (i3 in config) {
            if (hasOwnProp(config, i3)) {
              prop = config[i3];
              if (isFunction2(prop)) {
                this[i3] = prop;
              } else {
                this["_" + i3] = prop;
              }
            }
          }
          this._config = config;
          this._dayOfMonthOrdinalParseLenient = new RegExp(
            (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + "|" + /\d{1,2}/.source
          );
        }
        function mergeConfigs(parentConfig, childConfig) {
          var res = extend2({}, parentConfig), prop;
          for (prop in childConfig) {
            if (hasOwnProp(childConfig, prop)) {
              if (isObject3(parentConfig[prop]) && isObject3(childConfig[prop])) {
                res[prop] = {};
                extend2(res[prop], parentConfig[prop]);
                extend2(res[prop], childConfig[prop]);
              } else if (childConfig[prop] != null) {
                res[prop] = childConfig[prop];
              } else {
                delete res[prop];
              }
            }
          }
          for (prop in parentConfig) {
            if (hasOwnProp(parentConfig, prop) && !hasOwnProp(childConfig, prop) && isObject3(parentConfig[prop])) {
              res[prop] = extend2({}, res[prop]);
            }
          }
          return res;
        }
        function Locale(config) {
          if (config != null) {
            this.set(config);
          }
        }
        var keys2;
        if (Object.keys) {
          keys2 = Object.keys;
        } else {
          keys2 = function(obj) {
            var i3, res = [];
            for (i3 in obj) {
              if (hasOwnProp(obj, i3)) {
                res.push(i3);
              }
            }
            return res;
          };
        }
        var defaultCalendar = {
          sameDay: "[Today at] LT",
          nextDay: "[Tomorrow at] LT",
          nextWeek: "dddd [at] LT",
          lastDay: "[Yesterday at] LT",
          lastWeek: "[Last] dddd [at] LT",
          sameElse: "L"
        };
        function calendar(key2, mom, now3) {
          var output2 = this._calendar[key2] || this._calendar["sameElse"];
          return isFunction2(output2) ? output2.call(mom, now3) : output2;
        }
        function zeroFill(number4, targetLength, forceSign) {
          var absNumber = "" + Math.abs(number4), zerosToFill = targetLength - absNumber.length, sign2 = number4 >= 0;
          return (sign2 ? forceSign ? "+" : "" : "-") + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
        }
        var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g, localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g, formatFunctions = {}, formatTokenFunctions = {};
        function addFormatToken(token2, padded, ordinal2, callback) {
          var func = callback;
          if (typeof callback === "string") {
            func = function() {
              return this[callback]();
            };
          }
          if (token2) {
            formatTokenFunctions[token2] = func;
          }
          if (padded) {
            formatTokenFunctions[padded[0]] = function() {
              return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
            };
          }
          if (ordinal2) {
            formatTokenFunctions[ordinal2] = function() {
              return this.localeData().ordinal(
                func.apply(this, arguments),
                token2
              );
            };
          }
        }
        function removeFormattingTokens(input) {
          if (input.match(/\[[\s\S]/)) {
            return input.replace(/^\[|\]$/g, "");
          }
          return input.replace(/\\/g, "");
        }
        function makeFormatFunction(format4) {
          var array4 = format4.match(formattingTokens), i3, length;
          for (i3 = 0, length = array4.length; i3 < length; i3++) {
            if (formatTokenFunctions[array4[i3]]) {
              array4[i3] = formatTokenFunctions[array4[i3]];
            } else {
              array4[i3] = removeFormattingTokens(array4[i3]);
            }
          }
          return function(mom) {
            var output2 = "", i4;
            for (i4 = 0; i4 < length; i4++) {
              output2 += isFunction2(array4[i4]) ? array4[i4].call(mom, format4) : array4[i4];
            }
            return output2;
          };
        }
        function formatMoment(m2, format4) {
          if (!m2.isValid()) {
            return m2.localeData().invalidDate();
          }
          format4 = expandFormat(format4, m2.localeData());
          formatFunctions[format4] = formatFunctions[format4] || makeFormatFunction(format4);
          return formatFunctions[format4](m2);
        }
        function expandFormat(format4, locale5) {
          var i3 = 5;
          function replaceLongDateFormatTokens(input) {
            return locale5.longDateFormat(input) || input;
          }
          localFormattingTokens.lastIndex = 0;
          while (i3 >= 0 && localFormattingTokens.test(format4)) {
            format4 = format4.replace(
              localFormattingTokens,
              replaceLongDateFormatTokens
            );
            localFormattingTokens.lastIndex = 0;
            i3 -= 1;
          }
          return format4;
        }
        var defaultLongDateFormat = {
          LTS: "h:mm:ss A",
          LT: "h:mm A",
          L: "MM/DD/YYYY",
          LL: "MMMM D, YYYY",
          LLL: "MMMM D, YYYY h:mm A",
          LLLL: "dddd, MMMM D, YYYY h:mm A"
        };
        function longDateFormat(key2) {
          var format4 = this._longDateFormat[key2], formatUpper = this._longDateFormat[key2.toUpperCase()];
          if (format4 || !formatUpper) {
            return format4;
          }
          this._longDateFormat[key2] = formatUpper.match(formattingTokens).map(function(tok) {
            if (tok === "MMMM" || tok === "MM" || tok === "DD" || tok === "dddd") {
              return tok.slice(1);
            }
            return tok;
          }).join("");
          return this._longDateFormat[key2];
        }
        var defaultInvalidDate = "Invalid date";
        function invalidDate() {
          return this._invalidDate;
        }
        var defaultOrdinal = "%d", defaultDayOfMonthOrdinalParse = /\d{1,2}/;
        function ordinal(number4) {
          return this._ordinal.replace("%d", number4);
        }
        var defaultRelativeTime = {
          future: "in %s",
          past: "%s ago",
          s: "a few seconds",
          ss: "%d seconds",
          m: "a minute",
          mm: "%d minutes",
          h: "an hour",
          hh: "%d hours",
          d: "a day",
          dd: "%d days",
          w: "a week",
          ww: "%d weeks",
          M: "a month",
          MM: "%d months",
          y: "a year",
          yy: "%d years"
        };
        function relativeTime(number4, withoutSuffix, string3, isFuture) {
          var output2 = this._relativeTime[string3];
          return isFunction2(output2) ? output2(number4, withoutSuffix, string3, isFuture) : output2.replace(/%d/i, number4);
        }
        function pastFuture(diff2, output2) {
          var format4 = this._relativeTime[diff2 > 0 ? "future" : "past"];
          return isFunction2(format4) ? format4(output2) : format4.replace(/%s/i, output2);
        }
        var aliases = {};
        function addUnitAlias(unit, shorthand) {
          var lowerCase = unit.toLowerCase();
          aliases[lowerCase] = aliases[lowerCase + "s"] = aliases[shorthand] = unit;
        }
        function normalizeUnits(units) {
          return typeof units === "string" ? aliases[units] || aliases[units.toLowerCase()] : void 0;
        }
        function normalizeObjectUnits(inputObject) {
          var normalizedInput = {}, normalizedProp, prop;
          for (prop in inputObject) {
            if (hasOwnProp(inputObject, prop)) {
              normalizedProp = normalizeUnits(prop);
              if (normalizedProp) {
                normalizedInput[normalizedProp] = inputObject[prop];
              }
            }
          }
          return normalizedInput;
        }
        var priorities = {};
        function addUnitPriority(unit, priority) {
          priorities[unit] = priority;
        }
        function getPrioritizedUnits(unitsObj) {
          var units = [], u2;
          for (u2 in unitsObj) {
            if (hasOwnProp(unitsObj, u2)) {
              units.push({ unit: u2, priority: priorities[u2] });
            }
          }
          units.sort(function(a2, b2) {
            return a2.priority - b2.priority;
          });
          return units;
        }
        function isLeapYear(year) {
          return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
        }
        function absFloor(number4) {
          if (number4 < 0) {
            return Math.ceil(number4) || 0;
          } else {
            return Math.floor(number4);
          }
        }
        function toInt(argumentForCoercion) {
          var coercedNumber = +argumentForCoercion, value = 0;
          if (coercedNumber !== 0 && isFinite(coercedNumber)) {
            value = absFloor(coercedNumber);
          }
          return value;
        }
        function makeGetSet(unit, keepTime) {
          return function(value) {
            if (value != null) {
              set$1(this, unit, value);
              hooks.updateOffset(this, keepTime);
              return this;
            } else {
              return get3(this, unit);
            }
          };
        }
        function get3(mom, unit) {
          return mom.isValid() ? mom._d["get" + (mom._isUTC ? "UTC" : "") + unit]() : NaN;
        }
        function set$1(mom, unit, value) {
          if (mom.isValid() && !isNaN(value)) {
            if (unit === "FullYear" && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {
              value = toInt(value);
              mom._d["set" + (mom._isUTC ? "UTC" : "") + unit](
                value,
                mom.month(),
                daysInMonth(value, mom.month())
              );
            } else {
              mom._d["set" + (mom._isUTC ? "UTC" : "") + unit](value);
            }
          }
        }
        function stringGet(units) {
          units = normalizeUnits(units);
          if (isFunction2(this[units])) {
            return this[units]();
          }
          return this;
        }
        function stringSet(units, value) {
          if (typeof units === "object") {
            units = normalizeObjectUnits(units);
            var prioritized = getPrioritizedUnits(units), i3, prioritizedLen = prioritized.length;
            for (i3 = 0; i3 < prioritizedLen; i3++) {
              this[prioritized[i3].unit](units[prioritized[i3].unit]);
            }
          } else {
            units = normalizeUnits(units);
            if (isFunction2(this[units])) {
              return this[units](value);
            }
          }
          return this;
        }
        var match1 = /\d/, match2 = /\d\d/, match3 = /\d{3}/, match4 = /\d{4}/, match6 = /[+-]?\d{6}/, match1to2 = /\d\d?/, match3to4 = /\d\d\d\d?/, match5to6 = /\d\d\d\d\d\d?/, match1to3 = /\d{1,3}/, match1to4 = /\d{1,4}/, match1to6 = /[+-]?\d{1,6}/, matchUnsigned = /\d+/, matchSigned = /[+-]?\d+/, matchOffset = /Z|[+-]\d\d:?\d\d/gi, matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi, matchTimestamp = /[+-]?\d+(\.\d{1,3})?/, matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i, regexes;
        regexes = {};
        function addRegexToken(token2, regex, strictRegex) {
          regexes[token2] = isFunction2(regex) ? regex : function(isStrict, localeData2) {
            return isStrict && strictRegex ? strictRegex : regex;
          };
        }
        function getParseRegexForToken(token2, config) {
          if (!hasOwnProp(regexes, token2)) {
            return new RegExp(unescapeFormat(token2));
          }
          return regexes[token2](config._strict, config._locale);
        }
        function unescapeFormat(s2) {
          return regexEscape2(
            s2.replace("\\", "").replace(
              /\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,
              function(matched, p1, p2, p3, p4) {
                return p1 || p2 || p3 || p4;
              }
            )
          );
        }
        function regexEscape2(s2) {
          return s2.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
        }
        var tokens = {};
        function addParseToken(token2, callback) {
          var i3, func = callback, tokenLen;
          if (typeof token2 === "string") {
            token2 = [token2];
          }
          if (isNumber2(callback)) {
            func = function(input, array4) {
              array4[callback] = toInt(input);
            };
          }
          tokenLen = token2.length;
          for (i3 = 0; i3 < tokenLen; i3++) {
            tokens[token2[i3]] = func;
          }
        }
        function addWeekParseToken(token2, callback) {
          addParseToken(token2, function(input, array4, config, token3) {
            config._w = config._w || {};
            callback(input, config._w, config, token3);
          });
        }
        function addTimeToArrayFromToken(token2, input, config) {
          if (input != null && hasOwnProp(tokens, token2)) {
            tokens[token2](input, config._a, config, token2);
          }
        }
        var YEAR = 0, MONTH = 1, DATE = 2, HOUR = 3, MINUTE = 4, SECOND = 5, MILLISECOND = 6, WEEK = 7, WEEKDAY = 8;
        function mod(n4, x2) {
          return (n4 % x2 + x2) % x2;
        }
        var indexOf;
        if (Array.prototype.indexOf) {
          indexOf = Array.prototype.indexOf;
        } else {
          indexOf = function(o3) {
            var i3;
            for (i3 = 0; i3 < this.length; ++i3) {
              if (this[i3] === o3) {
                return i3;
              }
            }
            return -1;
          };
        }
        function daysInMonth(year, month) {
          if (isNaN(year) || isNaN(month)) {
            return NaN;
          }
          var modMonth = mod(month, 12);
          year += (month - modMonth) / 12;
          return modMonth === 1 ? isLeapYear(year) ? 29 : 28 : 31 - modMonth % 7 % 2;
        }
        addFormatToken("M", ["MM", 2], "Mo", function() {
          return this.month() + 1;
        });
        addFormatToken("MMM", 0, 0, function(format4) {
          return this.localeData().monthsShort(this, format4);
        });
        addFormatToken("MMMM", 0, 0, function(format4) {
          return this.localeData().months(this, format4);
        });
        addUnitAlias("month", "M");
        addUnitPriority("month", 8);
        addRegexToken("M", match1to2);
        addRegexToken("MM", match1to2, match2);
        addRegexToken("MMM", function(isStrict, locale5) {
          return locale5.monthsShortRegex(isStrict);
        });
        addRegexToken("MMMM", function(isStrict, locale5) {
          return locale5.monthsRegex(isStrict);
        });
        addParseToken(["M", "MM"], function(input, array4) {
          array4[MONTH] = toInt(input) - 1;
        });
        addParseToken(["MMM", "MMMM"], function(input, array4, config, token2) {
          var month = config._locale.monthsParse(input, token2, config._strict);
          if (month != null) {
            array4[MONTH] = month;
          } else {
            getParsingFlags(config).invalidMonth = input;
          }
        });
        var defaultLocaleMonths = "January_February_March_April_May_June_July_August_September_October_November_December".split(
          "_"
        ), defaultLocaleMonthsShort = "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"), MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/, defaultMonthsShortRegex = matchWord, defaultMonthsRegex = matchWord;
        function localeMonths(m2, format4) {
          if (!m2) {
            return isArray2(this._months) ? this._months : this._months["standalone"];
          }
          return isArray2(this._months) ? this._months[m2.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format4) ? "format" : "standalone"][m2.month()];
        }
        function localeMonthsShort(m2, format4) {
          if (!m2) {
            return isArray2(this._monthsShort) ? this._monthsShort : this._monthsShort["standalone"];
          }
          return isArray2(this._monthsShort) ? this._monthsShort[m2.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format4) ? "format" : "standalone"][m2.month()];
        }
        function handleStrictParse(monthName, format4, strict) {
          var i3, ii, mom, llc = monthName.toLocaleLowerCase();
          if (!this._monthsParse) {
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
            for (i3 = 0; i3 < 12; ++i3) {
              mom = createUTC([2e3, i3]);
              this._shortMonthsParse[i3] = this.monthsShort(
                mom,
                ""
              ).toLocaleLowerCase();
              this._longMonthsParse[i3] = this.months(mom, "").toLocaleLowerCase();
            }
          }
          if (strict) {
            if (format4 === "MMM") {
              ii = indexOf.call(this._shortMonthsParse, llc);
              return ii !== -1 ? ii : null;
            } else {
              ii = indexOf.call(this._longMonthsParse, llc);
              return ii !== -1 ? ii : null;
            }
          } else {
            if (format4 === "MMM") {
              ii = indexOf.call(this._shortMonthsParse, llc);
              if (ii !== -1) {
                return ii;
              }
              ii = indexOf.call(this._longMonthsParse, llc);
              return ii !== -1 ? ii : null;
            } else {
              ii = indexOf.call(this._longMonthsParse, llc);
              if (ii !== -1) {
                return ii;
              }
              ii = indexOf.call(this._shortMonthsParse, llc);
              return ii !== -1 ? ii : null;
            }
          }
        }
        function localeMonthsParse(monthName, format4, strict) {
          var i3, mom, regex;
          if (this._monthsParseExact) {
            return handleStrictParse.call(this, monthName, format4, strict);
          }
          if (!this._monthsParse) {
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
          }
          for (i3 = 0; i3 < 12; i3++) {
            mom = createUTC([2e3, i3]);
            if (strict && !this._longMonthsParse[i3]) {
              this._longMonthsParse[i3] = new RegExp(
                "^" + this.months(mom, "").replace(".", "") + "$",
                "i"
              );
              this._shortMonthsParse[i3] = new RegExp(
                "^" + this.monthsShort(mom, "").replace(".", "") + "$",
                "i"
              );
            }
            if (!strict && !this._monthsParse[i3]) {
              regex = "^" + this.months(mom, "") + "|^" + this.monthsShort(mom, "");
              this._monthsParse[i3] = new RegExp(regex.replace(".", ""), "i");
            }
            if (strict && format4 === "MMMM" && this._longMonthsParse[i3].test(monthName)) {
              return i3;
            } else if (strict && format4 === "MMM" && this._shortMonthsParse[i3].test(monthName)) {
              return i3;
            } else if (!strict && this._monthsParse[i3].test(monthName)) {
              return i3;
            }
          }
        }
        function setMonth2(mom, value) {
          var dayOfMonth;
          if (!mom.isValid()) {
            return mom;
          }
          if (typeof value === "string") {
            if (/^\d+$/.test(value)) {
              value = toInt(value);
            } else {
              value = mom.localeData().monthsParse(value);
              if (!isNumber2(value)) {
                return mom;
              }
            }
          }
          dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
          mom._d["set" + (mom._isUTC ? "UTC" : "") + "Month"](value, dayOfMonth);
          return mom;
        }
        function getSetMonth(value) {
          if (value != null) {
            setMonth2(this, value);
            hooks.updateOffset(this, true);
            return this;
          } else {
            return get3(this, "Month");
          }
        }
        function getDaysInMonth() {
          return daysInMonth(this.year(), this.month());
        }
        function monthsShortRegex(isStrict) {
          if (this._monthsParseExact) {
            if (!hasOwnProp(this, "_monthsRegex")) {
              computeMonthsParse.call(this);
            }
            if (isStrict) {
              return this._monthsShortStrictRegex;
            } else {
              return this._monthsShortRegex;
            }
          } else {
            if (!hasOwnProp(this, "_monthsShortRegex")) {
              this._monthsShortRegex = defaultMonthsShortRegex;
            }
            return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex;
          }
        }
        function monthsRegex(isStrict) {
          if (this._monthsParseExact) {
            if (!hasOwnProp(this, "_monthsRegex")) {
              computeMonthsParse.call(this);
            }
            if (isStrict) {
              return this._monthsStrictRegex;
            } else {
              return this._monthsRegex;
            }
          } else {
            if (!hasOwnProp(this, "_monthsRegex")) {
              this._monthsRegex = defaultMonthsRegex;
            }
            return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex;
          }
        }
        function computeMonthsParse() {
          function cmpLenRev(a2, b2) {
            return b2.length - a2.length;
          }
          var shortPieces = [], longPieces = [], mixedPieces = [], i3, mom;
          for (i3 = 0; i3 < 12; i3++) {
            mom = createUTC([2e3, i3]);
            shortPieces.push(this.monthsShort(mom, ""));
            longPieces.push(this.months(mom, ""));
            mixedPieces.push(this.months(mom, ""));
            mixedPieces.push(this.monthsShort(mom, ""));
          }
          shortPieces.sort(cmpLenRev);
          longPieces.sort(cmpLenRev);
          mixedPieces.sort(cmpLenRev);
          for (i3 = 0; i3 < 12; i3++) {
            shortPieces[i3] = regexEscape2(shortPieces[i3]);
            longPieces[i3] = regexEscape2(longPieces[i3]);
          }
          for (i3 = 0; i3 < 24; i3++) {
            mixedPieces[i3] = regexEscape2(mixedPieces[i3]);
          }
          this._monthsRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
          this._monthsShortRegex = this._monthsRegex;
          this._monthsStrictRegex = new RegExp(
            "^(" + longPieces.join("|") + ")",
            "i"
          );
          this._monthsShortStrictRegex = new RegExp(
            "^(" + shortPieces.join("|") + ")",
            "i"
          );
        }
        addFormatToken("Y", 0, 0, function() {
          var y2 = this.year();
          return y2 <= 9999 ? zeroFill(y2, 4) : "+" + y2;
        });
        addFormatToken(0, ["YY", 2], 0, function() {
          return this.year() % 100;
        });
        addFormatToken(0, ["YYYY", 4], 0, "year");
        addFormatToken(0, ["YYYYY", 5], 0, "year");
        addFormatToken(0, ["YYYYYY", 6, true], 0, "year");
        addUnitAlias("year", "y");
        addUnitPriority("year", 1);
        addRegexToken("Y", matchSigned);
        addRegexToken("YY", match1to2, match2);
        addRegexToken("YYYY", match1to4, match4);
        addRegexToken("YYYYY", match1to6, match6);
        addRegexToken("YYYYYY", match1to6, match6);
        addParseToken(["YYYYY", "YYYYYY"], YEAR);
        addParseToken("YYYY", function(input, array4) {
          array4[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
        });
        addParseToken("YY", function(input, array4) {
          array4[YEAR] = hooks.parseTwoDigitYear(input);
        });
        addParseToken("Y", function(input, array4) {
          array4[YEAR] = parseInt(input, 10);
        });
        function daysInYear(year) {
          return isLeapYear(year) ? 366 : 365;
        }
        hooks.parseTwoDigitYear = function(input) {
          return toInt(input) + (toInt(input) > 68 ? 1900 : 2e3);
        };
        var getSetYear = makeGetSet("FullYear", true);
        function getIsLeapYear() {
          return isLeapYear(this.year());
        }
        function createDate(y2, m2, d2, h2, M2, s2, ms) {
          var date4;
          if (y2 < 100 && y2 >= 0) {
            date4 = new Date(y2 + 400, m2, d2, h2, M2, s2, ms);
            if (isFinite(date4.getFullYear())) {
              date4.setFullYear(y2);
            }
          } else {
            date4 = new Date(y2, m2, d2, h2, M2, s2, ms);
          }
          return date4;
        }
        function createUTCDate(y2) {
          var date4, args;
          if (y2 < 100 && y2 >= 0) {
            args = Array.prototype.slice.call(arguments);
            args[0] = y2 + 400;
            date4 = new Date(Date.UTC.apply(null, args));
            if (isFinite(date4.getUTCFullYear())) {
              date4.setUTCFullYear(y2);
            }
          } else {
            date4 = new Date(Date.UTC.apply(null, arguments));
          }
          return date4;
        }
        function firstWeekOffset(year, dow, doy) {
          var fwd = 7 + dow - doy, fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
          return -fwdlw + fwd - 1;
        }
        function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
          var localWeekday = (7 + weekday - dow) % 7, weekOffset = firstWeekOffset(year, dow, doy), dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset, resYear, resDayOfYear;
          if (dayOfYear <= 0) {
            resYear = year - 1;
            resDayOfYear = daysInYear(resYear) + dayOfYear;
          } else if (dayOfYear > daysInYear(year)) {
            resYear = year + 1;
            resDayOfYear = dayOfYear - daysInYear(year);
          } else {
            resYear = year;
            resDayOfYear = dayOfYear;
          }
          return {
            year: resYear,
            dayOfYear: resDayOfYear
          };
        }
        function weekOfYear(mom, dow, doy) {
          var weekOffset = firstWeekOffset(mom.year(), dow, doy), week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1, resWeek, resYear;
          if (week < 1) {
            resYear = mom.year() - 1;
            resWeek = week + weeksInYear(resYear, dow, doy);
          } else if (week > weeksInYear(mom.year(), dow, doy)) {
            resWeek = week - weeksInYear(mom.year(), dow, doy);
            resYear = mom.year() + 1;
          } else {
            resYear = mom.year();
            resWeek = week;
          }
          return {
            week: resWeek,
            year: resYear
          };
        }
        function weeksInYear(year, dow, doy) {
          var weekOffset = firstWeekOffset(year, dow, doy), weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
          return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
        }
        addFormatToken("w", ["ww", 2], "wo", "week");
        addFormatToken("W", ["WW", 2], "Wo", "isoWeek");
        addUnitAlias("week", "w");
        addUnitAlias("isoWeek", "W");
        addUnitPriority("week", 5);
        addUnitPriority("isoWeek", 5);
        addRegexToken("w", match1to2);
        addRegexToken("ww", match1to2, match2);
        addRegexToken("W", match1to2);
        addRegexToken("WW", match1to2, match2);
        addWeekParseToken(
          ["w", "ww", "W", "WW"],
          function(input, week, config, token2) {
            week[token2.substr(0, 1)] = toInt(input);
          }
        );
        function localeWeek(mom) {
          return weekOfYear(mom, this._week.dow, this._week.doy).week;
        }
        var defaultLocaleWeek = {
          dow: 0,
          // Sunday is the first day of the week.
          doy: 6
          // The week that contains Jan 6th is the first week of the year.
        };
        function localeFirstDayOfWeek() {
          return this._week.dow;
        }
        function localeFirstDayOfYear() {
          return this._week.doy;
        }
        function getSetWeek(input) {
          var week = this.localeData().week(this);
          return input == null ? week : this.add((input - week) * 7, "d");
        }
        function getSetISOWeek(input) {
          var week = weekOfYear(this, 1, 4).week;
          return input == null ? week : this.add((input - week) * 7, "d");
        }
        addFormatToken("d", 0, "do", "day");
        addFormatToken("dd", 0, 0, function(format4) {
          return this.localeData().weekdaysMin(this, format4);
        });
        addFormatToken("ddd", 0, 0, function(format4) {
          return this.localeData().weekdaysShort(this, format4);
        });
        addFormatToken("dddd", 0, 0, function(format4) {
          return this.localeData().weekdays(this, format4);
        });
        addFormatToken("e", 0, 0, "weekday");
        addFormatToken("E", 0, 0, "isoWeekday");
        addUnitAlias("day", "d");
        addUnitAlias("weekday", "e");
        addUnitAlias("isoWeekday", "E");
        addUnitPriority("day", 11);
        addUnitPriority("weekday", 11);
        addUnitPriority("isoWeekday", 11);
        addRegexToken("d", match1to2);
        addRegexToken("e", match1to2);
        addRegexToken("E", match1to2);
        addRegexToken("dd", function(isStrict, locale5) {
          return locale5.weekdaysMinRegex(isStrict);
        });
        addRegexToken("ddd", function(isStrict, locale5) {
          return locale5.weekdaysShortRegex(isStrict);
        });
        addRegexToken("dddd", function(isStrict, locale5) {
          return locale5.weekdaysRegex(isStrict);
        });
        addWeekParseToken(["dd", "ddd", "dddd"], function(input, week, config, token2) {
          var weekday = config._locale.weekdaysParse(input, token2, config._strict);
          if (weekday != null) {
            week.d = weekday;
          } else {
            getParsingFlags(config).invalidWeekday = input;
          }
        });
        addWeekParseToken(["d", "e", "E"], function(input, week, config, token2) {
          week[token2] = toInt(input);
        });
        function parseWeekday(input, locale5) {
          if (typeof input !== "string") {
            return input;
          }
          if (!isNaN(input)) {
            return parseInt(input, 10);
          }
          input = locale5.weekdaysParse(input);
          if (typeof input === "number") {
            return input;
          }
          return null;
        }
        function parseIsoWeekday(input, locale5) {
          if (typeof input === "string") {
            return locale5.weekdaysParse(input) % 7 || 7;
          }
          return isNaN(input) ? null : input;
        }
        function shiftWeekdays(ws, n4) {
          return ws.slice(n4, 7).concat(ws.slice(0, n4));
        }
        var defaultLocaleWeekdays = "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), defaultLocaleWeekdaysShort = "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"), defaultLocaleWeekdaysMin = "Su_Mo_Tu_We_Th_Fr_Sa".split("_"), defaultWeekdaysRegex = matchWord, defaultWeekdaysShortRegex = matchWord, defaultWeekdaysMinRegex = matchWord;
        function localeWeekdays(m2, format4) {
          var weekdays = isArray2(this._weekdays) ? this._weekdays : this._weekdays[m2 && m2 !== true && this._weekdays.isFormat.test(format4) ? "format" : "standalone"];
          return m2 === true ? shiftWeekdays(weekdays, this._week.dow) : m2 ? weekdays[m2.day()] : weekdays;
        }
        function localeWeekdaysShort(m2) {
          return m2 === true ? shiftWeekdays(this._weekdaysShort, this._week.dow) : m2 ? this._weekdaysShort[m2.day()] : this._weekdaysShort;
        }
        function localeWeekdaysMin(m2) {
          return m2 === true ? shiftWeekdays(this._weekdaysMin, this._week.dow) : m2 ? this._weekdaysMin[m2.day()] : this._weekdaysMin;
        }
        function handleStrictParse$1(weekdayName, format4, strict) {
          var i3, ii, mom, llc = weekdayName.toLocaleLowerCase();
          if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._minWeekdaysParse = [];
            for (i3 = 0; i3 < 7; ++i3) {
              mom = createUTC([2e3, 1]).day(i3);
              this._minWeekdaysParse[i3] = this.weekdaysMin(
                mom,
                ""
              ).toLocaleLowerCase();
              this._shortWeekdaysParse[i3] = this.weekdaysShort(
                mom,
                ""
              ).toLocaleLowerCase();
              this._weekdaysParse[i3] = this.weekdays(mom, "").toLocaleLowerCase();
            }
          }
          if (strict) {
            if (format4 === "dddd") {
              ii = indexOf.call(this._weekdaysParse, llc);
              return ii !== -1 ? ii : null;
            } else if (format4 === "ddd") {
              ii = indexOf.call(this._shortWeekdaysParse, llc);
              return ii !== -1 ? ii : null;
            } else {
              ii = indexOf.call(this._minWeekdaysParse, llc);
              return ii !== -1 ? ii : null;
            }
          } else {
            if (format4 === "dddd") {
              ii = indexOf.call(this._weekdaysParse, llc);
              if (ii !== -1) {
                return ii;
              }
              ii = indexOf.call(this._shortWeekdaysParse, llc);
              if (ii !== -1) {
                return ii;
              }
              ii = indexOf.call(this._minWeekdaysParse, llc);
              return ii !== -1 ? ii : null;
            } else if (format4 === "ddd") {
              ii = indexOf.call(this._shortWeekdaysParse, llc);
              if (ii !== -1) {
                return ii;
              }
              ii = indexOf.call(this._weekdaysParse, llc);
              if (ii !== -1) {
                return ii;
              }
              ii = indexOf.call(this._minWeekdaysParse, llc);
              return ii !== -1 ? ii : null;
            } else {
              ii = indexOf.call(this._minWeekdaysParse, llc);
              if (ii !== -1) {
                return ii;
              }
              ii = indexOf.call(this._weekdaysParse, llc);
              if (ii !== -1) {
                return ii;
              }
              ii = indexOf.call(this._shortWeekdaysParse, llc);
              return ii !== -1 ? ii : null;
            }
          }
        }
        function localeWeekdaysParse(weekdayName, format4, strict) {
          var i3, mom, regex;
          if (this._weekdaysParseExact) {
            return handleStrictParse$1.call(this, weekdayName, format4, strict);
          }
          if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._minWeekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._fullWeekdaysParse = [];
          }
          for (i3 = 0; i3 < 7; i3++) {
            mom = createUTC([2e3, 1]).day(i3);
            if (strict && !this._fullWeekdaysParse[i3]) {
              this._fullWeekdaysParse[i3] = new RegExp(
                "^" + this.weekdays(mom, "").replace(".", "\\.?") + "$",
                "i"
              );
              this._shortWeekdaysParse[i3] = new RegExp(
                "^" + this.weekdaysShort(mom, "").replace(".", "\\.?") + "$",
                "i"
              );
              this._minWeekdaysParse[i3] = new RegExp(
                "^" + this.weekdaysMin(mom, "").replace(".", "\\.?") + "$",
                "i"
              );
            }
            if (!this._weekdaysParse[i3]) {
              regex = "^" + this.weekdays(mom, "") + "|^" + this.weekdaysShort(mom, "") + "|^" + this.weekdaysMin(mom, "");
              this._weekdaysParse[i3] = new RegExp(regex.replace(".", ""), "i");
            }
            if (strict && format4 === "dddd" && this._fullWeekdaysParse[i3].test(weekdayName)) {
              return i3;
            } else if (strict && format4 === "ddd" && this._shortWeekdaysParse[i3].test(weekdayName)) {
              return i3;
            } else if (strict && format4 === "dd" && this._minWeekdaysParse[i3].test(weekdayName)) {
              return i3;
            } else if (!strict && this._weekdaysParse[i3].test(weekdayName)) {
              return i3;
            }
          }
        }
        function getSetDayOfWeek(input) {
          if (!this.isValid()) {
            return input != null ? this : NaN;
          }
          var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
          if (input != null) {
            input = parseWeekday(input, this.localeData());
            return this.add(input - day, "d");
          } else {
            return day;
          }
        }
        function getSetLocaleDayOfWeek(input) {
          if (!this.isValid()) {
            return input != null ? this : NaN;
          }
          var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
          return input == null ? weekday : this.add(input - weekday, "d");
        }
        function getSetISODayOfWeek(input) {
          if (!this.isValid()) {
            return input != null ? this : NaN;
          }
          if (input != null) {
            var weekday = parseIsoWeekday(input, this.localeData());
            return this.day(this.day() % 7 ? weekday : weekday - 7);
          } else {
            return this.day() || 7;
          }
        }
        function weekdaysRegex(isStrict) {
          if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, "_weekdaysRegex")) {
              computeWeekdaysParse.call(this);
            }
            if (isStrict) {
              return this._weekdaysStrictRegex;
            } else {
              return this._weekdaysRegex;
            }
          } else {
            if (!hasOwnProp(this, "_weekdaysRegex")) {
              this._weekdaysRegex = defaultWeekdaysRegex;
            }
            return this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex;
          }
        }
        function weekdaysShortRegex(isStrict) {
          if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, "_weekdaysRegex")) {
              computeWeekdaysParse.call(this);
            }
            if (isStrict) {
              return this._weekdaysShortStrictRegex;
            } else {
              return this._weekdaysShortRegex;
            }
          } else {
            if (!hasOwnProp(this, "_weekdaysShortRegex")) {
              this._weekdaysShortRegex = defaultWeekdaysShortRegex;
            }
            return this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
          }
        }
        function weekdaysMinRegex(isStrict) {
          if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, "_weekdaysRegex")) {
              computeWeekdaysParse.call(this);
            }
            if (isStrict) {
              return this._weekdaysMinStrictRegex;
            } else {
              return this._weekdaysMinRegex;
            }
          } else {
            if (!hasOwnProp(this, "_weekdaysMinRegex")) {
              this._weekdaysMinRegex = defaultWeekdaysMinRegex;
            }
            return this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
          }
        }
        function computeWeekdaysParse() {
          function cmpLenRev(a2, b2) {
            return b2.length - a2.length;
          }
          var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [], i3, mom, minp, shortp, longp;
          for (i3 = 0; i3 < 7; i3++) {
            mom = createUTC([2e3, 1]).day(i3);
            minp = regexEscape2(this.weekdaysMin(mom, ""));
            shortp = regexEscape2(this.weekdaysShort(mom, ""));
            longp = regexEscape2(this.weekdays(mom, ""));
            minPieces.push(minp);
            shortPieces.push(shortp);
            longPieces.push(longp);
            mixedPieces.push(minp);
            mixedPieces.push(shortp);
            mixedPieces.push(longp);
          }
          minPieces.sort(cmpLenRev);
          shortPieces.sort(cmpLenRev);
          longPieces.sort(cmpLenRev);
          mixedPieces.sort(cmpLenRev);
          this._weekdaysRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
          this._weekdaysShortRegex = this._weekdaysRegex;
          this._weekdaysMinRegex = this._weekdaysRegex;
          this._weekdaysStrictRegex = new RegExp(
            "^(" + longPieces.join("|") + ")",
            "i"
          );
          this._weekdaysShortStrictRegex = new RegExp(
            "^(" + shortPieces.join("|") + ")",
            "i"
          );
          this._weekdaysMinStrictRegex = new RegExp(
            "^(" + minPieces.join("|") + ")",
            "i"
          );
        }
        function hFormat() {
          return this.hours() % 12 || 12;
        }
        function kFormat() {
          return this.hours() || 24;
        }
        addFormatToken("H", ["HH", 2], 0, "hour");
        addFormatToken("h", ["hh", 2], 0, hFormat);
        addFormatToken("k", ["kk", 2], 0, kFormat);
        addFormatToken("hmm", 0, 0, function() {
          return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2);
        });
        addFormatToken("hmmss", 0, 0, function() {
          return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
        });
        addFormatToken("Hmm", 0, 0, function() {
          return "" + this.hours() + zeroFill(this.minutes(), 2);
        });
        addFormatToken("Hmmss", 0, 0, function() {
          return "" + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
        });
        function meridiem(token2, lowercase) {
          addFormatToken(token2, 0, 0, function() {
            return this.localeData().meridiem(
              this.hours(),
              this.minutes(),
              lowercase
            );
          });
        }
        meridiem("a", true);
        meridiem("A", false);
        addUnitAlias("hour", "h");
        addUnitPriority("hour", 13);
        function matchMeridiem(isStrict, locale5) {
          return locale5._meridiemParse;
        }
        addRegexToken("a", matchMeridiem);
        addRegexToken("A", matchMeridiem);
        addRegexToken("H", match1to2);
        addRegexToken("h", match1to2);
        addRegexToken("k", match1to2);
        addRegexToken("HH", match1to2, match2);
        addRegexToken("hh", match1to2, match2);
        addRegexToken("kk", match1to2, match2);
        addRegexToken("hmm", match3to4);
        addRegexToken("hmmss", match5to6);
        addRegexToken("Hmm", match3to4);
        addRegexToken("Hmmss", match5to6);
        addParseToken(["H", "HH"], HOUR);
        addParseToken(["k", "kk"], function(input, array4, config) {
          var kInput = toInt(input);
          array4[HOUR] = kInput === 24 ? 0 : kInput;
        });
        addParseToken(["a", "A"], function(input, array4, config) {
          config._isPm = config._locale.isPM(input);
          config._meridiem = input;
        });
        addParseToken(["h", "hh"], function(input, array4, config) {
          array4[HOUR] = toInt(input);
          getParsingFlags(config).bigHour = true;
        });
        addParseToken("hmm", function(input, array4, config) {
          var pos = input.length - 2;
          array4[HOUR] = toInt(input.substr(0, pos));
          array4[MINUTE] = toInt(input.substr(pos));
          getParsingFlags(config).bigHour = true;
        });
        addParseToken("hmmss", function(input, array4, config) {
          var pos1 = input.length - 4, pos2 = input.length - 2;
          array4[HOUR] = toInt(input.substr(0, pos1));
          array4[MINUTE] = toInt(input.substr(pos1, 2));
          array4[SECOND] = toInt(input.substr(pos2));
          getParsingFlags(config).bigHour = true;
        });
        addParseToken("Hmm", function(input, array4, config) {
          var pos = input.length - 2;
          array4[HOUR] = toInt(input.substr(0, pos));
          array4[MINUTE] = toInt(input.substr(pos));
        });
        addParseToken("Hmmss", function(input, array4, config) {
          var pos1 = input.length - 4, pos2 = input.length - 2;
          array4[HOUR] = toInt(input.substr(0, pos1));
          array4[MINUTE] = toInt(input.substr(pos1, 2));
          array4[SECOND] = toInt(input.substr(pos2));
        });
        function localeIsPM(input) {
          return (input + "").toLowerCase().charAt(0) === "p";
        }
        var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i, getSetHour = makeGetSet("Hours", true);
        function localeMeridiem(hours2, minutes2, isLower) {
          if (hours2 > 11) {
            return isLower ? "pm" : "PM";
          } else {
            return isLower ? "am" : "AM";
          }
        }
        var baseConfig = {
          calendar: defaultCalendar,
          longDateFormat: defaultLongDateFormat,
          invalidDate: defaultInvalidDate,
          ordinal: defaultOrdinal,
          dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
          relativeTime: defaultRelativeTime,
          months: defaultLocaleMonths,
          monthsShort: defaultLocaleMonthsShort,
          week: defaultLocaleWeek,
          weekdays: defaultLocaleWeekdays,
          weekdaysMin: defaultLocaleWeekdaysMin,
          weekdaysShort: defaultLocaleWeekdaysShort,
          meridiemParse: defaultLocaleMeridiemParse
        };
        var locales = {}, localeFamilies = {}, globalLocale;
        function commonPrefix(arr1, arr2) {
          var i3, minl = Math.min(arr1.length, arr2.length);
          for (i3 = 0; i3 < minl; i3 += 1) {
            if (arr1[i3] !== arr2[i3]) {
              return i3;
            }
          }
          return minl;
        }
        function normalizeLocale(key2) {
          return key2 ? key2.toLowerCase().replace("_", "-") : key2;
        }
        function chooseLocale(names2) {
          var i3 = 0, j2, next, locale5, split;
          while (i3 < names2.length) {
            split = normalizeLocale(names2[i3]).split("-");
            j2 = split.length;
            next = normalizeLocale(names2[i3 + 1]);
            next = next ? next.split("-") : null;
            while (j2 > 0) {
              locale5 = loadLocale(split.slice(0, j2).join("-"));
              if (locale5) {
                return locale5;
              }
              if (next && next.length >= j2 && commonPrefix(split, next) >= j2 - 1) {
                break;
              }
              j2--;
            }
            i3++;
          }
          return globalLocale;
        }
        function isLocaleNameSane(name) {
          return name.match("^[^/\\\\]*$") != null;
        }
        function loadLocale(name) {
          var oldLocale = null, aliasedRequire;
          if (locales[name] === void 0 && typeof module2 !== "undefined" && module2 && module2.exports && isLocaleNameSane(name)) {
            try {
              oldLocale = globalLocale._abbr;
              aliasedRequire = __require;
              aliasedRequire("./locale/" + name);
              getSetGlobalLocale(oldLocale);
            } catch (e3) {
              locales[name] = null;
            }
          }
          return locales[name];
        }
        function getSetGlobalLocale(key2, values) {
          var data;
          if (key2) {
            if (isUndefined2(values)) {
              data = getLocale(key2);
            } else {
              data = defineLocale(key2, values);
            }
            if (data) {
              globalLocale = data;
            } else {
              if (typeof console !== "undefined" && console.warn) {
                console.warn(
                  "Locale " + key2 + " not found. Did you forget to load it?"
                );
              }
            }
          }
          return globalLocale._abbr;
        }
        function defineLocale(name, config) {
          if (config !== null) {
            var locale5, parentConfig = baseConfig;
            config.abbr = name;
            if (locales[name] != null) {
              deprecateSimple(
                "defineLocaleOverride",
                "use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."
              );
              parentConfig = locales[name]._config;
            } else if (config.parentLocale != null) {
              if (locales[config.parentLocale] != null) {
                parentConfig = locales[config.parentLocale]._config;
              } else {
                locale5 = loadLocale(config.parentLocale);
                if (locale5 != null) {
                  parentConfig = locale5._config;
                } else {
                  if (!localeFamilies[config.parentLocale]) {
                    localeFamilies[config.parentLocale] = [];
                  }
                  localeFamilies[config.parentLocale].push({
                    name,
                    config
                  });
                  return null;
                }
              }
            }
            locales[name] = new Locale(mergeConfigs(parentConfig, config));
            if (localeFamilies[name]) {
              localeFamilies[name].forEach(function(x2) {
                defineLocale(x2.name, x2.config);
              });
            }
            getSetGlobalLocale(name);
            return locales[name];
          } else {
            delete locales[name];
            return null;
          }
        }
        function updateLocale(name, config) {
          if (config != null) {
            var locale5, tmpLocale, parentConfig = baseConfig;
            if (locales[name] != null && locales[name].parentLocale != null) {
              locales[name].set(mergeConfigs(locales[name]._config, config));
            } else {
              tmpLocale = loadLocale(name);
              if (tmpLocale != null) {
                parentConfig = tmpLocale._config;
              }
              config = mergeConfigs(parentConfig, config);
              if (tmpLocale == null) {
                config.abbr = name;
              }
              locale5 = new Locale(config);
              locale5.parentLocale = locales[name];
              locales[name] = locale5;
            }
            getSetGlobalLocale(name);
          } else {
            if (locales[name] != null) {
              if (locales[name].parentLocale != null) {
                locales[name] = locales[name].parentLocale;
                if (name === getSetGlobalLocale()) {
                  getSetGlobalLocale(name);
                }
              } else if (locales[name] != null) {
                delete locales[name];
              }
            }
          }
          return locales[name];
        }
        function getLocale(key2) {
          var locale5;
          if (key2 && key2._locale && key2._locale._abbr) {
            key2 = key2._locale._abbr;
          }
          if (!key2) {
            return globalLocale;
          }
          if (!isArray2(key2)) {
            locale5 = loadLocale(key2);
            if (locale5) {
              return locale5;
            }
            key2 = [key2];
          }
          return chooseLocale(key2);
        }
        function listLocales() {
          return keys2(locales);
        }
        function checkOverflow(m2) {
          var overflow, a2 = m2._a;
          if (a2 && getParsingFlags(m2).overflow === -2) {
            overflow = a2[MONTH] < 0 || a2[MONTH] > 11 ? MONTH : a2[DATE] < 1 || a2[DATE] > daysInMonth(a2[YEAR], a2[MONTH]) ? DATE : a2[HOUR] < 0 || a2[HOUR] > 24 || a2[HOUR] === 24 && (a2[MINUTE] !== 0 || a2[SECOND] !== 0 || a2[MILLISECOND] !== 0) ? HOUR : a2[MINUTE] < 0 || a2[MINUTE] > 59 ? MINUTE : a2[SECOND] < 0 || a2[SECOND] > 59 ? SECOND : a2[MILLISECOND] < 0 || a2[MILLISECOND] > 999 ? MILLISECOND : -1;
            if (getParsingFlags(m2)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
              overflow = DATE;
            }
            if (getParsingFlags(m2)._overflowWeeks && overflow === -1) {
              overflow = WEEK;
            }
            if (getParsingFlags(m2)._overflowWeekday && overflow === -1) {
              overflow = WEEKDAY;
            }
            getParsingFlags(m2).overflow = overflow;
          }
          return m2;
        }
        var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, tzRegex = /Z|[+-]\d\d(?::?\d\d)?/, isoDates = [
          ["YYYYYY-MM-DD", /[+-]\d{6}-\d\d-\d\d/],
          ["YYYY-MM-DD", /\d{4}-\d\d-\d\d/],
          ["GGGG-[W]WW-E", /\d{4}-W\d\d-\d/],
          ["GGGG-[W]WW", /\d{4}-W\d\d/, false],
          ["YYYY-DDD", /\d{4}-\d{3}/],
          ["YYYY-MM", /\d{4}-\d\d/, false],
          ["YYYYYYMMDD", /[+-]\d{10}/],
          ["YYYYMMDD", /\d{8}/],
          ["GGGG[W]WWE", /\d{4}W\d{3}/],
          ["GGGG[W]WW", /\d{4}W\d{2}/, false],
          ["YYYYDDD", /\d{7}/],
          ["YYYYMM", /\d{6}/, false],
          ["YYYY", /\d{4}/, false]
        ], isoTimes = [
          ["HH:mm:ss.SSSS", /\d\d:\d\d:\d\d\.\d+/],
          ["HH:mm:ss,SSSS", /\d\d:\d\d:\d\d,\d+/],
          ["HH:mm:ss", /\d\d:\d\d:\d\d/],
          ["HH:mm", /\d\d:\d\d/],
          ["HHmmss.SSSS", /\d\d\d\d\d\d\.\d+/],
          ["HHmmss,SSSS", /\d\d\d\d\d\d,\d+/],
          ["HHmmss", /\d\d\d\d\d\d/],
          ["HHmm", /\d\d\d\d/],
          ["HH", /\d\d/]
        ], aspNetJsonRegex = /^\/?Date\((-?\d+)/i, rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/, obsOffsets = {
          UT: 0,
          GMT: 0,
          EDT: -4 * 60,
          EST: -5 * 60,
          CDT: -5 * 60,
          CST: -6 * 60,
          MDT: -6 * 60,
          MST: -7 * 60,
          PDT: -7 * 60,
          PST: -8 * 60
        };
        function configFromISO(config) {
          var i3, l2, string3 = config._i, match5 = extendedIsoRegex.exec(string3) || basicIsoRegex.exec(string3), allowTime, dateFormat, timeFormat, tzFormat, isoDatesLen = isoDates.length, isoTimesLen = isoTimes.length;
          if (match5) {
            getParsingFlags(config).iso = true;
            for (i3 = 0, l2 = isoDatesLen; i3 < l2; i3++) {
              if (isoDates[i3][1].exec(match5[1])) {
                dateFormat = isoDates[i3][0];
                allowTime = isoDates[i3][2] !== false;
                break;
              }
            }
            if (dateFormat == null) {
              config._isValid = false;
              return;
            }
            if (match5[3]) {
              for (i3 = 0, l2 = isoTimesLen; i3 < l2; i3++) {
                if (isoTimes[i3][1].exec(match5[3])) {
                  timeFormat = (match5[2] || " ") + isoTimes[i3][0];
                  break;
                }
              }
              if (timeFormat == null) {
                config._isValid = false;
                return;
              }
            }
            if (!allowTime && timeFormat != null) {
              config._isValid = false;
              return;
            }
            if (match5[4]) {
              if (tzRegex.exec(match5[4])) {
                tzFormat = "Z";
              } else {
                config._isValid = false;
                return;
              }
            }
            config._f = dateFormat + (timeFormat || "") + (tzFormat || "");
            configFromStringAndFormat(config);
          } else {
            config._isValid = false;
          }
        }
        function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
          var result2 = [
            untruncateYear(yearStr),
            defaultLocaleMonthsShort.indexOf(monthStr),
            parseInt(dayStr, 10),
            parseInt(hourStr, 10),
            parseInt(minuteStr, 10)
          ];
          if (secondStr) {
            result2.push(parseInt(secondStr, 10));
          }
          return result2;
        }
        function untruncateYear(yearStr) {
          var year = parseInt(yearStr, 10);
          if (year <= 49) {
            return 2e3 + year;
          } else if (year <= 999) {
            return 1900 + year;
          }
          return year;
        }
        function preprocessRFC2822(s2) {
          return s2.replace(/\([^()]*\)|[\n\t]/g, " ").replace(/(\s\s+)/g, " ").replace(/^\s\s*/, "").replace(/\s\s*$/, "");
        }
        function checkWeekday(weekdayStr, parsedInput, config) {
          if (weekdayStr) {
            var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr), weekdayActual = new Date(
              parsedInput[0],
              parsedInput[1],
              parsedInput[2]
            ).getDay();
            if (weekdayProvided !== weekdayActual) {
              getParsingFlags(config).weekdayMismatch = true;
              config._isValid = false;
              return false;
            }
          }
          return true;
        }
        function calculateOffset(obsOffset, militaryOffset, numOffset) {
          if (obsOffset) {
            return obsOffsets[obsOffset];
          } else if (militaryOffset) {
            return 0;
          } else {
            var hm = parseInt(numOffset, 10), m2 = hm % 100, h2 = (hm - m2) / 100;
            return h2 * 60 + m2;
          }
        }
        function configFromRFC2822(config) {
          var match5 = rfc2822.exec(preprocessRFC2822(config._i)), parsedArray;
          if (match5) {
            parsedArray = extractFromRFC2822Strings(
              match5[4],
              match5[3],
              match5[2],
              match5[5],
              match5[6],
              match5[7]
            );
            if (!checkWeekday(match5[1], parsedArray, config)) {
              return;
            }
            config._a = parsedArray;
            config._tzm = calculateOffset(match5[8], match5[9], match5[10]);
            config._d = createUTCDate.apply(null, config._a);
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
            getParsingFlags(config).rfc2822 = true;
          } else {
            config._isValid = false;
          }
        }
        function configFromString(config) {
          var matched = aspNetJsonRegex.exec(config._i);
          if (matched !== null) {
            config._d = /* @__PURE__ */ new Date(+matched[1]);
            return;
          }
          configFromISO(config);
          if (config._isValid === false) {
            delete config._isValid;
          } else {
            return;
          }
          configFromRFC2822(config);
          if (config._isValid === false) {
            delete config._isValid;
          } else {
            return;
          }
          if (config._strict) {
            config._isValid = false;
          } else {
            hooks.createFromInputFallback(config);
          }
        }
        hooks.createFromInputFallback = deprecate(
          "value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",
          function(config) {
            config._d = /* @__PURE__ */ new Date(config._i + (config._useUTC ? " UTC" : ""));
          }
        );
        function defaults2(a2, b2, c2) {
          if (a2 != null) {
            return a2;
          }
          if (b2 != null) {
            return b2;
          }
          return c2;
        }
        function currentDateArray(config) {
          var nowValue = new Date(hooks.now());
          if (config._useUTC) {
            return [
              nowValue.getUTCFullYear(),
              nowValue.getUTCMonth(),
              nowValue.getUTCDate()
            ];
          }
          return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
        }
        function configFromArray(config) {
          var i3, date4, input = [], currentDate, expectedWeekday, yearToUse;
          if (config._d) {
            return;
          }
          currentDate = currentDateArray(config);
          if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
            dayOfYearFromWeekInfo(config);
          }
          if (config._dayOfYear != null) {
            yearToUse = defaults2(config._a[YEAR], currentDate[YEAR]);
            if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
              getParsingFlags(config)._overflowDayOfYear = true;
            }
            date4 = createUTCDate(yearToUse, 0, config._dayOfYear);
            config._a[MONTH] = date4.getUTCMonth();
            config._a[DATE] = date4.getUTCDate();
          }
          for (i3 = 0; i3 < 3 && config._a[i3] == null; ++i3) {
            config._a[i3] = input[i3] = currentDate[i3];
          }
          for (; i3 < 7; i3++) {
            config._a[i3] = input[i3] = config._a[i3] == null ? i3 === 2 ? 1 : 0 : config._a[i3];
          }
          if (config._a[HOUR] === 24 && config._a[MINUTE] === 0 && config._a[SECOND] === 0 && config._a[MILLISECOND] === 0) {
            config._nextDay = true;
            config._a[HOUR] = 0;
          }
          config._d = (config._useUTC ? createUTCDate : createDate).apply(
            null,
            input
          );
          expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();
          if (config._tzm != null) {
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
          }
          if (config._nextDay) {
            config._a[HOUR] = 24;
          }
          if (config._w && typeof config._w.d !== "undefined" && config._w.d !== expectedWeekday) {
            getParsingFlags(config).weekdayMismatch = true;
          }
        }
        function dayOfYearFromWeekInfo(config) {
          var w2, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;
          w2 = config._w;
          if (w2.GG != null || w2.W != null || w2.E != null) {
            dow = 1;
            doy = 4;
            weekYear = defaults2(
              w2.GG,
              config._a[YEAR],
              weekOfYear(createLocal(), 1, 4).year
            );
            week = defaults2(w2.W, 1);
            weekday = defaults2(w2.E, 1);
            if (weekday < 1 || weekday > 7) {
              weekdayOverflow = true;
            }
          } else {
            dow = config._locale._week.dow;
            doy = config._locale._week.doy;
            curWeek = weekOfYear(createLocal(), dow, doy);
            weekYear = defaults2(w2.gg, config._a[YEAR], curWeek.year);
            week = defaults2(w2.w, curWeek.week);
            if (w2.d != null) {
              weekday = w2.d;
              if (weekday < 0 || weekday > 6) {
                weekdayOverflow = true;
              }
            } else if (w2.e != null) {
              weekday = w2.e + dow;
              if (w2.e < 0 || w2.e > 6) {
                weekdayOverflow = true;
              }
            } else {
              weekday = dow;
            }
          }
          if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
            getParsingFlags(config)._overflowWeeks = true;
          } else if (weekdayOverflow != null) {
            getParsingFlags(config)._overflowWeekday = true;
          } else {
            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
            config._a[YEAR] = temp.year;
            config._dayOfYear = temp.dayOfYear;
          }
        }
        hooks.ISO_8601 = function() {
        };
        hooks.RFC_2822 = function() {
        };
        function configFromStringAndFormat(config) {
          if (config._f === hooks.ISO_8601) {
            configFromISO(config);
            return;
          }
          if (config._f === hooks.RFC_2822) {
            configFromRFC2822(config);
            return;
          }
          config._a = [];
          getParsingFlags(config).empty = true;
          var string3 = "" + config._i, i3, parsedInput, tokens2, token2, skipped, stringLength = string3.length, totalParsedInputLength = 0, era, tokenLen;
          tokens2 = expandFormat(config._f, config._locale).match(formattingTokens) || [];
          tokenLen = tokens2.length;
          for (i3 = 0; i3 < tokenLen; i3++) {
            token2 = tokens2[i3];
            parsedInput = (string3.match(getParseRegexForToken(token2, config)) || [])[0];
            if (parsedInput) {
              skipped = string3.substr(0, string3.indexOf(parsedInput));
              if (skipped.length > 0) {
                getParsingFlags(config).unusedInput.push(skipped);
              }
              string3 = string3.slice(
                string3.indexOf(parsedInput) + parsedInput.length
              );
              totalParsedInputLength += parsedInput.length;
            }
            if (formatTokenFunctions[token2]) {
              if (parsedInput) {
                getParsingFlags(config).empty = false;
              } else {
                getParsingFlags(config).unusedTokens.push(token2);
              }
              addTimeToArrayFromToken(token2, parsedInput, config);
            } else if (config._strict && !parsedInput) {
              getParsingFlags(config).unusedTokens.push(token2);
            }
          }
          getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
          if (string3.length > 0) {
            getParsingFlags(config).unusedInput.push(string3);
          }
          if (config._a[HOUR] <= 12 && getParsingFlags(config).bigHour === true && config._a[HOUR] > 0) {
            getParsingFlags(config).bigHour = void 0;
          }
          getParsingFlags(config).parsedDateParts = config._a.slice(0);
          getParsingFlags(config).meridiem = config._meridiem;
          config._a[HOUR] = meridiemFixWrap(
            config._locale,
            config._a[HOUR],
            config._meridiem
          );
          era = getParsingFlags(config).era;
          if (era !== null) {
            config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);
          }
          configFromArray(config);
          checkOverflow(config);
        }
        function meridiemFixWrap(locale5, hour, meridiem2) {
          var isPm;
          if (meridiem2 == null) {
            return hour;
          }
          if (locale5.meridiemHour != null) {
            return locale5.meridiemHour(hour, meridiem2);
          } else if (locale5.isPM != null) {
            isPm = locale5.isPM(meridiem2);
            if (isPm && hour < 12) {
              hour += 12;
            }
            if (!isPm && hour === 12) {
              hour = 0;
            }
            return hour;
          } else {
            return hour;
          }
        }
        function configFromStringAndArray(config) {
          var tempConfig, bestMoment, scoreToBeat, i3, currentScore, validFormatFound, bestFormatIsValid = false, configfLen = config._f.length;
          if (configfLen === 0) {
            getParsingFlags(config).invalidFormat = true;
            config._d = /* @__PURE__ */ new Date(NaN);
            return;
          }
          for (i3 = 0; i3 < configfLen; i3++) {
            currentScore = 0;
            validFormatFound = false;
            tempConfig = copyConfig({}, config);
            if (config._useUTC != null) {
              tempConfig._useUTC = config._useUTC;
            }
            tempConfig._f = config._f[i3];
            configFromStringAndFormat(tempConfig);
            if (isValid(tempConfig)) {
              validFormatFound = true;
            }
            currentScore += getParsingFlags(tempConfig).charsLeftOver;
            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
            getParsingFlags(tempConfig).score = currentScore;
            if (!bestFormatIsValid) {
              if (scoreToBeat == null || currentScore < scoreToBeat || validFormatFound) {
                scoreToBeat = currentScore;
                bestMoment = tempConfig;
                if (validFormatFound) {
                  bestFormatIsValid = true;
                }
              }
            } else {
              if (currentScore < scoreToBeat) {
                scoreToBeat = currentScore;
                bestMoment = tempConfig;
              }
            }
          }
          extend2(config, bestMoment || tempConfig);
        }
        function configFromObject(config) {
          if (config._d) {
            return;
          }
          var i3 = normalizeObjectUnits(config._i), dayOrDate = i3.day === void 0 ? i3.date : i3.day;
          config._a = map(
            [i3.year, i3.month, dayOrDate, i3.hour, i3.minute, i3.second, i3.millisecond],
            function(obj) {
              return obj && parseInt(obj, 10);
            }
          );
          configFromArray(config);
        }
        function createFromConfig(config) {
          var res = new Moment(checkOverflow(prepareConfig(config)));
          if (res._nextDay) {
            res.add(1, "d");
            res._nextDay = void 0;
          }
          return res;
        }
        function prepareConfig(config) {
          var input = config._i, format4 = config._f;
          config._locale = config._locale || getLocale(config._l);
          if (input === null || format4 === void 0 && input === "") {
            return createInvalid({ nullInput: true });
          }
          if (typeof input === "string") {
            config._i = input = config._locale.preparse(input);
          }
          if (isMoment(input)) {
            return new Moment(checkOverflow(input));
          } else if (isDate3(input)) {
            config._d = input;
          } else if (isArray2(format4)) {
            configFromStringAndArray(config);
          } else if (format4) {
            configFromStringAndFormat(config);
          } else {
            configFromInput(config);
          }
          if (!isValid(config)) {
            config._d = null;
          }
          return config;
        }
        function configFromInput(config) {
          var input = config._i;
          if (isUndefined2(input)) {
            config._d = new Date(hooks.now());
          } else if (isDate3(input)) {
            config._d = new Date(input.valueOf());
          } else if (typeof input === "string") {
            configFromString(config);
          } else if (isArray2(input)) {
            config._a = map(input.slice(0), function(obj) {
              return parseInt(obj, 10);
            });
            configFromArray(config);
          } else if (isObject3(input)) {
            configFromObject(config);
          } else if (isNumber2(input)) {
            config._d = new Date(input);
          } else {
            hooks.createFromInputFallback(config);
          }
        }
        function createLocalOrUTC(input, format4, locale5, strict, isUTC) {
          var c2 = {};
          if (format4 === true || format4 === false) {
            strict = format4;
            format4 = void 0;
          }
          if (locale5 === true || locale5 === false) {
            strict = locale5;
            locale5 = void 0;
          }
          if (isObject3(input) && isObjectEmpty(input) || isArray2(input) && input.length === 0) {
            input = void 0;
          }
          c2._isAMomentObject = true;
          c2._useUTC = c2._isUTC = isUTC;
          c2._l = locale5;
          c2._i = input;
          c2._f = format4;
          c2._strict = strict;
          return createFromConfig(c2);
        }
        function createLocal(input, format4, locale5, strict) {
          return createLocalOrUTC(input, format4, locale5, strict, false);
        }
        var prototypeMin = deprecate(
          "moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",
          function() {
            var other = createLocal.apply(null, arguments);
            if (this.isValid() && other.isValid()) {
              return other < this ? this : other;
            } else {
              return createInvalid();
            }
          }
        ), prototypeMax = deprecate(
          "moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",
          function() {
            var other = createLocal.apply(null, arguments);
            if (this.isValid() && other.isValid()) {
              return other > this ? this : other;
            } else {
              return createInvalid();
            }
          }
        );
        function pickBy(fn2, moments) {
          var res, i3;
          if (moments.length === 1 && isArray2(moments[0])) {
            moments = moments[0];
          }
          if (!moments.length) {
            return createLocal();
          }
          res = moments[0];
          for (i3 = 1; i3 < moments.length; ++i3) {
            if (!moments[i3].isValid() || moments[i3][fn2](res)) {
              res = moments[i3];
            }
          }
          return res;
        }
        function min() {
          var args = [].slice.call(arguments, 0);
          return pickBy("isBefore", args);
        }
        function max() {
          var args = [].slice.call(arguments, 0);
          return pickBy("isAfter", args);
        }
        var now2 = function() {
          return Date.now ? Date.now() : +/* @__PURE__ */ new Date();
        };
        var ordering = [
          "year",
          "quarter",
          "month",
          "week",
          "day",
          "hour",
          "minute",
          "second",
          "millisecond"
        ];
        function isDurationValid(m2) {
          var key2, unitHasDecimal = false, i3, orderLen = ordering.length;
          for (key2 in m2) {
            if (hasOwnProp(m2, key2) && !(indexOf.call(ordering, key2) !== -1 && (m2[key2] == null || !isNaN(m2[key2])))) {
              return false;
            }
          }
          for (i3 = 0; i3 < orderLen; ++i3) {
            if (m2[ordering[i3]]) {
              if (unitHasDecimal) {
                return false;
              }
              if (parseFloat(m2[ordering[i3]]) !== toInt(m2[ordering[i3]])) {
                unitHasDecimal = true;
              }
            }
          }
          return true;
        }
        function isValid$1() {
          return this._isValid;
        }
        function createInvalid$1() {
          return createDuration(NaN);
        }
        function Duration(duration) {
          var normalizedInput = normalizeObjectUnits(duration), years2 = normalizedInput.year || 0, quarters = normalizedInput.quarter || 0, months2 = normalizedInput.month || 0, weeks2 = normalizedInput.week || normalizedInput.isoWeek || 0, days2 = normalizedInput.day || 0, hours2 = normalizedInput.hour || 0, minutes2 = normalizedInput.minute || 0, seconds2 = normalizedInput.second || 0, milliseconds2 = normalizedInput.millisecond || 0;
          this._isValid = isDurationValid(normalizedInput);
          this._milliseconds = +milliseconds2 + seconds2 * 1e3 + // 1000
          minutes2 * 6e4 + // 1000 * 60
          hours2 * 1e3 * 60 * 60;
          this._days = +days2 + weeks2 * 7;
          this._months = +months2 + quarters * 3 + years2 * 12;
          this._data = {};
          this._locale = getLocale();
          this._bubble();
        }
        function isDuration(obj) {
          return obj instanceof Duration;
        }
        function absRound(number4) {
          if (number4 < 0) {
            return Math.round(-1 * number4) * -1;
          } else {
            return Math.round(number4);
          }
        }
        function compareArrays(array1, array22, dontConvert) {
          var len = Math.min(array1.length, array22.length), lengthDiff = Math.abs(array1.length - array22.length), diffs = 0, i3;
          for (i3 = 0; i3 < len; i3++) {
            if (dontConvert && array1[i3] !== array22[i3] || !dontConvert && toInt(array1[i3]) !== toInt(array22[i3])) {
              diffs++;
            }
          }
          return diffs + lengthDiff;
        }
        function offset4(token2, separator) {
          addFormatToken(token2, 0, 0, function() {
            var offset5 = this.utcOffset(), sign2 = "+";
            if (offset5 < 0) {
              offset5 = -offset5;
              sign2 = "-";
            }
            return sign2 + zeroFill(~~(offset5 / 60), 2) + separator + zeroFill(~~offset5 % 60, 2);
          });
        }
        offset4("Z", ":");
        offset4("ZZ", "");
        addRegexToken("Z", matchShortOffset);
        addRegexToken("ZZ", matchShortOffset);
        addParseToken(["Z", "ZZ"], function(input, array4, config) {
          config._useUTC = true;
          config._tzm = offsetFromString(matchShortOffset, input);
        });
        var chunkOffset = /([\+\-]|\d\d)/gi;
        function offsetFromString(matcher, string3) {
          var matches = (string3 || "").match(matcher), chunk, parts, minutes2;
          if (matches === null) {
            return null;
          }
          chunk = matches[matches.length - 1] || [];
          parts = (chunk + "").match(chunkOffset) || ["-", 0, 0];
          minutes2 = +(parts[1] * 60) + toInt(parts[2]);
          return minutes2 === 0 ? 0 : parts[0] === "+" ? minutes2 : -minutes2;
        }
        function cloneWithOffset(input, model) {
          var res, diff2;
          if (model._isUTC) {
            res = model.clone();
            diff2 = (isMoment(input) || isDate3(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
            res._d.setTime(res._d.valueOf() + diff2);
            hooks.updateOffset(res, false);
            return res;
          } else {
            return createLocal(input).local();
          }
        }
        function getDateOffset(m2) {
          return -Math.round(m2._d.getTimezoneOffset());
        }
        hooks.updateOffset = function() {
        };
        function getSetOffset(input, keepLocalTime, keepMinutes) {
          var offset5 = this._offset || 0, localAdjust;
          if (!this.isValid()) {
            return input != null ? this : NaN;
          }
          if (input != null) {
            if (typeof input === "string") {
              input = offsetFromString(matchShortOffset, input);
              if (input === null) {
                return this;
              }
            } else if (Math.abs(input) < 16 && !keepMinutes) {
              input = input * 60;
            }
            if (!this._isUTC && keepLocalTime) {
              localAdjust = getDateOffset(this);
            }
            this._offset = input;
            this._isUTC = true;
            if (localAdjust != null) {
              this.add(localAdjust, "m");
            }
            if (offset5 !== input) {
              if (!keepLocalTime || this._changeInProgress) {
                addSubtract(
                  this,
                  createDuration(input - offset5, "m"),
                  1,
                  false
                );
              } else if (!this._changeInProgress) {
                this._changeInProgress = true;
                hooks.updateOffset(this, true);
                this._changeInProgress = null;
              }
            }
            return this;
          } else {
            return this._isUTC ? offset5 : getDateOffset(this);
          }
        }
        function getSetZone(input, keepLocalTime) {
          if (input != null) {
            if (typeof input !== "string") {
              input = -input;
            }
            this.utcOffset(input, keepLocalTime);
            return this;
          } else {
            return -this.utcOffset();
          }
        }
        function setOffsetToUTC(keepLocalTime) {
          return this.utcOffset(0, keepLocalTime);
        }
        function setOffsetToLocal(keepLocalTime) {
          if (this._isUTC) {
            this.utcOffset(0, keepLocalTime);
            this._isUTC = false;
            if (keepLocalTime) {
              this.subtract(getDateOffset(this), "m");
            }
          }
          return this;
        }
        function setOffsetToParsedOffset() {
          if (this._tzm != null) {
            this.utcOffset(this._tzm, false, true);
          } else if (typeof this._i === "string") {
            var tZone = offsetFromString(matchOffset, this._i);
            if (tZone != null) {
              this.utcOffset(tZone);
            } else {
              this.utcOffset(0, true);
            }
          }
          return this;
        }
        function hasAlignedHourOffset(input) {
          if (!this.isValid()) {
            return false;
          }
          input = input ? createLocal(input).utcOffset() : 0;
          return (this.utcOffset() - input) % 60 === 0;
        }
        function isDaylightSavingTime() {
          return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
        }
        function isDaylightSavingTimeShifted() {
          if (!isUndefined2(this._isDSTShifted)) {
            return this._isDSTShifted;
          }
          var c2 = {}, other;
          copyConfig(c2, this);
          c2 = prepareConfig(c2);
          if (c2._a) {
            other = c2._isUTC ? createUTC(c2._a) : createLocal(c2._a);
            this._isDSTShifted = this.isValid() && compareArrays(c2._a, other.toArray()) > 0;
          } else {
            this._isDSTShifted = false;
          }
          return this._isDSTShifted;
        }
        function isLocal() {
          return this.isValid() ? !this._isUTC : false;
        }
        function isUtcOffset() {
          return this.isValid() ? this._isUTC : false;
        }
        function isUtc() {
          return this.isValid() ? this._isUTC && this._offset === 0 : false;
        }
        var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/, isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
        function createDuration(input, key2) {
          var duration = input, match5 = null, sign2, ret, diffRes;
          if (isDuration(input)) {
            duration = {
              ms: input._milliseconds,
              d: input._days,
              M: input._months
            };
          } else if (isNumber2(input) || !isNaN(+input)) {
            duration = {};
            if (key2) {
              duration[key2] = +input;
            } else {
              duration.milliseconds = +input;
            }
          } else if (match5 = aspNetRegex.exec(input)) {
            sign2 = match5[1] === "-" ? -1 : 1;
            duration = {
              y: 0,
              d: toInt(match5[DATE]) * sign2,
              h: toInt(match5[HOUR]) * sign2,
              m: toInt(match5[MINUTE]) * sign2,
              s: toInt(match5[SECOND]) * sign2,
              ms: toInt(absRound(match5[MILLISECOND] * 1e3)) * sign2
              // the millisecond decimal point is included in the match
            };
          } else if (match5 = isoRegex.exec(input)) {
            sign2 = match5[1] === "-" ? -1 : 1;
            duration = {
              y: parseIso(match5[2], sign2),
              M: parseIso(match5[3], sign2),
              w: parseIso(match5[4], sign2),
              d: parseIso(match5[5], sign2),
              h: parseIso(match5[6], sign2),
              m: parseIso(match5[7], sign2),
              s: parseIso(match5[8], sign2)
            };
          } else if (duration == null) {
            duration = {};
          } else if (typeof duration === "object" && ("from" in duration || "to" in duration)) {
            diffRes = momentsDifference(
              createLocal(duration.from),
              createLocal(duration.to)
            );
            duration = {};
            duration.ms = diffRes.milliseconds;
            duration.M = diffRes.months;
          }
          ret = new Duration(duration);
          if (isDuration(input) && hasOwnProp(input, "_locale")) {
            ret._locale = input._locale;
          }
          if (isDuration(input) && hasOwnProp(input, "_isValid")) {
            ret._isValid = input._isValid;
          }
          return ret;
        }
        createDuration.fn = Duration.prototype;
        createDuration.invalid = createInvalid$1;
        function parseIso(inp, sign2) {
          var res = inp && parseFloat(inp.replace(",", "."));
          return (isNaN(res) ? 0 : res) * sign2;
        }
        function positiveMomentsDifference(base, other) {
          var res = {};
          res.months = other.month() - base.month() + (other.year() - base.year()) * 12;
          if (base.clone().add(res.months, "M").isAfter(other)) {
            --res.months;
          }
          res.milliseconds = +other - +base.clone().add(res.months, "M");
          return res;
        }
        function momentsDifference(base, other) {
          var res;
          if (!(base.isValid() && other.isValid())) {
            return { milliseconds: 0, months: 0 };
          }
          other = cloneWithOffset(other, base);
          if (base.isBefore(other)) {
            res = positiveMomentsDifference(base, other);
          } else {
            res = positiveMomentsDifference(other, base);
            res.milliseconds = -res.milliseconds;
            res.months = -res.months;
          }
          return res;
        }
        function createAdder(direction, name) {
          return function(val, period) {
            var dur, tmp;
            if (period !== null && !isNaN(+period)) {
              deprecateSimple(
                name,
                "moment()." + name + "(period, number) is deprecated. Please use moment()." + name + "(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."
              );
              tmp = val;
              val = period;
              period = tmp;
            }
            dur = createDuration(val, period);
            addSubtract(this, dur, direction);
            return this;
          };
        }
        function addSubtract(mom, duration, isAdding, updateOffset) {
          var milliseconds2 = duration._milliseconds, days2 = absRound(duration._days), months2 = absRound(duration._months);
          if (!mom.isValid()) {
            return;
          }
          updateOffset = updateOffset == null ? true : updateOffset;
          if (months2) {
            setMonth2(mom, get3(mom, "Month") + months2 * isAdding);
          }
          if (days2) {
            set$1(mom, "Date", get3(mom, "Date") + days2 * isAdding);
          }
          if (milliseconds2) {
            mom._d.setTime(mom._d.valueOf() + milliseconds2 * isAdding);
          }
          if (updateOffset) {
            hooks.updateOffset(mom, days2 || months2);
          }
        }
        var add = createAdder(1, "add"), subtract = createAdder(-1, "subtract");
        function isString3(input) {
          return typeof input === "string" || input instanceof String;
        }
        function isMomentInput(input) {
          return isMoment(input) || isDate3(input) || isString3(input) || isNumber2(input) || isNumberOrStringArray(input) || isMomentInputObject(input) || input === null || input === void 0;
        }
        function isMomentInputObject(input) {
          var objectTest = isObject3(input) && !isObjectEmpty(input), propertyTest = false, properties = [
            "years",
            "year",
            "y",
            "months",
            "month",
            "M",
            "days",
            "day",
            "d",
            "dates",
            "date",
            "D",
            "hours",
            "hour",
            "h",
            "minutes",
            "minute",
            "m",
            "seconds",
            "second",
            "s",
            "milliseconds",
            "millisecond",
            "ms"
          ], i3, property, propertyLen = properties.length;
          for (i3 = 0; i3 < propertyLen; i3 += 1) {
            property = properties[i3];
            propertyTest = propertyTest || hasOwnProp(input, property);
          }
          return objectTest && propertyTest;
        }
        function isNumberOrStringArray(input) {
          var arrayTest = isArray2(input), dataTypeTest = false;
          if (arrayTest) {
            dataTypeTest = input.filter(function(item) {
              return !isNumber2(item) && isString3(input);
            }).length === 0;
          }
          return arrayTest && dataTypeTest;
        }
        function isCalendarSpec(input) {
          var objectTest = isObject3(input) && !isObjectEmpty(input), propertyTest = false, properties = [
            "sameDay",
            "nextDay",
            "lastDay",
            "nextWeek",
            "lastWeek",
            "sameElse"
          ], i3, property;
          for (i3 = 0; i3 < properties.length; i3 += 1) {
            property = properties[i3];
            propertyTest = propertyTest || hasOwnProp(input, property);
          }
          return objectTest && propertyTest;
        }
        function getCalendarFormat(myMoment, now3) {
          var diff2 = myMoment.diff(now3, "days", true);
          return diff2 < -6 ? "sameElse" : diff2 < -1 ? "lastWeek" : diff2 < 0 ? "lastDay" : diff2 < 1 ? "sameDay" : diff2 < 2 ? "nextDay" : diff2 < 7 ? "nextWeek" : "sameElse";
        }
        function calendar$1(time, formats) {
          if (arguments.length === 1) {
            if (!arguments[0]) {
              time = void 0;
              formats = void 0;
            } else if (isMomentInput(arguments[0])) {
              time = arguments[0];
              formats = void 0;
            } else if (isCalendarSpec(arguments[0])) {
              formats = arguments[0];
              time = void 0;
            }
          }
          var now3 = time || createLocal(), sod = cloneWithOffset(now3, this).startOf("day"), format4 = hooks.calendarFormat(this, sod) || "sameElse", output2 = formats && (isFunction2(formats[format4]) ? formats[format4].call(this, now3) : formats[format4]);
          return this.format(
            output2 || this.localeData().calendar(format4, this, createLocal(now3))
          );
        }
        function clone2() {
          return new Moment(this);
        }
        function isAfter2(input, units) {
          var localInput = isMoment(input) ? input : createLocal(input);
          if (!(this.isValid() && localInput.isValid())) {
            return false;
          }
          units = normalizeUnits(units) || "millisecond";
          if (units === "millisecond") {
            return this.valueOf() > localInput.valueOf();
          } else {
            return localInput.valueOf() < this.clone().startOf(units).valueOf();
          }
        }
        function isBefore(input, units) {
          var localInput = isMoment(input) ? input : createLocal(input);
          if (!(this.isValid() && localInput.isValid())) {
            return false;
          }
          units = normalizeUnits(units) || "millisecond";
          if (units === "millisecond") {
            return this.valueOf() < localInput.valueOf();
          } else {
            return this.clone().endOf(units).valueOf() < localInput.valueOf();
          }
        }
        function isBetween(from2, to2, units, inclusivity) {
          var localFrom = isMoment(from2) ? from2 : createLocal(from2), localTo = isMoment(to2) ? to2 : createLocal(to2);
          if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
            return false;
          }
          inclusivity = inclusivity || "()";
          return (inclusivity[0] === "(" ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units)) && (inclusivity[1] === ")" ? this.isBefore(localTo, units) : !this.isAfter(localTo, units));
        }
        function isSame(input, units) {
          var localInput = isMoment(input) ? input : createLocal(input), inputMs;
          if (!(this.isValid() && localInput.isValid())) {
            return false;
          }
          units = normalizeUnits(units) || "millisecond";
          if (units === "millisecond") {
            return this.valueOf() === localInput.valueOf();
          } else {
            inputMs = localInput.valueOf();
            return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
          }
        }
        function isSameOrAfter(input, units) {
          return this.isSame(input, units) || this.isAfter(input, units);
        }
        function isSameOrBefore(input, units) {
          return this.isSame(input, units) || this.isBefore(input, units);
        }
        function diff(input, units, asFloat) {
          var that, zoneDelta, output2;
          if (!this.isValid()) {
            return NaN;
          }
          that = cloneWithOffset(input, this);
          if (!that.isValid()) {
            return NaN;
          }
          zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;
          units = normalizeUnits(units);
          switch (units) {
            case "year":
              output2 = monthDiff(this, that) / 12;
              break;
            case "month":
              output2 = monthDiff(this, that);
              break;
            case "quarter":
              output2 = monthDiff(this, that) / 3;
              break;
            case "second":
              output2 = (this - that) / 1e3;
              break;
            case "minute":
              output2 = (this - that) / 6e4;
              break;
            case "hour":
              output2 = (this - that) / 36e5;
              break;
            case "day":
              output2 = (this - that - zoneDelta) / 864e5;
              break;
            case "week":
              output2 = (this - that - zoneDelta) / 6048e5;
              break;
            default:
              output2 = this - that;
          }
          return asFloat ? output2 : absFloor(output2);
        }
        function monthDiff(a2, b2) {
          if (a2.date() < b2.date()) {
            return -monthDiff(b2, a2);
          }
          var wholeMonthDiff = (b2.year() - a2.year()) * 12 + (b2.month() - a2.month()), anchor = a2.clone().add(wholeMonthDiff, "months"), anchor2, adjust;
          if (b2 - anchor < 0) {
            anchor2 = a2.clone().add(wholeMonthDiff - 1, "months");
            adjust = (b2 - anchor) / (anchor - anchor2);
          } else {
            anchor2 = a2.clone().add(wholeMonthDiff + 1, "months");
            adjust = (b2 - anchor) / (anchor2 - anchor);
          }
          return -(wholeMonthDiff + adjust) || 0;
        }
        hooks.defaultFormat = "YYYY-MM-DDTHH:mm:ssZ";
        hooks.defaultFormatUtc = "YYYY-MM-DDTHH:mm:ss[Z]";
        function toString3() {
          return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ");
        }
        function toISOString(keepOffset) {
          if (!this.isValid()) {
            return null;
          }
          var utc = keepOffset !== true, m2 = utc ? this.clone().utc() : this;
          if (m2.year() < 0 || m2.year() > 9999) {
            return formatMoment(
              m2,
              utc ? "YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYYYY-MM-DD[T]HH:mm:ss.SSSZ"
            );
          }
          if (isFunction2(Date.prototype.toISOString)) {
            if (utc) {
              return this.toDate().toISOString();
            } else {
              return new Date(this.valueOf() + this.utcOffset() * 60 * 1e3).toISOString().replace("Z", formatMoment(m2, "Z"));
            }
          }
          return formatMoment(
            m2,
            utc ? "YYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYY-MM-DD[T]HH:mm:ss.SSSZ"
          );
        }
        function inspect() {
          if (!this.isValid()) {
            return "moment.invalid(/* " + this._i + " */)";
          }
          var func = "moment", zone = "", prefix2, year, datetime, suffix;
          if (!this.isLocal()) {
            func = this.utcOffset() === 0 ? "moment.utc" : "moment.parseZone";
            zone = "Z";
          }
          prefix2 = "[" + func + '("]';
          year = 0 <= this.year() && this.year() <= 9999 ? "YYYY" : "YYYYYY";
          datetime = "-MM-DD[T]HH:mm:ss.SSS";
          suffix = zone + '[")]';
          return this.format(prefix2 + year + datetime + suffix);
        }
        function format3(inputString) {
          if (!inputString) {
            inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
          }
          var output2 = formatMoment(this, inputString);
          return this.localeData().postformat(output2);
        }
        function from(time, withoutSuffix) {
          if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
            return createDuration({ to: this, from: time }).locale(this.locale()).humanize(!withoutSuffix);
          } else {
            return this.localeData().invalidDate();
          }
        }
        function fromNow(withoutSuffix) {
          return this.from(createLocal(), withoutSuffix);
        }
        function to(time, withoutSuffix) {
          if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
            return createDuration({ from: this, to: time }).locale(this.locale()).humanize(!withoutSuffix);
          } else {
            return this.localeData().invalidDate();
          }
        }
        function toNow(withoutSuffix) {
          return this.to(createLocal(), withoutSuffix);
        }
        function locale4(key2) {
          var newLocaleData;
          if (key2 === void 0) {
            return this._locale._abbr;
          } else {
            newLocaleData = getLocale(key2);
            if (newLocaleData != null) {
              this._locale = newLocaleData;
            }
            return this;
          }
        }
        var lang = deprecate(
          "moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",
          function(key2) {
            if (key2 === void 0) {
              return this.localeData();
            } else {
              return this.locale(key2);
            }
          }
        );
        function localeData() {
          return this._locale;
        }
        var MS_PER_SECOND = 1e3, MS_PER_MINUTE = 60 * MS_PER_SECOND, MS_PER_HOUR = 60 * MS_PER_MINUTE, MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;
        function mod$1(dividend, divisor) {
          return (dividend % divisor + divisor) % divisor;
        }
        function localStartOfDate(y2, m2, d2) {
          if (y2 < 100 && y2 >= 0) {
            return new Date(y2 + 400, m2, d2) - MS_PER_400_YEARS;
          } else {
            return new Date(y2, m2, d2).valueOf();
          }
        }
        function utcStartOfDate(y2, m2, d2) {
          if (y2 < 100 && y2 >= 0) {
            return Date.UTC(y2 + 400, m2, d2) - MS_PER_400_YEARS;
          } else {
            return Date.UTC(y2, m2, d2);
          }
        }
        function startOf(units) {
          var time, startOfDate;
          units = normalizeUnits(units);
          if (units === void 0 || units === "millisecond" || !this.isValid()) {
            return this;
          }
          startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
          switch (units) {
            case "year":
              time = startOfDate(this.year(), 0, 1);
              break;
            case "quarter":
              time = startOfDate(
                this.year(),
                this.month() - this.month() % 3,
                1
              );
              break;
            case "month":
              time = startOfDate(this.year(), this.month(), 1);
              break;
            case "week":
              time = startOfDate(
                this.year(),
                this.month(),
                this.date() - this.weekday()
              );
              break;
            case "isoWeek":
              time = startOfDate(
                this.year(),
                this.month(),
                this.date() - (this.isoWeekday() - 1)
              );
              break;
            case "day":
            case "date":
              time = startOfDate(this.year(), this.month(), this.date());
              break;
            case "hour":
              time = this._d.valueOf();
              time -= mod$1(
                time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
                MS_PER_HOUR
              );
              break;
            case "minute":
              time = this._d.valueOf();
              time -= mod$1(time, MS_PER_MINUTE);
              break;
            case "second":
              time = this._d.valueOf();
              time -= mod$1(time, MS_PER_SECOND);
              break;
          }
          this._d.setTime(time);
          hooks.updateOffset(this, true);
          return this;
        }
        function endOf(units) {
          var time, startOfDate;
          units = normalizeUnits(units);
          if (units === void 0 || units === "millisecond" || !this.isValid()) {
            return this;
          }
          startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
          switch (units) {
            case "year":
              time = startOfDate(this.year() + 1, 0, 1) - 1;
              break;
            case "quarter":
              time = startOfDate(
                this.year(),
                this.month() - this.month() % 3 + 3,
                1
              ) - 1;
              break;
            case "month":
              time = startOfDate(this.year(), this.month() + 1, 1) - 1;
              break;
            case "week":
              time = startOfDate(
                this.year(),
                this.month(),
                this.date() - this.weekday() + 7
              ) - 1;
              break;
            case "isoWeek":
              time = startOfDate(
                this.year(),
                this.month(),
                this.date() - (this.isoWeekday() - 1) + 7
              ) - 1;
              break;
            case "day":
            case "date":
              time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
              break;
            case "hour":
              time = this._d.valueOf();
              time += MS_PER_HOUR - mod$1(
                time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
                MS_PER_HOUR
              ) - 1;
              break;
            case "minute":
              time = this._d.valueOf();
              time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
              break;
            case "second":
              time = this._d.valueOf();
              time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
              break;
          }
          this._d.setTime(time);
          hooks.updateOffset(this, true);
          return this;
        }
        function valueOf() {
          return this._d.valueOf() - (this._offset || 0) * 6e4;
        }
        function unix() {
          return Math.floor(this.valueOf() / 1e3);
        }
        function toDate() {
          return new Date(this.valueOf());
        }
        function toArray9() {
          var m2 = this;
          return [
            m2.year(),
            m2.month(),
            m2.date(),
            m2.hour(),
            m2.minute(),
            m2.second(),
            m2.millisecond()
          ];
        }
        function toObject() {
          var m2 = this;
          return {
            years: m2.year(),
            months: m2.month(),
            date: m2.date(),
            hours: m2.hours(),
            minutes: m2.minutes(),
            seconds: m2.seconds(),
            milliseconds: m2.milliseconds()
          };
        }
        function toJSON2() {
          return this.isValid() ? this.toISOString() : null;
        }
        function isValid$2() {
          return isValid(this);
        }
        function parsingFlags() {
          return extend2({}, getParsingFlags(this));
        }
        function invalidAt() {
          return getParsingFlags(this).overflow;
        }
        function creationData() {
          return {
            input: this._i,
            format: this._f,
            locale: this._locale,
            isUTC: this._isUTC,
            strict: this._strict
          };
        }
        addFormatToken("N", 0, 0, "eraAbbr");
        addFormatToken("NN", 0, 0, "eraAbbr");
        addFormatToken("NNN", 0, 0, "eraAbbr");
        addFormatToken("NNNN", 0, 0, "eraName");
        addFormatToken("NNNNN", 0, 0, "eraNarrow");
        addFormatToken("y", ["y", 1], "yo", "eraYear");
        addFormatToken("y", ["yy", 2], 0, "eraYear");
        addFormatToken("y", ["yyy", 3], 0, "eraYear");
        addFormatToken("y", ["yyyy", 4], 0, "eraYear");
        addRegexToken("N", matchEraAbbr);
        addRegexToken("NN", matchEraAbbr);
        addRegexToken("NNN", matchEraAbbr);
        addRegexToken("NNNN", matchEraName);
        addRegexToken("NNNNN", matchEraNarrow);
        addParseToken(
          ["N", "NN", "NNN", "NNNN", "NNNNN"],
          function(input, array4, config, token2) {
            var era = config._locale.erasParse(input, token2, config._strict);
            if (era) {
              getParsingFlags(config).era = era;
            } else {
              getParsingFlags(config).invalidEra = input;
            }
          }
        );
        addRegexToken("y", matchUnsigned);
        addRegexToken("yy", matchUnsigned);
        addRegexToken("yyy", matchUnsigned);
        addRegexToken("yyyy", matchUnsigned);
        addRegexToken("yo", matchEraYearOrdinal);
        addParseToken(["y", "yy", "yyy", "yyyy"], YEAR);
        addParseToken(["yo"], function(input, array4, config, token2) {
          var match5;
          if (config._locale._eraYearOrdinalRegex) {
            match5 = input.match(config._locale._eraYearOrdinalRegex);
          }
          if (config._locale.eraYearOrdinalParse) {
            array4[YEAR] = config._locale.eraYearOrdinalParse(input, match5);
          } else {
            array4[YEAR] = parseInt(input, 10);
          }
        });
        function localeEras(m2, format4) {
          var i3, l2, date4, eras = this._eras || getLocale("en")._eras;
          for (i3 = 0, l2 = eras.length; i3 < l2; ++i3) {
            switch (typeof eras[i3].since) {
              case "string":
                date4 = hooks(eras[i3].since).startOf("day");
                eras[i3].since = date4.valueOf();
                break;
            }
            switch (typeof eras[i3].until) {
              case "undefined":
                eras[i3].until = Infinity;
                break;
              case "string":
                date4 = hooks(eras[i3].until).startOf("day").valueOf();
                eras[i3].until = date4.valueOf();
                break;
            }
          }
          return eras;
        }
        function localeErasParse(eraName, format4, strict) {
          var i3, l2, eras = this.eras(), name, abbr, narrow;
          eraName = eraName.toUpperCase();
          for (i3 = 0, l2 = eras.length; i3 < l2; ++i3) {
            name = eras[i3].name.toUpperCase();
            abbr = eras[i3].abbr.toUpperCase();
            narrow = eras[i3].narrow.toUpperCase();
            if (strict) {
              switch (format4) {
                case "N":
                case "NN":
                case "NNN":
                  if (abbr === eraName) {
                    return eras[i3];
                  }
                  break;
                case "NNNN":
                  if (name === eraName) {
                    return eras[i3];
                  }
                  break;
                case "NNNNN":
                  if (narrow === eraName) {
                    return eras[i3];
                  }
                  break;
              }
            } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
              return eras[i3];
            }
          }
        }
        function localeErasConvertYear(era, year) {
          var dir = era.since <= era.until ? 1 : -1;
          if (year === void 0) {
            return hooks(era.since).year();
          } else {
            return hooks(era.since).year() + (year - era.offset) * dir;
          }
        }
        function getEraName() {
          var i3, l2, val, eras = this.localeData().eras();
          for (i3 = 0, l2 = eras.length; i3 < l2; ++i3) {
            val = this.clone().startOf("day").valueOf();
            if (eras[i3].since <= val && val <= eras[i3].until) {
              return eras[i3].name;
            }
            if (eras[i3].until <= val && val <= eras[i3].since) {
              return eras[i3].name;
            }
          }
          return "";
        }
        function getEraNarrow() {
          var i3, l2, val, eras = this.localeData().eras();
          for (i3 = 0, l2 = eras.length; i3 < l2; ++i3) {
            val = this.clone().startOf("day").valueOf();
            if (eras[i3].since <= val && val <= eras[i3].until) {
              return eras[i3].narrow;
            }
            if (eras[i3].until <= val && val <= eras[i3].since) {
              return eras[i3].narrow;
            }
          }
          return "";
        }
        function getEraAbbr() {
          var i3, l2, val, eras = this.localeData().eras();
          for (i3 = 0, l2 = eras.length; i3 < l2; ++i3) {
            val = this.clone().startOf("day").valueOf();
            if (eras[i3].since <= val && val <= eras[i3].until) {
              return eras[i3].abbr;
            }
            if (eras[i3].until <= val && val <= eras[i3].since) {
              return eras[i3].abbr;
            }
          }
          return "";
        }
        function getEraYear() {
          var i3, l2, dir, val, eras = this.localeData().eras();
          for (i3 = 0, l2 = eras.length; i3 < l2; ++i3) {
            dir = eras[i3].since <= eras[i3].until ? 1 : -1;
            val = this.clone().startOf("day").valueOf();
            if (eras[i3].since <= val && val <= eras[i3].until || eras[i3].until <= val && val <= eras[i3].since) {
              return (this.year() - hooks(eras[i3].since).year()) * dir + eras[i3].offset;
            }
          }
          return this.year();
        }
        function erasNameRegex(isStrict) {
          if (!hasOwnProp(this, "_erasNameRegex")) {
            computeErasParse.call(this);
          }
          return isStrict ? this._erasNameRegex : this._erasRegex;
        }
        function erasAbbrRegex(isStrict) {
          if (!hasOwnProp(this, "_erasAbbrRegex")) {
            computeErasParse.call(this);
          }
          return isStrict ? this._erasAbbrRegex : this._erasRegex;
        }
        function erasNarrowRegex(isStrict) {
          if (!hasOwnProp(this, "_erasNarrowRegex")) {
            computeErasParse.call(this);
          }
          return isStrict ? this._erasNarrowRegex : this._erasRegex;
        }
        function matchEraAbbr(isStrict, locale5) {
          return locale5.erasAbbrRegex(isStrict);
        }
        function matchEraName(isStrict, locale5) {
          return locale5.erasNameRegex(isStrict);
        }
        function matchEraNarrow(isStrict, locale5) {
          return locale5.erasNarrowRegex(isStrict);
        }
        function matchEraYearOrdinal(isStrict, locale5) {
          return locale5._eraYearOrdinalRegex || matchUnsigned;
        }
        function computeErasParse() {
          var abbrPieces = [], namePieces = [], narrowPieces = [], mixedPieces = [], i3, l2, eras = this.eras();
          for (i3 = 0, l2 = eras.length; i3 < l2; ++i3) {
            namePieces.push(regexEscape2(eras[i3].name));
            abbrPieces.push(regexEscape2(eras[i3].abbr));
            narrowPieces.push(regexEscape2(eras[i3].narrow));
            mixedPieces.push(regexEscape2(eras[i3].name));
            mixedPieces.push(regexEscape2(eras[i3].abbr));
            mixedPieces.push(regexEscape2(eras[i3].narrow));
          }
          this._erasRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
          this._erasNameRegex = new RegExp("^(" + namePieces.join("|") + ")", "i");
          this._erasAbbrRegex = new RegExp("^(" + abbrPieces.join("|") + ")", "i");
          this._erasNarrowRegex = new RegExp(
            "^(" + narrowPieces.join("|") + ")",
            "i"
          );
        }
        addFormatToken(0, ["gg", 2], 0, function() {
          return this.weekYear() % 100;
        });
        addFormatToken(0, ["GG", 2], 0, function() {
          return this.isoWeekYear() % 100;
        });
        function addWeekYearFormatToken(token2, getter) {
          addFormatToken(0, [token2, token2.length], 0, getter);
        }
        addWeekYearFormatToken("gggg", "weekYear");
        addWeekYearFormatToken("ggggg", "weekYear");
        addWeekYearFormatToken("GGGG", "isoWeekYear");
        addWeekYearFormatToken("GGGGG", "isoWeekYear");
        addUnitAlias("weekYear", "gg");
        addUnitAlias("isoWeekYear", "GG");
        addUnitPriority("weekYear", 1);
        addUnitPriority("isoWeekYear", 1);
        addRegexToken("G", matchSigned);
        addRegexToken("g", matchSigned);
        addRegexToken("GG", match1to2, match2);
        addRegexToken("gg", match1to2, match2);
        addRegexToken("GGGG", match1to4, match4);
        addRegexToken("gggg", match1to4, match4);
        addRegexToken("GGGGG", match1to6, match6);
        addRegexToken("ggggg", match1to6, match6);
        addWeekParseToken(
          ["gggg", "ggggg", "GGGG", "GGGGG"],
          function(input, week, config, token2) {
            week[token2.substr(0, 2)] = toInt(input);
          }
        );
        addWeekParseToken(["gg", "GG"], function(input, week, config, token2) {
          week[token2] = hooks.parseTwoDigitYear(input);
        });
        function getSetWeekYear(input) {
          return getSetWeekYearHelper.call(
            this,
            input,
            this.week(),
            this.weekday(),
            this.localeData()._week.dow,
            this.localeData()._week.doy
          );
        }
        function getSetISOWeekYear(input) {
          return getSetWeekYearHelper.call(
            this,
            input,
            this.isoWeek(),
            this.isoWeekday(),
            1,
            4
          );
        }
        function getISOWeeksInYear() {
          return weeksInYear(this.year(), 1, 4);
        }
        function getISOWeeksInISOWeekYear() {
          return weeksInYear(this.isoWeekYear(), 1, 4);
        }
        function getWeeksInYear() {
          var weekInfo = this.localeData()._week;
          return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
        }
        function getWeeksInWeekYear() {
          var weekInfo = this.localeData()._week;
          return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
        }
        function getSetWeekYearHelper(input, week, weekday, dow, doy) {
          var weeksTarget;
          if (input == null) {
            return weekOfYear(this, dow, doy).year;
          } else {
            weeksTarget = weeksInYear(input, dow, doy);
            if (week > weeksTarget) {
              week = weeksTarget;
            }
            return setWeekAll.call(this, input, week, weekday, dow, doy);
          }
        }
        function setWeekAll(weekYear, week, weekday, dow, doy) {
          var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy), date4 = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
          this.year(date4.getUTCFullYear());
          this.month(date4.getUTCMonth());
          this.date(date4.getUTCDate());
          return this;
        }
        addFormatToken("Q", 0, "Qo", "quarter");
        addUnitAlias("quarter", "Q");
        addUnitPriority("quarter", 7);
        addRegexToken("Q", match1);
        addParseToken("Q", function(input, array4) {
          array4[MONTH] = (toInt(input) - 1) * 3;
        });
        function getSetQuarter(input) {
          return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
        }
        addFormatToken("D", ["DD", 2], "Do", "date");
        addUnitAlias("date", "D");
        addUnitPriority("date", 9);
        addRegexToken("D", match1to2);
        addRegexToken("DD", match1to2, match2);
        addRegexToken("Do", function(isStrict, locale5) {
          return isStrict ? locale5._dayOfMonthOrdinalParse || locale5._ordinalParse : locale5._dayOfMonthOrdinalParseLenient;
        });
        addParseToken(["D", "DD"], DATE);
        addParseToken("Do", function(input, array4) {
          array4[DATE] = toInt(input.match(match1to2)[0]);
        });
        var getSetDayOfMonth = makeGetSet("Date", true);
        addFormatToken("DDD", ["DDDD", 3], "DDDo", "dayOfYear");
        addUnitAlias("dayOfYear", "DDD");
        addUnitPriority("dayOfYear", 4);
        addRegexToken("DDD", match1to3);
        addRegexToken("DDDD", match3);
        addParseToken(["DDD", "DDDD"], function(input, array4, config) {
          config._dayOfYear = toInt(input);
        });
        function getSetDayOfYear(input) {
          var dayOfYear = Math.round(
            (this.clone().startOf("day") - this.clone().startOf("year")) / 864e5
          ) + 1;
          return input == null ? dayOfYear : this.add(input - dayOfYear, "d");
        }
        addFormatToken("m", ["mm", 2], 0, "minute");
        addUnitAlias("minute", "m");
        addUnitPriority("minute", 14);
        addRegexToken("m", match1to2);
        addRegexToken("mm", match1to2, match2);
        addParseToken(["m", "mm"], MINUTE);
        var getSetMinute = makeGetSet("Minutes", false);
        addFormatToken("s", ["ss", 2], 0, "second");
        addUnitAlias("second", "s");
        addUnitPriority("second", 15);
        addRegexToken("s", match1to2);
        addRegexToken("ss", match1to2, match2);
        addParseToken(["s", "ss"], SECOND);
        var getSetSecond = makeGetSet("Seconds", false);
        addFormatToken("S", 0, 0, function() {
          return ~~(this.millisecond() / 100);
        });
        addFormatToken(0, ["SS", 2], 0, function() {
          return ~~(this.millisecond() / 10);
        });
        addFormatToken(0, ["SSS", 3], 0, "millisecond");
        addFormatToken(0, ["SSSS", 4], 0, function() {
          return this.millisecond() * 10;
        });
        addFormatToken(0, ["SSSSS", 5], 0, function() {
          return this.millisecond() * 100;
        });
        addFormatToken(0, ["SSSSSS", 6], 0, function() {
          return this.millisecond() * 1e3;
        });
        addFormatToken(0, ["SSSSSSS", 7], 0, function() {
          return this.millisecond() * 1e4;
        });
        addFormatToken(0, ["SSSSSSSS", 8], 0, function() {
          return this.millisecond() * 1e5;
        });
        addFormatToken(0, ["SSSSSSSSS", 9], 0, function() {
          return this.millisecond() * 1e6;
        });
        addUnitAlias("millisecond", "ms");
        addUnitPriority("millisecond", 16);
        addRegexToken("S", match1to3, match1);
        addRegexToken("SS", match1to3, match2);
        addRegexToken("SSS", match1to3, match3);
        var token, getSetMillisecond;
        for (token = "SSSS"; token.length <= 9; token += "S") {
          addRegexToken(token, matchUnsigned);
        }
        function parseMs(input, array4) {
          array4[MILLISECOND] = toInt(("0." + input) * 1e3);
        }
        for (token = "S"; token.length <= 9; token += "S") {
          addParseToken(token, parseMs);
        }
        getSetMillisecond = makeGetSet("Milliseconds", false);
        addFormatToken("z", 0, 0, "zoneAbbr");
        addFormatToken("zz", 0, 0, "zoneName");
        function getZoneAbbr() {
          return this._isUTC ? "UTC" : "";
        }
        function getZoneName() {
          return this._isUTC ? "Coordinated Universal Time" : "";
        }
        var proto = Moment.prototype;
        proto.add = add;
        proto.calendar = calendar$1;
        proto.clone = clone2;
        proto.diff = diff;
        proto.endOf = endOf;
        proto.format = format3;
        proto.from = from;
        proto.fromNow = fromNow;
        proto.to = to;
        proto.toNow = toNow;
        proto.get = stringGet;
        proto.invalidAt = invalidAt;
        proto.isAfter = isAfter2;
        proto.isBefore = isBefore;
        proto.isBetween = isBetween;
        proto.isSame = isSame;
        proto.isSameOrAfter = isSameOrAfter;
        proto.isSameOrBefore = isSameOrBefore;
        proto.isValid = isValid$2;
        proto.lang = lang;
        proto.locale = locale4;
        proto.localeData = localeData;
        proto.max = prototypeMax;
        proto.min = prototypeMin;
        proto.parsingFlags = parsingFlags;
        proto.set = stringSet;
        proto.startOf = startOf;
        proto.subtract = subtract;
        proto.toArray = toArray9;
        proto.toObject = toObject;
        proto.toDate = toDate;
        proto.toISOString = toISOString;
        proto.inspect = inspect;
        if (typeof Symbol !== "undefined" && Symbol.for != null) {
          proto[Symbol.for("nodejs.util.inspect.custom")] = function() {
            return "Moment<" + this.format() + ">";
          };
        }
        proto.toJSON = toJSON2;
        proto.toString = toString3;
        proto.unix = unix;
        proto.valueOf = valueOf;
        proto.creationData = creationData;
        proto.eraName = getEraName;
        proto.eraNarrow = getEraNarrow;
        proto.eraAbbr = getEraAbbr;
        proto.eraYear = getEraYear;
        proto.year = getSetYear;
        proto.isLeapYear = getIsLeapYear;
        proto.weekYear = getSetWeekYear;
        proto.isoWeekYear = getSetISOWeekYear;
        proto.quarter = proto.quarters = getSetQuarter;
        proto.month = getSetMonth;
        proto.daysInMonth = getDaysInMonth;
        proto.week = proto.weeks = getSetWeek;
        proto.isoWeek = proto.isoWeeks = getSetISOWeek;
        proto.weeksInYear = getWeeksInYear;
        proto.weeksInWeekYear = getWeeksInWeekYear;
        proto.isoWeeksInYear = getISOWeeksInYear;
        proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
        proto.date = getSetDayOfMonth;
        proto.day = proto.days = getSetDayOfWeek;
        proto.weekday = getSetLocaleDayOfWeek;
        proto.isoWeekday = getSetISODayOfWeek;
        proto.dayOfYear = getSetDayOfYear;
        proto.hour = proto.hours = getSetHour;
        proto.minute = proto.minutes = getSetMinute;
        proto.second = proto.seconds = getSetSecond;
        proto.millisecond = proto.milliseconds = getSetMillisecond;
        proto.utcOffset = getSetOffset;
        proto.utc = setOffsetToUTC;
        proto.local = setOffsetToLocal;
        proto.parseZone = setOffsetToParsedOffset;
        proto.hasAlignedHourOffset = hasAlignedHourOffset;
        proto.isDST = isDaylightSavingTime;
        proto.isLocal = isLocal;
        proto.isUtcOffset = isUtcOffset;
        proto.isUtc = isUtc;
        proto.isUTC = isUtc;
        proto.zoneAbbr = getZoneAbbr;
        proto.zoneName = getZoneName;
        proto.dates = deprecate(
          "dates accessor is deprecated. Use date instead.",
          getSetDayOfMonth
        );
        proto.months = deprecate(
          "months accessor is deprecated. Use month instead",
          getSetMonth
        );
        proto.years = deprecate(
          "years accessor is deprecated. Use year instead",
          getSetYear
        );
        proto.zone = deprecate(
          "moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",
          getSetZone
        );
        proto.isDSTShifted = deprecate(
          "isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",
          isDaylightSavingTimeShifted
        );
        function createUnix(input) {
          return createLocal(input * 1e3);
        }
        function createInZone() {
          return createLocal.apply(null, arguments).parseZone();
        }
        function preParsePostFormat(string3) {
          return string3;
        }
        var proto$1 = Locale.prototype;
        proto$1.calendar = calendar;
        proto$1.longDateFormat = longDateFormat;
        proto$1.invalidDate = invalidDate;
        proto$1.ordinal = ordinal;
        proto$1.preparse = preParsePostFormat;
        proto$1.postformat = preParsePostFormat;
        proto$1.relativeTime = relativeTime;
        proto$1.pastFuture = pastFuture;
        proto$1.set = set2;
        proto$1.eras = localeEras;
        proto$1.erasParse = localeErasParse;
        proto$1.erasConvertYear = localeErasConvertYear;
        proto$1.erasAbbrRegex = erasAbbrRegex;
        proto$1.erasNameRegex = erasNameRegex;
        proto$1.erasNarrowRegex = erasNarrowRegex;
        proto$1.months = localeMonths;
        proto$1.monthsShort = localeMonthsShort;
        proto$1.monthsParse = localeMonthsParse;
        proto$1.monthsRegex = monthsRegex;
        proto$1.monthsShortRegex = monthsShortRegex;
        proto$1.week = localeWeek;
        proto$1.firstDayOfYear = localeFirstDayOfYear;
        proto$1.firstDayOfWeek = localeFirstDayOfWeek;
        proto$1.weekdays = localeWeekdays;
        proto$1.weekdaysMin = localeWeekdaysMin;
        proto$1.weekdaysShort = localeWeekdaysShort;
        proto$1.weekdaysParse = localeWeekdaysParse;
        proto$1.weekdaysRegex = weekdaysRegex;
        proto$1.weekdaysShortRegex = weekdaysShortRegex;
        proto$1.weekdaysMinRegex = weekdaysMinRegex;
        proto$1.isPM = localeIsPM;
        proto$1.meridiem = localeMeridiem;
        function get$1(format4, index2, field, setter) {
          var locale5 = getLocale(), utc = createUTC().set(setter, index2);
          return locale5[field](utc, format4);
        }
        function listMonthsImpl(format4, index2, field) {
          if (isNumber2(format4)) {
            index2 = format4;
            format4 = void 0;
          }
          format4 = format4 || "";
          if (index2 != null) {
            return get$1(format4, index2, field, "month");
          }
          var i3, out = [];
          for (i3 = 0; i3 < 12; i3++) {
            out[i3] = get$1(format4, i3, field, "month");
          }
          return out;
        }
        function listWeekdaysImpl(localeSorted, format4, index2, field) {
          if (typeof localeSorted === "boolean") {
            if (isNumber2(format4)) {
              index2 = format4;
              format4 = void 0;
            }
            format4 = format4 || "";
          } else {
            format4 = localeSorted;
            index2 = format4;
            localeSorted = false;
            if (isNumber2(format4)) {
              index2 = format4;
              format4 = void 0;
            }
            format4 = format4 || "";
          }
          var locale5 = getLocale(), shift = localeSorted ? locale5._week.dow : 0, i3, out = [];
          if (index2 != null) {
            return get$1(format4, (index2 + shift) % 7, field, "day");
          }
          for (i3 = 0; i3 < 7; i3++) {
            out[i3] = get$1(format4, (i3 + shift) % 7, field, "day");
          }
          return out;
        }
        function listMonths(format4, index2) {
          return listMonthsImpl(format4, index2, "months");
        }
        function listMonthsShort(format4, index2) {
          return listMonthsImpl(format4, index2, "monthsShort");
        }
        function listWeekdays(localeSorted, format4, index2) {
          return listWeekdaysImpl(localeSorted, format4, index2, "weekdays");
        }
        function listWeekdaysShort(localeSorted, format4, index2) {
          return listWeekdaysImpl(localeSorted, format4, index2, "weekdaysShort");
        }
        function listWeekdaysMin(localeSorted, format4, index2) {
          return listWeekdaysImpl(localeSorted, format4, index2, "weekdaysMin");
        }
        getSetGlobalLocale("en", {
          eras: [
            {
              since: "0001-01-01",
              until: Infinity,
              offset: 1,
              name: "Anno Domini",
              narrow: "AD",
              abbr: "AD"
            },
            {
              since: "0000-12-31",
              until: -Infinity,
              offset: 1,
              name: "Before Christ",
              narrow: "BC",
              abbr: "BC"
            }
          ],
          dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
          ordinal: function(number4) {
            var b2 = number4 % 10, output2 = toInt(number4 % 100 / 10) === 1 ? "th" : b2 === 1 ? "st" : b2 === 2 ? "nd" : b2 === 3 ? "rd" : "th";
            return number4 + output2;
          }
        });
        hooks.lang = deprecate(
          "moment.lang is deprecated. Use moment.locale instead.",
          getSetGlobalLocale
        );
        hooks.langData = deprecate(
          "moment.langData is deprecated. Use moment.localeData instead.",
          getLocale
        );
        var mathAbs = Math.abs;
        function abs() {
          var data = this._data;
          this._milliseconds = mathAbs(this._milliseconds);
          this._days = mathAbs(this._days);
          this._months = mathAbs(this._months);
          data.milliseconds = mathAbs(data.milliseconds);
          data.seconds = mathAbs(data.seconds);
          data.minutes = mathAbs(data.minutes);
          data.hours = mathAbs(data.hours);
          data.months = mathAbs(data.months);
          data.years = mathAbs(data.years);
          return this;
        }
        function addSubtract$1(duration, input, value, direction) {
          var other = createDuration(input, value);
          duration._milliseconds += direction * other._milliseconds;
          duration._days += direction * other._days;
          duration._months += direction * other._months;
          return duration._bubble();
        }
        function add$1(input, value) {
          return addSubtract$1(this, input, value, 1);
        }
        function subtract$1(input, value) {
          return addSubtract$1(this, input, value, -1);
        }
        function absCeil(number4) {
          if (number4 < 0) {
            return Math.floor(number4);
          } else {
            return Math.ceil(number4);
          }
        }
        function bubble() {
          var milliseconds2 = this._milliseconds, days2 = this._days, months2 = this._months, data = this._data, seconds2, minutes2, hours2, years2, monthsFromDays;
          if (!(milliseconds2 >= 0 && days2 >= 0 && months2 >= 0 || milliseconds2 <= 0 && days2 <= 0 && months2 <= 0)) {
            milliseconds2 += absCeil(monthsToDays(months2) + days2) * 864e5;
            days2 = 0;
            months2 = 0;
          }
          data.milliseconds = milliseconds2 % 1e3;
          seconds2 = absFloor(milliseconds2 / 1e3);
          data.seconds = seconds2 % 60;
          minutes2 = absFloor(seconds2 / 60);
          data.minutes = minutes2 % 60;
          hours2 = absFloor(minutes2 / 60);
          data.hours = hours2 % 24;
          days2 += absFloor(hours2 / 24);
          monthsFromDays = absFloor(daysToMonths(days2));
          months2 += monthsFromDays;
          days2 -= absCeil(monthsToDays(monthsFromDays));
          years2 = absFloor(months2 / 12);
          months2 %= 12;
          data.days = days2;
          data.months = months2;
          data.years = years2;
          return this;
        }
        function daysToMonths(days2) {
          return days2 * 4800 / 146097;
        }
        function monthsToDays(months2) {
          return months2 * 146097 / 4800;
        }
        function as(units) {
          if (!this.isValid()) {
            return NaN;
          }
          var days2, months2, milliseconds2 = this._milliseconds;
          units = normalizeUnits(units);
          if (units === "month" || units === "quarter" || units === "year") {
            days2 = this._days + milliseconds2 / 864e5;
            months2 = this._months + daysToMonths(days2);
            switch (units) {
              case "month":
                return months2;
              case "quarter":
                return months2 / 3;
              case "year":
                return months2 / 12;
            }
          } else {
            days2 = this._days + Math.round(monthsToDays(this._months));
            switch (units) {
              case "week":
                return days2 / 7 + milliseconds2 / 6048e5;
              case "day":
                return days2 + milliseconds2 / 864e5;
              case "hour":
                return days2 * 24 + milliseconds2 / 36e5;
              case "minute":
                return days2 * 1440 + milliseconds2 / 6e4;
              case "second":
                return days2 * 86400 + milliseconds2 / 1e3;
              case "millisecond":
                return Math.floor(days2 * 864e5) + milliseconds2;
              default:
                throw new Error("Unknown unit " + units);
            }
          }
        }
        function valueOf$1() {
          if (!this.isValid()) {
            return NaN;
          }
          return this._milliseconds + this._days * 864e5 + this._months % 12 * 2592e6 + toInt(this._months / 12) * 31536e6;
        }
        function makeAs(alias) {
          return function() {
            return this.as(alias);
          };
        }
        var asMilliseconds = makeAs("ms"), asSeconds = makeAs("s"), asMinutes = makeAs("m"), asHours = makeAs("h"), asDays = makeAs("d"), asWeeks = makeAs("w"), asMonths = makeAs("M"), asQuarters = makeAs("Q"), asYears = makeAs("y");
        function clone$1() {
          return createDuration(this);
        }
        function get$2(units) {
          units = normalizeUnits(units);
          return this.isValid() ? this[units + "s"]() : NaN;
        }
        function makeGetter(name) {
          return function() {
            return this.isValid() ? this._data[name] : NaN;
          };
        }
        var milliseconds = makeGetter("milliseconds"), seconds = makeGetter("seconds"), minutes = makeGetter("minutes"), hours = makeGetter("hours"), days = makeGetter("days"), months = makeGetter("months"), years = makeGetter("years");
        function weeks() {
          return absFloor(this.days() / 7);
        }
        var round = Math.round, thresholds = {
          ss: 44,
          // a few seconds to seconds
          s: 45,
          // seconds to minute
          m: 45,
          // minutes to hour
          h: 22,
          // hours to day
          d: 26,
          // days to month/week
          w: null,
          // weeks to month
          M: 11
          // months to year
        };
        function substituteTimeAgo(string3, number4, withoutSuffix, isFuture, locale5) {
          return locale5.relativeTime(number4 || 1, !!withoutSuffix, string3, isFuture);
        }
        function relativeTime$1(posNegDuration, withoutSuffix, thresholds2, locale5) {
          var duration = createDuration(posNegDuration).abs(), seconds2 = round(duration.as("s")), minutes2 = round(duration.as("m")), hours2 = round(duration.as("h")), days2 = round(duration.as("d")), months2 = round(duration.as("M")), weeks2 = round(duration.as("w")), years2 = round(duration.as("y")), a2 = seconds2 <= thresholds2.ss && ["s", seconds2] || seconds2 < thresholds2.s && ["ss", seconds2] || minutes2 <= 1 && ["m"] || minutes2 < thresholds2.m && ["mm", minutes2] || hours2 <= 1 && ["h"] || hours2 < thresholds2.h && ["hh", hours2] || days2 <= 1 && ["d"] || days2 < thresholds2.d && ["dd", days2];
          if (thresholds2.w != null) {
            a2 = a2 || weeks2 <= 1 && ["w"] || weeks2 < thresholds2.w && ["ww", weeks2];
          }
          a2 = a2 || months2 <= 1 && ["M"] || months2 < thresholds2.M && ["MM", months2] || years2 <= 1 && ["y"] || ["yy", years2];
          a2[2] = withoutSuffix;
          a2[3] = +posNegDuration > 0;
          a2[4] = locale5;
          return substituteTimeAgo.apply(null, a2);
        }
        function getSetRelativeTimeRounding(roundingFunction) {
          if (roundingFunction === void 0) {
            return round;
          }
          if (typeof roundingFunction === "function") {
            round = roundingFunction;
            return true;
          }
          return false;
        }
        function getSetRelativeTimeThreshold(threshold, limit) {
          if (thresholds[threshold] === void 0) {
            return false;
          }
          if (limit === void 0) {
            return thresholds[threshold];
          }
          thresholds[threshold] = limit;
          if (threshold === "s") {
            thresholds.ss = limit - 1;
          }
          return true;
        }
        function humanize(argWithSuffix, argThresholds) {
          if (!this.isValid()) {
            return this.localeData().invalidDate();
          }
          var withSuffix = false, th = thresholds, locale5, output2;
          if (typeof argWithSuffix === "object") {
            argThresholds = argWithSuffix;
            argWithSuffix = false;
          }
          if (typeof argWithSuffix === "boolean") {
            withSuffix = argWithSuffix;
          }
          if (typeof argThresholds === "object") {
            th = Object.assign({}, thresholds, argThresholds);
            if (argThresholds.s != null && argThresholds.ss == null) {
              th.ss = argThresholds.s - 1;
            }
          }
          locale5 = this.localeData();
          output2 = relativeTime$1(this, !withSuffix, th, locale5);
          if (withSuffix) {
            output2 = locale5.pastFuture(+this, output2);
          }
          return locale5.postformat(output2);
        }
        var abs$1 = Math.abs;
        function sign(x2) {
          return (x2 > 0) - (x2 < 0) || +x2;
        }
        function toISOString$1() {
          if (!this.isValid()) {
            return this.localeData().invalidDate();
          }
          var seconds2 = abs$1(this._milliseconds) / 1e3, days2 = abs$1(this._days), months2 = abs$1(this._months), minutes2, hours2, years2, s2, total = this.asSeconds(), totalSign, ymSign, daysSign, hmsSign;
          if (!total) {
            return "P0D";
          }
          minutes2 = absFloor(seconds2 / 60);
          hours2 = absFloor(minutes2 / 60);
          seconds2 %= 60;
          minutes2 %= 60;
          years2 = absFloor(months2 / 12);
          months2 %= 12;
          s2 = seconds2 ? seconds2.toFixed(3).replace(/\.?0+$/, "") : "";
          totalSign = total < 0 ? "-" : "";
          ymSign = sign(this._months) !== sign(total) ? "-" : "";
          daysSign = sign(this._days) !== sign(total) ? "-" : "";
          hmsSign = sign(this._milliseconds) !== sign(total) ? "-" : "";
          return totalSign + "P" + (years2 ? ymSign + years2 + "Y" : "") + (months2 ? ymSign + months2 + "M" : "") + (days2 ? daysSign + days2 + "D" : "") + (hours2 || minutes2 || seconds2 ? "T" : "") + (hours2 ? hmsSign + hours2 + "H" : "") + (minutes2 ? hmsSign + minutes2 + "M" : "") + (seconds2 ? hmsSign + s2 + "S" : "");
        }
        var proto$2 = Duration.prototype;
        proto$2.isValid = isValid$1;
        proto$2.abs = abs;
        proto$2.add = add$1;
        proto$2.subtract = subtract$1;
        proto$2.as = as;
        proto$2.asMilliseconds = asMilliseconds;
        proto$2.asSeconds = asSeconds;
        proto$2.asMinutes = asMinutes;
        proto$2.asHours = asHours;
        proto$2.asDays = asDays;
        proto$2.asWeeks = asWeeks;
        proto$2.asMonths = asMonths;
        proto$2.asQuarters = asQuarters;
        proto$2.asYears = asYears;
        proto$2.valueOf = valueOf$1;
        proto$2._bubble = bubble;
        proto$2.clone = clone$1;
        proto$2.get = get$2;
        proto$2.milliseconds = milliseconds;
        proto$2.seconds = seconds;
        proto$2.minutes = minutes;
        proto$2.hours = hours;
        proto$2.days = days;
        proto$2.weeks = weeks;
        proto$2.months = months;
        proto$2.years = years;
        proto$2.humanize = humanize;
        proto$2.toISOString = toISOString$1;
        proto$2.toString = toISOString$1;
        proto$2.toJSON = toISOString$1;
        proto$2.locale = locale4;
        proto$2.localeData = localeData;
        proto$2.toIsoString = deprecate(
          "toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",
          toISOString$1
        );
        proto$2.lang = lang;
        addFormatToken("X", 0, 0, "unix");
        addFormatToken("x", 0, 0, "valueOf");
        addRegexToken("x", matchSigned);
        addRegexToken("X", matchTimestamp);
        addParseToken("X", function(input, array4, config) {
          config._d = new Date(parseFloat(input) * 1e3);
        });
        addParseToken("x", function(input, array4, config) {
          config._d = new Date(toInt(input));
        });
        hooks.version = "2.29.4";
        setHookCallback(createLocal);
        hooks.fn = proto;
        hooks.min = min;
        hooks.max = max;
        hooks.now = now2;
        hooks.utc = createUTC;
        hooks.unix = createUnix;
        hooks.months = listMonths;
        hooks.isDate = isDate3;
        hooks.locale = getSetGlobalLocale;
        hooks.invalid = createInvalid;
        hooks.duration = createDuration;
        hooks.isMoment = isMoment;
        hooks.weekdays = listWeekdays;
        hooks.parseZone = createInZone;
        hooks.localeData = getLocale;
        hooks.isDuration = isDuration;
        hooks.monthsShort = listMonthsShort;
        hooks.weekdaysMin = listWeekdaysMin;
        hooks.defineLocale = defineLocale;
        hooks.updateLocale = updateLocale;
        hooks.locales = listLocales;
        hooks.weekdaysShort = listWeekdaysShort;
        hooks.normalizeUnits = normalizeUnits;
        hooks.relativeTimeRounding = getSetRelativeTimeRounding;
        hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
        hooks.calendarFormat = getCalendarFormat;
        hooks.prototype = proto;
        hooks.HTML5_FMT = {
          DATETIME_LOCAL: "YYYY-MM-DDTHH:mm",
          // <input type="datetime-local" />
          DATETIME_LOCAL_SECONDS: "YYYY-MM-DDTHH:mm:ss",
          // <input type="datetime-local" step="1" />
          DATETIME_LOCAL_MS: "YYYY-MM-DDTHH:mm:ss.SSS",
          // <input type="datetime-local" step="0.001" />
          DATE: "YYYY-MM-DD",
          // <input type="date" />
          TIME: "HH:mm",
          // <input type="time" />
          TIME_SECONDS: "HH:mm:ss",
          // <input type="time" step="1" />
          TIME_MS: "HH:mm:ss.SSS",
          // <input type="time" step="0.001" />
          WEEK: "GGGG-[W]WW",
          // <input type="week" />
          MONTH: "YYYY-MM"
          // <input type="month" />
        };
        return hooks;
      });
    }
  });

  // node_modules/string-convert/camel2hyphen.js
  var require_camel2hyphen = __commonJS({
    "node_modules/string-convert/camel2hyphen.js"(exports2, module2) {
      var camel2hyphen = function(str) {
        return str.replace(/[A-Z]/g, function(match2) {
          return "-" + match2.toLowerCase();
        }).toLowerCase();
      };
      module2.exports = camel2hyphen;
    }
  });

  // node_modules/json2mq/index.js
  var require_json2mq = __commonJS({
    "node_modules/json2mq/index.js"(exports2, module2) {
      var camel2hyphen = require_camel2hyphen();
      var isDimension = function(feature) {
        var re = /[height|width]$/;
        return re.test(feature);
      };
      var obj2mq = function(obj) {
        var mq = "";
        var features = Object.keys(obj);
        features.forEach(function(feature, index2) {
          var value = obj[feature];
          feature = camel2hyphen(feature);
          if (isDimension(feature) && typeof value === "number") {
            value = value + "px";
          }
          if (value === true) {
            mq += feature;
          } else if (value === false) {
            mq += "not " + feature;
          } else {
            mq += "(" + feature + ": " + value + ")";
          }
          if (index2 < features.length - 1) {
            mq += " and ";
          }
        });
        return mq;
      };
      var json2mq2 = function(query) {
        var mq = "";
        if (typeof query === "string") {
          return query;
        }
        if (query instanceof Array) {
          query.forEach(function(q2, index2) {
            mq += obj2mq(q2);
            if (index2 < query.length - 1) {
              mq += ", ";
            }
          });
          return mq;
        }
        return obj2mq(query);
      };
      module2.exports = json2mq2;
    }
  });

  // node_modules/shallowequal/index.js
  var require_shallowequal = __commonJS({
    "node_modules/shallowequal/index.js"(exports2, module2) {
      module2.exports = function shallowEqual5(objA, objB, compare, compareContext) {
        var ret = compare ? compare.call(compareContext, objA, objB) : void 0;
        if (ret !== void 0) {
          return !!ret;
        }
        if (objA === objB) {
          return true;
        }
        if (typeof objA !== "object" || !objA || typeof objB !== "object" || !objB) {
          return false;
        }
        var keysA = Object.keys(objA);
        var keysB = Object.keys(objB);
        if (keysA.length !== keysB.length) {
          return false;
        }
        var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB);
        for (var idx = 0; idx < keysA.length; idx++) {
          var key2 = keysA[idx];
          if (!bHasOwnProperty(key2)) {
            return false;
          }
          var valueA = objA[key2];
          var valueB = objB[key2];
          ret = compare ? compare.call(compareContext, valueA, valueB, key2) : void 0;
          if (ret === false || ret === void 0 && valueA !== valueB) {
            return false;
          }
        }
        return true;
      };
    }
  });

  // node_modules/lodash/isObject.js
  var require_isObject = __commonJS({
    "node_modules/lodash/isObject.js"(exports2, module2) {
      function isObject3(value) {
        var type4 = typeof value;
        return value != null && (type4 == "object" || type4 == "function");
      }
      module2.exports = isObject3;
    }
  });

  // node_modules/lodash/now.js
  var require_now = __commonJS({
    "node_modules/lodash/now.js"(exports2, module2) {
      var root3 = require_root();
      var now2 = function() {
        return root3.Date.now();
      };
      module2.exports = now2;
    }
  });

  // node_modules/lodash/_trimmedEndIndex.js
  var require_trimmedEndIndex = __commonJS({
    "node_modules/lodash/_trimmedEndIndex.js"(exports2, module2) {
      var reWhitespace = /\s/;
      function trimmedEndIndex(string3) {
        var index2 = string3.length;
        while (index2-- && reWhitespace.test(string3.charAt(index2))) {
        }
        return index2;
      }
      module2.exports = trimmedEndIndex;
    }
  });

  // node_modules/lodash/_baseTrim.js
  var require_baseTrim = __commonJS({
    "node_modules/lodash/_baseTrim.js"(exports2, module2) {
      var trimmedEndIndex = require_trimmedEndIndex();
      var reTrimStart = /^\s+/;
      function baseTrim(string3) {
        return string3 ? string3.slice(0, trimmedEndIndex(string3) + 1).replace(reTrimStart, "") : string3;
      }
      module2.exports = baseTrim;
    }
  });

  // node_modules/lodash/toNumber.js
  var require_toNumber = __commonJS({
    "node_modules/lodash/toNumber.js"(exports2, module2) {
      var baseTrim = require_baseTrim();
      var isObject3 = require_isObject();
      var isSymbol = require_isSymbol();
      var NAN = 0 / 0;
      var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
      var reIsBinary = /^0b[01]+$/i;
      var reIsOctal = /^0o[0-7]+$/i;
      var freeParseInt = parseInt;
      function toNumber(value) {
        if (typeof value == "number") {
          return value;
        }
        if (isSymbol(value)) {
          return NAN;
        }
        if (isObject3(value)) {
          var other = typeof value.valueOf == "function" ? value.valueOf() : value;
          value = isObject3(other) ? other + "" : other;
        }
        if (typeof value != "string") {
          return value === 0 ? value : +value;
        }
        value = baseTrim(value);
        var isBinary = reIsBinary.test(value);
        return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
      }
      module2.exports = toNumber;
    }
  });

  // node_modules/lodash/debounce.js
  var require_debounce = __commonJS({
    "node_modules/lodash/debounce.js"(exports2, module2) {
      var isObject3 = require_isObject();
      var now2 = require_now();
      var toNumber = require_toNumber();
      var FUNC_ERROR_TEXT = "Expected a function";
      var nativeMax = Math.max;
      var nativeMin = Math.min;
      function debounce3(func, wait, options) {
        var lastArgs, lastThis, maxWait, result2, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
        if (typeof func != "function") {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        wait = toNumber(wait) || 0;
        if (isObject3(options)) {
          leading = !!options.leading;
          maxing = "maxWait" in options;
          maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
          trailing = "trailing" in options ? !!options.trailing : trailing;
        }
        function invokeFunc(time) {
          var args = lastArgs, thisArg = lastThis;
          lastArgs = lastThis = void 0;
          lastInvokeTime = time;
          result2 = func.apply(thisArg, args);
          return result2;
        }
        function leadingEdge(time) {
          lastInvokeTime = time;
          timerId = setTimeout(timerExpired, wait);
          return leading ? invokeFunc(time) : result2;
        }
        function remainingWait(time) {
          var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
          return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
        }
        function shouldInvoke(time) {
          var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
          return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
        }
        function timerExpired() {
          var time = now2();
          if (shouldInvoke(time)) {
            return trailingEdge(time);
          }
          timerId = setTimeout(timerExpired, remainingWait(time));
        }
        function trailingEdge(time) {
          timerId = void 0;
          if (trailing && lastArgs) {
            return invokeFunc(time);
          }
          lastArgs = lastThis = void 0;
          return result2;
        }
        function cancel2() {
          if (timerId !== void 0) {
            clearTimeout(timerId);
          }
          lastInvokeTime = 0;
          lastArgs = lastCallTime = lastThis = timerId = void 0;
        }
        function flush() {
          return timerId === void 0 ? result2 : trailingEdge(now2());
        }
        function debounced() {
          var time = now2(), isInvoking = shouldInvoke(time);
          lastArgs = arguments;
          lastThis = this;
          lastCallTime = time;
          if (isInvoking) {
            if (timerId === void 0) {
              return leadingEdge(lastCallTime);
            }
            if (maxing) {
              clearTimeout(timerId);
              timerId = setTimeout(timerExpired, wait);
              return invokeFunc(lastCallTime);
            }
          }
          if (timerId === void 0) {
            timerId = setTimeout(timerExpired, wait);
          }
          return result2;
        }
        debounced.cancel = cancel2;
        debounced.flush = flush;
        return debounced;
      }
      module2.exports = debounce3;
    }
  });

  // node_modules/lodash/_listCacheClear.js
  var require_listCacheClear = __commonJS({
    "node_modules/lodash/_listCacheClear.js"(exports2, module2) {
      function listCacheClear() {
        this.__data__ = [];
        this.size = 0;
      }
      module2.exports = listCacheClear;
    }
  });

  // node_modules/lodash/eq.js
  var require_eq = __commonJS({
    "node_modules/lodash/eq.js"(exports2, module2) {
      function eq(value, other) {
        return value === other || value !== value && other !== other;
      }
      module2.exports = eq;
    }
  });

  // node_modules/lodash/_assocIndexOf.js
  var require_assocIndexOf = __commonJS({
    "node_modules/lodash/_assocIndexOf.js"(exports2, module2) {
      var eq = require_eq();
      function assocIndexOf(array4, key2) {
        var length = array4.length;
        while (length--) {
          if (eq(array4[length][0], key2)) {
            return length;
          }
        }
        return -1;
      }
      module2.exports = assocIndexOf;
    }
  });

  // node_modules/lodash/_listCacheDelete.js
  var require_listCacheDelete = __commonJS({
    "node_modules/lodash/_listCacheDelete.js"(exports2, module2) {
      var assocIndexOf = require_assocIndexOf();
      var arrayProto = Array.prototype;
      var splice = arrayProto.splice;
      function listCacheDelete(key2) {
        var data = this.__data__, index2 = assocIndexOf(data, key2);
        if (index2 < 0) {
          return false;
        }
        var lastIndex = data.length - 1;
        if (index2 == lastIndex) {
          data.pop();
        } else {
          splice.call(data, index2, 1);
        }
        --this.size;
        return true;
      }
      module2.exports = listCacheDelete;
    }
  });

  // node_modules/lodash/_listCacheGet.js
  var require_listCacheGet = __commonJS({
    "node_modules/lodash/_listCacheGet.js"(exports2, module2) {
      var assocIndexOf = require_assocIndexOf();
      function listCacheGet(key2) {
        var data = this.__data__, index2 = assocIndexOf(data, key2);
        return index2 < 0 ? void 0 : data[index2][1];
      }
      module2.exports = listCacheGet;
    }
  });

  // node_modules/lodash/_listCacheHas.js
  var require_listCacheHas = __commonJS({
    "node_modules/lodash/_listCacheHas.js"(exports2, module2) {
      var assocIndexOf = require_assocIndexOf();
      function listCacheHas(key2) {
        return assocIndexOf(this.__data__, key2) > -1;
      }
      module2.exports = listCacheHas;
    }
  });

  // node_modules/lodash/_listCacheSet.js
  var require_listCacheSet = __commonJS({
    "node_modules/lodash/_listCacheSet.js"(exports2, module2) {
      var assocIndexOf = require_assocIndexOf();
      function listCacheSet(key2, value) {
        var data = this.__data__, index2 = assocIndexOf(data, key2);
        if (index2 < 0) {
          ++this.size;
          data.push([key2, value]);
        } else {
          data[index2][1] = value;
        }
        return this;
      }
      module2.exports = listCacheSet;
    }
  });

  // node_modules/lodash/_ListCache.js
  var require_ListCache = __commonJS({
    "node_modules/lodash/_ListCache.js"(exports2, module2) {
      var listCacheClear = require_listCacheClear();
      var listCacheDelete = require_listCacheDelete();
      var listCacheGet = require_listCacheGet();
      var listCacheHas = require_listCacheHas();
      var listCacheSet = require_listCacheSet();
      function ListCache(entries) {
        var index2 = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index2 < length) {
          var entry = entries[index2];
          this.set(entry[0], entry[1]);
        }
      }
      ListCache.prototype.clear = listCacheClear;
      ListCache.prototype["delete"] = listCacheDelete;
      ListCache.prototype.get = listCacheGet;
      ListCache.prototype.has = listCacheHas;
      ListCache.prototype.set = listCacheSet;
      module2.exports = ListCache;
    }
  });

  // node_modules/lodash/_stackClear.js
  var require_stackClear = __commonJS({
    "node_modules/lodash/_stackClear.js"(exports2, module2) {
      var ListCache = require_ListCache();
      function stackClear() {
        this.__data__ = new ListCache();
        this.size = 0;
      }
      module2.exports = stackClear;
    }
  });

  // node_modules/lodash/_stackDelete.js
  var require_stackDelete = __commonJS({
    "node_modules/lodash/_stackDelete.js"(exports2, module2) {
      function stackDelete(key2) {
        var data = this.__data__, result2 = data["delete"](key2);
        this.size = data.size;
        return result2;
      }
      module2.exports = stackDelete;
    }
  });

  // node_modules/lodash/_stackGet.js
  var require_stackGet = __commonJS({
    "node_modules/lodash/_stackGet.js"(exports2, module2) {
      function stackGet(key2) {
        return this.__data__.get(key2);
      }
      module2.exports = stackGet;
    }
  });

  // node_modules/lodash/_stackHas.js
  var require_stackHas = __commonJS({
    "node_modules/lodash/_stackHas.js"(exports2, module2) {
      function stackHas(key2) {
        return this.__data__.has(key2);
      }
      module2.exports = stackHas;
    }
  });

  // node_modules/lodash/isFunction.js
  var require_isFunction = __commonJS({
    "node_modules/lodash/isFunction.js"(exports2, module2) {
      var baseGetTag = require_baseGetTag();
      var isObject3 = require_isObject();
      var asyncTag = "[object AsyncFunction]";
      var funcTag = "[object Function]";
      var genTag = "[object GeneratorFunction]";
      var proxyTag = "[object Proxy]";
      function isFunction2(value) {
        if (!isObject3(value)) {
          return false;
        }
        var tag = baseGetTag(value);
        return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
      }
      module2.exports = isFunction2;
    }
  });

  // node_modules/lodash/_coreJsData.js
  var require_coreJsData = __commonJS({
    "node_modules/lodash/_coreJsData.js"(exports2, module2) {
      var root3 = require_root();
      var coreJsData = root3["__core-js_shared__"];
      module2.exports = coreJsData;
    }
  });

  // node_modules/lodash/_isMasked.js
  var require_isMasked = __commonJS({
    "node_modules/lodash/_isMasked.js"(exports2, module2) {
      var coreJsData = require_coreJsData();
      var maskSrcKey = function() {
        var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
        return uid ? "Symbol(src)_1." + uid : "";
      }();
      function isMasked(func) {
        return !!maskSrcKey && maskSrcKey in func;
      }
      module2.exports = isMasked;
    }
  });

  // node_modules/lodash/_toSource.js
  var require_toSource = __commonJS({
    "node_modules/lodash/_toSource.js"(exports2, module2) {
      var funcProto = Function.prototype;
      var funcToString = funcProto.toString;
      function toSource(func) {
        if (func != null) {
          try {
            return funcToString.call(func);
          } catch (e3) {
          }
          try {
            return func + "";
          } catch (e3) {
          }
        }
        return "";
      }
      module2.exports = toSource;
    }
  });

  // node_modules/lodash/_baseIsNative.js
  var require_baseIsNative = __commonJS({
    "node_modules/lodash/_baseIsNative.js"(exports2, module2) {
      var isFunction2 = require_isFunction();
      var isMasked = require_isMasked();
      var isObject3 = require_isObject();
      var toSource = require_toSource();
      var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
      var reIsHostCtor = /^\[object .+?Constructor\]$/;
      var funcProto = Function.prototype;
      var objectProto = Object.prototype;
      var funcToString = funcProto.toString;
      var hasOwnProperty2 = objectProto.hasOwnProperty;
      var reIsNative = RegExp(
        "^" + funcToString.call(hasOwnProperty2).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
      );
      function baseIsNative(value) {
        if (!isObject3(value) || isMasked(value)) {
          return false;
        }
        var pattern4 = isFunction2(value) ? reIsNative : reIsHostCtor;
        return pattern4.test(toSource(value));
      }
      module2.exports = baseIsNative;
    }
  });

  // node_modules/lodash/_getValue.js
  var require_getValue = __commonJS({
    "node_modules/lodash/_getValue.js"(exports2, module2) {
      function getValue5(object4, key2) {
        return object4 == null ? void 0 : object4[key2];
      }
      module2.exports = getValue5;
    }
  });

  // node_modules/lodash/_getNative.js
  var require_getNative = __commonJS({
    "node_modules/lodash/_getNative.js"(exports2, module2) {
      var baseIsNative = require_baseIsNative();
      var getValue5 = require_getValue();
      function getNative(object4, key2) {
        var value = getValue5(object4, key2);
        return baseIsNative(value) ? value : void 0;
      }
      module2.exports = getNative;
    }
  });

  // node_modules/lodash/_Map.js
  var require_Map = __commonJS({
    "node_modules/lodash/_Map.js"(exports2, module2) {
      var getNative = require_getNative();
      var root3 = require_root();
      var Map2 = getNative(root3, "Map");
      module2.exports = Map2;
    }
  });

  // node_modules/lodash/_nativeCreate.js
  var require_nativeCreate = __commonJS({
    "node_modules/lodash/_nativeCreate.js"(exports2, module2) {
      var getNative = require_getNative();
      var nativeCreate = getNative(Object, "create");
      module2.exports = nativeCreate;
    }
  });

  // node_modules/lodash/_hashClear.js
  var require_hashClear = __commonJS({
    "node_modules/lodash/_hashClear.js"(exports2, module2) {
      var nativeCreate = require_nativeCreate();
      function hashClear() {
        this.__data__ = nativeCreate ? nativeCreate(null) : {};
        this.size = 0;
      }
      module2.exports = hashClear;
    }
  });

  // node_modules/lodash/_hashDelete.js
  var require_hashDelete = __commonJS({
    "node_modules/lodash/_hashDelete.js"(exports2, module2) {
      function hashDelete(key2) {
        var result2 = this.has(key2) && delete this.__data__[key2];
        this.size -= result2 ? 1 : 0;
        return result2;
      }
      module2.exports = hashDelete;
    }
  });

  // node_modules/lodash/_hashGet.js
  var require_hashGet = __commonJS({
    "node_modules/lodash/_hashGet.js"(exports2, module2) {
      var nativeCreate = require_nativeCreate();
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      var objectProto = Object.prototype;
      var hasOwnProperty2 = objectProto.hasOwnProperty;
      function hashGet(key2) {
        var data = this.__data__;
        if (nativeCreate) {
          var result2 = data[key2];
          return result2 === HASH_UNDEFINED ? void 0 : result2;
        }
        return hasOwnProperty2.call(data, key2) ? data[key2] : void 0;
      }
      module2.exports = hashGet;
    }
  });

  // node_modules/lodash/_hashHas.js
  var require_hashHas = __commonJS({
    "node_modules/lodash/_hashHas.js"(exports2, module2) {
      var nativeCreate = require_nativeCreate();
      var objectProto = Object.prototype;
      var hasOwnProperty2 = objectProto.hasOwnProperty;
      function hashHas(key2) {
        var data = this.__data__;
        return nativeCreate ? data[key2] !== void 0 : hasOwnProperty2.call(data, key2);
      }
      module2.exports = hashHas;
    }
  });

  // node_modules/lodash/_hashSet.js
  var require_hashSet = __commonJS({
    "node_modules/lodash/_hashSet.js"(exports2, module2) {
      var nativeCreate = require_nativeCreate();
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      function hashSet(key2, value) {
        var data = this.__data__;
        this.size += this.has(key2) ? 0 : 1;
        data[key2] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
        return this;
      }
      module2.exports = hashSet;
    }
  });

  // node_modules/lodash/_Hash.js
  var require_Hash = __commonJS({
    "node_modules/lodash/_Hash.js"(exports2, module2) {
      var hashClear = require_hashClear();
      var hashDelete = require_hashDelete();
      var hashGet = require_hashGet();
      var hashHas = require_hashHas();
      var hashSet = require_hashSet();
      function Hash(entries) {
        var index2 = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index2 < length) {
          var entry = entries[index2];
          this.set(entry[0], entry[1]);
        }
      }
      Hash.prototype.clear = hashClear;
      Hash.prototype["delete"] = hashDelete;
      Hash.prototype.get = hashGet;
      Hash.prototype.has = hashHas;
      Hash.prototype.set = hashSet;
      module2.exports = Hash;
    }
  });

  // node_modules/lodash/_mapCacheClear.js
  var require_mapCacheClear = __commonJS({
    "node_modules/lodash/_mapCacheClear.js"(exports2, module2) {
      var Hash = require_Hash();
      var ListCache = require_ListCache();
      var Map2 = require_Map();
      function mapCacheClear() {
        this.size = 0;
        this.__data__ = {
          "hash": new Hash(),
          "map": new (Map2 || ListCache)(),
          "string": new Hash()
        };
      }
      module2.exports = mapCacheClear;
    }
  });

  // node_modules/lodash/_isKeyable.js
  var require_isKeyable = __commonJS({
    "node_modules/lodash/_isKeyable.js"(exports2, module2) {
      function isKeyable(value) {
        var type4 = typeof value;
        return type4 == "string" || type4 == "number" || type4 == "symbol" || type4 == "boolean" ? value !== "__proto__" : value === null;
      }
      module2.exports = isKeyable;
    }
  });

  // node_modules/lodash/_getMapData.js
  var require_getMapData = __commonJS({
    "node_modules/lodash/_getMapData.js"(exports2, module2) {
      var isKeyable = require_isKeyable();
      function getMapData(map, key2) {
        var data = map.__data__;
        return isKeyable(key2) ? data[typeof key2 == "string" ? "string" : "hash"] : data.map;
      }
      module2.exports = getMapData;
    }
  });

  // node_modules/lodash/_mapCacheDelete.js
  var require_mapCacheDelete = __commonJS({
    "node_modules/lodash/_mapCacheDelete.js"(exports2, module2) {
      var getMapData = require_getMapData();
      function mapCacheDelete(key2) {
        var result2 = getMapData(this, key2)["delete"](key2);
        this.size -= result2 ? 1 : 0;
        return result2;
      }
      module2.exports = mapCacheDelete;
    }
  });

  // node_modules/lodash/_mapCacheGet.js
  var require_mapCacheGet = __commonJS({
    "node_modules/lodash/_mapCacheGet.js"(exports2, module2) {
      var getMapData = require_getMapData();
      function mapCacheGet(key2) {
        return getMapData(this, key2).get(key2);
      }
      module2.exports = mapCacheGet;
    }
  });

  // node_modules/lodash/_mapCacheHas.js
  var require_mapCacheHas = __commonJS({
    "node_modules/lodash/_mapCacheHas.js"(exports2, module2) {
      var getMapData = require_getMapData();
      function mapCacheHas(key2) {
        return getMapData(this, key2).has(key2);
      }
      module2.exports = mapCacheHas;
    }
  });

  // node_modules/lodash/_mapCacheSet.js
  var require_mapCacheSet = __commonJS({
    "node_modules/lodash/_mapCacheSet.js"(exports2, module2) {
      var getMapData = require_getMapData();
      function mapCacheSet(key2, value) {
        var data = getMapData(this, key2), size = data.size;
        data.set(key2, value);
        this.size += data.size == size ? 0 : 1;
        return this;
      }
      module2.exports = mapCacheSet;
    }
  });

  // node_modules/lodash/_MapCache.js
  var require_MapCache = __commonJS({
    "node_modules/lodash/_MapCache.js"(exports2, module2) {
      var mapCacheClear = require_mapCacheClear();
      var mapCacheDelete = require_mapCacheDelete();
      var mapCacheGet = require_mapCacheGet();
      var mapCacheHas = require_mapCacheHas();
      var mapCacheSet = require_mapCacheSet();
      function MapCache(entries) {
        var index2 = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index2 < length) {
          var entry = entries[index2];
          this.set(entry[0], entry[1]);
        }
      }
      MapCache.prototype.clear = mapCacheClear;
      MapCache.prototype["delete"] = mapCacheDelete;
      MapCache.prototype.get = mapCacheGet;
      MapCache.prototype.has = mapCacheHas;
      MapCache.prototype.set = mapCacheSet;
      module2.exports = MapCache;
    }
  });

  // node_modules/lodash/_stackSet.js
  var require_stackSet = __commonJS({
    "node_modules/lodash/_stackSet.js"(exports2, module2) {
      var ListCache = require_ListCache();
      var Map2 = require_Map();
      var MapCache = require_MapCache();
      var LARGE_ARRAY_SIZE = 200;
      function stackSet(key2, value) {
        var data = this.__data__;
        if (data instanceof ListCache) {
          var pairs = data.__data__;
          if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
            pairs.push([key2, value]);
            this.size = ++data.size;
            return this;
          }
          data = this.__data__ = new MapCache(pairs);
        }
        data.set(key2, value);
        this.size = data.size;
        return this;
      }
      module2.exports = stackSet;
    }
  });

  // node_modules/lodash/_Stack.js
  var require_Stack = __commonJS({
    "node_modules/lodash/_Stack.js"(exports2, module2) {
      var ListCache = require_ListCache();
      var stackClear = require_stackClear();
      var stackDelete = require_stackDelete();
      var stackGet = require_stackGet();
      var stackHas = require_stackHas();
      var stackSet = require_stackSet();
      function Stack(entries) {
        var data = this.__data__ = new ListCache(entries);
        this.size = data.size;
      }
      Stack.prototype.clear = stackClear;
      Stack.prototype["delete"] = stackDelete;
      Stack.prototype.get = stackGet;
      Stack.prototype.has = stackHas;
      Stack.prototype.set = stackSet;
      module2.exports = Stack;
    }
  });

  // node_modules/lodash/_setCacheAdd.js
  var require_setCacheAdd = __commonJS({
    "node_modules/lodash/_setCacheAdd.js"(exports2, module2) {
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      function setCacheAdd(value) {
        this.__data__.set(value, HASH_UNDEFINED);
        return this;
      }
      module2.exports = setCacheAdd;
    }
  });

  // node_modules/lodash/_setCacheHas.js
  var require_setCacheHas = __commonJS({
    "node_modules/lodash/_setCacheHas.js"(exports2, module2) {
      function setCacheHas(value) {
        return this.__data__.has(value);
      }
      module2.exports = setCacheHas;
    }
  });

  // node_modules/lodash/_SetCache.js
  var require_SetCache = __commonJS({
    "node_modules/lodash/_SetCache.js"(exports2, module2) {
      var MapCache = require_MapCache();
      var setCacheAdd = require_setCacheAdd();
      var setCacheHas = require_setCacheHas();
      function SetCache(values) {
        var index2 = -1, length = values == null ? 0 : values.length;
        this.__data__ = new MapCache();
        while (++index2 < length) {
          this.add(values[index2]);
        }
      }
      SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
      SetCache.prototype.has = setCacheHas;
      module2.exports = SetCache;
    }
  });

  // node_modules/lodash/_arraySome.js
  var require_arraySome = __commonJS({
    "node_modules/lodash/_arraySome.js"(exports2, module2) {
      function arraySome(array4, predicate) {
        var index2 = -1, length = array4 == null ? 0 : array4.length;
        while (++index2 < length) {
          if (predicate(array4[index2], index2, array4)) {
            return true;
          }
        }
        return false;
      }
      module2.exports = arraySome;
    }
  });

  // node_modules/lodash/_cacheHas.js
  var require_cacheHas = __commonJS({
    "node_modules/lodash/_cacheHas.js"(exports2, module2) {
      function cacheHas(cache, key2) {
        return cache.has(key2);
      }
      module2.exports = cacheHas;
    }
  });

  // node_modules/lodash/_equalArrays.js
  var require_equalArrays = __commonJS({
    "node_modules/lodash/_equalArrays.js"(exports2, module2) {
      var SetCache = require_SetCache();
      var arraySome = require_arraySome();
      var cacheHas = require_cacheHas();
      var COMPARE_PARTIAL_FLAG = 1;
      var COMPARE_UNORDERED_FLAG = 2;
      function equalArrays(array4, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array4.length, othLength = other.length;
        if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
          return false;
        }
        var arrStacked = stack.get(array4);
        var othStacked = stack.get(other);
        if (arrStacked && othStacked) {
          return arrStacked == other && othStacked == array4;
        }
        var index2 = -1, result2 = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : void 0;
        stack.set(array4, other);
        stack.set(other, array4);
        while (++index2 < arrLength) {
          var arrValue = array4[index2], othValue = other[index2];
          if (customizer) {
            var compared = isPartial ? customizer(othValue, arrValue, index2, other, array4, stack) : customizer(arrValue, othValue, index2, array4, other, stack);
          }
          if (compared !== void 0) {
            if (compared) {
              continue;
            }
            result2 = false;
            break;
          }
          if (seen) {
            if (!arraySome(other, function(othValue2, othIndex) {
              if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
                return seen.push(othIndex);
              }
            })) {
              result2 = false;
              break;
            }
          } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
            result2 = false;
            break;
          }
        }
        stack["delete"](array4);
        stack["delete"](other);
        return result2;
      }
      module2.exports = equalArrays;
    }
  });

  // node_modules/lodash/_Uint8Array.js
  var require_Uint8Array = __commonJS({
    "node_modules/lodash/_Uint8Array.js"(exports2, module2) {
      var root3 = require_root();
      var Uint8Array2 = root3.Uint8Array;
      module2.exports = Uint8Array2;
    }
  });

  // node_modules/lodash/_mapToArray.js
  var require_mapToArray = __commonJS({
    "node_modules/lodash/_mapToArray.js"(exports2, module2) {
      function mapToArray(map) {
        var index2 = -1, result2 = Array(map.size);
        map.forEach(function(value, key2) {
          result2[++index2] = [key2, value];
        });
        return result2;
      }
      module2.exports = mapToArray;
    }
  });

  // node_modules/lodash/_setToArray.js
  var require_setToArray = __commonJS({
    "node_modules/lodash/_setToArray.js"(exports2, module2) {
      function setToArray(set2) {
        var index2 = -1, result2 = Array(set2.size);
        set2.forEach(function(value) {
          result2[++index2] = value;
        });
        return result2;
      }
      module2.exports = setToArray;
    }
  });

  // node_modules/lodash/_equalByTag.js
  var require_equalByTag = __commonJS({
    "node_modules/lodash/_equalByTag.js"(exports2, module2) {
      var Symbol2 = require_Symbol();
      var Uint8Array2 = require_Uint8Array();
      var eq = require_eq();
      var equalArrays = require_equalArrays();
      var mapToArray = require_mapToArray();
      var setToArray = require_setToArray();
      var COMPARE_PARTIAL_FLAG = 1;
      var COMPARE_UNORDERED_FLAG = 2;
      var boolTag = "[object Boolean]";
      var dateTag = "[object Date]";
      var errorTag = "[object Error]";
      var mapTag = "[object Map]";
      var numberTag = "[object Number]";
      var regexpTag = "[object RegExp]";
      var setTag = "[object Set]";
      var stringTag = "[object String]";
      var symbolTag = "[object Symbol]";
      var arrayBufferTag = "[object ArrayBuffer]";
      var dataViewTag = "[object DataView]";
      var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
      var symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
      function equalByTag(object4, other, tag, bitmask, customizer, equalFunc, stack) {
        switch (tag) {
          case dataViewTag:
            if (object4.byteLength != other.byteLength || object4.byteOffset != other.byteOffset) {
              return false;
            }
            object4 = object4.buffer;
            other = other.buffer;
          case arrayBufferTag:
            if (object4.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object4), new Uint8Array2(other))) {
              return false;
            }
            return true;
          case boolTag:
          case dateTag:
          case numberTag:
            return eq(+object4, +other);
          case errorTag:
            return object4.name == other.name && object4.message == other.message;
          case regexpTag:
          case stringTag:
            return object4 == other + "";
          case mapTag:
            var convert = mapToArray;
          case setTag:
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
            convert || (convert = setToArray);
            if (object4.size != other.size && !isPartial) {
              return false;
            }
            var stacked = stack.get(object4);
            if (stacked) {
              return stacked == other;
            }
            bitmask |= COMPARE_UNORDERED_FLAG;
            stack.set(object4, other);
            var result2 = equalArrays(convert(object4), convert(other), bitmask, customizer, equalFunc, stack);
            stack["delete"](object4);
            return result2;
          case symbolTag:
            if (symbolValueOf) {
              return symbolValueOf.call(object4) == symbolValueOf.call(other);
            }
        }
        return false;
      }
      module2.exports = equalByTag;
    }
  });

  // node_modules/lodash/_arrayPush.js
  var require_arrayPush = __commonJS({
    "node_modules/lodash/_arrayPush.js"(exports2, module2) {
      function arrayPush(array4, values) {
        var index2 = -1, length = values.length, offset4 = array4.length;
        while (++index2 < length) {
          array4[offset4 + index2] = values[index2];
        }
        return array4;
      }
      module2.exports = arrayPush;
    }
  });

  // node_modules/lodash/_baseGetAllKeys.js
  var require_baseGetAllKeys = __commonJS({
    "node_modules/lodash/_baseGetAllKeys.js"(exports2, module2) {
      var arrayPush = require_arrayPush();
      var isArray2 = require_isArray();
      function baseGetAllKeys(object4, keysFunc, symbolsFunc) {
        var result2 = keysFunc(object4);
        return isArray2(object4) ? result2 : arrayPush(result2, symbolsFunc(object4));
      }
      module2.exports = baseGetAllKeys;
    }
  });

  // node_modules/lodash/_arrayFilter.js
  var require_arrayFilter = __commonJS({
    "node_modules/lodash/_arrayFilter.js"(exports2, module2) {
      function arrayFilter(array4, predicate) {
        var index2 = -1, length = array4 == null ? 0 : array4.length, resIndex = 0, result2 = [];
        while (++index2 < length) {
          var value = array4[index2];
          if (predicate(value, index2, array4)) {
            result2[resIndex++] = value;
          }
        }
        return result2;
      }
      module2.exports = arrayFilter;
    }
  });

  // node_modules/lodash/stubArray.js
  var require_stubArray = __commonJS({
    "node_modules/lodash/stubArray.js"(exports2, module2) {
      function stubArray() {
        return [];
      }
      module2.exports = stubArray;
    }
  });

  // node_modules/lodash/_getSymbols.js
  var require_getSymbols = __commonJS({
    "node_modules/lodash/_getSymbols.js"(exports2, module2) {
      var arrayFilter = require_arrayFilter();
      var stubArray = require_stubArray();
      var objectProto = Object.prototype;
      var propertyIsEnumerable = objectProto.propertyIsEnumerable;
      var nativeGetSymbols = Object.getOwnPropertySymbols;
      var getSymbols = !nativeGetSymbols ? stubArray : function(object4) {
        if (object4 == null) {
          return [];
        }
        object4 = Object(object4);
        return arrayFilter(nativeGetSymbols(object4), function(symbol) {
          return propertyIsEnumerable.call(object4, symbol);
        });
      };
      module2.exports = getSymbols;
    }
  });

  // node_modules/lodash/_baseTimes.js
  var require_baseTimes = __commonJS({
    "node_modules/lodash/_baseTimes.js"(exports2, module2) {
      function baseTimes(n4, iteratee) {
        var index2 = -1, result2 = Array(n4);
        while (++index2 < n4) {
          result2[index2] = iteratee(index2);
        }
        return result2;
      }
      module2.exports = baseTimes;
    }
  });

  // node_modules/lodash/_baseIsArguments.js
  var require_baseIsArguments = __commonJS({
    "node_modules/lodash/_baseIsArguments.js"(exports2, module2) {
      var baseGetTag = require_baseGetTag();
      var isObjectLike = require_isObjectLike();
      var argsTag = "[object Arguments]";
      function baseIsArguments(value) {
        return isObjectLike(value) && baseGetTag(value) == argsTag;
      }
      module2.exports = baseIsArguments;
    }
  });

  // node_modules/lodash/isArguments.js
  var require_isArguments = __commonJS({
    "node_modules/lodash/isArguments.js"(exports2, module2) {
      var baseIsArguments = require_baseIsArguments();
      var isObjectLike = require_isObjectLike();
      var objectProto = Object.prototype;
      var hasOwnProperty2 = objectProto.hasOwnProperty;
      var propertyIsEnumerable = objectProto.propertyIsEnumerable;
      var isArguments = baseIsArguments(function() {
        return arguments;
      }()) ? baseIsArguments : function(value) {
        return isObjectLike(value) && hasOwnProperty2.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
      };
      module2.exports = isArguments;
    }
  });

  // node_modules/lodash/stubFalse.js
  var require_stubFalse = __commonJS({
    "node_modules/lodash/stubFalse.js"(exports2, module2) {
      function stubFalse() {
        return false;
      }
      module2.exports = stubFalse;
    }
  });

  // node_modules/lodash/isBuffer.js
  var require_isBuffer = __commonJS({
    "node_modules/lodash/isBuffer.js"(exports2, module2) {
      var root3 = require_root();
      var stubFalse = require_stubFalse();
      var freeExports = typeof exports2 == "object" && exports2 && !exports2.nodeType && exports2;
      var freeModule = freeExports && typeof module2 == "object" && module2 && !module2.nodeType && module2;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var Buffer2 = moduleExports ? root3.Buffer : void 0;
      var nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0;
      var isBuffer2 = nativeIsBuffer || stubFalse;
      module2.exports = isBuffer2;
    }
  });

  // node_modules/lodash/_isIndex.js
  var require_isIndex = __commonJS({
    "node_modules/lodash/_isIndex.js"(exports2, module2) {
      var MAX_SAFE_INTEGER = 9007199254740991;
      var reIsUint = /^(?:0|[1-9]\d*)$/;
      function isIndex(value, length) {
        var type4 = typeof value;
        length = length == null ? MAX_SAFE_INTEGER : length;
        return !!length && (type4 == "number" || type4 != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
      }
      module2.exports = isIndex;
    }
  });

  // node_modules/lodash/isLength.js
  var require_isLength = __commonJS({
    "node_modules/lodash/isLength.js"(exports2, module2) {
      var MAX_SAFE_INTEGER = 9007199254740991;
      function isLength(value) {
        return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
      }
      module2.exports = isLength;
    }
  });

  // node_modules/lodash/_baseIsTypedArray.js
  var require_baseIsTypedArray = __commonJS({
    "node_modules/lodash/_baseIsTypedArray.js"(exports2, module2) {
      var baseGetTag = require_baseGetTag();
      var isLength = require_isLength();
      var isObjectLike = require_isObjectLike();
      var argsTag = "[object Arguments]";
      var arrayTag = "[object Array]";
      var boolTag = "[object Boolean]";
      var dateTag = "[object Date]";
      var errorTag = "[object Error]";
      var funcTag = "[object Function]";
      var mapTag = "[object Map]";
      var numberTag = "[object Number]";
      var objectTag = "[object Object]";
      var regexpTag = "[object RegExp]";
      var setTag = "[object Set]";
      var stringTag = "[object String]";
      var weakMapTag = "[object WeakMap]";
      var arrayBufferTag = "[object ArrayBuffer]";
      var dataViewTag = "[object DataView]";
      var float32Tag = "[object Float32Array]";
      var float64Tag = "[object Float64Array]";
      var int8Tag = "[object Int8Array]";
      var int16Tag = "[object Int16Array]";
      var int32Tag = "[object Int32Array]";
      var uint8Tag = "[object Uint8Array]";
      var uint8ClampedTag = "[object Uint8ClampedArray]";
      var uint16Tag = "[object Uint16Array]";
      var uint32Tag = "[object Uint32Array]";
      var typedArrayTags = {};
      typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
      typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
      function baseIsTypedArray(value) {
        return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
      }
      module2.exports = baseIsTypedArray;
    }
  });

  // node_modules/lodash/_baseUnary.js
  var require_baseUnary = __commonJS({
    "node_modules/lodash/_baseUnary.js"(exports2, module2) {
      function baseUnary(func) {
        return function(value) {
          return func(value);
        };
      }
      module2.exports = baseUnary;
    }
  });

  // node_modules/lodash/_nodeUtil.js
  var require_nodeUtil = __commonJS({
    "node_modules/lodash/_nodeUtil.js"(exports2, module2) {
      var freeGlobal = require_freeGlobal();
      var freeExports = typeof exports2 == "object" && exports2 && !exports2.nodeType && exports2;
      var freeModule = freeExports && typeof module2 == "object" && module2 && !module2.nodeType && module2;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var freeProcess = moduleExports && freeGlobal.process;
      var nodeUtil = function() {
        try {
          var types2 = freeModule && freeModule.require && freeModule.require("util").types;
          if (types2) {
            return types2;
          }
          return freeProcess && freeProcess.binding && freeProcess.binding("util");
        } catch (e3) {
        }
      }();
      module2.exports = nodeUtil;
    }
  });

  // node_modules/lodash/isTypedArray.js
  var require_isTypedArray = __commonJS({
    "node_modules/lodash/isTypedArray.js"(exports2, module2) {
      var baseIsTypedArray = require_baseIsTypedArray();
      var baseUnary = require_baseUnary();
      var nodeUtil = require_nodeUtil();
      var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
      var isTypedArray2 = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
      module2.exports = isTypedArray2;
    }
  });

  // node_modules/lodash/_arrayLikeKeys.js
  var require_arrayLikeKeys = __commonJS({
    "node_modules/lodash/_arrayLikeKeys.js"(exports2, module2) {
      var baseTimes = require_baseTimes();
      var isArguments = require_isArguments();
      var isArray2 = require_isArray();
      var isBuffer2 = require_isBuffer();
      var isIndex = require_isIndex();
      var isTypedArray2 = require_isTypedArray();
      var objectProto = Object.prototype;
      var hasOwnProperty2 = objectProto.hasOwnProperty;
      function arrayLikeKeys(value, inherited) {
        var isArr = isArray2(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer2(value), isType = !isArr && !isArg && !isBuff && isTypedArray2(value), skipIndexes = isArr || isArg || isBuff || isType, result2 = skipIndexes ? baseTimes(value.length, String) : [], length = result2.length;
        for (var key2 in value) {
          if ((inherited || hasOwnProperty2.call(value, key2)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
          (key2 == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
          isBuff && (key2 == "offset" || key2 == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
          isType && (key2 == "buffer" || key2 == "byteLength" || key2 == "byteOffset") || // Skip index properties.
          isIndex(key2, length)))) {
            result2.push(key2);
          }
        }
        return result2;
      }
      module2.exports = arrayLikeKeys;
    }
  });

  // node_modules/lodash/_isPrototype.js
  var require_isPrototype = __commonJS({
    "node_modules/lodash/_isPrototype.js"(exports2, module2) {
      var objectProto = Object.prototype;
      function isPrototype(value) {
        var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
        return value === proto;
      }
      module2.exports = isPrototype;
    }
  });

  // node_modules/lodash/_overArg.js
  var require_overArg = __commonJS({
    "node_modules/lodash/_overArg.js"(exports2, module2) {
      function overArg(func, transform) {
        return function(arg) {
          return func(transform(arg));
        };
      }
      module2.exports = overArg;
    }
  });

  // node_modules/lodash/_nativeKeys.js
  var require_nativeKeys = __commonJS({
    "node_modules/lodash/_nativeKeys.js"(exports2, module2) {
      var overArg = require_overArg();
      var nativeKeys = overArg(Object.keys, Object);
      module2.exports = nativeKeys;
    }
  });

  // node_modules/lodash/_baseKeys.js
  var require_baseKeys = __commonJS({
    "node_modules/lodash/_baseKeys.js"(exports2, module2) {
      var isPrototype = require_isPrototype();
      var nativeKeys = require_nativeKeys();
      var objectProto = Object.prototype;
      var hasOwnProperty2 = objectProto.hasOwnProperty;
      function baseKeys(object4) {
        if (!isPrototype(object4)) {
          return nativeKeys(object4);
        }
        var result2 = [];
        for (var key2 in Object(object4)) {
          if (hasOwnProperty2.call(object4, key2) && key2 != "constructor") {
            result2.push(key2);
          }
        }
        return result2;
      }
      module2.exports = baseKeys;
    }
  });

  // node_modules/lodash/isArrayLike.js
  var require_isArrayLike = __commonJS({
    "node_modules/lodash/isArrayLike.js"(exports2, module2) {
      var isFunction2 = require_isFunction();
      var isLength = require_isLength();
      function isArrayLike(value) {
        return value != null && isLength(value.length) && !isFunction2(value);
      }
      module2.exports = isArrayLike;
    }
  });

  // node_modules/lodash/keys.js
  var require_keys = __commonJS({
    "node_modules/lodash/keys.js"(exports2, module2) {
      var arrayLikeKeys = require_arrayLikeKeys();
      var baseKeys = require_baseKeys();
      var isArrayLike = require_isArrayLike();
      function keys2(object4) {
        return isArrayLike(object4) ? arrayLikeKeys(object4) : baseKeys(object4);
      }
      module2.exports = keys2;
    }
  });

  // node_modules/lodash/_getAllKeys.js
  var require_getAllKeys = __commonJS({
    "node_modules/lodash/_getAllKeys.js"(exports2, module2) {
      var baseGetAllKeys = require_baseGetAllKeys();
      var getSymbols = require_getSymbols();
      var keys2 = require_keys();
      function getAllKeys(object4) {
        return baseGetAllKeys(object4, keys2, getSymbols);
      }
      module2.exports = getAllKeys;
    }
  });

  // node_modules/lodash/_equalObjects.js
  var require_equalObjects = __commonJS({
    "node_modules/lodash/_equalObjects.js"(exports2, module2) {
      var getAllKeys = require_getAllKeys();
      var COMPARE_PARTIAL_FLAG = 1;
      var objectProto = Object.prototype;
      var hasOwnProperty2 = objectProto.hasOwnProperty;
      function equalObjects(object4, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object4), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
        if (objLength != othLength && !isPartial) {
          return false;
        }
        var index2 = objLength;
        while (index2--) {
          var key2 = objProps[index2];
          if (!(isPartial ? key2 in other : hasOwnProperty2.call(other, key2))) {
            return false;
          }
        }
        var objStacked = stack.get(object4);
        var othStacked = stack.get(other);
        if (objStacked && othStacked) {
          return objStacked == other && othStacked == object4;
        }
        var result2 = true;
        stack.set(object4, other);
        stack.set(other, object4);
        var skipCtor = isPartial;
        while (++index2 < objLength) {
          key2 = objProps[index2];
          var objValue = object4[key2], othValue = other[key2];
          if (customizer) {
            var compared = isPartial ? customizer(othValue, objValue, key2, other, object4, stack) : customizer(objValue, othValue, key2, object4, other, stack);
          }
          if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
            result2 = false;
            break;
          }
          skipCtor || (skipCtor = key2 == "constructor");
        }
        if (result2 && !skipCtor) {
          var objCtor = object4.constructor, othCtor = other.constructor;
          if (objCtor != othCtor && ("constructor" in object4 && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
            result2 = false;
          }
        }
        stack["delete"](object4);
        stack["delete"](other);
        return result2;
      }
      module2.exports = equalObjects;
    }
  });

  // node_modules/lodash/_DataView.js
  var require_DataView = __commonJS({
    "node_modules/lodash/_DataView.js"(exports2, module2) {
      var getNative = require_getNative();
      var root3 = require_root();
      var DataView = getNative(root3, "DataView");
      module2.exports = DataView;
    }
  });

  // node_modules/lodash/_Promise.js
  var require_Promise = __commonJS({
    "node_modules/lodash/_Promise.js"(exports2, module2) {
      var getNative = require_getNative();
      var root3 = require_root();
      var Promise2 = getNative(root3, "Promise");
      module2.exports = Promise2;
    }
  });

  // node_modules/lodash/_Set.js
  var require_Set = __commonJS({
    "node_modules/lodash/_Set.js"(exports2, module2) {
      var getNative = require_getNative();
      var root3 = require_root();
      var Set2 = getNative(root3, "Set");
      module2.exports = Set2;
    }
  });

  // node_modules/lodash/_WeakMap.js
  var require_WeakMap = __commonJS({
    "node_modules/lodash/_WeakMap.js"(exports2, module2) {
      var getNative = require_getNative();
      var root3 = require_root();
      var WeakMap2 = getNative(root3, "WeakMap");
      module2.exports = WeakMap2;
    }
  });

  // node_modules/lodash/_getTag.js
  var require_getTag = __commonJS({
    "node_modules/lodash/_getTag.js"(exports2, module2) {
      var DataView = require_DataView();
      var Map2 = require_Map();
      var Promise2 = require_Promise();
      var Set2 = require_Set();
      var WeakMap2 = require_WeakMap();
      var baseGetTag = require_baseGetTag();
      var toSource = require_toSource();
      var mapTag = "[object Map]";
      var objectTag = "[object Object]";
      var promiseTag = "[object Promise]";
      var setTag = "[object Set]";
      var weakMapTag = "[object WeakMap]";
      var dataViewTag = "[object DataView]";
      var dataViewCtorString = toSource(DataView);
      var mapCtorString = toSource(Map2);
      var promiseCtorString = toSource(Promise2);
      var setCtorString = toSource(Set2);
      var weakMapCtorString = toSource(WeakMap2);
      var getTag = baseGetTag;
      if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
        getTag = function(value) {
          var result2 = baseGetTag(value), Ctor = result2 == objectTag ? value.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : "";
          if (ctorString) {
            switch (ctorString) {
              case dataViewCtorString:
                return dataViewTag;
              case mapCtorString:
                return mapTag;
              case promiseCtorString:
                return promiseTag;
              case setCtorString:
                return setTag;
              case weakMapCtorString:
                return weakMapTag;
            }
          }
          return result2;
        };
      }
      module2.exports = getTag;
    }
  });

  // node_modules/lodash/_baseIsEqualDeep.js
  var require_baseIsEqualDeep = __commonJS({
    "node_modules/lodash/_baseIsEqualDeep.js"(exports2, module2) {
      var Stack = require_Stack();
      var equalArrays = require_equalArrays();
      var equalByTag = require_equalByTag();
      var equalObjects = require_equalObjects();
      var getTag = require_getTag();
      var isArray2 = require_isArray();
      var isBuffer2 = require_isBuffer();
      var isTypedArray2 = require_isTypedArray();
      var COMPARE_PARTIAL_FLAG = 1;
      var argsTag = "[object Arguments]";
      var arrayTag = "[object Array]";
      var objectTag = "[object Object]";
      var objectProto = Object.prototype;
      var hasOwnProperty2 = objectProto.hasOwnProperty;
      function baseIsEqualDeep(object4, other, bitmask, customizer, equalFunc, stack) {
        var objIsArr = isArray2(object4), othIsArr = isArray2(other), objTag = objIsArr ? arrayTag : getTag(object4), othTag = othIsArr ? arrayTag : getTag(other);
        objTag = objTag == argsTag ? objectTag : objTag;
        othTag = othTag == argsTag ? objectTag : othTag;
        var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
        if (isSameTag && isBuffer2(object4)) {
          if (!isBuffer2(other)) {
            return false;
          }
          objIsArr = true;
          objIsObj = false;
        }
        if (isSameTag && !objIsObj) {
          stack || (stack = new Stack());
          return objIsArr || isTypedArray2(object4) ? equalArrays(object4, other, bitmask, customizer, equalFunc, stack) : equalByTag(object4, other, objTag, bitmask, customizer, equalFunc, stack);
        }
        if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
          var objIsWrapped = objIsObj && hasOwnProperty2.call(object4, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty2.call(other, "__wrapped__");
          if (objIsWrapped || othIsWrapped) {
            var objUnwrapped = objIsWrapped ? object4.value() : object4, othUnwrapped = othIsWrapped ? other.value() : other;
            stack || (stack = new Stack());
            return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
          }
        }
        if (!isSameTag) {
          return false;
        }
        stack || (stack = new Stack());
        return equalObjects(object4, other, bitmask, customizer, equalFunc, stack);
      }
      module2.exports = baseIsEqualDeep;
    }
  });

  // node_modules/lodash/_baseIsEqual.js
  var require_baseIsEqual = __commonJS({
    "node_modules/lodash/_baseIsEqual.js"(exports2, module2) {
      var baseIsEqualDeep = require_baseIsEqualDeep();
      var isObjectLike = require_isObjectLike();
      function baseIsEqual(value, other, bitmask, customizer, stack) {
        if (value === other) {
          return true;
        }
        if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
          return value !== value && other !== other;
        }
        return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
      }
      module2.exports = baseIsEqual;
    }
  });

  // node_modules/lodash/isEqual.js
  var require_isEqual = __commonJS({
    "node_modules/lodash/isEqual.js"(exports2, module2) {
      var baseIsEqual = require_baseIsEqual();
      function isEqual4(value, other) {
        return baseIsEqual(value, other);
      }
      module2.exports = isEqual4;
    }
  });

  // node_modules/toggle-selection/index.js
  var require_toggle_selection = __commonJS({
    "node_modules/toggle-selection/index.js"(exports2, module2) {
      module2.exports = function() {
        var selection = document.getSelection();
        if (!selection.rangeCount) {
          return function() {
          };
        }
        var active = document.activeElement;
        var ranges = [];
        for (var i3 = 0; i3 < selection.rangeCount; i3++) {
          ranges.push(selection.getRangeAt(i3));
        }
        switch (active.tagName.toUpperCase()) {
          case "INPUT":
          case "TEXTAREA":
            active.blur();
            break;
          default:
            active = null;
            break;
        }
        selection.removeAllRanges();
        return function() {
          selection.type === "Caret" && selection.removeAllRanges();
          if (!selection.rangeCount) {
            ranges.forEach(function(range3) {
              selection.addRange(range3);
            });
          }
          active && active.focus();
        };
      };
    }
  });

  // node_modules/copy-to-clipboard/index.js
  var require_copy_to_clipboard = __commonJS({
    "node_modules/copy-to-clipboard/index.js"(exports2, module2) {
      "use strict";
      var deselectCurrent = require_toggle_selection();
      var clipboardToIE11Formatting = {
        "text/plain": "Text",
        "text/html": "Url",
        "default": "Text"
      };
      var defaultMessage = "Copy to clipboard: #{key}, Enter";
      function format3(message) {
        var copyKey = (/mac os x/i.test(navigator.userAgent) ? "\u2318" : "Ctrl") + "+C";
        return message.replace(/#{\s*key\s*}/g, copyKey);
      }
      function copy3(text, options) {
        var debug, message, reselectPrevious, range3, selection, mark, success = false;
        if (!options) {
          options = {};
        }
        debug = options.debug || false;
        try {
          reselectPrevious = deselectCurrent();
          range3 = document.createRange();
          selection = document.getSelection();
          mark = document.createElement("span");
          mark.textContent = text;
          mark.ariaHidden = "true";
          mark.style.all = "unset";
          mark.style.position = "fixed";
          mark.style.top = 0;
          mark.style.clip = "rect(0, 0, 0, 0)";
          mark.style.whiteSpace = "pre";
          mark.style.webkitUserSelect = "text";
          mark.style.MozUserSelect = "text";
          mark.style.msUserSelect = "text";
          mark.style.userSelect = "text";
          mark.addEventListener("copy", function(e3) {
            e3.stopPropagation();
            if (options.format) {
              e3.preventDefault();
              if (typeof e3.clipboardData === "undefined") {
                debug && console.warn("unable to use e.clipboardData");
                debug && console.warn("trying IE specific stuff");
                window.clipboardData.clearData();
                var format4 = clipboardToIE11Formatting[options.format] || clipboardToIE11Formatting["default"];
                window.clipboardData.setData(format4, text);
              } else {
                e3.clipboardData.clearData();
                e3.clipboardData.setData(options.format, text);
              }
            }
            if (options.onCopy) {
              e3.preventDefault();
              options.onCopy(e3.clipboardData);
            }
          });
          document.body.appendChild(mark);
          range3.selectNodeContents(mark);
          selection.addRange(range3);
          var successful = document.execCommand("copy");
          if (!successful) {
            throw new Error("copy command was unsuccessful");
          }
          success = true;
        } catch (err) {
          debug && console.error("unable to copy using execCommand: ", err);
          debug && console.warn("trying IE specific stuff");
          try {
            window.clipboardData.setData(options.format || "text", text);
            options.onCopy && options.onCopy(window.clipboardData);
            success = true;
          } catch (err2) {
            debug && console.error("unable to copy using clipboardData: ", err2);
            debug && console.error("falling back to prompt");
            message = format3("message" in options ? options.message : defaultMessage);
            window.prompt(message, text);
          }
        } finally {
          if (selection) {
            if (typeof selection.removeRange == "function") {
              selection.removeRange(range3);
            } else {
              selection.removeAllRanges();
            }
          }
          if (mark) {
            document.body.removeChild(mark);
          }
          reselectPrevious();
        }
        return success;
      }
      module2.exports = copy3;
    }
  });

  // node_modules/insert-css/index.js
  var require_insert_css = __commonJS({
    "node_modules/insert-css/index.js"(exports2, module2) {
      var containers = [];
      var styleElements = [];
      var usage = "insert-css: You need to provide a CSS string. Usage: insertCss(cssString[, options]).";
      function insertCss2(css2, options) {
        options = options || {};
        if (css2 === void 0) {
          throw new Error(usage);
        }
        var position = options.prepend === true ? "prepend" : "append";
        var container = options.container !== void 0 ? options.container : document.querySelector("head");
        var containerId = containers.indexOf(container);
        if (containerId === -1) {
          containerId = containers.push(container) - 1;
          styleElements[containerId] = {};
        }
        var styleElement;
        if (styleElements[containerId] !== void 0 && styleElements[containerId][position] !== void 0) {
          styleElement = styleElements[containerId][position];
        } else {
          styleElement = styleElements[containerId][position] = createStyleElement();
          if (position === "prepend") {
            container.insertBefore(styleElement, container.childNodes[0]);
          } else {
            container.appendChild(styleElement);
          }
        }
        if (css2.charCodeAt(0) === 65279) {
          css2 = css2.substr(1, css2.length);
        }
        if (styleElement.styleSheet) {
          styleElement.styleSheet.cssText += css2;
        } else {
          styleElement.textContent += css2;
        }
        return styleElement;
      }
      function createStyleElement() {
        var styleElement = document.createElement("style");
        styleElement.setAttribute("type", "text/css");
        return styleElement;
      }
      module2.exports = insertCss2;
      module2.exports.insertCss = insertCss2;
    }
  });

  // node_modules/globalthis/implementation.browser.js
  var require_implementation_browser = __commonJS({
    "node_modules/globalthis/implementation.browser.js"(exports2, module2) {
      "use strict";
      if (typeof self !== "undefined") {
        module2.exports = self;
      } else if (typeof window !== "undefined") {
        module2.exports = window;
      } else {
        module2.exports = Function("return this")();
      }
    }
  });

  // node_modules/globalthis/polyfill.js
  var require_polyfill = __commonJS({
    "node_modules/globalthis/polyfill.js"(exports2, module2) {
      "use strict";
      var implementation = require_implementation_browser();
      module2.exports = function getPolyfill() {
        if (typeof global !== "object" || !global || global.Math !== Math || global.Array !== Array) {
          return implementation;
        }
        return global;
      };
    }
  });

  // node_modules/qj/lib/index.js
  var require_lib = __commonJS({
    "node_modules/qj/lib/index.js"(exports2, module2) {
      (function() {
        var QJ, rreturn, rtrim;
        QJ = function(selector) {
          if (QJ.isDOMElement(selector)) {
            return selector;
          }
          return document.querySelectorAll(selector);
        };
        QJ.isDOMElement = function(el) {
          return el && el.nodeName != null;
        };
        rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;
        QJ.trim = function(text) {
          if (text === null) {
            return "";
          } else {
            return (text + "").replace(rtrim, "");
          }
        };
        rreturn = /\r/g;
        QJ.val = function(el, val) {
          var ret;
          if (arguments.length > 1) {
            return el.value = val;
          } else {
            ret = el.value;
            if (typeof ret === "string") {
              return ret.replace(rreturn, "");
            } else {
              if (ret === null) {
                return "";
              } else {
                return ret;
              }
            }
          }
        };
        QJ.preventDefault = function(eventObject) {
          if (typeof eventObject.preventDefault === "function") {
            eventObject.preventDefault();
            return;
          }
          eventObject.returnValue = false;
          return false;
        };
        QJ.normalizeEvent = function(e3) {
          var original;
          original = e3;
          e3 = {
            which: original.which != null ? original.which : void 0,
            target: original.target || original.srcElement,
            preventDefault: function() {
              return QJ.preventDefault(original);
            },
            originalEvent: original,
            data: original.data || original.detail
          };
          if (e3.which == null) {
            e3.which = original.charCode != null ? original.charCode : original.keyCode;
          }
          return e3;
        };
        QJ.on = function(element, eventName, callback) {
          var el, i3, j2, len, len1, multEventName, originalCallback, ref;
          if (element.length) {
            for (i3 = 0, len = element.length; i3 < len; i3++) {
              el = element[i3];
              QJ.on(el, eventName, callback);
            }
            return;
          }
          if (eventName.match(" ")) {
            ref = eventName.split(" ");
            for (j2 = 0, len1 = ref.length; j2 < len1; j2++) {
              multEventName = ref[j2];
              QJ.on(element, multEventName, callback);
            }
            return;
          }
          originalCallback = callback;
          callback = function(e3) {
            e3 = QJ.normalizeEvent(e3);
            return originalCallback(e3);
          };
          if (element.addEventListener) {
            return element.addEventListener(eventName, callback, false);
          }
          if (element.attachEvent) {
            eventName = "on" + eventName;
            return element.attachEvent(eventName, callback);
          }
          element["on" + eventName] = callback;
        };
        QJ.addClass = function(el, className) {
          var e3;
          if (el.length) {
            return function() {
              var i3, len, results;
              results = [];
              for (i3 = 0, len = el.length; i3 < len; i3++) {
                e3 = el[i3];
                results.push(QJ.addClass(e3, className));
              }
              return results;
            }();
          }
          if (el.classList) {
            return el.classList.add(className);
          } else {
            return el.className += " " + className;
          }
        };
        QJ.hasClass = function(el, className) {
          var e3, hasClass, i3, len;
          if (el.length) {
            hasClass = true;
            for (i3 = 0, len = el.length; i3 < len; i3++) {
              e3 = el[i3];
              hasClass = hasClass && QJ.hasClass(e3, className);
            }
            return hasClass;
          }
          if (el.classList) {
            return el.classList.contains(className);
          } else {
            return new RegExp("(^| )" + className + "( |$)", "gi").test(el.className);
          }
        };
        QJ.removeClass = function(el, className) {
          var cls, e3, i3, len, ref, results;
          if (el.length) {
            return function() {
              var i4, len2, results2;
              results2 = [];
              for (i4 = 0, len2 = el.length; i4 < len2; i4++) {
                e3 = el[i4];
                results2.push(QJ.removeClass(e3, className));
              }
              return results2;
            }();
          }
          if (el.classList) {
            ref = className.split(" ");
            results = [];
            for (i3 = 0, len = ref.length; i3 < len; i3++) {
              cls = ref[i3];
              results.push(el.classList.remove(cls));
            }
            return results;
          } else {
            return el.className = el.className.replace(new RegExp("(^|\\b)" + className.split(" ").join("|") + "(\\b|$)", "gi"), " ");
          }
        };
        QJ.toggleClass = function(el, className, bool) {
          var e3;
          if (el.length) {
            return function() {
              var i3, len, results;
              results = [];
              for (i3 = 0, len = el.length; i3 < len; i3++) {
                e3 = el[i3];
                results.push(QJ.toggleClass(e3, className, bool));
              }
              return results;
            }();
          }
          if (bool) {
            if (!QJ.hasClass(el, className)) {
              return QJ.addClass(el, className);
            }
          } else {
            return QJ.removeClass(el, className);
          }
        };
        QJ.append = function(el, toAppend) {
          var e3;
          if (el.length) {
            return function() {
              var i3, len, results;
              results = [];
              for (i3 = 0, len = el.length; i3 < len; i3++) {
                e3 = el[i3];
                results.push(QJ.append(e3, toAppend));
              }
              return results;
            }();
          }
          return el.insertAdjacentHTML("beforeend", toAppend);
        };
        QJ.find = function(el, selector) {
          if (el instanceof NodeList || el instanceof Array) {
            el = el[0];
          }
          return el.querySelectorAll(selector);
        };
        QJ.trigger = function(el, name, data) {
          var e3, error2, ev;
          try {
            ev = new CustomEvent(name, {
              detail: data
            });
          } catch (error3) {
            e3 = error3;
            ev = document.createEvent("CustomEvent");
            if (ev.initCustomEvent) {
              ev.initCustomEvent(name, true, true, data);
            } else {
              ev.initEvent(name, true, true, data);
            }
          }
          return el.dispatchEvent(ev);
        };
        module2.exports = QJ;
      }).call(exports2);
    }
  });

  // node_modules/payment/lib/index.js
  var require_lib2 = __commonJS({
    "node_modules/payment/lib/index.js"(exports2, module2) {
      (function() {
        var Payment2, QJ, cardFromNumber, cardFromType, cards, cursorSafeAssignValue, defaultFormat, formatBackCardNumber, formatBackExpiry, formatCardNumber, formatExpiry, formatForwardExpiry, formatForwardSlash, formatMonthExpiry, globalThis2, hasTextSelected, luhnCheck, reFormatCardNumber, restrictCVC, restrictCardNumber, restrictCombinedExpiry, restrictExpiry, restrictMonthExpiry, restrictNumeric, restrictYearExpiry, setCardType, indexOf = [].indexOf || function(item) {
          for (var i3 = 0, l2 = this.length; i3 < l2; i3++) {
            if (i3 in this && this[i3] === item)
              return i3;
          }
          return -1;
        };
        globalThis2 = require_polyfill()();
        QJ = require_lib();
        defaultFormat = /(\d{1,4})/g;
        cards = [
          {
            type: "amex",
            pattern: /^3[47]/,
            format: /(\d{1,4})(\d{1,6})?(\d{1,5})?/,
            length: [15],
            cvcLength: [4],
            luhn: true
          },
          {
            type: "dankort",
            pattern: /^5019/,
            format: defaultFormat,
            length: [16],
            cvcLength: [3],
            luhn: true
          },
          {
            type: "dinersclub",
            pattern: /^(36|38|30[0-5])/,
            format: /(\d{1,4})(\d{1,6})?(\d{1,4})?/,
            length: [14],
            cvcLength: [3],
            luhn: true
          },
          {
            type: "discover",
            pattern: /^(6011|65|64[4-9]|622)/,
            format: defaultFormat,
            length: [16],
            cvcLength: [3],
            luhn: true
          },
          {
            type: "elo",
            pattern: /^401178|^401179|^431274|^438935|^451416|^457393|^457631|^457632|^504175|^627780|^636297|^636369|^636368|^(506699|5067[0-6]\d|50677[0-8])|^(50900\d|5090[1-9]\d|509[1-9]\d{2})|^65003[1-3]|^(65003[5-9]|65004\d|65005[0-1])|^(65040[5-9]|6504[1-3]\d)|^(65048[5-9]|65049\d|6505[0-2]\d|65053[0-8])|^(65054[1-9]|6505[5-8]\d|65059[0-8])|^(65070\d|65071[0-8])|^65072[0-7]|^(65090[1-9]|65091\d|650920)|^(65165[2-9]|6516[6-7]\d)|^(65500\d|65501\d)|^(65502[1-9]|6550[3-4]\d|65505[0-8])|^(65092[1-9]|65097[0-8])/,
            format: defaultFormat,
            length: [16],
            cvcLength: [3],
            luhn: true
          },
          {
            type: "hipercard",
            pattern: /^(384100|384140|384160|606282|637095|637568|60(?!11))/,
            format: defaultFormat,
            length: [14, 15, 16, 17, 18, 19],
            cvcLength: [3],
            luhn: true
          },
          {
            type: "jcb",
            pattern: /^(308[8-9]|309[0-3]|3094[0]{4}|309[6-9]|310[0-2]|311[2-9]|3120|315[8-9]|333[7-9]|334[0-9]|35)/,
            format: defaultFormat,
            length: [16, 19],
            cvcLength: [3],
            luhn: true
          },
          {
            type: "laser",
            pattern: /^(6706|6771|6709)/,
            format: defaultFormat,
            length: [16, 17, 18, 19],
            cvcLength: [3],
            luhn: true
          },
          {
            type: "maestro",
            pattern: /^(50|5[6-9]|6007|6220|6304|6703|6708|6759|676[1-3])/,
            format: defaultFormat,
            length: [12, 13, 14, 15, 16, 17, 18, 19],
            cvcLength: [3],
            luhn: true
          },
          {
            type: "mastercard",
            pattern: /^(5[1-5]|677189)|^(222[1-9]|2[3-6]\d{2}|27[0-1]\d|2720)/,
            format: defaultFormat,
            length: [16],
            cvcLength: [3],
            luhn: true
          },
          {
            type: "mir",
            pattern: /^220[0-4][0-9][0-9]\d{10}$/,
            format: defaultFormat,
            length: [16],
            cvcLength: [3],
            luhn: true
          },
          {
            type: "troy",
            pattern: /^9792/,
            format: defaultFormat,
            length: [16],
            cvcLength: [3],
            luhn: true
          },
          {
            type: "unionpay",
            pattern: /^62/,
            format: defaultFormat,
            length: [16, 17, 18, 19],
            cvcLength: [3],
            luhn: false
          },
          {
            type: "visaelectron",
            pattern: /^4(026|17500|405|508|844|91[37])/,
            format: defaultFormat,
            length: [16],
            cvcLength: [3],
            luhn: true
          },
          {
            type: "visa",
            pattern: /^4/,
            format: defaultFormat,
            length: [13, 16],
            cvcLength: [3],
            luhn: true
          }
        ];
        cardFromNumber = function(num) {
          var card, foundCard, j2, len, match2;
          num = (num + "").replace(/\D/g, "");
          foundCard = void 0;
          for (j2 = 0, len = cards.length; j2 < len; j2++) {
            card = cards[j2];
            if (match2 = num.match(card.pattern)) {
              if (!foundCard || match2[0].length > foundCard[1][0].length) {
                foundCard = [card, match2];
              }
            }
          }
          return foundCard && foundCard[0];
        };
        cardFromType = function(type4) {
          var card, j2, len;
          for (j2 = 0, len = cards.length; j2 < len; j2++) {
            card = cards[j2];
            if (card.type === type4) {
              return card;
            }
          }
        };
        luhnCheck = function(num) {
          var digit, digits, j2, len, odd, sum;
          odd = true;
          sum = 0;
          digits = (num + "").split("").reverse();
          for (j2 = 0, len = digits.length; j2 < len; j2++) {
            digit = digits[j2];
            digit = parseInt(digit, 10);
            if (odd = !odd) {
              digit *= 2;
            }
            if (digit > 9) {
              digit -= 9;
            }
            sum += digit;
          }
          return sum % 10 === 0;
        };
        hasTextSelected = function(target) {
          var e3, ref;
          try {
            if (target.selectionStart != null && target.selectionStart !== target.selectionEnd) {
              return true;
            }
            if ((typeof document !== "undefined" && document !== null ? (ref = document.selection) != null ? ref.createRange : void 0 : void 0) != null) {
              if (document.selection.createRange().text) {
                return true;
              }
            }
          } catch (error2) {
            e3 = error2;
          }
          return false;
        };
        reFormatCardNumber = function(e3) {
          return setTimeout(function(_this) {
            return function() {
              var target, value;
              target = e3.target;
              value = QJ.val(target);
              value = Payment2.fns.formatCardNumber(value);
              cursorSafeAssignValue(target, value);
              return QJ.trigger(target, "change");
            };
          }(this));
        };
        formatCardNumber = function(maxLength) {
          return function(e3) {
            var card, digit, i3, j2, len, length, re, target, upperLength, upperLengths, value;
            if (e3.which > 0) {
              digit = String.fromCharCode(e3.which);
              value = QJ.val(e3.target) + digit;
            } else {
              digit = e3.data;
              value = QJ.val(e3.target);
            }
            if (!/^\d+$/.test(digit)) {
              return;
            }
            target = e3.target;
            card = cardFromNumber(value);
            length = value.replace(/\D/g, "").length;
            upperLengths = [16];
            if (card) {
              upperLengths = card.length;
            }
            if (maxLength) {
              upperLengths = upperLengths.filter(function(x2) {
                return x2 <= maxLength;
              });
            }
            for (i3 = j2 = 0, len = upperLengths.length; j2 < len; i3 = ++j2) {
              upperLength = upperLengths[i3];
              if (length >= upperLength && upperLengths[i3 + 1]) {
                continue;
              }
              if (length >= upperLength) {
                return;
              }
            }
            if (hasTextSelected(target)) {
              return;
            }
            if (card && card.type === "amex") {
              re = /^(\d{4}|\d{4}\s\d{6})$/;
            } else {
              re = /(?:^|\s)(\d{4})$/;
            }
            value = value.substring(0, value.length - 1);
            if (re.test(value)) {
              e3.preventDefault();
              QJ.val(target, value + " " + digit);
              return QJ.trigger(target, "change");
            }
          };
        };
        formatBackCardNumber = function(e3) {
          var target, value;
          target = e3.target;
          value = QJ.val(target);
          if (e3.meta) {
            return;
          }
          if (e3.which !== 8) {
            return;
          }
          if (hasTextSelected(target)) {
            return;
          }
          if (/\d\s$/.test(value)) {
            e3.preventDefault();
            QJ.val(target, value.replace(/\d\s$/, ""));
            return QJ.trigger(target, "change");
          } else if (/\s\d?$/.test(value)) {
            e3.preventDefault();
            QJ.val(target, value.replace(/\s\d?$/, ""));
            return QJ.trigger(target, "change");
          }
        };
        formatExpiry = function(e3) {
          var digit, target, val;
          target = e3.target;
          if (e3.which > 0) {
            digit = String.fromCharCode(e3.which);
            val = QJ.val(target) + digit;
          } else {
            digit = e3.data;
            val = QJ.val(target);
          }
          if (!/^\d+$/.test(digit)) {
            return;
          }
          if (/^\d$/.test(val) && (val !== "0" && val !== "1")) {
            e3.preventDefault();
            QJ.val(target, "0" + val + " / ");
            return QJ.trigger(target, "change");
          } else if (/^\d\d$/.test(val)) {
            e3.preventDefault();
            QJ.val(target, val + " / ");
            return QJ.trigger(target, "change");
          }
        };
        formatMonthExpiry = function(e3) {
          var digit, target, val;
          digit = String.fromCharCode(e3.which);
          if (!/^\d+$/.test(digit)) {
            return;
          }
          target = e3.target;
          val = QJ.val(target) + digit;
          if (/^\d$/.test(val) && (val !== "0" && val !== "1")) {
            e3.preventDefault();
            QJ.val(target, "0" + val);
            return QJ.trigger(target, "change");
          } else if (/^\d\d$/.test(val)) {
            e3.preventDefault();
            QJ.val(target, "" + val);
            return QJ.trigger(target, "change");
          }
        };
        formatForwardExpiry = function(e3) {
          var digit, target, val;
          digit = String.fromCharCode(e3.which);
          if (!/^\d+$/.test(digit)) {
            return;
          }
          target = e3.target;
          val = QJ.val(target);
          if (/^\d\d$/.test(val)) {
            QJ.val(target, val + " / ");
            return QJ.trigger(target, "change");
          }
        };
        formatForwardSlash = function(e3) {
          var slash, target, val;
          slash = String.fromCharCode(e3.which);
          if (slash !== "/") {
            return;
          }
          target = e3.target;
          val = QJ.val(target);
          if (/^\d$/.test(val) && val !== "0") {
            QJ.val(target, "0" + val + " / ");
            return QJ.trigger(target, "change");
          }
        };
        formatBackExpiry = function(e3) {
          var target, value;
          if (e3.metaKey) {
            return;
          }
          target = e3.target;
          value = QJ.val(target);
          if (e3.which !== 8) {
            return;
          }
          if (hasTextSelected(target)) {
            return;
          }
          if (/\d(\s|\/)+$/.test(value)) {
            e3.preventDefault();
            QJ.val(target, value.replace(/\d(\s|\/)*$/, ""));
            return QJ.trigger(target, "change");
          } else if (/\s\/\s?\d?$/.test(value)) {
            e3.preventDefault();
            QJ.val(target, value.replace(/\s\/\s?\d?$/, ""));
            return QJ.trigger(target, "change");
          }
        };
        restrictNumeric = function(e3) {
          var input;
          if (e3.metaKey || e3.ctrlKey) {
            return true;
          }
          if (e3.which === 32) {
            return e3.preventDefault();
          }
          if (e3.which === 0) {
            return true;
          }
          if (e3.which < 33) {
            return true;
          }
          input = String.fromCharCode(e3.which);
          if (!/[\d\s]/.test(input)) {
            return e3.preventDefault();
          }
        };
        restrictCardNumber = function(maxLength) {
          return function(e3) {
            var card, digit, length, target, value;
            target = e3.target;
            digit = String.fromCharCode(e3.which);
            if (!/^\d+$/.test(digit)) {
              return;
            }
            if (hasTextSelected(target)) {
              return;
            }
            value = (QJ.val(target) + digit).replace(/\D/g, "");
            card = cardFromNumber(value);
            length = 16;
            if (card) {
              length = card.length[card.length.length - 1];
            }
            if (maxLength) {
              length = Math.min(length, maxLength);
            }
            if (!(value.length <= length)) {
              return e3.preventDefault();
            }
          };
        };
        restrictExpiry = function(e3, length) {
          var digit, target, value;
          target = e3.target;
          digit = String.fromCharCode(e3.which);
          if (!/^\d+$/.test(digit)) {
            return;
          }
          if (hasTextSelected(target)) {
            return;
          }
          value = QJ.val(target) + digit;
          value = value.replace(/\D/g, "");
          if (value.length > length) {
            return e3.preventDefault();
          }
        };
        restrictCombinedExpiry = function(e3) {
          return restrictExpiry(e3, 6);
        };
        restrictMonthExpiry = function(e3) {
          return restrictExpiry(e3, 2);
        };
        restrictYearExpiry = function(e3) {
          return restrictExpiry(e3, 4);
        };
        restrictCVC = function(e3) {
          var digit, target, val;
          target = e3.target;
          digit = String.fromCharCode(e3.which);
          if (!/^\d+$/.test(digit)) {
            return;
          }
          if (hasTextSelected(target)) {
            return;
          }
          val = QJ.val(target) + digit;
          if (!(val.length <= 4)) {
            return e3.preventDefault();
          }
        };
        setCardType = function(e3) {
          var allTypes, card, cardType, target, val;
          target = e3.target;
          val = QJ.val(target);
          cardType = Payment2.fns.cardType(val) || "unknown";
          if (!QJ.hasClass(target, cardType)) {
            allTypes = function() {
              var j2, len, results;
              results = [];
              for (j2 = 0, len = cards.length; j2 < len; j2++) {
                card = cards[j2];
                results.push(card.type);
              }
              return results;
            }();
            QJ.removeClass(target, "unknown");
            QJ.removeClass(target, allTypes.join(" "));
            QJ.addClass(target, cardType);
            QJ.toggleClass(target, "identified", cardType !== "unknown");
            return QJ.trigger(target, "payment.cardType", cardType);
          }
        };
        cursorSafeAssignValue = function(target, value) {
          var selectionEnd;
          selectionEnd = target.selectionEnd;
          QJ.val(target, value);
          if (selectionEnd) {
            return target.selectionEnd = selectionEnd;
          }
        };
        Payment2 = function() {
          function Payment3() {
          }
          Payment3.J = QJ;
          Payment3.fns = {
            cardExpiryVal: function(value) {
              var month, prefix2, ref, year;
              value = value.replace(/\s/g, "");
              ref = value.split("/", 2), month = ref[0], year = ref[1];
              if ((year != null ? year.length : void 0) === 2 && /^\d+$/.test(year)) {
                prefix2 = (/* @__PURE__ */ new Date()).getFullYear();
                prefix2 = prefix2.toString().slice(0, 2);
                year = prefix2 + year;
              }
              month = parseInt(month, 10);
              year = parseInt(year, 10);
              return {
                month,
                year
              };
            },
            validateCardNumber: function(num) {
              var card, ref;
              num = (num + "").replace(/\s+|-/g, "");
              if (!/^\d+$/.test(num)) {
                return false;
              }
              card = cardFromNumber(num);
              if (!card) {
                return false;
              }
              return (ref = num.length, indexOf.call(card.length, ref) >= 0) && (card.luhn === false || luhnCheck(num));
            },
            validateCardExpiry: function(month, year) {
              var currentTime, expiry, prefix2, ref, ref1;
              if (typeof month === "object" && "month" in month) {
                ref = month, month = ref.month, year = ref.year;
              } else if (typeof month === "string" && indexOf.call(month, "/") >= 0) {
                ref1 = Payment3.fns.cardExpiryVal(month), month = ref1.month, year = ref1.year;
              }
              if (!(month && year)) {
                return false;
              }
              month = QJ.trim(month);
              year = QJ.trim(year);
              if (!/^\d+$/.test(month)) {
                return false;
              }
              if (!/^\d+$/.test(year)) {
                return false;
              }
              month = parseInt(month, 10);
              if (!(month && month <= 12)) {
                return false;
              }
              if (year.length === 2) {
                prefix2 = (/* @__PURE__ */ new Date()).getFullYear();
                prefix2 = prefix2.toString().slice(0, 2);
                year = prefix2 + year;
              }
              expiry = new Date(year, month);
              currentTime = /* @__PURE__ */ new Date();
              expiry.setMonth(expiry.getMonth() - 1);
              expiry.setMonth(expiry.getMonth() + 1, 1);
              return expiry > currentTime;
            },
            validateCardCVC: function(cvc, type4) {
              var ref, ref1;
              cvc = QJ.trim(cvc);
              if (!/^\d+$/.test(cvc)) {
                return false;
              }
              if (type4 && cardFromType(type4)) {
                return ref = cvc.length, indexOf.call((ref1 = cardFromType(type4)) != null ? ref1.cvcLength : void 0, ref) >= 0;
              } else {
                return cvc.length >= 3 && cvc.length <= 4;
              }
            },
            cardType: function(num) {
              var ref;
              if (!num) {
                return null;
              }
              return ((ref = cardFromNumber(num)) != null ? ref.type : void 0) || null;
            },
            formatCardNumber: function(num) {
              var card, groups, ref, upperLength;
              card = cardFromNumber(num);
              if (!card) {
                return num;
              }
              upperLength = card.length[card.length.length - 1];
              num = num.replace(/\D/g, "");
              num = num.slice(0, upperLength);
              if (card.format.global) {
                return (ref = num.match(card.format)) != null ? ref.join(" ") : void 0;
              } else {
                groups = card.format.exec(num);
                if (groups == null) {
                  return;
                }
                groups.shift();
                groups = groups.filter(function(n4) {
                  return n4;
                });
                return groups.join(" ");
              }
            }
          };
          Payment3.restrictNumeric = function(el) {
            QJ.on(el, "keypress", restrictNumeric);
            return QJ.on(el, "input", restrictNumeric);
          };
          Payment3.cardExpiryVal = function(el) {
            return Payment3.fns.cardExpiryVal(QJ.val(el));
          };
          Payment3.formatCardCVC = function(el) {
            Payment3.restrictNumeric(el);
            QJ.on(el, "keypress", restrictCVC);
            QJ.on(el, "input", restrictCVC);
            return el;
          };
          Payment3.formatCardExpiry = function(el) {
            var month, year;
            Payment3.restrictNumeric(el);
            if (el.length && el.length === 2) {
              month = el[0], year = el[1];
              this.formatCardExpiryMultiple(month, year);
            } else {
              QJ.on(el, "keypress", restrictCombinedExpiry);
              QJ.on(el, "keypress", formatExpiry);
              QJ.on(el, "keypress", formatForwardSlash);
              QJ.on(el, "keypress", formatForwardExpiry);
              QJ.on(el, "keydown", formatBackExpiry);
              QJ.on(el, "input", formatExpiry);
            }
            return el;
          };
          Payment3.formatCardExpiryMultiple = function(month, year) {
            QJ.on(month, "keypress", restrictMonthExpiry);
            QJ.on(month, "keypress", formatMonthExpiry);
            QJ.on(month, "input", formatMonthExpiry);
            QJ.on(year, "keypress", restrictYearExpiry);
            return QJ.on(year, "input", restrictYearExpiry);
          };
          Payment3.formatCardNumber = function(el, maxLength) {
            Payment3.restrictNumeric(el);
            QJ.on(el, "keypress", restrictCardNumber(maxLength));
            QJ.on(el, "keypress", formatCardNumber(maxLength));
            QJ.on(el, "keydown", formatBackCardNumber);
            QJ.on(el, "keyup blur", setCardType);
            QJ.on(el, "blur", formatCardNumber(maxLength));
            QJ.on(el, "paste", reFormatCardNumber);
            QJ.on(el, "input", formatCardNumber(maxLength));
            return el;
          };
          Payment3.getCardArray = function() {
            return cards;
          };
          Payment3.setCardArray = function(cardArray) {
            cards = cardArray;
            return true;
          };
          Payment3.addToCardArray = function(cardObject) {
            return cards.push(cardObject);
          };
          Payment3.removeFromCardArray = function(type4) {
            var key2, value;
            for (key2 in cards) {
              value = cards[key2];
              if (value.type === type4) {
                cards.splice(key2, 1);
              }
            }
            return true;
          };
          return Payment3;
        }();
        module2.exports = Payment2;
        globalThis2.Payment = Payment2;
      }).call(exports2);
    }
  });

  // node_modules/redux-persist/lib/storage/getStorage.js
  var require_getStorage = __commonJS({
    "node_modules/redux-persist/lib/storage/getStorage.js"(exports2) {
      "use strict";
      exports2.__esModule = true;
      exports2.default = getStorage;
      function _typeof6(obj) {
        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          _typeof6 = function _typeof7(obj2) {
            return typeof obj2;
          };
        } else {
          _typeof6 = function _typeof7(obj2) {
            return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
          };
        }
        return _typeof6(obj);
      }
      function noop9() {
      }
      var noopStorage = {
        getItem: noop9,
        setItem: noop9,
        removeItem: noop9
      };
      function hasStorage(storageType) {
        if ((typeof self === "undefined" ? "undefined" : _typeof6(self)) !== "object" || !(storageType in self)) {
          return false;
        }
        try {
          var storage2 = self[storageType];
          var testKey = "redux-persist ".concat(storageType, " test");
          storage2.setItem(testKey, "test");
          storage2.getItem(testKey);
          storage2.removeItem(testKey);
        } catch (e3) {
          if (true)
            console.warn("redux-persist ".concat(storageType, " test failed, persistence will be disabled."));
          return false;
        }
        return true;
      }
      function getStorage(type4) {
        var storageType = "".concat(type4, "Storage");
        if (hasStorage(storageType))
          return self[storageType];
        else {
          if (true) {
            console.error("redux-persist failed to create sync storage. falling back to noop storage.");
          }
          return noopStorage;
        }
      }
    }
  });

  // node_modules/redux-persist/lib/storage/createWebStorage.js
  var require_createWebStorage = __commonJS({
    "node_modules/redux-persist/lib/storage/createWebStorage.js"(exports2) {
      "use strict";
      exports2.__esModule = true;
      exports2.default = createWebStorage;
      var _getStorage = _interopRequireDefault(require_getStorage());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function createWebStorage(type4) {
        var storage2 = (0, _getStorage.default)(type4);
        return {
          getItem: function getItem2(key2) {
            return new Promise(function(resolve, reject) {
              resolve(storage2.getItem(key2));
            });
          },
          setItem: function setItem(key2, item) {
            return new Promise(function(resolve, reject) {
              resolve(storage2.setItem(key2, item));
            });
          },
          removeItem: function removeItem(key2) {
            return new Promise(function(resolve, reject) {
              resolve(storage2.removeItem(key2));
            });
          }
        };
      }
    }
  });

  // node_modules/redux-persist/lib/storage/index.js
  var require_storage = __commonJS({
    "node_modules/redux-persist/lib/storage/index.js"(exports2) {
      "use strict";
      exports2.__esModule = true;
      exports2.default = void 0;
      var _createWebStorage = _interopRequireDefault(require_createWebStorage());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      var _default = (0, _createWebStorage.default)("local");
      exports2.default = _default;
    }
  });

  // src/index.tsx
  var import_react142 = __toESM(require_react());
  var import_client = __toESM(require_client());

  // src/App.tsx
  var import_react140 = __toESM(require_react());

  // src/App.module.css
  var App_default = {
    App: "App_App"
  };

  // node_modules/@babel/runtime/helpers/esm/extends.js
  function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function(target) {
      for (var i3 = 1; i3 < arguments.length; i3++) {
        var source = arguments[i3];
        for (var key2 in source) {
          if (Object.prototype.hasOwnProperty.call(source, key2)) {
            target[key2] = source[key2];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }

  // node_modules/history/index.js
  var Action;
  (function(Action3) {
    Action3["Pop"] = "POP";
    Action3["Push"] = "PUSH";
    Action3["Replace"] = "REPLACE";
  })(Action || (Action = {}));
  var readOnly = true ? function(obj) {
    return Object.freeze(obj);
  } : function(obj) {
    return obj;
  };
  function warning(cond, message) {
    if (!cond) {
      if (typeof console !== "undefined")
        console.warn(message);
      try {
        throw new Error(message);
      } catch (e3) {
      }
    }
  }
  var BeforeUnloadEventType = "beforeunload";
  var PopStateEventType = "popstate";
  function createBrowserHistory(options) {
    if (options === void 0) {
      options = {};
    }
    var _options = options, _options$window = _options.window, window2 = _options$window === void 0 ? document.defaultView : _options$window;
    var globalHistory = window2.history;
    function getIndexAndLocation() {
      var _window$location = window2.location, pathname = _window$location.pathname, search = _window$location.search, hash = _window$location.hash;
      var state = globalHistory.state || {};
      return [state.idx, readOnly({
        pathname,
        search,
        hash,
        state: state.usr || null,
        key: state.key || "default"
      })];
    }
    var blockedPopTx = null;
    function handlePop() {
      if (blockedPopTx) {
        blockers.call(blockedPopTx);
        blockedPopTx = null;
      } else {
        var nextAction = Action.Pop;
        var _getIndexAndLocation = getIndexAndLocation(), nextIndex = _getIndexAndLocation[0], nextLocation = _getIndexAndLocation[1];
        if (blockers.length) {
          if (nextIndex != null) {
            var delta = index2 - nextIndex;
            if (delta) {
              blockedPopTx = {
                action: nextAction,
                location: nextLocation,
                retry: function retry() {
                  go(delta * -1);
                }
              };
              go(delta);
            }
          } else {
            true ? warning(
              false,
              // TODO: Write up a doc that explains our blocking strategy in
              // detail and link to it here so people can understand better what
              // is going on and how to avoid it.
              "You are trying to block a POP navigation to a location that was not created by the history library. The block will fail silently in production, but in general you should do all navigation with the history library (instead of using window.history.pushState directly) to avoid this situation."
            ) : void 0;
          }
        } else {
          applyTx(nextAction);
        }
      }
    }
    window2.addEventListener(PopStateEventType, handlePop);
    var action = Action.Pop;
    var _getIndexAndLocation2 = getIndexAndLocation(), index2 = _getIndexAndLocation2[0], location = _getIndexAndLocation2[1];
    var listeners = createEvents();
    var blockers = createEvents();
    if (index2 == null) {
      index2 = 0;
      globalHistory.replaceState(_extends({}, globalHistory.state, {
        idx: index2
      }), "");
    }
    function createHref(to) {
      return typeof to === "string" ? to : createPath(to);
    }
    function getNextLocation(to, state) {
      if (state === void 0) {
        state = null;
      }
      return readOnly(_extends({
        pathname: location.pathname,
        hash: "",
        search: ""
      }, typeof to === "string" ? parsePath(to) : to, {
        state,
        key: createKey()
      }));
    }
    function getHistoryStateAndUrl(nextLocation, index3) {
      return [{
        usr: nextLocation.state,
        key: nextLocation.key,
        idx: index3
      }, createHref(nextLocation)];
    }
    function allowTx(action2, location2, retry) {
      return !blockers.length || (blockers.call({
        action: action2,
        location: location2,
        retry
      }), false);
    }
    function applyTx(nextAction) {
      action = nextAction;
      var _getIndexAndLocation3 = getIndexAndLocation();
      index2 = _getIndexAndLocation3[0];
      location = _getIndexAndLocation3[1];
      listeners.call({
        action,
        location
      });
    }
    function push(to, state) {
      var nextAction = Action.Push;
      var nextLocation = getNextLocation(to, state);
      function retry() {
        push(to, state);
      }
      if (allowTx(nextAction, nextLocation, retry)) {
        var _getHistoryStateAndUr = getHistoryStateAndUrl(nextLocation, index2 + 1), historyState = _getHistoryStateAndUr[0], url2 = _getHistoryStateAndUr[1];
        try {
          globalHistory.pushState(historyState, "", url2);
        } catch (error2) {
          window2.location.assign(url2);
        }
        applyTx(nextAction);
      }
    }
    function replace(to, state) {
      var nextAction = Action.Replace;
      var nextLocation = getNextLocation(to, state);
      function retry() {
        replace(to, state);
      }
      if (allowTx(nextAction, nextLocation, retry)) {
        var _getHistoryStateAndUr2 = getHistoryStateAndUrl(nextLocation, index2), historyState = _getHistoryStateAndUr2[0], url2 = _getHistoryStateAndUr2[1];
        globalHistory.replaceState(historyState, "", url2);
        applyTx(nextAction);
      }
    }
    function go(delta) {
      globalHistory.go(delta);
    }
    var history2 = {
      get action() {
        return action;
      },
      get location() {
        return location;
      },
      createHref,
      push,
      replace,
      go,
      back: function back() {
        go(-1);
      },
      forward: function forward() {
        go(1);
      },
      listen: function listen(listener2) {
        return listeners.push(listener2);
      },
      block: function block(blocker) {
        var unblock = blockers.push(blocker);
        if (blockers.length === 1) {
          window2.addEventListener(BeforeUnloadEventType, promptBeforeUnload);
        }
        return function() {
          unblock();
          if (!blockers.length) {
            window2.removeEventListener(BeforeUnloadEventType, promptBeforeUnload);
          }
        };
      }
    };
    return history2;
  }
  function promptBeforeUnload(event) {
    event.preventDefault();
    event.returnValue = "";
  }
  function createEvents() {
    var handlers = [];
    return {
      get length() {
        return handlers.length;
      },
      push: function push(fn2) {
        handlers.push(fn2);
        return function() {
          handlers = handlers.filter(function(handler) {
            return handler !== fn2;
          });
        };
      },
      call: function call2(arg) {
        handlers.forEach(function(fn2) {
          return fn2 && fn2(arg);
        });
      }
    };
  }
  function createKey() {
    return Math.random().toString(36).substr(2, 8);
  }
  function createPath(_ref) {
    var _ref$pathname = _ref.pathname, pathname = _ref$pathname === void 0 ? "/" : _ref$pathname, _ref$search = _ref.search, search = _ref$search === void 0 ? "" : _ref$search, _ref$hash = _ref.hash, hash = _ref$hash === void 0 ? "" : _ref$hash;
    if (search && search !== "?")
      pathname += search.charAt(0) === "?" ? search : "?" + search;
    if (hash && hash !== "#")
      pathname += hash.charAt(0) === "#" ? hash : "#" + hash;
    return pathname;
  }
  function parsePath(path2) {
    var parsedPath = {};
    if (path2) {
      var hashIndex = path2.indexOf("#");
      if (hashIndex >= 0) {
        parsedPath.hash = path2.substr(hashIndex);
        path2 = path2.substr(0, hashIndex);
      }
      var searchIndex = path2.indexOf("?");
      if (searchIndex >= 0) {
        parsedPath.search = path2.substr(searchIndex);
        path2 = path2.substr(0, searchIndex);
      }
      if (path2) {
        parsedPath.pathname = path2;
      }
    }
    return parsedPath;
  }

  // src/utils/history/index.ts
  var history = createBrowserHistory({});
  var history_default = history;

  // src/TestPage.tsx
  var import_react = __toESM(require_react());

  // node_modules/react-router-dom/dist/index.js
  var React2 = __toESM(require_react());

  // node_modules/react-router/dist/index.js
  var React = __toESM(require_react());

  // node_modules/@remix-run/router/dist/router.js
  function _extends2() {
    _extends2 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i3 = 1; i3 < arguments.length; i3++) {
        var source = arguments[i3];
        for (var key2 in source) {
          if (Object.prototype.hasOwnProperty.call(source, key2)) {
            target[key2] = source[key2];
          }
        }
      }
      return target;
    };
    return _extends2.apply(this, arguments);
  }
  var Action2;
  (function(Action3) {
    Action3["Pop"] = "POP";
    Action3["Push"] = "PUSH";
    Action3["Replace"] = "REPLACE";
  })(Action2 || (Action2 = {}));
  function invariant(value, message) {
    if (value === false || value === null || typeof value === "undefined") {
      throw new Error(message);
    }
  }
  function warning2(cond, message) {
    if (!cond) {
      if (typeof console !== "undefined")
        console.warn(message);
      try {
        throw new Error(message);
      } catch (e3) {
      }
    }
  }
  function createPath2(_ref) {
    let {
      pathname = "/",
      search = "",
      hash = ""
    } = _ref;
    if (search && search !== "?")
      pathname += search.charAt(0) === "?" ? search : "?" + search;
    if (hash && hash !== "#")
      pathname += hash.charAt(0) === "#" ? hash : "#" + hash;
    return pathname;
  }
  function parsePath2(path2) {
    let parsedPath = {};
    if (path2) {
      let hashIndex = path2.indexOf("#");
      if (hashIndex >= 0) {
        parsedPath.hash = path2.substr(hashIndex);
        path2 = path2.substr(0, hashIndex);
      }
      let searchIndex = path2.indexOf("?");
      if (searchIndex >= 0) {
        parsedPath.search = path2.substr(searchIndex);
        path2 = path2.substr(0, searchIndex);
      }
      if (path2) {
        parsedPath.pathname = path2;
      }
    }
    return parsedPath;
  }
  var ResultType;
  (function(ResultType2) {
    ResultType2["data"] = "data";
    ResultType2["deferred"] = "deferred";
    ResultType2["redirect"] = "redirect";
    ResultType2["error"] = "error";
  })(ResultType || (ResultType = {}));
  function matchRoutes(routes, locationArg, basename) {
    if (basename === void 0) {
      basename = "/";
    }
    let location = typeof locationArg === "string" ? parsePath2(locationArg) : locationArg;
    let pathname = stripBasename(location.pathname || "/", basename);
    if (pathname == null) {
      return null;
    }
    let branches = flattenRoutes(routes);
    rankRouteBranches(branches);
    let matches = null;
    for (let i3 = 0; matches == null && i3 < branches.length; ++i3) {
      matches = matchRouteBranch(
        branches[i3],
        // Incoming pathnames are generally encoded from either window.location
        // or from router.navigate, but we want to match against the unencoded
        // paths in the route definitions.  Memory router locations won't be
        // encoded here but there also shouldn't be anything to decode so this
        // should be a safe operation.  This avoids needing matchRoutes to be
        // history-aware.
        safelyDecodeURI(pathname)
      );
    }
    return matches;
  }
  function convertRouteMatchToUiMatch(match2, loaderData) {
    let {
      route,
      pathname,
      params
    } = match2;
    return {
      id: route.id,
      pathname,
      params,
      data: loaderData[route.id],
      handle: route.handle
    };
  }
  function flattenRoutes(routes, branches, parentsMeta, parentPath) {
    if (branches === void 0) {
      branches = [];
    }
    if (parentsMeta === void 0) {
      parentsMeta = [];
    }
    if (parentPath === void 0) {
      parentPath = "";
    }
    let flattenRoute = (route, index2, relativePath) => {
      let meta = {
        relativePath: relativePath === void 0 ? route.path || "" : relativePath,
        caseSensitive: route.caseSensitive === true,
        childrenIndex: index2,
        route
      };
      if (meta.relativePath.startsWith("/")) {
        invariant(meta.relativePath.startsWith(parentPath), 'Absolute route path "' + meta.relativePath + '" nested under path ' + ('"' + parentPath + '" is not valid. An absolute child route path ') + "must start with the combined path of all its parent routes.");
        meta.relativePath = meta.relativePath.slice(parentPath.length);
      }
      let path2 = joinPaths([parentPath, meta.relativePath]);
      let routesMeta = parentsMeta.concat(meta);
      if (route.children && route.children.length > 0) {
        invariant(
          // Our types know better, but runtime JS may not!
          // @ts-expect-error
          route.index !== true,
          "Index routes must not have child routes. Please remove " + ('all child routes from route path "' + path2 + '".')
        );
        flattenRoutes(route.children, branches, routesMeta, path2);
      }
      if (route.path == null && !route.index) {
        return;
      }
      branches.push({
        path: path2,
        score: computeScore(path2, route.index),
        routesMeta
      });
    };
    routes.forEach((route, index2) => {
      var _route$path;
      if (route.path === "" || !((_route$path = route.path) != null && _route$path.includes("?"))) {
        flattenRoute(route, index2);
      } else {
        for (let exploded of explodeOptionalSegments(route.path)) {
          flattenRoute(route, index2, exploded);
        }
      }
    });
    return branches;
  }
  function explodeOptionalSegments(path2) {
    let segments = path2.split("/");
    if (segments.length === 0)
      return [];
    let [first, ...rest] = segments;
    let isOptional = first.endsWith("?");
    let required4 = first.replace(/\?$/, "");
    if (rest.length === 0) {
      return isOptional ? [required4, ""] : [required4];
    }
    let restExploded = explodeOptionalSegments(rest.join("/"));
    let result2 = [];
    result2.push(...restExploded.map((subpath) => subpath === "" ? required4 : [required4, subpath].join("/")));
    if (isOptional) {
      result2.push(...restExploded);
    }
    return result2.map((exploded) => path2.startsWith("/") && exploded === "" ? "/" : exploded);
  }
  function rankRouteBranches(branches) {
    branches.sort((a2, b2) => a2.score !== b2.score ? b2.score - a2.score : compareIndexes(a2.routesMeta.map((meta) => meta.childrenIndex), b2.routesMeta.map((meta) => meta.childrenIndex)));
  }
  var paramRe = /^:\w+$/;
  var dynamicSegmentValue = 3;
  var indexRouteValue = 2;
  var emptySegmentValue = 1;
  var staticSegmentValue = 10;
  var splatPenalty = -2;
  var isSplat = (s2) => s2 === "*";
  function computeScore(path2, index2) {
    let segments = path2.split("/");
    let initialScore = segments.length;
    if (segments.some(isSplat)) {
      initialScore += splatPenalty;
    }
    if (index2) {
      initialScore += indexRouteValue;
    }
    return segments.filter((s2) => !isSplat(s2)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === "" ? emptySegmentValue : staticSegmentValue), initialScore);
  }
  function compareIndexes(a2, b2) {
    let siblings = a2.length === b2.length && a2.slice(0, -1).every((n4, i3) => n4 === b2[i3]);
    return siblings ? (
      // If two routes are siblings, we should try to match the earlier sibling
      // first. This allows people to have fine-grained control over the matching
      // behavior by simply putting routes with identical paths in the order they
      // want them tried.
      a2[a2.length - 1] - b2[b2.length - 1]
    ) : (
      // Otherwise, it doesn't really make sense to rank non-siblings by index,
      // so they sort equally.
      0
    );
  }
  function matchRouteBranch(branch, pathname) {
    let {
      routesMeta
    } = branch;
    let matchedParams = {};
    let matchedPathname = "/";
    let matches = [];
    for (let i3 = 0; i3 < routesMeta.length; ++i3) {
      let meta = routesMeta[i3];
      let end = i3 === routesMeta.length - 1;
      let remainingPathname = matchedPathname === "/" ? pathname : pathname.slice(matchedPathname.length) || "/";
      let match2 = matchPath({
        path: meta.relativePath,
        caseSensitive: meta.caseSensitive,
        end
      }, remainingPathname);
      if (!match2)
        return null;
      Object.assign(matchedParams, match2.params);
      let route = meta.route;
      matches.push({
        // TODO: Can this as be avoided?
        params: matchedParams,
        pathname: joinPaths([matchedPathname, match2.pathname]),
        pathnameBase: normalizePathname(joinPaths([matchedPathname, match2.pathnameBase])),
        route
      });
      if (match2.pathnameBase !== "/") {
        matchedPathname = joinPaths([matchedPathname, match2.pathnameBase]);
      }
    }
    return matches;
  }
  function matchPath(pattern4, pathname) {
    if (typeof pattern4 === "string") {
      pattern4 = {
        path: pattern4,
        caseSensitive: false,
        end: true
      };
    }
    let [matcher, paramNames] = compilePath(pattern4.path, pattern4.caseSensitive, pattern4.end);
    let match2 = pathname.match(matcher);
    if (!match2)
      return null;
    let matchedPathname = match2[0];
    let pathnameBase = matchedPathname.replace(/(.)\/+$/, "$1");
    let captureGroups = match2.slice(1);
    let params = paramNames.reduce((memo10, paramName, index2) => {
      if (paramName === "*") {
        let splatValue = captureGroups[index2] || "";
        pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\/+$/, "$1");
      }
      memo10[paramName] = safelyDecodeURIComponent(captureGroups[index2] || "", paramName);
      return memo10;
    }, {});
    return {
      params,
      pathname: matchedPathname,
      pathnameBase,
      pattern: pattern4
    };
  }
  function compilePath(path2, caseSensitive, end) {
    if (caseSensitive === void 0) {
      caseSensitive = false;
    }
    if (end === void 0) {
      end = true;
    }
    warning2(path2 === "*" || !path2.endsWith("*") || path2.endsWith("/*"), 'Route path "' + path2 + '" will be treated as if it were ' + ('"' + path2.replace(/\*$/, "/*") + '" because the `*` character must ') + "always follow a `/` in the pattern. To get rid of this warning, " + ('please change the route path to "' + path2.replace(/\*$/, "/*") + '".'));
    let paramNames = [];
    let regexpSource = "^" + path2.replace(/\/*\*?$/, "").replace(/^\/*/, "/").replace(/[\\.*+^$?{}|()[\]]/g, "\\$&").replace(/\/:(\w+)/g, (_24, paramName) => {
      paramNames.push(paramName);
      return "/([^\\/]+)";
    });
    if (path2.endsWith("*")) {
      paramNames.push("*");
      regexpSource += path2 === "*" || path2 === "/*" ? "(.*)$" : "(?:\\/(.+)|\\/*)$";
    } else if (end) {
      regexpSource += "\\/*$";
    } else if (path2 !== "" && path2 !== "/") {
      regexpSource += "(?:(?=\\/|$))";
    } else
      ;
    let matcher = new RegExp(regexpSource, caseSensitive ? void 0 : "i");
    return [matcher, paramNames];
  }
  function safelyDecodeURI(value) {
    try {
      return decodeURI(value);
    } catch (error2) {
      warning2(false, 'The URL path "' + value + '" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent ' + ("encoding (" + error2 + ")."));
      return value;
    }
  }
  function safelyDecodeURIComponent(value, paramName) {
    try {
      return decodeURIComponent(value);
    } catch (error2) {
      warning2(false, 'The value for the URL param "' + paramName + '" will not be decoded because' + (' the string "' + value + '" is a malformed URL segment. This is probably') + (" due to a bad percent encoding (" + error2 + ")."));
      return value;
    }
  }
  function stripBasename(pathname, basename) {
    if (basename === "/")
      return pathname;
    if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {
      return null;
    }
    let startIndex = basename.endsWith("/") ? basename.length - 1 : basename.length;
    let nextChar = pathname.charAt(startIndex);
    if (nextChar && nextChar !== "/") {
      return null;
    }
    return pathname.slice(startIndex) || "/";
  }
  function resolvePath(to, fromPathname) {
    if (fromPathname === void 0) {
      fromPathname = "/";
    }
    let {
      pathname: toPathname,
      search = "",
      hash = ""
    } = typeof to === "string" ? parsePath2(to) : to;
    let pathname = toPathname ? toPathname.startsWith("/") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;
    return {
      pathname,
      search: normalizeSearch(search),
      hash: normalizeHash(hash)
    };
  }
  function resolvePathname(relativePath, fromPathname) {
    let segments = fromPathname.replace(/\/+$/, "").split("/");
    let relativeSegments = relativePath.split("/");
    relativeSegments.forEach((segment) => {
      if (segment === "..") {
        if (segments.length > 1)
          segments.pop();
      } else if (segment !== ".") {
        segments.push(segment);
      }
    });
    return segments.length > 1 ? segments.join("/") : "/";
  }
  function getInvalidPathError(char, field, dest, path2) {
    return "Cannot include a '" + char + "' character in a manually specified " + ("`to." + field + "` field [" + JSON.stringify(path2) + "].  Please separate it out to the ") + ("`to." + dest + "` field. Alternatively you may provide the full path as ") + 'a string in <Link to="..."> and the router will parse it for you.';
  }
  function getPathContributingMatches(matches) {
    return matches.filter((match2, index2) => index2 === 0 || match2.route.path && match2.route.path.length > 0);
  }
  function resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {
    if (isPathRelative === void 0) {
      isPathRelative = false;
    }
    let to;
    if (typeof toArg === "string") {
      to = parsePath2(toArg);
    } else {
      to = _extends2({}, toArg);
      invariant(!to.pathname || !to.pathname.includes("?"), getInvalidPathError("?", "pathname", "search", to));
      invariant(!to.pathname || !to.pathname.includes("#"), getInvalidPathError("#", "pathname", "hash", to));
      invariant(!to.search || !to.search.includes("#"), getInvalidPathError("#", "search", "hash", to));
    }
    let isEmptyPath = toArg === "" || to.pathname === "";
    let toPathname = isEmptyPath ? "/" : to.pathname;
    let from;
    if (isPathRelative || toPathname == null) {
      from = locationPathname;
    } else {
      let routePathnameIndex = routePathnames.length - 1;
      if (toPathname.startsWith("..")) {
        let toSegments = toPathname.split("/");
        while (toSegments[0] === "..") {
          toSegments.shift();
          routePathnameIndex -= 1;
        }
        to.pathname = toSegments.join("/");
      }
      from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : "/";
    }
    let path2 = resolvePath(to, from);
    let hasExplicitTrailingSlash = toPathname && toPathname !== "/" && toPathname.endsWith("/");
    let hasCurrentTrailingSlash = (isEmptyPath || toPathname === ".") && locationPathname.endsWith("/");
    if (!path2.pathname.endsWith("/") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {
      path2.pathname += "/";
    }
    return path2;
  }
  var joinPaths = (paths) => paths.join("/").replace(/\/\/+/g, "/");
  var normalizePathname = (pathname) => pathname.replace(/\/+$/, "").replace(/^\/*/, "/");
  var normalizeSearch = (search) => !search || search === "?" ? "" : search.startsWith("?") ? search : "?" + search;
  var normalizeHash = (hash) => !hash || hash === "#" ? "" : hash.startsWith("#") ? hash : "#" + hash;
  function isRouteErrorResponse(error2) {
    return error2 != null && typeof error2.status === "number" && typeof error2.statusText === "string" && typeof error2.internal === "boolean" && "data" in error2;
  }
  var validMutationMethodsArr = ["post", "put", "patch", "delete"];
  var validMutationMethods = new Set(validMutationMethodsArr);
  var validRequestMethodsArr = ["get", ...validMutationMethodsArr];
  var validRequestMethods = new Set(validRequestMethodsArr);
  var UNSAFE_DEFERRED_SYMBOL = Symbol("deferred");

  // node_modules/react-router/dist/index.js
  function _extends3() {
    _extends3 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i3 = 1; i3 < arguments.length; i3++) {
        var source = arguments[i3];
        for (var key2 in source) {
          if (Object.prototype.hasOwnProperty.call(source, key2)) {
            target[key2] = source[key2];
          }
        }
      }
      return target;
    };
    return _extends3.apply(this, arguments);
  }
  var DataRouterContext = /* @__PURE__ */ React.createContext(null);
  if (true) {
    DataRouterContext.displayName = "DataRouter";
  }
  var DataRouterStateContext = /* @__PURE__ */ React.createContext(null);
  if (true) {
    DataRouterStateContext.displayName = "DataRouterState";
  }
  var AwaitContext = /* @__PURE__ */ React.createContext(null);
  if (true) {
    AwaitContext.displayName = "Await";
  }
  var NavigationContext = /* @__PURE__ */ React.createContext(null);
  if (true) {
    NavigationContext.displayName = "Navigation";
  }
  var LocationContext = /* @__PURE__ */ React.createContext(null);
  if (true) {
    LocationContext.displayName = "Location";
  }
  var RouteContext = /* @__PURE__ */ React.createContext({
    outlet: null,
    matches: [],
    isDataRoute: false
  });
  if (true) {
    RouteContext.displayName = "Route";
  }
  var RouteErrorContext = /* @__PURE__ */ React.createContext(null);
  if (true) {
    RouteErrorContext.displayName = "RouteError";
  }
  function useHref(to, _temp) {
    let {
      relative
    } = _temp === void 0 ? {} : _temp;
    !useInRouterContext() ? true ? invariant(
      false,
      // TODO: This error is probably because they somehow have 2 versions of the
      // router loaded. We can help them understand how to avoid that.
      "useHref() may be used only in the context of a <Router> component."
    ) : invariant(false) : void 0;
    let {
      basename,
      navigator: navigator2
    } = React.useContext(NavigationContext);
    let {
      hash,
      pathname,
      search
    } = useResolvedPath(to, {
      relative
    });
    let joinedPathname = pathname;
    if (basename !== "/") {
      joinedPathname = pathname === "/" ? basename : joinPaths([basename, pathname]);
    }
    return navigator2.createHref({
      pathname: joinedPathname,
      search,
      hash
    });
  }
  function useInRouterContext() {
    return React.useContext(LocationContext) != null;
  }
  function useLocation() {
    !useInRouterContext() ? true ? invariant(
      false,
      // TODO: This error is probably because they somehow have 2 versions of the
      // router loaded. We can help them understand how to avoid that.
      "useLocation() may be used only in the context of a <Router> component."
    ) : invariant(false) : void 0;
    return React.useContext(LocationContext).location;
  }
  var navigateEffectWarning = "You should call navigate() in a React.useEffect(), not when your component is first rendered.";
  function useIsomorphicLayoutEffect(cb) {
    let isStatic = React.useContext(NavigationContext).static;
    if (!isStatic) {
      React.useLayoutEffect(cb);
    }
  }
  function useNavigate() {
    let {
      isDataRoute
    } = React.useContext(RouteContext);
    return isDataRoute ? useNavigateStable() : useNavigateUnstable();
  }
  function useNavigateUnstable() {
    !useInRouterContext() ? true ? invariant(
      false,
      // TODO: This error is probably because they somehow have 2 versions of the
      // router loaded. We can help them understand how to avoid that.
      "useNavigate() may be used only in the context of a <Router> component."
    ) : invariant(false) : void 0;
    let dataRouterContext = React.useContext(DataRouterContext);
    let {
      basename,
      navigator: navigator2
    } = React.useContext(NavigationContext);
    let {
      matches
    } = React.useContext(RouteContext);
    let {
      pathname: locationPathname
    } = useLocation();
    let routePathnamesJson = JSON.stringify(getPathContributingMatches(matches).map((match2) => match2.pathnameBase));
    let activeRef = React.useRef(false);
    useIsomorphicLayoutEffect(() => {
      activeRef.current = true;
    });
    let navigate = React.useCallback(function(to, options) {
      if (options === void 0) {
        options = {};
      }
      true ? warning2(activeRef.current, navigateEffectWarning) : void 0;
      if (!activeRef.current)
        return;
      if (typeof to === "number") {
        navigator2.go(to);
        return;
      }
      let path2 = resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, options.relative === "path");
      if (dataRouterContext == null && basename !== "/") {
        path2.pathname = path2.pathname === "/" ? basename : joinPaths([basename, path2.pathname]);
      }
      (!!options.replace ? navigator2.replace : navigator2.push)(path2, options.state, options);
    }, [basename, navigator2, routePathnamesJson, locationPathname, dataRouterContext]);
    return navigate;
  }
  function useParams() {
    let {
      matches
    } = React.useContext(RouteContext);
    let routeMatch = matches[matches.length - 1];
    return routeMatch ? routeMatch.params : {};
  }
  function useResolvedPath(to, _temp2) {
    let {
      relative
    } = _temp2 === void 0 ? {} : _temp2;
    let {
      matches
    } = React.useContext(RouteContext);
    let {
      pathname: locationPathname
    } = useLocation();
    let routePathnamesJson = JSON.stringify(getPathContributingMatches(matches).map((match2) => match2.pathnameBase));
    return React.useMemo(() => resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, relative === "path"), [to, routePathnamesJson, locationPathname, relative]);
  }
  function useRoutes(routes, locationArg) {
    return useRoutesImpl(routes, locationArg);
  }
  function useRoutesImpl(routes, locationArg, dataRouterState) {
    !useInRouterContext() ? true ? invariant(
      false,
      // TODO: This error is probably because they somehow have 2 versions of the
      // router loaded. We can help them understand how to avoid that.
      "useRoutes() may be used only in the context of a <Router> component."
    ) : invariant(false) : void 0;
    let {
      navigator: navigator2
    } = React.useContext(NavigationContext);
    let {
      matches: parentMatches
    } = React.useContext(RouteContext);
    let routeMatch = parentMatches[parentMatches.length - 1];
    let parentParams = routeMatch ? routeMatch.params : {};
    let parentPathname = routeMatch ? routeMatch.pathname : "/";
    let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : "/";
    let parentRoute = routeMatch && routeMatch.route;
    if (true) {
      let parentPath = parentRoute && parentRoute.path || "";
      warningOnce(parentPathname, !parentRoute || parentPath.endsWith("*"), "You rendered descendant <Routes> (or called `useRoutes()`) at " + ('"' + parentPathname + '" (under <Route path="' + parentPath + '">) but the ') + `parent route path has no trailing "*". This means if you navigate deeper, the parent won't match anymore and therefore the child routes will never render.

` + ('Please change the parent <Route path="' + parentPath + '"> to <Route ') + ('path="' + (parentPath === "/" ? "*" : parentPath + "/*") + '">.'));
    }
    let locationFromContext = useLocation();
    let location;
    if (locationArg) {
      var _parsedLocationArg$pa;
      let parsedLocationArg = typeof locationArg === "string" ? parsePath2(locationArg) : locationArg;
      !(parentPathnameBase === "/" || ((_parsedLocationArg$pa = parsedLocationArg.pathname) == null ? void 0 : _parsedLocationArg$pa.startsWith(parentPathnameBase))) ? true ? invariant(false, "When overriding the location using `<Routes location>` or `useRoutes(routes, location)`, the location pathname must begin with the portion of the URL pathname that was " + ('matched by all parent routes. The current pathname base is "' + parentPathnameBase + '" ') + ('but pathname "' + parsedLocationArg.pathname + '" was given in the `location` prop.')) : invariant(false) : void 0;
      location = parsedLocationArg;
    } else {
      location = locationFromContext;
    }
    let pathname = location.pathname || "/";
    let remainingPathname = parentPathnameBase === "/" ? pathname : pathname.slice(parentPathnameBase.length) || "/";
    let matches = matchRoutes(routes, {
      pathname: remainingPathname
    });
    if (true) {
      true ? warning2(parentRoute || matches != null, 'No routes matched location "' + location.pathname + location.search + location.hash + '" ') : void 0;
      true ? warning2(matches == null || matches[matches.length - 1].route.element !== void 0 || matches[matches.length - 1].route.Component !== void 0, 'Matched leaf route at location "' + location.pathname + location.search + location.hash + '" does not have an element or Component. This means it will render an <Outlet /> with a null value by default resulting in an "empty" page.') : void 0;
    }
    let renderedMatches = _renderMatches(matches && matches.map((match2) => Object.assign({}, match2, {
      params: Object.assign({}, parentParams, match2.params),
      pathname: joinPaths([
        parentPathnameBase,
        // Re-encode pathnames that were decoded inside matchRoutes
        navigator2.encodeLocation ? navigator2.encodeLocation(match2.pathname).pathname : match2.pathname
      ]),
      pathnameBase: match2.pathnameBase === "/" ? parentPathnameBase : joinPaths([
        parentPathnameBase,
        // Re-encode pathnames that were decoded inside matchRoutes
        navigator2.encodeLocation ? navigator2.encodeLocation(match2.pathnameBase).pathname : match2.pathnameBase
      ])
    })), parentMatches, dataRouterState);
    if (locationArg && renderedMatches) {
      return /* @__PURE__ */ React.createElement(LocationContext.Provider, {
        value: {
          location: _extends3({
            pathname: "/",
            search: "",
            hash: "",
            state: null,
            key: "default"
          }, location),
          navigationType: Action2.Pop
        }
      }, renderedMatches);
    }
    return renderedMatches;
  }
  function DefaultErrorComponent() {
    let error2 = useRouteError();
    let message = isRouteErrorResponse(error2) ? error2.status + " " + error2.statusText : error2 instanceof Error ? error2.message : JSON.stringify(error2);
    let stack = error2 instanceof Error ? error2.stack : null;
    let lightgrey = "rgba(200,200,200, 0.5)";
    let preStyles = {
      padding: "0.5rem",
      backgroundColor: lightgrey
    };
    let codeStyles = {
      padding: "2px 4px",
      backgroundColor: lightgrey
    };
    let devInfo = null;
    if (true) {
      console.error("Error handled by React Router default ErrorBoundary:", error2);
      devInfo = /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("p", null, "\u{1F4BF} Hey developer \u{1F44B}"), /* @__PURE__ */ React.createElement("p", null, "You can provide a way better UX than this when your app throws errors by providing your own ", /* @__PURE__ */ React.createElement("code", {
        style: codeStyles
      }, "ErrorBoundary"), " or", " ", /* @__PURE__ */ React.createElement("code", {
        style: codeStyles
      }, "errorElement"), " prop on your route."));
    }
    return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("h2", null, "Unexpected Application Error!"), /* @__PURE__ */ React.createElement("h3", {
      style: {
        fontStyle: "italic"
      }
    }, message), stack ? /* @__PURE__ */ React.createElement("pre", {
      style: preStyles
    }, stack) : null, devInfo);
  }
  var defaultErrorElement = /* @__PURE__ */ React.createElement(DefaultErrorComponent, null);
  var RenderErrorBoundary = class extends React.Component {
    constructor(props) {
      super(props);
      this.state = {
        location: props.location,
        revalidation: props.revalidation,
        error: props.error
      };
    }
    static getDerivedStateFromError(error2) {
      return {
        error: error2
      };
    }
    static getDerivedStateFromProps(props, state) {
      if (state.location !== props.location || state.revalidation !== "idle" && props.revalidation === "idle") {
        return {
          error: props.error,
          location: props.location,
          revalidation: props.revalidation
        };
      }
      return {
        error: props.error || state.error,
        location: state.location,
        revalidation: props.revalidation || state.revalidation
      };
    }
    componentDidCatch(error2, errorInfo) {
      console.error("React Router caught the following error during render", error2, errorInfo);
    }
    render() {
      return this.state.error ? /* @__PURE__ */ React.createElement(RouteContext.Provider, {
        value: this.props.routeContext
      }, /* @__PURE__ */ React.createElement(RouteErrorContext.Provider, {
        value: this.state.error,
        children: this.props.component
      })) : this.props.children;
    }
  };
  function RenderedRoute(_ref) {
    let {
      routeContext,
      match: match2,
      children
    } = _ref;
    let dataRouterContext = React.useContext(DataRouterContext);
    if (dataRouterContext && dataRouterContext.static && dataRouterContext.staticContext && (match2.route.errorElement || match2.route.ErrorBoundary)) {
      dataRouterContext.staticContext._deepestRenderedBoundaryId = match2.route.id;
    }
    return /* @__PURE__ */ React.createElement(RouteContext.Provider, {
      value: routeContext
    }, children);
  }
  function _renderMatches(matches, parentMatches, dataRouterState) {
    var _dataRouterState2;
    if (parentMatches === void 0) {
      parentMatches = [];
    }
    if (dataRouterState === void 0) {
      dataRouterState = null;
    }
    if (matches == null) {
      var _dataRouterState;
      if ((_dataRouterState = dataRouterState) != null && _dataRouterState.errors) {
        matches = dataRouterState.matches;
      } else {
        return null;
      }
    }
    let renderedMatches = matches;
    let errors = (_dataRouterState2 = dataRouterState) == null ? void 0 : _dataRouterState2.errors;
    if (errors != null) {
      let errorIndex = renderedMatches.findIndex((m2) => m2.route.id && (errors == null ? void 0 : errors[m2.route.id]));
      !(errorIndex >= 0) ? true ? invariant(false, "Could not find a matching route for errors on route IDs: " + Object.keys(errors).join(",")) : invariant(false) : void 0;
      renderedMatches = renderedMatches.slice(0, Math.min(renderedMatches.length, errorIndex + 1));
    }
    return renderedMatches.reduceRight((outlet, match2, index2) => {
      let error2 = match2.route.id ? errors == null ? void 0 : errors[match2.route.id] : null;
      let errorElement = null;
      if (dataRouterState) {
        errorElement = match2.route.errorElement || defaultErrorElement;
      }
      let matches2 = parentMatches.concat(renderedMatches.slice(0, index2 + 1));
      let getChildren = () => {
        let children;
        if (error2) {
          children = errorElement;
        } else if (match2.route.Component) {
          children = /* @__PURE__ */ React.createElement(match2.route.Component, null);
        } else if (match2.route.element) {
          children = match2.route.element;
        } else {
          children = outlet;
        }
        return /* @__PURE__ */ React.createElement(RenderedRoute, {
          match: match2,
          routeContext: {
            outlet,
            matches: matches2,
            isDataRoute: dataRouterState != null
          },
          children
        });
      };
      return dataRouterState && (match2.route.ErrorBoundary || match2.route.errorElement || index2 === 0) ? /* @__PURE__ */ React.createElement(RenderErrorBoundary, {
        location: dataRouterState.location,
        revalidation: dataRouterState.revalidation,
        component: errorElement,
        error: error2,
        children: getChildren(),
        routeContext: {
          outlet: null,
          matches: matches2,
          isDataRoute: true
        }
      }) : getChildren();
    }, null);
  }
  var DataRouterHook = /* @__PURE__ */ function(DataRouterHook3) {
    DataRouterHook3["UseBlocker"] = "useBlocker";
    DataRouterHook3["UseRevalidator"] = "useRevalidator";
    DataRouterHook3["UseNavigateStable"] = "useNavigate";
    return DataRouterHook3;
  }(DataRouterHook || {});
  var DataRouterStateHook = /* @__PURE__ */ function(DataRouterStateHook3) {
    DataRouterStateHook3["UseBlocker"] = "useBlocker";
    DataRouterStateHook3["UseLoaderData"] = "useLoaderData";
    DataRouterStateHook3["UseActionData"] = "useActionData";
    DataRouterStateHook3["UseRouteError"] = "useRouteError";
    DataRouterStateHook3["UseNavigation"] = "useNavigation";
    DataRouterStateHook3["UseRouteLoaderData"] = "useRouteLoaderData";
    DataRouterStateHook3["UseMatches"] = "useMatches";
    DataRouterStateHook3["UseRevalidator"] = "useRevalidator";
    DataRouterStateHook3["UseNavigateStable"] = "useNavigate";
    DataRouterStateHook3["UseRouteId"] = "useRouteId";
    return DataRouterStateHook3;
  }(DataRouterStateHook || {});
  function getDataRouterConsoleError(hookName) {
    return hookName + " must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.";
  }
  function useDataRouterContext(hookName) {
    let ctx = React.useContext(DataRouterContext);
    !ctx ? true ? invariant(false, getDataRouterConsoleError(hookName)) : invariant(false) : void 0;
    return ctx;
  }
  function useDataRouterState(hookName) {
    let state = React.useContext(DataRouterStateContext);
    !state ? true ? invariant(false, getDataRouterConsoleError(hookName)) : invariant(false) : void 0;
    return state;
  }
  function useRouteContext(hookName) {
    let route = React.useContext(RouteContext);
    !route ? true ? invariant(false, getDataRouterConsoleError(hookName)) : invariant(false) : void 0;
    return route;
  }
  function useCurrentRouteId(hookName) {
    let route = useRouteContext(hookName);
    let thisRoute = route.matches[route.matches.length - 1];
    !thisRoute.route.id ? true ? invariant(false, hookName + ' can only be used on routes that contain a unique "id"') : invariant(false) : void 0;
    return thisRoute.route.id;
  }
  function useRouteId() {
    return useCurrentRouteId(DataRouterStateHook.UseRouteId);
  }
  function useNavigation() {
    let state = useDataRouterState(DataRouterStateHook.UseNavigation);
    return state.navigation;
  }
  function useMatches() {
    let {
      matches,
      loaderData
    } = useDataRouterState(DataRouterStateHook.UseMatches);
    return React.useMemo(() => matches.map((m2) => convertRouteMatchToUiMatch(m2, loaderData)), [matches, loaderData]);
  }
  function useRouteError() {
    var _state$errors;
    let error2 = React.useContext(RouteErrorContext);
    let state = useDataRouterState(DataRouterStateHook.UseRouteError);
    let routeId = useCurrentRouteId(DataRouterStateHook.UseRouteError);
    if (error2) {
      return error2;
    }
    return (_state$errors = state.errors) == null ? void 0 : _state$errors[routeId];
  }
  function useNavigateStable() {
    let {
      router
    } = useDataRouterContext(DataRouterHook.UseNavigateStable);
    let id2 = useCurrentRouteId(DataRouterStateHook.UseNavigateStable);
    let activeRef = React.useRef(false);
    useIsomorphicLayoutEffect(() => {
      activeRef.current = true;
    });
    let navigate = React.useCallback(function(to, options) {
      if (options === void 0) {
        options = {};
      }
      true ? warning2(activeRef.current, navigateEffectWarning) : void 0;
      if (!activeRef.current)
        return;
      if (typeof to === "number") {
        router.navigate(to);
      } else {
        router.navigate(to, _extends3({
          fromRouteId: id2
        }, options));
      }
    }, [router, id2]);
    return navigate;
  }
  var alreadyWarned = {};
  function warningOnce(key2, cond, message) {
    if (!cond && !alreadyWarned[key2]) {
      alreadyWarned[key2] = true;
      true ? warning2(false, message) : void 0;
    }
  }
  var START_TRANSITION = "startTransition";
  var startTransitionImpl = React[START_TRANSITION];
  function Navigate(_ref4) {
    let {
      to,
      replace,
      state,
      relative
    } = _ref4;
    !useInRouterContext() ? true ? invariant(
      false,
      // TODO: This error is probably because they somehow have 2 versions of
      // the router loaded. We can help them understand how to avoid that.
      "<Navigate> may be used only in the context of a <Router> component."
    ) : invariant(false) : void 0;
    true ? warning2(!React.useContext(NavigationContext).static, "<Navigate> must not be used on the initial render in a <StaticRouter>. This is a no-op, but you should modify your code so the <Navigate> is only ever rendered in response to some user interaction or state change.") : void 0;
    let {
      matches
    } = React.useContext(RouteContext);
    let {
      pathname: locationPathname
    } = useLocation();
    let navigate = useNavigate();
    let path2 = resolveTo(to, getPathContributingMatches(matches).map((match2) => match2.pathnameBase), locationPathname, relative === "path");
    let jsonPath = JSON.stringify(path2);
    React.useEffect(() => navigate(JSON.parse(jsonPath), {
      replace,
      state,
      relative
    }), [navigate, jsonPath, relative, replace, state]);
    return null;
  }
  function Route(_props) {
    true ? invariant(false, "A <Route> is only ever to be used as the child of <Routes> element, never rendered directly. Please wrap your <Route> in a <Routes>.") : invariant(false);
  }
  function Router(_ref5) {
    let {
      basename: basenameProp = "/",
      children = null,
      location: locationProp,
      navigationType = Action2.Pop,
      navigator: navigator2,
      static: staticProp = false
    } = _ref5;
    !!useInRouterContext() ? true ? invariant(false, "You cannot render a <Router> inside another <Router>. You should never have more than one in your app.") : invariant(false) : void 0;
    let basename = basenameProp.replace(/^\/*/, "/");
    let navigationContext = React.useMemo(() => ({
      basename,
      navigator: navigator2,
      static: staticProp
    }), [basename, navigator2, staticProp]);
    if (typeof locationProp === "string") {
      locationProp = parsePath2(locationProp);
    }
    let {
      pathname = "/",
      search = "",
      hash = "",
      state = null,
      key: key2 = "default"
    } = locationProp;
    let locationContext = React.useMemo(() => {
      let trailingPathname = stripBasename(pathname, basename);
      if (trailingPathname == null) {
        return null;
      }
      return {
        location: {
          pathname: trailingPathname,
          search,
          hash,
          state,
          key: key2
        },
        navigationType
      };
    }, [basename, pathname, search, hash, state, key2, navigationType]);
    true ? warning2(locationContext != null, '<Router basename="' + basename + '"> is not able to match the URL ' + ('"' + pathname + search + hash + '" because it does not start with the ') + "basename, so the <Router> won't render anything.") : void 0;
    if (locationContext == null) {
      return null;
    }
    return /* @__PURE__ */ React.createElement(NavigationContext.Provider, {
      value: navigationContext
    }, /* @__PURE__ */ React.createElement(LocationContext.Provider, {
      children,
      value: locationContext
    }));
  }
  function Routes(_ref6) {
    let {
      children,
      location
    } = _ref6;
    return useRoutes(createRoutesFromChildren(children), location);
  }
  var neverSettledPromise = new Promise(() => {
  });
  function createRoutesFromChildren(children, parentPath) {
    if (parentPath === void 0) {
      parentPath = [];
    }
    let routes = [];
    React.Children.forEach(children, (element, index2) => {
      if (!/* @__PURE__ */ React.isValidElement(element)) {
        return;
      }
      let treePath = [...parentPath, index2];
      if (element.type === React.Fragment) {
        routes.push.apply(routes, createRoutesFromChildren(element.props.children, treePath));
        return;
      }
      !(element.type === Route) ? true ? invariant(false, "[" + (typeof element.type === "string" ? element.type : element.type.name) + "] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>") : invariant(false) : void 0;
      !(!element.props.index || !element.props.children) ? true ? invariant(false, "An index route cannot have child routes.") : invariant(false) : void 0;
      let route = {
        id: element.props.id || treePath.join("-"),
        caseSensitive: element.props.caseSensitive,
        element: element.props.element,
        Component: element.props.Component,
        index: element.props.index,
        path: element.props.path,
        loader: element.props.loader,
        action: element.props.action,
        errorElement: element.props.errorElement,
        ErrorBoundary: element.props.ErrorBoundary,
        hasErrorBoundary: element.props.ErrorBoundary != null || element.props.errorElement != null,
        shouldRevalidate: element.props.shouldRevalidate,
        handle: element.props.handle,
        lazy: element.props.lazy
      };
      if (element.props.children) {
        route.children = createRoutesFromChildren(element.props.children, treePath);
      }
      routes.push(route);
    });
    return routes;
  }

  // node_modules/react-router-dom/dist/index.js
  function _extends4() {
    _extends4 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i3 = 1; i3 < arguments.length; i3++) {
        var source = arguments[i3];
        for (var key2 in source) {
          if (Object.prototype.hasOwnProperty.call(source, key2)) {
            target[key2] = source[key2];
          }
        }
      }
      return target;
    };
    return _extends4.apply(this, arguments);
  }
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key2, i3;
    for (i3 = 0; i3 < sourceKeys.length; i3++) {
      key2 = sourceKeys[i3];
      if (excluded.indexOf(key2) >= 0)
        continue;
      target[key2] = source[key2];
    }
    return target;
  }
  var defaultMethod = "get";
  var defaultEncType = "application/x-www-form-urlencoded";
  function isHtmlElement(object4) {
    return object4 != null && typeof object4.tagName === "string";
  }
  function isButtonElement(object4) {
    return isHtmlElement(object4) && object4.tagName.toLowerCase() === "button";
  }
  function isFormElement(object4) {
    return isHtmlElement(object4) && object4.tagName.toLowerCase() === "form";
  }
  function isInputElement(object4) {
    return isHtmlElement(object4) && object4.tagName.toLowerCase() === "input";
  }
  function isModifiedEvent(event) {
    return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
  }
  function shouldProcessLinkClick(event, target) {
    return event.button === 0 && // Ignore everything but left clicks
    (!target || target === "_self") && // Let browser handle "target=_blank" etc.
    !isModifiedEvent(event);
  }
  var _formDataSupportsSubmitter = null;
  function isFormDataSubmitterSupported() {
    if (_formDataSupportsSubmitter === null) {
      try {
        new FormData(
          document.createElement("form"),
          // @ts-expect-error if FormData supports the submitter parameter, this will throw
          0
        );
        _formDataSupportsSubmitter = false;
      } catch (e3) {
        _formDataSupportsSubmitter = true;
      }
    }
    return _formDataSupportsSubmitter;
  }
  var supportedFormEncTypes = /* @__PURE__ */ new Set(["application/x-www-form-urlencoded", "multipart/form-data", "text/plain"]);
  function getFormEncType(encType) {
    if (encType != null && !supportedFormEncTypes.has(encType)) {
      true ? warning2(false, '"' + encType + '" is not a valid `encType` for `<Form>`/`<fetcher.Form>` ' + ('and will default to "' + defaultEncType + '"')) : void 0;
      return null;
    }
    return encType;
  }
  function getFormSubmissionInfo(target, basename) {
    let method4;
    let action;
    let encType;
    let formData;
    let body;
    if (isFormElement(target)) {
      let attr = target.getAttribute("action");
      action = attr ? stripBasename(attr, basename) : null;
      method4 = target.getAttribute("method") || defaultMethod;
      encType = getFormEncType(target.getAttribute("enctype")) || defaultEncType;
      formData = new FormData(target);
    } else if (isButtonElement(target) || isInputElement(target) && (target.type === "submit" || target.type === "image")) {
      let form = target.form;
      if (form == null) {
        throw new Error('Cannot submit a <button> or <input type="submit"> without a <form>');
      }
      let attr = target.getAttribute("formaction") || form.getAttribute("action");
      action = attr ? stripBasename(attr, basename) : null;
      method4 = target.getAttribute("formmethod") || form.getAttribute("method") || defaultMethod;
      encType = getFormEncType(target.getAttribute("formenctype")) || getFormEncType(form.getAttribute("enctype")) || defaultEncType;
      formData = new FormData(form, target);
      if (!isFormDataSubmitterSupported()) {
        let {
          name,
          type: type4,
          value
        } = target;
        if (type4 === "image") {
          let prefix2 = name ? name + "." : "";
          formData.append(prefix2 + "x", "0");
          formData.append(prefix2 + "y", "0");
        } else if (name) {
          formData.append(name, value);
        }
      }
    } else if (isHtmlElement(target)) {
      throw new Error('Cannot submit element that is not <form>, <button>, or <input type="submit|image">');
    } else {
      method4 = defaultMethod;
      action = null;
      encType = defaultEncType;
      body = target;
    }
    if (formData && encType === "text/plain") {
      body = formData;
      formData = void 0;
    }
    return {
      action,
      method: method4.toLowerCase(),
      encType,
      formData,
      body
    };
  }
  var _excluded = ["onClick", "relative", "reloadDocument", "replace", "state", "target", "to", "preventScrollReset"];
  var _excluded2 = ["aria-current", "caseSensitive", "className", "end", "style", "to", "children"];
  var _excluded3 = ["reloadDocument", "replace", "state", "method", "action", "onSubmit", "submit", "relative", "preventScrollReset"];
  var START_TRANSITION2 = "startTransition";
  var startTransitionImpl2 = React2[START_TRANSITION2];
  function HistoryRouter(_ref3) {
    let {
      basename,
      children,
      future,
      history: history2
    } = _ref3;
    let [state, setStateImpl] = React2.useState({
      action: history2.action,
      location: history2.location
    });
    let {
      v7_startTransition
    } = future || {};
    let setState = React2.useCallback((newState) => {
      v7_startTransition && startTransitionImpl2 ? startTransitionImpl2(() => setStateImpl(newState)) : setStateImpl(newState);
    }, [setStateImpl, v7_startTransition]);
    React2.useLayoutEffect(() => history2.listen(setState), [history2, setState]);
    return /* @__PURE__ */ React2.createElement(Router, {
      basename,
      children,
      location: state.location,
      navigationType: state.action,
      navigator: history2
    });
  }
  if (true) {
    HistoryRouter.displayName = "unstable_HistoryRouter";
  }
  var isBrowser = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined";
  var ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\/\/)/i;
  var Link = /* @__PURE__ */ React2.forwardRef(function LinkWithRef(_ref4, ref) {
    let {
      onClick,
      relative,
      reloadDocument,
      replace,
      state,
      target,
      to,
      preventScrollReset
    } = _ref4, rest = _objectWithoutPropertiesLoose(_ref4, _excluded);
    let {
      basename
    } = React2.useContext(NavigationContext);
    let absoluteHref;
    let isExternal = false;
    if (typeof to === "string" && ABSOLUTE_URL_REGEX.test(to)) {
      absoluteHref = to;
      if (isBrowser) {
        try {
          let currentUrl = new URL(window.location.href);
          let targetUrl = to.startsWith("//") ? new URL(currentUrl.protocol + to) : new URL(to);
          let path2 = stripBasename(targetUrl.pathname, basename);
          if (targetUrl.origin === currentUrl.origin && path2 != null) {
            to = path2 + targetUrl.search + targetUrl.hash;
          } else {
            isExternal = true;
          }
        } catch (e3) {
          true ? warning2(false, '<Link to="' + to + '"> contains an invalid URL which will probably break when clicked - please update to a valid URL path.') : void 0;
        }
      }
    }
    let href = useHref(to, {
      relative
    });
    let internalOnClick = useLinkClickHandler(to, {
      replace,
      state,
      target,
      preventScrollReset,
      relative
    });
    function handleClick(event) {
      if (onClick)
        onClick(event);
      if (!event.defaultPrevented) {
        internalOnClick(event);
      }
    }
    return (
      // eslint-disable-next-line jsx-a11y/anchor-has-content
      /* @__PURE__ */ React2.createElement("a", _extends4({}, rest, {
        href: absoluteHref || href,
        onClick: isExternal || reloadDocument ? onClick : handleClick,
        ref,
        target
      }))
    );
  });
  if (true) {
    Link.displayName = "Link";
  }
  var NavLink = /* @__PURE__ */ React2.forwardRef(function NavLinkWithRef(_ref5, ref) {
    let {
      "aria-current": ariaCurrentProp = "page",
      caseSensitive = false,
      className: classNameProp = "",
      end = false,
      style: styleProp,
      to,
      children
    } = _ref5, rest = _objectWithoutPropertiesLoose(_ref5, _excluded2);
    let path2 = useResolvedPath(to, {
      relative: rest.relative
    });
    let location = useLocation();
    let routerState = React2.useContext(DataRouterStateContext);
    let {
      navigator: navigator2
    } = React2.useContext(NavigationContext);
    let toPathname = navigator2.encodeLocation ? navigator2.encodeLocation(path2).pathname : path2.pathname;
    let locationPathname = location.pathname;
    let nextLocationPathname = routerState && routerState.navigation && routerState.navigation.location ? routerState.navigation.location.pathname : null;
    if (!caseSensitive) {
      locationPathname = locationPathname.toLowerCase();
      nextLocationPathname = nextLocationPathname ? nextLocationPathname.toLowerCase() : null;
      toPathname = toPathname.toLowerCase();
    }
    let isActive2 = locationPathname === toPathname || !end && locationPathname.startsWith(toPathname) && locationPathname.charAt(toPathname.length) === "/";
    let isPending = nextLocationPathname != null && (nextLocationPathname === toPathname || !end && nextLocationPathname.startsWith(toPathname) && nextLocationPathname.charAt(toPathname.length) === "/");
    let ariaCurrent = isActive2 ? ariaCurrentProp : void 0;
    let className;
    if (typeof classNameProp === "function") {
      className = classNameProp({
        isActive: isActive2,
        isPending
      });
    } else {
      className = [classNameProp, isActive2 ? "active" : null, isPending ? "pending" : null].filter(Boolean).join(" ");
    }
    let style3 = typeof styleProp === "function" ? styleProp({
      isActive: isActive2,
      isPending
    }) : styleProp;
    return /* @__PURE__ */ React2.createElement(Link, _extends4({}, rest, {
      "aria-current": ariaCurrent,
      className,
      ref,
      style: style3,
      to
    }), typeof children === "function" ? children({
      isActive: isActive2,
      isPending
    }) : children);
  });
  if (true) {
    NavLink.displayName = "NavLink";
  }
  var Form = /* @__PURE__ */ React2.forwardRef((props, ref) => {
    let submit = useSubmit();
    return /* @__PURE__ */ React2.createElement(FormImpl, _extends4({}, props, {
      submit,
      ref
    }));
  });
  if (true) {
    Form.displayName = "Form";
  }
  var FormImpl = /* @__PURE__ */ React2.forwardRef((_ref6, forwardedRef) => {
    let {
      reloadDocument,
      replace,
      state,
      method: method4 = defaultMethod,
      action,
      onSubmit,
      submit,
      relative,
      preventScrollReset
    } = _ref6, props = _objectWithoutPropertiesLoose(_ref6, _excluded3);
    let formMethod = method4.toLowerCase() === "get" ? "get" : "post";
    let formAction = useFormAction(action, {
      relative
    });
    let submitHandler = (event) => {
      onSubmit && onSubmit(event);
      if (event.defaultPrevented)
        return;
      event.preventDefault();
      let submitter = event.nativeEvent.submitter;
      let submitMethod = (submitter == null ? void 0 : submitter.getAttribute("formmethod")) || method4;
      submit(submitter || event.currentTarget, {
        method: submitMethod,
        replace,
        state,
        relative,
        preventScrollReset
      });
    };
    return /* @__PURE__ */ React2.createElement("form", _extends4({
      ref: forwardedRef,
      method: formMethod,
      action: formAction,
      onSubmit: reloadDocument ? onSubmit : submitHandler
    }, props));
  });
  if (true) {
    FormImpl.displayName = "FormImpl";
  }
  function ScrollRestoration(_ref7) {
    let {
      getKey: getKey6,
      storageKey
    } = _ref7;
    useScrollRestoration({
      getKey: getKey6,
      storageKey
    });
    return null;
  }
  if (true) {
    ScrollRestoration.displayName = "ScrollRestoration";
  }
  var DataRouterHook2;
  (function(DataRouterHook3) {
    DataRouterHook3["UseScrollRestoration"] = "useScrollRestoration";
    DataRouterHook3["UseSubmit"] = "useSubmit";
    DataRouterHook3["UseSubmitFetcher"] = "useSubmitFetcher";
    DataRouterHook3["UseFetcher"] = "useFetcher";
  })(DataRouterHook2 || (DataRouterHook2 = {}));
  var DataRouterStateHook2;
  (function(DataRouterStateHook3) {
    DataRouterStateHook3["UseFetchers"] = "useFetchers";
    DataRouterStateHook3["UseScrollRestoration"] = "useScrollRestoration";
  })(DataRouterStateHook2 || (DataRouterStateHook2 = {}));
  function getDataRouterConsoleError2(hookName) {
    return hookName + " must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.";
  }
  function useDataRouterContext2(hookName) {
    let ctx = React2.useContext(DataRouterContext);
    !ctx ? true ? invariant(false, getDataRouterConsoleError2(hookName)) : invariant(false) : void 0;
    return ctx;
  }
  function useDataRouterState2(hookName) {
    let state = React2.useContext(DataRouterStateContext);
    !state ? true ? invariant(false, getDataRouterConsoleError2(hookName)) : invariant(false) : void 0;
    return state;
  }
  function useLinkClickHandler(to, _temp) {
    let {
      target,
      replace: replaceProp,
      state,
      preventScrollReset,
      relative
    } = _temp === void 0 ? {} : _temp;
    let navigate = useNavigate();
    let location = useLocation();
    let path2 = useResolvedPath(to, {
      relative
    });
    return React2.useCallback((event) => {
      if (shouldProcessLinkClick(event, target)) {
        event.preventDefault();
        let replace = replaceProp !== void 0 ? replaceProp : createPath2(location) === createPath2(path2);
        navigate(to, {
          replace,
          state,
          preventScrollReset,
          relative
        });
      }
    }, [location, navigate, path2, replaceProp, state, target, to, preventScrollReset, relative]);
  }
  function validateClientSideSubmission() {
    if (typeof document === "undefined") {
      throw new Error("You are calling submit during the server render. Try calling submit within a `useEffect` or callback instead.");
    }
  }
  function useSubmit() {
    let {
      router
    } = useDataRouterContext2(DataRouterHook2.UseSubmit);
    let {
      basename
    } = React2.useContext(NavigationContext);
    let currentRouteId = useRouteId();
    return React2.useCallback(function(target, options) {
      if (options === void 0) {
        options = {};
      }
      validateClientSideSubmission();
      let {
        action,
        method: method4,
        encType,
        formData,
        body
      } = getFormSubmissionInfo(target, basename);
      router.navigate(options.action || action, {
        preventScrollReset: options.preventScrollReset,
        formData,
        body,
        formMethod: options.method || method4,
        formEncType: options.encType || encType,
        replace: options.replace,
        state: options.state,
        fromRouteId: currentRouteId
      });
    }, [router, basename, currentRouteId]);
  }
  function useFormAction(action, _temp2) {
    let {
      relative
    } = _temp2 === void 0 ? {} : _temp2;
    let {
      basename
    } = React2.useContext(NavigationContext);
    let routeContext = React2.useContext(RouteContext);
    !routeContext ? true ? invariant(false, "useFormAction must be used inside a RouteContext") : invariant(false) : void 0;
    let [match2] = routeContext.matches.slice(-1);
    let path2 = _extends4({}, useResolvedPath(action ? action : ".", {
      relative
    }));
    let location = useLocation();
    if (action == null) {
      path2.search = location.search;
      if (match2.route.index) {
        let params = new URLSearchParams(path2.search);
        params.delete("index");
        path2.search = params.toString() ? "?" + params.toString() : "";
      }
    }
    if ((!action || action === ".") && match2.route.index) {
      path2.search = path2.search ? path2.search.replace(/^\?/, "?index&") : "?index";
    }
    if (basename !== "/") {
      path2.pathname = path2.pathname === "/" ? basename : joinPaths([basename, path2.pathname]);
    }
    return createPath2(path2);
  }
  var SCROLL_RESTORATION_STORAGE_KEY = "react-router-scroll-positions";
  var savedScrollPositions = {};
  function useScrollRestoration(_temp3) {
    let {
      getKey: getKey6,
      storageKey
    } = _temp3 === void 0 ? {} : _temp3;
    let {
      router
    } = useDataRouterContext2(DataRouterHook2.UseScrollRestoration);
    let {
      restoreScrollPosition,
      preventScrollReset
    } = useDataRouterState2(DataRouterStateHook2.UseScrollRestoration);
    let {
      basename
    } = React2.useContext(NavigationContext);
    let location = useLocation();
    let matches = useMatches();
    let navigation = useNavigation();
    React2.useEffect(() => {
      window.history.scrollRestoration = "manual";
      return () => {
        window.history.scrollRestoration = "auto";
      };
    }, []);
    usePageHide(React2.useCallback(() => {
      if (navigation.state === "idle") {
        let key2 = (getKey6 ? getKey6(location, matches) : null) || location.key;
        savedScrollPositions[key2] = window.scrollY;
      }
      sessionStorage.setItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY, JSON.stringify(savedScrollPositions));
      window.history.scrollRestoration = "auto";
    }, [storageKey, getKey6, navigation.state, location, matches]));
    if (typeof document !== "undefined") {
      React2.useLayoutEffect(() => {
        try {
          let sessionPositions = sessionStorage.getItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY);
          if (sessionPositions) {
            savedScrollPositions = JSON.parse(sessionPositions);
          }
        } catch (e3) {
        }
      }, [storageKey]);
      React2.useLayoutEffect(() => {
        let getKeyWithoutBasename = getKey6 && basename !== "/" ? (location2, matches2) => getKey6(
          // Strip the basename to match useLocation()
          _extends4({}, location2, {
            pathname: stripBasename(location2.pathname, basename) || location2.pathname
          }),
          matches2
        ) : getKey6;
        let disableScrollRestoration = router == null ? void 0 : router.enableScrollRestoration(savedScrollPositions, () => window.scrollY, getKeyWithoutBasename);
        return () => disableScrollRestoration && disableScrollRestoration();
      }, [router, basename, getKey6]);
      React2.useLayoutEffect(() => {
        if (restoreScrollPosition === false) {
          return;
        }
        if (typeof restoreScrollPosition === "number") {
          window.scrollTo(0, restoreScrollPosition);
          return;
        }
        if (location.hash) {
          let el = document.getElementById(decodeURIComponent(location.hash.slice(1)));
          if (el) {
            el.scrollIntoView();
            return;
          }
        }
        if (preventScrollReset === true) {
          return;
        }
        window.scrollTo(0, 0);
      }, [location, restoreScrollPosition, preventScrollReset]);
    }
  }
  function usePageHide(callback, options) {
    let {
      capture
    } = options || {};
    React2.useEffect(() => {
      let opts = capture != null ? {
        capture
      } : void 0;
      window.addEventListener("pagehide", callback, opts);
      return () => {
        window.removeEventListener("pagehide", callback, opts);
      };
    }, [callback, capture]);
  }

  // src/TestPage.tsx
  var TestPage = () => {
    const { info } = useParams();
    return /* @__PURE__ */ import_react.default.createElement("div", null, " This is testpage: ", info);
  };
  var TestPage_default = TestPage;

  // node_modules/react-redux/es/components/Provider.js
  var import_react4 = __toESM(require_react());
  var import_prop_types = __toESM(require_prop_types());

  // node_modules/react-redux/es/components/Context.js
  var import_react2 = __toESM(require_react());
  var ReactReduxContext = /* @__PURE__ */ import_react2.default.createContext(null);
  if (true) {
    ReactReduxContext.displayName = "ReactRedux";
  }

  // node_modules/react-redux/es/utils/batch.js
  function defaultNoopBatch(callback) {
    callback();
  }
  var batch = defaultNoopBatch;
  var setBatch = function setBatch2(newBatch) {
    return batch = newBatch;
  };
  var getBatch = function getBatch2() {
    return batch;
  };

  // node_modules/react-redux/es/utils/Subscription.js
  var nullListeners = {
    notify: function notify() {
    }
  };
  function createListenerCollection() {
    var batch2 = getBatch();
    var first = null;
    var last = null;
    return {
      clear: function clear() {
        first = null;
        last = null;
      },
      notify: function notify2() {
        batch2(function() {
          var listener2 = first;
          while (listener2) {
            listener2.callback();
            listener2 = listener2.next;
          }
        });
      },
      get: function get3() {
        var listeners = [];
        var listener2 = first;
        while (listener2) {
          listeners.push(listener2);
          listener2 = listener2.next;
        }
        return listeners;
      },
      subscribe: function subscribe2(callback) {
        var isSubscribed = true;
        var listener2 = last = {
          callback,
          next: null,
          prev: last
        };
        if (listener2.prev) {
          listener2.prev.next = listener2;
        } else {
          first = listener2;
        }
        return function unsubscribe2() {
          if (!isSubscribed || first === null)
            return;
          isSubscribed = false;
          if (listener2.next) {
            listener2.next.prev = listener2.prev;
          } else {
            last = listener2.prev;
          }
          if (listener2.prev) {
            listener2.prev.next = listener2.next;
          } else {
            first = listener2.next;
          }
        };
      }
    };
  }
  var Subscription = /* @__PURE__ */ function() {
    function Subscription2(store3, parentSub) {
      this.store = store3;
      this.parentSub = parentSub;
      this.unsubscribe = null;
      this.listeners = nullListeners;
      this.handleChangeWrapper = this.handleChangeWrapper.bind(this);
    }
    var _proto = Subscription2.prototype;
    _proto.addNestedSub = function addNestedSub(listener2) {
      this.trySubscribe();
      return this.listeners.subscribe(listener2);
    };
    _proto.notifyNestedSubs = function notifyNestedSubs() {
      this.listeners.notify();
    };
    _proto.handleChangeWrapper = function handleChangeWrapper() {
      if (this.onStateChange) {
        this.onStateChange();
      }
    };
    _proto.isSubscribed = function isSubscribed() {
      return Boolean(this.unsubscribe);
    };
    _proto.trySubscribe = function trySubscribe() {
      if (!this.unsubscribe) {
        this.unsubscribe = this.parentSub ? this.parentSub.addNestedSub(this.handleChangeWrapper) : this.store.subscribe(this.handleChangeWrapper);
        this.listeners = createListenerCollection();
      }
    };
    _proto.tryUnsubscribe = function tryUnsubscribe() {
      if (this.unsubscribe) {
        this.unsubscribe();
        this.unsubscribe = null;
        this.listeners.clear();
        this.listeners = nullListeners;
      }
    };
    return Subscription2;
  }();

  // node_modules/react-redux/es/utils/useIsomorphicLayoutEffect.js
  var import_react3 = __toESM(require_react());
  var useIsomorphicLayoutEffect2 = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined" ? import_react3.useLayoutEffect : import_react3.useEffect;

  // node_modules/react-redux/es/components/Provider.js
  function Provider(_ref) {
    var store3 = _ref.store, context2 = _ref.context, children = _ref.children;
    var contextValue = (0, import_react4.useMemo)(function() {
      var subscription = new Subscription(store3);
      subscription.onStateChange = subscription.notifyNestedSubs;
      return {
        store: store3,
        subscription
      };
    }, [store3]);
    var previousState = (0, import_react4.useMemo)(function() {
      return store3.getState();
    }, [store3]);
    useIsomorphicLayoutEffect2(function() {
      var subscription = contextValue.subscription;
      subscription.trySubscribe();
      if (previousState !== store3.getState()) {
        subscription.notifyNestedSubs();
      }
      return function() {
        subscription.tryUnsubscribe();
        subscription.onStateChange = null;
      };
    }, [contextValue, previousState]);
    var Context3 = context2 || ReactReduxContext;
    return /* @__PURE__ */ import_react4.default.createElement(Context3.Provider, {
      value: contextValue
    }, children);
  }
  if (true) {
    Provider.propTypes = {
      store: import_prop_types.default.shape({
        subscribe: import_prop_types.default.func.isRequired,
        dispatch: import_prop_types.default.func.isRequired,
        getState: import_prop_types.default.func.isRequired
      }),
      context: import_prop_types.default.object,
      children: import_prop_types.default.any
    };
  }
  var Provider_default = Provider;

  // node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js
  function _objectWithoutPropertiesLoose2(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key2, i3;
    for (i3 = 0; i3 < sourceKeys.length; i3++) {
      key2 = sourceKeys[i3];
      if (excluded.indexOf(key2) >= 0)
        continue;
      target[key2] = source[key2];
    }
    return target;
  }

  // node_modules/react-redux/es/components/connectAdvanced.js
  var import_hoist_non_react_statics = __toESM(require_hoist_non_react_statics_cjs());
  var import_react5 = __toESM(require_react());
  var import_react_is = __toESM(require_react_is());

  // node_modules/symbol-observable/es/ponyfill.js
  function symbolObservablePonyfill(root3) {
    var result2;
    var Symbol2 = root3.Symbol;
    if (typeof Symbol2 === "function") {
      if (Symbol2.observable) {
        result2 = Symbol2.observable;
      } else {
        result2 = Symbol2("observable");
        Symbol2.observable = result2;
      }
    } else {
      result2 = "@@observable";
    }
    return result2;
  }

  // node_modules/symbol-observable/es/index.js
  var root;
  if (typeof self !== "undefined") {
    root = self;
  } else if (typeof window !== "undefined") {
    root = window;
  } else if (typeof global !== "undefined") {
    root = global;
  } else if (typeof module !== "undefined") {
    root = module;
  } else {
    root = Function("return this")();
  }
  var result = symbolObservablePonyfill(root);
  var es_default = result;

  // node_modules/redux/es/redux.js
  var randomString = function randomString2() {
    return Math.random().toString(36).substring(7).split("").join(".");
  };
  var ActionTypes = {
    INIT: "@@redux/INIT" + randomString(),
    REPLACE: "@@redux/REPLACE" + randomString(),
    PROBE_UNKNOWN_ACTION: function PROBE_UNKNOWN_ACTION() {
      return "@@redux/PROBE_UNKNOWN_ACTION" + randomString();
    }
  };
  function isPlainObject(obj) {
    if (typeof obj !== "object" || obj === null)
      return false;
    var proto = obj;
    while (Object.getPrototypeOf(proto) !== null) {
      proto = Object.getPrototypeOf(proto);
    }
    return Object.getPrototypeOf(obj) === proto;
  }
  function createStore(reducer, preloadedState, enhancer) {
    var _ref2;
    if (typeof preloadedState === "function" && typeof enhancer === "function" || typeof enhancer === "function" && typeof arguments[3] === "function") {
      throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function.");
    }
    if (typeof preloadedState === "function" && typeof enhancer === "undefined") {
      enhancer = preloadedState;
      preloadedState = void 0;
    }
    if (typeof enhancer !== "undefined") {
      if (typeof enhancer !== "function") {
        throw new Error("Expected the enhancer to be a function.");
      }
      return enhancer(createStore)(reducer, preloadedState);
    }
    if (typeof reducer !== "function") {
      throw new Error("Expected the reducer to be a function.");
    }
    var currentReducer = reducer;
    var currentState = preloadedState;
    var currentListeners = [];
    var nextListeners = currentListeners;
    var isDispatching = false;
    function ensureCanMutateNextListeners() {
      if (nextListeners === currentListeners) {
        nextListeners = currentListeners.slice();
      }
    }
    function getState() {
      if (isDispatching) {
        throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");
      }
      return currentState;
    }
    function subscribe2(listener2) {
      if (typeof listener2 !== "function") {
        throw new Error("Expected the listener to be a function.");
      }
      if (isDispatching) {
        throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribelistener for more details.");
      }
      var isSubscribed = true;
      ensureCanMutateNextListeners();
      nextListeners.push(listener2);
      return function unsubscribe2() {
        if (!isSubscribed) {
          return;
        }
        if (isDispatching) {
          throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribelistener for more details.");
        }
        isSubscribed = false;
        ensureCanMutateNextListeners();
        var index2 = nextListeners.indexOf(listener2);
        nextListeners.splice(index2, 1);
        currentListeners = null;
      };
    }
    function dispatch2(action) {
      if (!isPlainObject(action)) {
        throw new Error("Actions must be plain objects. Use custom middleware for async actions.");
      }
      if (typeof action.type === "undefined") {
        throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');
      }
      if (isDispatching) {
        throw new Error("Reducers may not dispatch actions.");
      }
      try {
        isDispatching = true;
        currentState = currentReducer(currentState, action);
      } finally {
        isDispatching = false;
      }
      var listeners = currentListeners = nextListeners;
      for (var i3 = 0; i3 < listeners.length; i3++) {
        var listener2 = listeners[i3];
        listener2();
      }
      return action;
    }
    function replaceReducer(nextReducer) {
      if (typeof nextReducer !== "function") {
        throw new Error("Expected the nextReducer to be a function.");
      }
      currentReducer = nextReducer;
      dispatch2({
        type: ActionTypes.REPLACE
      });
    }
    function observable() {
      var _ref;
      var outerSubscribe = subscribe2;
      return _ref = {
        /**
         * The minimal observable subscription method.
         * @param {Object} observer Any object that can be used as an observer.
         * The observer object should have a `next` method.
         * @returns {subscription} An object with an `unsubscribe` method that can
         * be used to unsubscribe the observable from the store, and prevent further
         * emission of values from the observable.
         */
        subscribe: function subscribe3(observer) {
          if (typeof observer !== "object" || observer === null) {
            throw new TypeError("Expected the observer to be an object.");
          }
          function observeState() {
            if (observer.next) {
              observer.next(getState());
            }
          }
          observeState();
          var unsubscribe2 = outerSubscribe(observeState);
          return {
            unsubscribe: unsubscribe2
          };
        }
      }, _ref[es_default] = function() {
        return this;
      }, _ref;
    }
    dispatch2({
      type: ActionTypes.INIT
    });
    return _ref2 = {
      dispatch: dispatch2,
      subscribe: subscribe2,
      getState,
      replaceReducer
    }, _ref2[es_default] = observable, _ref2;
  }
  function warning3(message) {
    if (typeof console !== "undefined" && typeof console.error === "function") {
      console.error(message);
    }
    try {
      throw new Error(message);
    } catch (e3) {
    }
  }
  function isCrushed() {
  }
  if (typeof isCrushed.name === "string" && isCrushed.name !== "isCrushed") {
    warning3('You are currently using minified code outside of NODE_ENV === "production". This means that you are running a slower development build of Redux. You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify or setting mode to production in webpack (https://webpack.js.org/concepts/mode/) to ensure you have the correct code for your production build.');
  }

  // node_modules/react-redux/es/hooks/useStore.js
  var import_react7 = __toESM(require_react());

  // node_modules/react-redux/es/hooks/useReduxContext.js
  var import_react6 = __toESM(require_react());
  function useReduxContext() {
    var contextValue = (0, import_react6.useContext)(ReactReduxContext);
    if (!contextValue) {
      throw new Error("could not find react-redux context value; please ensure the component is wrapped in a <Provider>");
    }
    return contextValue;
  }

  // node_modules/react-redux/es/hooks/useStore.js
  function createStoreHook(context2) {
    if (context2 === void 0) {
      context2 = ReactReduxContext;
    }
    var useReduxContext2 = context2 === ReactReduxContext ? useReduxContext : function() {
      return (0, import_react7.useContext)(context2);
    };
    return function useStore2() {
      var _useReduxContext = useReduxContext2(), store3 = _useReduxContext.store;
      return store3;
    };
  }
  var useStore = /* @__PURE__ */ createStoreHook();

  // node_modules/react-redux/es/hooks/useDispatch.js
  function createDispatchHook(context2) {
    if (context2 === void 0) {
      context2 = ReactReduxContext;
    }
    var useStore2 = context2 === ReactReduxContext ? useStore : createStoreHook(context2);
    return function useDispatch2() {
      var store3 = useStore2();
      return store3.dispatch;
    };
  }
  var useDispatch = /* @__PURE__ */ createDispatchHook();

  // node_modules/react-redux/es/hooks/useSelector.js
  var import_react8 = __toESM(require_react());
  var refEquality = function refEquality2(a2, b2) {
    return a2 === b2;
  };
  function useSelectorWithStoreAndSubscription(selector, equalityFn, store3, contextSub) {
    var _useReducer = (0, import_react8.useReducer)(function(s2) {
      return s2 + 1;
    }, 0), forceRender = _useReducer[1];
    var subscription = (0, import_react8.useMemo)(function() {
      return new Subscription(store3, contextSub);
    }, [store3, contextSub]);
    var latestSubscriptionCallbackError = (0, import_react8.useRef)();
    var latestSelector = (0, import_react8.useRef)();
    var latestStoreState = (0, import_react8.useRef)();
    var latestSelectedState = (0, import_react8.useRef)();
    var storeState = store3.getState();
    var selectedState;
    try {
      if (selector !== latestSelector.current || storeState !== latestStoreState.current || latestSubscriptionCallbackError.current) {
        var newSelectedState = selector(storeState);
        if (latestSelectedState.current === void 0 || !equalityFn(newSelectedState, latestSelectedState.current)) {
          selectedState = newSelectedState;
        } else {
          selectedState = latestSelectedState.current;
        }
      } else {
        selectedState = latestSelectedState.current;
      }
    } catch (err) {
      if (latestSubscriptionCallbackError.current) {
        err.message += "\nThe error may be correlated with this previous error:\n" + latestSubscriptionCallbackError.current.stack + "\n\n";
      }
      throw err;
    }
    useIsomorphicLayoutEffect2(function() {
      latestSelector.current = selector;
      latestStoreState.current = storeState;
      latestSelectedState.current = selectedState;
      latestSubscriptionCallbackError.current = void 0;
    });
    useIsomorphicLayoutEffect2(function() {
      function checkForUpdates() {
        try {
          var _newSelectedState = latestSelector.current(store3.getState());
          if (equalityFn(_newSelectedState, latestSelectedState.current)) {
            return;
          }
          latestSelectedState.current = _newSelectedState;
        } catch (err) {
          latestSubscriptionCallbackError.current = err;
        }
        forceRender();
      }
      subscription.onStateChange = checkForUpdates;
      subscription.trySubscribe();
      checkForUpdates();
      return function() {
        return subscription.tryUnsubscribe();
      };
    }, [store3, subscription]);
    return selectedState;
  }
  function createSelectorHook(context2) {
    if (context2 === void 0) {
      context2 = ReactReduxContext;
    }
    var useReduxContext2 = context2 === ReactReduxContext ? useReduxContext : function() {
      return (0, import_react8.useContext)(context2);
    };
    return function useSelector3(selector, equalityFn) {
      if (equalityFn === void 0) {
        equalityFn = refEquality;
      }
      if (!selector) {
        throw new Error("You must pass a selector to useSelector");
      }
      var _useReduxContext = useReduxContext2(), store3 = _useReduxContext.store, contextSub = _useReduxContext.subscription;
      var selectedState = useSelectorWithStoreAndSubscription(selector, equalityFn, store3, contextSub);
      (0, import_react8.useDebugValue)(selectedState);
      return selectedState;
    };
  }
  var useSelector = /* @__PURE__ */ createSelectorHook();

  // node_modules/react-redux/es/utils/reactBatchedUpdates.js
  var import_react_dom = __toESM(require_react_dom());

  // node_modules/react-redux/es/index.js
  setBatch(import_react_dom.unstable_batchedUpdates);

  // src/redux/hooks.ts
  var useSelector2 = useSelector;

  // src/pages/home/HomePage.tsx
  var import_react128 = __toESM(require_react());

  // node_modules/@babel/runtime/helpers/esm/typeof.js
  function _typeof(o3) {
    "@babel/helpers - typeof";
    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o4) {
      return typeof o4;
    } : function(o4) {
      return o4 && "function" == typeof Symbol && o4.constructor === Symbol && o4 !== Symbol.prototype ? "symbol" : typeof o4;
    }, _typeof(o3);
  }

  // node_modules/@babel/runtime/helpers/esm/toPrimitive.js
  function _toPrimitive(input, hint) {
    if (_typeof(input) !== "object" || input === null)
      return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== void 0) {
      var res = prim.call(input, hint || "default");
      if (_typeof(res) !== "object")
        return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }

  // node_modules/@babel/runtime/helpers/esm/toPropertyKey.js
  function _toPropertyKey(arg) {
    var key2 = _toPrimitive(arg, "string");
    return _typeof(key2) === "symbol" ? key2 : String(key2);
  }

  // node_modules/@babel/runtime/helpers/esm/defineProperty.js
  function _defineProperty(obj, key2, value) {
    key2 = _toPropertyKey(key2);
    if (key2 in obj) {
      Object.defineProperty(obj, key2, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key2] = value;
    }
    return obj;
  }

  // node_modules/@babel/runtime/helpers/esm/classCallCheck.js
  function _classCallCheck(instance2, Constructor) {
    if (!(instance2 instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  // node_modules/@babel/runtime/helpers/esm/createClass.js
  function _defineProperties(target, props) {
    for (var i3 = 0; i3 < props.length; i3++) {
      var descriptor = props[i3];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
    }
  }
  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {
      writable: false
    });
    return Constructor;
  }

  // node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js
  function _setPrototypeOf(o3, p2) {
    _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf5(o4, p3) {
      o4.__proto__ = p3;
      return o4;
    };
    return _setPrototypeOf(o3, p2);
  }

  // node_modules/@babel/runtime/helpers/esm/inherits.js
  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    Object.defineProperty(subClass, "prototype", {
      writable: false
    });
    if (superClass)
      _setPrototypeOf(subClass, superClass);
  }

  // node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js
  function _getPrototypeOf(o3) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf5(o4) {
      return o4.__proto__ || Object.getPrototypeOf(o4);
    };
    return _getPrototypeOf(o3);
  }

  // node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js
  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e3) {
      return false;
    }
  }

  // node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js
  function _assertThisInitialized(self2) {
    if (self2 === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self2;
  }

  // node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js
  function _possibleConstructorReturn(self2, call2) {
    if (call2 && (_typeof(call2) === "object" || typeof call2 === "function")) {
      return call2;
    } else if (call2 !== void 0) {
      throw new TypeError("Derived constructors may only return object or undefined");
    }
    return _assertThisInitialized(self2);
  }

  // node_modules/@babel/runtime/helpers/esm/createSuper.js
  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf(Derived), result2;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf(this).constructor;
        result2 = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result2 = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn(this, result2);
    };
  }

  // node_modules/antd/es/affix/index.js
  var import_classnames7 = __toESM(require_classnames());

  // node_modules/rc-resize-observer/es/index.js
  var React13 = __toESM(require_react());

  // node_modules/rc-util/es/Children/toArray.js
  var import_react9 = __toESM(require_react());
  var import_react_is2 = __toESM(require_react_is());
  function toArray(children) {
    var option = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var ret = [];
    import_react9.default.Children.forEach(children, function(child) {
      if ((child === void 0 || child === null) && !option.keepEmpty) {
        return;
      }
      if (Array.isArray(child)) {
        ret = ret.concat(toArray(child));
      } else if ((0, import_react_is2.isFragment)(child) && child.props) {
        ret = ret.concat(toArray(child.props.children, option));
      } else {
        ret.push(child);
      }
    });
    return ret;
  }

  // node_modules/rc-util/es/warning.js
  var warned = {};
  var preWarningFns = [];
  var preMessage = function preMessage2(fn2) {
    preWarningFns.push(fn2);
  };
  function warning5(valid, message) {
    if (!valid && console !== void 0) {
      var finalMessage = preWarningFns.reduce(function(msg, preMessageFn) {
        return preMessageFn(msg !== null && msg !== void 0 ? msg : "", "warning");
      }, message);
      if (finalMessage) {
        console.error("Warning: ".concat(finalMessage));
      }
    }
  }
  function note(valid, message) {
    if (!valid && console !== void 0) {
      var finalMessage = preWarningFns.reduce(function(msg, preMessageFn) {
        return preMessageFn(msg !== null && msg !== void 0 ? msg : "", "note");
      }, message);
      if (finalMessage) {
        console.warn("Note: ".concat(finalMessage));
      }
    }
  }
  function resetWarned() {
    warned = {};
  }
  function call(method4, valid, message) {
    if (!valid && !warned[message]) {
      method4(false, message);
      warned[message] = true;
    }
  }
  function warningOnce2(valid, message) {
    call(warning5, valid, message);
  }
  function noteOnce(valid, message) {
    call(note, valid, message);
  }
  warningOnce2.preMessage = preMessage;
  warningOnce2.resetWarned = resetWarned;
  warningOnce2.noteOnce = noteOnce;
  var warning_default = warningOnce2;

  // node_modules/@babel/runtime/helpers/esm/objectSpread2.js
  function ownKeys(e3, r4) {
    var t4 = Object.keys(e3);
    if (Object.getOwnPropertySymbols) {
      var o3 = Object.getOwnPropertySymbols(e3);
      r4 && (o3 = o3.filter(function(r5) {
        return Object.getOwnPropertyDescriptor(e3, r5).enumerable;
      })), t4.push.apply(t4, o3);
    }
    return t4;
  }
  function _objectSpread2(e3) {
    for (var r4 = 1; r4 < arguments.length; r4++) {
      var t4 = null != arguments[r4] ? arguments[r4] : {};
      r4 % 2 ? ownKeys(Object(t4), true).forEach(function(r5) {
        _defineProperty(e3, r5, t4[r5]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t4)) : ownKeys(Object(t4)).forEach(function(r5) {
        Object.defineProperty(e3, r5, Object.getOwnPropertyDescriptor(t4, r5));
      });
    }
    return e3;
  }

  // node_modules/rc-util/es/ref.js
  var import_react10 = __toESM(require_react());
  var import_react_is3 = __toESM(require_react_is());

  // node_modules/rc-util/es/hooks/useMemo.js
  var React8 = __toESM(require_react());
  function useMemo6(getValue5, condition, shouldUpdate) {
    var cacheRef = React8.useRef({});
    if (!("value" in cacheRef.current) || shouldUpdate(cacheRef.current.condition, condition)) {
      cacheRef.current.value = getValue5();
      cacheRef.current.condition = condition;
    }
    return cacheRef.current.value;
  }

  // node_modules/rc-util/es/ref.js
  function fillRef(ref, node) {
    if (typeof ref === "function") {
      ref(node);
    } else if (_typeof(ref) === "object" && ref && "current" in ref) {
      ref.current = node;
    }
  }
  function composeRef() {
    for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {
      refs[_key] = arguments[_key];
    }
    var refList = refs.filter(function(ref) {
      return ref;
    });
    if (refList.length <= 1) {
      return refList[0];
    }
    return function(node) {
      refs.forEach(function(ref) {
        fillRef(ref, node);
      });
    };
  }
  function useComposeRef() {
    for (var _len2 = arguments.length, refs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      refs[_key2] = arguments[_key2];
    }
    return useMemo6(function() {
      return composeRef.apply(void 0, refs);
    }, refs, function(prev, next) {
      return prev.length !== next.length || prev.every(function(ref, i3) {
        return ref !== next[i3];
      });
    });
  }
  function supportRef(nodeOrComponent) {
    var _type$prototype, _nodeOrComponent$prot;
    var type4 = (0, import_react_is3.isMemo)(nodeOrComponent) ? nodeOrComponent.type.type : nodeOrComponent.type;
    if (typeof type4 === "function" && !((_type$prototype = type4.prototype) !== null && _type$prototype !== void 0 && _type$prototype.render)) {
      return false;
    }
    if (typeof nodeOrComponent === "function" && !((_nodeOrComponent$prot = nodeOrComponent.prototype) !== null && _nodeOrComponent$prot !== void 0 && _nodeOrComponent$prot.render)) {
      return false;
    }
    return true;
  }

  // node_modules/rc-resize-observer/es/SingleObserver/index.js
  var React12 = __toESM(require_react());

  // node_modules/rc-util/es/Dom/findDOMNode.js
  var import_react11 = __toESM(require_react());
  var import_react_dom2 = __toESM(require_react_dom());
  function isDOM(node) {
    return node instanceof HTMLElement || node instanceof SVGElement;
  }
  function findDOMNode(node) {
    if (isDOM(node)) {
      return node;
    }
    if (node instanceof import_react11.default.Component) {
      return import_react_dom2.default.findDOMNode(node);
    }
    return null;
  }

  // node_modules/resize-observer-polyfill/dist/ResizeObserver.es.js
  var MapShim = function() {
    if (typeof Map !== "undefined") {
      return Map;
    }
    function getIndex(arr, key2) {
      var result2 = -1;
      arr.some(function(entry, index2) {
        if (entry[0] === key2) {
          result2 = index2;
          return true;
        }
        return false;
      });
      return result2;
    }
    return (
      /** @class */
      function() {
        function class_1() {
          this.__entries__ = [];
        }
        Object.defineProperty(class_1.prototype, "size", {
          /**
           * @returns {boolean}
           */
          get: function() {
            return this.__entries__.length;
          },
          enumerable: true,
          configurable: true
        });
        class_1.prototype.get = function(key2) {
          var index2 = getIndex(this.__entries__, key2);
          var entry = this.__entries__[index2];
          return entry && entry[1];
        };
        class_1.prototype.set = function(key2, value) {
          var index2 = getIndex(this.__entries__, key2);
          if (~index2) {
            this.__entries__[index2][1] = value;
          } else {
            this.__entries__.push([key2, value]);
          }
        };
        class_1.prototype.delete = function(key2) {
          var entries = this.__entries__;
          var index2 = getIndex(entries, key2);
          if (~index2) {
            entries.splice(index2, 1);
          }
        };
        class_1.prototype.has = function(key2) {
          return !!~getIndex(this.__entries__, key2);
        };
        class_1.prototype.clear = function() {
          this.__entries__.splice(0);
        };
        class_1.prototype.forEach = function(callback, ctx) {
          if (ctx === void 0) {
            ctx = null;
          }
          for (var _i = 0, _a = this.__entries__; _i < _a.length; _i++) {
            var entry = _a[_i];
            callback.call(ctx, entry[1], entry[0]);
          }
        };
        return class_1;
      }()
    );
  }();
  var isBrowser2 = typeof window !== "undefined" && typeof document !== "undefined" && window.document === document;
  var global$1 = function() {
    if (typeof global !== "undefined" && global.Math === Math) {
      return global;
    }
    if (typeof self !== "undefined" && self.Math === Math) {
      return self;
    }
    if (typeof window !== "undefined" && window.Math === Math) {
      return window;
    }
    return Function("return this")();
  }();
  var requestAnimationFrame$1 = function() {
    if (typeof requestAnimationFrame === "function") {
      return requestAnimationFrame.bind(global$1);
    }
    return function(callback) {
      return setTimeout(function() {
        return callback(Date.now());
      }, 1e3 / 60);
    };
  }();
  var trailingTimeout = 2;
  function throttle(callback, delay) {
    var leadingCall = false, trailingCall = false, lastCallTime = 0;
    function resolvePending() {
      if (leadingCall) {
        leadingCall = false;
        callback();
      }
      if (trailingCall) {
        proxy();
      }
    }
    function timeoutCallback() {
      requestAnimationFrame$1(resolvePending);
    }
    function proxy() {
      var timeStamp = Date.now();
      if (leadingCall) {
        if (timeStamp - lastCallTime < trailingTimeout) {
          return;
        }
        trailingCall = true;
      } else {
        leadingCall = true;
        trailingCall = false;
        setTimeout(timeoutCallback, delay);
      }
      lastCallTime = timeStamp;
    }
    return proxy;
  }
  var REFRESH_DELAY = 20;
  var transitionKeys = ["top", "right", "bottom", "left", "width", "height", "size", "weight"];
  var mutationObserverSupported = typeof MutationObserver !== "undefined";
  var ResizeObserverController = (
    /** @class */
    function() {
      function ResizeObserverController2() {
        this.connected_ = false;
        this.mutationEventsAdded_ = false;
        this.mutationsObserver_ = null;
        this.observers_ = [];
        this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);
        this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);
      }
      ResizeObserverController2.prototype.addObserver = function(observer) {
        if (!~this.observers_.indexOf(observer)) {
          this.observers_.push(observer);
        }
        if (!this.connected_) {
          this.connect_();
        }
      };
      ResizeObserverController2.prototype.removeObserver = function(observer) {
        var observers2 = this.observers_;
        var index2 = observers2.indexOf(observer);
        if (~index2) {
          observers2.splice(index2, 1);
        }
        if (!observers2.length && this.connected_) {
          this.disconnect_();
        }
      };
      ResizeObserverController2.prototype.refresh = function() {
        var changesDetected = this.updateObservers_();
        if (changesDetected) {
          this.refresh();
        }
      };
      ResizeObserverController2.prototype.updateObservers_ = function() {
        var activeObservers = this.observers_.filter(function(observer) {
          return observer.gatherActive(), observer.hasActive();
        });
        activeObservers.forEach(function(observer) {
          return observer.broadcastActive();
        });
        return activeObservers.length > 0;
      };
      ResizeObserverController2.prototype.connect_ = function() {
        if (!isBrowser2 || this.connected_) {
          return;
        }
        document.addEventListener("transitionend", this.onTransitionEnd_);
        window.addEventListener("resize", this.refresh);
        if (mutationObserverSupported) {
          this.mutationsObserver_ = new MutationObserver(this.refresh);
          this.mutationsObserver_.observe(document, {
            attributes: true,
            childList: true,
            characterData: true,
            subtree: true
          });
        } else {
          document.addEventListener("DOMSubtreeModified", this.refresh);
          this.mutationEventsAdded_ = true;
        }
        this.connected_ = true;
      };
      ResizeObserverController2.prototype.disconnect_ = function() {
        if (!isBrowser2 || !this.connected_) {
          return;
        }
        document.removeEventListener("transitionend", this.onTransitionEnd_);
        window.removeEventListener("resize", this.refresh);
        if (this.mutationsObserver_) {
          this.mutationsObserver_.disconnect();
        }
        if (this.mutationEventsAdded_) {
          document.removeEventListener("DOMSubtreeModified", this.refresh);
        }
        this.mutationsObserver_ = null;
        this.mutationEventsAdded_ = false;
        this.connected_ = false;
      };
      ResizeObserverController2.prototype.onTransitionEnd_ = function(_a) {
        var _b = _a.propertyName, propertyName = _b === void 0 ? "" : _b;
        var isReflowProperty = transitionKeys.some(function(key2) {
          return !!~propertyName.indexOf(key2);
        });
        if (isReflowProperty) {
          this.refresh();
        }
      };
      ResizeObserverController2.getInstance = function() {
        if (!this.instance_) {
          this.instance_ = new ResizeObserverController2();
        }
        return this.instance_;
      };
      ResizeObserverController2.instance_ = null;
      return ResizeObserverController2;
    }()
  );
  var defineConfigurable = function(target, props) {
    for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {
      var key2 = _a[_i];
      Object.defineProperty(target, key2, {
        value: props[key2],
        enumerable: false,
        writable: false,
        configurable: true
      });
    }
    return target;
  };
  var getWindowOf = function(target) {
    var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView;
    return ownerGlobal || global$1;
  };
  var emptyRect = createRectInit(0, 0, 0, 0);
  function toFloat(value) {
    return parseFloat(value) || 0;
  }
  function getBordersSize(styles) {
    var positions = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      positions[_i - 1] = arguments[_i];
    }
    return positions.reduce(function(size, position) {
      var value = styles["border-" + position + "-width"];
      return size + toFloat(value);
    }, 0);
  }
  function getPaddings(styles) {
    var positions = ["top", "right", "bottom", "left"];
    var paddings = {};
    for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {
      var position = positions_1[_i];
      var value = styles["padding-" + position];
      paddings[position] = toFloat(value);
    }
    return paddings;
  }
  function getSVGContentRect(target) {
    var bbox = target.getBBox();
    return createRectInit(0, 0, bbox.width, bbox.height);
  }
  function getHTMLElementContentRect(target) {
    var clientWidth = target.clientWidth, clientHeight = target.clientHeight;
    if (!clientWidth && !clientHeight) {
      return emptyRect;
    }
    var styles = getWindowOf(target).getComputedStyle(target);
    var paddings = getPaddings(styles);
    var horizPad = paddings.left + paddings.right;
    var vertPad = paddings.top + paddings.bottom;
    var width = toFloat(styles.width), height = toFloat(styles.height);
    if (styles.boxSizing === "border-box") {
      if (Math.round(width + horizPad) !== clientWidth) {
        width -= getBordersSize(styles, "left", "right") + horizPad;
      }
      if (Math.round(height + vertPad) !== clientHeight) {
        height -= getBordersSize(styles, "top", "bottom") + vertPad;
      }
    }
    if (!isDocumentElement(target)) {
      var vertScrollbar = Math.round(width + horizPad) - clientWidth;
      var horizScrollbar = Math.round(height + vertPad) - clientHeight;
      if (Math.abs(vertScrollbar) !== 1) {
        width -= vertScrollbar;
      }
      if (Math.abs(horizScrollbar) !== 1) {
        height -= horizScrollbar;
      }
    }
    return createRectInit(paddings.left, paddings.top, width, height);
  }
  var isSVGGraphicsElement = function() {
    if (typeof SVGGraphicsElement !== "undefined") {
      return function(target) {
        return target instanceof getWindowOf(target).SVGGraphicsElement;
      };
    }
    return function(target) {
      return target instanceof getWindowOf(target).SVGElement && typeof target.getBBox === "function";
    };
  }();
  function isDocumentElement(target) {
    return target === getWindowOf(target).document.documentElement;
  }
  function getContentRect(target) {
    if (!isBrowser2) {
      return emptyRect;
    }
    if (isSVGGraphicsElement(target)) {
      return getSVGContentRect(target);
    }
    return getHTMLElementContentRect(target);
  }
  function createReadOnlyRect(_a) {
    var x2 = _a.x, y2 = _a.y, width = _a.width, height = _a.height;
    var Constr = typeof DOMRectReadOnly !== "undefined" ? DOMRectReadOnly : Object;
    var rect = Object.create(Constr.prototype);
    defineConfigurable(rect, {
      x: x2,
      y: y2,
      width,
      height,
      top: y2,
      right: x2 + width,
      bottom: height + y2,
      left: x2
    });
    return rect;
  }
  function createRectInit(x2, y2, width, height) {
    return { x: x2, y: y2, width, height };
  }
  var ResizeObservation = (
    /** @class */
    function() {
      function ResizeObservation2(target) {
        this.broadcastWidth = 0;
        this.broadcastHeight = 0;
        this.contentRect_ = createRectInit(0, 0, 0, 0);
        this.target = target;
      }
      ResizeObservation2.prototype.isActive = function() {
        var rect = getContentRect(this.target);
        this.contentRect_ = rect;
        return rect.width !== this.broadcastWidth || rect.height !== this.broadcastHeight;
      };
      ResizeObservation2.prototype.broadcastRect = function() {
        var rect = this.contentRect_;
        this.broadcastWidth = rect.width;
        this.broadcastHeight = rect.height;
        return rect;
      };
      return ResizeObservation2;
    }()
  );
  var ResizeObserverEntry = (
    /** @class */
    function() {
      function ResizeObserverEntry2(target, rectInit) {
        var contentRect = createReadOnlyRect(rectInit);
        defineConfigurable(this, { target, contentRect });
      }
      return ResizeObserverEntry2;
    }()
  );
  var ResizeObserverSPI = (
    /** @class */
    function() {
      function ResizeObserverSPI2(callback, controller, callbackCtx) {
        this.activeObservations_ = [];
        this.observations_ = new MapShim();
        if (typeof callback !== "function") {
          throw new TypeError("The callback provided as parameter 1 is not a function.");
        }
        this.callback_ = callback;
        this.controller_ = controller;
        this.callbackCtx_ = callbackCtx;
      }
      ResizeObserverSPI2.prototype.observe = function(target) {
        if (!arguments.length) {
          throw new TypeError("1 argument required, but only 0 present.");
        }
        if (typeof Element === "undefined" || !(Element instanceof Object)) {
          return;
        }
        if (!(target instanceof getWindowOf(target).Element)) {
          throw new TypeError('parameter 1 is not of type "Element".');
        }
        var observations = this.observations_;
        if (observations.has(target)) {
          return;
        }
        observations.set(target, new ResizeObservation(target));
        this.controller_.addObserver(this);
        this.controller_.refresh();
      };
      ResizeObserverSPI2.prototype.unobserve = function(target) {
        if (!arguments.length) {
          throw new TypeError("1 argument required, but only 0 present.");
        }
        if (typeof Element === "undefined" || !(Element instanceof Object)) {
          return;
        }
        if (!(target instanceof getWindowOf(target).Element)) {
          throw new TypeError('parameter 1 is not of type "Element".');
        }
        var observations = this.observations_;
        if (!observations.has(target)) {
          return;
        }
        observations.delete(target);
        if (!observations.size) {
          this.controller_.removeObserver(this);
        }
      };
      ResizeObserverSPI2.prototype.disconnect = function() {
        this.clearActive();
        this.observations_.clear();
        this.controller_.removeObserver(this);
      };
      ResizeObserverSPI2.prototype.gatherActive = function() {
        var _this = this;
        this.clearActive();
        this.observations_.forEach(function(observation) {
          if (observation.isActive()) {
            _this.activeObservations_.push(observation);
          }
        });
      };
      ResizeObserverSPI2.prototype.broadcastActive = function() {
        if (!this.hasActive()) {
          return;
        }
        var ctx = this.callbackCtx_;
        var entries = this.activeObservations_.map(function(observation) {
          return new ResizeObserverEntry(observation.target, observation.broadcastRect());
        });
        this.callback_.call(ctx, entries, ctx);
        this.clearActive();
      };
      ResizeObserverSPI2.prototype.clearActive = function() {
        this.activeObservations_.splice(0);
      };
      ResizeObserverSPI2.prototype.hasActive = function() {
        return this.activeObservations_.length > 0;
      };
      return ResizeObserverSPI2;
    }()
  );
  var observers = typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : new MapShim();
  var ResizeObserver = (
    /** @class */
    function() {
      function ResizeObserver3(callback) {
        if (!(this instanceof ResizeObserver3)) {
          throw new TypeError("Cannot call a class as a function.");
        }
        if (!arguments.length) {
          throw new TypeError("1 argument required, but only 0 present.");
        }
        var controller = ResizeObserverController.getInstance();
        var observer = new ResizeObserverSPI(callback, controller, this);
        observers.set(this, observer);
      }
      return ResizeObserver3;
    }()
  );
  [
    "observe",
    "unobserve",
    "disconnect"
  ].forEach(function(method4) {
    ResizeObserver.prototype[method4] = function() {
      var _a;
      return (_a = observers.get(this))[method4].apply(_a, arguments);
    };
  });
  var index = function() {
    if (typeof global$1.ResizeObserver !== "undefined") {
      return global$1.ResizeObserver;
    }
    return ResizeObserver;
  }();
  var ResizeObserver_es_default = index;

  // node_modules/rc-resize-observer/es/utils/observerUtil.js
  var elementListeners = /* @__PURE__ */ new Map();
  function onResize(entities) {
    entities.forEach(function(entity) {
      var _elementListeners$get;
      var target = entity.target;
      (_elementListeners$get = elementListeners.get(target)) === null || _elementListeners$get === void 0 ? void 0 : _elementListeners$get.forEach(function(listener2) {
        return listener2(target);
      });
    });
  }
  var resizeObserver = new ResizeObserver_es_default(onResize);
  function observe(element, callback) {
    if (!elementListeners.has(element)) {
      elementListeners.set(element, /* @__PURE__ */ new Set());
      resizeObserver.observe(element);
    }
    elementListeners.get(element).add(callback);
  }
  function unobserve(element, callback) {
    if (elementListeners.has(element)) {
      elementListeners.get(element).delete(callback);
      if (!elementListeners.get(element).size) {
        resizeObserver.unobserve(element);
        elementListeners.delete(element);
      }
    }
  }

  // node_modules/rc-resize-observer/es/SingleObserver/DomWrapper.js
  var React10 = __toESM(require_react());
  var DomWrapper = /* @__PURE__ */ function(_React$Component) {
    _inherits(DomWrapper3, _React$Component);
    var _super = _createSuper(DomWrapper3);
    function DomWrapper3() {
      _classCallCheck(this, DomWrapper3);
      return _super.apply(this, arguments);
    }
    _createClass(DomWrapper3, [{
      key: "render",
      value: function render2() {
        return this.props.children;
      }
    }]);
    return DomWrapper3;
  }(React10.Component);

  // node_modules/rc-resize-observer/es/Collection.js
  var React11 = __toESM(require_react());
  var CollectionContext = /* @__PURE__ */ React11.createContext(null);
  function Collection(_ref) {
    var children = _ref.children, onBatchResize = _ref.onBatchResize;
    var resizeIdRef = React11.useRef(0);
    var resizeInfosRef = React11.useRef([]);
    var onCollectionResize = React11.useContext(CollectionContext);
    var onResize2 = React11.useCallback(function(size, element, data) {
      resizeIdRef.current += 1;
      var currentId = resizeIdRef.current;
      resizeInfosRef.current.push({
        size,
        element,
        data
      });
      Promise.resolve().then(function() {
        if (currentId === resizeIdRef.current) {
          onBatchResize === null || onBatchResize === void 0 ? void 0 : onBatchResize(resizeInfosRef.current);
          resizeInfosRef.current = [];
        }
      });
      onCollectionResize === null || onCollectionResize === void 0 ? void 0 : onCollectionResize(size, element, data);
    }, [onBatchResize, onCollectionResize]);
    return /* @__PURE__ */ React11.createElement(CollectionContext.Provider, {
      value: onResize2
    }, children);
  }

  // node_modules/rc-resize-observer/es/SingleObserver/index.js
  function SingleObserver(props, ref) {
    var children = props.children, disabled = props.disabled;
    var elementRef = React12.useRef(null);
    var wrapperRef = React12.useRef(null);
    var onCollectionResize = React12.useContext(CollectionContext);
    var isRenderProps = typeof children === "function";
    var mergedChildren = isRenderProps ? children(elementRef) : children;
    var sizeRef = React12.useRef({
      width: -1,
      height: -1,
      offsetWidth: -1,
      offsetHeight: -1
    });
    var canRef = !isRenderProps && /* @__PURE__ */ React12.isValidElement(mergedChildren) && supportRef(mergedChildren);
    var originRef = canRef ? mergedChildren.ref : null;
    var mergedRef = React12.useMemo(function() {
      return composeRef(originRef, elementRef);
    }, [originRef, elementRef]);
    var getDom = function getDom2() {
      return findDOMNode(elementRef.current) || findDOMNode(wrapperRef.current);
    };
    React12.useImperativeHandle(ref, function() {
      return getDom();
    });
    var propsRef = React12.useRef(props);
    propsRef.current = props;
    var onInternalResize = React12.useCallback(function(target) {
      var _propsRef$current = propsRef.current, onResize2 = _propsRef$current.onResize, data = _propsRef$current.data;
      var _target$getBoundingCl = target.getBoundingClientRect(), width = _target$getBoundingCl.width, height = _target$getBoundingCl.height;
      var offsetWidth = target.offsetWidth, offsetHeight = target.offsetHeight;
      var fixedWidth = Math.floor(width);
      var fixedHeight = Math.floor(height);
      if (sizeRef.current.width !== fixedWidth || sizeRef.current.height !== fixedHeight || sizeRef.current.offsetWidth !== offsetWidth || sizeRef.current.offsetHeight !== offsetHeight) {
        var size = {
          width: fixedWidth,
          height: fixedHeight,
          offsetWidth,
          offsetHeight
        };
        sizeRef.current = size;
        var mergedOffsetWidth = offsetWidth === Math.round(width) ? width : offsetWidth;
        var mergedOffsetHeight = offsetHeight === Math.round(height) ? height : offsetHeight;
        var sizeInfo = _objectSpread2(_objectSpread2({}, size), {}, {
          offsetWidth: mergedOffsetWidth,
          offsetHeight: mergedOffsetHeight
        });
        onCollectionResize === null || onCollectionResize === void 0 ? void 0 : onCollectionResize(sizeInfo, target, data);
        if (onResize2) {
          Promise.resolve().then(function() {
            onResize2(sizeInfo, target);
          });
        }
      }
    }, []);
    React12.useEffect(function() {
      var currentElement = getDom();
      if (currentElement && !disabled) {
        observe(currentElement, onInternalResize);
      }
      return function() {
        return unobserve(currentElement, onInternalResize);
      };
    }, [elementRef.current, disabled]);
    return /* @__PURE__ */ React12.createElement(DomWrapper, {
      ref: wrapperRef
    }, canRef ? /* @__PURE__ */ React12.cloneElement(mergedChildren, {
      ref: mergedRef
    }) : mergedChildren);
  }
  var RefSingleObserver = /* @__PURE__ */ React12.forwardRef(SingleObserver);
  if (true) {
    RefSingleObserver.displayName = "SingleObserver";
  }
  var SingleObserver_default = RefSingleObserver;

  // node_modules/rc-resize-observer/es/index.js
  var INTERNAL_PREFIX_KEY = "rc-observer-key";
  function ResizeObserver2(props, ref) {
    var children = props.children;
    var childNodes = typeof children === "function" ? [children] : toArray(children);
    if (true) {
      if (childNodes.length > 1) {
        warning5(false, "Find more than one child node with `children` in ResizeObserver. Please use ResizeObserver.Collection instead.");
      } else if (childNodes.length === 0) {
        warning5(false, "`children` of ResizeObserver is empty. Nothing is in observe.");
      }
    }
    return childNodes.map(function(child, index2) {
      var key2 = (child === null || child === void 0 ? void 0 : child.key) || "".concat(INTERNAL_PREFIX_KEY, "-").concat(index2);
      return /* @__PURE__ */ React13.createElement(SingleObserver_default, _extends({}, props, {
        key: key2,
        ref: index2 === 0 ? ref : void 0
      }), child);
    });
  }
  var RefResizeObserver = /* @__PURE__ */ React13.forwardRef(ResizeObserver2);
  if (true) {
    RefResizeObserver.displayName = "ResizeObserver";
  }
  RefResizeObserver.Collection = Collection;
  var es_default2 = RefResizeObserver;

  // node_modules/rc-util/es/omit.js
  function omit(obj, fields) {
    var clone2 = _objectSpread2({}, obj);
    if (Array.isArray(fields)) {
      fields.forEach(function(key2) {
        delete clone2[key2];
      });
    }
    return clone2;
  }

  // node_modules/antd/es/affix/index.js
  var React48 = __toESM(require_react());

  // node_modules/antd/node_modules/@ant-design/icons/es/components/Context.js
  var import_react12 = __toESM(require_react());
  var IconContext = /* @__PURE__ */ (0, import_react12.createContext)({});
  var Context_default = IconContext;

  // node_modules/antd/es/config-provider/index.js
  var React47 = __toESM(require_react());

  // node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js
  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i3 = 0, arr2 = new Array(len); i3 < len; i3++)
      arr2[i3] = arr[i3];
    return arr2;
  }

  // node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js
  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr))
      return _arrayLikeToArray(arr);
  }

  // node_modules/@babel/runtime/helpers/esm/iterableToArray.js
  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
      return Array.from(iter);
  }

  // node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js
  function _unsupportedIterableToArray(o3, minLen) {
    if (!o3)
      return;
    if (typeof o3 === "string")
      return _arrayLikeToArray(o3, minLen);
    var n4 = Object.prototype.toString.call(o3).slice(8, -1);
    if (n4 === "Object" && o3.constructor)
      n4 = o3.constructor.name;
    if (n4 === "Map" || n4 === "Set")
      return Array.from(o3);
    if (n4 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n4))
      return _arrayLikeToArray(o3, minLen);
  }

  // node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js
  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  // node_modules/@babel/runtime/helpers/esm/toConsumableArray.js
  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
  }

  // node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js
  function _arrayWithHoles(arr) {
    if (Array.isArray(arr))
      return arr;
  }

  // node_modules/@babel/runtime/helpers/esm/nonIterableRest.js
  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  // node_modules/@babel/runtime/helpers/esm/toArray.js
  function _toArray(arr) {
    return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest();
  }

  // node_modules/rc-util/es/utils/get.js
  function get(entity, path2) {
    var current = entity;
    for (var i3 = 0; i3 < path2.length; i3 += 1) {
      if (current === null || current === void 0) {
        return void 0;
      }
      current = current[path2[i3]];
    }
    return current;
  }

  // node_modules/rc-util/es/utils/set.js
  function internalSet(entity, paths, value, removeIfUndefined) {
    if (!paths.length) {
      return value;
    }
    var _paths = _toArray(paths), path2 = _paths[0], restPath = _paths.slice(1);
    var clone2;
    if (!entity && typeof path2 === "number") {
      clone2 = [];
    } else if (Array.isArray(entity)) {
      clone2 = _toConsumableArray(entity);
    } else {
      clone2 = _objectSpread2({}, entity);
    }
    if (removeIfUndefined && value === void 0 && restPath.length === 1) {
      delete clone2[path2][restPath[0]];
    } else {
      clone2[path2] = internalSet(clone2[path2], restPath, value, removeIfUndefined);
    }
    return clone2;
  }
  function set(entity, paths, value) {
    var removeIfUndefined = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
    if (paths.length && removeIfUndefined && value === void 0 && !get(entity, paths.slice(0, -1))) {
      return entity;
    }
    return internalSet(entity, paths, value, removeIfUndefined);
  }
  function isObject(obj) {
    return _typeof(obj) === "object" && obj !== null && Object.getPrototypeOf(obj) === Object.prototype;
  }
  function createEmpty(source) {
    return Array.isArray(source) ? [] : {};
  }
  var keys = typeof Reflect === "undefined" ? Object.keys : Reflect.ownKeys;
  function merge() {
    for (var _len = arguments.length, sources = new Array(_len), _key = 0; _key < _len; _key++) {
      sources[_key] = arguments[_key];
    }
    var clone2 = createEmpty(sources[0]);
    sources.forEach(function(src) {
      function internalMerge(path2, parentLoopSet) {
        var loopSet = new Set(parentLoopSet);
        var value = get(src, path2);
        var isArr = Array.isArray(value);
        if (isArr || isObject(value)) {
          if (!loopSet.has(value)) {
            loopSet.add(value);
            var originValue = get(clone2, path2);
            if (isArr) {
              clone2 = set(clone2, path2, []);
            } else if (!originValue || _typeof(originValue) !== "object") {
              clone2 = set(clone2, path2, createEmpty(value));
            }
            keys(value).forEach(function(key2) {
              internalMerge([].concat(_toConsumableArray(path2), [key2]), loopSet);
            });
          }
        } else {
          clone2 = set(clone2, path2, value);
        }
      }
      internalMerge([]);
    });
    return clone2;
  }

  // node_modules/antd/es/form/validateMessagesContext.js
  var import_react13 = __toESM(require_react());
  var validateMessagesContext_default = /* @__PURE__ */ (0, import_react13.createContext)(void 0);

  // node_modules/antd/es/locale-provider/index.js
  var React14 = __toESM(require_react());

  // node_modules/antd/es/_util/warning.js
  function noop() {
  }
  var warning6 = noop;
  if (true) {
    warning6 = function warning12(valid, component, message) {
      warning_default(valid, "[antd: ".concat(component, "] ").concat(message));
      if (false) {
        resetWarned();
      }
    };
  }
  var warning_default2 = warning6;

  // node_modules/rc-pagination/es/locale/en_US.js
  var en_US_default = {
    // Options.jsx
    items_per_page: "/ page",
    jump_to: "Go to",
    jump_to_confirm: "confirm",
    page: "Page",
    // Pagination.jsx
    prev_page: "Previous Page",
    next_page: "Next Page",
    prev_5: "Previous 5 Pages",
    next_5: "Next 5 Pages",
    prev_3: "Previous 3 Pages",
    next_3: "Next 3 Pages",
    page_size: "Page Size"
  };

  // node_modules/rc-picker/es/locale/en_US.js
  var locale = {
    locale: "en_US",
    today: "Today",
    now: "Now",
    backToToday: "Back to today",
    ok: "OK",
    clear: "Clear",
    month: "Month",
    year: "Year",
    timeSelect: "select time",
    dateSelect: "select date",
    weekSelect: "Choose a week",
    monthSelect: "Choose a month",
    yearSelect: "Choose a year",
    decadeSelect: "Choose a decade",
    yearFormat: "YYYY",
    dateFormat: "M/D/YYYY",
    dayFormat: "D",
    dateTimeFormat: "M/D/YYYY HH:mm:ss",
    monthBeforeYear: true,
    previousMonth: "Previous month (PageUp)",
    nextMonth: "Next month (PageDown)",
    previousYear: "Last year (Control + left)",
    nextYear: "Next year (Control + right)",
    previousDecade: "Last decade",
    nextDecade: "Next decade",
    previousCentury: "Last century",
    nextCentury: "Next century"
  };
  var en_US_default2 = locale;

  // node_modules/antd/es/time-picker/locale/en_US.js
  var locale2 = {
    placeholder: "Select time",
    rangePlaceholder: ["Start time", "End time"]
  };
  var en_US_default3 = locale2;

  // node_modules/antd/es/date-picker/locale/en_US.js
  var locale3 = {
    lang: _extends({
      placeholder: "Select date",
      yearPlaceholder: "Select year",
      quarterPlaceholder: "Select quarter",
      monthPlaceholder: "Select month",
      weekPlaceholder: "Select week",
      rangePlaceholder: ["Start date", "End date"],
      rangeYearPlaceholder: ["Start year", "End year"],
      rangeQuarterPlaceholder: ["Start quarter", "End quarter"],
      rangeMonthPlaceholder: ["Start month", "End month"],
      rangeWeekPlaceholder: ["Start week", "End week"]
    }, en_US_default2),
    timePickerLocale: _extends({}, en_US_default3)
  };
  var en_US_default4 = locale3;

  // node_modules/antd/es/calendar/locale/en_US.js
  var en_US_default5 = en_US_default4;

  // node_modules/antd/es/locale/default.js
  var typeTemplate = "${label} is not a valid ${type}";
  var localeValues = {
    locale: "en",
    Pagination: en_US_default,
    DatePicker: en_US_default4,
    TimePicker: en_US_default3,
    Calendar: en_US_default5,
    global: {
      placeholder: "Please select"
    },
    Table: {
      filterTitle: "Filter menu",
      filterConfirm: "OK",
      filterReset: "Reset",
      filterEmptyText: "No filters",
      filterCheckall: "Select all items",
      filterSearchPlaceholder: "Search in filters",
      emptyText: "No data",
      selectAll: "Select current page",
      selectInvert: "Invert current page",
      selectNone: "Clear all data",
      selectionAll: "Select all data",
      sortTitle: "Sort",
      expand: "Expand row",
      collapse: "Collapse row",
      triggerDesc: "Click to sort descending",
      triggerAsc: "Click to sort ascending",
      cancelSort: "Click to cancel sorting"
    },
    Modal: {
      okText: "OK",
      cancelText: "Cancel",
      justOkText: "OK"
    },
    Popconfirm: {
      okText: "OK",
      cancelText: "Cancel"
    },
    Transfer: {
      titles: ["", ""],
      searchPlaceholder: "Search here",
      itemUnit: "item",
      itemsUnit: "items",
      remove: "Remove",
      selectCurrent: "Select current page",
      removeCurrent: "Remove current page",
      selectAll: "Select all data",
      removeAll: "Remove all data",
      selectInvert: "Invert current page"
    },
    Upload: {
      uploading: "Uploading...",
      removeFile: "Remove file",
      uploadError: "Upload error",
      previewFile: "Preview file",
      downloadFile: "Download file"
    },
    Empty: {
      description: "No data"
    },
    Icon: {
      icon: "icon"
    },
    Text: {
      edit: "Edit",
      copy: "Copy",
      copied: "Copied",
      expand: "Expand"
    },
    PageHeader: {
      back: "Back"
    },
    Form: {
      optional: "(optional)",
      defaultValidateMessages: {
        "default": "Field validation error for ${label}",
        required: "Please enter ${label}",
        "enum": "${label} must be one of [${enum}]",
        whitespace: "${label} cannot be a blank character",
        date: {
          format: "${label} date format is invalid",
          parse: "${label} cannot be converted to a date",
          invalid: "${label} is an invalid date"
        },
        types: {
          string: typeTemplate,
          method: typeTemplate,
          array: typeTemplate,
          object: typeTemplate,
          number: typeTemplate,
          date: typeTemplate,
          "boolean": typeTemplate,
          integer: typeTemplate,
          "float": typeTemplate,
          regexp: typeTemplate,
          email: typeTemplate,
          url: typeTemplate,
          hex: typeTemplate
        },
        string: {
          len: "${label} must be ${len} characters",
          min: "${label} must be at least ${min} characters",
          max: "${label} must be up to ${max} characters",
          range: "${label} must be between ${min}-${max} characters"
        },
        number: {
          len: "${label} must be equal to ${len}",
          min: "${label} must be minimum ${min}",
          max: "${label} must be maximum ${max}",
          range: "${label} must be between ${min}-${max}"
        },
        array: {
          len: "Must be ${len} ${label}",
          min: "At least ${min} ${label}",
          max: "At most ${max} ${label}",
          range: "The amount of ${label} must be between ${min}-${max}"
        },
        pattern: {
          mismatch: "${label} does not match the pattern ${pattern}"
        }
      }
    },
    Image: {
      preview: "Preview"
    }
  };
  var default_default = localeValues;

  // node_modules/antd/es/modal/locale.js
  var runtimeLocale = _extends({}, default_default.Modal);
  function changeConfirmLocale(newLocale) {
    if (newLocale) {
      runtimeLocale = _extends(_extends({}, runtimeLocale), newLocale);
    } else {
      runtimeLocale = _extends({}, default_default.Modal);
    }
  }

  // node_modules/antd/es/locale-provider/context.js
  var import_react14 = __toESM(require_react());
  var LocaleContext = /* @__PURE__ */ (0, import_react14.createContext)(void 0);
  var context_default = LocaleContext;

  // node_modules/antd/es/locale-provider/index.js
  var ANT_MARK = "internalMark";
  var LocaleProvider = function LocaleProvider2(props) {
    var _props$locale = props.locale, locale4 = _props$locale === void 0 ? {} : _props$locale, children = props.children, _ANT_MARK__ = props._ANT_MARK__;
    if (true) {
      true ? warning_default2(_ANT_MARK__ === ANT_MARK, "LocaleProvider", "`LocaleProvider` is deprecated. Please use `locale` with `ConfigProvider` instead: http://u.ant.design/locale") : void 0;
    }
    React14.useEffect(function() {
      changeConfirmLocale(locale4 && locale4.Modal);
      return function() {
        changeConfirmLocale();
      };
    }, [locale4]);
    var getMemoizedContextValue = React14.useMemo(function() {
      return _extends(_extends({}, locale4), {
        exist: true
      });
    }, [locale4]);
    return /* @__PURE__ */ React14.createElement(context_default.Provider, {
      value: getMemoizedContextValue
    }, children);
  };
  var locale_provider_default = LocaleProvider;

  // node_modules/antd/es/locale-provider/LocaleReceiver.js
  var React15 = __toESM(require_react());

  // node_modules/antd/es/locale-provider/default.js
  var default_default2 = default_default;

  // node_modules/antd/es/locale-provider/LocaleReceiver.js
  var LocaleReceiver = function LocaleReceiver2(props) {
    var _props$componentName = props.componentName, componentName = _props$componentName === void 0 ? "global" : _props$componentName, defaultLocale = props.defaultLocale, children = props.children;
    var antLocale = React15.useContext(context_default);
    var getLocale = React15.useMemo(function() {
      var _a;
      var locale4 = defaultLocale || default_default2[componentName];
      var localeFromContext = (_a = antLocale === null || antLocale === void 0 ? void 0 : antLocale[componentName]) !== null && _a !== void 0 ? _a : {};
      return _extends(_extends({}, locale4 instanceof Function ? locale4() : locale4), localeFromContext || {});
    }, [componentName, defaultLocale, antLocale]);
    var getLocaleCode = React15.useMemo(function() {
      var localeCode = antLocale && antLocale.locale;
      if (antLocale && antLocale.exist && !localeCode) {
        return default_default2.locale;
      }
      return localeCode;
    }, [antLocale]);
    return children(getLocale, getLocaleCode, antLocale);
  };
  var LocaleReceiver_default = LocaleReceiver;
  var useLocaleReceiver = function useLocaleReceiver2(componentName, defaultLocale) {
    var antLocale = React15.useContext(context_default);
    var getLocale = React15.useMemo(function() {
      var _a;
      var locale4 = defaultLocale || default_default2[componentName];
      var localeFromContext = (_a = antLocale === null || antLocale === void 0 ? void 0 : antLocale[componentName]) !== null && _a !== void 0 ? _a : {};
      return _extends(_extends({}, typeof locale4 === "function" ? locale4() : locale4), localeFromContext || {});
    }, [componentName, defaultLocale, antLocale]);
    return [getLocale];
  };

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/CheckCircleFilled.js
  var React18 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/CheckCircleFilled.js
  var CheckCircleFilled = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm193.5 301.7l-210.6 292a31.8 31.8 0 01-51.7 0L318.5 484.9c-3.8-5.3 0-12.7 6.5-12.7h46.9c10.2 0 19.9 4.9 25.9 13.3l71.2 98.8 157.2-218c6-8.3 15.6-13.3 25.9-13.3H699c6.5 0 10.3 7.4 6.5 12.7z" } }] }, "name": "check-circle", "theme": "filled" };
  var CheckCircleFilled_default = CheckCircleFilled;

  // node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js
  function _iterableToArrayLimit(r4, l2) {
    var t4 = null == r4 ? null : "undefined" != typeof Symbol && r4[Symbol.iterator] || r4["@@iterator"];
    if (null != t4) {
      var e3, n4, i3, u2, a2 = [], f2 = true, o3 = false;
      try {
        if (i3 = (t4 = t4.call(r4)).next, 0 === l2) {
          if (Object(t4) !== t4)
            return;
          f2 = false;
        } else
          for (; !(f2 = (e3 = i3.call(t4)).done) && (a2.push(e3.value), a2.length !== l2); f2 = true)
            ;
      } catch (r5) {
        o3 = true, n4 = r5;
      } finally {
        try {
          if (!f2 && null != t4["return"] && (u2 = t4["return"](), Object(u2) !== u2))
            return;
        } finally {
          if (o3)
            throw n4;
        }
      }
      return a2;
    }
  }

  // node_modules/@babel/runtime/helpers/esm/slicedToArray.js
  function _slicedToArray(arr, i3) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i3) || _unsupportedIterableToArray(arr, i3) || _nonIterableRest();
  }

  // node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js
  function _objectWithoutProperties(source, excluded) {
    if (source == null)
      return {};
    var target = _objectWithoutPropertiesLoose2(source, excluded);
    var key2, i3;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i3 = 0; i3 < sourceSymbolKeys.length; i3++) {
        key2 = sourceSymbolKeys[i3];
        if (excluded.indexOf(key2) >= 0)
          continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key2))
          continue;
        target[key2] = source[key2];
      }
    }
    return target;
  }

  // node_modules/antd/node_modules/@ant-design/icons/es/components/AntdIcon.js
  var React17 = __toESM(require_react());
  var import_classnames = __toESM(require_classnames());

  // node_modules/@ctrl/tinycolor/dist/module/util.js
  function bound01(n4, max) {
    if (isOnePointZero(n4)) {
      n4 = "100%";
    }
    var isPercent = isPercentage(n4);
    n4 = max === 360 ? n4 : Math.min(max, Math.max(0, parseFloat(n4)));
    if (isPercent) {
      n4 = parseInt(String(n4 * max), 10) / 100;
    }
    if (Math.abs(n4 - max) < 1e-6) {
      return 1;
    }
    if (max === 360) {
      n4 = (n4 < 0 ? n4 % max + max : n4 % max) / parseFloat(String(max));
    } else {
      n4 = n4 % max / parseFloat(String(max));
    }
    return n4;
  }
  function clamp01(val) {
    return Math.min(1, Math.max(0, val));
  }
  function isOnePointZero(n4) {
    return typeof n4 === "string" && n4.indexOf(".") !== -1 && parseFloat(n4) === 1;
  }
  function isPercentage(n4) {
    return typeof n4 === "string" && n4.indexOf("%") !== -1;
  }
  function boundAlpha(a2) {
    a2 = parseFloat(a2);
    if (isNaN(a2) || a2 < 0 || a2 > 1) {
      a2 = 1;
    }
    return a2;
  }
  function convertToPercentage(n4) {
    if (n4 <= 1) {
      return "".concat(Number(n4) * 100, "%");
    }
    return n4;
  }
  function pad2(c2) {
    return c2.length === 1 ? "0" + c2 : String(c2);
  }

  // node_modules/@ctrl/tinycolor/dist/module/conversion.js
  function rgbToRgb(r4, g2, b2) {
    return {
      r: bound01(r4, 255) * 255,
      g: bound01(g2, 255) * 255,
      b: bound01(b2, 255) * 255
    };
  }
  function rgbToHsl(r4, g2, b2) {
    r4 = bound01(r4, 255);
    g2 = bound01(g2, 255);
    b2 = bound01(b2, 255);
    var max = Math.max(r4, g2, b2);
    var min = Math.min(r4, g2, b2);
    var h2 = 0;
    var s2 = 0;
    var l2 = (max + min) / 2;
    if (max === min) {
      s2 = 0;
      h2 = 0;
    } else {
      var d2 = max - min;
      s2 = l2 > 0.5 ? d2 / (2 - max - min) : d2 / (max + min);
      switch (max) {
        case r4:
          h2 = (g2 - b2) / d2 + (g2 < b2 ? 6 : 0);
          break;
        case g2:
          h2 = (b2 - r4) / d2 + 2;
          break;
        case b2:
          h2 = (r4 - g2) / d2 + 4;
          break;
        default:
          break;
      }
      h2 /= 6;
    }
    return { h: h2, s: s2, l: l2 };
  }
  function hue2rgb(p2, q2, t4) {
    if (t4 < 0) {
      t4 += 1;
    }
    if (t4 > 1) {
      t4 -= 1;
    }
    if (t4 < 1 / 6) {
      return p2 + (q2 - p2) * (6 * t4);
    }
    if (t4 < 1 / 2) {
      return q2;
    }
    if (t4 < 2 / 3) {
      return p2 + (q2 - p2) * (2 / 3 - t4) * 6;
    }
    return p2;
  }
  function hslToRgb(h2, s2, l2) {
    var r4;
    var g2;
    var b2;
    h2 = bound01(h2, 360);
    s2 = bound01(s2, 100);
    l2 = bound01(l2, 100);
    if (s2 === 0) {
      g2 = l2;
      b2 = l2;
      r4 = l2;
    } else {
      var q2 = l2 < 0.5 ? l2 * (1 + s2) : l2 + s2 - l2 * s2;
      var p2 = 2 * l2 - q2;
      r4 = hue2rgb(p2, q2, h2 + 1 / 3);
      g2 = hue2rgb(p2, q2, h2);
      b2 = hue2rgb(p2, q2, h2 - 1 / 3);
    }
    return { r: r4 * 255, g: g2 * 255, b: b2 * 255 };
  }
  function rgbToHsv(r4, g2, b2) {
    r4 = bound01(r4, 255);
    g2 = bound01(g2, 255);
    b2 = bound01(b2, 255);
    var max = Math.max(r4, g2, b2);
    var min = Math.min(r4, g2, b2);
    var h2 = 0;
    var v2 = max;
    var d2 = max - min;
    var s2 = max === 0 ? 0 : d2 / max;
    if (max === min) {
      h2 = 0;
    } else {
      switch (max) {
        case r4:
          h2 = (g2 - b2) / d2 + (g2 < b2 ? 6 : 0);
          break;
        case g2:
          h2 = (b2 - r4) / d2 + 2;
          break;
        case b2:
          h2 = (r4 - g2) / d2 + 4;
          break;
        default:
          break;
      }
      h2 /= 6;
    }
    return { h: h2, s: s2, v: v2 };
  }
  function hsvToRgb(h2, s2, v2) {
    h2 = bound01(h2, 360) * 6;
    s2 = bound01(s2, 100);
    v2 = bound01(v2, 100);
    var i3 = Math.floor(h2);
    var f2 = h2 - i3;
    var p2 = v2 * (1 - s2);
    var q2 = v2 * (1 - f2 * s2);
    var t4 = v2 * (1 - (1 - f2) * s2);
    var mod = i3 % 6;
    var r4 = [v2, q2, p2, p2, t4, v2][mod];
    var g2 = [t4, v2, v2, q2, p2, p2][mod];
    var b2 = [p2, p2, t4, v2, v2, q2][mod];
    return { r: r4 * 255, g: g2 * 255, b: b2 * 255 };
  }
  function rgbToHex(r4, g2, b2, allow3Char) {
    var hex2 = [
      pad2(Math.round(r4).toString(16)),
      pad2(Math.round(g2).toString(16)),
      pad2(Math.round(b2).toString(16))
    ];
    if (allow3Char && hex2[0].startsWith(hex2[0].charAt(1)) && hex2[1].startsWith(hex2[1].charAt(1)) && hex2[2].startsWith(hex2[2].charAt(1))) {
      return hex2[0].charAt(0) + hex2[1].charAt(0) + hex2[2].charAt(0);
    }
    return hex2.join("");
  }
  function rgbaToHex(r4, g2, b2, a2, allow4Char) {
    var hex2 = [
      pad2(Math.round(r4).toString(16)),
      pad2(Math.round(g2).toString(16)),
      pad2(Math.round(b2).toString(16)),
      pad2(convertDecimalToHex(a2))
    ];
    if (allow4Char && hex2[0].startsWith(hex2[0].charAt(1)) && hex2[1].startsWith(hex2[1].charAt(1)) && hex2[2].startsWith(hex2[2].charAt(1)) && hex2[3].startsWith(hex2[3].charAt(1))) {
      return hex2[0].charAt(0) + hex2[1].charAt(0) + hex2[2].charAt(0) + hex2[3].charAt(0);
    }
    return hex2.join("");
  }
  function convertDecimalToHex(d2) {
    return Math.round(parseFloat(d2) * 255).toString(16);
  }
  function convertHexToDecimal(h2) {
    return parseIntFromHex(h2) / 255;
  }
  function parseIntFromHex(val) {
    return parseInt(val, 16);
  }
  function numberInputToObject(color) {
    return {
      r: color >> 16,
      g: (color & 65280) >> 8,
      b: color & 255
    };
  }

  // node_modules/@ctrl/tinycolor/dist/module/css-color-names.js
  var names = {
    aliceblue: "#f0f8ff",
    antiquewhite: "#faebd7",
    aqua: "#00ffff",
    aquamarine: "#7fffd4",
    azure: "#f0ffff",
    beige: "#f5f5dc",
    bisque: "#ffe4c4",
    black: "#000000",
    blanchedalmond: "#ffebcd",
    blue: "#0000ff",
    blueviolet: "#8a2be2",
    brown: "#a52a2a",
    burlywood: "#deb887",
    cadetblue: "#5f9ea0",
    chartreuse: "#7fff00",
    chocolate: "#d2691e",
    coral: "#ff7f50",
    cornflowerblue: "#6495ed",
    cornsilk: "#fff8dc",
    crimson: "#dc143c",
    cyan: "#00ffff",
    darkblue: "#00008b",
    darkcyan: "#008b8b",
    darkgoldenrod: "#b8860b",
    darkgray: "#a9a9a9",
    darkgreen: "#006400",
    darkgrey: "#a9a9a9",
    darkkhaki: "#bdb76b",
    darkmagenta: "#8b008b",
    darkolivegreen: "#556b2f",
    darkorange: "#ff8c00",
    darkorchid: "#9932cc",
    darkred: "#8b0000",
    darksalmon: "#e9967a",
    darkseagreen: "#8fbc8f",
    darkslateblue: "#483d8b",
    darkslategray: "#2f4f4f",
    darkslategrey: "#2f4f4f",
    darkturquoise: "#00ced1",
    darkviolet: "#9400d3",
    deeppink: "#ff1493",
    deepskyblue: "#00bfff",
    dimgray: "#696969",
    dimgrey: "#696969",
    dodgerblue: "#1e90ff",
    firebrick: "#b22222",
    floralwhite: "#fffaf0",
    forestgreen: "#228b22",
    fuchsia: "#ff00ff",
    gainsboro: "#dcdcdc",
    ghostwhite: "#f8f8ff",
    goldenrod: "#daa520",
    gold: "#ffd700",
    gray: "#808080",
    green: "#008000",
    greenyellow: "#adff2f",
    grey: "#808080",
    honeydew: "#f0fff0",
    hotpink: "#ff69b4",
    indianred: "#cd5c5c",
    indigo: "#4b0082",
    ivory: "#fffff0",
    khaki: "#f0e68c",
    lavenderblush: "#fff0f5",
    lavender: "#e6e6fa",
    lawngreen: "#7cfc00",
    lemonchiffon: "#fffacd",
    lightblue: "#add8e6",
    lightcoral: "#f08080",
    lightcyan: "#e0ffff",
    lightgoldenrodyellow: "#fafad2",
    lightgray: "#d3d3d3",
    lightgreen: "#90ee90",
    lightgrey: "#d3d3d3",
    lightpink: "#ffb6c1",
    lightsalmon: "#ffa07a",
    lightseagreen: "#20b2aa",
    lightskyblue: "#87cefa",
    lightslategray: "#778899",
    lightslategrey: "#778899",
    lightsteelblue: "#b0c4de",
    lightyellow: "#ffffe0",
    lime: "#00ff00",
    limegreen: "#32cd32",
    linen: "#faf0e6",
    magenta: "#ff00ff",
    maroon: "#800000",
    mediumaquamarine: "#66cdaa",
    mediumblue: "#0000cd",
    mediumorchid: "#ba55d3",
    mediumpurple: "#9370db",
    mediumseagreen: "#3cb371",
    mediumslateblue: "#7b68ee",
    mediumspringgreen: "#00fa9a",
    mediumturquoise: "#48d1cc",
    mediumvioletred: "#c71585",
    midnightblue: "#191970",
    mintcream: "#f5fffa",
    mistyrose: "#ffe4e1",
    moccasin: "#ffe4b5",
    navajowhite: "#ffdead",
    navy: "#000080",
    oldlace: "#fdf5e6",
    olive: "#808000",
    olivedrab: "#6b8e23",
    orange: "#ffa500",
    orangered: "#ff4500",
    orchid: "#da70d6",
    palegoldenrod: "#eee8aa",
    palegreen: "#98fb98",
    paleturquoise: "#afeeee",
    palevioletred: "#db7093",
    papayawhip: "#ffefd5",
    peachpuff: "#ffdab9",
    peru: "#cd853f",
    pink: "#ffc0cb",
    plum: "#dda0dd",
    powderblue: "#b0e0e6",
    purple: "#800080",
    rebeccapurple: "#663399",
    red: "#ff0000",
    rosybrown: "#bc8f8f",
    royalblue: "#4169e1",
    saddlebrown: "#8b4513",
    salmon: "#fa8072",
    sandybrown: "#f4a460",
    seagreen: "#2e8b57",
    seashell: "#fff5ee",
    sienna: "#a0522d",
    silver: "#c0c0c0",
    skyblue: "#87ceeb",
    slateblue: "#6a5acd",
    slategray: "#708090",
    slategrey: "#708090",
    snow: "#fffafa",
    springgreen: "#00ff7f",
    steelblue: "#4682b4",
    tan: "#d2b48c",
    teal: "#008080",
    thistle: "#d8bfd8",
    tomato: "#ff6347",
    turquoise: "#40e0d0",
    violet: "#ee82ee",
    wheat: "#f5deb3",
    white: "#ffffff",
    whitesmoke: "#f5f5f5",
    yellow: "#ffff00",
    yellowgreen: "#9acd32"
  };

  // node_modules/@ctrl/tinycolor/dist/module/format-input.js
  function inputToRGB(color) {
    var rgb = { r: 0, g: 0, b: 0 };
    var a2 = 1;
    var s2 = null;
    var v2 = null;
    var l2 = null;
    var ok = false;
    var format3 = false;
    if (typeof color === "string") {
      color = stringInputToObject(color);
    }
    if (typeof color === "object") {
      if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {
        rgb = rgbToRgb(color.r, color.g, color.b);
        ok = true;
        format3 = String(color.r).substr(-1) === "%" ? "prgb" : "rgb";
      } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {
        s2 = convertToPercentage(color.s);
        v2 = convertToPercentage(color.v);
        rgb = hsvToRgb(color.h, s2, v2);
        ok = true;
        format3 = "hsv";
      } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {
        s2 = convertToPercentage(color.s);
        l2 = convertToPercentage(color.l);
        rgb = hslToRgb(color.h, s2, l2);
        ok = true;
        format3 = "hsl";
      }
      if (Object.prototype.hasOwnProperty.call(color, "a")) {
        a2 = color.a;
      }
    }
    a2 = boundAlpha(a2);
    return {
      ok,
      format: color.format || format3,
      r: Math.min(255, Math.max(rgb.r, 0)),
      g: Math.min(255, Math.max(rgb.g, 0)),
      b: Math.min(255, Math.max(rgb.b, 0)),
      a: a2
    };
  }
  var CSS_INTEGER = "[-\\+]?\\d+%?";
  var CSS_NUMBER = "[-\\+]?\\d*\\.\\d+%?";
  var CSS_UNIT = "(?:".concat(CSS_NUMBER, ")|(?:").concat(CSS_INTEGER, ")");
  var PERMISSIVE_MATCH3 = "[\\s|\\(]+(".concat(CSS_UNIT, ")[,|\\s]+(").concat(CSS_UNIT, ")[,|\\s]+(").concat(CSS_UNIT, ")\\s*\\)?");
  var PERMISSIVE_MATCH4 = "[\\s|\\(]+(".concat(CSS_UNIT, ")[,|\\s]+(").concat(CSS_UNIT, ")[,|\\s]+(").concat(CSS_UNIT, ")[,|\\s]+(").concat(CSS_UNIT, ")\\s*\\)?");
  var matchers = {
    CSS_UNIT: new RegExp(CSS_UNIT),
    rgb: new RegExp("rgb" + PERMISSIVE_MATCH3),
    rgba: new RegExp("rgba" + PERMISSIVE_MATCH4),
    hsl: new RegExp("hsl" + PERMISSIVE_MATCH3),
    hsla: new RegExp("hsla" + PERMISSIVE_MATCH4),
    hsv: new RegExp("hsv" + PERMISSIVE_MATCH3),
    hsva: new RegExp("hsva" + PERMISSIVE_MATCH4),
    hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
    hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
    hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
    hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
  };
  function stringInputToObject(color) {
    color = color.trim().toLowerCase();
    if (color.length === 0) {
      return false;
    }
    var named = false;
    if (names[color]) {
      color = names[color];
      named = true;
    } else if (color === "transparent") {
      return { r: 0, g: 0, b: 0, a: 0, format: "name" };
    }
    var match2 = matchers.rgb.exec(color);
    if (match2) {
      return { r: match2[1], g: match2[2], b: match2[3] };
    }
    match2 = matchers.rgba.exec(color);
    if (match2) {
      return { r: match2[1], g: match2[2], b: match2[3], a: match2[4] };
    }
    match2 = matchers.hsl.exec(color);
    if (match2) {
      return { h: match2[1], s: match2[2], l: match2[3] };
    }
    match2 = matchers.hsla.exec(color);
    if (match2) {
      return { h: match2[1], s: match2[2], l: match2[3], a: match2[4] };
    }
    match2 = matchers.hsv.exec(color);
    if (match2) {
      return { h: match2[1], s: match2[2], v: match2[3] };
    }
    match2 = matchers.hsva.exec(color);
    if (match2) {
      return { h: match2[1], s: match2[2], v: match2[3], a: match2[4] };
    }
    match2 = matchers.hex8.exec(color);
    if (match2) {
      return {
        r: parseIntFromHex(match2[1]),
        g: parseIntFromHex(match2[2]),
        b: parseIntFromHex(match2[3]),
        a: convertHexToDecimal(match2[4]),
        format: named ? "name" : "hex8"
      };
    }
    match2 = matchers.hex6.exec(color);
    if (match2) {
      return {
        r: parseIntFromHex(match2[1]),
        g: parseIntFromHex(match2[2]),
        b: parseIntFromHex(match2[3]),
        format: named ? "name" : "hex"
      };
    }
    match2 = matchers.hex4.exec(color);
    if (match2) {
      return {
        r: parseIntFromHex(match2[1] + match2[1]),
        g: parseIntFromHex(match2[2] + match2[2]),
        b: parseIntFromHex(match2[3] + match2[3]),
        a: convertHexToDecimal(match2[4] + match2[4]),
        format: named ? "name" : "hex8"
      };
    }
    match2 = matchers.hex3.exec(color);
    if (match2) {
      return {
        r: parseIntFromHex(match2[1] + match2[1]),
        g: parseIntFromHex(match2[2] + match2[2]),
        b: parseIntFromHex(match2[3] + match2[3]),
        format: named ? "name" : "hex"
      };
    }
    return false;
  }
  function isValidCSSUnit(color) {
    return Boolean(matchers.CSS_UNIT.exec(String(color)));
  }

  // node_modules/@ctrl/tinycolor/dist/module/index.js
  var TinyColor = (
    /** @class */
    function() {
      function TinyColor2(color, opts) {
        if (color === void 0) {
          color = "";
        }
        if (opts === void 0) {
          opts = {};
        }
        var _a;
        if (color instanceof TinyColor2) {
          return color;
        }
        if (typeof color === "number") {
          color = numberInputToObject(color);
        }
        this.originalInput = color;
        var rgb = inputToRGB(color);
        this.originalInput = color;
        this.r = rgb.r;
        this.g = rgb.g;
        this.b = rgb.b;
        this.a = rgb.a;
        this.roundA = Math.round(100 * this.a) / 100;
        this.format = (_a = opts.format) !== null && _a !== void 0 ? _a : rgb.format;
        this.gradientType = opts.gradientType;
        if (this.r < 1) {
          this.r = Math.round(this.r);
        }
        if (this.g < 1) {
          this.g = Math.round(this.g);
        }
        if (this.b < 1) {
          this.b = Math.round(this.b);
        }
        this.isValid = rgb.ok;
      }
      TinyColor2.prototype.isDark = function() {
        return this.getBrightness() < 128;
      };
      TinyColor2.prototype.isLight = function() {
        return !this.isDark();
      };
      TinyColor2.prototype.getBrightness = function() {
        var rgb = this.toRgb();
        return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1e3;
      };
      TinyColor2.prototype.getLuminance = function() {
        var rgb = this.toRgb();
        var R2;
        var G2;
        var B2;
        var RsRGB = rgb.r / 255;
        var GsRGB = rgb.g / 255;
        var BsRGB = rgb.b / 255;
        if (RsRGB <= 0.03928) {
          R2 = RsRGB / 12.92;
        } else {
          R2 = Math.pow((RsRGB + 0.055) / 1.055, 2.4);
        }
        if (GsRGB <= 0.03928) {
          G2 = GsRGB / 12.92;
        } else {
          G2 = Math.pow((GsRGB + 0.055) / 1.055, 2.4);
        }
        if (BsRGB <= 0.03928) {
          B2 = BsRGB / 12.92;
        } else {
          B2 = Math.pow((BsRGB + 0.055) / 1.055, 2.4);
        }
        return 0.2126 * R2 + 0.7152 * G2 + 0.0722 * B2;
      };
      TinyColor2.prototype.getAlpha = function() {
        return this.a;
      };
      TinyColor2.prototype.setAlpha = function(alpha) {
        this.a = boundAlpha(alpha);
        this.roundA = Math.round(100 * this.a) / 100;
        return this;
      };
      TinyColor2.prototype.isMonochrome = function() {
        var s2 = this.toHsl().s;
        return s2 === 0;
      };
      TinyColor2.prototype.toHsv = function() {
        var hsv = rgbToHsv(this.r, this.g, this.b);
        return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this.a };
      };
      TinyColor2.prototype.toHsvString = function() {
        var hsv = rgbToHsv(this.r, this.g, this.b);
        var h2 = Math.round(hsv.h * 360);
        var s2 = Math.round(hsv.s * 100);
        var v2 = Math.round(hsv.v * 100);
        return this.a === 1 ? "hsv(".concat(h2, ", ").concat(s2, "%, ").concat(v2, "%)") : "hsva(".concat(h2, ", ").concat(s2, "%, ").concat(v2, "%, ").concat(this.roundA, ")");
      };
      TinyColor2.prototype.toHsl = function() {
        var hsl = rgbToHsl(this.r, this.g, this.b);
        return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this.a };
      };
      TinyColor2.prototype.toHslString = function() {
        var hsl = rgbToHsl(this.r, this.g, this.b);
        var h2 = Math.round(hsl.h * 360);
        var s2 = Math.round(hsl.s * 100);
        var l2 = Math.round(hsl.l * 100);
        return this.a === 1 ? "hsl(".concat(h2, ", ").concat(s2, "%, ").concat(l2, "%)") : "hsla(".concat(h2, ", ").concat(s2, "%, ").concat(l2, "%, ").concat(this.roundA, ")");
      };
      TinyColor2.prototype.toHex = function(allow3Char) {
        if (allow3Char === void 0) {
          allow3Char = false;
        }
        return rgbToHex(this.r, this.g, this.b, allow3Char);
      };
      TinyColor2.prototype.toHexString = function(allow3Char) {
        if (allow3Char === void 0) {
          allow3Char = false;
        }
        return "#" + this.toHex(allow3Char);
      };
      TinyColor2.prototype.toHex8 = function(allow4Char) {
        if (allow4Char === void 0) {
          allow4Char = false;
        }
        return rgbaToHex(this.r, this.g, this.b, this.a, allow4Char);
      };
      TinyColor2.prototype.toHex8String = function(allow4Char) {
        if (allow4Char === void 0) {
          allow4Char = false;
        }
        return "#" + this.toHex8(allow4Char);
      };
      TinyColor2.prototype.toHexShortString = function(allowShortChar) {
        if (allowShortChar === void 0) {
          allowShortChar = false;
        }
        return this.a === 1 ? this.toHexString(allowShortChar) : this.toHex8String(allowShortChar);
      };
      TinyColor2.prototype.toRgb = function() {
        return {
          r: Math.round(this.r),
          g: Math.round(this.g),
          b: Math.round(this.b),
          a: this.a
        };
      };
      TinyColor2.prototype.toRgbString = function() {
        var r4 = Math.round(this.r);
        var g2 = Math.round(this.g);
        var b2 = Math.round(this.b);
        return this.a === 1 ? "rgb(".concat(r4, ", ").concat(g2, ", ").concat(b2, ")") : "rgba(".concat(r4, ", ").concat(g2, ", ").concat(b2, ", ").concat(this.roundA, ")");
      };
      TinyColor2.prototype.toPercentageRgb = function() {
        var fmt = function(x2) {
          return "".concat(Math.round(bound01(x2, 255) * 100), "%");
        };
        return {
          r: fmt(this.r),
          g: fmt(this.g),
          b: fmt(this.b),
          a: this.a
        };
      };
      TinyColor2.prototype.toPercentageRgbString = function() {
        var rnd = function(x2) {
          return Math.round(bound01(x2, 255) * 100);
        };
        return this.a === 1 ? "rgb(".concat(rnd(this.r), "%, ").concat(rnd(this.g), "%, ").concat(rnd(this.b), "%)") : "rgba(".concat(rnd(this.r), "%, ").concat(rnd(this.g), "%, ").concat(rnd(this.b), "%, ").concat(this.roundA, ")");
      };
      TinyColor2.prototype.toName = function() {
        if (this.a === 0) {
          return "transparent";
        }
        if (this.a < 1) {
          return false;
        }
        var hex2 = "#" + rgbToHex(this.r, this.g, this.b, false);
        for (var _i = 0, _a = Object.entries(names); _i < _a.length; _i++) {
          var _b = _a[_i], key2 = _b[0], value = _b[1];
          if (hex2 === value) {
            return key2;
          }
        }
        return false;
      };
      TinyColor2.prototype.toString = function(format3) {
        var formatSet = Boolean(format3);
        format3 = format3 !== null && format3 !== void 0 ? format3 : this.format;
        var formattedString = false;
        var hasAlpha = this.a < 1 && this.a >= 0;
        var needsAlphaFormat = !formatSet && hasAlpha && (format3.startsWith("hex") || format3 === "name");
        if (needsAlphaFormat) {
          if (format3 === "name" && this.a === 0) {
            return this.toName();
          }
          return this.toRgbString();
        }
        if (format3 === "rgb") {
          formattedString = this.toRgbString();
        }
        if (format3 === "prgb") {
          formattedString = this.toPercentageRgbString();
        }
        if (format3 === "hex" || format3 === "hex6") {
          formattedString = this.toHexString();
        }
        if (format3 === "hex3") {
          formattedString = this.toHexString(true);
        }
        if (format3 === "hex4") {
          formattedString = this.toHex8String(true);
        }
        if (format3 === "hex8") {
          formattedString = this.toHex8String();
        }
        if (format3 === "name") {
          formattedString = this.toName();
        }
        if (format3 === "hsl") {
          formattedString = this.toHslString();
        }
        if (format3 === "hsv") {
          formattedString = this.toHsvString();
        }
        return formattedString || this.toHexString();
      };
      TinyColor2.prototype.toNumber = function() {
        return (Math.round(this.r) << 16) + (Math.round(this.g) << 8) + Math.round(this.b);
      };
      TinyColor2.prototype.clone = function() {
        return new TinyColor2(this.toString());
      };
      TinyColor2.prototype.lighten = function(amount) {
        if (amount === void 0) {
          amount = 10;
        }
        var hsl = this.toHsl();
        hsl.l += amount / 100;
        hsl.l = clamp01(hsl.l);
        return new TinyColor2(hsl);
      };
      TinyColor2.prototype.brighten = function(amount) {
        if (amount === void 0) {
          amount = 10;
        }
        var rgb = this.toRgb();
        rgb.r = Math.max(0, Math.min(255, rgb.r - Math.round(255 * -(amount / 100))));
        rgb.g = Math.max(0, Math.min(255, rgb.g - Math.round(255 * -(amount / 100))));
        rgb.b = Math.max(0, Math.min(255, rgb.b - Math.round(255 * -(amount / 100))));
        return new TinyColor2(rgb);
      };
      TinyColor2.prototype.darken = function(amount) {
        if (amount === void 0) {
          amount = 10;
        }
        var hsl = this.toHsl();
        hsl.l -= amount / 100;
        hsl.l = clamp01(hsl.l);
        return new TinyColor2(hsl);
      };
      TinyColor2.prototype.tint = function(amount) {
        if (amount === void 0) {
          amount = 10;
        }
        return this.mix("white", amount);
      };
      TinyColor2.prototype.shade = function(amount) {
        if (amount === void 0) {
          amount = 10;
        }
        return this.mix("black", amount);
      };
      TinyColor2.prototype.desaturate = function(amount) {
        if (amount === void 0) {
          amount = 10;
        }
        var hsl = this.toHsl();
        hsl.s -= amount / 100;
        hsl.s = clamp01(hsl.s);
        return new TinyColor2(hsl);
      };
      TinyColor2.prototype.saturate = function(amount) {
        if (amount === void 0) {
          amount = 10;
        }
        var hsl = this.toHsl();
        hsl.s += amount / 100;
        hsl.s = clamp01(hsl.s);
        return new TinyColor2(hsl);
      };
      TinyColor2.prototype.greyscale = function() {
        return this.desaturate(100);
      };
      TinyColor2.prototype.spin = function(amount) {
        var hsl = this.toHsl();
        var hue = (hsl.h + amount) % 360;
        hsl.h = hue < 0 ? 360 + hue : hue;
        return new TinyColor2(hsl);
      };
      TinyColor2.prototype.mix = function(color, amount) {
        if (amount === void 0) {
          amount = 50;
        }
        var rgb1 = this.toRgb();
        var rgb2 = new TinyColor2(color).toRgb();
        var p2 = amount / 100;
        var rgba = {
          r: (rgb2.r - rgb1.r) * p2 + rgb1.r,
          g: (rgb2.g - rgb1.g) * p2 + rgb1.g,
          b: (rgb2.b - rgb1.b) * p2 + rgb1.b,
          a: (rgb2.a - rgb1.a) * p2 + rgb1.a
        };
        return new TinyColor2(rgba);
      };
      TinyColor2.prototype.analogous = function(results, slices) {
        if (results === void 0) {
          results = 6;
        }
        if (slices === void 0) {
          slices = 30;
        }
        var hsl = this.toHsl();
        var part = 360 / slices;
        var ret = [this];
        for (hsl.h = (hsl.h - (part * results >> 1) + 720) % 360; --results; ) {
          hsl.h = (hsl.h + part) % 360;
          ret.push(new TinyColor2(hsl));
        }
        return ret;
      };
      TinyColor2.prototype.complement = function() {
        var hsl = this.toHsl();
        hsl.h = (hsl.h + 180) % 360;
        return new TinyColor2(hsl);
      };
      TinyColor2.prototype.monochromatic = function(results) {
        if (results === void 0) {
          results = 6;
        }
        var hsv = this.toHsv();
        var h2 = hsv.h;
        var s2 = hsv.s;
        var v2 = hsv.v;
        var res = [];
        var modification = 1 / results;
        while (results--) {
          res.push(new TinyColor2({ h: h2, s: s2, v: v2 }));
          v2 = (v2 + modification) % 1;
        }
        return res;
      };
      TinyColor2.prototype.splitcomplement = function() {
        var hsl = this.toHsl();
        var h2 = hsl.h;
        return [
          this,
          new TinyColor2({ h: (h2 + 72) % 360, s: hsl.s, l: hsl.l }),
          new TinyColor2({ h: (h2 + 216) % 360, s: hsl.s, l: hsl.l })
        ];
      };
      TinyColor2.prototype.onBackground = function(background) {
        var fg = this.toRgb();
        var bg = new TinyColor2(background).toRgb();
        var alpha = fg.a + bg.a * (1 - fg.a);
        return new TinyColor2({
          r: (fg.r * fg.a + bg.r * bg.a * (1 - fg.a)) / alpha,
          g: (fg.g * fg.a + bg.g * bg.a * (1 - fg.a)) / alpha,
          b: (fg.b * fg.a + bg.b * bg.a * (1 - fg.a)) / alpha,
          a: alpha
        });
      };
      TinyColor2.prototype.triad = function() {
        return this.polyad(3);
      };
      TinyColor2.prototype.tetrad = function() {
        return this.polyad(4);
      };
      TinyColor2.prototype.polyad = function(n4) {
        var hsl = this.toHsl();
        var h2 = hsl.h;
        var result2 = [this];
        var increment = 360 / n4;
        for (var i3 = 1; i3 < n4; i3++) {
          result2.push(new TinyColor2({ h: (h2 + i3 * increment) % 360, s: hsl.s, l: hsl.l }));
        }
        return result2;
      };
      TinyColor2.prototype.equals = function(color) {
        return this.toRgbString() === new TinyColor2(color).toRgbString();
      };
      return TinyColor2;
    }()
  );

  // node_modules/@ant-design/colors/dist/index.esm.js
  var hueStep = 2;
  var saturationStep = 0.16;
  var saturationStep2 = 0.05;
  var brightnessStep1 = 0.05;
  var brightnessStep2 = 0.15;
  var lightColorCount = 5;
  var darkColorCount = 4;
  var darkColorMap = [{
    index: 7,
    opacity: 0.15
  }, {
    index: 6,
    opacity: 0.25
  }, {
    index: 5,
    opacity: 0.3
  }, {
    index: 5,
    opacity: 0.45
  }, {
    index: 5,
    opacity: 0.65
  }, {
    index: 5,
    opacity: 0.85
  }, {
    index: 4,
    opacity: 0.9
  }, {
    index: 3,
    opacity: 0.95
  }, {
    index: 2,
    opacity: 0.97
  }, {
    index: 1,
    opacity: 0.98
  }];
  function toHsv(_ref) {
    var r4 = _ref.r, g2 = _ref.g, b2 = _ref.b;
    var hsv = rgbToHsv(r4, g2, b2);
    return {
      h: hsv.h * 360,
      s: hsv.s,
      v: hsv.v
    };
  }
  function toHex(_ref2) {
    var r4 = _ref2.r, g2 = _ref2.g, b2 = _ref2.b;
    return "#".concat(rgbToHex(r4, g2, b2, false));
  }
  function mix(rgb1, rgb2, amount) {
    var p2 = amount / 100;
    var rgb = {
      r: (rgb2.r - rgb1.r) * p2 + rgb1.r,
      g: (rgb2.g - rgb1.g) * p2 + rgb1.g,
      b: (rgb2.b - rgb1.b) * p2 + rgb1.b
    };
    return rgb;
  }
  function getHue(hsv, i3, light) {
    var hue;
    if (Math.round(hsv.h) >= 60 && Math.round(hsv.h) <= 240) {
      hue = light ? Math.round(hsv.h) - hueStep * i3 : Math.round(hsv.h) + hueStep * i3;
    } else {
      hue = light ? Math.round(hsv.h) + hueStep * i3 : Math.round(hsv.h) - hueStep * i3;
    }
    if (hue < 0) {
      hue += 360;
    } else if (hue >= 360) {
      hue -= 360;
    }
    return hue;
  }
  function getSaturation(hsv, i3, light) {
    if (hsv.h === 0 && hsv.s === 0) {
      return hsv.s;
    }
    var saturation;
    if (light) {
      saturation = hsv.s - saturationStep * i3;
    } else if (i3 === darkColorCount) {
      saturation = hsv.s + saturationStep;
    } else {
      saturation = hsv.s + saturationStep2 * i3;
    }
    if (saturation > 1) {
      saturation = 1;
    }
    if (light && i3 === lightColorCount && saturation > 0.1) {
      saturation = 0.1;
    }
    if (saturation < 0.06) {
      saturation = 0.06;
    }
    return Number(saturation.toFixed(2));
  }
  function getValue(hsv, i3, light) {
    var value;
    if (light) {
      value = hsv.v + brightnessStep1 * i3;
    } else {
      value = hsv.v - brightnessStep2 * i3;
    }
    if (value > 1) {
      value = 1;
    }
    return Number(value.toFixed(2));
  }
  function generate(color) {
    var opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var patterns = [];
    var pColor = inputToRGB(color);
    for (var i3 = lightColorCount; i3 > 0; i3 -= 1) {
      var hsv = toHsv(pColor);
      var colorString = toHex(inputToRGB({
        h: getHue(hsv, i3, true),
        s: getSaturation(hsv, i3, true),
        v: getValue(hsv, i3, true)
      }));
      patterns.push(colorString);
    }
    patterns.push(toHex(pColor));
    for (var _i = 1; _i <= darkColorCount; _i += 1) {
      var _hsv = toHsv(pColor);
      var _colorString = toHex(inputToRGB({
        h: getHue(_hsv, _i),
        s: getSaturation(_hsv, _i),
        v: getValue(_hsv, _i)
      }));
      patterns.push(_colorString);
    }
    if (opts.theme === "dark") {
      return darkColorMap.map(function(_ref3) {
        var index2 = _ref3.index, opacity = _ref3.opacity;
        var darkColorString = toHex(mix(inputToRGB(opts.backgroundColor || "#141414"), inputToRGB(patterns[index2]), opacity * 100));
        return darkColorString;
      });
    }
    return patterns;
  }
  var presetPrimaryColors = {
    red: "#F5222D",
    volcano: "#FA541C",
    orange: "#FA8C16",
    gold: "#FAAD14",
    yellow: "#FADB14",
    lime: "#A0D911",
    green: "#52C41A",
    cyan: "#13C2C2",
    blue: "#1890FF",
    geekblue: "#2F54EB",
    purple: "#722ED1",
    magenta: "#EB2F96",
    grey: "#666666"
  };
  var presetPalettes = {};
  var presetDarkPalettes = {};
  Object.keys(presetPrimaryColors).forEach(function(key2) {
    presetPalettes[key2] = generate(presetPrimaryColors[key2]);
    presetPalettes[key2].primary = presetPalettes[key2][5];
    presetDarkPalettes[key2] = generate(presetPrimaryColors[key2], {
      theme: "dark",
      backgroundColor: "#141414"
    });
    presetDarkPalettes[key2].primary = presetDarkPalettes[key2][5];
  });
  var red = presetPalettes.red;
  var volcano = presetPalettes.volcano;
  var gold = presetPalettes.gold;
  var orange = presetPalettes.orange;
  var yellow = presetPalettes.yellow;
  var lime = presetPalettes.lime;
  var green = presetPalettes.green;
  var cyan = presetPalettes.cyan;
  var blue = presetPalettes.blue;
  var geekblue = presetPalettes.geekblue;
  var purple = presetPalettes.purple;
  var magenta = presetPalettes.magenta;
  var grey = presetPalettes.grey;

  // node_modules/antd/node_modules/@ant-design/icons/es/utils.js
  var import_react15 = __toESM(require_react());

  // node_modules/rc-util/es/Dom/canUseDom.js
  function canUseDom() {
    return !!(typeof window !== "undefined" && window.document && window.document.createElement);
  }

  // node_modules/rc-util/es/Dom/contains.js
  function contains(root3, n4) {
    if (!root3) {
      return false;
    }
    if (root3.contains) {
      return root3.contains(n4);
    }
    var node = n4;
    while (node) {
      if (node === root3) {
        return true;
      }
      node = node.parentNode;
    }
    return false;
  }

  // node_modules/rc-util/es/Dom/dynamicCSS.js
  var APPEND_ORDER = "data-rc-order";
  var APPEND_PRIORITY = "data-rc-priority";
  var MARK_KEY = "rc-util-key";
  var containerCache = /* @__PURE__ */ new Map();
  function getMark() {
    var _ref = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, mark = _ref.mark;
    if (mark) {
      return mark.startsWith("data-") ? mark : "data-".concat(mark);
    }
    return MARK_KEY;
  }
  function getContainer(option) {
    if (option.attachTo) {
      return option.attachTo;
    }
    var head = document.querySelector("head");
    return head || document.body;
  }
  function getOrder(prepend) {
    if (prepend === "queue") {
      return "prependQueue";
    }
    return prepend ? "prepend" : "append";
  }
  function findStyles(container) {
    return Array.from((containerCache.get(container) || container).children).filter(function(node) {
      return node.tagName === "STYLE";
    });
  }
  function injectCSS(css2) {
    var option = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    if (!canUseDom()) {
      return null;
    }
    var csp = option.csp, prepend = option.prepend, _option$priority = option.priority, priority = _option$priority === void 0 ? 0 : _option$priority;
    var mergedOrder = getOrder(prepend);
    var isPrependQueue = mergedOrder === "prependQueue";
    var styleNode = document.createElement("style");
    styleNode.setAttribute(APPEND_ORDER, mergedOrder);
    if (isPrependQueue && priority) {
      styleNode.setAttribute(APPEND_PRIORITY, "".concat(priority));
    }
    if (csp !== null && csp !== void 0 && csp.nonce) {
      styleNode.nonce = csp === null || csp === void 0 ? void 0 : csp.nonce;
    }
    styleNode.innerHTML = css2;
    var container = getContainer(option);
    var firstChild = container.firstChild;
    if (prepend) {
      if (isPrependQueue) {
        var existStyle = findStyles(container).filter(function(node) {
          if (!["prepend", "prependQueue"].includes(node.getAttribute(APPEND_ORDER))) {
            return false;
          }
          var nodePriority = Number(node.getAttribute(APPEND_PRIORITY) || 0);
          return priority >= nodePriority;
        });
        if (existStyle.length) {
          container.insertBefore(styleNode, existStyle[existStyle.length - 1].nextSibling);
          return styleNode;
        }
      }
      container.insertBefore(styleNode, firstChild);
    } else {
      container.appendChild(styleNode);
    }
    return styleNode;
  }
  function findExistNode(key2) {
    var option = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var container = getContainer(option);
    return findStyles(container).find(function(node) {
      return node.getAttribute(getMark(option)) === key2;
    });
  }
  function removeCSS(key2) {
    var option = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var existNode = findExistNode(key2, option);
    if (existNode) {
      var container = getContainer(option);
      container.removeChild(existNode);
    }
  }
  function syncRealContainer(container, option) {
    var cachedRealContainer = containerCache.get(container);
    if (!cachedRealContainer || !contains(document, cachedRealContainer)) {
      var placeholderStyle = injectCSS("", option);
      var parentNode = placeholderStyle.parentNode;
      containerCache.set(container, parentNode);
      container.removeChild(placeholderStyle);
    }
  }
  function updateCSS(css2, key2) {
    var option = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    var container = getContainer(option);
    syncRealContainer(container, option);
    var existNode = findExistNode(key2, option);
    if (existNode) {
      var _option$csp, _option$csp2;
      if ((_option$csp = option.csp) !== null && _option$csp !== void 0 && _option$csp.nonce && existNode.nonce !== ((_option$csp2 = option.csp) === null || _option$csp2 === void 0 ? void 0 : _option$csp2.nonce)) {
        var _option$csp3;
        existNode.nonce = (_option$csp3 = option.csp) === null || _option$csp3 === void 0 ? void 0 : _option$csp3.nonce;
      }
      if (existNode.innerHTML !== css2) {
        existNode.innerHTML = css2;
      }
      return existNode;
    }
    var newNode = injectCSS(css2, option);
    newNode.setAttribute(getMark(option), key2);
    return newNode;
  }

  // node_modules/antd/node_modules/@ant-design/icons/es/utils.js
  var import_camelCase = __toESM(require_camelCase());
  function warning7(valid, message) {
    warning_default(valid, "[@ant-design/icons] ".concat(message));
  }
  function isIconDefinition(target) {
    return _typeof(target) === "object" && typeof target.name === "string" && typeof target.theme === "string" && (_typeof(target.icon) === "object" || typeof target.icon === "function");
  }
  function normalizeAttrs() {
    var attrs = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    return Object.keys(attrs).reduce(function(acc, key2) {
      var val = attrs[key2];
      switch (key2) {
        case "class":
          acc.className = val;
          delete acc.class;
          break;
        default:
          delete acc[key2];
          acc[(0, import_camelCase.default)(key2)] = val;
      }
      return acc;
    }, {});
  }
  function generate2(node, key2, rootProps) {
    if (!rootProps) {
      return /* @__PURE__ */ import_react15.default.createElement(node.tag, _objectSpread2({
        key: key2
      }, normalizeAttrs(node.attrs)), (node.children || []).map(function(child, index2) {
        return generate2(child, "".concat(key2, "-").concat(node.tag, "-").concat(index2));
      }));
    }
    return /* @__PURE__ */ import_react15.default.createElement(node.tag, _objectSpread2(_objectSpread2({
      key: key2
    }, normalizeAttrs(node.attrs)), rootProps), (node.children || []).map(function(child, index2) {
      return generate2(child, "".concat(key2, "-").concat(node.tag, "-").concat(index2));
    }));
  }
  function getSecondaryColor(primaryColor) {
    return generate(primaryColor)[0];
  }
  function normalizeTwoToneColors(twoToneColor) {
    if (!twoToneColor) {
      return [];
    }
    return Array.isArray(twoToneColor) ? twoToneColor : [twoToneColor];
  }
  var iconStyles = "\n.anticon {\n  display: inline-block;\n  color: inherit;\n  font-style: normal;\n  line-height: 0;\n  text-align: center;\n  text-transform: none;\n  vertical-align: -0.125em;\n  text-rendering: optimizeLegibility;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n.anticon > * {\n  line-height: 1;\n}\n\n.anticon svg {\n  display: inline-block;\n}\n\n.anticon::before {\n  display: none;\n}\n\n.anticon .anticon-icon {\n  display: block;\n}\n\n.anticon[tabindex] {\n  cursor: pointer;\n}\n\n.anticon-spin::before,\n.anticon-spin {\n  display: inline-block;\n  -webkit-animation: loadingCircle 1s infinite linear;\n  animation: loadingCircle 1s infinite linear;\n}\n\n@-webkit-keyframes loadingCircle {\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n\n@keyframes loadingCircle {\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n";
  var useInsertStyles = function useInsertStyles2() {
    var styleStr = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : iconStyles;
    var _useContext = (0, import_react15.useContext)(Context_default), csp = _useContext.csp;
    (0, import_react15.useEffect)(function() {
      updateCSS(styleStr, "@ant-design-icons", {
        prepend: true,
        csp
      });
    }, []);
  };

  // node_modules/antd/node_modules/@ant-design/icons/es/components/IconBase.js
  var _excluded4 = ["icon", "className", "onClick", "style", "primaryColor", "secondaryColor"];
  var twoToneColorPalette = {
    primaryColor: "#333",
    secondaryColor: "#E6E6E6",
    calculated: false
  };
  function setTwoToneColors(_ref) {
    var primaryColor = _ref.primaryColor, secondaryColor = _ref.secondaryColor;
    twoToneColorPalette.primaryColor = primaryColor;
    twoToneColorPalette.secondaryColor = secondaryColor || getSecondaryColor(primaryColor);
    twoToneColorPalette.calculated = !!secondaryColor;
  }
  function getTwoToneColors() {
    return _objectSpread2({}, twoToneColorPalette);
  }
  var IconBase = function IconBase2(props) {
    var icon = props.icon, className = props.className, onClick = props.onClick, style3 = props.style, primaryColor = props.primaryColor, secondaryColor = props.secondaryColor, restProps = _objectWithoutProperties(props, _excluded4);
    var colors = twoToneColorPalette;
    if (primaryColor) {
      colors = {
        primaryColor,
        secondaryColor: secondaryColor || getSecondaryColor(primaryColor)
      };
    }
    useInsertStyles();
    warning7(isIconDefinition(icon), "icon should be icon definiton, but got ".concat(icon));
    if (!isIconDefinition(icon)) {
      return null;
    }
    var target = icon;
    if (target && typeof target.icon === "function") {
      target = _objectSpread2(_objectSpread2({}, target), {}, {
        icon: target.icon(colors.primaryColor, colors.secondaryColor)
      });
    }
    return generate2(target.icon, "svg-".concat(target.name), _objectSpread2({
      className,
      onClick,
      style: style3,
      "data-icon": target.name,
      width: "1em",
      height: "1em",
      fill: "currentColor",
      "aria-hidden": "true"
    }, restProps));
  };
  IconBase.displayName = "IconReact";
  IconBase.getTwoToneColors = getTwoToneColors;
  IconBase.setTwoToneColors = setTwoToneColors;
  var IconBase_default = IconBase;

  // node_modules/antd/node_modules/@ant-design/icons/es/components/twoTonePrimaryColor.js
  function setTwoToneColor(twoToneColor) {
    var _normalizeTwoToneColo = normalizeTwoToneColors(twoToneColor), _normalizeTwoToneColo2 = _slicedToArray(_normalizeTwoToneColo, 2), primaryColor = _normalizeTwoToneColo2[0], secondaryColor = _normalizeTwoToneColo2[1];
    return IconBase_default.setTwoToneColors({
      primaryColor,
      secondaryColor
    });
  }
  function getTwoToneColor() {
    var colors = IconBase_default.getTwoToneColors();
    if (!colors.calculated) {
      return colors.primaryColor;
    }
    return [colors.primaryColor, colors.secondaryColor];
  }

  // node_modules/antd/node_modules/@ant-design/icons/es/components/AntdIcon.js
  var _excluded5 = ["className", "icon", "spin", "rotate", "tabIndex", "onClick", "twoToneColor"];
  setTwoToneColor("#1890ff");
  var Icon = /* @__PURE__ */ React17.forwardRef(function(props, ref) {
    var _classNames;
    var className = props.className, icon = props.icon, spin = props.spin, rotate = props.rotate, tabIndex = props.tabIndex, onClick = props.onClick, twoToneColor = props.twoToneColor, restProps = _objectWithoutProperties(props, _excluded5);
    var _React$useContext = React17.useContext(Context_default), _React$useContext$pre = _React$useContext.prefixCls, prefixCls = _React$useContext$pre === void 0 ? "anticon" : _React$useContext$pre, rootClassName = _React$useContext.rootClassName;
    var classString = (0, import_classnames.default)(rootClassName, prefixCls, (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-").concat(icon.name), !!icon.name), _defineProperty(_classNames, "".concat(prefixCls, "-spin"), !!spin || icon.name === "loading"), _classNames), className);
    var iconTabIndex = tabIndex;
    if (iconTabIndex === void 0 && onClick) {
      iconTabIndex = -1;
    }
    var svgStyle = rotate ? {
      msTransform: "rotate(".concat(rotate, "deg)"),
      transform: "rotate(".concat(rotate, "deg)")
    } : void 0;
    var _normalizeTwoToneColo = normalizeTwoToneColors(twoToneColor), _normalizeTwoToneColo2 = _slicedToArray(_normalizeTwoToneColo, 2), primaryColor = _normalizeTwoToneColo2[0], secondaryColor = _normalizeTwoToneColo2[1];
    return /* @__PURE__ */ React17.createElement("span", _objectSpread2(_objectSpread2({
      role: "img",
      "aria-label": icon.name
    }, restProps), {}, {
      ref,
      tabIndex: iconTabIndex,
      onClick,
      className: classString
    }), /* @__PURE__ */ React17.createElement(IconBase_default, {
      icon,
      primaryColor,
      secondaryColor,
      style: svgStyle
    }));
  });
  Icon.displayName = "AntdIcon";
  Icon.getTwoToneColor = getTwoToneColor;
  Icon.setTwoToneColor = setTwoToneColor;
  var AntdIcon_default = Icon;

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/CheckCircleFilled.js
  var CheckCircleFilled2 = function CheckCircleFilled3(props, ref) {
    return /* @__PURE__ */ React18.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: CheckCircleFilled_default
    }));
  };
  CheckCircleFilled2.displayName = "CheckCircleFilled";
  var CheckCircleFilled_default2 = /* @__PURE__ */ React18.forwardRef(CheckCircleFilled2);

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/CloseCircleFilled.js
  var React19 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/CloseCircleFilled.js
  var CloseCircleFilled = { "icon": { "tag": "svg", "attrs": { "fill-rule": "evenodd", "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M512 64c247.4 0 448 200.6 448 448S759.4 960 512 960 64 759.4 64 512 264.6 64 512 64zm127.98 274.82h-.04l-.08.06L512 466.75 384.14 338.88c-.04-.05-.06-.06-.08-.06a.12.12 0 00-.07 0c-.03 0-.05.01-.09.05l-45.02 45.02a.2.2 0 00-.05.09.12.12 0 000 .07v.02a.27.27 0 00.06.06L466.75 512 338.88 639.86c-.05.04-.06.06-.06.08a.12.12 0 000 .07c0 .03.01.05.05.09l45.02 45.02a.2.2 0 00.09.05.12.12 0 00.07 0c.02 0 .04-.01.08-.05L512 557.25l127.86 127.87c.04.04.06.05.08.05a.12.12 0 00.07 0c.03 0 .05-.01.09-.05l45.02-45.02a.2.2 0 00.05-.09.12.12 0 000-.07v-.02a.27.27 0 00-.05-.06L557.25 512l127.87-127.86c.04-.04.05-.06.05-.08a.12.12 0 000-.07c0-.03-.01-.05-.05-.09l-45.02-45.02a.2.2 0 00-.09-.05.12.12 0 00-.07 0z" } }] }, "name": "close-circle", "theme": "filled" };
  var CloseCircleFilled_default = CloseCircleFilled;

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/CloseCircleFilled.js
  var CloseCircleFilled2 = function CloseCircleFilled3(props, ref) {
    return /* @__PURE__ */ React19.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: CloseCircleFilled_default
    }));
  };
  CloseCircleFilled2.displayName = "CloseCircleFilled";
  var CloseCircleFilled_default2 = /* @__PURE__ */ React19.forwardRef(CloseCircleFilled2);

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/ExclamationCircleFilled.js
  var React20 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/ExclamationCircleFilled.js
  var ExclamationCircleFilled = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm-32 232c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v272c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V296zm32 440a48.01 48.01 0 010-96 48.01 48.01 0 010 96z" } }] }, "name": "exclamation-circle", "theme": "filled" };
  var ExclamationCircleFilled_default = ExclamationCircleFilled;

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/ExclamationCircleFilled.js
  var ExclamationCircleFilled2 = function ExclamationCircleFilled3(props, ref) {
    return /* @__PURE__ */ React20.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: ExclamationCircleFilled_default
    }));
  };
  ExclamationCircleFilled2.displayName = "ExclamationCircleFilled";
  var ExclamationCircleFilled_default2 = /* @__PURE__ */ React20.forwardRef(ExclamationCircleFilled2);

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/InfoCircleFilled.js
  var React21 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/InfoCircleFilled.js
  var InfoCircleFilled = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm32 664c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V456c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v272zm-32-344a48.01 48.01 0 010-96 48.01 48.01 0 010 96z" } }] }, "name": "info-circle", "theme": "filled" };
  var InfoCircleFilled_default = InfoCircleFilled;

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/InfoCircleFilled.js
  var InfoCircleFilled2 = function InfoCircleFilled3(props, ref) {
    return /* @__PURE__ */ React21.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: InfoCircleFilled_default
    }));
  };
  InfoCircleFilled2.displayName = "InfoCircleFilled";
  var InfoCircleFilled_default2 = /* @__PURE__ */ React21.forwardRef(InfoCircleFilled2);

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/LoadingOutlined.js
  var React22 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/LoadingOutlined.js
  var LoadingOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "0 0 1024 1024", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M988 548c-19.9 0-36-16.1-36-36 0-59.4-11.6-117-34.6-171.3a440.45 440.45 0 00-94.3-139.9 437.71 437.71 0 00-139.9-94.3C629 83.6 571.4 72 512 72c-19.9 0-36-16.1-36-36s16.1-36 36-36c69.1 0 136.2 13.5 199.3 40.3C772.3 66 827 103 874 150c47 47 83.9 101.8 109.7 162.7 26.7 63.1 40.2 130.2 40.2 199.3.1 19.9-16 36-35.9 36z" } }] }, "name": "loading", "theme": "outlined" };
  var LoadingOutlined_default = LoadingOutlined;

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/LoadingOutlined.js
  var LoadingOutlined2 = function LoadingOutlined3(props, ref) {
    return /* @__PURE__ */ React22.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: LoadingOutlined_default
    }));
  };
  LoadingOutlined2.displayName = "LoadingOutlined";
  var LoadingOutlined_default2 = /* @__PURE__ */ React22.forwardRef(LoadingOutlined2);

  // node_modules/antd/es/message/index.js
  var import_classnames5 = __toESM(require_classnames());

  // node_modules/rc-notification/es/Notification.js
  var React34 = __toESM(require_react());
  var import_react21 = __toESM(require_react());

  // node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js
  function _regeneratorRuntime() {
    "use strict";
    _regeneratorRuntime = function _regeneratorRuntime2() {
      return e3;
    };
    var t4, e3 = {}, r4 = Object.prototype, n4 = r4.hasOwnProperty, o3 = Object.defineProperty || function(t5, e4, r5) {
      t5[e4] = r5.value;
    }, i3 = "function" == typeof Symbol ? Symbol : {}, a2 = i3.iterator || "@@iterator", c2 = i3.asyncIterator || "@@asyncIterator", u2 = i3.toStringTag || "@@toStringTag";
    function define2(t5, e4, r5) {
      return Object.defineProperty(t5, e4, {
        value: r5,
        enumerable: true,
        configurable: true,
        writable: true
      }), t5[e4];
    }
    try {
      define2({}, "");
    } catch (t5) {
      define2 = function define3(t6, e4, r5) {
        return t6[e4] = r5;
      };
    }
    function wrap(t5, e4, r5, n5) {
      var i4 = e4 && e4.prototype instanceof Generator ? e4 : Generator, a3 = Object.create(i4.prototype), c3 = new Context3(n5 || []);
      return o3(a3, "_invoke", {
        value: makeInvokeMethod(t5, r5, c3)
      }), a3;
    }
    function tryCatch(t5, e4, r5) {
      try {
        return {
          type: "normal",
          arg: t5.call(e4, r5)
        };
      } catch (t6) {
        return {
          type: "throw",
          arg: t6
        };
      }
    }
    e3.wrap = wrap;
    var h2 = "suspendedStart", l2 = "suspendedYield", f2 = "executing", s2 = "completed", y2 = {};
    function Generator() {
    }
    function GeneratorFunction() {
    }
    function GeneratorFunctionPrototype() {
    }
    var p2 = {};
    define2(p2, a2, function() {
      return this;
    });
    var d2 = Object.getPrototypeOf, v2 = d2 && d2(d2(values([])));
    v2 && v2 !== r4 && n4.call(v2, a2) && (p2 = v2);
    var g2 = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p2);
    function defineIteratorMethods(t5) {
      ["next", "throw", "return"].forEach(function(e4) {
        define2(t5, e4, function(t6) {
          return this._invoke(e4, t6);
        });
      });
    }
    function AsyncIterator(t5, e4) {
      function invoke(r6, o4, i4, a3) {
        var c3 = tryCatch(t5[r6], t5, o4);
        if ("throw" !== c3.type) {
          var u3 = c3.arg, h3 = u3.value;
          return h3 && "object" == _typeof(h3) && n4.call(h3, "__await") ? e4.resolve(h3.__await).then(function(t6) {
            invoke("next", t6, i4, a3);
          }, function(t6) {
            invoke("throw", t6, i4, a3);
          }) : e4.resolve(h3).then(function(t6) {
            u3.value = t6, i4(u3);
          }, function(t6) {
            return invoke("throw", t6, i4, a3);
          });
        }
        a3(c3.arg);
      }
      var r5;
      o3(this, "_invoke", {
        value: function value(t6, n5) {
          function callInvokeWithMethodAndArg() {
            return new e4(function(e5, r6) {
              invoke(t6, n5, e5, r6);
            });
          }
          return r5 = r5 ? r5.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        }
      });
    }
    function makeInvokeMethod(e4, r5, n5) {
      var o4 = h2;
      return function(i4, a3) {
        if (o4 === f2)
          throw new Error("Generator is already running");
        if (o4 === s2) {
          if ("throw" === i4)
            throw a3;
          return {
            value: t4,
            done: true
          };
        }
        for (n5.method = i4, n5.arg = a3; ; ) {
          var c3 = n5.delegate;
          if (c3) {
            var u3 = maybeInvokeDelegate(c3, n5);
            if (u3) {
              if (u3 === y2)
                continue;
              return u3;
            }
          }
          if ("next" === n5.method)
            n5.sent = n5._sent = n5.arg;
          else if ("throw" === n5.method) {
            if (o4 === h2)
              throw o4 = s2, n5.arg;
            n5.dispatchException(n5.arg);
          } else
            "return" === n5.method && n5.abrupt("return", n5.arg);
          o4 = f2;
          var p3 = tryCatch(e4, r5, n5);
          if ("normal" === p3.type) {
            if (o4 = n5.done ? s2 : l2, p3.arg === y2)
              continue;
            return {
              value: p3.arg,
              done: n5.done
            };
          }
          "throw" === p3.type && (o4 = s2, n5.method = "throw", n5.arg = p3.arg);
        }
      };
    }
    function maybeInvokeDelegate(e4, r5) {
      var n5 = r5.method, o4 = e4.iterator[n5];
      if (o4 === t4)
        return r5.delegate = null, "throw" === n5 && e4.iterator["return"] && (r5.method = "return", r5.arg = t4, maybeInvokeDelegate(e4, r5), "throw" === r5.method) || "return" !== n5 && (r5.method = "throw", r5.arg = new TypeError("The iterator does not provide a '" + n5 + "' method")), y2;
      var i4 = tryCatch(o4, e4.iterator, r5.arg);
      if ("throw" === i4.type)
        return r5.method = "throw", r5.arg = i4.arg, r5.delegate = null, y2;
      var a3 = i4.arg;
      return a3 ? a3.done ? (r5[e4.resultName] = a3.value, r5.next = e4.nextLoc, "return" !== r5.method && (r5.method = "next", r5.arg = t4), r5.delegate = null, y2) : a3 : (r5.method = "throw", r5.arg = new TypeError("iterator result is not an object"), r5.delegate = null, y2);
    }
    function pushTryEntry(t5) {
      var e4 = {
        tryLoc: t5[0]
      };
      1 in t5 && (e4.catchLoc = t5[1]), 2 in t5 && (e4.finallyLoc = t5[2], e4.afterLoc = t5[3]), this.tryEntries.push(e4);
    }
    function resetTryEntry(t5) {
      var e4 = t5.completion || {};
      e4.type = "normal", delete e4.arg, t5.completion = e4;
    }
    function Context3(t5) {
      this.tryEntries = [{
        tryLoc: "root"
      }], t5.forEach(pushTryEntry, this), this.reset(true);
    }
    function values(e4) {
      if (e4 || "" === e4) {
        var r5 = e4[a2];
        if (r5)
          return r5.call(e4);
        if ("function" == typeof e4.next)
          return e4;
        if (!isNaN(e4.length)) {
          var o4 = -1, i4 = function next() {
            for (; ++o4 < e4.length; )
              if (n4.call(e4, o4))
                return next.value = e4[o4], next.done = false, next;
            return next.value = t4, next.done = true, next;
          };
          return i4.next = i4;
        }
      }
      throw new TypeError(_typeof(e4) + " is not iterable");
    }
    return GeneratorFunction.prototype = GeneratorFunctionPrototype, o3(g2, "constructor", {
      value: GeneratorFunctionPrototype,
      configurable: true
    }), o3(GeneratorFunctionPrototype, "constructor", {
      value: GeneratorFunction,
      configurable: true
    }), GeneratorFunction.displayName = define2(GeneratorFunctionPrototype, u2, "GeneratorFunction"), e3.isGeneratorFunction = function(t5) {
      var e4 = "function" == typeof t5 && t5.constructor;
      return !!e4 && (e4 === GeneratorFunction || "GeneratorFunction" === (e4.displayName || e4.name));
    }, e3.mark = function(t5) {
      return Object.setPrototypeOf ? Object.setPrototypeOf(t5, GeneratorFunctionPrototype) : (t5.__proto__ = GeneratorFunctionPrototype, define2(t5, u2, "GeneratorFunction")), t5.prototype = Object.create(g2), t5;
    }, e3.awrap = function(t5) {
      return {
        __await: t5
      };
    }, defineIteratorMethods(AsyncIterator.prototype), define2(AsyncIterator.prototype, c2, function() {
      return this;
    }), e3.AsyncIterator = AsyncIterator, e3.async = function(t5, r5, n5, o4, i4) {
      void 0 === i4 && (i4 = Promise);
      var a3 = new AsyncIterator(wrap(t5, r5, n5, o4), i4);
      return e3.isGeneratorFunction(r5) ? a3 : a3.next().then(function(t6) {
        return t6.done ? t6.value : a3.next();
      });
    }, defineIteratorMethods(g2), define2(g2, u2, "Generator"), define2(g2, a2, function() {
      return this;
    }), define2(g2, "toString", function() {
      return "[object Generator]";
    }), e3.keys = function(t5) {
      var e4 = Object(t5), r5 = [];
      for (var n5 in e4)
        r5.push(n5);
      return r5.reverse(), function next() {
        for (; r5.length; ) {
          var t6 = r5.pop();
          if (t6 in e4)
            return next.value = t6, next.done = false, next;
        }
        return next.done = true, next;
      };
    }, e3.values = values, Context3.prototype = {
      constructor: Context3,
      reset: function reset(e4) {
        if (this.prev = 0, this.next = 0, this.sent = this._sent = t4, this.done = false, this.delegate = null, this.method = "next", this.arg = t4, this.tryEntries.forEach(resetTryEntry), !e4)
          for (var r5 in this)
            "t" === r5.charAt(0) && n4.call(this, r5) && !isNaN(+r5.slice(1)) && (this[r5] = t4);
      },
      stop: function stop() {
        this.done = true;
        var t5 = this.tryEntries[0].completion;
        if ("throw" === t5.type)
          throw t5.arg;
        return this.rval;
      },
      dispatchException: function dispatchException(e4) {
        if (this.done)
          throw e4;
        var r5 = this;
        function handle2(n5, o5) {
          return a3.type = "throw", a3.arg = e4, r5.next = n5, o5 && (r5.method = "next", r5.arg = t4), !!o5;
        }
        for (var o4 = this.tryEntries.length - 1; o4 >= 0; --o4) {
          var i4 = this.tryEntries[o4], a3 = i4.completion;
          if ("root" === i4.tryLoc)
            return handle2("end");
          if (i4.tryLoc <= this.prev) {
            var c3 = n4.call(i4, "catchLoc"), u3 = n4.call(i4, "finallyLoc");
            if (c3 && u3) {
              if (this.prev < i4.catchLoc)
                return handle2(i4.catchLoc, true);
              if (this.prev < i4.finallyLoc)
                return handle2(i4.finallyLoc);
            } else if (c3) {
              if (this.prev < i4.catchLoc)
                return handle2(i4.catchLoc, true);
            } else {
              if (!u3)
                throw new Error("try statement without catch or finally");
              if (this.prev < i4.finallyLoc)
                return handle2(i4.finallyLoc);
            }
          }
        }
      },
      abrupt: function abrupt(t5, e4) {
        for (var r5 = this.tryEntries.length - 1; r5 >= 0; --r5) {
          var o4 = this.tryEntries[r5];
          if (o4.tryLoc <= this.prev && n4.call(o4, "finallyLoc") && this.prev < o4.finallyLoc) {
            var i4 = o4;
            break;
          }
        }
        i4 && ("break" === t5 || "continue" === t5) && i4.tryLoc <= e4 && e4 <= i4.finallyLoc && (i4 = null);
        var a3 = i4 ? i4.completion : {};
        return a3.type = t5, a3.arg = e4, i4 ? (this.method = "next", this.next = i4.finallyLoc, y2) : this.complete(a3);
      },
      complete: function complete(t5, e4) {
        if ("throw" === t5.type)
          throw t5.arg;
        return "break" === t5.type || "continue" === t5.type ? this.next = t5.arg : "return" === t5.type ? (this.rval = this.arg = t5.arg, this.method = "return", this.next = "end") : "normal" === t5.type && e4 && (this.next = e4), y2;
      },
      finish: function finish(t5) {
        for (var e4 = this.tryEntries.length - 1; e4 >= 0; --e4) {
          var r5 = this.tryEntries[e4];
          if (r5.finallyLoc === t5)
            return this.complete(r5.completion, r5.afterLoc), resetTryEntry(r5), y2;
        }
      },
      "catch": function _catch(t5) {
        for (var e4 = this.tryEntries.length - 1; e4 >= 0; --e4) {
          var r5 = this.tryEntries[e4];
          if (r5.tryLoc === t5) {
            var n5 = r5.completion;
            if ("throw" === n5.type) {
              var o4 = n5.arg;
              resetTryEntry(r5);
            }
            return o4;
          }
        }
        throw new Error("illegal catch attempt");
      },
      delegateYield: function delegateYield(e4, r5, n5) {
        return this.delegate = {
          iterator: values(e4),
          resultName: r5,
          nextLoc: n5
        }, "next" === this.method && (this.arg = t4), y2;
      }
    }, e3;
  }

  // node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js
  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key2, arg) {
    try {
      var info = gen[key2](arg);
      var value = info.value;
    } catch (error2) {
      reject(error2);
      return;
    }
    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }
  function _asyncToGenerator(fn2) {
    return function() {
      var self2 = this, args = arguments;
      return new Promise(function(resolve, reject) {
        var gen = fn2.apply(self2, args);
        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }
        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }
        _next(void 0);
      });
    };
  }

  // node_modules/rc-util/es/React/render.js
  var ReactDOM2 = __toESM(require_react_dom());
  var fullClone = _objectSpread2({}, ReactDOM2);
  var version = fullClone.version;
  var reactRender = fullClone.render;
  var unmountComponentAtNode = fullClone.unmountComponentAtNode;
  var createRoot;
  try {
    mainVersion = Number((version || "").split(".")[0]);
    if (mainVersion >= 18) {
      createRoot = fullClone.createRoot;
    }
  } catch (e3) {
  }
  var mainVersion;
  function toggleWarning(skip) {
    var __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = fullClone.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    if (__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED && _typeof(__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED) === "object") {
      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.usingClientEntryPoint = skip;
    }
  }
  var MARK = "__rc_react_root__";
  function modernRender(node, container) {
    toggleWarning(true);
    var root3 = container[MARK] || createRoot(container);
    toggleWarning(false);
    root3.render(node);
    container[MARK] = root3;
  }
  function legacyRender(node, container) {
    reactRender(node, container);
  }
  function render(node, container) {
    if (createRoot) {
      modernRender(node, container);
      return;
    }
    legacyRender(node, container);
  }
  function modernUnmount(_x) {
    return _modernUnmount.apply(this, arguments);
  }
  function _modernUnmount() {
    _modernUnmount = _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime().mark(function _callee(container) {
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1)
          switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", Promise.resolve().then(function() {
                var _container$MARK;
                (_container$MARK = container[MARK]) === null || _container$MARK === void 0 ? void 0 : _container$MARK.unmount();
                delete container[MARK];
              }));
            case 1:
            case "end":
              return _context.stop();
          }
      }, _callee);
    }));
    return _modernUnmount.apply(this, arguments);
  }
  function legacyUnmount(container) {
    unmountComponentAtNode(container);
  }
  function unmount(_x2) {
    return _unmount.apply(this, arguments);
  }
  function _unmount() {
    _unmount = _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime().mark(function _callee2(container) {
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1)
          switch (_context2.prev = _context2.next) {
            case 0:
              if (!(createRoot !== void 0)) {
                _context2.next = 2;
                break;
              }
              return _context2.abrupt("return", modernUnmount(container));
            case 2:
              legacyUnmount(container);
            case 3:
            case "end":
              return _context2.stop();
          }
      }, _callee2);
    }));
    return _unmount.apply(this, arguments);
  }

  // node_modules/rc-notification/es/Notification.js
  var import_classnames4 = __toESM(require_classnames());

  // node_modules/rc-motion/es/CSSMotion.js
  var import_classnames2 = __toESM(require_classnames());
  var React30 = __toESM(require_react());
  var import_react19 = __toESM(require_react());

  // node_modules/rc-motion/es/context.js
  var React23 = __toESM(require_react());
  var Context = /* @__PURE__ */ React23.createContext({});

  // node_modules/rc-motion/es/DomWrapper.js
  var React24 = __toESM(require_react());
  var DomWrapper2 = /* @__PURE__ */ function(_React$Component) {
    _inherits(DomWrapper3, _React$Component);
    var _super = _createSuper(DomWrapper3);
    function DomWrapper3() {
      _classCallCheck(this, DomWrapper3);
      return _super.apply(this, arguments);
    }
    _createClass(DomWrapper3, [{
      key: "render",
      value: function render2() {
        return this.props.children;
      }
    }]);
    return DomWrapper3;
  }(React24.Component);
  var DomWrapper_default = DomWrapper2;

  // node_modules/rc-util/es/hooks/useState.js
  var React25 = __toESM(require_react());
  function useSafeState(defaultValue) {
    var destroyRef = React25.useRef(false);
    var _React$useState = React25.useState(defaultValue), _React$useState2 = _slicedToArray(_React$useState, 2), value = _React$useState2[0], setValue = _React$useState2[1];
    React25.useEffect(function() {
      destroyRef.current = false;
      return function() {
        destroyRef.current = true;
      };
    }, []);
    function safeSetState(updater, ignoreDestroy) {
      if (ignoreDestroy && destroyRef.current) {
        return;
      }
      setValue(updater);
    }
    return [value, safeSetState];
  }

  // node_modules/rc-motion/es/hooks/useStatus.js
  var React29 = __toESM(require_react());
  var import_react18 = __toESM(require_react());

  // node_modules/rc-motion/es/interface.js
  var STATUS_NONE = "none";
  var STATUS_APPEAR = "appear";
  var STATUS_ENTER = "enter";
  var STATUS_LEAVE = "leave";
  var STEP_NONE = "none";
  var STEP_PREPARE = "prepare";
  var STEP_START = "start";
  var STEP_ACTIVE = "active";
  var STEP_ACTIVATED = "end";
  var STEP_PREPARED = "prepared";

  // node_modules/rc-motion/es/hooks/useDomMotionEvents.js
  var React26 = __toESM(require_react());
  var import_react16 = __toESM(require_react());

  // node_modules/rc-motion/es/util/motion.js
  function makePrefixMap(styleProp, eventName) {
    var prefixes = {};
    prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
    prefixes["Webkit".concat(styleProp)] = "webkit".concat(eventName);
    prefixes["Moz".concat(styleProp)] = "moz".concat(eventName);
    prefixes["ms".concat(styleProp)] = "MS".concat(eventName);
    prefixes["O".concat(styleProp)] = "o".concat(eventName.toLowerCase());
    return prefixes;
  }
  function getVendorPrefixes(domSupport, win) {
    var prefixes = {
      animationend: makePrefixMap("Animation", "AnimationEnd"),
      transitionend: makePrefixMap("Transition", "TransitionEnd")
    };
    if (domSupport) {
      if (!("AnimationEvent" in win)) {
        delete prefixes.animationend.animation;
      }
      if (!("TransitionEvent" in win)) {
        delete prefixes.transitionend.transition;
      }
    }
    return prefixes;
  }
  var vendorPrefixes = getVendorPrefixes(canUseDom(), typeof window !== "undefined" ? window : {});
  var style = {};
  if (canUseDom()) {
    _document$createEleme = document.createElement("div");
    style = _document$createEleme.style;
  }
  var _document$createEleme;
  var prefixedEventNames = {};
  function getVendorPrefixedEventName(eventName) {
    if (prefixedEventNames[eventName]) {
      return prefixedEventNames[eventName];
    }
    var prefixMap = vendorPrefixes[eventName];
    if (prefixMap) {
      var stylePropList = Object.keys(prefixMap);
      var len = stylePropList.length;
      for (var i3 = 0; i3 < len; i3 += 1) {
        var styleProp = stylePropList[i3];
        if (Object.prototype.hasOwnProperty.call(prefixMap, styleProp) && styleProp in style) {
          prefixedEventNames[eventName] = prefixMap[styleProp];
          return prefixedEventNames[eventName];
        }
      }
    }
    return "";
  }
  var internalAnimationEndName = getVendorPrefixedEventName("animationend");
  var internalTransitionEndName = getVendorPrefixedEventName("transitionend");
  var supportTransition = !!(internalAnimationEndName && internalTransitionEndName);
  var animationEndName = internalAnimationEndName || "animationend";
  var transitionEndName = internalTransitionEndName || "transitionend";
  function getTransitionName(transitionName2, transitionType) {
    if (!transitionName2)
      return null;
    if (_typeof(transitionName2) === "object") {
      var type4 = transitionType.replace(/-\w/g, function(match2) {
        return match2[1].toUpperCase();
      });
      return transitionName2[type4];
    }
    return "".concat(transitionName2, "-").concat(transitionType);
  }

  // node_modules/rc-motion/es/hooks/useDomMotionEvents.js
  var useDomMotionEvents_default = function(callback) {
    var cacheElementRef = (0, import_react16.useRef)();
    var callbackRef = (0, import_react16.useRef)(callback);
    callbackRef.current = callback;
    var onInternalMotionEnd = React26.useCallback(function(event) {
      callbackRef.current(event);
    }, []);
    function removeMotionEvents(element) {
      if (element) {
        element.removeEventListener(transitionEndName, onInternalMotionEnd);
        element.removeEventListener(animationEndName, onInternalMotionEnd);
      }
    }
    function patchMotionEvents(element) {
      if (cacheElementRef.current && cacheElementRef.current !== element) {
        removeMotionEvents(cacheElementRef.current);
      }
      if (element && element !== cacheElementRef.current) {
        element.addEventListener(transitionEndName, onInternalMotionEnd);
        element.addEventListener(animationEndName, onInternalMotionEnd);
        cacheElementRef.current = element;
      }
    }
    React26.useEffect(function() {
      return function() {
        removeMotionEvents(cacheElementRef.current);
      };
    }, []);
    return [patchMotionEvents, removeMotionEvents];
  };

  // node_modules/rc-motion/es/hooks/useIsomorphicLayoutEffect.js
  var import_react17 = __toESM(require_react());
  var useIsomorphicLayoutEffect3 = canUseDom() ? import_react17.useLayoutEffect : import_react17.useEffect;
  var useIsomorphicLayoutEffect_default = useIsomorphicLayoutEffect3;

  // node_modules/rc-motion/es/hooks/useStepQueue.js
  var React28 = __toESM(require_react());

  // node_modules/rc-util/es/raf.js
  var raf = function raf2(callback) {
    return +setTimeout(callback, 16);
  };
  var caf = function caf2(num) {
    return clearTimeout(num);
  };
  if (typeof window !== "undefined" && "requestAnimationFrame" in window) {
    raf = function raf3(callback) {
      return window.requestAnimationFrame(callback);
    };
    caf = function caf3(handle2) {
      return window.cancelAnimationFrame(handle2);
    };
  }
  var rafUUID = 0;
  var rafIds = /* @__PURE__ */ new Map();
  function cleanup(id2) {
    rafIds.delete(id2);
  }
  var wrapperRaf = function wrapperRaf2(callback) {
    var times = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
    rafUUID += 1;
    var id2 = rafUUID;
    function callRef(leftTimes) {
      if (leftTimes === 0) {
        cleanup(id2);
        callback();
      } else {
        var realId = raf(function() {
          callRef(leftTimes - 1);
        });
        rafIds.set(id2, realId);
      }
    }
    callRef(times);
    return id2;
  };
  wrapperRaf.cancel = function(id2) {
    var realId = rafIds.get(id2);
    cleanup(realId);
    return caf(realId);
  };
  var raf_default = wrapperRaf;

  // node_modules/rc-motion/es/hooks/useNextFrame.js
  var React27 = __toESM(require_react());
  var useNextFrame_default = function() {
    var nextFrameRef = React27.useRef(null);
    function cancelNextFrame() {
      raf_default.cancel(nextFrameRef.current);
    }
    function nextFrame(callback) {
      var delay = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 2;
      cancelNextFrame();
      var nextFrameId = raf_default(function() {
        if (delay <= 1) {
          callback({
            isCanceled: function isCanceled() {
              return nextFrameId !== nextFrameRef.current;
            }
          });
        } else {
          nextFrame(callback, delay - 1);
        }
      });
      nextFrameRef.current = nextFrameId;
    }
    React27.useEffect(function() {
      return function() {
        cancelNextFrame();
      };
    }, []);
    return [nextFrame, cancelNextFrame];
  };

  // node_modules/rc-motion/es/hooks/useStepQueue.js
  var FULL_STEP_QUEUE = [STEP_PREPARE, STEP_START, STEP_ACTIVE, STEP_ACTIVATED];
  var SIMPLE_STEP_QUEUE = [STEP_PREPARE, STEP_PREPARED];
  var SkipStep = false;
  var DoStep = true;
  function isActive(step) {
    return step === STEP_ACTIVE || step === STEP_ACTIVATED;
  }
  var useStepQueue_default = function(status, prepareOnly, callback) {
    var _useState = useSafeState(STEP_NONE), _useState2 = _slicedToArray(_useState, 2), step = _useState2[0], setStep = _useState2[1];
    var _useNextFrame = useNextFrame_default(), _useNextFrame2 = _slicedToArray(_useNextFrame, 2), nextFrame = _useNextFrame2[0], cancelNextFrame = _useNextFrame2[1];
    function startQueue() {
      setStep(STEP_PREPARE, true);
    }
    var STEP_QUEUE = prepareOnly ? SIMPLE_STEP_QUEUE : FULL_STEP_QUEUE;
    useIsomorphicLayoutEffect_default(function() {
      if (step !== STEP_NONE && step !== STEP_ACTIVATED) {
        var index2 = STEP_QUEUE.indexOf(step);
        var nextStep = STEP_QUEUE[index2 + 1];
        var result2 = callback(step);
        if (result2 === SkipStep) {
          setStep(nextStep, true);
        } else if (nextStep) {
          nextFrame(function(info) {
            function doNext() {
              if (info.isCanceled())
                return;
              setStep(nextStep, true);
            }
            if (result2 === true) {
              doNext();
            } else {
              Promise.resolve(result2).then(doNext);
            }
          });
        }
      }
    }, [status, step]);
    React28.useEffect(function() {
      return function() {
        cancelNextFrame();
      };
    }, []);
    return [startQueue, step];
  };

  // node_modules/rc-motion/es/hooks/useStatus.js
  function useStatus(supportMotion, visible, getElement2, _ref) {
    var _ref$motionEnter = _ref.motionEnter, motionEnter = _ref$motionEnter === void 0 ? true : _ref$motionEnter, _ref$motionAppear = _ref.motionAppear, motionAppear = _ref$motionAppear === void 0 ? true : _ref$motionAppear, _ref$motionLeave = _ref.motionLeave, motionLeave = _ref$motionLeave === void 0 ? true : _ref$motionLeave, motionDeadline = _ref.motionDeadline, motionLeaveImmediately = _ref.motionLeaveImmediately, onAppearPrepare = _ref.onAppearPrepare, onEnterPrepare = _ref.onEnterPrepare, onLeavePrepare = _ref.onLeavePrepare, onAppearStart = _ref.onAppearStart, onEnterStart = _ref.onEnterStart, onLeaveStart = _ref.onLeaveStart, onAppearActive = _ref.onAppearActive, onEnterActive = _ref.onEnterActive, onLeaveActive = _ref.onLeaveActive, onAppearEnd = _ref.onAppearEnd, onEnterEnd = _ref.onEnterEnd, onLeaveEnd = _ref.onLeaveEnd, onVisibleChanged = _ref.onVisibleChanged;
    var _useState = useSafeState(), _useState2 = _slicedToArray(_useState, 2), asyncVisible = _useState2[0], setAsyncVisible = _useState2[1];
    var _useState3 = useSafeState(STATUS_NONE), _useState4 = _slicedToArray(_useState3, 2), status = _useState4[0], setStatus = _useState4[1];
    var _useState5 = useSafeState(null), _useState6 = _slicedToArray(_useState5, 2), style3 = _useState6[0], setStyle = _useState6[1];
    var mountedRef = (0, import_react18.useRef)(false);
    var deadlineRef = (0, import_react18.useRef)(null);
    function getDomElement() {
      return getElement2();
    }
    var activeRef = (0, import_react18.useRef)(false);
    function updateMotionEndStatus() {
      setStatus(STATUS_NONE, true);
      setStyle(null, true);
    }
    function onInternalMotionEnd(event) {
      var element = getDomElement();
      if (event && !event.deadline && event.target !== element) {
        return;
      }
      var currentActive = activeRef.current;
      var canEnd;
      if (status === STATUS_APPEAR && currentActive) {
        canEnd = onAppearEnd === null || onAppearEnd === void 0 ? void 0 : onAppearEnd(element, event);
      } else if (status === STATUS_ENTER && currentActive) {
        canEnd = onEnterEnd === null || onEnterEnd === void 0 ? void 0 : onEnterEnd(element, event);
      } else if (status === STATUS_LEAVE && currentActive) {
        canEnd = onLeaveEnd === null || onLeaveEnd === void 0 ? void 0 : onLeaveEnd(element, event);
      }
      if (status !== STATUS_NONE && currentActive && canEnd !== false) {
        updateMotionEndStatus();
      }
    }
    var _useDomMotionEvents = useDomMotionEvents_default(onInternalMotionEnd), _useDomMotionEvents2 = _slicedToArray(_useDomMotionEvents, 1), patchMotionEvents = _useDomMotionEvents2[0];
    var getEventHandlers = function getEventHandlers2(targetStatus) {
      var _ref2, _ref3, _ref4;
      switch (targetStatus) {
        case STATUS_APPEAR:
          return _ref2 = {}, _defineProperty(_ref2, STEP_PREPARE, onAppearPrepare), _defineProperty(_ref2, STEP_START, onAppearStart), _defineProperty(_ref2, STEP_ACTIVE, onAppearActive), _ref2;
        case STATUS_ENTER:
          return _ref3 = {}, _defineProperty(_ref3, STEP_PREPARE, onEnterPrepare), _defineProperty(_ref3, STEP_START, onEnterStart), _defineProperty(_ref3, STEP_ACTIVE, onEnterActive), _ref3;
        case STATUS_LEAVE:
          return _ref4 = {}, _defineProperty(_ref4, STEP_PREPARE, onLeavePrepare), _defineProperty(_ref4, STEP_START, onLeaveStart), _defineProperty(_ref4, STEP_ACTIVE, onLeaveActive), _ref4;
        default:
          return {};
      }
    };
    var eventHandlers = React29.useMemo(function() {
      return getEventHandlers(status);
    }, [status]);
    var _useStepQueue = useStepQueue_default(status, !supportMotion, function(newStep) {
      if (newStep === STEP_PREPARE) {
        var onPrepare = eventHandlers[STEP_PREPARE];
        if (!onPrepare) {
          return SkipStep;
        }
        return onPrepare(getDomElement());
      }
      if (step in eventHandlers) {
        var _eventHandlers$step;
        setStyle(((_eventHandlers$step = eventHandlers[step]) === null || _eventHandlers$step === void 0 ? void 0 : _eventHandlers$step.call(eventHandlers, getDomElement(), null)) || null);
      }
      if (step === STEP_ACTIVE) {
        patchMotionEvents(getDomElement());
        if (motionDeadline > 0) {
          clearTimeout(deadlineRef.current);
          deadlineRef.current = setTimeout(function() {
            onInternalMotionEnd({
              deadline: true
            });
          }, motionDeadline);
        }
      }
      if (step === STEP_PREPARED) {
        updateMotionEndStatus();
      }
      return DoStep;
    }), _useStepQueue2 = _slicedToArray(_useStepQueue, 2), startStep = _useStepQueue2[0], step = _useStepQueue2[1];
    var active = isActive(step);
    activeRef.current = active;
    useIsomorphicLayoutEffect_default(function() {
      setAsyncVisible(visible);
      var isMounted = mountedRef.current;
      mountedRef.current = true;
      var nextStatus;
      if (!isMounted && visible && motionAppear) {
        nextStatus = STATUS_APPEAR;
      }
      if (isMounted && visible && motionEnter) {
        nextStatus = STATUS_ENTER;
      }
      if (isMounted && !visible && motionLeave || !isMounted && motionLeaveImmediately && !visible && motionLeave) {
        nextStatus = STATUS_LEAVE;
      }
      var nextEventHandlers = getEventHandlers(nextStatus);
      if (nextStatus && (supportMotion || nextEventHandlers[STEP_PREPARE])) {
        setStatus(nextStatus);
        startStep();
      } else {
        setStatus(STATUS_NONE);
      }
    }, [visible]);
    (0, import_react18.useEffect)(function() {
      if (
        // Cancel appear
        status === STATUS_APPEAR && !motionAppear || // Cancel enter
        status === STATUS_ENTER && !motionEnter || // Cancel leave
        status === STATUS_LEAVE && !motionLeave
      ) {
        setStatus(STATUS_NONE);
      }
    }, [motionAppear, motionEnter, motionLeave]);
    (0, import_react18.useEffect)(function() {
      return function() {
        mountedRef.current = false;
        clearTimeout(deadlineRef.current);
      };
    }, []);
    var firstMountChangeRef = React29.useRef(false);
    (0, import_react18.useEffect)(function() {
      if (asyncVisible) {
        firstMountChangeRef.current = true;
      }
      if (asyncVisible !== void 0 && status === STATUS_NONE) {
        if (firstMountChangeRef.current || asyncVisible) {
          onVisibleChanged === null || onVisibleChanged === void 0 ? void 0 : onVisibleChanged(asyncVisible);
        }
        firstMountChangeRef.current = true;
      }
    }, [asyncVisible, status]);
    var mergedStyle = style3;
    if (eventHandlers[STEP_PREPARE] && step === STEP_START) {
      mergedStyle = _objectSpread2({
        transition: "none"
      }, mergedStyle);
    }
    return [status, step, mergedStyle, asyncVisible !== null && asyncVisible !== void 0 ? asyncVisible : visible];
  }

  // node_modules/rc-motion/es/CSSMotion.js
  function genCSSMotion(config) {
    var transitionSupport = config;
    if (_typeof(config) === "object") {
      transitionSupport = config.transitionSupport;
    }
    function isSupportTransition(props, contextMotion) {
      return !!(props.motionName && transitionSupport && contextMotion !== false);
    }
    var CSSMotion = /* @__PURE__ */ React30.forwardRef(function(props, ref) {
      var _props$visible = props.visible, visible = _props$visible === void 0 ? true : _props$visible, _props$removeOnLeave = props.removeOnLeave, removeOnLeave = _props$removeOnLeave === void 0 ? true : _props$removeOnLeave, forceRender = props.forceRender, children = props.children, motionName = props.motionName, leavedClassName = props.leavedClassName, eventProps = props.eventProps;
      var _React$useContext = React30.useContext(Context), contextMotion = _React$useContext.motion;
      var supportMotion = isSupportTransition(props, contextMotion);
      var nodeRef = (0, import_react19.useRef)();
      var wrapperNodeRef = (0, import_react19.useRef)();
      function getDomElement() {
        try {
          return nodeRef.current instanceof HTMLElement ? nodeRef.current : findDOMNode(wrapperNodeRef.current);
        } catch (e3) {
          return null;
        }
      }
      var _useStatus = useStatus(supportMotion, visible, getDomElement, props), _useStatus2 = _slicedToArray(_useStatus, 4), status = _useStatus2[0], statusStep = _useStatus2[1], statusStyle = _useStatus2[2], mergedVisible = _useStatus2[3];
      var renderedRef = React30.useRef(mergedVisible);
      if (mergedVisible) {
        renderedRef.current = true;
      }
      var setNodeRef = React30.useCallback(function(node) {
        nodeRef.current = node;
        fillRef(ref, node);
      }, [ref]);
      var motionChildren;
      var mergedProps = _objectSpread2(_objectSpread2({}, eventProps), {}, {
        visible
      });
      if (!children) {
        motionChildren = null;
      } else if (status === STATUS_NONE) {
        if (mergedVisible) {
          motionChildren = children(_objectSpread2({}, mergedProps), setNodeRef);
        } else if (!removeOnLeave && renderedRef.current && leavedClassName) {
          motionChildren = children(_objectSpread2(_objectSpread2({}, mergedProps), {}, {
            className: leavedClassName
          }), setNodeRef);
        } else if (forceRender || !removeOnLeave && !leavedClassName) {
          motionChildren = children(_objectSpread2(_objectSpread2({}, mergedProps), {}, {
            style: {
              display: "none"
            }
          }), setNodeRef);
        } else {
          motionChildren = null;
        }
      } else {
        var _classNames;
        var statusSuffix;
        if (statusStep === STEP_PREPARE) {
          statusSuffix = "prepare";
        } else if (isActive(statusStep)) {
          statusSuffix = "active";
        } else if (statusStep === STEP_START) {
          statusSuffix = "start";
        }
        var motionCls = getTransitionName(motionName, "".concat(status, "-").concat(statusSuffix));
        motionChildren = children(_objectSpread2(_objectSpread2({}, mergedProps), {}, {
          className: (0, import_classnames2.default)(getTransitionName(motionName, status), (_classNames = {}, _defineProperty(_classNames, motionCls, motionCls && statusSuffix), _defineProperty(_classNames, motionName, typeof motionName === "string"), _classNames)),
          style: statusStyle
        }), setNodeRef);
      }
      if (/* @__PURE__ */ React30.isValidElement(motionChildren) && supportRef(motionChildren)) {
        var _ref = motionChildren, originNodeRef = _ref.ref;
        if (!originNodeRef) {
          motionChildren = /* @__PURE__ */ React30.cloneElement(motionChildren, {
            ref: setNodeRef
          });
        }
      }
      return /* @__PURE__ */ React30.createElement(DomWrapper_default, {
        ref: wrapperNodeRef
      }, motionChildren);
    });
    CSSMotion.displayName = "CSSMotion";
    return CSSMotion;
  }
  var CSSMotion_default = genCSSMotion(supportTransition);

  // node_modules/rc-motion/es/CSSMotionList.js
  var React31 = __toESM(require_react());

  // node_modules/rc-motion/es/util/diff.js
  var STATUS_ADD = "add";
  var STATUS_KEEP = "keep";
  var STATUS_REMOVE = "remove";
  var STATUS_REMOVED = "removed";
  function wrapKeyToObject(key2) {
    var keyObj;
    if (key2 && _typeof(key2) === "object" && "key" in key2) {
      keyObj = key2;
    } else {
      keyObj = {
        key: key2
      };
    }
    return _objectSpread2(_objectSpread2({}, keyObj), {}, {
      key: String(keyObj.key)
    });
  }
  function parseKeys() {
    var keys2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
    return keys2.map(wrapKeyToObject);
  }
  function diffKeys() {
    var prevKeys = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
    var currentKeys = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    var list = [];
    var currentIndex = 0;
    var currentLen = currentKeys.length;
    var prevKeyObjects = parseKeys(prevKeys);
    var currentKeyObjects = parseKeys(currentKeys);
    prevKeyObjects.forEach(function(keyObj) {
      var hit = false;
      for (var i3 = currentIndex; i3 < currentLen; i3 += 1) {
        var currentKeyObj = currentKeyObjects[i3];
        if (currentKeyObj.key === keyObj.key) {
          if (currentIndex < i3) {
            list = list.concat(currentKeyObjects.slice(currentIndex, i3).map(function(obj) {
              return _objectSpread2(_objectSpread2({}, obj), {}, {
                status: STATUS_ADD
              });
            }));
            currentIndex = i3;
          }
          list.push(_objectSpread2(_objectSpread2({}, currentKeyObj), {}, {
            status: STATUS_KEEP
          }));
          currentIndex += 1;
          hit = true;
          break;
        }
      }
      if (!hit) {
        list.push(_objectSpread2(_objectSpread2({}, keyObj), {}, {
          status: STATUS_REMOVE
        }));
      }
    });
    if (currentIndex < currentLen) {
      list = list.concat(currentKeyObjects.slice(currentIndex).map(function(obj) {
        return _objectSpread2(_objectSpread2({}, obj), {}, {
          status: STATUS_ADD
        });
      }));
    }
    var keys2 = {};
    list.forEach(function(_ref) {
      var key2 = _ref.key;
      keys2[key2] = (keys2[key2] || 0) + 1;
    });
    var duplicatedKeys = Object.keys(keys2).filter(function(key2) {
      return keys2[key2] > 1;
    });
    duplicatedKeys.forEach(function(matchKey) {
      list = list.filter(function(_ref2) {
        var key2 = _ref2.key, status = _ref2.status;
        return key2 !== matchKey || status !== STATUS_REMOVE;
      });
      list.forEach(function(node) {
        if (node.key === matchKey) {
          node.status = STATUS_KEEP;
        }
      });
    });
    return list;
  }

  // node_modules/rc-motion/es/CSSMotionList.js
  var _excluded6 = ["component", "children", "onVisibleChanged", "onAllRemoved"];
  var _excluded22 = ["status"];
  var MOTION_PROP_NAMES = ["eventProps", "visible", "children", "motionName", "motionAppear", "motionEnter", "motionLeave", "motionLeaveImmediately", "motionDeadline", "removeOnLeave", "leavedClassName", "onAppearPrepare", "onAppearStart", "onAppearActive", "onAppearEnd", "onEnterStart", "onEnterActive", "onEnterEnd", "onLeaveStart", "onLeaveActive", "onLeaveEnd"];
  function genCSSMotionList(transitionSupport) {
    var CSSMotion = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : CSSMotion_default;
    var CSSMotionList = /* @__PURE__ */ function(_React$Component) {
      _inherits(CSSMotionList2, _React$Component);
      var _super = _createSuper(CSSMotionList2);
      function CSSMotionList2() {
        var _this;
        _classCallCheck(this, CSSMotionList2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty(_assertThisInitialized(_this), "state", {
          keyEntities: []
        });
        _defineProperty(_assertThisInitialized(_this), "removeKey", function(removeKey) {
          var keyEntities = _this.state.keyEntities;
          var nextKeyEntities = keyEntities.map(function(entity) {
            if (entity.key !== removeKey)
              return entity;
            return _objectSpread2(_objectSpread2({}, entity), {}, {
              status: STATUS_REMOVED
            });
          });
          _this.setState({
            keyEntities: nextKeyEntities
          });
          return nextKeyEntities.filter(function(_ref) {
            var status = _ref.status;
            return status !== STATUS_REMOVED;
          }).length;
        });
        return _this;
      }
      _createClass(CSSMotionList2, [{
        key: "render",
        value: function render2() {
          var _this2 = this;
          var keyEntities = this.state.keyEntities;
          var _this$props = this.props, component = _this$props.component, children = _this$props.children, _onVisibleChanged = _this$props.onVisibleChanged, onAllRemoved = _this$props.onAllRemoved, restProps = _objectWithoutProperties(_this$props, _excluded6);
          var Component20 = component || React31.Fragment;
          var motionProps = {};
          MOTION_PROP_NAMES.forEach(function(prop) {
            motionProps[prop] = restProps[prop];
            delete restProps[prop];
          });
          delete restProps.keys;
          return /* @__PURE__ */ React31.createElement(Component20, restProps, keyEntities.map(function(_ref2, index2) {
            var status = _ref2.status, eventProps = _objectWithoutProperties(_ref2, _excluded22);
            var visible = status === STATUS_ADD || status === STATUS_KEEP;
            return /* @__PURE__ */ React31.createElement(CSSMotion, _extends({}, motionProps, {
              key: eventProps.key,
              visible,
              eventProps,
              onVisibleChanged: function onVisibleChanged(changedVisible) {
                _onVisibleChanged === null || _onVisibleChanged === void 0 ? void 0 : _onVisibleChanged(changedVisible, {
                  key: eventProps.key
                });
                if (!changedVisible) {
                  var restKeysCount = _this2.removeKey(eventProps.key);
                  if (restKeysCount === 0 && onAllRemoved) {
                    onAllRemoved();
                  }
                }
              }
            }), function(props, ref) {
              return children(_objectSpread2(_objectSpread2({}, props), {}, {
                index: index2
              }), ref);
            });
          }));
        }
      }], [{
        key: "getDerivedStateFromProps",
        value: function getDerivedStateFromProps(_ref3, _ref4) {
          var keys2 = _ref3.keys;
          var keyEntities = _ref4.keyEntities;
          var parsedKeyObjects = parseKeys(keys2);
          var mixedKeyEntities = diffKeys(keyEntities, parsedKeyObjects);
          return {
            keyEntities: mixedKeyEntities.filter(function(entity) {
              var prevEntity = keyEntities.find(function(_ref5) {
                var key2 = _ref5.key;
                return entity.key === key2;
              });
              if (prevEntity && prevEntity.status === STATUS_REMOVED && entity.status === STATUS_REMOVE) {
                return false;
              }
              return true;
            })
          };
        }
      }]);
      return CSSMotionList2;
    }(React31.Component);
    _defineProperty(CSSMotionList, "defaultProps", {
      component: "div"
    });
    return CSSMotionList;
  }
  var CSSMotionList_default = genCSSMotionList(supportTransition);

  // node_modules/rc-motion/es/index.js
  var es_default3 = CSSMotion_default;

  // node_modules/rc-notification/es/Notice.js
  var React32 = __toESM(require_react());
  var import_react20 = __toESM(require_react());
  var import_react_dom3 = __toESM(require_react_dom());
  var import_classnames3 = __toESM(require_classnames());
  var Notice = /* @__PURE__ */ function(_Component) {
    _inherits(Notice2, _Component);
    var _super = _createSuper(Notice2);
    function Notice2() {
      var _this;
      _classCallCheck(this, Notice2);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _super.call.apply(_super, [this].concat(args));
      _this.closeTimer = null;
      _this.close = function(e3) {
        if (e3) {
          e3.stopPropagation();
        }
        _this.clearCloseTimer();
        var _this$props = _this.props, onClose2 = _this$props.onClose, noticeKey = _this$props.noticeKey;
        if (onClose2) {
          onClose2(noticeKey);
        }
      };
      _this.startCloseTimer = function() {
        if (_this.props.duration) {
          _this.closeTimer = window.setTimeout(function() {
            _this.close();
          }, _this.props.duration * 1e3);
        }
      };
      _this.clearCloseTimer = function() {
        if (_this.closeTimer) {
          clearTimeout(_this.closeTimer);
          _this.closeTimer = null;
        }
      };
      return _this;
    }
    _createClass(Notice2, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this.startCloseTimer();
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        if (this.props.duration !== prevProps.duration || this.props.updateMark !== prevProps.updateMark || // Visible again need reset timer
        this.props.visible !== prevProps.visible && this.props.visible) {
          this.restartCloseTimer();
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.clearCloseTimer();
      }
    }, {
      key: "restartCloseTimer",
      value: function restartCloseTimer() {
        this.clearCloseTimer();
        this.startCloseTimer();
      }
    }, {
      key: "render",
      value: function render2() {
        var _this2 = this;
        var _this$props2 = this.props, prefixCls = _this$props2.prefixCls, className = _this$props2.className, closable = _this$props2.closable, closeIcon = _this$props2.closeIcon, style3 = _this$props2.style, onClick = _this$props2.onClick, children = _this$props2.children, holder = _this$props2.holder;
        var componentClass = "".concat(prefixCls, "-notice");
        var dataOrAriaAttributeProps = Object.keys(this.props).reduce(function(acc, key2) {
          if (key2.substr(0, 5) === "data-" || key2.substr(0, 5) === "aria-" || key2 === "role") {
            acc[key2] = _this2.props[key2];
          }
          return acc;
        }, {});
        var node = /* @__PURE__ */ React32.createElement("div", _extends({
          className: (0, import_classnames3.default)(componentClass, className, _defineProperty({}, "".concat(componentClass, "-closable"), closable)),
          style: style3,
          onMouseEnter: this.clearCloseTimer,
          onMouseLeave: this.startCloseTimer,
          onClick
        }, dataOrAriaAttributeProps), /* @__PURE__ */ React32.createElement("div", {
          className: "".concat(componentClass, "-content")
        }, children), closable ? /* @__PURE__ */ React32.createElement("a", {
          tabIndex: 0,
          onClick: this.close,
          className: "".concat(componentClass, "-close")
        }, closeIcon || /* @__PURE__ */ React32.createElement("span", {
          className: "".concat(componentClass, "-close-x")
        })) : null);
        if (holder) {
          return /* @__PURE__ */ import_react_dom3.default.createPortal(node, holder);
        }
        return node;
      }
    }]);
    return Notice2;
  }(import_react20.Component);
  Notice.defaultProps = {
    onClose: function onClose() {
    },
    duration: 1.5
  };

  // node_modules/rc-notification/es/useNotification.js
  var React33 = __toESM(require_react());
  function useNotification(notificationInstance2) {
    var createdRef = React33.useRef({});
    var _React$useState = React33.useState([]), _React$useState2 = _slicedToArray(_React$useState, 2), elements = _React$useState2[0], setElements = _React$useState2[1];
    function notify2(noticeProps) {
      var firstMount = true;
      notificationInstance2.add(noticeProps, function(div, props) {
        var key2 = props.key;
        if (div && (!createdRef.current[key2] || firstMount)) {
          var noticeEle = /* @__PURE__ */ React33.createElement(Notice, _extends({}, props, {
            holder: div
          }));
          createdRef.current[key2] = noticeEle;
          setElements(function(originElements) {
            var index2 = originElements.findIndex(function(ele) {
              return ele.key === props.key;
            });
            if (index2 === -1) {
              return [].concat(_toConsumableArray(originElements), [noticeEle]);
            }
            var cloneList = _toConsumableArray(originElements);
            cloneList[index2] = noticeEle;
            return cloneList;
          });
        }
        firstMount = false;
      });
    }
    return [notify2, /* @__PURE__ */ React33.createElement(React33.Fragment, null, elements)];
  }

  // node_modules/rc-notification/es/Notification.js
  var _excluded7 = ["getContainer"];
  var seed = 0;
  var now = Date.now();
  function getUuid() {
    var id2 = seed;
    seed += 1;
    return "rcNotification_".concat(now, "_").concat(id2);
  }
  var Notification = /* @__PURE__ */ function(_Component) {
    _inherits(Notification2, _Component);
    var _super = _createSuper(Notification2);
    function Notification2() {
      var _this;
      _classCallCheck(this, Notification2);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _super.call.apply(_super, [this].concat(args));
      _this.state = {
        notices: []
      };
      _this.hookRefs = /* @__PURE__ */ new Map();
      _this.add = function(originNotice, holderCallback) {
        var _originNotice$key;
        var key2 = (_originNotice$key = originNotice.key) !== null && _originNotice$key !== void 0 ? _originNotice$key : getUuid();
        var notice3 = _objectSpread2(_objectSpread2({}, originNotice), {}, {
          key: key2
        });
        var maxCount3 = _this.props.maxCount;
        _this.setState(function(previousState) {
          var notices = previousState.notices;
          var noticeIndex = notices.map(function(v2) {
            return v2.notice.key;
          }).indexOf(key2);
          var updatedNotices = notices.concat();
          if (noticeIndex !== -1) {
            updatedNotices.splice(noticeIndex, 1, {
              notice: notice3,
              holderCallback
            });
          } else {
            if (maxCount3 && notices.length >= maxCount3) {
              notice3.key = updatedNotices[0].notice.key;
              notice3.updateMark = getUuid();
              notice3.userPassKey = key2;
              updatedNotices.shift();
            }
            updatedNotices.push({
              notice: notice3,
              holderCallback
            });
          }
          return {
            notices: updatedNotices
          };
        });
      };
      _this.remove = function(removeKey) {
        _this.setState(function(_ref) {
          var notices = _ref.notices;
          return {
            notices: notices.filter(function(_ref2) {
              var _ref2$notice = _ref2.notice, key2 = _ref2$notice.key, userPassKey = _ref2$notice.userPassKey;
              var mergedKey = userPassKey !== null && userPassKey !== void 0 ? userPassKey : key2;
              return mergedKey !== removeKey;
            })
          };
        });
      };
      _this.noticePropsMap = {};
      return _this;
    }
    _createClass(Notification2, [{
      key: "getTransitionName",
      value: function getTransitionName5() {
        var _this$props = this.props, prefixCls = _this$props.prefixCls, animation = _this$props.animation;
        var transitionName2 = this.props.transitionName;
        if (!transitionName2 && animation) {
          transitionName2 = "".concat(prefixCls, "-").concat(animation);
        }
        return transitionName2;
      }
    }, {
      key: "render",
      value: function render2() {
        var _this2 = this;
        var notices = this.state.notices;
        var _this$props2 = this.props, prefixCls = _this$props2.prefixCls, className = _this$props2.className, closeIcon = _this$props2.closeIcon, style3 = _this$props2.style;
        var noticeKeys = [];
        notices.forEach(function(_ref3, index2) {
          var notice3 = _ref3.notice, holderCallback = _ref3.holderCallback;
          var updateMark = index2 === notices.length - 1 ? notice3.updateMark : void 0;
          var key2 = notice3.key, userPassKey = notice3.userPassKey;
          var noticeProps = _objectSpread2(_objectSpread2(_objectSpread2({
            prefixCls,
            closeIcon
          }, notice3), notice3.props), {}, {
            key: key2,
            noticeKey: userPassKey || key2,
            updateMark,
            onClose: function onClose2(noticeKey) {
              var _notice$onClose;
              _this2.remove(noticeKey);
              (_notice$onClose = notice3.onClose) === null || _notice$onClose === void 0 ? void 0 : _notice$onClose.call(notice3);
            },
            onClick: notice3.onClick,
            children: notice3.content
          });
          noticeKeys.push(key2);
          _this2.noticePropsMap[key2] = {
            props: noticeProps,
            holderCallback
          };
        });
        return /* @__PURE__ */ React34.createElement("div", {
          className: (0, import_classnames4.default)(prefixCls, className),
          style: style3
        }, /* @__PURE__ */ React34.createElement(CSSMotionList_default, {
          keys: noticeKeys,
          motionName: this.getTransitionName(),
          onVisibleChanged: function onVisibleChanged(changedVisible, _ref4) {
            var key2 = _ref4.key;
            if (!changedVisible) {
              delete _this2.noticePropsMap[key2];
            }
          }
        }, function(_ref5) {
          var key2 = _ref5.key, motionClassName = _ref5.className, motionStyle = _ref5.style, visible = _ref5.visible;
          var _this2$noticePropsMap = _this2.noticePropsMap[key2], noticeProps = _this2$noticePropsMap.props, holderCallback = _this2$noticePropsMap.holderCallback;
          if (holderCallback) {
            return /* @__PURE__ */ React34.createElement("div", {
              key: key2,
              className: (0, import_classnames4.default)(motionClassName, "".concat(prefixCls, "-hook-holder")),
              style: _objectSpread2({}, motionStyle),
              ref: function ref(div) {
                if (typeof key2 === "undefined") {
                  return;
                }
                if (div) {
                  _this2.hookRefs.set(key2, div);
                  holderCallback(div, noticeProps);
                } else {
                  _this2.hookRefs.delete(key2);
                }
              }
            });
          }
          return /* @__PURE__ */ React34.createElement(Notice, _extends({}, noticeProps, {
            className: (0, import_classnames4.default)(motionClassName, noticeProps === null || noticeProps === void 0 ? void 0 : noticeProps.className),
            style: _objectSpread2(_objectSpread2({}, motionStyle), noticeProps === null || noticeProps === void 0 ? void 0 : noticeProps.style),
            visible
          }));
        }));
      }
    }]);
    return Notification2;
  }(import_react21.Component);
  Notification.newInstance = void 0;
  Notification.defaultProps = {
    prefixCls: "rc-notification",
    animation: "fade",
    style: {
      top: 65,
      left: "50%"
    }
  };
  Notification.newInstance = function newNotificationInstance(properties, callback) {
    var _ref6 = properties || {}, getContainer3 = _ref6.getContainer, props = _objectWithoutProperties(_ref6, _excluded7);
    var div = document.createElement("div");
    if (getContainer3) {
      var root3 = getContainer3();
      root3.appendChild(div);
    } else {
      document.body.appendChild(div);
    }
    var called = false;
    function ref(notification) {
      if (called) {
        return;
      }
      called = true;
      callback({
        notice: function notice3(noticeProps) {
          notification.add(noticeProps);
        },
        removeNotice: function removeNotice(key2) {
          notification.remove(key2);
        },
        component: notification,
        destroy: function destroy3() {
          unmount(div);
          if (div.parentNode) {
            div.parentNode.removeChild(div);
          }
        },
        // Hooks
        useNotification: function useNotification2() {
          return useNotification(notification);
        }
      });
    }
    if (false) {
      properties.TEST_RENDER(/* @__PURE__ */ React34.createElement(Notification, _extends({}, props, {
        ref
      })));
      return;
    }
    render(/* @__PURE__ */ React34.createElement(Notification, _extends({}, props, {
      ref
    })), div);
  };
  var Notification_default = Notification;

  // node_modules/rc-notification/es/index.js
  var es_default4 = Notification_default;

  // node_modules/antd/es/message/index.js
  var React36 = __toESM(require_react());

  // node_modules/antd/es/message/hooks/useMessage.js
  var React35 = __toESM(require_react());
  function createUseMessage(getRcNotificationInstance, getRCNoticeProps3) {
    var useMessage = function useMessage2() {
      var getPrefixCls;
      var getPopupContainer;
      var innerInstance = null;
      var proxy = {
        add: function add(noticeProps, holderCallback) {
          innerInstance === null || innerInstance === void 0 ? void 0 : innerInstance.component.add(noticeProps, holderCallback);
        }
      };
      var _useRCNotification = useNotification(proxy), _useRCNotification2 = _slicedToArray(_useRCNotification, 2), hookNotify = _useRCNotification2[0], holder = _useRCNotification2[1];
      function notify2(args) {
        var customizePrefixCls = args.prefixCls;
        var mergedPrefixCls = getPrefixCls("message", customizePrefixCls);
        var rootPrefixCls = getPrefixCls();
        var target = args.key || getKeyThenIncreaseKey();
        var closePromise = new Promise(function(resolve) {
          var callback = function callback2() {
            if (typeof args.onClose === "function") {
              args.onClose();
            }
            return resolve(true);
          };
          getRcNotificationInstance(_extends(_extends({}, args), {
            prefixCls: mergedPrefixCls,
            rootPrefixCls,
            getPopupContainer
          }), function(_ref) {
            var prefixCls = _ref.prefixCls, instance2 = _ref.instance;
            innerInstance = instance2;
            hookNotify(getRCNoticeProps3(_extends(_extends({}, args), {
              key: target,
              onClose: callback
            }), prefixCls));
          });
        });
        var result2 = function result3() {
          if (innerInstance) {
            innerInstance.removeNotice(target);
          }
        };
        result2.then = function(filled, rejected) {
          return closePromise.then(filled, rejected);
        };
        result2.promise = closePromise;
        return result2;
      }
      var hookApiRef = React35.useRef({});
      hookApiRef.current.open = notify2;
      typeList.forEach(function(type4) {
        return attachTypeApi(hookApiRef.current, type4);
      });
      return [hookApiRef.current, /* @__PURE__ */ React35.createElement(ConfigConsumer, {
        key: "holder"
      }, function(context2) {
        getPrefixCls = context2.getPrefixCls;
        getPopupContainer = context2.getPopupContainer;
        return holder;
      })];
    };
    return useMessage;
  }

  // node_modules/antd/es/message/index.js
  var messageInstance;
  var defaultDuration = 3;
  var defaultTop;
  var key = 1;
  var localPrefixCls = "";
  var transitionName = "move-up";
  var hasTransitionName = false;
  var getContainer2;
  var maxCount;
  var rtl = false;
  function getKeyThenIncreaseKey() {
    return key++;
  }
  function setMessageConfig(options) {
    if (options.top !== void 0) {
      defaultTop = options.top;
      messageInstance = null;
    }
    if (options.duration !== void 0) {
      defaultDuration = options.duration;
    }
    if (options.prefixCls !== void 0) {
      localPrefixCls = options.prefixCls;
    }
    if (options.getContainer !== void 0) {
      getContainer2 = options.getContainer;
      messageInstance = null;
    }
    if (options.transitionName !== void 0) {
      transitionName = options.transitionName;
      messageInstance = null;
      hasTransitionName = true;
    }
    if (options.maxCount !== void 0) {
      maxCount = options.maxCount;
      messageInstance = null;
    }
    if (options.rtl !== void 0) {
      rtl = options.rtl;
    }
  }
  function getRCNotificationInstance(args, callback) {
    var customizePrefixCls = args.prefixCls, getContextPopupContainer = args.getPopupContainer;
    var _globalConfig = globalConfig(), getPrefixCls = _globalConfig.getPrefixCls, getRootPrefixCls = _globalConfig.getRootPrefixCls, getIconPrefixCls = _globalConfig.getIconPrefixCls;
    var prefixCls = getPrefixCls("message", customizePrefixCls || localPrefixCls);
    var rootPrefixCls = getRootPrefixCls(args.rootPrefixCls, prefixCls);
    var iconPrefixCls = getIconPrefixCls();
    if (messageInstance) {
      callback({
        prefixCls,
        rootPrefixCls,
        iconPrefixCls,
        instance: messageInstance
      });
      return;
    }
    var instanceConfig = {
      prefixCls,
      transitionName: hasTransitionName ? transitionName : "".concat(rootPrefixCls, "-").concat(transitionName),
      style: {
        top: defaultTop
      },
      getContainer: getContainer2 || getContextPopupContainer,
      maxCount
    };
    es_default4.newInstance(instanceConfig, function(instance2) {
      if (messageInstance) {
        callback({
          prefixCls,
          rootPrefixCls,
          iconPrefixCls,
          instance: messageInstance
        });
        return;
      }
      messageInstance = instance2;
      if (false) {
        messageInstance.config = instanceConfig;
      }
      callback({
        prefixCls,
        rootPrefixCls,
        iconPrefixCls,
        instance: instance2
      });
    });
  }
  var typeToIcon = {
    info: InfoCircleFilled_default2,
    success: CheckCircleFilled_default2,
    error: CloseCircleFilled_default2,
    warning: ExclamationCircleFilled_default2,
    loading: LoadingOutlined_default2
  };
  var typeList = Object.keys(typeToIcon);
  function getRCNoticeProps(args, prefixCls, iconPrefixCls) {
    var _classNames;
    var duration = args.duration !== void 0 ? args.duration : defaultDuration;
    var IconComponent = typeToIcon[args.type];
    var messageClass = (0, import_classnames5.default)("".concat(prefixCls, "-custom-content"), (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-").concat(args.type), args.type), _defineProperty(_classNames, "".concat(prefixCls, "-rtl"), rtl === true), _classNames));
    return {
      key: args.key,
      duration,
      style: args.style || {},
      className: args.className,
      content: /* @__PURE__ */ React36.createElement(config_provider_default, {
        iconPrefixCls
      }, /* @__PURE__ */ React36.createElement("div", {
        className: messageClass
      }, args.icon || IconComponent && /* @__PURE__ */ React36.createElement(IconComponent, null), /* @__PURE__ */ React36.createElement("span", null, args.content))),
      onClose: args.onClose,
      onClick: args.onClick
    };
  }
  function notice(args) {
    var target = args.key || getKeyThenIncreaseKey();
    var closePromise = new Promise(function(resolve) {
      var callback = function callback2() {
        if (typeof args.onClose === "function") {
          args.onClose();
        }
        return resolve(true);
      };
      getRCNotificationInstance(args, function(_ref) {
        var prefixCls = _ref.prefixCls, iconPrefixCls = _ref.iconPrefixCls, instance2 = _ref.instance;
        instance2.notice(getRCNoticeProps(_extends(_extends({}, args), {
          key: target,
          onClose: callback
        }), prefixCls, iconPrefixCls));
      });
    });
    var result2 = function result3() {
      var _a;
      if (messageInstance) {
        messageInstance.removeNotice(target);
        (_a = args.onClose) === null || _a === void 0 ? void 0 : _a.call(args);
      }
    };
    result2.then = function(filled, rejected) {
      return closePromise.then(filled, rejected);
    };
    result2.promise = closePromise;
    return result2;
  }
  function isArgsProps(content) {
    return Object.prototype.toString.call(content) === "[object Object]" && !!content.content;
  }
  var api = {
    open: notice,
    config: setMessageConfig,
    destroy: function destroy(messageKey) {
      if (messageInstance) {
        if (messageKey) {
          var _messageInstance = messageInstance, removeNotice = _messageInstance.removeNotice;
          removeNotice(messageKey);
        } else {
          var _messageInstance2 = messageInstance, destroy3 = _messageInstance2.destroy;
          destroy3();
          messageInstance = null;
        }
      }
    }
  };
  function attachTypeApi(originalApi, type4) {
    originalApi[type4] = function(content, duration, onClose2) {
      if (isArgsProps(content)) {
        return originalApi.open(_extends(_extends({}, content), {
          type: type4
        }));
      }
      if (typeof duration === "function") {
        onClose2 = duration;
        duration = void 0;
      }
      return originalApi.open({
        content,
        duration,
        type: type4,
        onClose: onClose2
      });
    };
  }
  typeList.forEach(function(type4) {
    return attachTypeApi(api, type4);
  });
  api.warn = api.warning;
  api.useMessage = createUseMessage(getRCNotificationInstance, getRCNoticeProps);
  var message_default = api;

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/CheckCircleOutlined.js
  var React37 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/CheckCircleOutlined.js
  var CheckCircleOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M699 353h-46.9c-10.2 0-19.9 4.9-25.9 13.3L469 584.3l-71.2-98.8c-6-8.3-15.6-13.3-25.9-13.3H325c-6.5 0-10.3 7.4-6.5 12.7l124.6 172.8a31.8 31.8 0 0051.7 0l210.6-292c3.9-5.3.1-12.7-6.4-12.7z" } }, { "tag": "path", "attrs": { "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z" } }] }, "name": "check-circle", "theme": "outlined" };
  var CheckCircleOutlined_default = CheckCircleOutlined;

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/CheckCircleOutlined.js
  var CheckCircleOutlined2 = function CheckCircleOutlined3(props, ref) {
    return /* @__PURE__ */ React37.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: CheckCircleOutlined_default
    }));
  };
  CheckCircleOutlined2.displayName = "CheckCircleOutlined";
  var CheckCircleOutlined_default2 = /* @__PURE__ */ React37.forwardRef(CheckCircleOutlined2);

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/CloseCircleOutlined.js
  var React38 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/CloseCircleOutlined.js
  var CloseCircleOutlined = { "icon": { "tag": "svg", "attrs": { "fill-rule": "evenodd", "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M512 64c247.4 0 448 200.6 448 448S759.4 960 512 960 64 759.4 64 512 264.6 64 512 64zm0 76c-205.4 0-372 166.6-372 372s166.6 372 372 372 372-166.6 372-372-166.6-372-372-372zm128.01 198.83c.03 0 .05.01.09.06l45.02 45.01a.2.2 0 01.05.09.12.12 0 010 .07c0 .02-.01.04-.05.08L557.25 512l127.87 127.86a.27.27 0 01.05.06v.02a.12.12 0 010 .07c0 .03-.01.05-.05.09l-45.02 45.02a.2.2 0 01-.09.05.12.12 0 01-.07 0c-.02 0-.04-.01-.08-.05L512 557.25 384.14 685.12c-.04.04-.06.05-.08.05a.12.12 0 01-.07 0c-.03 0-.05-.01-.09-.05l-45.02-45.02a.2.2 0 01-.05-.09.12.12 0 010-.07c0-.02.01-.04.06-.08L466.75 512 338.88 384.14a.27.27 0 01-.05-.06l-.01-.02a.12.12 0 010-.07c0-.03.01-.05.05-.09l45.02-45.02a.2.2 0 01.09-.05.12.12 0 01.07 0c.02 0 .04.01.08.06L512 466.75l127.86-127.86c.04-.05.06-.06.08-.06a.12.12 0 01.07 0z" } }] }, "name": "close-circle", "theme": "outlined" };
  var CloseCircleOutlined_default = CloseCircleOutlined;

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/CloseCircleOutlined.js
  var CloseCircleOutlined2 = function CloseCircleOutlined3(props, ref) {
    return /* @__PURE__ */ React38.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: CloseCircleOutlined_default
    }));
  };
  CloseCircleOutlined2.displayName = "CloseCircleOutlined";
  var CloseCircleOutlined_default2 = /* @__PURE__ */ React38.forwardRef(CloseCircleOutlined2);

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/CloseOutlined.js
  var React39 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/CloseOutlined.js
  var CloseOutlined = { "icon": { "tag": "svg", "attrs": { "fill-rule": "evenodd", "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M799.86 166.31c.02 0 .04.02.08.06l57.69 57.7c.04.03.05.05.06.08a.12.12 0 010 .06c0 .03-.02.05-.06.09L569.93 512l287.7 287.7c.04.04.05.06.06.09a.12.12 0 010 .07c0 .02-.02.04-.06.08l-57.7 57.69c-.03.04-.05.05-.07.06a.12.12 0 01-.07 0c-.03 0-.05-.02-.09-.06L512 569.93l-287.7 287.7c-.04.04-.06.05-.09.06a.12.12 0 01-.07 0c-.02 0-.04-.02-.08-.06l-57.69-57.7c-.04-.03-.05-.05-.06-.07a.12.12 0 010-.07c0-.03.02-.05.06-.09L454.07 512l-287.7-287.7c-.04-.04-.05-.06-.06-.09a.12.12 0 010-.07c0-.02.02-.04.06-.08l57.7-57.69c.03-.04.05-.05.07-.06a.12.12 0 01.07 0c.03 0 .05.02.09.06L512 454.07l287.7-287.7c.04-.04.06-.05.09-.06a.12.12 0 01.07 0z" } }] }, "name": "close", "theme": "outlined" };
  var CloseOutlined_default = CloseOutlined;

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/CloseOutlined.js
  var CloseOutlined2 = function CloseOutlined3(props, ref) {
    return /* @__PURE__ */ React39.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: CloseOutlined_default
    }));
  };
  CloseOutlined2.displayName = "CloseOutlined";
  var CloseOutlined_default2 = /* @__PURE__ */ React39.forwardRef(CloseOutlined2);

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/ExclamationCircleOutlined.js
  var React40 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/ExclamationCircleOutlined.js
  var ExclamationCircleOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z" } }, { "tag": "path", "attrs": { "d": "M464 688a48 48 0 1096 0 48 48 0 10-96 0zm24-112h48c4.4 0 8-3.6 8-8V296c0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8v272c0 4.4 3.6 8 8 8z" } }] }, "name": "exclamation-circle", "theme": "outlined" };
  var ExclamationCircleOutlined_default = ExclamationCircleOutlined;

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/ExclamationCircleOutlined.js
  var ExclamationCircleOutlined2 = function ExclamationCircleOutlined3(props, ref) {
    return /* @__PURE__ */ React40.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: ExclamationCircleOutlined_default
    }));
  };
  ExclamationCircleOutlined2.displayName = "ExclamationCircleOutlined";
  var ExclamationCircleOutlined_default2 = /* @__PURE__ */ React40.forwardRef(ExclamationCircleOutlined2);

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/InfoCircleOutlined.js
  var React41 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/InfoCircleOutlined.js
  var InfoCircleOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z" } }, { "tag": "path", "attrs": { "d": "M464 336a48 48 0 1096 0 48 48 0 10-96 0zm72 112h-48c-4.4 0-8 3.6-8 8v272c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V456c0-4.4-3.6-8-8-8z" } }] }, "name": "info-circle", "theme": "outlined" };
  var InfoCircleOutlined_default = InfoCircleOutlined;

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/InfoCircleOutlined.js
  var InfoCircleOutlined2 = function InfoCircleOutlined3(props, ref) {
    return /* @__PURE__ */ React41.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: InfoCircleOutlined_default
    }));
  };
  InfoCircleOutlined2.displayName = "InfoCircleOutlined";
  var InfoCircleOutlined_default2 = /* @__PURE__ */ React41.forwardRef(InfoCircleOutlined2);

  // node_modules/antd/es/notification/index.js
  var import_classnames6 = __toESM(require_classnames());
  var React43 = __toESM(require_react());

  // node_modules/antd/es/notification/hooks/useNotification.js
  var React42 = __toESM(require_react());
  function createUseNotification(getNotificationInstance2, getRCNoticeProps3) {
    var useNotification2 = function useNotification3() {
      var getPrefixCls;
      var innerInstance = null;
      var proxy = {
        add: function add(noticeProps, holderCallback) {
          innerInstance === null || innerInstance === void 0 ? void 0 : innerInstance.component.add(noticeProps, holderCallback);
        }
      };
      var _useRCNotification = useNotification(proxy), _useRCNotification2 = _slicedToArray(_useRCNotification, 2), hookNotify = _useRCNotification2[0], holder = _useRCNotification2[1];
      function notify2(args) {
        var customizePrefixCls = args.prefixCls;
        var mergedPrefixCls = getPrefixCls("notification", customizePrefixCls);
        getNotificationInstance2(_extends(_extends({}, args), {
          prefixCls: mergedPrefixCls
        }), function(_ref) {
          var prefixCls = _ref.prefixCls, instance2 = _ref.instance;
          innerInstance = instance2;
          hookNotify(getRCNoticeProps3(args, prefixCls));
        });
      }
      var hookApiRef = React42.useRef({});
      hookApiRef.current.open = notify2;
      ["success", "info", "warning", "error"].forEach(function(type4) {
        hookApiRef.current[type4] = function(args) {
          return hookApiRef.current.open(_extends(_extends({}, args), {
            type: type4
          }));
        };
      });
      return [hookApiRef.current, /* @__PURE__ */ React42.createElement(ConfigConsumer, {
        key: "holder"
      }, function(context2) {
        getPrefixCls = context2.getPrefixCls;
        return holder;
      })];
    };
    return useNotification2;
  }

  // node_modules/antd/es/notification/index.js
  var notificationInstance = {};
  var defaultDuration2 = 4.5;
  var defaultTop2 = 24;
  var defaultBottom = 24;
  var defaultPrefixCls = "";
  var defaultPlacement = "topRight";
  var defaultGetContainer;
  var defaultCloseIcon;
  var rtl2 = false;
  var maxCount2;
  function setNotificationConfig(options) {
    var duration = options.duration, placement = options.placement, bottom = options.bottom, top = options.top, getContainer3 = options.getContainer, closeIcon = options.closeIcon, prefixCls = options.prefixCls;
    if (prefixCls !== void 0) {
      defaultPrefixCls = prefixCls;
    }
    if (duration !== void 0) {
      defaultDuration2 = duration;
    }
    if (placement !== void 0) {
      defaultPlacement = placement;
    } else if (options.rtl) {
      defaultPlacement = "topLeft";
    }
    if (bottom !== void 0) {
      defaultBottom = bottom;
    }
    if (top !== void 0) {
      defaultTop2 = top;
    }
    if (getContainer3 !== void 0) {
      defaultGetContainer = getContainer3;
    }
    if (closeIcon !== void 0) {
      defaultCloseIcon = closeIcon;
    }
    if (options.rtl !== void 0) {
      rtl2 = options.rtl;
    }
    if (options.maxCount !== void 0) {
      maxCount2 = options.maxCount;
    }
  }
  function getPlacementStyle(placement) {
    var top = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : defaultTop2;
    var bottom = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : defaultBottom;
    var style3;
    switch (placement) {
      case "top":
        style3 = {
          left: "50%",
          transform: "translateX(-50%)",
          right: "auto",
          top,
          bottom: "auto"
        };
        break;
      case "topLeft":
        style3 = {
          left: 0,
          top,
          bottom: "auto"
        };
        break;
      case "topRight":
        style3 = {
          right: 0,
          top,
          bottom: "auto"
        };
        break;
      case "bottom":
        style3 = {
          left: "50%",
          transform: "translateX(-50%)",
          right: "auto",
          top: "auto",
          bottom
        };
        break;
      case "bottomLeft":
        style3 = {
          left: 0,
          top: "auto",
          bottom
        };
        break;
      default:
        style3 = {
          right: 0,
          top: "auto",
          bottom
        };
        break;
    }
    return style3;
  }
  function getNotificationInstance(args, callback) {
    var _args$placement = args.placement, placement = _args$placement === void 0 ? defaultPlacement : _args$placement, top = args.top, bottom = args.bottom, _args$getContainer = args.getContainer, getContainer3 = _args$getContainer === void 0 ? defaultGetContainer : _args$getContainer, customizePrefixCls = args.prefixCls;
    var _globalConfig = globalConfig(), getPrefixCls = _globalConfig.getPrefixCls, getIconPrefixCls = _globalConfig.getIconPrefixCls;
    var prefixCls = getPrefixCls("notification", customizePrefixCls || defaultPrefixCls);
    var iconPrefixCls = getIconPrefixCls();
    var cacheKey = "".concat(prefixCls, "-").concat(placement);
    var cacheInstance = notificationInstance[cacheKey];
    if (cacheInstance) {
      Promise.resolve(cacheInstance).then(function(instance2) {
        callback({
          prefixCls: "".concat(prefixCls, "-notice"),
          iconPrefixCls,
          instance: instance2
        });
      });
      return;
    }
    var notificationClass = (0, import_classnames6.default)("".concat(prefixCls, "-").concat(placement), _defineProperty({}, "".concat(prefixCls, "-rtl"), rtl2 === true));
    notificationInstance[cacheKey] = new Promise(function(resolve) {
      es_default4.newInstance({
        prefixCls,
        className: notificationClass,
        style: getPlacementStyle(placement, top, bottom),
        getContainer: getContainer3,
        maxCount: maxCount2
      }, function(notification) {
        resolve(notification);
        callback({
          prefixCls: "".concat(prefixCls, "-notice"),
          iconPrefixCls,
          instance: notification
        });
      });
    });
  }
  var typeToIcon2 = {
    success: CheckCircleOutlined_default2,
    info: InfoCircleOutlined_default2,
    error: CloseCircleOutlined_default2,
    warning: ExclamationCircleOutlined_default2
  };
  function getRCNoticeProps2(args, prefixCls, iconPrefixCls) {
    var durationArg = args.duration, icon = args.icon, type4 = args.type, description = args.description, message = args.message, btn = args.btn, onClose2 = args.onClose, onClick = args.onClick, key2 = args.key, style3 = args.style, className = args.className, _args$closeIcon = args.closeIcon, closeIcon = _args$closeIcon === void 0 ? defaultCloseIcon : _args$closeIcon, props = args.props;
    var duration = durationArg === void 0 ? defaultDuration2 : durationArg;
    var iconNode = null;
    if (icon) {
      iconNode = /* @__PURE__ */ React43.createElement("span", {
        className: "".concat(prefixCls, "-icon")
      }, args.icon);
    } else if (type4) {
      iconNode = /* @__PURE__ */ React43.createElement(typeToIcon2[type4] || null, {
        className: "".concat(prefixCls, "-icon ").concat(prefixCls, "-icon-").concat(type4)
      });
    }
    var closeIconToRender = typeof closeIcon === "undefined" ? /* @__PURE__ */ React43.createElement("span", {
      className: "".concat(prefixCls, "-close-x")
    }, /* @__PURE__ */ React43.createElement(CloseOutlined_default2, {
      className: "".concat(prefixCls, "-close-icon")
    })) : closeIcon;
    var autoMarginTag = !description && iconNode ? /* @__PURE__ */ React43.createElement("span", {
      className: "".concat(prefixCls, "-message-single-line-auto-margin")
    }) : null;
    return {
      content: /* @__PURE__ */ React43.createElement(config_provider_default, {
        iconPrefixCls
      }, /* @__PURE__ */ React43.createElement("div", {
        className: iconNode ? "".concat(prefixCls, "-with-icon") : "",
        role: "alert"
      }, iconNode, /* @__PURE__ */ React43.createElement("div", {
        className: "".concat(prefixCls, "-message")
      }, autoMarginTag, message), /* @__PURE__ */ React43.createElement("div", {
        className: "".concat(prefixCls, "-description")
      }, description), btn ? /* @__PURE__ */ React43.createElement("span", {
        className: "".concat(prefixCls, "-btn")
      }, btn) : null)),
      duration,
      closable: true,
      closeIcon: closeIconToRender,
      onClose: onClose2,
      onClick,
      key: key2,
      style: style3 || {},
      className: (0, import_classnames6.default)(className, _defineProperty({}, "".concat(prefixCls, "-").concat(type4), !!type4)),
      props
    };
  }
  function notice2(args) {
    getNotificationInstance(args, function(_ref) {
      var prefixCls = _ref.prefixCls, iconPrefixCls = _ref.iconPrefixCls, instance2 = _ref.instance;
      instance2.notice(getRCNoticeProps2(args, prefixCls, iconPrefixCls));
    });
  }
  var api2 = {
    open: notice2,
    close: function close(key2) {
      Object.keys(notificationInstance).forEach(function(cacheKey) {
        return Promise.resolve(notificationInstance[cacheKey]).then(function(instance2) {
          instance2.removeNotice(key2);
        });
      });
    },
    config: setNotificationConfig,
    destroy: function destroy2() {
      Object.keys(notificationInstance).forEach(function(cacheKey) {
        Promise.resolve(notificationInstance[cacheKey]).then(function(instance2) {
          instance2.destroy();
        });
        delete notificationInstance[cacheKey];
      });
    }
  };
  ["success", "info", "warning", "error"].forEach(function(type4) {
    api2[type4] = function(args) {
      return api2.open(_extends(_extends({}, args), {
        type: type4
      }));
    };
  });
  api2.warn = api2.warning;
  api2.useNotification = createUseNotification(getNotificationInstance, getRCNoticeProps2);
  var notification_default = api2;

  // node_modules/antd/es/config-provider/context.js
  var React44 = __toESM(require_react());
  var defaultGetPrefixCls = function defaultGetPrefixCls2(suffixCls, customizePrefixCls) {
    if (customizePrefixCls)
      return customizePrefixCls;
    return suffixCls ? "ant-".concat(suffixCls) : "ant";
  };
  var ConfigContext = /* @__PURE__ */ React44.createContext({
    // We provide a default function for Context without provider
    getPrefixCls: defaultGetPrefixCls
  });
  var ConfigConsumer = ConfigContext.Consumer;

  // node_modules/antd/es/config-provider/cssVariables.js
  var dynamicStyleMark = "-ant-".concat(Date.now(), "-").concat(Math.random());
  function getStyle(globalPrefixCls2, theme) {
    var variables = {};
    var formatColor = function formatColor2(color, updater) {
      var clone2 = color.clone();
      clone2 = (updater === null || updater === void 0 ? void 0 : updater(clone2)) || clone2;
      return clone2.toRgbString();
    };
    var fillColor = function fillColor2(colorVal, type4) {
      var baseColor = new TinyColor(colorVal);
      var colorPalettes = generate(baseColor.toRgbString());
      variables["".concat(type4, "-color")] = formatColor(baseColor);
      variables["".concat(type4, "-color-disabled")] = colorPalettes[1];
      variables["".concat(type4, "-color-hover")] = colorPalettes[4];
      variables["".concat(type4, "-color-active")] = colorPalettes[6];
      variables["".concat(type4, "-color-outline")] = baseColor.clone().setAlpha(0.2).toRgbString();
      variables["".concat(type4, "-color-deprecated-bg")] = colorPalettes[0];
      variables["".concat(type4, "-color-deprecated-border")] = colorPalettes[2];
    };
    if (theme.primaryColor) {
      fillColor(theme.primaryColor, "primary");
      var primaryColor = new TinyColor(theme.primaryColor);
      var primaryColors = generate(primaryColor.toRgbString());
      primaryColors.forEach(function(color, index2) {
        variables["primary-".concat(index2 + 1)] = color;
      });
      variables["primary-color-deprecated-l-35"] = formatColor(primaryColor, function(c2) {
        return c2.lighten(35);
      });
      variables["primary-color-deprecated-l-20"] = formatColor(primaryColor, function(c2) {
        return c2.lighten(20);
      });
      variables["primary-color-deprecated-t-20"] = formatColor(primaryColor, function(c2) {
        return c2.tint(20);
      });
      variables["primary-color-deprecated-t-50"] = formatColor(primaryColor, function(c2) {
        return c2.tint(50);
      });
      variables["primary-color-deprecated-f-12"] = formatColor(primaryColor, function(c2) {
        return c2.setAlpha(c2.getAlpha() * 0.12);
      });
      var primaryActiveColor = new TinyColor(primaryColors[0]);
      variables["primary-color-active-deprecated-f-30"] = formatColor(primaryActiveColor, function(c2) {
        return c2.setAlpha(c2.getAlpha() * 0.3);
      });
      variables["primary-color-active-deprecated-d-02"] = formatColor(primaryActiveColor, function(c2) {
        return c2.darken(2);
      });
    }
    if (theme.successColor) {
      fillColor(theme.successColor, "success");
    }
    if (theme.warningColor) {
      fillColor(theme.warningColor, "warning");
    }
    if (theme.errorColor) {
      fillColor(theme.errorColor, "error");
    }
    if (theme.infoColor) {
      fillColor(theme.infoColor, "info");
    }
    var cssList = Object.keys(variables).map(function(key2) {
      return "--".concat(globalPrefixCls2, "-").concat(key2, ": ").concat(variables[key2], ";");
    });
    return "\n  :root {\n    ".concat(cssList.join("\n"), "\n  }\n  ").trim();
  }
  function registerTheme(globalPrefixCls2, theme) {
    var style3 = getStyle(globalPrefixCls2, theme);
    if (canUseDom()) {
      updateCSS(style3, "".concat(dynamicStyleMark, "-dynamic-theme"));
    } else {
      true ? warning_default2(false, "ConfigProvider", "SSR do not support dynamic theme with css variables.") : void 0;
    }
  }

  // node_modules/antd/es/config-provider/DisabledContext.js
  var React45 = __toESM(require_react());
  var DisabledContext = /* @__PURE__ */ React45.createContext(false);
  var DisabledContextProvider = function DisabledContextProvider2(_ref) {
    var children = _ref.children, disabled = _ref.disabled;
    var originDisabled = React45.useContext(DisabledContext);
    return /* @__PURE__ */ React45.createElement(DisabledContext.Provider, {
      value: disabled !== null && disabled !== void 0 ? disabled : originDisabled
    }, children);
  };
  var DisabledContext_default = DisabledContext;

  // node_modules/antd/es/config-provider/SizeContext.js
  var React46 = __toESM(require_react());
  var SizeContext = /* @__PURE__ */ React46.createContext(void 0);
  var SizeContextProvider = function SizeContextProvider2(_ref) {
    var children = _ref.children, size = _ref.size;
    return /* @__PURE__ */ React46.createElement(SizeContext.Consumer, null, function(originSize) {
      return /* @__PURE__ */ React46.createElement(SizeContext.Provider, {
        value: size || originSize
      }, children);
    });
  };
  var SizeContext_default = SizeContext;

  // node_modules/antd/es/config-provider/index.js
  var PASSED_PROPS = ["getTargetContainer", "getPopupContainer", "renderEmpty", "pageHeader", "input", "pagination", "form"];
  var defaultPrefixCls2 = "ant";
  var defaultIconPrefixCls = "anticon";
  var globalPrefixCls;
  var globalIconPrefixCls;
  function getGlobalPrefixCls() {
    return globalPrefixCls || defaultPrefixCls2;
  }
  function getGlobalIconPrefixCls() {
    return globalIconPrefixCls || defaultIconPrefixCls;
  }
  var setGlobalConfig = function setGlobalConfig2(_ref) {
    var prefixCls = _ref.prefixCls, iconPrefixCls = _ref.iconPrefixCls, theme = _ref.theme;
    if (prefixCls !== void 0) {
      globalPrefixCls = prefixCls;
    }
    if (iconPrefixCls !== void 0) {
      globalIconPrefixCls = iconPrefixCls;
    }
    if (theme) {
      registerTheme(getGlobalPrefixCls(), theme);
    }
  };
  var globalConfig = function globalConfig2() {
    return {
      getPrefixCls: function getPrefixCls(suffixCls, customizePrefixCls) {
        if (customizePrefixCls)
          return customizePrefixCls;
        return suffixCls ? "".concat(getGlobalPrefixCls(), "-").concat(suffixCls) : getGlobalPrefixCls();
      },
      getIconPrefixCls: getGlobalIconPrefixCls,
      getRootPrefixCls: function getRootPrefixCls(rootPrefixCls, customizePrefixCls) {
        if (rootPrefixCls) {
          return rootPrefixCls;
        }
        if (globalPrefixCls) {
          return globalPrefixCls;
        }
        if (customizePrefixCls && customizePrefixCls.includes("-")) {
          return customizePrefixCls.replace(/^(.*)-[^-]*$/, "$1");
        }
        return getGlobalPrefixCls();
      }
    };
  };
  var ProviderChildren = function ProviderChildren2(props) {
    var children = props.children, csp = props.csp, autoInsertSpaceInButton = props.autoInsertSpaceInButton, form = props.form, locale4 = props.locale, componentSize = props.componentSize, direction = props.direction, space = props.space, virtual = props.virtual, dropdownMatchSelectWidth = props.dropdownMatchSelectWidth, legacyLocale = props.legacyLocale, parentContext = props.parentContext, iconPrefixCls = props.iconPrefixCls, componentDisabled = props.componentDisabled;
    var getPrefixCls = React47.useCallback(function(suffixCls, customizePrefixCls) {
      var prefixCls = props.prefixCls;
      if (customizePrefixCls)
        return customizePrefixCls;
      var mergedPrefixCls = prefixCls || parentContext.getPrefixCls("");
      return suffixCls ? "".concat(mergedPrefixCls, "-").concat(suffixCls) : mergedPrefixCls;
    }, [parentContext.getPrefixCls, props.prefixCls]);
    var config = _extends(_extends({}, parentContext), {
      csp,
      autoInsertSpaceInButton,
      locale: locale4 || legacyLocale,
      direction,
      space,
      virtual,
      dropdownMatchSelectWidth,
      getPrefixCls
    });
    PASSED_PROPS.forEach(function(propName) {
      var propValue = props[propName];
      if (propValue) {
        config[propName] = propValue;
      }
    });
    var memoedConfig = useMemo6(function() {
      return config;
    }, config, function(prevConfig, currentConfig) {
      var prevKeys = Object.keys(prevConfig);
      var currentKeys = Object.keys(currentConfig);
      return prevKeys.length !== currentKeys.length || prevKeys.some(function(key2) {
        return prevConfig[key2] !== currentConfig[key2];
      });
    });
    var memoIconContextValue = React47.useMemo(function() {
      return {
        prefixCls: iconPrefixCls,
        csp
      };
    }, [iconPrefixCls, csp]);
    var childNode = children;
    var validateMessages = React47.useMemo(function() {
      var _a, _b, _c, _d;
      return merge(((_a = default_default.Form) === null || _a === void 0 ? void 0 : _a.defaultValidateMessages) || {}, ((_c = (_b = memoedConfig.locale) === null || _b === void 0 ? void 0 : _b.Form) === null || _c === void 0 ? void 0 : _c.defaultValidateMessages) || {}, ((_d = memoedConfig.form) === null || _d === void 0 ? void 0 : _d.validateMessages) || {}, (form === null || form === void 0 ? void 0 : form.validateMessages) || {});
    }, [memoedConfig, form === null || form === void 0 ? void 0 : form.validateMessages]);
    if (Object.keys(validateMessages).length > 0) {
      childNode = /* @__PURE__ */ React47.createElement(validateMessagesContext_default.Provider, {
        value: validateMessages
      }, children);
    }
    if (locale4) {
      childNode = /* @__PURE__ */ React47.createElement(locale_provider_default, {
        locale: locale4,
        _ANT_MARK__: ANT_MARK
      }, childNode);
    }
    if (iconPrefixCls || csp) {
      childNode = /* @__PURE__ */ React47.createElement(Context_default.Provider, {
        value: memoIconContextValue
      }, childNode);
    }
    if (componentSize) {
      childNode = /* @__PURE__ */ React47.createElement(SizeContextProvider, {
        size: componentSize
      }, childNode);
    }
    if (componentDisabled !== void 0) {
      childNode = /* @__PURE__ */ React47.createElement(DisabledContextProvider, {
        disabled: componentDisabled
      }, childNode);
    }
    return /* @__PURE__ */ React47.createElement(ConfigContext.Provider, {
      value: memoedConfig
    }, childNode);
  };
  var ConfigProvider = function ConfigProvider2(props) {
    React47.useEffect(function() {
      if (props.direction) {
        message_default.config({
          rtl: props.direction === "rtl"
        });
        notification_default.config({
          rtl: props.direction === "rtl"
        });
      }
    }, [props.direction]);
    return /* @__PURE__ */ React47.createElement(LocaleReceiver_default, null, function(_24, __, legacyLocale) {
      return /* @__PURE__ */ React47.createElement(ConfigConsumer, null, function(context2) {
        return /* @__PURE__ */ React47.createElement(ProviderChildren, _extends({
          parentContext: context2,
          legacyLocale
        }, props));
      });
    });
  };
  ConfigProvider.ConfigContext = ConfigContext;
  ConfigProvider.SizeContext = SizeContext_default;
  ConfigProvider.config = setGlobalConfig;
  var config_provider_default = ConfigProvider;

  // node_modules/antd/es/_util/throttleByAnimationFrame.js
  function throttleByAnimationFrame(fn2) {
    var requestId;
    var later = function later2(args) {
      return function() {
        requestId = null;
        fn2.apply(void 0, _toConsumableArray(args));
      };
    };
    var throttled = function throttled2() {
      if (requestId == null) {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        requestId = raf_default(later(args));
      }
    };
    throttled.cancel = function() {
      raf_default.cancel(requestId);
      requestId = null;
    };
    return throttled;
  }
  function throttleByAnimationFrameDecorator() {
    return function throttle3(target, key2, descriptor) {
      var fn2 = descriptor.value;
      var definingProperty = false;
      return {
        configurable: true,
        get: function get3() {
          if (definingProperty || this === target.prototype || this.hasOwnProperty(key2)) {
            return fn2;
          }
          var boundFn = throttleByAnimationFrame(fn2.bind(this));
          definingProperty = true;
          Object.defineProperty(this, key2, {
            value: boundFn,
            configurable: true,
            writable: true
          });
          definingProperty = false;
          return boundFn;
        }
      };
    };
  }

  // node_modules/rc-util/es/Dom/addEventListener.js
  var import_react_dom4 = __toESM(require_react_dom());
  function addEventListenerWrap(target, eventType, cb, option) {
    var callback = import_react_dom4.default.unstable_batchedUpdates ? function run(e3) {
      import_react_dom4.default.unstable_batchedUpdates(cb, e3);
    } : cb;
    if (target !== null && target !== void 0 && target.addEventListener) {
      target.addEventListener(eventType, callback, option);
    }
    return {
      remove: function remove2() {
        if (target !== null && target !== void 0 && target.removeEventListener) {
          target.removeEventListener(eventType, callback, option);
        }
      }
    };
  }

  // node_modules/antd/es/affix/utils.js
  function getTargetRect(target) {
    return target !== window ? target.getBoundingClientRect() : {
      top: 0,
      bottom: window.innerHeight
    };
  }
  function getFixedTop(placeholderReact, targetRect, offsetTop) {
    if (offsetTop !== void 0 && targetRect.top > placeholderReact.top - offsetTop) {
      return offsetTop + targetRect.top;
    }
    return void 0;
  }
  function getFixedBottom(placeholderReact, targetRect, offsetBottom) {
    if (offsetBottom !== void 0 && targetRect.bottom < placeholderReact.bottom + offsetBottom) {
      var targetBottomOffset = window.innerHeight - targetRect.bottom;
      return offsetBottom + targetBottomOffset;
    }
    return void 0;
  }
  var TRIGGER_EVENTS = ["resize", "scroll", "touchstart", "touchmove", "touchend", "pageshow", "load"];
  var observerEntities = [];
  function addObserveTarget(target, affix) {
    if (!target) {
      return;
    }
    var entity = observerEntities.find(function(item) {
      return item.target === target;
    });
    if (entity) {
      entity.affixList.push(affix);
    } else {
      entity = {
        target,
        affixList: [affix],
        eventHandlers: {}
      };
      observerEntities.push(entity);
      TRIGGER_EVENTS.forEach(function(eventName) {
        entity.eventHandlers[eventName] = addEventListenerWrap(target, eventName, function() {
          entity.affixList.forEach(function(targetAffix) {
            targetAffix.lazyUpdatePosition();
          });
        });
      });
    }
  }
  function removeObserveTarget(affix) {
    var observerEntity = observerEntities.find(function(oriObserverEntity) {
      var hasAffix = oriObserverEntity.affixList.some(function(item) {
        return item === affix;
      });
      if (hasAffix) {
        oriObserverEntity.affixList = oriObserverEntity.affixList.filter(function(item) {
          return item !== affix;
        });
      }
      return hasAffix;
    });
    if (observerEntity && observerEntity.affixList.length === 0) {
      observerEntities = observerEntities.filter(function(item) {
        return item !== observerEntity;
      });
      TRIGGER_EVENTS.forEach(function(eventName) {
        var handler = observerEntity.eventHandlers[eventName];
        if (handler && handler.remove) {
          handler.remove();
        }
      });
    }
  }

  // node_modules/antd/es/affix/index.js
  var __decorate = function(decorators, target, key2, desc) {
    var c2 = arguments.length, r4 = c2 < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key2) : desc, d2;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function")
      r4 = Reflect.decorate(decorators, target, key2, desc);
    else
      for (var i3 = decorators.length - 1; i3 >= 0; i3--)
        if (d2 = decorators[i3])
          r4 = (c2 < 3 ? d2(r4) : c2 > 3 ? d2(target, key2, r4) : d2(target, key2)) || r4;
    return c2 > 3 && r4 && Object.defineProperty(target, key2, r4), r4;
  };
  function getDefaultTarget() {
    return typeof window !== "undefined" ? window : null;
  }
  var AffixStatus;
  (function(AffixStatus2) {
    AffixStatus2[AffixStatus2["None"] = 0] = "None";
    AffixStatus2[AffixStatus2["Prepare"] = 1] = "Prepare";
  })(AffixStatus || (AffixStatus = {}));
  var Affix = /* @__PURE__ */ function(_React$Component) {
    _inherits(Affix2, _React$Component);
    var _super = _createSuper(Affix2);
    function Affix2() {
      var _this;
      _classCallCheck(this, Affix2);
      _this = _super.apply(this, arguments);
      _this.state = {
        status: AffixStatus.None,
        lastAffix: false,
        prevTarget: null
      };
      _this.getOffsetTop = function() {
        var _this$props = _this.props, offsetBottom = _this$props.offsetBottom, offsetTop = _this$props.offsetTop;
        return offsetBottom === void 0 && offsetTop === void 0 ? 0 : offsetTop;
      };
      _this.getOffsetBottom = function() {
        return _this.props.offsetBottom;
      };
      _this.savePlaceholderNode = function(node) {
        _this.placeholderNode = node;
      };
      _this.saveFixedNode = function(node) {
        _this.fixedNode = node;
      };
      _this.measure = function() {
        var _this$state = _this.state, status = _this$state.status, lastAffix = _this$state.lastAffix;
        var onChange = _this.props.onChange;
        var targetFunc = _this.getTargetFunc();
        if (status !== AffixStatus.Prepare || !_this.fixedNode || !_this.placeholderNode || !targetFunc) {
          return;
        }
        var offsetTop = _this.getOffsetTop();
        var offsetBottom = _this.getOffsetBottom();
        var targetNode = targetFunc();
        if (!targetNode) {
          return;
        }
        var newState = {
          status: AffixStatus.None
        };
        var targetRect = getTargetRect(targetNode);
        var placeholderReact = getTargetRect(_this.placeholderNode);
        var fixedTop = getFixedTop(placeholderReact, targetRect, offsetTop);
        var fixedBottom = getFixedBottom(placeholderReact, targetRect, offsetBottom);
        if (placeholderReact.top === 0 && placeholderReact.left === 0 && placeholderReact.width === 0 && placeholderReact.height === 0) {
          return;
        }
        if (fixedTop !== void 0) {
          newState.affixStyle = {
            position: "fixed",
            top: fixedTop,
            width: placeholderReact.width,
            height: placeholderReact.height
          };
          newState.placeholderStyle = {
            width: placeholderReact.width,
            height: placeholderReact.height
          };
        } else if (fixedBottom !== void 0) {
          newState.affixStyle = {
            position: "fixed",
            bottom: fixedBottom,
            width: placeholderReact.width,
            height: placeholderReact.height
          };
          newState.placeholderStyle = {
            width: placeholderReact.width,
            height: placeholderReact.height
          };
        }
        newState.lastAffix = !!newState.affixStyle;
        if (onChange && lastAffix !== newState.lastAffix) {
          onChange(newState.lastAffix);
        }
        _this.setState(newState);
      };
      _this.prepareMeasure = function() {
        _this.setState({
          status: AffixStatus.Prepare,
          affixStyle: void 0,
          placeholderStyle: void 0
        });
        if (false) {
          var onTestUpdatePosition = _this.props.onTestUpdatePosition;
          onTestUpdatePosition === null || onTestUpdatePosition === void 0 ? void 0 : onTestUpdatePosition();
        }
      };
      return _this;
    }
    _createClass(Affix2, [{
      key: "getTargetFunc",
      value: function getTargetFunc() {
        var getTargetContainer = this.context.getTargetContainer;
        var target = this.props.target;
        if (target !== void 0) {
          return target;
        }
        return getTargetContainer !== null && getTargetContainer !== void 0 ? getTargetContainer : getDefaultTarget;
      }
      // Event handler
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;
        var targetFunc = this.getTargetFunc();
        if (targetFunc) {
          this.timeout = setTimeout(function() {
            addObserveTarget(targetFunc(), _this2);
            _this2.updatePosition();
          });
        }
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        var prevTarget = this.state.prevTarget;
        var targetFunc = this.getTargetFunc();
        var newTarget = (targetFunc === null || targetFunc === void 0 ? void 0 : targetFunc()) || null;
        if (prevTarget !== newTarget) {
          removeObserveTarget(this);
          if (newTarget) {
            addObserveTarget(newTarget, this);
            this.updatePosition();
          }
          this.setState({
            prevTarget: newTarget
          });
        }
        if (prevProps.offsetTop !== this.props.offsetTop || prevProps.offsetBottom !== this.props.offsetBottom) {
          this.updatePosition();
        }
        this.measure();
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        clearTimeout(this.timeout);
        removeObserveTarget(this);
        this.updatePosition.cancel();
        this.lazyUpdatePosition.cancel();
      }
      // Handle realign logic
    }, {
      key: "updatePosition",
      value: function updatePosition() {
        this.prepareMeasure();
      }
    }, {
      key: "lazyUpdatePosition",
      value: function lazyUpdatePosition() {
        var targetFunc = this.getTargetFunc();
        var affixStyle = this.state.affixStyle;
        if (targetFunc && affixStyle) {
          var offsetTop = this.getOffsetTop();
          var offsetBottom = this.getOffsetBottom();
          var targetNode = targetFunc();
          if (targetNode && this.placeholderNode) {
            var targetRect = getTargetRect(targetNode);
            var placeholderReact = getTargetRect(this.placeholderNode);
            var fixedTop = getFixedTop(placeholderReact, targetRect, offsetTop);
            var fixedBottom = getFixedBottom(placeholderReact, targetRect, offsetBottom);
            if (fixedTop !== void 0 && affixStyle.top === fixedTop || fixedBottom !== void 0 && affixStyle.bottom === fixedBottom) {
              return;
            }
          }
        }
        this.prepareMeasure();
      }
      // =================== Render ===================
    }, {
      key: "render",
      value: function render2() {
        var _this3 = this;
        var _this$state2 = this.state, affixStyle = _this$state2.affixStyle, placeholderStyle = _this$state2.placeholderStyle;
        var _this$props2 = this.props, affixPrefixCls = _this$props2.affixPrefixCls, children = _this$props2.children;
        var className = (0, import_classnames7.default)(_defineProperty({}, affixPrefixCls, !!affixStyle));
        var props = omit(this.props, ["prefixCls", "offsetTop", "offsetBottom", "target", "onChange", "affixPrefixCls"]);
        if (false) {
          props = omit(props, ["onTestUpdatePosition"]);
        }
        return /* @__PURE__ */ React48.createElement(es_default2, {
          onResize: function onResize2() {
            _this3.updatePosition();
          }
        }, /* @__PURE__ */ React48.createElement("div", _extends({}, props, {
          ref: this.savePlaceholderNode
        }), affixStyle && /* @__PURE__ */ React48.createElement("div", {
          style: placeholderStyle,
          "aria-hidden": "true"
        }), /* @__PURE__ */ React48.createElement("div", {
          className,
          ref: this.saveFixedNode,
          style: affixStyle
        }, /* @__PURE__ */ React48.createElement(es_default2, {
          onResize: function onResize2() {
            _this3.updatePosition();
          }
        }, children))));
      }
    }]);
    return Affix2;
  }(React48.Component);
  Affix.contextType = ConfigContext;
  __decorate([throttleByAnimationFrameDecorator()], Affix.prototype, "updatePosition", null);
  __decorate([throttleByAnimationFrameDecorator()], Affix.prototype, "lazyUpdatePosition", null);
  var AffixFC = /* @__PURE__ */ React48.forwardRef(function(props, ref) {
    var customizePrefixCls = props.prefixCls;
    var _React$useContext = React48.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls;
    var affixPrefixCls = getPrefixCls("affix", customizePrefixCls);
    var affixProps = _extends(_extends({}, props), {
      affixPrefixCls
    });
    return /* @__PURE__ */ React48.createElement(Affix, _extends({}, affixProps, {
      ref
    }));
  });
  if (true) {
    AffixFC.displayName = "Affix";
  }
  var affix_default = AffixFC;

  // node_modules/antd/es/_util/getDataOrAriaProps.js
  function getDataOrAriaProps(props) {
    return Object.keys(props).reduce(function(prev, key2) {
      if ((key2.startsWith("data-") || key2.startsWith("aria-") || key2 === "role") && !key2.startsWith("data-__")) {
        prev[key2] = props[key2];
      }
      return prev;
    }, {});
  }

  // node_modules/antd/es/_util/reactNode.js
  var React49 = __toESM(require_react());
  var isValidElement6 = React49.isValidElement;
  function isFragment3(child) {
    return child && isValidElement6(child) && child.type === React49.Fragment;
  }
  function replaceElement(element, replacement, props) {
    if (!isValidElement6(element)) {
      return replacement;
    }
    return /* @__PURE__ */ React49.cloneElement(element, typeof props === "function" ? props(element.props || {}) : props);
  }
  function cloneElement4(element, props) {
    return replaceElement(element, element, props);
  }

  // node_modules/antd/es/anchor/Anchor.js
  var import_classnames8 = __toESM(require_classnames());
  var React51 = __toESM(require_react());

  // node_modules/antd/es/_util/getScroll.js
  function isWindow(obj) {
    return obj !== null && obj !== void 0 && obj === obj.window;
  }
  function getScroll(target, top) {
    var _a, _b;
    if (typeof window === "undefined") {
      return 0;
    }
    var method4 = top ? "scrollTop" : "scrollLeft";
    var result2 = 0;
    if (isWindow(target)) {
      result2 = target[top ? "pageYOffset" : "pageXOffset"];
    } else if (target instanceof Document) {
      result2 = target.documentElement[method4];
    } else if (target instanceof HTMLElement) {
      result2 = target[method4];
    } else if (target) {
      result2 = target[method4];
    }
    if (target && !isWindow(target) && typeof result2 !== "number") {
      result2 = (_b = ((_a = target.ownerDocument) !== null && _a !== void 0 ? _a : target).documentElement) === null || _b === void 0 ? void 0 : _b[method4];
    }
    return result2;
  }

  // node_modules/antd/es/_util/easings.js
  function easeInOutCubic(t4, b2, c2, d2) {
    var cc = c2 - b2;
    t4 /= d2 / 2;
    if (t4 < 1) {
      return cc / 2 * t4 * t4 * t4 + b2;
    }
    return cc / 2 * ((t4 -= 2) * t4 * t4 + 2) + b2;
  }

  // node_modules/antd/es/_util/scrollTo.js
  function scrollTo(y2) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var _options$getContainer = options.getContainer, getContainer3 = _options$getContainer === void 0 ? function() {
      return window;
    } : _options$getContainer, callback = options.callback, _options$duration = options.duration, duration = _options$duration === void 0 ? 450 : _options$duration;
    var container = getContainer3();
    var scrollTop = getScroll(container, true);
    var startTime = Date.now();
    var frameFunc = function frameFunc2() {
      var timestamp = Date.now();
      var time = timestamp - startTime;
      var nextScrollTop = easeInOutCubic(time > duration ? duration : time, scrollTop, y2, duration);
      if (isWindow(container)) {
        container.scrollTo(window.pageXOffset, nextScrollTop);
      } else if (container instanceof Document || container.constructor.name === "HTMLDocument") {
        container.documentElement.scrollTop = nextScrollTop;
      } else {
        container.scrollTop = nextScrollTop;
      }
      if (time < duration) {
        raf_default(frameFunc2);
      } else if (typeof callback === "function") {
        callback();
      }
    };
    raf_default(frameFunc);
  }

  // node_modules/antd/es/anchor/context.js
  var React50 = __toESM(require_react());
  var AnchorContext = /* @__PURE__ */ React50.createContext(void 0);
  var context_default2 = AnchorContext;

  // node_modules/antd/es/anchor/Anchor.js
  function getDefaultContainer() {
    return window;
  }
  function getOffsetTop(element, container) {
    if (!element.getClientRects().length) {
      return 0;
    }
    var rect = element.getBoundingClientRect();
    if (rect.width || rect.height) {
      if (container === window) {
        container = element.ownerDocument.documentElement;
        return rect.top - container.clientTop;
      }
      return rect.top - container.getBoundingClientRect().top;
    }
    return rect.top;
  }
  var sharpMatcherRegx = /#([\S ]+)$/;
  var AnchorContent = function AnchorContent2(props) {
    var _a;
    var prefixCls = props.anchorPrefixCls, _props$className = props.className, className = _props$className === void 0 ? "" : _props$className, style3 = props.style, offsetTop = props.offsetTop, _props$affix = props.affix, affix = _props$affix === void 0 ? true : _props$affix, _props$showInkInFixed = props.showInkInFixed, showInkInFixed = _props$showInkInFixed === void 0 ? false : _props$showInkInFixed, children = props.children, bounds = props.bounds, targetOffset4 = props.targetOffset, onClick = props.onClick, onChange = props.onChange, getContainer3 = props.getContainer, getCurrentAnchor = props.getCurrentAnchor;
    var _React$useState = React51.useState([]), _React$useState2 = _slicedToArray(_React$useState, 2), links = _React$useState2[0], setLinks = _React$useState2[1];
    var _React$useState3 = React51.useState(null), _React$useState4 = _slicedToArray(_React$useState3, 2), activeLink = _React$useState4[0], setActiveLink = _React$useState4[1];
    var activeLinkRef = React51.useRef(activeLink);
    var wrapperRef = React51.useRef(null);
    var spanLinkNode = React51.useRef(null);
    var animating = React51.useRef(false);
    var _React$useContext = React51.useContext(ConfigContext), direction = _React$useContext.direction, getTargetContainer = _React$useContext.getTargetContainer;
    var getCurrentContainer = (_a = getContainer3 !== null && getContainer3 !== void 0 ? getContainer3 : getTargetContainer) !== null && _a !== void 0 ? _a : getDefaultContainer;
    var dependencyListItem = JSON.stringify(links);
    var registerLink = React51.useCallback(function(link) {
      if (!links.includes(link)) {
        setLinks(function(prev) {
          return [].concat(_toConsumableArray(prev), [link]);
        });
      }
    }, [dependencyListItem]);
    var unregisterLink = React51.useCallback(function(link) {
      if (links.includes(link)) {
        setLinks(function(prev) {
          return prev.filter(function(i3) {
            return i3 !== link;
          });
        });
      }
    }, [dependencyListItem]);
    var updateInk = function updateInk2() {
      var _a2;
      var linkNode = (_a2 = wrapperRef.current) === null || _a2 === void 0 ? void 0 : _a2.querySelector(".".concat(prefixCls, "-link-title-active"));
      if (linkNode && spanLinkNode.current) {
        spanLinkNode.current.style.top = "".concat(linkNode.offsetTop + linkNode.clientHeight / 2 - 4.5, "px");
      }
    };
    var getInternalCurrentAnchor = function getInternalCurrentAnchor2(_links) {
      var _offsetTop = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
      var _bounds = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 5;
      var linkSections = [];
      var container = getCurrentContainer();
      _links.forEach(function(link) {
        var sharpLinkMatch = sharpMatcherRegx.exec(link === null || link === void 0 ? void 0 : link.toString());
        if (!sharpLinkMatch) {
          return;
        }
        var target = document.getElementById(sharpLinkMatch[1]);
        if (target) {
          var top = getOffsetTop(target, container);
          if (top < _offsetTop + _bounds) {
            linkSections.push({
              link,
              top
            });
          }
        }
      });
      if (linkSections.length) {
        var maxSection = linkSections.reduce(function(prev, curr) {
          return curr.top > prev.top ? curr : prev;
        });
        return maxSection.link;
      }
      return "";
    };
    var setCurrentActiveLink = function setCurrentActiveLink2(link) {
      if (activeLinkRef.current === link) {
        return;
      }
      var newLink = typeof getCurrentAnchor === "function" ? getCurrentAnchor(link) : link;
      setActiveLink(newLink);
      activeLinkRef.current = newLink;
      onChange === null || onChange === void 0 ? void 0 : onChange(link);
    };
    var handleScroll = React51.useCallback(function() {
      if (animating.current) {
        return;
      }
      var currentActiveLink = getInternalCurrentAnchor(links, targetOffset4 !== void 0 ? targetOffset4 : offsetTop || 0, bounds);
      setCurrentActiveLink(currentActiveLink);
    }, [dependencyListItem, targetOffset4, offsetTop]);
    var handleScrollTo = React51.useCallback(function(link) {
      setCurrentActiveLink(link);
      var container = getCurrentContainer();
      var scrollTop = getScroll(container, true);
      var sharpLinkMatch = sharpMatcherRegx.exec(link);
      if (!sharpLinkMatch) {
        return;
      }
      var targetElement = document.getElementById(sharpLinkMatch[1]);
      if (!targetElement) {
        return;
      }
      var eleOffsetTop = getOffsetTop(targetElement, container);
      var y2 = scrollTop + eleOffsetTop;
      y2 -= targetOffset4 !== void 0 ? targetOffset4 : offsetTop || 0;
      animating.current = true;
      scrollTo(y2, {
        getContainer: getCurrentContainer,
        callback: function callback() {
          animating.current = false;
        }
      });
    }, [targetOffset4, offsetTop]);
    var inkClass = (0, import_classnames8.default)(_defineProperty({}, "".concat(prefixCls, "-ink-ball-visible"), activeLink), "".concat(prefixCls, "-ink-ball"));
    var wrapperClass = (0, import_classnames8.default)("".concat(prefixCls, "-wrapper"), _defineProperty({}, "".concat(prefixCls, "-rtl"), direction === "rtl"), className);
    var anchorClass = (0, import_classnames8.default)(prefixCls, _defineProperty({}, "".concat(prefixCls, "-fixed"), !affix && !showInkInFixed));
    var wrapperStyle = _extends({
      maxHeight: offsetTop ? "calc(100vh - ".concat(offsetTop, "px)") : "100vh"
    }, style3);
    var anchorContent = /* @__PURE__ */ React51.createElement("div", {
      ref: wrapperRef,
      className: wrapperClass,
      style: wrapperStyle
    }, /* @__PURE__ */ React51.createElement("div", {
      className: anchorClass
    }, /* @__PURE__ */ React51.createElement("div", {
      className: "".concat(prefixCls, "-ink")
    }, /* @__PURE__ */ React51.createElement("span", {
      className: inkClass,
      ref: spanLinkNode
    })), children));
    React51.useEffect(function() {
      var scrollContainer = getCurrentContainer();
      var scrollEvent = addEventListenerWrap(scrollContainer, "scroll", handleScroll);
      handleScroll();
      return function() {
        scrollEvent === null || scrollEvent === void 0 ? void 0 : scrollEvent.remove();
      };
    }, [dependencyListItem]);
    React51.useEffect(function() {
      if (typeof getCurrentAnchor === "function") {
        setCurrentActiveLink(getCurrentAnchor(activeLinkRef.current || ""));
      }
    }, [getCurrentAnchor]);
    React51.useEffect(function() {
      updateInk();
    }, [getCurrentAnchor, dependencyListItem, activeLink]);
    var memoizedContextValue = React51.useMemo(function() {
      return {
        registerLink,
        unregisterLink,
        scrollTo: handleScrollTo,
        activeLink,
        onClick
      };
    }, [activeLink, onClick, handleScrollTo]);
    return /* @__PURE__ */ React51.createElement(context_default2.Provider, {
      value: memoizedContextValue
    }, affix ? /* @__PURE__ */ React51.createElement(affix_default, {
      offsetTop,
      target: getCurrentContainer
    }, anchorContent) : anchorContent);
  };
  var Anchor = function Anchor2(props) {
    var customizePrefixCls = props.prefixCls;
    var _React$useContext2 = React51.useContext(ConfigContext), getPrefixCls = _React$useContext2.getPrefixCls;
    var anchorPrefixCls = getPrefixCls("anchor", customizePrefixCls);
    return /* @__PURE__ */ React51.createElement(AnchorContent, _extends({}, props, {
      anchorPrefixCls
    }));
  };
  var Anchor_default = Anchor;

  // node_modules/antd/es/anchor/AnchorLink.js
  var import_classnames9 = __toESM(require_classnames());
  var React52 = __toESM(require_react());
  var AnchorLink = function AnchorLink2(props) {
    var _props$href = props.href, href = _props$href === void 0 ? "#" : _props$href, title = props.title, customizePrefixCls = props.prefixCls, children = props.children, className = props.className, target = props.target;
    var context2 = React52.useContext(context_default2);
    var _ref = context2 || {}, registerLink = _ref.registerLink, unregisterLink = _ref.unregisterLink, scrollTo3 = _ref.scrollTo, onClick = _ref.onClick, activeLink = _ref.activeLink;
    React52.useEffect(function() {
      registerLink === null || registerLink === void 0 ? void 0 : registerLink(href);
      return function() {
        unregisterLink === null || unregisterLink === void 0 ? void 0 : unregisterLink(href);
      };
    }, [href, registerLink, unregisterLink]);
    var handleClick = function handleClick2(e3) {
      onClick === null || onClick === void 0 ? void 0 : onClick(e3, {
        title,
        href
      });
      scrollTo3 === null || scrollTo3 === void 0 ? void 0 : scrollTo3(href);
    };
    return /* @__PURE__ */ React52.createElement(ConfigConsumer, null, function(_ref2) {
      var getPrefixCls = _ref2.getPrefixCls;
      var prefixCls = getPrefixCls("anchor", customizePrefixCls);
      var active = activeLink === href;
      var wrapperClassName = (0, import_classnames9.default)("".concat(prefixCls, "-link"), className, _defineProperty({}, "".concat(prefixCls, "-link-active"), active));
      var titleClassName = (0, import_classnames9.default)("".concat(prefixCls, "-link-title"), _defineProperty({}, "".concat(prefixCls, "-link-title-active"), active));
      return /* @__PURE__ */ React52.createElement("div", {
        className: wrapperClassName
      }, /* @__PURE__ */ React52.createElement("a", {
        className: titleClassName,
        href,
        title: typeof title === "string" ? title : "",
        target,
        onClick: handleClick
      }, title), children);
    });
  };
  var AnchorLink_default = AnchorLink;

  // node_modules/antd/es/anchor/index.js
  var Anchor3 = Anchor_default;
  Anchor3.Link = AnchorLink_default;
  var anchor_default = Anchor3;

  // node_modules/antd/es/select/index.js
  var import_classnames29 = __toESM(require_classnames());

  // node_modules/rc-util/es/hooks/useEvent.js
  var React53 = __toESM(require_react());
  function useEvent(callback) {
    var fnRef = React53.useRef();
    fnRef.current = callback;
    var memoFn = React53.useCallback(function() {
      var _fnRef$current;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return (_fnRef$current = fnRef.current) === null || _fnRef$current === void 0 ? void 0 : _fnRef$current.call.apply(_fnRef$current, [fnRef].concat(args));
    }, []);
    return memoFn;
  }

  // node_modules/rc-util/es/hooks/useLayoutEffect.js
  var React54 = __toESM(require_react());
  var useInternalLayoutEffect = canUseDom() ? React54.useLayoutEffect : React54.useEffect;
  var useLayoutEffect6 = function useLayoutEffect7(callback, deps) {
    var firstMountRef = React54.useRef(true);
    useInternalLayoutEffect(function() {
      return callback(firstMountRef.current);
    }, deps);
    useInternalLayoutEffect(function() {
      firstMountRef.current = false;
      return function() {
        firstMountRef.current = true;
      };
    }, []);
  };
  var useLayoutUpdateEffect = function useLayoutUpdateEffect2(callback, deps) {
    useLayoutEffect6(function(firstMount) {
      if (!firstMount) {
        return callback();
      }
    }, deps);
  };
  var useLayoutEffect_default = useLayoutEffect6;

  // node_modules/rc-util/es/hooks/useMergedState.js
  function hasValue(value) {
    return value !== void 0;
  }
  function useMergedState(defaultStateValue, option) {
    var _ref = option || {}, defaultValue = _ref.defaultValue, value = _ref.value, onChange = _ref.onChange, postState = _ref.postState;
    var _useState = useSafeState(function() {
      if (hasValue(value)) {
        return value;
      } else if (hasValue(defaultValue)) {
        return typeof defaultValue === "function" ? defaultValue() : defaultValue;
      } else {
        return typeof defaultStateValue === "function" ? defaultStateValue() : defaultStateValue;
      }
    }), _useState2 = _slicedToArray(_useState, 2), innerValue = _useState2[0], setInnerValue = _useState2[1];
    var mergedValue = value !== void 0 ? value : innerValue;
    var postMergedValue = postState ? postState(mergedValue) : mergedValue;
    var onChangeFn = useEvent(onChange);
    var _useState3 = useSafeState([mergedValue]), _useState4 = _slicedToArray(_useState3, 2), prevValue = _useState4[0], setPrevValue = _useState4[1];
    useLayoutUpdateEffect(function() {
      var prev = prevValue[0];
      if (innerValue !== prev) {
        onChangeFn(innerValue, prev);
      }
    }, [prevValue]);
    useLayoutUpdateEffect(function() {
      if (!hasValue(value)) {
        setInnerValue(value);
      }
    }, [value]);
    var triggerChange = useEvent(function(updater, ignoreDestroy) {
      setInnerValue(updater, ignoreDestroy);
      setPrevValue([mergedValue], ignoreDestroy);
    });
    return [postMergedValue, triggerChange];
  }

  // node_modules/rc-select/es/Select.js
  var React99 = __toESM(require_react());

  // node_modules/rc-select/es/BaseSelect.js
  var import_classnames21 = __toESM(require_classnames());

  // node_modules/rc-util/es/isMobile.js
  var isMobile_default = function() {
    if (typeof navigator === "undefined" || typeof window === "undefined") {
      return false;
    }
    var agent = navigator.userAgent || navigator.vendor || window.opera;
    return /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(agent) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw-(n|u)|c55\/|capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob|do(c|p)o|ds(12|-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(-|_)|g1 u|g560|gene|gf-5|g-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd-(m|p|t)|hei-|hi(pt|ta)|hp( i|ip)|hs-c|ht(c(-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i-(20|go|ma)|i230|iac( |-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h-|oo|p-)|sdk\/|se(c(-|0|1)|47|mc|nd|ri)|sgh-|shar|sie(-|m)|sk-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h-|v-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl-|tdg-|tel(i|m)|tim-|t-mo|to(pl|sh)|ts(70|m-|m3|m5)|tx-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto|zte-/i.test(agent === null || agent === void 0 ? void 0 : agent.substr(0, 4));
  };

  // node_modules/rc-util/es/KeyCode.js
  var KeyCode = {
    /**
     * MAC_ENTER
     */
    MAC_ENTER: 3,
    /**
     * BACKSPACE
     */
    BACKSPACE: 8,
    /**
     * TAB
     */
    TAB: 9,
    /**
     * NUMLOCK on FF/Safari Mac
     */
    NUM_CENTER: 12,
    // NUMLOCK on FF/Safari Mac
    /**
     * ENTER
     */
    ENTER: 13,
    /**
     * SHIFT
     */
    SHIFT: 16,
    /**
     * CTRL
     */
    CTRL: 17,
    /**
     * ALT
     */
    ALT: 18,
    /**
     * PAUSE
     */
    PAUSE: 19,
    /**
     * CAPS_LOCK
     */
    CAPS_LOCK: 20,
    /**
     * ESC
     */
    ESC: 27,
    /**
     * SPACE
     */
    SPACE: 32,
    /**
     * PAGE_UP
     */
    PAGE_UP: 33,
    // also NUM_NORTH_EAST
    /**
     * PAGE_DOWN
     */
    PAGE_DOWN: 34,
    // also NUM_SOUTH_EAST
    /**
     * END
     */
    END: 35,
    // also NUM_SOUTH_WEST
    /**
     * HOME
     */
    HOME: 36,
    // also NUM_NORTH_WEST
    /**
     * LEFT
     */
    LEFT: 37,
    // also NUM_WEST
    /**
     * UP
     */
    UP: 38,
    // also NUM_NORTH
    /**
     * RIGHT
     */
    RIGHT: 39,
    // also NUM_EAST
    /**
     * DOWN
     */
    DOWN: 40,
    // also NUM_SOUTH
    /**
     * PRINT_SCREEN
     */
    PRINT_SCREEN: 44,
    /**
     * INSERT
     */
    INSERT: 45,
    // also NUM_INSERT
    /**
     * DELETE
     */
    DELETE: 46,
    // also NUM_DELETE
    /**
     * ZERO
     */
    ZERO: 48,
    /**
     * ONE
     */
    ONE: 49,
    /**
     * TWO
     */
    TWO: 50,
    /**
     * THREE
     */
    THREE: 51,
    /**
     * FOUR
     */
    FOUR: 52,
    /**
     * FIVE
     */
    FIVE: 53,
    /**
     * SIX
     */
    SIX: 54,
    /**
     * SEVEN
     */
    SEVEN: 55,
    /**
     * EIGHT
     */
    EIGHT: 56,
    /**
     * NINE
     */
    NINE: 57,
    /**
     * QUESTION_MARK
     */
    QUESTION_MARK: 63,
    // needs localization
    /**
     * A
     */
    A: 65,
    /**
     * B
     */
    B: 66,
    /**
     * C
     */
    C: 67,
    /**
     * D
     */
    D: 68,
    /**
     * E
     */
    E: 69,
    /**
     * F
     */
    F: 70,
    /**
     * G
     */
    G: 71,
    /**
     * H
     */
    H: 72,
    /**
     * I
     */
    I: 73,
    /**
     * J
     */
    J: 74,
    /**
     * K
     */
    K: 75,
    /**
     * L
     */
    L: 76,
    /**
     * M
     */
    M: 77,
    /**
     * N
     */
    N: 78,
    /**
     * O
     */
    O: 79,
    /**
     * P
     */
    P: 80,
    /**
     * Q
     */
    Q: 81,
    /**
     * R
     */
    R: 82,
    /**
     * S
     */
    S: 83,
    /**
     * T
     */
    T: 84,
    /**
     * U
     */
    U: 85,
    /**
     * V
     */
    V: 86,
    /**
     * W
     */
    W: 87,
    /**
     * X
     */
    X: 88,
    /**
     * Y
     */
    Y: 89,
    /**
     * Z
     */
    Z: 90,
    /**
     * META
     */
    META: 91,
    // WIN_KEY_LEFT
    /**
     * WIN_KEY_RIGHT
     */
    WIN_KEY_RIGHT: 92,
    /**
     * CONTEXT_MENU
     */
    CONTEXT_MENU: 93,
    /**
     * NUM_ZERO
     */
    NUM_ZERO: 96,
    /**
     * NUM_ONE
     */
    NUM_ONE: 97,
    /**
     * NUM_TWO
     */
    NUM_TWO: 98,
    /**
     * NUM_THREE
     */
    NUM_THREE: 99,
    /**
     * NUM_FOUR
     */
    NUM_FOUR: 100,
    /**
     * NUM_FIVE
     */
    NUM_FIVE: 101,
    /**
     * NUM_SIX
     */
    NUM_SIX: 102,
    /**
     * NUM_SEVEN
     */
    NUM_SEVEN: 103,
    /**
     * NUM_EIGHT
     */
    NUM_EIGHT: 104,
    /**
     * NUM_NINE
     */
    NUM_NINE: 105,
    /**
     * NUM_MULTIPLY
     */
    NUM_MULTIPLY: 106,
    /**
     * NUM_PLUS
     */
    NUM_PLUS: 107,
    /**
     * NUM_MINUS
     */
    NUM_MINUS: 109,
    /**
     * NUM_PERIOD
     */
    NUM_PERIOD: 110,
    /**
     * NUM_DIVISION
     */
    NUM_DIVISION: 111,
    /**
     * F1
     */
    F1: 112,
    /**
     * F2
     */
    F2: 113,
    /**
     * F3
     */
    F3: 114,
    /**
     * F4
     */
    F4: 115,
    /**
     * F5
     */
    F5: 116,
    /**
     * F6
     */
    F6: 117,
    /**
     * F7
     */
    F7: 118,
    /**
     * F8
     */
    F8: 119,
    /**
     * F9
     */
    F9: 120,
    /**
     * F10
     */
    F10: 121,
    /**
     * F11
     */
    F11: 122,
    /**
     * F12
     */
    F12: 123,
    /**
     * NUMLOCK
     */
    NUMLOCK: 144,
    /**
     * SEMICOLON
     */
    SEMICOLON: 186,
    // needs localization
    /**
     * DASH
     */
    DASH: 189,
    // needs localization
    /**
     * EQUALS
     */
    EQUALS: 187,
    // needs localization
    /**
     * COMMA
     */
    COMMA: 188,
    // needs localization
    /**
     * PERIOD
     */
    PERIOD: 190,
    // needs localization
    /**
     * SLASH
     */
    SLASH: 191,
    // needs localization
    /**
     * APOSTROPHE
     */
    APOSTROPHE: 192,
    // needs localization
    /**
     * SINGLE_QUOTE
     */
    SINGLE_QUOTE: 222,
    // needs localization
    /**
     * OPEN_SQUARE_BRACKET
     */
    OPEN_SQUARE_BRACKET: 219,
    // needs localization
    /**
     * BACKSLASH
     */
    BACKSLASH: 220,
    // needs localization
    /**
     * CLOSE_SQUARE_BRACKET
     */
    CLOSE_SQUARE_BRACKET: 221,
    // needs localization
    /**
     * WIN_KEY
     */
    WIN_KEY: 224,
    /**
     * MAC_FF_META
     */
    MAC_FF_META: 224,
    // Firefox (Gecko) fires this for the meta key instead of 91
    /**
     * WIN_IME
     */
    WIN_IME: 229,
    // ======================== Function ========================
    /**
     * whether text and modified key is entered at the same time.
     */
    isTextModifyingKeyEvent: function isTextModifyingKeyEvent(e3) {
      var keyCode = e3.keyCode;
      if (e3.altKey && !e3.ctrlKey || e3.metaKey || // Function keys don't generate text
      keyCode >= KeyCode.F1 && keyCode <= KeyCode.F12) {
        return false;
      }
      switch (keyCode) {
        case KeyCode.ALT:
        case KeyCode.CAPS_LOCK:
        case KeyCode.CONTEXT_MENU:
        case KeyCode.CTRL:
        case KeyCode.DOWN:
        case KeyCode.END:
        case KeyCode.ESC:
        case KeyCode.HOME:
        case KeyCode.INSERT:
        case KeyCode.LEFT:
        case KeyCode.MAC_FF_META:
        case KeyCode.META:
        case KeyCode.NUMLOCK:
        case KeyCode.NUM_CENTER:
        case KeyCode.PAGE_DOWN:
        case KeyCode.PAGE_UP:
        case KeyCode.PAUSE:
        case KeyCode.PRINT_SCREEN:
        case KeyCode.RIGHT:
        case KeyCode.SHIFT:
        case KeyCode.UP:
        case KeyCode.WIN_KEY:
        case KeyCode.WIN_KEY_RIGHT:
          return false;
        default:
          return true;
      }
    },
    /**
     * whether character is entered.
     */
    isCharacterKey: function isCharacterKey(keyCode) {
      if (keyCode >= KeyCode.ZERO && keyCode <= KeyCode.NINE) {
        return true;
      }
      if (keyCode >= KeyCode.NUM_ZERO && keyCode <= KeyCode.NUM_MULTIPLY) {
        return true;
      }
      if (keyCode >= KeyCode.A && keyCode <= KeyCode.Z) {
        return true;
      }
      if (window.navigator.userAgent.indexOf("WebKit") !== -1 && keyCode === 0) {
        return true;
      }
      switch (keyCode) {
        case KeyCode.SPACE:
        case KeyCode.QUESTION_MARK:
        case KeyCode.NUM_PLUS:
        case KeyCode.NUM_MINUS:
        case KeyCode.NUM_PERIOD:
        case KeyCode.NUM_DIVISION:
        case KeyCode.SEMICOLON:
        case KeyCode.DASH:
        case KeyCode.EQUALS:
        case KeyCode.COMMA:
        case KeyCode.PERIOD:
        case KeyCode.SLASH:
        case KeyCode.APOSTROPHE:
        case KeyCode.SINGLE_QUOTE:
        case KeyCode.OPEN_SQUARE_BRACKET:
        case KeyCode.BACKSLASH:
        case KeyCode.CLOSE_SQUARE_BRACKET:
          return true;
        default:
          return false;
      }
    }
  };
  var KeyCode_default = KeyCode;

  // node_modules/rc-select/es/BaseSelect.js
  var React80 = __toESM(require_react());

  // node_modules/rc-select/es/hooks/useBaseProps.js
  var React55 = __toESM(require_react());
  var BaseSelectContext = /* @__PURE__ */ React55.createContext(null);
  function useBaseProps() {
    return React55.useContext(BaseSelectContext);
  }

  // node_modules/rc-select/es/hooks/useDelayReset.js
  var React56 = __toESM(require_react());
  function useDelayReset() {
    var timeout = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 10;
    var _React$useState = React56.useState(false), _React$useState2 = _slicedToArray(_React$useState, 2), bool = _React$useState2[0], setBool = _React$useState2[1];
    var delayRef = React56.useRef(null);
    var cancelLatest = function cancelLatest2() {
      window.clearTimeout(delayRef.current);
    };
    React56.useEffect(function() {
      return cancelLatest;
    }, []);
    var delaySetBool = function delaySetBool2(value, callback) {
      cancelLatest();
      delayRef.current = window.setTimeout(function() {
        setBool(value);
        if (callback) {
          callback();
        }
      }, timeout);
    };
    return [bool, delaySetBool, cancelLatest];
  }

  // node_modules/rc-select/es/hooks/useLock.js
  var React57 = __toESM(require_react());
  function useLock() {
    var duration = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 250;
    var lockRef = React57.useRef(null);
    var timeoutRef = React57.useRef(null);
    React57.useEffect(function() {
      return function() {
        window.clearTimeout(timeoutRef.current);
      };
    }, []);
    function doLock(locked) {
      if (locked || lockRef.current === null) {
        lockRef.current = locked;
      }
      window.clearTimeout(timeoutRef.current);
      timeoutRef.current = window.setTimeout(function() {
        lockRef.current = null;
      }, duration);
    }
    return [function() {
      return lockRef.current;
    }, doLock];
  }

  // node_modules/rc-select/es/hooks/useSelectTriggerControl.js
  var React58 = __toESM(require_react());
  function useSelectTriggerControl(elements, open, triggerOpen, customizedTrigger) {
    var propsRef = React58.useRef(null);
    propsRef.current = {
      open,
      triggerOpen,
      customizedTrigger
    };
    React58.useEffect(function() {
      function onGlobalMouseDown(event) {
        var _propsRef$current;
        if ((_propsRef$current = propsRef.current) !== null && _propsRef$current !== void 0 && _propsRef$current.customizedTrigger) {
          return;
        }
        var target = event.target;
        if (target.shadowRoot && event.composed) {
          target = event.composedPath()[0] || target;
        }
        if (propsRef.current.open && elements().filter(function(element) {
          return element;
        }).every(function(element) {
          return !element.contains(target) && element !== target;
        })) {
          propsRef.current.triggerOpen(false);
        }
      }
      window.addEventListener("mousedown", onGlobalMouseDown);
      return function() {
        return window.removeEventListener("mousedown", onGlobalMouseDown);
      };
    }, []);
  }

  // node_modules/rc-select/es/Selector/index.js
  var React69 = __toESM(require_react());
  var import_react25 = __toESM(require_react());

  // node_modules/rc-select/es/Selector/MultipleSelector.js
  var React67 = __toESM(require_react());
  var import_react24 = __toESM(require_react());
  var import_classnames15 = __toESM(require_classnames());

  // node_modules/rc-util/es/pickAttrs.js
  var attributes = "accept acceptCharset accessKey action allowFullScreen allowTransparency\n    alt async autoComplete autoFocus autoPlay capture cellPadding cellSpacing challenge\n    charSet checked classID className colSpan cols content contentEditable contextMenu\n    controls coords crossOrigin data dateTime default defer dir disabled download draggable\n    encType form formAction formEncType formMethod formNoValidate formTarget frameBorder\n    headers height hidden high href hrefLang htmlFor httpEquiv icon id inputMode integrity\n    is keyParams keyType kind label lang list loop low manifest marginHeight marginWidth max maxLength media\n    mediaGroup method min minLength multiple muted name noValidate nonce open\n    optimum pattern placeholder poster preload radioGroup readOnly rel required\n    reversed role rowSpan rows sandbox scope scoped scrolling seamless selected\n    shape size sizes span spellCheck src srcDoc srcLang srcSet start step style\n    summary tabIndex target title type useMap value width wmode wrap";
  var eventsName = "onCopy onCut onPaste onCompositionEnd onCompositionStart onCompositionUpdate onKeyDown\n    onKeyPress onKeyUp onFocus onBlur onChange onInput onSubmit onClick onContextMenu onDoubleClick\n    onDrag onDragEnd onDragEnter onDragExit onDragLeave onDragOver onDragStart onDrop onMouseDown\n    onMouseEnter onMouseLeave onMouseMove onMouseOut onMouseOver onMouseUp onSelect onTouchCancel\n    onTouchEnd onTouchMove onTouchStart onScroll onWheel onAbort onCanPlay onCanPlayThrough\n    onDurationChange onEmptied onEncrypted onEnded onError onLoadedData onLoadedMetadata\n    onLoadStart onPause onPlay onPlaying onProgress onRateChange onSeeked onSeeking onStalled onSuspend onTimeUpdate onVolumeChange onWaiting onLoad onError";
  var propList = "".concat(attributes, " ").concat(eventsName).split(/[\s\n]+/);
  var ariaPrefix = "aria-";
  var dataPrefix = "data-";
  function match(key2, prefix2) {
    return key2.indexOf(prefix2) === 0;
  }
  function pickAttrs(props) {
    var ariaOnly = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    var mergedConfig;
    if (ariaOnly === false) {
      mergedConfig = {
        aria: true,
        data: true,
        attr: true
      };
    } else if (ariaOnly === true) {
      mergedConfig = {
        aria: true
      };
    } else {
      mergedConfig = _objectSpread2({}, ariaOnly);
    }
    var attrs = {};
    Object.keys(props).forEach(function(key2) {
      if (
        // Aria
        mergedConfig.aria && (key2 === "role" || match(key2, ariaPrefix)) || // Data
        mergedConfig.data && match(key2, dataPrefix) || // Attr
        mergedConfig.attr && propList.includes(key2)
      ) {
        attrs[key2] = props[key2];
      }
    });
    return attrs;
  }

  // node_modules/rc-overflow/es/Overflow.js
  var React63 = __toESM(require_react());
  var import_react23 = __toESM(require_react());
  var import_classnames12 = __toESM(require_classnames());

  // node_modules/rc-overflow/es/Item.js
  var React59 = __toESM(require_react());
  var import_classnames10 = __toESM(require_classnames());
  var _excluded8 = ["prefixCls", "invalidate", "item", "renderItem", "responsive", "responsiveDisabled", "registerSize", "itemKey", "className", "style", "children", "display", "order", "component"];
  var UNDEFINED = void 0;
  function InternalItem(props, ref) {
    var prefixCls = props.prefixCls, invalidate = props.invalidate, item = props.item, renderItem = props.renderItem, responsive = props.responsive, responsiveDisabled = props.responsiveDisabled, registerSize = props.registerSize, itemKey3 = props.itemKey, className = props.className, style3 = props.style, children = props.children, display = props.display, order = props.order, _props$component = props.component, Component20 = _props$component === void 0 ? "div" : _props$component, restProps = _objectWithoutProperties(props, _excluded8);
    var mergedHidden = responsive && !display;
    function internalRegisterSize(width) {
      registerSize(itemKey3, width);
    }
    React59.useEffect(function() {
      return function() {
        internalRegisterSize(null);
      };
    }, []);
    var childNode = renderItem && item !== UNDEFINED ? renderItem(item) : children;
    var overflowStyle;
    if (!invalidate) {
      overflowStyle = {
        opacity: mergedHidden ? 0 : 1,
        height: mergedHidden ? 0 : UNDEFINED,
        overflowY: mergedHidden ? "hidden" : UNDEFINED,
        order: responsive ? order : UNDEFINED,
        pointerEvents: mergedHidden ? "none" : UNDEFINED,
        position: mergedHidden ? "absolute" : UNDEFINED
      };
    }
    var overflowProps = {};
    if (mergedHidden) {
      overflowProps["aria-hidden"] = true;
    }
    var itemNode = /* @__PURE__ */ React59.createElement(Component20, _extends({
      className: (0, import_classnames10.default)(!invalidate && prefixCls, className),
      style: _objectSpread2(_objectSpread2({}, overflowStyle), style3)
    }, overflowProps, restProps, {
      ref
    }), childNode);
    if (responsive) {
      itemNode = /* @__PURE__ */ React59.createElement(es_default2, {
        onResize: function onResize2(_ref) {
          var offsetWidth = _ref.offsetWidth;
          internalRegisterSize(offsetWidth);
        },
        disabled: responsiveDisabled
      }, itemNode);
    }
    return itemNode;
  }
  var Item = /* @__PURE__ */ React59.forwardRef(InternalItem);
  Item.displayName = "Item";
  var Item_default = Item;

  // node_modules/rc-overflow/es/hooks/useEffectState.js
  var React60 = __toESM(require_react());
  var import_react_dom5 = __toESM(require_react_dom());

  // node_modules/rc-overflow/es/hooks/channelUpdate.js
  function channelUpdate(callback) {
    if (typeof MessageChannel === "undefined") {
      raf_default(callback);
    } else {
      var channel = new MessageChannel();
      channel.port1.onmessage = function() {
        return callback();
      };
      channel.port2.postMessage(void 0);
    }
  }

  // node_modules/rc-overflow/es/hooks/useEffectState.js
  function useBatcher() {
    var updateFuncRef = React60.useRef(null);
    var notifyEffectUpdate = function notifyEffectUpdate2(callback) {
      if (!updateFuncRef.current) {
        updateFuncRef.current = [];
        channelUpdate(function() {
          (0, import_react_dom5.unstable_batchedUpdates)(function() {
            updateFuncRef.current.forEach(function(fn2) {
              fn2();
            });
            updateFuncRef.current = null;
          });
        });
      }
      updateFuncRef.current.push(callback);
    };
    return notifyEffectUpdate;
  }
  function useEffectState(notifyEffectUpdate, defaultValue) {
    var _React$useState = React60.useState(defaultValue), _React$useState2 = _slicedToArray(_React$useState, 2), stateValue = _React$useState2[0], setStateValue = _React$useState2[1];
    var setEffectVal = useEvent(function(nextValue) {
      notifyEffectUpdate(function() {
        setStateValue(nextValue);
      });
    });
    return [stateValue, setEffectVal];
  }

  // node_modules/rc-overflow/es/RawItem.js
  var React62 = __toESM(require_react());
  var import_classnames11 = __toESM(require_classnames());

  // node_modules/rc-overflow/es/context.js
  var import_react22 = __toESM(require_react());
  var OverflowContext = /* @__PURE__ */ import_react22.default.createContext(null);

  // node_modules/rc-overflow/es/RawItem.js
  var _excluded9 = ["component"];
  var _excluded23 = ["className"];
  var _excluded32 = ["className"];
  var InternalRawItem = function InternalRawItem2(props, ref) {
    var context2 = React62.useContext(OverflowContext);
    if (!context2) {
      var _props$component = props.component, Component20 = _props$component === void 0 ? "div" : _props$component, _restProps = _objectWithoutProperties(props, _excluded9);
      return /* @__PURE__ */ React62.createElement(Component20, _extends({}, _restProps, {
        ref
      }));
    }
    var contextClassName = context2.className, restContext = _objectWithoutProperties(context2, _excluded23);
    var className = props.className, restProps = _objectWithoutProperties(props, _excluded32);
    return /* @__PURE__ */ React62.createElement(OverflowContext.Provider, {
      value: null
    }, /* @__PURE__ */ React62.createElement(Item_default, _extends({
      ref,
      className: (0, import_classnames11.default)(contextClassName, className)
    }, restContext, restProps)));
  };
  var RawItem = /* @__PURE__ */ React62.forwardRef(InternalRawItem);
  RawItem.displayName = "RawItem";
  var RawItem_default = RawItem;

  // node_modules/rc-overflow/es/Overflow.js
  var _excluded10 = ["prefixCls", "data", "renderItem", "renderRawItem", "itemKey", "itemWidth", "ssr", "style", "className", "maxCount", "renderRest", "renderRawRest", "suffix", "component", "itemComponent", "onVisibleChange"];
  var RESPONSIVE = "responsive";
  var INVALIDATE = "invalidate";
  function defaultRenderRest(omittedItems) {
    return "+ ".concat(omittedItems.length, " ...");
  }
  function Overflow(props, ref) {
    var _props$prefixCls = props.prefixCls, prefixCls = _props$prefixCls === void 0 ? "rc-overflow" : _props$prefixCls, _props$data = props.data, data = _props$data === void 0 ? [] : _props$data, renderItem = props.renderItem, renderRawItem = props.renderRawItem, itemKey3 = props.itemKey, _props$itemWidth = props.itemWidth, itemWidth = _props$itemWidth === void 0 ? 10 : _props$itemWidth, ssr = props.ssr, style3 = props.style, className = props.className, maxCount3 = props.maxCount, renderRest = props.renderRest, renderRawRest = props.renderRawRest, suffix = props.suffix, _props$component = props.component, Component20 = _props$component === void 0 ? "div" : _props$component, itemComponent = props.itemComponent, onVisibleChange = props.onVisibleChange, restProps = _objectWithoutProperties(props, _excluded10);
    var fullySSR = ssr === "full";
    var notifyEffectUpdate = useBatcher();
    var _useEffectState = useEffectState(notifyEffectUpdate, null), _useEffectState2 = _slicedToArray(_useEffectState, 2), containerWidth = _useEffectState2[0], setContainerWidth = _useEffectState2[1];
    var mergedContainerWidth = containerWidth || 0;
    var _useEffectState3 = useEffectState(notifyEffectUpdate, /* @__PURE__ */ new Map()), _useEffectState4 = _slicedToArray(_useEffectState3, 2), itemWidths = _useEffectState4[0], setItemWidths = _useEffectState4[1];
    var _useEffectState5 = useEffectState(notifyEffectUpdate, 0), _useEffectState6 = _slicedToArray(_useEffectState5, 2), prevRestWidth = _useEffectState6[0], setPrevRestWidth = _useEffectState6[1];
    var _useEffectState7 = useEffectState(notifyEffectUpdate, 0), _useEffectState8 = _slicedToArray(_useEffectState7, 2), restWidth = _useEffectState8[0], setRestWidth = _useEffectState8[1];
    var _useEffectState9 = useEffectState(notifyEffectUpdate, 0), _useEffectState10 = _slicedToArray(_useEffectState9, 2), suffixWidth = _useEffectState10[0], setSuffixWidth = _useEffectState10[1];
    var _useState = (0, import_react23.useState)(null), _useState2 = _slicedToArray(_useState, 2), suffixFixedStart = _useState2[0], setSuffixFixedStart = _useState2[1];
    var _useState3 = (0, import_react23.useState)(null), _useState4 = _slicedToArray(_useState3, 2), displayCount = _useState4[0], setDisplayCount = _useState4[1];
    var mergedDisplayCount = React63.useMemo(function() {
      if (displayCount === null && fullySSR) {
        return Number.MAX_SAFE_INTEGER;
      }
      return displayCount || 0;
    }, [displayCount, containerWidth]);
    var _useState5 = (0, import_react23.useState)(false), _useState6 = _slicedToArray(_useState5, 2), restReady = _useState6[0], setRestReady = _useState6[1];
    var itemPrefixCls = "".concat(prefixCls, "-item");
    var mergedRestWidth = Math.max(prevRestWidth, restWidth);
    var isResponsive = maxCount3 === RESPONSIVE;
    var shouldResponsive = data.length && isResponsive;
    var invalidate = maxCount3 === INVALIDATE;
    var showRest = shouldResponsive || typeof maxCount3 === "number" && data.length > maxCount3;
    var mergedData = (0, import_react23.useMemo)(function() {
      var items = data;
      if (shouldResponsive) {
        if (containerWidth === null && fullySSR) {
          items = data;
        } else {
          items = data.slice(0, Math.min(data.length, mergedContainerWidth / itemWidth));
        }
      } else if (typeof maxCount3 === "number") {
        items = data.slice(0, maxCount3);
      }
      return items;
    }, [data, itemWidth, containerWidth, maxCount3, shouldResponsive]);
    var omittedItems = (0, import_react23.useMemo)(function() {
      if (shouldResponsive) {
        return data.slice(mergedDisplayCount + 1);
      }
      return data.slice(mergedData.length);
    }, [data, mergedData, shouldResponsive, mergedDisplayCount]);
    var getKey6 = (0, import_react23.useCallback)(function(item, index2) {
      var _ref;
      if (typeof itemKey3 === "function") {
        return itemKey3(item);
      }
      return (_ref = itemKey3 && (item === null || item === void 0 ? void 0 : item[itemKey3])) !== null && _ref !== void 0 ? _ref : index2;
    }, [itemKey3]);
    var mergedRenderItem = (0, import_react23.useCallback)(renderItem || function(item) {
      return item;
    }, [renderItem]);
    function updateDisplayCount(count, suffixFixedStartVal, notReady) {
      if (displayCount === count && (suffixFixedStartVal === void 0 || suffixFixedStartVal === suffixFixedStart)) {
        return;
      }
      setDisplayCount(count);
      if (!notReady) {
        setRestReady(count < data.length - 1);
        onVisibleChange === null || onVisibleChange === void 0 ? void 0 : onVisibleChange(count);
      }
      if (suffixFixedStartVal !== void 0) {
        setSuffixFixedStart(suffixFixedStartVal);
      }
    }
    function onOverflowResize(_24, element) {
      setContainerWidth(element.clientWidth);
    }
    function registerSize(key2, width) {
      setItemWidths(function(origin) {
        var clone2 = new Map(origin);
        if (width === null) {
          clone2.delete(key2);
        } else {
          clone2.set(key2, width);
        }
        return clone2;
      });
    }
    function registerOverflowSize(_24, width) {
      setRestWidth(width);
      setPrevRestWidth(restWidth);
    }
    function registerSuffixSize(_24, width) {
      setSuffixWidth(width);
    }
    function getItemWidth(index2) {
      return itemWidths.get(getKey6(mergedData[index2], index2));
    }
    useLayoutEffect_default(function() {
      if (mergedContainerWidth && typeof mergedRestWidth === "number" && mergedData) {
        var totalWidth = suffixWidth;
        var len = mergedData.length;
        var lastIndex = len - 1;
        if (!len) {
          updateDisplayCount(0, null);
          return;
        }
        for (var i3 = 0; i3 < len; i3 += 1) {
          var currentItemWidth = getItemWidth(i3);
          if (fullySSR) {
            currentItemWidth = currentItemWidth || 0;
          }
          if (currentItemWidth === void 0) {
            updateDisplayCount(i3 - 1, void 0, true);
            break;
          }
          totalWidth += currentItemWidth;
          if (
            // Only one means `totalWidth` is the final width
            lastIndex === 0 && totalWidth <= mergedContainerWidth || // Last two width will be the final width
            i3 === lastIndex - 1 && totalWidth + getItemWidth(lastIndex) <= mergedContainerWidth
          ) {
            updateDisplayCount(lastIndex, null);
            break;
          } else if (totalWidth + mergedRestWidth > mergedContainerWidth) {
            updateDisplayCount(i3 - 1, totalWidth - currentItemWidth - suffixWidth + restWidth);
            break;
          }
        }
        if (suffix && getItemWidth(0) + suffixWidth > mergedContainerWidth) {
          setSuffixFixedStart(null);
        }
      }
    }, [mergedContainerWidth, itemWidths, restWidth, suffixWidth, getKey6, mergedData]);
    var displayRest = restReady && !!omittedItems.length;
    var suffixStyle = {};
    if (suffixFixedStart !== null && shouldResponsive) {
      suffixStyle = {
        position: "absolute",
        left: suffixFixedStart,
        top: 0
      };
    }
    var itemSharedProps = {
      prefixCls: itemPrefixCls,
      responsive: shouldResponsive,
      component: itemComponent,
      invalidate
    };
    var internalRenderItemNode = renderRawItem ? function(item, index2) {
      var key2 = getKey6(item, index2);
      return /* @__PURE__ */ React63.createElement(OverflowContext.Provider, {
        key: key2,
        value: _objectSpread2(_objectSpread2({}, itemSharedProps), {}, {
          order: index2,
          item,
          itemKey: key2,
          registerSize,
          display: index2 <= mergedDisplayCount
        })
      }, renderRawItem(item, index2));
    } : function(item, index2) {
      var key2 = getKey6(item, index2);
      return /* @__PURE__ */ React63.createElement(Item_default, _extends({}, itemSharedProps, {
        order: index2,
        key: key2,
        item,
        renderItem: mergedRenderItem,
        itemKey: key2,
        registerSize,
        display: index2 <= mergedDisplayCount
      }));
    };
    var restNode;
    var restContextProps = {
      order: displayRest ? mergedDisplayCount : Number.MAX_SAFE_INTEGER,
      className: "".concat(itemPrefixCls, "-rest"),
      registerSize: registerOverflowSize,
      display: displayRest
    };
    if (!renderRawRest) {
      var mergedRenderRest = renderRest || defaultRenderRest;
      restNode = /* @__PURE__ */ React63.createElement(Item_default, _extends({}, itemSharedProps, restContextProps), typeof mergedRenderRest === "function" ? mergedRenderRest(omittedItems) : mergedRenderRest);
    } else if (renderRawRest) {
      restNode = /* @__PURE__ */ React63.createElement(OverflowContext.Provider, {
        value: _objectSpread2(_objectSpread2({}, itemSharedProps), restContextProps)
      }, renderRawRest(omittedItems));
    }
    var overflowNode = /* @__PURE__ */ React63.createElement(Component20, _extends({
      className: (0, import_classnames12.default)(!invalidate && prefixCls, className),
      style: style3,
      ref
    }, restProps), mergedData.map(internalRenderItemNode), showRest ? restNode : null, suffix && /* @__PURE__ */ React63.createElement(Item_default, _extends({}, itemSharedProps, {
      responsive: isResponsive,
      responsiveDisabled: !shouldResponsive,
      order: mergedDisplayCount,
      className: "".concat(itemPrefixCls, "-suffix"),
      registerSize: registerSuffixSize,
      display: true,
      style: suffixStyle
    }), suffix));
    if (isResponsive) {
      overflowNode = /* @__PURE__ */ React63.createElement(es_default2, {
        onResize: onOverflowResize,
        disabled: !shouldResponsive
      }, overflowNode);
    }
    return overflowNode;
  }
  var ForwardOverflow = /* @__PURE__ */ React63.forwardRef(Overflow);
  ForwardOverflow.displayName = "Overflow";
  ForwardOverflow.Item = RawItem_default;
  ForwardOverflow.RESPONSIVE = RESPONSIVE;
  ForwardOverflow.INVALIDATE = INVALIDATE;
  var Overflow_default = ForwardOverflow;

  // node_modules/rc-overflow/es/index.js
  var es_default5 = Overflow_default;

  // node_modules/rc-select/es/TransBtn.js
  var React64 = __toESM(require_react());
  var import_classnames13 = __toESM(require_classnames());
  var TransBtn = function TransBtn2(_ref) {
    var className = _ref.className, customizeIcon = _ref.customizeIcon, customizeIconProps = _ref.customizeIconProps, _onMouseDown = _ref.onMouseDown, onClick = _ref.onClick, children = _ref.children;
    var icon;
    if (typeof customizeIcon === "function") {
      icon = customizeIcon(customizeIconProps);
    } else {
      icon = customizeIcon;
    }
    return /* @__PURE__ */ React64.createElement("span", {
      className,
      onMouseDown: function onMouseDown(event) {
        event.preventDefault();
        if (_onMouseDown) {
          _onMouseDown(event);
        }
      },
      style: {
        userSelect: "none",
        WebkitUserSelect: "none"
      },
      unselectable: "on",
      onClick,
      "aria-hidden": true
    }, icon !== void 0 ? icon : /* @__PURE__ */ React64.createElement("span", {
      className: (0, import_classnames13.default)(className.split(/\s+/).map(function(cls) {
        return "".concat(cls, "-icon");
      }))
    }, children));
  };
  var TransBtn_default = TransBtn;

  // node_modules/rc-select/es/Selector/Input.js
  var React65 = __toESM(require_react());
  var import_classnames14 = __toESM(require_classnames());
  var Input = function Input2(_ref, ref) {
    var _inputNode2, _inputNode2$props;
    var prefixCls = _ref.prefixCls, id2 = _ref.id, inputElement = _ref.inputElement, disabled = _ref.disabled, tabIndex = _ref.tabIndex, autoFocus = _ref.autoFocus, autoComplete = _ref.autoComplete, editable = _ref.editable, activeDescendantId = _ref.activeDescendantId, value = _ref.value, maxLength = _ref.maxLength, _onKeyDown = _ref.onKeyDown, _onMouseDown = _ref.onMouseDown, _onChange = _ref.onChange, onPaste = _ref.onPaste, _onCompositionStart = _ref.onCompositionStart, _onCompositionEnd = _ref.onCompositionEnd, open = _ref.open, attrs = _ref.attrs;
    var inputNode = inputElement || /* @__PURE__ */ React65.createElement("input", null);
    var _inputNode = inputNode, originRef = _inputNode.ref, originProps = _inputNode.props;
    var onOriginKeyDown = originProps.onKeyDown, onOriginChange = originProps.onChange, onOriginMouseDown = originProps.onMouseDown, onOriginCompositionStart = originProps.onCompositionStart, onOriginCompositionEnd = originProps.onCompositionEnd, style3 = originProps.style;
    warning5(!("maxLength" in inputNode.props), "Passing 'maxLength' to input element directly may not work because input in BaseSelect is controlled.");
    inputNode = /* @__PURE__ */ React65.cloneElement(inputNode, _objectSpread2(_objectSpread2(_objectSpread2({
      type: "search"
    }, originProps), {}, {
      // Override over origin props
      id: id2,
      ref: composeRef(ref, originRef),
      disabled,
      tabIndex,
      autoComplete: autoComplete || "off",
      autoFocus,
      className: (0, import_classnames14.default)("".concat(prefixCls, "-selection-search-input"), (_inputNode2 = inputNode) === null || _inputNode2 === void 0 ? void 0 : (_inputNode2$props = _inputNode2.props) === null || _inputNode2$props === void 0 ? void 0 : _inputNode2$props.className),
      role: "combobox",
      "aria-expanded": open,
      "aria-haspopup": "listbox",
      "aria-owns": "".concat(id2, "_list"),
      "aria-autocomplete": "list",
      "aria-controls": "".concat(id2, "_list"),
      "aria-activedescendant": activeDescendantId
    }, attrs), {}, {
      value: editable ? value : "",
      maxLength,
      readOnly: !editable,
      unselectable: !editable ? "on" : null,
      style: _objectSpread2(_objectSpread2({}, style3), {}, {
        opacity: editable ? null : 0
      }),
      onKeyDown: function onKeyDown3(event) {
        _onKeyDown(event);
        if (onOriginKeyDown) {
          onOriginKeyDown(event);
        }
      },
      onMouseDown: function onMouseDown(event) {
        _onMouseDown(event);
        if (onOriginMouseDown) {
          onOriginMouseDown(event);
        }
      },
      onChange: function onChange(event) {
        _onChange(event);
        if (onOriginChange) {
          onOriginChange(event);
        }
      },
      onCompositionStart: function onCompositionStart(event) {
        _onCompositionStart(event);
        if (onOriginCompositionStart) {
          onOriginCompositionStart(event);
        }
      },
      onCompositionEnd: function onCompositionEnd(event) {
        _onCompositionEnd(event);
        if (onOriginCompositionEnd) {
          onOriginCompositionEnd(event);
        }
      },
      onPaste
    }));
    return inputNode;
  };
  var RefInput = /* @__PURE__ */ React65.forwardRef(Input);
  RefInput.displayName = "Input";
  var Input_default = RefInput;

  // node_modules/rc-select/es/hooks/useLayoutEffect.js
  var React66 = __toESM(require_react());

  // node_modules/rc-select/es/utils/commonUtil.js
  function toArray2(value) {
    if (Array.isArray(value)) {
      return value;
    }
    return value !== void 0 ? [value] : [];
  }
  var isClient = typeof window !== "undefined" && window.document && window.document.documentElement;
  var isBrowserClient = isClient;
  function hasValue2(value) {
    return value !== void 0 && value !== null;
  }
  function isTitleType(title) {
    return ["string", "number"].includes(_typeof(title));
  }
  function getTitle(item) {
    var title = void 0;
    if (item) {
      if (isTitleType(item.title)) {
        title = item.title.toString();
      } else if (isTitleType(item.label)) {
        title = item.label.toString();
      }
    }
    return title;
  }

  // node_modules/rc-select/es/hooks/useLayoutEffect.js
  function useLayoutEffect9(effect, deps) {
    if (isBrowserClient) {
      React66.useLayoutEffect(effect, deps);
    } else {
      React66.useEffect(effect, deps);
    }
  }

  // node_modules/rc-select/es/Selector/MultipleSelector.js
  function itemKey(value) {
    var _value$key;
    return (_value$key = value.key) !== null && _value$key !== void 0 ? _value$key : value.value;
  }
  var onPreventMouseDown = function onPreventMouseDown2(event) {
    event.preventDefault();
    event.stopPropagation();
  };
  var SelectSelector = function SelectSelector2(props) {
    var id2 = props.id, prefixCls = props.prefixCls, values = props.values, open = props.open, searchValue = props.searchValue, autoClearSearchValue = props.autoClearSearchValue, inputRef = props.inputRef, placeholder = props.placeholder, disabled = props.disabled, mode = props.mode, showSearch = props.showSearch, autoFocus = props.autoFocus, autoComplete = props.autoComplete, activeDescendantId = props.activeDescendantId, tabIndex = props.tabIndex, removeIcon = props.removeIcon, maxTagCount = props.maxTagCount, maxTagTextLength = props.maxTagTextLength, _props$maxTagPlacehol = props.maxTagPlaceholder, maxTagPlaceholder = _props$maxTagPlacehol === void 0 ? function(omittedValues) {
      return "+ ".concat(omittedValues.length, " ...");
    } : _props$maxTagPlacehol, tagRender = props.tagRender, onToggleOpen = props.onToggleOpen, onRemove = props.onRemove, onInputChange = props.onInputChange, onInputPaste = props.onInputPaste, onInputKeyDown = props.onInputKeyDown, onInputMouseDown = props.onInputMouseDown, onInputCompositionStart = props.onInputCompositionStart, onInputCompositionEnd = props.onInputCompositionEnd;
    var measureRef = React67.useRef(null);
    var _useState = (0, import_react24.useState)(0), _useState2 = _slicedToArray(_useState, 2), inputWidth = _useState2[0], setInputWidth = _useState2[1];
    var _useState3 = (0, import_react24.useState)(false), _useState4 = _slicedToArray(_useState3, 2), focused = _useState4[0], setFocused = _useState4[1];
    var selectionPrefixCls = "".concat(prefixCls, "-selection");
    var inputValue = open || mode === "multiple" && autoClearSearchValue === false || mode === "tags" ? searchValue : "";
    var inputEditable = mode === "tags" || mode === "multiple" && autoClearSearchValue === false || showSearch && (open || focused);
    useLayoutEffect9(function() {
      setInputWidth(measureRef.current.scrollWidth);
    }, [inputValue]);
    function defaultRenderSelector(item, content, itemDisabled, closable, onClose2) {
      return /* @__PURE__ */ React67.createElement("span", {
        className: (0, import_classnames15.default)("".concat(selectionPrefixCls, "-item"), _defineProperty({}, "".concat(selectionPrefixCls, "-item-disabled"), itemDisabled)),
        title: getTitle(item)
      }, /* @__PURE__ */ React67.createElement("span", {
        className: "".concat(selectionPrefixCls, "-item-content")
      }, content), closable && /* @__PURE__ */ React67.createElement(TransBtn_default, {
        className: "".concat(selectionPrefixCls, "-item-remove"),
        onMouseDown: onPreventMouseDown,
        onClick: onClose2,
        customizeIcon: removeIcon
      }, "\xD7"));
    }
    function customizeRenderSelector(value, content, itemDisabled, closable, onClose2) {
      var onMouseDown = function onMouseDown2(e3) {
        onPreventMouseDown(e3);
        onToggleOpen(!open);
      };
      return /* @__PURE__ */ React67.createElement("span", {
        onMouseDown
      }, tagRender({
        label: content,
        value,
        disabled: itemDisabled,
        closable,
        onClose: onClose2
      }));
    }
    function renderItem(valueItem) {
      var itemDisabled = valueItem.disabled, label = valueItem.label, value = valueItem.value;
      var closable = !disabled && !itemDisabled;
      var displayLabel = label;
      if (typeof maxTagTextLength === "number") {
        if (typeof label === "string" || typeof label === "number") {
          var strLabel = String(displayLabel);
          if (strLabel.length > maxTagTextLength) {
            displayLabel = "".concat(strLabel.slice(0, maxTagTextLength), "...");
          }
        }
      }
      var onClose2 = function onClose3(event) {
        if (event)
          event.stopPropagation();
        onRemove(valueItem);
      };
      return typeof tagRender === "function" ? customizeRenderSelector(value, displayLabel, itemDisabled, closable, onClose2) : defaultRenderSelector(valueItem, displayLabel, itemDisabled, closable, onClose2);
    }
    function renderRest(omittedValues) {
      var content = typeof maxTagPlaceholder === "function" ? maxTagPlaceholder(omittedValues) : maxTagPlaceholder;
      return defaultRenderSelector({
        title: content
      }, content, false);
    }
    var inputNode = /* @__PURE__ */ React67.createElement("div", {
      className: "".concat(selectionPrefixCls, "-search"),
      style: {
        width: inputWidth
      },
      onFocus: function onFocus() {
        setFocused(true);
      },
      onBlur: function onBlur() {
        setFocused(false);
      }
    }, /* @__PURE__ */ React67.createElement(Input_default, {
      ref: inputRef,
      open,
      prefixCls,
      id: id2,
      inputElement: null,
      disabled,
      autoFocus,
      autoComplete,
      editable: inputEditable,
      activeDescendantId,
      value: inputValue,
      onKeyDown: onInputKeyDown,
      onMouseDown: onInputMouseDown,
      onChange: onInputChange,
      onPaste: onInputPaste,
      onCompositionStart: onInputCompositionStart,
      onCompositionEnd: onInputCompositionEnd,
      tabIndex,
      attrs: pickAttrs(props, true)
    }), /* @__PURE__ */ React67.createElement("span", {
      ref: measureRef,
      className: "".concat(selectionPrefixCls, "-search-mirror"),
      "aria-hidden": true
    }, inputValue, "\xA0"));
    var selectionNode = /* @__PURE__ */ React67.createElement(es_default5, {
      prefixCls: "".concat(selectionPrefixCls, "-overflow"),
      data: values,
      renderItem,
      renderRest,
      suffix: inputNode,
      itemKey,
      maxCount: maxTagCount
    });
    return /* @__PURE__ */ React67.createElement(React67.Fragment, null, selectionNode, !values.length && !inputValue && /* @__PURE__ */ React67.createElement("span", {
      className: "".concat(selectionPrefixCls, "-placeholder")
    }, placeholder));
  };
  var MultipleSelector_default = SelectSelector;

  // node_modules/rc-select/es/Selector/SingleSelector.js
  var React68 = __toESM(require_react());
  var SingleSelector = function SingleSelector2(props) {
    var inputElement = props.inputElement, prefixCls = props.prefixCls, id2 = props.id, inputRef = props.inputRef, disabled = props.disabled, autoFocus = props.autoFocus, autoComplete = props.autoComplete, activeDescendantId = props.activeDescendantId, mode = props.mode, open = props.open, values = props.values, placeholder = props.placeholder, tabIndex = props.tabIndex, showSearch = props.showSearch, searchValue = props.searchValue, activeValue = props.activeValue, maxLength = props.maxLength, onInputKeyDown = props.onInputKeyDown, onInputMouseDown = props.onInputMouseDown, onInputChange = props.onInputChange, onInputPaste = props.onInputPaste, onInputCompositionStart = props.onInputCompositionStart, onInputCompositionEnd = props.onInputCompositionEnd;
    var _React$useState = React68.useState(false), _React$useState2 = _slicedToArray(_React$useState, 2), inputChanged = _React$useState2[0], setInputChanged = _React$useState2[1];
    var combobox = mode === "combobox";
    var inputEditable = combobox || showSearch;
    var item = values[0];
    var inputValue = searchValue || "";
    if (combobox && activeValue && !inputChanged) {
      inputValue = activeValue;
    }
    React68.useEffect(function() {
      if (combobox) {
        setInputChanged(false);
      }
    }, [combobox, activeValue]);
    var hasTextInput = mode !== "combobox" && !open && !showSearch ? false : !!inputValue;
    var title = getTitle(item);
    var renderPlaceholder = function renderPlaceholder2() {
      if (item) {
        return null;
      }
      var hiddenStyle = hasTextInput ? {
        visibility: "hidden"
      } : void 0;
      return /* @__PURE__ */ React68.createElement("span", {
        className: "".concat(prefixCls, "-selection-placeholder"),
        style: hiddenStyle
      }, placeholder);
    };
    return /* @__PURE__ */ React68.createElement(React68.Fragment, null, /* @__PURE__ */ React68.createElement("span", {
      className: "".concat(prefixCls, "-selection-search")
    }, /* @__PURE__ */ React68.createElement(Input_default, {
      ref: inputRef,
      prefixCls,
      id: id2,
      open,
      inputElement,
      disabled,
      autoFocus,
      autoComplete,
      editable: inputEditable,
      activeDescendantId,
      value: inputValue,
      onKeyDown: onInputKeyDown,
      onMouseDown: onInputMouseDown,
      onChange: function onChange(e3) {
        setInputChanged(true);
        onInputChange(e3);
      },
      onPaste: onInputPaste,
      onCompositionStart: onInputCompositionStart,
      onCompositionEnd: onInputCompositionEnd,
      tabIndex,
      attrs: pickAttrs(props, true),
      maxLength: combobox ? maxLength : void 0
    })), !combobox && item ? /* @__PURE__ */ React68.createElement("span", {
      className: "".concat(prefixCls, "-selection-item"),
      title,
      style: hasTextInput ? {
        visibility: "hidden"
      } : void 0
    }, item.label) : null, renderPlaceholder());
  };
  var SingleSelector_default = SingleSelector;

  // node_modules/rc-select/es/utils/keyUtil.js
  function isValidateOpenKey(currentKeyCode) {
    return ![
      // System function button
      KeyCode_default.ESC,
      KeyCode_default.SHIFT,
      KeyCode_default.BACKSPACE,
      KeyCode_default.TAB,
      KeyCode_default.WIN_KEY,
      KeyCode_default.ALT,
      KeyCode_default.META,
      KeyCode_default.WIN_KEY_RIGHT,
      KeyCode_default.CTRL,
      KeyCode_default.SEMICOLON,
      KeyCode_default.EQUALS,
      KeyCode_default.CAPS_LOCK,
      KeyCode_default.CONTEXT_MENU,
      // F1-F12
      KeyCode_default.F1,
      KeyCode_default.F2,
      KeyCode_default.F3,
      KeyCode_default.F4,
      KeyCode_default.F5,
      KeyCode_default.F6,
      KeyCode_default.F7,
      KeyCode_default.F8,
      KeyCode_default.F9,
      KeyCode_default.F10,
      KeyCode_default.F11,
      KeyCode_default.F12
    ].includes(currentKeyCode);
  }

  // node_modules/rc-select/es/Selector/index.js
  var Selector = function Selector2(props, ref) {
    var inputRef = (0, import_react25.useRef)(null);
    var compositionStatusRef = (0, import_react25.useRef)(false);
    var prefixCls = props.prefixCls, open = props.open, mode = props.mode, showSearch = props.showSearch, tokenWithEnter = props.tokenWithEnter, autoClearSearchValue = props.autoClearSearchValue, onSearch = props.onSearch, onSearchSubmit = props.onSearchSubmit, onToggleOpen = props.onToggleOpen, onInputKeyDown = props.onInputKeyDown, domRef = props.domRef;
    React69.useImperativeHandle(ref, function() {
      return {
        focus: function focus() {
          inputRef.current.focus();
        },
        blur: function blur() {
          inputRef.current.blur();
        }
      };
    });
    var _useLock = useLock(0), _useLock2 = _slicedToArray(_useLock, 2), getInputMouseDown = _useLock2[0], setInputMouseDown = _useLock2[1];
    var onInternalInputKeyDown = function onInternalInputKeyDown2(event) {
      var which = event.which;
      if (which === KeyCode_default.UP || which === KeyCode_default.DOWN) {
        event.preventDefault();
      }
      if (onInputKeyDown) {
        onInputKeyDown(event);
      }
      if (which === KeyCode_default.ENTER && mode === "tags" && !compositionStatusRef.current && !open) {
        onSearchSubmit === null || onSearchSubmit === void 0 ? void 0 : onSearchSubmit(event.target.value);
      }
      if (isValidateOpenKey(which)) {
        onToggleOpen(true);
      }
    };
    var onInternalInputMouseDown = function onInternalInputMouseDown2() {
      setInputMouseDown(true);
    };
    var pastedTextRef = (0, import_react25.useRef)(null);
    var triggerOnSearch = function triggerOnSearch2(value) {
      if (onSearch(value, true, compositionStatusRef.current) !== false) {
        onToggleOpen(true);
      }
    };
    var onInputCompositionStart = function onInputCompositionStart2() {
      compositionStatusRef.current = true;
    };
    var onInputCompositionEnd = function onInputCompositionEnd2(e3) {
      compositionStatusRef.current = false;
      if (mode !== "combobox") {
        triggerOnSearch(e3.target.value);
      }
    };
    var onInputChange = function onInputChange2(event) {
      var value = event.target.value;
      if (tokenWithEnter && pastedTextRef.current && /[\r\n]/.test(pastedTextRef.current)) {
        var replacedText = pastedTextRef.current.replace(/[\r\n]+$/, "").replace(/\r\n/g, " ").replace(/[\r\n]/g, " ");
        value = value.replace(replacedText, pastedTextRef.current);
      }
      pastedTextRef.current = null;
      triggerOnSearch(value);
    };
    var onInputPaste = function onInputPaste2(e3) {
      var clipboardData = e3.clipboardData;
      var value = clipboardData.getData("text");
      pastedTextRef.current = value;
    };
    var onClick = function onClick2(_ref) {
      var target = _ref.target;
      if (target !== inputRef.current) {
        var isIE = document.body.style.msTouchAction !== void 0;
        if (isIE) {
          setTimeout(function() {
            inputRef.current.focus();
          });
        } else {
          inputRef.current.focus();
        }
      }
    };
    var onMouseDown = function onMouseDown2(event) {
      var inputMouseDown = getInputMouseDown();
      if (event.target !== inputRef.current && !inputMouseDown && mode !== "combobox") {
        event.preventDefault();
      }
      if (mode !== "combobox" && (!showSearch || !inputMouseDown) || !open) {
        if (open && autoClearSearchValue !== false) {
          onSearch("", true, false);
        }
        onToggleOpen();
      }
    };
    var sharedProps = {
      inputRef,
      onInputKeyDown: onInternalInputKeyDown,
      onInputMouseDown: onInternalInputMouseDown,
      onInputChange,
      onInputPaste,
      onInputCompositionStart,
      onInputCompositionEnd
    };
    var selectNode = mode === "multiple" || mode === "tags" ? /* @__PURE__ */ React69.createElement(MultipleSelector_default, _extends({}, props, sharedProps)) : /* @__PURE__ */ React69.createElement(SingleSelector_default, _extends({}, props, sharedProps));
    return /* @__PURE__ */ React69.createElement("div", {
      ref: domRef,
      className: "".concat(prefixCls, "-selector"),
      onClick,
      onMouseDown
    }, selectNode);
  };
  var ForwardSelector = /* @__PURE__ */ React69.forwardRef(Selector);
  ForwardSelector.displayName = "Selector";
  var Selector_default = ForwardSelector;

  // node_modules/rc-select/es/SelectTrigger.js
  var React79 = __toESM(require_react());

  // node_modules/rc-trigger/es/index.js
  var React78 = __toESM(require_react());
  var import_react_dom7 = __toESM(require_react_dom());

  // node_modules/rc-util/es/Portal.js
  var import_react26 = __toESM(require_react());
  var import_react_dom6 = __toESM(require_react_dom());
  var Portal = /* @__PURE__ */ (0, import_react26.forwardRef)(function(props, ref) {
    var didUpdate = props.didUpdate, getContainer3 = props.getContainer, children = props.children;
    var parentRef = (0, import_react26.useRef)();
    var containerRef = (0, import_react26.useRef)();
    (0, import_react26.useImperativeHandle)(ref, function() {
      return {};
    });
    var initRef = (0, import_react26.useRef)(false);
    if (!initRef.current && canUseDom()) {
      containerRef.current = getContainer3();
      parentRef.current = containerRef.current.parentNode;
      initRef.current = true;
    }
    (0, import_react26.useEffect)(function() {
      didUpdate === null || didUpdate === void 0 ? void 0 : didUpdate(props);
    });
    (0, import_react26.useEffect)(function() {
      if (containerRef.current.parentNode === null && parentRef.current !== null) {
        parentRef.current.appendChild(containerRef.current);
      }
      return function() {
        var _containerRef$current, _containerRef$current2;
        (_containerRef$current = containerRef.current) === null || _containerRef$current === void 0 ? void 0 : (_containerRef$current2 = _containerRef$current.parentNode) === null || _containerRef$current2 === void 0 ? void 0 : _containerRef$current2.removeChild(containerRef.current);
      };
    }, []);
    return containerRef.current ? /* @__PURE__ */ import_react_dom6.default.createPortal(children, containerRef.current) : null;
  });
  var Portal_default = Portal;

  // node_modules/rc-trigger/es/index.js
  var import_classnames19 = __toESM(require_classnames());

  // node_modules/rc-trigger/es/utils/alignUtil.js
  function isPointsEq(a1, a2, isAlignPoint) {
    if (isAlignPoint) {
      return a1[0] === a2[0];
    }
    return a1[0] === a2[0] && a1[1] === a2[1];
  }
  function getAlignFromPlacement(builtinPlacements, placementStr, align) {
    var baseAlign = builtinPlacements[placementStr] || {};
    return _objectSpread2(_objectSpread2({}, baseAlign), align);
  }
  function getAlignPopupClassName(builtinPlacements, prefixCls, align, isAlignPoint) {
    var points = align.points;
    var placements4 = Object.keys(builtinPlacements);
    for (var i3 = 0; i3 < placements4.length; i3 += 1) {
      var placement = placements4[i3];
      if (isPointsEq(builtinPlacements[placement].points, points, isAlignPoint)) {
        return "".concat(prefixCls, "-placement-").concat(placement);
      }
    }
    return "";
  }

  // node_modules/rc-trigger/es/Popup/index.js
  var React76 = __toESM(require_react());
  var import_react31 = __toESM(require_react());

  // node_modules/rc-trigger/es/Popup/Mask.js
  var React70 = __toESM(require_react());
  var import_classnames16 = __toESM(require_classnames());

  // node_modules/rc-trigger/es/utils/legacyUtil.js
  function getMotion(_ref) {
    var prefixCls = _ref.prefixCls, motion2 = _ref.motion, animation = _ref.animation, transitionName2 = _ref.transitionName;
    if (motion2) {
      return motion2;
    }
    if (animation) {
      return {
        motionName: "".concat(prefixCls, "-").concat(animation)
      };
    }
    if (transitionName2) {
      return {
        motionName: transitionName2
      };
    }
    return null;
  }

  // node_modules/rc-trigger/es/Popup/Mask.js
  function Mask(props) {
    var prefixCls = props.prefixCls, visible = props.visible, zIndex = props.zIndex, mask = props.mask, maskMotion = props.maskMotion, maskAnimation = props.maskAnimation, maskTransitionName = props.maskTransitionName;
    if (!mask) {
      return null;
    }
    var motion2 = {};
    if (maskMotion || maskTransitionName || maskAnimation) {
      motion2 = _objectSpread2({
        motionAppear: true
      }, getMotion({
        motion: maskMotion,
        prefixCls,
        transitionName: maskTransitionName,
        animation: maskAnimation
      }));
    }
    return /* @__PURE__ */ React70.createElement(es_default3, _extends({}, motion2, {
      visible,
      removeOnLeave: true
    }), function(_ref) {
      var className = _ref.className;
      return /* @__PURE__ */ React70.createElement("div", {
        style: {
          zIndex
        },
        className: (0, import_classnames16.default)("".concat(prefixCls, "-mask"), className)
      });
    });
  }

  // node_modules/rc-trigger/es/Popup/PopupInner.js
  var React74 = __toESM(require_react());
  var import_react30 = __toESM(require_react());

  // node_modules/dom-align/dist-web/index.js
  function ownKeys2(object4, enumerableOnly) {
    var keys2 = Object.keys(object4);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object4);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object4, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread22(target) {
    for (var i3 = 1; i3 < arguments.length; i3++) {
      var source = null != arguments[i3] ? arguments[i3] : {};
      i3 % 2 ? ownKeys2(Object(source), true).forEach(function(key2) {
        _defineProperty2(target, key2, source[key2]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key2) {
        Object.defineProperty(target, key2, Object.getOwnPropertyDescriptor(source, key2));
      });
    }
    return target;
  }
  function _typeof2(obj) {
    "@babel/helpers - typeof";
    return _typeof2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
      return typeof obj2;
    } : function(obj2) {
      return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    }, _typeof2(obj);
  }
  function _defineProperty2(obj, key2, value) {
    if (key2 in obj) {
      Object.defineProperty(obj, key2, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key2] = value;
    }
    return obj;
  }
  var vendorPrefix;
  var jsCssMap = {
    Webkit: "-webkit-",
    Moz: "-moz-",
    // IE did it wrong again ...
    ms: "-ms-",
    O: "-o-"
  };
  function getVendorPrefix() {
    if (vendorPrefix !== void 0) {
      return vendorPrefix;
    }
    vendorPrefix = "";
    var style3 = document.createElement("p").style;
    var testProp = "Transform";
    for (var key2 in jsCssMap) {
      if (key2 + testProp in style3) {
        vendorPrefix = key2;
      }
    }
    return vendorPrefix;
  }
  function getTransitionName2() {
    return getVendorPrefix() ? "".concat(getVendorPrefix(), "TransitionProperty") : "transitionProperty";
  }
  function getTransformName() {
    return getVendorPrefix() ? "".concat(getVendorPrefix(), "Transform") : "transform";
  }
  function setTransitionProperty(node, value) {
    var name = getTransitionName2();
    if (name) {
      node.style[name] = value;
      if (name !== "transitionProperty") {
        node.style.transitionProperty = value;
      }
    }
  }
  function setTransform(node, value) {
    var name = getTransformName();
    if (name) {
      node.style[name] = value;
      if (name !== "transform") {
        node.style.transform = value;
      }
    }
  }
  function getTransitionProperty(node) {
    return node.style.transitionProperty || node.style[getTransitionName2()];
  }
  function getTransformXY(node) {
    var style3 = window.getComputedStyle(node, null);
    var transform = style3.getPropertyValue("transform") || style3.getPropertyValue(getTransformName());
    if (transform && transform !== "none") {
      var matrix = transform.replace(/[^0-9\-.,]/g, "").split(",");
      return {
        x: parseFloat(matrix[12] || matrix[4], 0),
        y: parseFloat(matrix[13] || matrix[5], 0)
      };
    }
    return {
      x: 0,
      y: 0
    };
  }
  var matrix2d = /matrix\((.*)\)/;
  var matrix3d = /matrix3d\((.*)\)/;
  function setTransformXY(node, xy) {
    var style3 = window.getComputedStyle(node, null);
    var transform = style3.getPropertyValue("transform") || style3.getPropertyValue(getTransformName());
    if (transform && transform !== "none") {
      var arr;
      var match2d = transform.match(matrix2d);
      if (match2d) {
        match2d = match2d[1];
        arr = match2d.split(",").map(function(item) {
          return parseFloat(item, 10);
        });
        arr[4] = xy.x;
        arr[5] = xy.y;
        setTransform(node, "matrix(".concat(arr.join(","), ")"));
      } else {
        var match3d = transform.match(matrix3d)[1];
        arr = match3d.split(",").map(function(item) {
          return parseFloat(item, 10);
        });
        arr[12] = xy.x;
        arr[13] = xy.y;
        setTransform(node, "matrix3d(".concat(arr.join(","), ")"));
      }
    } else {
      setTransform(node, "translateX(".concat(xy.x, "px) translateY(").concat(xy.y, "px) translateZ(0)"));
    }
  }
  var RE_NUM = /[\-+]?(?:\d*\.|)\d+(?:[eE][\-+]?\d+|)/.source;
  var getComputedStyleX;
  function forceRelayout(elem) {
    var originalStyle = elem.style.display;
    elem.style.display = "none";
    elem.offsetHeight;
    elem.style.display = originalStyle;
  }
  function css(el, name, v2) {
    var value = v2;
    if (_typeof2(name) === "object") {
      for (var i3 in name) {
        if (name.hasOwnProperty(i3)) {
          css(el, i3, name[i3]);
        }
      }
      return void 0;
    }
    if (typeof value !== "undefined") {
      if (typeof value === "number") {
        value = "".concat(value, "px");
      }
      el.style[name] = value;
      return void 0;
    }
    return getComputedStyleX(el, name);
  }
  function getClientPosition(elem) {
    var box;
    var x2;
    var y2;
    var doc = elem.ownerDocument;
    var body = doc.body;
    var docElem = doc && doc.documentElement;
    box = elem.getBoundingClientRect();
    x2 = Math.floor(box.left);
    y2 = Math.floor(box.top);
    x2 -= docElem.clientLeft || body.clientLeft || 0;
    y2 -= docElem.clientTop || body.clientTop || 0;
    return {
      left: x2,
      top: y2
    };
  }
  function getScroll2(w2, top) {
    var ret = w2["page".concat(top ? "Y" : "X", "Offset")];
    var method4 = "scroll".concat(top ? "Top" : "Left");
    if (typeof ret !== "number") {
      var d2 = w2.document;
      ret = d2.documentElement[method4];
      if (typeof ret !== "number") {
        ret = d2.body[method4];
      }
    }
    return ret;
  }
  function getScrollLeft(w2) {
    return getScroll2(w2);
  }
  function getScrollTop(w2) {
    return getScroll2(w2, true);
  }
  function getOffset(el) {
    var pos = getClientPosition(el);
    var doc = el.ownerDocument;
    var w2 = doc.defaultView || doc.parentWindow;
    pos.left += getScrollLeft(w2);
    pos.top += getScrollTop(w2);
    return pos;
  }
  function isWindow2(obj) {
    return obj !== null && obj !== void 0 && obj == obj.window;
  }
  function getDocument(node) {
    if (isWindow2(node)) {
      return node.document;
    }
    if (node.nodeType === 9) {
      return node;
    }
    return node.ownerDocument;
  }
  function _getComputedStyle(elem, name, cs) {
    var computedStyle = cs;
    var val = "";
    var d2 = getDocument(elem);
    computedStyle = computedStyle || d2.defaultView.getComputedStyle(elem, null);
    if (computedStyle) {
      val = computedStyle.getPropertyValue(name) || computedStyle[name];
    }
    return val;
  }
  var _RE_NUM_NO_PX = new RegExp("^(".concat(RE_NUM, ")(?!px)[a-z%]+$"), "i");
  var RE_POS = /^(top|right|bottom|left)$/;
  var CURRENT_STYLE = "currentStyle";
  var RUNTIME_STYLE = "runtimeStyle";
  var LEFT = "left";
  var PX = "px";
  function _getComputedStyleIE(elem, name) {
    var ret = elem[CURRENT_STYLE] && elem[CURRENT_STYLE][name];
    if (_RE_NUM_NO_PX.test(ret) && !RE_POS.test(name)) {
      var style3 = elem.style;
      var left = style3[LEFT];
      var rsLeft = elem[RUNTIME_STYLE][LEFT];
      elem[RUNTIME_STYLE][LEFT] = elem[CURRENT_STYLE][LEFT];
      style3[LEFT] = name === "fontSize" ? "1em" : ret || 0;
      ret = style3.pixelLeft + PX;
      style3[LEFT] = left;
      elem[RUNTIME_STYLE][LEFT] = rsLeft;
    }
    return ret === "" ? "auto" : ret;
  }
  if (typeof window !== "undefined") {
    getComputedStyleX = window.getComputedStyle ? _getComputedStyle : _getComputedStyleIE;
  }
  function getOffsetDirection(dir, option) {
    if (dir === "left") {
      return option.useCssRight ? "right" : dir;
    }
    return option.useCssBottom ? "bottom" : dir;
  }
  function oppositeOffsetDirection(dir) {
    if (dir === "left") {
      return "right";
    } else if (dir === "right") {
      return "left";
    } else if (dir === "top") {
      return "bottom";
    } else if (dir === "bottom") {
      return "top";
    }
  }
  function setLeftTop(elem, offset4, option) {
    if (css(elem, "position") === "static") {
      elem.style.position = "relative";
    }
    var presetH = -999;
    var presetV = -999;
    var horizontalProperty = getOffsetDirection("left", option);
    var verticalProperty = getOffsetDirection("top", option);
    var oppositeHorizontalProperty = oppositeOffsetDirection(horizontalProperty);
    var oppositeVerticalProperty = oppositeOffsetDirection(verticalProperty);
    if (horizontalProperty !== "left") {
      presetH = 999;
    }
    if (verticalProperty !== "top") {
      presetV = 999;
    }
    var originalTransition = "";
    var originalOffset = getOffset(elem);
    if ("left" in offset4 || "top" in offset4) {
      originalTransition = getTransitionProperty(elem) || "";
      setTransitionProperty(elem, "none");
    }
    if ("left" in offset4) {
      elem.style[oppositeHorizontalProperty] = "";
      elem.style[horizontalProperty] = "".concat(presetH, "px");
    }
    if ("top" in offset4) {
      elem.style[oppositeVerticalProperty] = "";
      elem.style[verticalProperty] = "".concat(presetV, "px");
    }
    forceRelayout(elem);
    var old = getOffset(elem);
    var originalStyle = {};
    for (var key2 in offset4) {
      if (offset4.hasOwnProperty(key2)) {
        var dir = getOffsetDirection(key2, option);
        var preset = key2 === "left" ? presetH : presetV;
        var off = originalOffset[key2] - old[key2];
        if (dir === key2) {
          originalStyle[dir] = preset + off;
        } else {
          originalStyle[dir] = preset - off;
        }
      }
    }
    css(elem, originalStyle);
    forceRelayout(elem);
    if ("left" in offset4 || "top" in offset4) {
      setTransitionProperty(elem, originalTransition);
    }
    var ret = {};
    for (var _key in offset4) {
      if (offset4.hasOwnProperty(_key)) {
        var _dir = getOffsetDirection(_key, option);
        var _off = offset4[_key] - originalOffset[_key];
        if (_key === _dir) {
          ret[_dir] = originalStyle[_dir] + _off;
        } else {
          ret[_dir] = originalStyle[_dir] - _off;
        }
      }
    }
    css(elem, ret);
  }
  function setTransform$1(elem, offset4) {
    var originalOffset = getOffset(elem);
    var originalXY = getTransformXY(elem);
    var resultXY = {
      x: originalXY.x,
      y: originalXY.y
    };
    if ("left" in offset4) {
      resultXY.x = originalXY.x + offset4.left - originalOffset.left;
    }
    if ("top" in offset4) {
      resultXY.y = originalXY.y + offset4.top - originalOffset.top;
    }
    setTransformXY(elem, resultXY);
  }
  function setOffset(elem, offset4, option) {
    if (option.ignoreShake) {
      var oriOffset = getOffset(elem);
      var oLeft = oriOffset.left.toFixed(0);
      var oTop = oriOffset.top.toFixed(0);
      var tLeft = offset4.left.toFixed(0);
      var tTop = offset4.top.toFixed(0);
      if (oLeft === tLeft && oTop === tTop) {
        return;
      }
    }
    if (option.useCssRight || option.useCssBottom) {
      setLeftTop(elem, offset4, option);
    } else if (option.useCssTransform && getTransformName() in document.body.style) {
      setTransform$1(elem, offset4);
    } else {
      setLeftTop(elem, offset4, option);
    }
  }
  function each(arr, fn2) {
    for (var i3 = 0; i3 < arr.length; i3++) {
      fn2(arr[i3]);
    }
  }
  function isBorderBoxFn(elem) {
    return getComputedStyleX(elem, "boxSizing") === "border-box";
  }
  var BOX_MODELS = ["margin", "border", "padding"];
  var CONTENT_INDEX = -1;
  var PADDING_INDEX = 2;
  var BORDER_INDEX = 1;
  var MARGIN_INDEX = 0;
  function swap(elem, options, callback) {
    var old = {};
    var style3 = elem.style;
    var name;
    for (name in options) {
      if (options.hasOwnProperty(name)) {
        old[name] = style3[name];
        style3[name] = options[name];
      }
    }
    callback.call(elem);
    for (name in options) {
      if (options.hasOwnProperty(name)) {
        style3[name] = old[name];
      }
    }
  }
  function getPBMWidth(elem, props, which) {
    var value = 0;
    var prop;
    var j2;
    var i3;
    for (j2 = 0; j2 < props.length; j2++) {
      prop = props[j2];
      if (prop) {
        for (i3 = 0; i3 < which.length; i3++) {
          var cssProp = void 0;
          if (prop === "border") {
            cssProp = "".concat(prop).concat(which[i3], "Width");
          } else {
            cssProp = prop + which[i3];
          }
          value += parseFloat(getComputedStyleX(elem, cssProp)) || 0;
        }
      }
    }
    return value;
  }
  var domUtils = {
    getParent: function getParent(element) {
      var parent = element;
      do {
        if (parent.nodeType === 11 && parent.host) {
          parent = parent.host;
        } else {
          parent = parent.parentNode;
        }
      } while (parent && parent.nodeType !== 1 && parent.nodeType !== 9);
      return parent;
    }
  };
  each(["Width", "Height"], function(name) {
    domUtils["doc".concat(name)] = function(refWin) {
      var d2 = refWin.document;
      return Math.max(
        // firefox chrome documentElement.scrollHeight< body.scrollHeight
        // ie standard mode : documentElement.scrollHeight> body.scrollHeight
        d2.documentElement["scroll".concat(name)],
        // quirks : documentElement.scrollHeight 最大等于可视窗口多一点？
        d2.body["scroll".concat(name)],
        domUtils["viewport".concat(name)](d2)
      );
    };
    domUtils["viewport".concat(name)] = function(win) {
      var prop = "client".concat(name);
      var doc = win.document;
      var body = doc.body;
      var documentElement = doc.documentElement;
      var documentElementProp = documentElement[prop];
      return doc.compatMode === "CSS1Compat" && documentElementProp || body && body[prop] || documentElementProp;
    };
  });
  function getWH(elem, name, ex) {
    var extra = ex;
    if (isWindow2(elem)) {
      return name === "width" ? domUtils.viewportWidth(elem) : domUtils.viewportHeight(elem);
    } else if (elem.nodeType === 9) {
      return name === "width" ? domUtils.docWidth(elem) : domUtils.docHeight(elem);
    }
    var which = name === "width" ? ["Left", "Right"] : ["Top", "Bottom"];
    var borderBoxValue = name === "width" ? Math.floor(elem.getBoundingClientRect().width) : Math.floor(elem.getBoundingClientRect().height);
    var isBorderBox = isBorderBoxFn(elem);
    var cssBoxValue = 0;
    if (borderBoxValue === null || borderBoxValue === void 0 || borderBoxValue <= 0) {
      borderBoxValue = void 0;
      cssBoxValue = getComputedStyleX(elem, name);
      if (cssBoxValue === null || cssBoxValue === void 0 || Number(cssBoxValue) < 0) {
        cssBoxValue = elem.style[name] || 0;
      }
      cssBoxValue = Math.floor(parseFloat(cssBoxValue)) || 0;
    }
    if (extra === void 0) {
      extra = isBorderBox ? BORDER_INDEX : CONTENT_INDEX;
    }
    var borderBoxValueOrIsBorderBox = borderBoxValue !== void 0 || isBorderBox;
    var val = borderBoxValue || cssBoxValue;
    if (extra === CONTENT_INDEX) {
      if (borderBoxValueOrIsBorderBox) {
        return val - getPBMWidth(elem, ["border", "padding"], which);
      }
      return cssBoxValue;
    } else if (borderBoxValueOrIsBorderBox) {
      if (extra === BORDER_INDEX) {
        return val;
      }
      return val + (extra === PADDING_INDEX ? -getPBMWidth(elem, ["border"], which) : getPBMWidth(elem, ["margin"], which));
    }
    return cssBoxValue + getPBMWidth(elem, BOX_MODELS.slice(extra), which);
  }
  var cssShow = {
    position: "absolute",
    visibility: "hidden",
    display: "block"
  };
  function getWHIgnoreDisplay() {
    for (var _len = arguments.length, args = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {
      args[_key2] = arguments[_key2];
    }
    var val;
    var elem = args[0];
    if (elem.offsetWidth !== 0) {
      val = getWH.apply(void 0, args);
    } else {
      swap(elem, cssShow, function() {
        val = getWH.apply(void 0, args);
      });
    }
    return val;
  }
  each(["width", "height"], function(name) {
    var first = name.charAt(0).toUpperCase() + name.slice(1);
    domUtils["outer".concat(first)] = function(el, includeMargin) {
      return el && getWHIgnoreDisplay(el, name, includeMargin ? MARGIN_INDEX : BORDER_INDEX);
    };
    var which = name === "width" ? ["Left", "Right"] : ["Top", "Bottom"];
    domUtils[name] = function(elem, v2) {
      var val = v2;
      if (val !== void 0) {
        if (elem) {
          var isBorderBox = isBorderBoxFn(elem);
          if (isBorderBox) {
            val += getPBMWidth(elem, ["padding", "border"], which);
          }
          return css(elem, name, val);
        }
        return void 0;
      }
      return elem && getWHIgnoreDisplay(elem, name, CONTENT_INDEX);
    };
  });
  function mix2(to, from) {
    for (var i3 in from) {
      if (from.hasOwnProperty(i3)) {
        to[i3] = from[i3];
      }
    }
    return to;
  }
  var utils = {
    getWindow: function getWindow(node) {
      if (node && node.document && node.setTimeout) {
        return node;
      }
      var doc = node.ownerDocument || node;
      return doc.defaultView || doc.parentWindow;
    },
    getDocument,
    offset: function offset(el, value, option) {
      if (typeof value !== "undefined") {
        setOffset(el, value, option || {});
      } else {
        return getOffset(el);
      }
    },
    isWindow: isWindow2,
    each,
    css,
    clone: function clone(obj) {
      var i3;
      var ret = {};
      for (i3 in obj) {
        if (obj.hasOwnProperty(i3)) {
          ret[i3] = obj[i3];
        }
      }
      var overflow = obj.overflow;
      if (overflow) {
        for (i3 in obj) {
          if (obj.hasOwnProperty(i3)) {
            ret.overflow[i3] = obj.overflow[i3];
          }
        }
      }
      return ret;
    },
    mix: mix2,
    getWindowScrollLeft: function getWindowScrollLeft(w2) {
      return getScrollLeft(w2);
    },
    getWindowScrollTop: function getWindowScrollTop(w2) {
      return getScrollTop(w2);
    },
    merge: function merge2() {
      var ret = {};
      for (var i3 = 0; i3 < arguments.length; i3++) {
        utils.mix(ret, i3 < 0 || arguments.length <= i3 ? void 0 : arguments[i3]);
      }
      return ret;
    },
    viewportWidth: 0,
    viewportHeight: 0
  };
  mix2(utils, domUtils);
  var getParent2 = utils.getParent;
  function getOffsetParent(element) {
    if (utils.isWindow(element) || element.nodeType === 9) {
      return null;
    }
    var doc = utils.getDocument(element);
    var body = doc.body;
    var parent;
    var positionStyle = utils.css(element, "position");
    var skipStatic = positionStyle === "fixed" || positionStyle === "absolute";
    if (!skipStatic) {
      return element.nodeName.toLowerCase() === "html" ? null : getParent2(element);
    }
    for (parent = getParent2(element); parent && parent !== body && parent.nodeType !== 9; parent = getParent2(parent)) {
      positionStyle = utils.css(parent, "position");
      if (positionStyle !== "static") {
        return parent;
      }
    }
    return null;
  }
  var getParent$1 = utils.getParent;
  function isAncestorFixed(element) {
    if (utils.isWindow(element) || element.nodeType === 9) {
      return false;
    }
    var doc = utils.getDocument(element);
    var body = doc.body;
    var parent = null;
    for (
      parent = getParent$1(element);
      // 修复元素位于 document.documentElement 下导致崩溃问题
      parent && parent !== body && parent !== doc;
      parent = getParent$1(parent)
    ) {
      var positionStyle = utils.css(parent, "position");
      if (positionStyle === "fixed") {
        return true;
      }
    }
    return false;
  }
  function getVisibleRectForElement(element, alwaysByViewport) {
    var visibleRect = {
      left: 0,
      right: Infinity,
      top: 0,
      bottom: Infinity
    };
    var el = getOffsetParent(element);
    var doc = utils.getDocument(element);
    var win = doc.defaultView || doc.parentWindow;
    var body = doc.body;
    var documentElement = doc.documentElement;
    while (el) {
      if ((navigator.userAgent.indexOf("MSIE") === -1 || el.clientWidth !== 0) && // body may have overflow set on it, yet we still get the entire
      // viewport. In some browsers, el.offsetParent may be
      // document.documentElement, so check for that too.
      el !== body && el !== documentElement && utils.css(el, "overflow") !== "visible") {
        var pos = utils.offset(el);
        pos.left += el.clientLeft;
        pos.top += el.clientTop;
        visibleRect.top = Math.max(visibleRect.top, pos.top);
        visibleRect.right = Math.min(
          visibleRect.right,
          // consider area without scrollBar
          pos.left + el.clientWidth
        );
        visibleRect.bottom = Math.min(visibleRect.bottom, pos.top + el.clientHeight);
        visibleRect.left = Math.max(visibleRect.left, pos.left);
      } else if (el === body || el === documentElement) {
        break;
      }
      el = getOffsetParent(el);
    }
    var originalPosition = null;
    if (!utils.isWindow(element) && element.nodeType !== 9) {
      originalPosition = element.style.position;
      var position = utils.css(element, "position");
      if (position === "absolute") {
        element.style.position = "fixed";
      }
    }
    var scrollX = utils.getWindowScrollLeft(win);
    var scrollY = utils.getWindowScrollTop(win);
    var viewportWidth = utils.viewportWidth(win);
    var viewportHeight = utils.viewportHeight(win);
    var documentWidth = documentElement.scrollWidth;
    var documentHeight = documentElement.scrollHeight;
    var bodyStyle = window.getComputedStyle(body);
    if (bodyStyle.overflowX === "hidden") {
      documentWidth = win.innerWidth;
    }
    if (bodyStyle.overflowY === "hidden") {
      documentHeight = win.innerHeight;
    }
    if (element.style) {
      element.style.position = originalPosition;
    }
    if (alwaysByViewport || isAncestorFixed(element)) {
      visibleRect.left = Math.max(visibleRect.left, scrollX);
      visibleRect.top = Math.max(visibleRect.top, scrollY);
      visibleRect.right = Math.min(visibleRect.right, scrollX + viewportWidth);
      visibleRect.bottom = Math.min(visibleRect.bottom, scrollY + viewportHeight);
    } else {
      var maxVisibleWidth = Math.max(documentWidth, scrollX + viewportWidth);
      visibleRect.right = Math.min(visibleRect.right, maxVisibleWidth);
      var maxVisibleHeight = Math.max(documentHeight, scrollY + viewportHeight);
      visibleRect.bottom = Math.min(visibleRect.bottom, maxVisibleHeight);
    }
    return visibleRect.top >= 0 && visibleRect.left >= 0 && visibleRect.bottom > visibleRect.top && visibleRect.right > visibleRect.left ? visibleRect : null;
  }
  function adjustForViewport(elFuturePos, elRegion, visibleRect, overflow) {
    var pos = utils.clone(elFuturePos);
    var size = {
      width: elRegion.width,
      height: elRegion.height
    };
    if (overflow.adjustX && pos.left < visibleRect.left) {
      pos.left = visibleRect.left;
    }
    if (overflow.resizeWidth && pos.left >= visibleRect.left && pos.left + size.width > visibleRect.right) {
      size.width -= pos.left + size.width - visibleRect.right;
    }
    if (overflow.adjustX && pos.left + size.width > visibleRect.right) {
      pos.left = Math.max(visibleRect.right - size.width, visibleRect.left);
    }
    if (overflow.adjustY && pos.top < visibleRect.top) {
      pos.top = visibleRect.top;
    }
    if (overflow.resizeHeight && pos.top >= visibleRect.top && pos.top + size.height > visibleRect.bottom) {
      size.height -= pos.top + size.height - visibleRect.bottom;
    }
    if (overflow.adjustY && pos.top + size.height > visibleRect.bottom) {
      pos.top = Math.max(visibleRect.bottom - size.height, visibleRect.top);
    }
    return utils.mix(pos, size);
  }
  function getRegion(node) {
    var offset4;
    var w2;
    var h2;
    if (!utils.isWindow(node) && node.nodeType !== 9) {
      offset4 = utils.offset(node);
      w2 = utils.outerWidth(node);
      h2 = utils.outerHeight(node);
    } else {
      var win = utils.getWindow(node);
      offset4 = {
        left: utils.getWindowScrollLeft(win),
        top: utils.getWindowScrollTop(win)
      };
      w2 = utils.viewportWidth(win);
      h2 = utils.viewportHeight(win);
    }
    offset4.width = w2;
    offset4.height = h2;
    return offset4;
  }
  function getAlignOffset(region, align) {
    var V = align.charAt(0);
    var H2 = align.charAt(1);
    var w2 = region.width;
    var h2 = region.height;
    var x2 = region.left;
    var y2 = region.top;
    if (V === "c") {
      y2 += h2 / 2;
    } else if (V === "b") {
      y2 += h2;
    }
    if (H2 === "c") {
      x2 += w2 / 2;
    } else if (H2 === "r") {
      x2 += w2;
    }
    return {
      left: x2,
      top: y2
    };
  }
  function getElFuturePos(elRegion, refNodeRegion, points, offset4, targetOffset4) {
    var p1 = getAlignOffset(refNodeRegion, points[1]);
    var p2 = getAlignOffset(elRegion, points[0]);
    var diff = [p2.left - p1.left, p2.top - p1.top];
    return {
      left: Math.round(elRegion.left - diff[0] + offset4[0] - targetOffset4[0]),
      top: Math.round(elRegion.top - diff[1] + offset4[1] - targetOffset4[1])
    };
  }
  function isFailX(elFuturePos, elRegion, visibleRect) {
    return elFuturePos.left < visibleRect.left || elFuturePos.left + elRegion.width > visibleRect.right;
  }
  function isFailY(elFuturePos, elRegion, visibleRect) {
    return elFuturePos.top < visibleRect.top || elFuturePos.top + elRegion.height > visibleRect.bottom;
  }
  function isCompleteFailX(elFuturePos, elRegion, visibleRect) {
    return elFuturePos.left > visibleRect.right || elFuturePos.left + elRegion.width < visibleRect.left;
  }
  function isCompleteFailY(elFuturePos, elRegion, visibleRect) {
    return elFuturePos.top > visibleRect.bottom || elFuturePos.top + elRegion.height < visibleRect.top;
  }
  function flip(points, reg, map) {
    var ret = [];
    utils.each(points, function(p2) {
      ret.push(p2.replace(reg, function(m2) {
        return map[m2];
      }));
    });
    return ret;
  }
  function flipOffset(offset4, index2) {
    offset4[index2] = -offset4[index2];
    return offset4;
  }
  function convertOffset(str, offsetLen) {
    var n4;
    if (/%$/.test(str)) {
      n4 = parseInt(str.substring(0, str.length - 1), 10) / 100 * offsetLen;
    } else {
      n4 = parseInt(str, 10);
    }
    return n4 || 0;
  }
  function normalizeOffset(offset4, el) {
    offset4[0] = convertOffset(offset4[0], el.width);
    offset4[1] = convertOffset(offset4[1], el.height);
  }
  function doAlign(el, tgtRegion, align, isTgtRegionVisible) {
    var points = align.points;
    var offset4 = align.offset || [0, 0];
    var targetOffset4 = align.targetOffset || [0, 0];
    var overflow = align.overflow;
    var source = align.source || el;
    offset4 = [].concat(offset4);
    targetOffset4 = [].concat(targetOffset4);
    overflow = overflow || {};
    var newOverflowCfg = {};
    var fail = 0;
    var alwaysByViewport = !!(overflow && overflow.alwaysByViewport);
    var visibleRect = getVisibleRectForElement(source, alwaysByViewport);
    var elRegion = getRegion(source);
    normalizeOffset(offset4, elRegion);
    normalizeOffset(targetOffset4, tgtRegion);
    var elFuturePos = getElFuturePos(elRegion, tgtRegion, points, offset4, targetOffset4);
    var newElRegion = utils.merge(elRegion, elFuturePos);
    if (visibleRect && (overflow.adjustX || overflow.adjustY) && isTgtRegionVisible) {
      if (overflow.adjustX) {
        if (isFailX(elFuturePos, elRegion, visibleRect)) {
          var newPoints = flip(points, /[lr]/gi, {
            l: "r",
            r: "l"
          });
          var newOffset = flipOffset(offset4, 0);
          var newTargetOffset = flipOffset(targetOffset4, 0);
          var newElFuturePos = getElFuturePos(elRegion, tgtRegion, newPoints, newOffset, newTargetOffset);
          if (!isCompleteFailX(newElFuturePos, elRegion, visibleRect)) {
            fail = 1;
            points = newPoints;
            offset4 = newOffset;
            targetOffset4 = newTargetOffset;
          }
        }
      }
      if (overflow.adjustY) {
        if (isFailY(elFuturePos, elRegion, visibleRect)) {
          var _newPoints = flip(points, /[tb]/gi, {
            t: "b",
            b: "t"
          });
          var _newOffset = flipOffset(offset4, 1);
          var _newTargetOffset = flipOffset(targetOffset4, 1);
          var _newElFuturePos = getElFuturePos(elRegion, tgtRegion, _newPoints, _newOffset, _newTargetOffset);
          if (!isCompleteFailY(_newElFuturePos, elRegion, visibleRect)) {
            fail = 1;
            points = _newPoints;
            offset4 = _newOffset;
            targetOffset4 = _newTargetOffset;
          }
        }
      }
      if (fail) {
        elFuturePos = getElFuturePos(elRegion, tgtRegion, points, offset4, targetOffset4);
        utils.mix(newElRegion, elFuturePos);
      }
      var isStillFailX = isFailX(elFuturePos, elRegion, visibleRect);
      var isStillFailY = isFailY(elFuturePos, elRegion, visibleRect);
      if (isStillFailX || isStillFailY) {
        var _newPoints2 = points;
        if (isStillFailX) {
          _newPoints2 = flip(points, /[lr]/gi, {
            l: "r",
            r: "l"
          });
        }
        if (isStillFailY) {
          _newPoints2 = flip(points, /[tb]/gi, {
            t: "b",
            b: "t"
          });
        }
        points = _newPoints2;
        offset4 = align.offset || [0, 0];
        targetOffset4 = align.targetOffset || [0, 0];
      }
      newOverflowCfg.adjustX = overflow.adjustX && isStillFailX;
      newOverflowCfg.adjustY = overflow.adjustY && isStillFailY;
      if (newOverflowCfg.adjustX || newOverflowCfg.adjustY) {
        newElRegion = adjustForViewport(elFuturePos, elRegion, visibleRect, newOverflowCfg);
      }
    }
    if (newElRegion.width !== elRegion.width) {
      utils.css(source, "width", utils.width(source) + newElRegion.width - elRegion.width);
    }
    if (newElRegion.height !== elRegion.height) {
      utils.css(source, "height", utils.height(source) + newElRegion.height - elRegion.height);
    }
    utils.offset(source, {
      left: newElRegion.left,
      top: newElRegion.top
    }, {
      useCssRight: align.useCssRight,
      useCssBottom: align.useCssBottom,
      useCssTransform: align.useCssTransform,
      ignoreShake: align.ignoreShake
    });
    return {
      points,
      offset: offset4,
      targetOffset: targetOffset4,
      overflow: newOverflowCfg
    };
  }
  function isOutOfVisibleRect(target, alwaysByViewport) {
    var visibleRect = getVisibleRectForElement(target, alwaysByViewport);
    var targetRegion = getRegion(target);
    return !visibleRect || targetRegion.left + targetRegion.width <= visibleRect.left || targetRegion.top + targetRegion.height <= visibleRect.top || targetRegion.left >= visibleRect.right || targetRegion.top >= visibleRect.bottom;
  }
  function alignElement(el, refNode, align) {
    var target = align.target || refNode;
    var refNodeRegion = getRegion(target);
    var isTargetNotOutOfVisible = !isOutOfVisibleRect(target, align.overflow && align.overflow.alwaysByViewport);
    return doAlign(el, refNodeRegion, align, isTargetNotOutOfVisible);
  }
  alignElement.__getOffsetParent = getOffsetParent;
  alignElement.__getVisibleRectForElement = getVisibleRectForElement;
  function alignPoint(el, tgtPoint, align) {
    var pageX;
    var pageY;
    var doc = utils.getDocument(el);
    var win = doc.defaultView || doc.parentWindow;
    var scrollX = utils.getWindowScrollLeft(win);
    var scrollY = utils.getWindowScrollTop(win);
    var viewportWidth = utils.viewportWidth(win);
    var viewportHeight = utils.viewportHeight(win);
    if ("pageX" in tgtPoint) {
      pageX = tgtPoint.pageX;
    } else {
      pageX = scrollX + tgtPoint.clientX;
    }
    if ("pageY" in tgtPoint) {
      pageY = tgtPoint.pageY;
    } else {
      pageY = scrollY + tgtPoint.clientY;
    }
    var tgtRegion = {
      left: pageX,
      top: pageY,
      width: 0,
      height: 0
    };
    var pointInView = pageX >= 0 && pageX <= scrollX + viewportWidth && pageY >= 0 && pageY <= scrollY + viewportHeight;
    var points = [align.points[0], "cc"];
    return doAlign(el, tgtRegion, _objectSpread22(_objectSpread22({}, align), {}, {
      points
    }), pointInView);
  }

  // node_modules/rc-util/es/isEqual.js
  function isEqual(obj1, obj2) {
    var shallow = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
    var refSet = /* @__PURE__ */ new Set();
    function deepEqual(a2, b2) {
      var level = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1;
      var circular = refSet.has(a2);
      warning_default(!circular, "Warning: There may be circular references");
      if (circular) {
        return false;
      }
      if (a2 === b2) {
        return true;
      }
      if (shallow && level > 1) {
        return false;
      }
      refSet.add(a2);
      var newLevel = level + 1;
      if (Array.isArray(a2)) {
        if (!Array.isArray(b2) || a2.length !== b2.length) {
          return false;
        }
        for (var i3 = 0; i3 < a2.length; i3++) {
          if (!deepEqual(a2[i3], b2[i3], newLevel)) {
            return false;
          }
        }
        return true;
      }
      if (a2 && b2 && _typeof(a2) === "object" && _typeof(b2) === "object") {
        var keys2 = Object.keys(a2);
        if (keys2.length !== Object.keys(b2).length) {
          return false;
        }
        return keys2.every(function(key2) {
          return deepEqual(a2[key2], b2[key2], newLevel);
        });
      }
      return false;
    }
    return deepEqual(obj1, obj2);
  }
  var isEqual_default = isEqual;

  // node_modules/rc-util/es/Dom/isVisible.js
  var isVisible_default = function(element) {
    if (!element) {
      return false;
    }
    if (element instanceof Element) {
      if (element.offsetParent) {
        return true;
      }
      if (element.getBBox) {
        var _getBBox = element.getBBox(), width = _getBBox.width, height = _getBBox.height;
        if (width || height) {
          return true;
        }
      }
      if (element.getBoundingClientRect) {
        var _element$getBoundingC = element.getBoundingClientRect(), _width = _element$getBoundingC.width, _height = _element$getBoundingC.height;
        if (_width || _height) {
          return true;
        }
      }
    }
    return false;
  };

  // node_modules/rc-align/es/Align.js
  var import_react28 = __toESM(require_react());

  // node_modules/rc-align/es/hooks/useBuffer.js
  var import_react27 = __toESM(require_react());
  var useBuffer_default = function(callback, buffer) {
    var calledRef = import_react27.default.useRef(false);
    var timeoutRef = import_react27.default.useRef(null);
    function cancelTrigger() {
      window.clearTimeout(timeoutRef.current);
    }
    function trigger(force) {
      cancelTrigger();
      if (!calledRef.current || force === true) {
        if (callback(force) === false) {
          return;
        }
        calledRef.current = true;
        timeoutRef.current = window.setTimeout(function() {
          calledRef.current = false;
        }, buffer);
      } else {
        timeoutRef.current = window.setTimeout(function() {
          calledRef.current = false;
          trigger();
        }, buffer);
      }
    }
    return [trigger, function() {
      calledRef.current = false;
      cancelTrigger();
    }];
  };

  // node_modules/rc-align/es/util.js
  function isSamePoint(prev, next) {
    if (prev === next)
      return true;
    if (!prev || !next)
      return false;
    if ("pageX" in next && "pageY" in next) {
      return prev.pageX === next.pageX && prev.pageY === next.pageY;
    }
    if ("clientX" in next && "clientY" in next) {
      return prev.clientX === next.clientX && prev.clientY === next.clientY;
    }
    return false;
  }
  function restoreFocus(activeElement, container) {
    if (activeElement !== document.activeElement && contains(container, activeElement) && typeof activeElement.focus === "function") {
      activeElement.focus();
    }
  }
  function monitorResize(element, callback) {
    var prevWidth = null;
    var prevHeight = null;
    function onResize2(_ref) {
      var _ref2 = _slicedToArray(_ref, 1), target = _ref2[0].target;
      if (!document.documentElement.contains(target))
        return;
      var _target$getBoundingCl = target.getBoundingClientRect(), width = _target$getBoundingCl.width, height = _target$getBoundingCl.height;
      var fixedWidth = Math.floor(width);
      var fixedHeight = Math.floor(height);
      if (prevWidth !== fixedWidth || prevHeight !== fixedHeight) {
        Promise.resolve().then(function() {
          callback({
            width: fixedWidth,
            height: fixedHeight
          });
        });
      }
      prevWidth = fixedWidth;
      prevHeight = fixedHeight;
    }
    var resizeObserver2 = new ResizeObserver_es_default(onResize2);
    if (element) {
      resizeObserver2.observe(element);
    }
    return function() {
      resizeObserver2.disconnect();
    };
  }

  // node_modules/rc-align/es/Align.js
  function getElement(func) {
    if (typeof func !== "function")
      return null;
    return func();
  }
  function getPoint(point) {
    if (_typeof(point) !== "object" || !point)
      return null;
    return point;
  }
  var Align = function Align2(_ref, ref) {
    var children = _ref.children, disabled = _ref.disabled, target = _ref.target, align = _ref.align, onAlign = _ref.onAlign, monitorWindowResize = _ref.monitorWindowResize, _ref$monitorBufferTim = _ref.monitorBufferTime, monitorBufferTime = _ref$monitorBufferTim === void 0 ? 0 : _ref$monitorBufferTim;
    var cacheRef = import_react28.default.useRef({});
    var nodeRef = import_react28.default.useRef();
    var childNode = import_react28.default.Children.only(children);
    var forceAlignPropsRef = import_react28.default.useRef({});
    forceAlignPropsRef.current.disabled = disabled;
    forceAlignPropsRef.current.target = target;
    forceAlignPropsRef.current.align = align;
    forceAlignPropsRef.current.onAlign = onAlign;
    var _useBuffer = useBuffer_default(function() {
      var _forceAlignPropsRef$c = forceAlignPropsRef.current, latestDisabled = _forceAlignPropsRef$c.disabled, latestTarget = _forceAlignPropsRef$c.target, latestAlign = _forceAlignPropsRef$c.align, latestOnAlign = _forceAlignPropsRef$c.onAlign;
      var source = nodeRef.current;
      if (!latestDisabled && latestTarget && source) {
        var _result;
        var _element = getElement(latestTarget);
        var _point = getPoint(latestTarget);
        cacheRef.current.element = _element;
        cacheRef.current.point = _point;
        cacheRef.current.align = latestAlign;
        var _document = document, activeElement = _document.activeElement;
        if (_element && isVisible_default(_element)) {
          _result = alignElement(source, _element, latestAlign);
        } else if (_point) {
          _result = alignPoint(source, _point, latestAlign);
        }
        restoreFocus(activeElement, source);
        if (latestOnAlign && _result) {
          latestOnAlign(source, _result);
        }
        return true;
      }
      return false;
    }, monitorBufferTime), _useBuffer2 = _slicedToArray(_useBuffer, 2), _forceAlign = _useBuffer2[0], cancelForceAlign = _useBuffer2[1];
    var _React$useState = import_react28.default.useState(), _React$useState2 = _slicedToArray(_React$useState, 2), element = _React$useState2[0], setElement = _React$useState2[1];
    var _React$useState3 = import_react28.default.useState(), _React$useState4 = _slicedToArray(_React$useState3, 2), point = _React$useState4[0], setPoint = _React$useState4[1];
    useLayoutEffect_default(function() {
      setElement(getElement(target));
      setPoint(getPoint(target));
    });
    import_react28.default.useEffect(function() {
      if (cacheRef.current.element !== element || !isSamePoint(cacheRef.current.point, point) || !isEqual_default(cacheRef.current.align, align)) {
        _forceAlign();
      }
    });
    import_react28.default.useEffect(function() {
      var cancelFn = monitorResize(nodeRef.current, _forceAlign);
      return cancelFn;
    }, [nodeRef.current]);
    import_react28.default.useEffect(function() {
      var cancelFn = monitorResize(element, _forceAlign);
      return cancelFn;
    }, [element]);
    import_react28.default.useEffect(function() {
      if (!disabled) {
        _forceAlign();
      } else {
        cancelForceAlign();
      }
    }, [disabled]);
    import_react28.default.useEffect(function() {
      if (monitorWindowResize) {
        var cancelFn = addEventListenerWrap(window, "resize", _forceAlign);
        return cancelFn.remove;
      }
    }, [monitorWindowResize]);
    import_react28.default.useEffect(function() {
      return function() {
        cancelForceAlign();
      };
    }, []);
    import_react28.default.useImperativeHandle(ref, function() {
      return {
        forceAlign: function forceAlign() {
          return _forceAlign(true);
        }
      };
    });
    if (/* @__PURE__ */ import_react28.default.isValidElement(childNode)) {
      childNode = /* @__PURE__ */ import_react28.default.cloneElement(childNode, {
        ref: composeRef(childNode.ref, nodeRef)
      });
    }
    return childNode;
  };
  var RcAlign = /* @__PURE__ */ import_react28.default.forwardRef(Align);
  RcAlign.displayName = "Align";
  var Align_default = RcAlign;

  // node_modules/rc-align/es/index.js
  var es_default6 = Align_default;

  // node_modules/rc-trigger/es/Popup/PopupInner.js
  var import_classnames17 = __toESM(require_classnames());

  // node_modules/rc-trigger/es/Popup/useVisibleStatus.js
  var import_react29 = __toESM(require_react());
  var StatusQueue = ["measure", "alignPre", "align", null, "motion"];
  var useVisibleStatus_default = function(visible, doMeasure) {
    var _useState = useSafeState(null), _useState2 = _slicedToArray(_useState, 2), status = _useState2[0], setInternalStatus = _useState2[1];
    var rafRef = (0, import_react29.useRef)();
    function setStatus(nextStatus) {
      setInternalStatus(nextStatus, true);
    }
    function cancelRaf() {
      raf_default.cancel(rafRef.current);
    }
    function goNextStatus(callback) {
      cancelRaf();
      rafRef.current = raf_default(function() {
        setStatus(function(prev) {
          switch (status) {
            case "align":
              return "motion";
            case "motion":
              return "stable";
            default:
          }
          return prev;
        });
        callback === null || callback === void 0 ? void 0 : callback();
      });
    }
    (0, import_react29.useEffect)(function() {
      setStatus("measure");
    }, [visible]);
    (0, import_react29.useEffect)(function() {
      switch (status) {
        case "measure":
          doMeasure();
          break;
        default:
      }
      if (status) {
        rafRef.current = raf_default(/* @__PURE__ */ _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime().mark(function _callee() {
          var index2, nextStatus;
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  index2 = StatusQueue.indexOf(status);
                  nextStatus = StatusQueue[index2 + 1];
                  if (nextStatus && index2 !== -1) {
                    setStatus(nextStatus);
                  }
                case 3:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        })));
      }
    }, [status]);
    (0, import_react29.useEffect)(function() {
      return function() {
        cancelRaf();
      };
    }, []);
    return [status, goNextStatus];
  };

  // node_modules/rc-trigger/es/Popup/useStretchStyle.js
  var React73 = __toESM(require_react());
  var useStretchStyle_default = function(stretch) {
    var _React$useState = React73.useState({
      width: 0,
      height: 0
    }), _React$useState2 = _slicedToArray(_React$useState, 2), targetSize = _React$useState2[0], setTargetSize = _React$useState2[1];
    function measureStretch(element) {
      var tgtWidth = element.offsetWidth, tgtHeight = element.offsetHeight;
      var _element$getBoundingC = element.getBoundingClientRect(), width = _element$getBoundingC.width, height = _element$getBoundingC.height;
      if (Math.abs(tgtWidth - width) < 1 && Math.abs(tgtHeight - height) < 1) {
        tgtWidth = width;
        tgtHeight = height;
      }
      setTargetSize({
        width: tgtWidth,
        height: tgtHeight
      });
    }
    var style3 = React73.useMemo(function() {
      var sizeStyle = {};
      if (stretch) {
        var width = targetSize.width, height = targetSize.height;
        if (stretch.indexOf("height") !== -1 && height) {
          sizeStyle.height = height;
        } else if (stretch.indexOf("minHeight") !== -1 && height) {
          sizeStyle.minHeight = height;
        }
        if (stretch.indexOf("width") !== -1 && width) {
          sizeStyle.width = width;
        } else if (stretch.indexOf("minWidth") !== -1 && width) {
          sizeStyle.minWidth = width;
        }
      }
      return sizeStyle;
    }, [stretch, targetSize]);
    return [style3, measureStretch];
  };

  // node_modules/rc-trigger/es/Popup/PopupInner.js
  var PopupInner = /* @__PURE__ */ React74.forwardRef(function(props, ref) {
    var visible = props.visible, prefixCls = props.prefixCls, className = props.className, style3 = props.style, children = props.children, zIndex = props.zIndex, stretch = props.stretch, destroyPopupOnHide = props.destroyPopupOnHide, forceRender = props.forceRender, align = props.align, point = props.point, getRootDomNode = props.getRootDomNode, getClassNameFromAlign = props.getClassNameFromAlign, onAlign = props.onAlign, onMouseEnter = props.onMouseEnter, onMouseLeave = props.onMouseLeave, onMouseDown = props.onMouseDown, onTouchStart = props.onTouchStart, onClick = props.onClick;
    var alignRef = (0, import_react30.useRef)();
    var elementRef = (0, import_react30.useRef)();
    var _useState = (0, import_react30.useState)(), _useState2 = _slicedToArray(_useState, 2), alignedClassName = _useState2[0], setAlignedClassName = _useState2[1];
    var _useStretchStyle = useStretchStyle_default(stretch), _useStretchStyle2 = _slicedToArray(_useStretchStyle, 2), stretchStyle = _useStretchStyle2[0], measureStretchStyle = _useStretchStyle2[1];
    function doMeasure() {
      if (stretch) {
        measureStretchStyle(getRootDomNode());
      }
    }
    var _useVisibleStatus = useVisibleStatus_default(visible, doMeasure), _useVisibleStatus2 = _slicedToArray(_useVisibleStatus, 2), status = _useVisibleStatus2[0], goNextStatus = _useVisibleStatus2[1];
    var _useState3 = (0, import_react30.useState)(0), _useState4 = _slicedToArray(_useState3, 2), alignTimes = _useState4[0], setAlignTimes = _useState4[1];
    var prepareResolveRef = (0, import_react30.useRef)();
    useLayoutEffect_default(function() {
      if (status === "alignPre") {
        setAlignTimes(0);
      }
    }, [status]);
    function getAlignTarget() {
      if (point) {
        return point;
      }
      return getRootDomNode;
    }
    function forceAlign() {
      var _alignRef$current;
      (_alignRef$current = alignRef.current) === null || _alignRef$current === void 0 ? void 0 : _alignRef$current.forceAlign();
    }
    function onInternalAlign(popupDomNode, matchAlign) {
      var nextAlignedClassName = getClassNameFromAlign(matchAlign);
      if (alignedClassName !== nextAlignedClassName) {
        setAlignedClassName(nextAlignedClassName);
      }
      setAlignTimes(function(val) {
        return val + 1;
      });
      if (status === "align") {
        onAlign === null || onAlign === void 0 ? void 0 : onAlign(popupDomNode, matchAlign);
      }
    }
    useLayoutEffect_default(function() {
      if (status === "align") {
        if (alignTimes < 3) {
          forceAlign();
        } else {
          goNextStatus(function() {
            var _prepareResolveRef$cu;
            (_prepareResolveRef$cu = prepareResolveRef.current) === null || _prepareResolveRef$cu === void 0 ? void 0 : _prepareResolveRef$cu.call(prepareResolveRef);
          });
        }
      }
    }, [alignTimes]);
    var motion2 = _objectSpread2({}, getMotion(props));
    ["onAppearEnd", "onEnterEnd", "onLeaveEnd"].forEach(function(eventName) {
      var originHandler = motion2[eventName];
      motion2[eventName] = function(element, event) {
        goNextStatus();
        return originHandler === null || originHandler === void 0 ? void 0 : originHandler(element, event);
      };
    });
    function onShowPrepare() {
      return new Promise(function(resolve) {
        prepareResolveRef.current = resolve;
      });
    }
    React74.useEffect(function() {
      if (!motion2.motionName && status === "motion") {
        goNextStatus();
      }
    }, [motion2.motionName, status]);
    React74.useImperativeHandle(ref, function() {
      return {
        forceAlign,
        getElement: function getElement2() {
          return elementRef.current;
        }
      };
    });
    var mergedStyle = _objectSpread2(_objectSpread2({}, stretchStyle), {}, {
      zIndex,
      opacity: status === "motion" || status === "stable" || !visible ? void 0 : 0,
      // Cannot interact with disappearing elements
      // https://github.com/ant-design/ant-design/issues/35051#issuecomment-1101340714
      pointerEvents: !visible && status !== "stable" ? "none" : void 0
    }, style3);
    var alignDisabled = true;
    if (align !== null && align !== void 0 && align.points && (status === "align" || status === "stable")) {
      alignDisabled = false;
    }
    var childNode = children;
    if (React74.Children.count(children) > 1) {
      childNode = /* @__PURE__ */ React74.createElement("div", {
        className: "".concat(prefixCls, "-content")
      }, children);
    }
    return /* @__PURE__ */ React74.createElement(es_default3, _extends({
      visible,
      ref: elementRef,
      leavedClassName: "".concat(prefixCls, "-hidden")
    }, motion2, {
      onAppearPrepare: onShowPrepare,
      onEnterPrepare: onShowPrepare,
      removeOnLeave: destroyPopupOnHide,
      forceRender
    }), function(_ref, motionRef) {
      var motionClassName = _ref.className, motionStyle = _ref.style;
      var mergedClassName = (0, import_classnames17.default)(prefixCls, className, alignedClassName, motionClassName);
      return /* @__PURE__ */ React74.createElement(es_default6, {
        target: getAlignTarget(),
        key: "popup",
        ref: alignRef,
        monitorWindowResize: true,
        disabled: alignDisabled,
        align,
        onAlign: onInternalAlign
      }, /* @__PURE__ */ React74.createElement("div", {
        ref: motionRef,
        className: mergedClassName,
        onMouseEnter,
        onMouseLeave,
        onMouseDownCapture: onMouseDown,
        onTouchStartCapture: onTouchStart,
        onClick,
        style: _objectSpread2(_objectSpread2({}, motionStyle), mergedStyle)
      }, childNode));
    });
  });
  PopupInner.displayName = "PopupInner";
  var PopupInner_default = PopupInner;

  // node_modules/rc-trigger/es/Popup/MobilePopupInner.js
  var React75 = __toESM(require_react());
  var import_classnames18 = __toESM(require_classnames());
  var MobilePopupInner = /* @__PURE__ */ React75.forwardRef(function(props, ref) {
    var prefixCls = props.prefixCls, visible = props.visible, zIndex = props.zIndex, children = props.children, _props$mobile = props.mobile;
    _props$mobile = _props$mobile === void 0 ? {} : _props$mobile;
    var popupClassName = _props$mobile.popupClassName, popupStyle = _props$mobile.popupStyle, _props$mobile$popupMo = _props$mobile.popupMotion, popupMotion = _props$mobile$popupMo === void 0 ? {} : _props$mobile$popupMo, popupRender = _props$mobile.popupRender, onClick = props.onClick;
    var elementRef = React75.useRef();
    React75.useImperativeHandle(ref, function() {
      return {
        forceAlign: function forceAlign() {
        },
        getElement: function getElement2() {
          return elementRef.current;
        }
      };
    });
    var mergedStyle = _objectSpread2({
      zIndex
    }, popupStyle);
    var childNode = children;
    if (React75.Children.count(children) > 1) {
      childNode = /* @__PURE__ */ React75.createElement("div", {
        className: "".concat(prefixCls, "-content")
      }, children);
    }
    if (popupRender) {
      childNode = popupRender(childNode);
    }
    return /* @__PURE__ */ React75.createElement(es_default3, _extends({
      visible,
      ref: elementRef,
      removeOnLeave: true
    }, popupMotion), function(_ref, motionRef) {
      var motionClassName = _ref.className, motionStyle = _ref.style;
      var mergedClassName = (0, import_classnames18.default)(prefixCls, popupClassName, motionClassName);
      return /* @__PURE__ */ React75.createElement("div", {
        ref: motionRef,
        className: mergedClassName,
        onClick,
        style: _objectSpread2(_objectSpread2({}, motionStyle), mergedStyle)
      }, childNode);
    });
  });
  MobilePopupInner.displayName = "MobilePopupInner";
  var MobilePopupInner_default = MobilePopupInner;

  // node_modules/rc-trigger/es/Popup/index.js
  var _excluded11 = ["visible", "mobile"];
  var Popup = /* @__PURE__ */ React76.forwardRef(function(_ref, ref) {
    var visible = _ref.visible, mobile = _ref.mobile, props = _objectWithoutProperties(_ref, _excluded11);
    var _useState = (0, import_react31.useState)(visible), _useState2 = _slicedToArray(_useState, 2), innerVisible = _useState2[0], serInnerVisible = _useState2[1];
    var _useState3 = (0, import_react31.useState)(false), _useState4 = _slicedToArray(_useState3, 2), inMobile = _useState4[0], setInMobile = _useState4[1];
    var cloneProps = _objectSpread2(_objectSpread2({}, props), {}, {
      visible: innerVisible
    });
    (0, import_react31.useEffect)(function() {
      serInnerVisible(visible);
      if (visible && mobile) {
        setInMobile(isMobile_default());
      }
    }, [visible, mobile]);
    var popupNode = inMobile ? /* @__PURE__ */ React76.createElement(MobilePopupInner_default, _extends({}, cloneProps, {
      mobile,
      ref
    })) : /* @__PURE__ */ React76.createElement(PopupInner_default, _extends({}, cloneProps, {
      ref
    }));
    return /* @__PURE__ */ React76.createElement("div", null, /* @__PURE__ */ React76.createElement(Mask, cloneProps), popupNode);
  });
  Popup.displayName = "Popup";
  var Popup_default = Popup;

  // node_modules/rc-trigger/es/context.js
  var React77 = __toESM(require_react());
  var TriggerContext = /* @__PURE__ */ React77.createContext(null);
  var context_default3 = TriggerContext;

  // node_modules/rc-trigger/es/index.js
  function noop2() {
  }
  function returnEmptyString() {
    return "";
  }
  function returnDocument(element) {
    if (element) {
      return element.ownerDocument;
    }
    return window.document;
  }
  var ALL_HANDLERS = ["onClick", "onMouseDown", "onTouchStart", "onMouseEnter", "onMouseLeave", "onFocus", "onBlur", "onContextMenu"];
  function generateTrigger(PortalComponent) {
    var Trigger = /* @__PURE__ */ function(_React$Component) {
      _inherits(Trigger2, _React$Component);
      var _super = _createSuper(Trigger2);
      function Trigger2(props) {
        var _this;
        _classCallCheck(this, Trigger2);
        _this = _super.call(this, props);
        _defineProperty(_assertThisInitialized(_this), "popupRef", /* @__PURE__ */ React78.createRef());
        _defineProperty(_assertThisInitialized(_this), "triggerRef", /* @__PURE__ */ React78.createRef());
        _defineProperty(_assertThisInitialized(_this), "portalContainer", void 0);
        _defineProperty(_assertThisInitialized(_this), "attachId", void 0);
        _defineProperty(_assertThisInitialized(_this), "clickOutsideHandler", void 0);
        _defineProperty(_assertThisInitialized(_this), "touchOutsideHandler", void 0);
        _defineProperty(_assertThisInitialized(_this), "contextMenuOutsideHandler1", void 0);
        _defineProperty(_assertThisInitialized(_this), "contextMenuOutsideHandler2", void 0);
        _defineProperty(_assertThisInitialized(_this), "mouseDownTimeout", void 0);
        _defineProperty(_assertThisInitialized(_this), "focusTime", void 0);
        _defineProperty(_assertThisInitialized(_this), "preClickTime", void 0);
        _defineProperty(_assertThisInitialized(_this), "preTouchTime", void 0);
        _defineProperty(_assertThisInitialized(_this), "delayTimer", void 0);
        _defineProperty(_assertThisInitialized(_this), "hasPopupMouseDown", void 0);
        _defineProperty(_assertThisInitialized(_this), "onMouseEnter", function(e3) {
          var mouseEnterDelay = _this.props.mouseEnterDelay;
          _this.fireEvents("onMouseEnter", e3);
          _this.delaySetPopupVisible(true, mouseEnterDelay, mouseEnterDelay ? null : e3);
        });
        _defineProperty(_assertThisInitialized(_this), "onMouseMove", function(e3) {
          _this.fireEvents("onMouseMove", e3);
          _this.setPoint(e3);
        });
        _defineProperty(_assertThisInitialized(_this), "onMouseLeave", function(e3) {
          _this.fireEvents("onMouseLeave", e3);
          _this.delaySetPopupVisible(false, _this.props.mouseLeaveDelay);
        });
        _defineProperty(_assertThisInitialized(_this), "onPopupMouseEnter", function() {
          _this.clearDelayTimer();
        });
        _defineProperty(_assertThisInitialized(_this), "onPopupMouseLeave", function(e3) {
          var _this$popupRef$curren;
          if (e3.relatedTarget && !e3.relatedTarget.setTimeout && contains((_this$popupRef$curren = _this.popupRef.current) === null || _this$popupRef$curren === void 0 ? void 0 : _this$popupRef$curren.getElement(), e3.relatedTarget)) {
            return;
          }
          _this.delaySetPopupVisible(false, _this.props.mouseLeaveDelay);
        });
        _defineProperty(_assertThisInitialized(_this), "onFocus", function(e3) {
          _this.fireEvents("onFocus", e3);
          _this.clearDelayTimer();
          if (_this.isFocusToShow()) {
            _this.focusTime = Date.now();
            _this.delaySetPopupVisible(true, _this.props.focusDelay);
          }
        });
        _defineProperty(_assertThisInitialized(_this), "onMouseDown", function(e3) {
          _this.fireEvents("onMouseDown", e3);
          _this.preClickTime = Date.now();
        });
        _defineProperty(_assertThisInitialized(_this), "onTouchStart", function(e3) {
          _this.fireEvents("onTouchStart", e3);
          _this.preTouchTime = Date.now();
        });
        _defineProperty(_assertThisInitialized(_this), "onBlur", function(e3) {
          _this.fireEvents("onBlur", e3);
          _this.clearDelayTimer();
          if (_this.isBlurToHide()) {
            _this.delaySetPopupVisible(false, _this.props.blurDelay);
          }
        });
        _defineProperty(_assertThisInitialized(_this), "onContextMenu", function(e3) {
          e3.preventDefault();
          _this.fireEvents("onContextMenu", e3);
          _this.setPopupVisible(true, e3);
        });
        _defineProperty(_assertThisInitialized(_this), "onContextMenuClose", function() {
          if (_this.isContextMenuToShow()) {
            _this.close();
          }
        });
        _defineProperty(_assertThisInitialized(_this), "onClick", function(event) {
          _this.fireEvents("onClick", event);
          if (_this.focusTime) {
            var preTime;
            if (_this.preClickTime && _this.preTouchTime) {
              preTime = Math.min(_this.preClickTime, _this.preTouchTime);
            } else if (_this.preClickTime) {
              preTime = _this.preClickTime;
            } else if (_this.preTouchTime) {
              preTime = _this.preTouchTime;
            }
            if (Math.abs(preTime - _this.focusTime) < 20) {
              return;
            }
            _this.focusTime = 0;
          }
          _this.preClickTime = 0;
          _this.preTouchTime = 0;
          if (_this.isClickToShow() && (_this.isClickToHide() || _this.isBlurToHide()) && event && event.preventDefault) {
            event.preventDefault();
          }
          var nextVisible = !_this.state.popupVisible;
          if (_this.isClickToHide() && !nextVisible || nextVisible && _this.isClickToShow()) {
            _this.setPopupVisible(!_this.state.popupVisible, event);
          }
        });
        _defineProperty(_assertThisInitialized(_this), "onPopupMouseDown", function() {
          _this.hasPopupMouseDown = true;
          clearTimeout(_this.mouseDownTimeout);
          _this.mouseDownTimeout = window.setTimeout(function() {
            _this.hasPopupMouseDown = false;
          }, 0);
          if (_this.context) {
            var _this$context;
            (_this$context = _this.context).onPopupMouseDown.apply(_this$context, arguments);
          }
        });
        _defineProperty(_assertThisInitialized(_this), "onDocumentClick", function(event) {
          if (_this.props.mask && !_this.props.maskClosable) {
            return;
          }
          var target = event.target;
          var root3 = _this.getRootDomNode();
          var popupNode = _this.getPopupDomNode();
          if (
            // mousedown on the target should also close popup when action is contextMenu.
            // https://github.com/ant-design/ant-design/issues/29853
            (!contains(root3, target) || _this.isContextMenuOnly()) && !contains(popupNode, target) && !_this.hasPopupMouseDown
          ) {
            _this.close();
          }
        });
        _defineProperty(_assertThisInitialized(_this), "getRootDomNode", function() {
          var getTriggerDOMNode = _this.props.getTriggerDOMNode;
          if (getTriggerDOMNode) {
            return getTriggerDOMNode(_this.triggerRef.current);
          }
          try {
            var domNode = findDOMNode(_this.triggerRef.current);
            if (domNode) {
              return domNode;
            }
          } catch (err) {
          }
          return import_react_dom7.default.findDOMNode(_assertThisInitialized(_this));
        });
        _defineProperty(_assertThisInitialized(_this), "getPopupClassNameFromAlign", function(align) {
          var className = [];
          var _this$props = _this.props, popupPlacement = _this$props.popupPlacement, builtinPlacements = _this$props.builtinPlacements, prefixCls = _this$props.prefixCls, alignPoint2 = _this$props.alignPoint, getPopupClassNameFromAlign = _this$props.getPopupClassNameFromAlign;
          if (popupPlacement && builtinPlacements) {
            className.push(getAlignPopupClassName(builtinPlacements, prefixCls, align, alignPoint2));
          }
          if (getPopupClassNameFromAlign) {
            className.push(getPopupClassNameFromAlign(align));
          }
          return className.join(" ");
        });
        _defineProperty(_assertThisInitialized(_this), "getComponent", function() {
          var _this$props2 = _this.props, prefixCls = _this$props2.prefixCls, destroyPopupOnHide = _this$props2.destroyPopupOnHide, popupClassName = _this$props2.popupClassName, onPopupAlign = _this$props2.onPopupAlign, popupMotion = _this$props2.popupMotion, popupAnimation = _this$props2.popupAnimation, popupTransitionName = _this$props2.popupTransitionName, popupStyle = _this$props2.popupStyle, mask = _this$props2.mask, maskAnimation = _this$props2.maskAnimation, maskTransitionName = _this$props2.maskTransitionName, maskMotion = _this$props2.maskMotion, zIndex = _this$props2.zIndex, popup = _this$props2.popup, stretch = _this$props2.stretch, alignPoint2 = _this$props2.alignPoint, mobile = _this$props2.mobile, forceRender = _this$props2.forceRender, onPopupClick = _this$props2.onPopupClick;
          var _this$state = _this.state, popupVisible = _this$state.popupVisible, point = _this$state.point;
          var align = _this.getPopupAlign();
          var mouseProps = {};
          if (_this.isMouseEnterToShow()) {
            mouseProps.onMouseEnter = _this.onPopupMouseEnter;
          }
          if (_this.isMouseLeaveToHide()) {
            mouseProps.onMouseLeave = _this.onPopupMouseLeave;
          }
          mouseProps.onMouseDown = _this.onPopupMouseDown;
          mouseProps.onTouchStart = _this.onPopupMouseDown;
          return /* @__PURE__ */ React78.createElement(Popup_default, _extends({
            prefixCls,
            destroyPopupOnHide,
            visible: popupVisible,
            point: alignPoint2 && point,
            className: popupClassName,
            align,
            onAlign: onPopupAlign,
            animation: popupAnimation,
            getClassNameFromAlign: _this.getPopupClassNameFromAlign
          }, mouseProps, {
            stretch,
            getRootDomNode: _this.getRootDomNode,
            style: popupStyle,
            mask,
            zIndex,
            transitionName: popupTransitionName,
            maskAnimation,
            maskTransitionName,
            maskMotion,
            ref: _this.popupRef,
            motion: popupMotion,
            mobile,
            forceRender,
            onClick: onPopupClick
          }), typeof popup === "function" ? popup() : popup);
        });
        _defineProperty(_assertThisInitialized(_this), "attachParent", function(popupContainer) {
          raf_default.cancel(_this.attachId);
          var _this$props3 = _this.props, getPopupContainer = _this$props3.getPopupContainer, getDocument2 = _this$props3.getDocument;
          var domNode = _this.getRootDomNode();
          var mountNode;
          if (!getPopupContainer) {
            mountNode = getDocument2(_this.getRootDomNode()).body;
          } else if (domNode || getPopupContainer.length === 0) {
            mountNode = getPopupContainer(domNode);
          }
          if (mountNode) {
            mountNode.appendChild(popupContainer);
          } else {
            _this.attachId = raf_default(function() {
              _this.attachParent(popupContainer);
            });
          }
        });
        _defineProperty(_assertThisInitialized(_this), "getContainer", function() {
          if (!_this.portalContainer) {
            var getDocument2 = _this.props.getDocument;
            var popupContainer = getDocument2(_this.getRootDomNode()).createElement("div");
            popupContainer.style.position = "absolute";
            popupContainer.style.top = "0";
            popupContainer.style.left = "0";
            popupContainer.style.width = "100%";
            _this.portalContainer = popupContainer;
          }
          _this.attachParent(_this.portalContainer);
          return _this.portalContainer;
        });
        _defineProperty(_assertThisInitialized(_this), "setPoint", function(point) {
          var alignPoint2 = _this.props.alignPoint;
          if (!alignPoint2 || !point)
            return;
          _this.setState({
            point: {
              pageX: point.pageX,
              pageY: point.pageY
            }
          });
        });
        _defineProperty(_assertThisInitialized(_this), "handlePortalUpdate", function() {
          if (_this.state.prevPopupVisible !== _this.state.popupVisible) {
            _this.props.afterPopupVisibleChange(_this.state.popupVisible);
          }
        });
        _defineProperty(_assertThisInitialized(_this), "triggerContextValue", {
          onPopupMouseDown: _this.onPopupMouseDown
        });
        var _popupVisible;
        if ("popupVisible" in props) {
          _popupVisible = !!props.popupVisible;
        } else {
          _popupVisible = !!props.defaultPopupVisible;
        }
        _this.state = {
          prevPopupVisible: _popupVisible,
          popupVisible: _popupVisible
        };
        ALL_HANDLERS.forEach(function(h2) {
          _this["fire".concat(h2)] = function(e3) {
            _this.fireEvents(h2, e3);
          };
        });
        return _this;
      }
      _createClass(Trigger2, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.componentDidUpdate();
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate() {
          var props = this.props;
          var state = this.state;
          if (state.popupVisible) {
            var currentDocument;
            if (!this.clickOutsideHandler && (this.isClickToHide() || this.isContextMenuToShow())) {
              currentDocument = props.getDocument(this.getRootDomNode());
              this.clickOutsideHandler = addEventListenerWrap(currentDocument, "mousedown", this.onDocumentClick);
            }
            if (!this.touchOutsideHandler) {
              currentDocument = currentDocument || props.getDocument(this.getRootDomNode());
              this.touchOutsideHandler = addEventListenerWrap(currentDocument, "touchstart", this.onDocumentClick);
            }
            if (!this.contextMenuOutsideHandler1 && this.isContextMenuToShow()) {
              currentDocument = currentDocument || props.getDocument(this.getRootDomNode());
              this.contextMenuOutsideHandler1 = addEventListenerWrap(currentDocument, "scroll", this.onContextMenuClose);
            }
            if (!this.contextMenuOutsideHandler2 && this.isContextMenuToShow()) {
              this.contextMenuOutsideHandler2 = addEventListenerWrap(window, "blur", this.onContextMenuClose);
            }
            return;
          }
          this.clearOutsideHandler();
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this.clearDelayTimer();
          this.clearOutsideHandler();
          clearTimeout(this.mouseDownTimeout);
          raf_default.cancel(this.attachId);
        }
      }, {
        key: "getPopupDomNode",
        value: function getPopupDomNode() {
          var _this$popupRef$curren2;
          return ((_this$popupRef$curren2 = this.popupRef.current) === null || _this$popupRef$curren2 === void 0 ? void 0 : _this$popupRef$curren2.getElement()) || null;
        }
      }, {
        key: "getPopupAlign",
        value: function getPopupAlign() {
          var props = this.props;
          var popupPlacement = props.popupPlacement, popupAlign = props.popupAlign, builtinPlacements = props.builtinPlacements;
          if (popupPlacement && builtinPlacements) {
            return getAlignFromPlacement(builtinPlacements, popupPlacement, popupAlign);
          }
          return popupAlign;
        }
      }, {
        key: "setPopupVisible",
        value: (
          /**
           * @param popupVisible    Show or not the popup element
           * @param event           SyntheticEvent, used for `pointAlign`
           */
          function setPopupVisible(popupVisible, event) {
            var alignPoint2 = this.props.alignPoint;
            var prevPopupVisible = this.state.popupVisible;
            this.clearDelayTimer();
            if (prevPopupVisible !== popupVisible) {
              if (!("popupVisible" in this.props)) {
                this.setState({
                  popupVisible,
                  prevPopupVisible
                });
              }
              this.props.onPopupVisibleChange(popupVisible);
            }
            if (alignPoint2 && event && popupVisible) {
              this.setPoint(event);
            }
          }
        )
      }, {
        key: "delaySetPopupVisible",
        value: function delaySetPopupVisible(visible, delayS, event) {
          var _this2 = this;
          var delay = delayS * 1e3;
          this.clearDelayTimer();
          if (delay) {
            var point = event ? {
              pageX: event.pageX,
              pageY: event.pageY
            } : null;
            this.delayTimer = window.setTimeout(function() {
              _this2.setPopupVisible(visible, point);
              _this2.clearDelayTimer();
            }, delay);
          } else {
            this.setPopupVisible(visible, event);
          }
        }
      }, {
        key: "clearDelayTimer",
        value: function clearDelayTimer() {
          if (this.delayTimer) {
            clearTimeout(this.delayTimer);
            this.delayTimer = null;
          }
        }
      }, {
        key: "clearOutsideHandler",
        value: function clearOutsideHandler() {
          if (this.clickOutsideHandler) {
            this.clickOutsideHandler.remove();
            this.clickOutsideHandler = null;
          }
          if (this.contextMenuOutsideHandler1) {
            this.contextMenuOutsideHandler1.remove();
            this.contextMenuOutsideHandler1 = null;
          }
          if (this.contextMenuOutsideHandler2) {
            this.contextMenuOutsideHandler2.remove();
            this.contextMenuOutsideHandler2 = null;
          }
          if (this.touchOutsideHandler) {
            this.touchOutsideHandler.remove();
            this.touchOutsideHandler = null;
          }
        }
      }, {
        key: "createTwoChains",
        value: function createTwoChains(event) {
          var childPros = this.props.children.props;
          var props = this.props;
          if (childPros[event] && props[event]) {
            return this["fire".concat(event)];
          }
          return childPros[event] || props[event];
        }
      }, {
        key: "isClickToShow",
        value: function isClickToShow() {
          var _this$props4 = this.props, action = _this$props4.action, showAction = _this$props4.showAction;
          return action.indexOf("click") !== -1 || showAction.indexOf("click") !== -1;
        }
      }, {
        key: "isContextMenuOnly",
        value: function isContextMenuOnly() {
          var action = this.props.action;
          return action === "contextMenu" || action.length === 1 && action[0] === "contextMenu";
        }
      }, {
        key: "isContextMenuToShow",
        value: function isContextMenuToShow() {
          var _this$props5 = this.props, action = _this$props5.action, showAction = _this$props5.showAction;
          return action.indexOf("contextMenu") !== -1 || showAction.indexOf("contextMenu") !== -1;
        }
      }, {
        key: "isClickToHide",
        value: function isClickToHide() {
          var _this$props6 = this.props, action = _this$props6.action, hideAction = _this$props6.hideAction;
          return action.indexOf("click") !== -1 || hideAction.indexOf("click") !== -1;
        }
      }, {
        key: "isMouseEnterToShow",
        value: function isMouseEnterToShow() {
          var _this$props7 = this.props, action = _this$props7.action, showAction = _this$props7.showAction;
          return action.indexOf("hover") !== -1 || showAction.indexOf("mouseEnter") !== -1;
        }
      }, {
        key: "isMouseLeaveToHide",
        value: function isMouseLeaveToHide() {
          var _this$props8 = this.props, action = _this$props8.action, hideAction = _this$props8.hideAction;
          return action.indexOf("hover") !== -1 || hideAction.indexOf("mouseLeave") !== -1;
        }
      }, {
        key: "isFocusToShow",
        value: function isFocusToShow() {
          var _this$props9 = this.props, action = _this$props9.action, showAction = _this$props9.showAction;
          return action.indexOf("focus") !== -1 || showAction.indexOf("focus") !== -1;
        }
      }, {
        key: "isBlurToHide",
        value: function isBlurToHide() {
          var _this$props10 = this.props, action = _this$props10.action, hideAction = _this$props10.hideAction;
          return action.indexOf("focus") !== -1 || hideAction.indexOf("blur") !== -1;
        }
      }, {
        key: "forcePopupAlign",
        value: function forcePopupAlign() {
          if (this.state.popupVisible) {
            var _this$popupRef$curren3;
            (_this$popupRef$curren3 = this.popupRef.current) === null || _this$popupRef$curren3 === void 0 ? void 0 : _this$popupRef$curren3.forceAlign();
          }
        }
      }, {
        key: "fireEvents",
        value: function fireEvents(type4, e3) {
          var childCallback = this.props.children.props[type4];
          if (childCallback) {
            childCallback(e3);
          }
          var callback = this.props[type4];
          if (callback) {
            callback(e3);
          }
        }
      }, {
        key: "close",
        value: function close2() {
          this.setPopupVisible(false);
        }
      }, {
        key: "render",
        value: function render2() {
          var popupVisible = this.state.popupVisible;
          var _this$props11 = this.props, children = _this$props11.children, forceRender = _this$props11.forceRender, alignPoint2 = _this$props11.alignPoint, className = _this$props11.className, autoDestroy = _this$props11.autoDestroy;
          var child = React78.Children.only(children);
          var newChildProps = {
            key: "trigger"
          };
          if (this.isContextMenuToShow()) {
            newChildProps.onContextMenu = this.onContextMenu;
          } else {
            newChildProps.onContextMenu = this.createTwoChains("onContextMenu");
          }
          if (this.isClickToHide() || this.isClickToShow()) {
            newChildProps.onClick = this.onClick;
            newChildProps.onMouseDown = this.onMouseDown;
            newChildProps.onTouchStart = this.onTouchStart;
          } else {
            newChildProps.onClick = this.createTwoChains("onClick");
            newChildProps.onMouseDown = this.createTwoChains("onMouseDown");
            newChildProps.onTouchStart = this.createTwoChains("onTouchStart");
          }
          if (this.isMouseEnterToShow()) {
            newChildProps.onMouseEnter = this.onMouseEnter;
            if (alignPoint2) {
              newChildProps.onMouseMove = this.onMouseMove;
            }
          } else {
            newChildProps.onMouseEnter = this.createTwoChains("onMouseEnter");
          }
          if (this.isMouseLeaveToHide()) {
            newChildProps.onMouseLeave = this.onMouseLeave;
          } else {
            newChildProps.onMouseLeave = this.createTwoChains("onMouseLeave");
          }
          if (this.isFocusToShow() || this.isBlurToHide()) {
            newChildProps.onFocus = this.onFocus;
            newChildProps.onBlur = this.onBlur;
          } else {
            newChildProps.onFocus = this.createTwoChains("onFocus");
            newChildProps.onBlur = this.createTwoChains("onBlur");
          }
          var childrenClassName = (0, import_classnames19.default)(child && child.props && child.props.className, className);
          if (childrenClassName) {
            newChildProps.className = childrenClassName;
          }
          var cloneProps = _objectSpread2({}, newChildProps);
          if (supportRef(child)) {
            cloneProps.ref = composeRef(this.triggerRef, child.ref);
          }
          var trigger = /* @__PURE__ */ React78.cloneElement(child, cloneProps);
          var portal;
          if (popupVisible || this.popupRef.current || forceRender) {
            portal = /* @__PURE__ */ React78.createElement(PortalComponent, {
              key: "portal",
              getContainer: this.getContainer,
              didUpdate: this.handlePortalUpdate
            }, this.getComponent());
          }
          if (!popupVisible && autoDestroy) {
            portal = null;
          }
          return /* @__PURE__ */ React78.createElement(context_default3.Provider, {
            value: this.triggerContextValue
          }, trigger, portal);
        }
      }], [{
        key: "getDerivedStateFromProps",
        value: function getDerivedStateFromProps(_ref, prevState) {
          var popupVisible = _ref.popupVisible;
          var newState = {};
          if (popupVisible !== void 0 && prevState.popupVisible !== popupVisible) {
            newState.popupVisible = popupVisible;
            newState.prevPopupVisible = prevState.popupVisible;
          }
          return newState;
        }
      }]);
      return Trigger2;
    }(React78.Component);
    _defineProperty(Trigger, "contextType", context_default3);
    _defineProperty(Trigger, "defaultProps", {
      prefixCls: "rc-trigger-popup",
      getPopupClassNameFromAlign: returnEmptyString,
      getDocument: returnDocument,
      onPopupVisibleChange: noop2,
      afterPopupVisibleChange: noop2,
      onPopupAlign: noop2,
      popupClassName: "",
      mouseEnterDelay: 0,
      mouseLeaveDelay: 0.1,
      focusDelay: 0,
      blurDelay: 0.15,
      popupStyle: {},
      destroyPopupOnHide: false,
      popupAlign: {},
      defaultPopupVisible: false,
      mask: false,
      maskClosable: true,
      action: [],
      showAction: [],
      hideAction: [],
      autoDestroy: false
    });
    return Trigger;
  }
  var es_default7 = generateTrigger(Portal_default);

  // node_modules/rc-select/es/SelectTrigger.js
  var import_classnames20 = __toESM(require_classnames());
  var _excluded12 = ["prefixCls", "disabled", "visible", "children", "popupElement", "containerWidth", "animation", "transitionName", "dropdownStyle", "dropdownClassName", "direction", "placement", "dropdownMatchSelectWidth", "dropdownRender", "dropdownAlign", "getPopupContainer", "empty", "getTriggerDOMNode", "onPopupVisibleChange", "onPopupMouseEnter"];
  var getBuiltInPlacements = function getBuiltInPlacements2(dropdownMatchSelectWidth) {
    var adjustX = dropdownMatchSelectWidth === true ? 0 : 1;
    return {
      bottomLeft: {
        points: ["tl", "bl"],
        offset: [0, 4],
        overflow: {
          adjustX,
          adjustY: 1
        }
      },
      bottomRight: {
        points: ["tr", "br"],
        offset: [0, 4],
        overflow: {
          adjustX,
          adjustY: 1
        }
      },
      topLeft: {
        points: ["bl", "tl"],
        offset: [0, -4],
        overflow: {
          adjustX,
          adjustY: 1
        }
      },
      topRight: {
        points: ["br", "tr"],
        offset: [0, -4],
        overflow: {
          adjustX,
          adjustY: 1
        }
      }
    };
  };
  var SelectTrigger = function SelectTrigger2(props, ref) {
    var prefixCls = props.prefixCls, disabled = props.disabled, visible = props.visible, children = props.children, popupElement = props.popupElement, containerWidth = props.containerWidth, animation = props.animation, transitionName2 = props.transitionName, dropdownStyle = props.dropdownStyle, dropdownClassName = props.dropdownClassName, _props$direction = props.direction, direction = _props$direction === void 0 ? "ltr" : _props$direction, placement = props.placement, dropdownMatchSelectWidth = props.dropdownMatchSelectWidth, dropdownRender = props.dropdownRender, dropdownAlign = props.dropdownAlign, getPopupContainer = props.getPopupContainer, empty = props.empty, getTriggerDOMNode = props.getTriggerDOMNode, onPopupVisibleChange = props.onPopupVisibleChange, onPopupMouseEnter = props.onPopupMouseEnter, restProps = _objectWithoutProperties(props, _excluded12);
    var dropdownPrefixCls = "".concat(prefixCls, "-dropdown");
    var popupNode = popupElement;
    if (dropdownRender) {
      popupNode = dropdownRender(popupElement);
    }
    var builtInPlacements = React79.useMemo(function() {
      return getBuiltInPlacements(dropdownMatchSelectWidth);
    }, [dropdownMatchSelectWidth]);
    var mergedTransitionName = animation ? "".concat(dropdownPrefixCls, "-").concat(animation) : transitionName2;
    var popupRef = React79.useRef(null);
    React79.useImperativeHandle(ref, function() {
      return {
        getPopupElement: function getPopupElement() {
          return popupRef.current;
        }
      };
    });
    var popupStyle = _objectSpread2({
      minWidth: containerWidth
    }, dropdownStyle);
    if (typeof dropdownMatchSelectWidth === "number") {
      popupStyle.width = dropdownMatchSelectWidth;
    } else if (dropdownMatchSelectWidth) {
      popupStyle.width = containerWidth;
    }
    return /* @__PURE__ */ React79.createElement(es_default7, _extends({}, restProps, {
      showAction: onPopupVisibleChange ? ["click"] : [],
      hideAction: onPopupVisibleChange ? ["click"] : [],
      popupPlacement: placement || (direction === "rtl" ? "bottomRight" : "bottomLeft"),
      builtinPlacements: builtInPlacements,
      prefixCls: dropdownPrefixCls,
      popupTransitionName: mergedTransitionName,
      popup: /* @__PURE__ */ React79.createElement("div", {
        ref: popupRef,
        onMouseEnter: onPopupMouseEnter
      }, popupNode),
      popupAlign: dropdownAlign,
      popupVisible: visible,
      getPopupContainer,
      popupClassName: (0, import_classnames20.default)(dropdownClassName, _defineProperty({}, "".concat(dropdownPrefixCls, "-empty"), empty)),
      popupStyle,
      getTriggerDOMNode,
      onPopupVisibleChange
    }), children);
  };
  var RefSelectTrigger = /* @__PURE__ */ React79.forwardRef(SelectTrigger);
  RefSelectTrigger.displayName = "SelectTrigger";
  var SelectTrigger_default = RefSelectTrigger;

  // node_modules/rc-select/es/utils/valueUtil.js
  function getKey(data, index2) {
    var key2 = data.key;
    var value;
    if ("value" in data) {
      value = data.value;
    }
    if (key2 !== null && key2 !== void 0) {
      return key2;
    }
    if (value !== void 0) {
      return value;
    }
    return "rc-index-key-".concat(index2);
  }
  function fillFieldNames(fieldNames, childrenAsData) {
    var _ref = fieldNames || {}, label = _ref.label, value = _ref.value, options = _ref.options;
    return {
      label: label || (childrenAsData ? "children" : "label"),
      value: value || "value",
      options: options || "options"
    };
  }
  function flattenOptions(options) {
    var _ref2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, fieldNames = _ref2.fieldNames, childrenAsData = _ref2.childrenAsData;
    var flattenList = [];
    var _fillFieldNames = fillFieldNames(fieldNames, false), fieldLabel = _fillFieldNames.label, fieldValue = _fillFieldNames.value, fieldOptions = _fillFieldNames.options;
    function dig(list, isGroupOption) {
      list.forEach(function(data) {
        var label = data[fieldLabel];
        if (isGroupOption || !(fieldOptions in data)) {
          var value = data[fieldValue];
          flattenList.push({
            key: getKey(data, flattenList.length),
            groupOption: isGroupOption,
            data,
            label,
            value
          });
        } else {
          var grpLabel = label;
          if (grpLabel === void 0 && childrenAsData) {
            grpLabel = data.label;
          }
          flattenList.push({
            key: getKey(data, flattenList.length),
            group: true,
            data,
            label: grpLabel
          });
          dig(data[fieldOptions], true);
        }
      });
    }
    dig(options, false);
    return flattenList;
  }
  function injectPropsWithOption(option) {
    var newOption = _objectSpread2({}, option);
    if (!("props" in newOption)) {
      Object.defineProperty(newOption, "props", {
        get: function get3() {
          warning_default(false, "Return type is option instead of Option instance. Please read value directly instead of reading from `props`.");
          return newOption;
        }
      });
    }
    return newOption;
  }
  function getSeparatedContent(text, tokens) {
    if (!tokens || !tokens.length) {
      return null;
    }
    var match2 = false;
    function separate(str, _ref3) {
      var _ref4 = _toArray(_ref3), token = _ref4[0], restTokens = _ref4.slice(1);
      if (!token) {
        return [str];
      }
      var list2 = str.split(token);
      match2 = match2 || list2.length > 1;
      return list2.reduce(function(prevList, unitStr) {
        return [].concat(_toConsumableArray(prevList), _toConsumableArray(separate(unitStr, restTokens)));
      }, []).filter(function(unit) {
        return unit;
      });
    }
    var list = separate(text, tokens);
    return match2 ? list : null;
  }

  // node_modules/rc-select/es/BaseSelect.js
  var _excluded13 = ["id", "prefixCls", "className", "showSearch", "tagRender", "direction", "omitDomProps", "displayValues", "onDisplayValuesChange", "emptyOptions", "notFoundContent", "onClear", "mode", "disabled", "loading", "getInputElement", "getRawInputElement", "open", "defaultOpen", "onDropdownVisibleChange", "activeValue", "onActiveValueChange", "activeDescendantId", "searchValue", "autoClearSearchValue", "onSearch", "onSearchSplit", "tokenSeparators", "allowClear", "showArrow", "inputIcon", "clearIcon", "OptionList", "animation", "transitionName", "dropdownStyle", "dropdownClassName", "dropdownMatchSelectWidth", "dropdownRender", "dropdownAlign", "placement", "getPopupContainer", "showAction", "onFocus", "onBlur", "onKeyUp", "onKeyDown", "onMouseDown"];
  var DEFAULT_OMIT_PROPS = ["value", "onChange", "removeIcon", "placeholder", "autoFocus", "maxTagCount", "maxTagTextLength", "maxTagPlaceholder", "choiceTransitionName", "onInputKeyDown", "onPopupScroll", "tabIndex"];
  function isMultiple(mode) {
    return mode === "tags" || mode === "multiple";
  }
  var BaseSelect = /* @__PURE__ */ React80.forwardRef(function(props, ref) {
    var _customizeRawInputEle, _classNames2;
    var id2 = props.id, prefixCls = props.prefixCls, className = props.className, showSearch = props.showSearch, tagRender = props.tagRender, direction = props.direction, omitDomProps = props.omitDomProps, displayValues = props.displayValues, onDisplayValuesChange = props.onDisplayValuesChange, emptyOptions = props.emptyOptions, _props$notFoundConten = props.notFoundContent, notFoundContent = _props$notFoundConten === void 0 ? "Not Found" : _props$notFoundConten, onClear = props.onClear, mode = props.mode, disabled = props.disabled, loading = props.loading, getInputElement = props.getInputElement, getRawInputElement = props.getRawInputElement, open = props.open, defaultOpen = props.defaultOpen, onDropdownVisibleChange = props.onDropdownVisibleChange, activeValue = props.activeValue, onActiveValueChange = props.onActiveValueChange, activeDescendantId = props.activeDescendantId, searchValue = props.searchValue, autoClearSearchValue = props.autoClearSearchValue, onSearch = props.onSearch, onSearchSplit = props.onSearchSplit, tokenSeparators = props.tokenSeparators, allowClear = props.allowClear, showArrow = props.showArrow, inputIcon = props.inputIcon, clearIcon = props.clearIcon, OptionList3 = props.OptionList, animation = props.animation, transitionName2 = props.transitionName, dropdownStyle = props.dropdownStyle, dropdownClassName = props.dropdownClassName, dropdownMatchSelectWidth = props.dropdownMatchSelectWidth, dropdownRender = props.dropdownRender, dropdownAlign = props.dropdownAlign, placement = props.placement, getPopupContainer = props.getPopupContainer, _props$showAction = props.showAction, showAction = _props$showAction === void 0 ? [] : _props$showAction, onFocus = props.onFocus, onBlur = props.onBlur, onKeyUp = props.onKeyUp, onKeyDown3 = props.onKeyDown, onMouseDown = props.onMouseDown, restProps = _objectWithoutProperties(props, _excluded13);
    var multiple = isMultiple(mode);
    var mergedShowSearch = (showSearch !== void 0 ? showSearch : multiple) || mode === "combobox";
    var domProps = _objectSpread2({}, restProps);
    DEFAULT_OMIT_PROPS.forEach(function(propName) {
      delete domProps[propName];
    });
    omitDomProps === null || omitDomProps === void 0 ? void 0 : omitDomProps.forEach(function(propName) {
      delete domProps[propName];
    });
    var _React$useState = React80.useState(false), _React$useState2 = _slicedToArray(_React$useState, 2), mobile = _React$useState2[0], setMobile = _React$useState2[1];
    React80.useEffect(function() {
      setMobile(isMobile_default());
    }, []);
    var containerRef = React80.useRef(null);
    var selectorDomRef = React80.useRef(null);
    var triggerRef = React80.useRef(null);
    var selectorRef = React80.useRef(null);
    var listRef = React80.useRef(null);
    var _useDelayReset = useDelayReset(), _useDelayReset2 = _slicedToArray(_useDelayReset, 3), mockFocused = _useDelayReset2[0], setMockFocused = _useDelayReset2[1], cancelSetMockFocused = _useDelayReset2[2];
    React80.useImperativeHandle(ref, function() {
      var _selectorRef$current, _selectorRef$current2;
      return {
        focus: (_selectorRef$current = selectorRef.current) === null || _selectorRef$current === void 0 ? void 0 : _selectorRef$current.focus,
        blur: (_selectorRef$current2 = selectorRef.current) === null || _selectorRef$current2 === void 0 ? void 0 : _selectorRef$current2.blur,
        scrollTo: function scrollTo3(arg) {
          var _listRef$current;
          return (_listRef$current = listRef.current) === null || _listRef$current === void 0 ? void 0 : _listRef$current.scrollTo(arg);
        }
      };
    });
    var mergedSearchValue = React80.useMemo(function() {
      var _displayValues$;
      if (mode !== "combobox") {
        return searchValue;
      }
      var val = (_displayValues$ = displayValues[0]) === null || _displayValues$ === void 0 ? void 0 : _displayValues$.value;
      return typeof val === "string" || typeof val === "number" ? String(val) : "";
    }, [searchValue, mode, displayValues]);
    var customizeInputElement = mode === "combobox" && typeof getInputElement === "function" && getInputElement() || null;
    var customizeRawInputElement = typeof getRawInputElement === "function" && getRawInputElement();
    var customizeRawInputRef = useComposeRef(selectorDomRef, customizeRawInputElement === null || customizeRawInputElement === void 0 ? void 0 : (_customizeRawInputEle = customizeRawInputElement.props) === null || _customizeRawInputEle === void 0 ? void 0 : _customizeRawInputEle.ref);
    var _useMergedState = useMergedState(void 0, {
      defaultValue: defaultOpen,
      value: open
    }), _useMergedState2 = _slicedToArray(_useMergedState, 2), innerOpen = _useMergedState2[0], setInnerOpen = _useMergedState2[1];
    var mergedOpen = innerOpen;
    var emptyListContent = !notFoundContent && emptyOptions;
    if (disabled || emptyListContent && mergedOpen && mode === "combobox") {
      mergedOpen = false;
    }
    var triggerOpen = emptyListContent ? false : mergedOpen;
    var onToggleOpen = React80.useCallback(function(newOpen) {
      var nextOpen = newOpen !== void 0 ? newOpen : !mergedOpen;
      if (!disabled) {
        setInnerOpen(nextOpen);
        if (mergedOpen !== nextOpen) {
          onDropdownVisibleChange === null || onDropdownVisibleChange === void 0 ? void 0 : onDropdownVisibleChange(nextOpen);
        }
      }
    }, [disabled, mergedOpen, setInnerOpen, onDropdownVisibleChange]);
    var tokenWithEnter = React80.useMemo(function() {
      return (tokenSeparators || []).some(function(tokenSeparator) {
        return ["\n", "\r\n"].includes(tokenSeparator);
      });
    }, [tokenSeparators]);
    var onInternalSearch = function onInternalSearch2(searchText, fromTyping, isCompositing) {
      var ret = true;
      var newSearchText = searchText;
      onActiveValueChange === null || onActiveValueChange === void 0 ? void 0 : onActiveValueChange(null);
      var patchLabels = isCompositing ? null : getSeparatedContent(searchText, tokenSeparators);
      if (mode !== "combobox" && patchLabels) {
        newSearchText = "";
        onSearchSplit === null || onSearchSplit === void 0 ? void 0 : onSearchSplit(patchLabels);
        onToggleOpen(false);
        ret = false;
      }
      if (onSearch && mergedSearchValue !== newSearchText) {
        onSearch(newSearchText, {
          source: fromTyping ? "typing" : "effect"
        });
      }
      return ret;
    };
    var onInternalSearchSubmit = function onInternalSearchSubmit2(searchText) {
      if (!searchText || !searchText.trim()) {
        return;
      }
      onSearch(searchText, {
        source: "submit"
      });
    };
    React80.useEffect(function() {
      if (!mergedOpen && !multiple && mode !== "combobox") {
        onInternalSearch("", false, false);
      }
    }, [mergedOpen]);
    React80.useEffect(function() {
      if (innerOpen && disabled) {
        setInnerOpen(false);
      }
      if (disabled) {
        setMockFocused(false);
      }
    }, [disabled]);
    var _useLock = useLock(), _useLock2 = _slicedToArray(_useLock, 2), getClearLock = _useLock2[0], setClearLock = _useLock2[1];
    var onInternalKeyDown = function onInternalKeyDown2(event) {
      var clearLock = getClearLock();
      var which = event.which;
      if (which === KeyCode_default.ENTER) {
        if (mode !== "combobox") {
          event.preventDefault();
        }
        if (!mergedOpen) {
          onToggleOpen(true);
        }
      }
      setClearLock(!!mergedSearchValue);
      if (which === KeyCode_default.BACKSPACE && !clearLock && multiple && !mergedSearchValue && displayValues.length) {
        var cloneDisplayValues = _toConsumableArray(displayValues);
        var removedDisplayValue = null;
        for (var i3 = cloneDisplayValues.length - 1; i3 >= 0; i3 -= 1) {
          var current = cloneDisplayValues[i3];
          if (!current.disabled) {
            cloneDisplayValues.splice(i3, 1);
            removedDisplayValue = current;
            break;
          }
        }
        if (removedDisplayValue) {
          onDisplayValuesChange(cloneDisplayValues, {
            type: "remove",
            values: [removedDisplayValue]
          });
        }
      }
      for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        rest[_key - 1] = arguments[_key];
      }
      if (mergedOpen && listRef.current) {
        var _listRef$current2;
        (_listRef$current2 = listRef.current).onKeyDown.apply(_listRef$current2, [event].concat(rest));
      }
      onKeyDown3 === null || onKeyDown3 === void 0 ? void 0 : onKeyDown3.apply(void 0, [event].concat(rest));
    };
    var onInternalKeyUp = function onInternalKeyUp2(event) {
      for (var _len2 = arguments.length, rest = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        rest[_key2 - 1] = arguments[_key2];
      }
      if (mergedOpen && listRef.current) {
        var _listRef$current3;
        (_listRef$current3 = listRef.current).onKeyUp.apply(_listRef$current3, [event].concat(rest));
      }
      onKeyUp === null || onKeyUp === void 0 ? void 0 : onKeyUp.apply(void 0, [event].concat(rest));
    };
    var onSelectorRemove = function onSelectorRemove2(val) {
      var newValues = displayValues.filter(function(i3) {
        return i3 !== val;
      });
      onDisplayValuesChange(newValues, {
        type: "remove",
        values: [val]
      });
    };
    var focusRef = React80.useRef(false);
    var onContainerFocus = function onContainerFocus2() {
      setMockFocused(true);
      if (!disabled) {
        if (onFocus && !focusRef.current) {
          onFocus.apply(void 0, arguments);
        }
        if (showAction.includes("focus")) {
          onToggleOpen(true);
        }
      }
      focusRef.current = true;
    };
    var onContainerBlur = function onContainerBlur2() {
      setMockFocused(false, function() {
        focusRef.current = false;
        onToggleOpen(false);
      });
      if (disabled) {
        return;
      }
      if (mergedSearchValue) {
        if (mode === "tags") {
          onSearch(mergedSearchValue, {
            source: "submit"
          });
        } else if (mode === "multiple") {
          onSearch("", {
            source: "blur"
          });
        }
      }
      if (onBlur) {
        onBlur.apply(void 0, arguments);
      }
    };
    var activeTimeoutIds = [];
    React80.useEffect(function() {
      return function() {
        activeTimeoutIds.forEach(function(timeoutId) {
          return clearTimeout(timeoutId);
        });
        activeTimeoutIds.splice(0, activeTimeoutIds.length);
      };
    }, []);
    var onInternalMouseDown = function onInternalMouseDown2(event) {
      var _triggerRef$current;
      var target = event.target;
      var popupElement = (_triggerRef$current = triggerRef.current) === null || _triggerRef$current === void 0 ? void 0 : _triggerRef$current.getPopupElement();
      if (popupElement && popupElement.contains(target)) {
        var timeoutId = setTimeout(function() {
          var index2 = activeTimeoutIds.indexOf(timeoutId);
          if (index2 !== -1) {
            activeTimeoutIds.splice(index2, 1);
          }
          cancelSetMockFocused();
          if (!mobile && !popupElement.contains(document.activeElement)) {
            var _selectorRef$current3;
            (_selectorRef$current3 = selectorRef.current) === null || _selectorRef$current3 === void 0 ? void 0 : _selectorRef$current3.focus();
          }
        });
        activeTimeoutIds.push(timeoutId);
      }
      for (var _len3 = arguments.length, restArgs = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
        restArgs[_key3 - 1] = arguments[_key3];
      }
      onMouseDown === null || onMouseDown === void 0 ? void 0 : onMouseDown.apply(void 0, [event].concat(restArgs));
    };
    var _React$useState3 = React80.useState(null), _React$useState4 = _slicedToArray(_React$useState3, 2), containerWidth = _React$useState4[0], setContainerWidth = _React$useState4[1];
    var _React$useState5 = React80.useState({}), _React$useState6 = _slicedToArray(_React$useState5, 2), forceUpdate = _React$useState6[1];
    function onPopupMouseEnter() {
      forceUpdate({});
    }
    useLayoutEffect_default(function() {
      if (triggerOpen) {
        var _containerRef$current;
        var newWidth = Math.ceil((_containerRef$current = containerRef.current) === null || _containerRef$current === void 0 ? void 0 : _containerRef$current.offsetWidth);
        if (containerWidth !== newWidth && !Number.isNaN(newWidth)) {
          setContainerWidth(newWidth);
        }
      }
    }, [triggerOpen]);
    var onTriggerVisibleChange;
    if (customizeRawInputElement) {
      onTriggerVisibleChange = function onTriggerVisibleChange2(newOpen) {
        onToggleOpen(newOpen);
      };
    }
    useSelectTriggerControl(function() {
      var _triggerRef$current2;
      return [containerRef.current, (_triggerRef$current2 = triggerRef.current) === null || _triggerRef$current2 === void 0 ? void 0 : _triggerRef$current2.getPopupElement()];
    }, triggerOpen, onToggleOpen, !!customizeRawInputElement);
    var baseSelectContext = React80.useMemo(function() {
      return _objectSpread2(_objectSpread2({}, props), {}, {
        notFoundContent,
        open: mergedOpen,
        triggerOpen,
        id: id2,
        showSearch: mergedShowSearch,
        multiple,
        toggleOpen: onToggleOpen
      });
    }, [props, notFoundContent, triggerOpen, mergedOpen, id2, mergedShowSearch, multiple, onToggleOpen]);
    var mergedShowArrow = showArrow !== void 0 ? showArrow : loading || !multiple && mode !== "combobox";
    var arrowNode;
    if (mergedShowArrow) {
      arrowNode = /* @__PURE__ */ React80.createElement(TransBtn_default, {
        className: (0, import_classnames21.default)("".concat(prefixCls, "-arrow"), _defineProperty({}, "".concat(prefixCls, "-arrow-loading"), loading)),
        customizeIcon: inputIcon,
        customizeIconProps: {
          loading,
          searchValue: mergedSearchValue,
          open: mergedOpen,
          focused: mockFocused,
          showSearch: mergedShowSearch
        }
      });
    }
    var clearNode;
    var onClearMouseDown = function onClearMouseDown2() {
      var _selectorRef$current4;
      onClear === null || onClear === void 0 ? void 0 : onClear();
      (_selectorRef$current4 = selectorRef.current) === null || _selectorRef$current4 === void 0 ? void 0 : _selectorRef$current4.focus();
      onDisplayValuesChange([], {
        type: "clear",
        values: displayValues
      });
      onInternalSearch("", false, false);
    };
    if (!disabled && allowClear && (displayValues.length || mergedSearchValue) && !(mode === "combobox" && mergedSearchValue === "")) {
      clearNode = /* @__PURE__ */ React80.createElement(TransBtn_default, {
        className: "".concat(prefixCls, "-clear"),
        onMouseDown: onClearMouseDown,
        customizeIcon: clearIcon
      }, "\xD7");
    }
    var optionList = /* @__PURE__ */ React80.createElement(OptionList3, {
      ref: listRef
    });
    var mergedClassName = (0, import_classnames21.default)(prefixCls, className, (_classNames2 = {}, _defineProperty(_classNames2, "".concat(prefixCls, "-focused"), mockFocused), _defineProperty(_classNames2, "".concat(prefixCls, "-multiple"), multiple), _defineProperty(_classNames2, "".concat(prefixCls, "-single"), !multiple), _defineProperty(_classNames2, "".concat(prefixCls, "-allow-clear"), allowClear), _defineProperty(_classNames2, "".concat(prefixCls, "-show-arrow"), mergedShowArrow), _defineProperty(_classNames2, "".concat(prefixCls, "-disabled"), disabled), _defineProperty(_classNames2, "".concat(prefixCls, "-loading"), loading), _defineProperty(_classNames2, "".concat(prefixCls, "-open"), mergedOpen), _defineProperty(_classNames2, "".concat(prefixCls, "-customize-input"), customizeInputElement), _defineProperty(_classNames2, "".concat(prefixCls, "-show-search"), mergedShowSearch), _classNames2));
    var selectorNode = /* @__PURE__ */ React80.createElement(SelectTrigger_default, {
      ref: triggerRef,
      disabled,
      prefixCls,
      visible: triggerOpen,
      popupElement: optionList,
      containerWidth,
      animation,
      transitionName: transitionName2,
      dropdownStyle,
      dropdownClassName,
      direction,
      dropdownMatchSelectWidth,
      dropdownRender,
      dropdownAlign,
      placement,
      getPopupContainer,
      empty: emptyOptions,
      getTriggerDOMNode: function getTriggerDOMNode() {
        return selectorDomRef.current;
      },
      onPopupVisibleChange: onTriggerVisibleChange,
      onPopupMouseEnter
    }, customizeRawInputElement ? /* @__PURE__ */ React80.cloneElement(customizeRawInputElement, {
      ref: customizeRawInputRef
    }) : /* @__PURE__ */ React80.createElement(Selector_default, _extends({}, props, {
      domRef: selectorDomRef,
      prefixCls,
      inputElement: customizeInputElement,
      ref: selectorRef,
      id: id2,
      showSearch: mergedShowSearch,
      autoClearSearchValue,
      mode,
      activeDescendantId,
      tagRender,
      values: displayValues,
      open: mergedOpen,
      onToggleOpen,
      activeValue,
      searchValue: mergedSearchValue,
      onSearch: onInternalSearch,
      onSearchSubmit: onInternalSearchSubmit,
      onRemove: onSelectorRemove,
      tokenWithEnter
    })));
    var renderNode;
    if (customizeRawInputElement) {
      renderNode = selectorNode;
    } else {
      renderNode = /* @__PURE__ */ React80.createElement("div", _extends({
        className: mergedClassName
      }, domProps, {
        ref: containerRef,
        onMouseDown: onInternalMouseDown,
        onKeyDown: onInternalKeyDown,
        onKeyUp: onInternalKeyUp,
        onFocus: onContainerFocus,
        onBlur: onContainerBlur
      }), mockFocused && !mergedOpen && /* @__PURE__ */ React80.createElement("span", {
        style: {
          width: 0,
          height: 0,
          position: "absolute",
          overflow: "hidden",
          opacity: 0
        },
        "aria-live": "polite"
      }, "".concat(displayValues.map(function(_ref) {
        var label = _ref.label, value = _ref.value;
        return ["number", "string"].includes(_typeof(label)) ? label : value;
      }).join(", "))), selectorNode, arrowNode, clearNode);
    }
    return /* @__PURE__ */ React80.createElement(BaseSelectContext.Provider, {
      value: baseSelectContext
    }, renderNode);
  });
  if (true) {
    BaseSelect.displayName = "BaseSelect";
  }
  var BaseSelect_default = BaseSelect;

  // node_modules/rc-select/es/hooks/useCache.js
  var React81 = __toESM(require_react());
  var useCache_default = function(labeledValues, valueOptions) {
    var cacheRef = React81.useRef({
      values: /* @__PURE__ */ new Map(),
      options: /* @__PURE__ */ new Map()
    });
    var filledLabeledValues = React81.useMemo(function() {
      var _cacheRef$current = cacheRef.current, prevValueCache = _cacheRef$current.values, prevOptionCache = _cacheRef$current.options;
      var patchedValues = labeledValues.map(function(item) {
        if (item.label === void 0) {
          var _prevValueCache$get;
          return _objectSpread2(_objectSpread2({}, item), {}, {
            label: (_prevValueCache$get = prevValueCache.get(item.value)) === null || _prevValueCache$get === void 0 ? void 0 : _prevValueCache$get.label
          });
        }
        return item;
      });
      var valueCache = /* @__PURE__ */ new Map();
      var optionCache = /* @__PURE__ */ new Map();
      patchedValues.forEach(function(item) {
        valueCache.set(item.value, item);
        optionCache.set(item.value, valueOptions.get(item.value) || prevOptionCache.get(item.value));
      });
      cacheRef.current.values = valueCache;
      cacheRef.current.options = optionCache;
      return patchedValues;
    }, [labeledValues, valueOptions]);
    var getOption = React81.useCallback(function(val) {
      return valueOptions.get(val) || cacheRef.current.options.get(val);
    }, [valueOptions]);
    return [filledLabeledValues, getOption];
  };

  // node_modules/rc-select/es/hooks/useFilterOptions.js
  var React82 = __toESM(require_react());
  function includes(test, search) {
    return toArray2(test).join("").toUpperCase().includes(search);
  }
  var useFilterOptions_default = function(options, fieldNames, searchValue, filterOption, optionFilterProp) {
    return React82.useMemo(function() {
      if (!searchValue || filterOption === false) {
        return options;
      }
      var fieldOptions = fieldNames.options, fieldLabel = fieldNames.label, fieldValue = fieldNames.value;
      var filteredOptions = [];
      var customizeFilter = typeof filterOption === "function";
      var upperSearch = searchValue.toUpperCase();
      var filterFunc = customizeFilter ? filterOption : function(_24, option) {
        if (optionFilterProp) {
          return includes(option[optionFilterProp], upperSearch);
        }
        if (option[fieldOptions]) {
          return includes(option[fieldLabel !== "children" ? fieldLabel : "label"], upperSearch);
        }
        return includes(option[fieldValue], upperSearch);
      };
      var wrapOption = customizeFilter ? function(opt) {
        return injectPropsWithOption(opt);
      } : function(opt) {
        return opt;
      };
      options.forEach(function(item) {
        if (item[fieldOptions]) {
          var matchGroup = filterFunc(searchValue, wrapOption(item));
          if (matchGroup) {
            filteredOptions.push(item);
          } else {
            var subOptions = item[fieldOptions].filter(function(subItem) {
              return filterFunc(searchValue, wrapOption(subItem));
            });
            if (subOptions.length) {
              filteredOptions.push(_objectSpread2(_objectSpread2({}, item), {}, _defineProperty({}, fieldOptions, subOptions)));
            }
          }
          return;
        }
        if (filterFunc(searchValue, wrapOption(item))) {
          filteredOptions.push(item);
        }
      });
      return filteredOptions;
    }, [options, filterOption, optionFilterProp, searchValue, fieldNames]);
  };

  // node_modules/rc-select/es/hooks/useId.js
  var React83 = __toESM(require_react());
  var uuid = 0;
  var isBrowserClient2 = canUseDom();
  function getUUID() {
    var retId;
    if (isBrowserClient2) {
      retId = uuid;
      uuid += 1;
    } else {
      retId = "TEST_OR_SSR";
    }
    return retId;
  }
  function useId(id2) {
    var _React$useState = React83.useState(), _React$useState2 = _slicedToArray(_React$useState, 2), innerId = _React$useState2[0], setInnerId = _React$useState2[1];
    React83.useEffect(function() {
      setInnerId("rc_select_".concat(getUUID()));
    }, []);
    return id2 || innerId;
  }

  // node_modules/rc-select/es/hooks/useOptions.js
  var React85 = __toESM(require_react());

  // node_modules/rc-select/es/utils/legacyUtil.js
  var React84 = __toESM(require_react());
  var _excluded14 = ["children", "value"];
  var _excluded24 = ["children"];
  function convertNodeToOption(node) {
    var _ref = node, key2 = _ref.key, _ref$props = _ref.props, children = _ref$props.children, value = _ref$props.value, restProps = _objectWithoutProperties(_ref$props, _excluded14);
    return _objectSpread2({
      key: key2,
      value: value !== void 0 ? value : key2,
      children
    }, restProps);
  }
  function convertChildrenToData(nodes) {
    var optionOnly = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    return toArray(nodes).map(function(node, index2) {
      if (!/* @__PURE__ */ React84.isValidElement(node) || !node.type) {
        return null;
      }
      var _ref2 = node, isSelectOptGroup = _ref2.type.isSelectOptGroup, key2 = _ref2.key, _ref2$props = _ref2.props, children = _ref2$props.children, restProps = _objectWithoutProperties(_ref2$props, _excluded24);
      if (optionOnly || !isSelectOptGroup) {
        return convertNodeToOption(node);
      }
      return _objectSpread2(_objectSpread2({
        key: "__RC_SELECT_GRP__".concat(key2 === null ? index2 : key2, "__"),
        label: key2
      }, restProps), {}, {
        options: convertChildrenToData(children)
      });
    }).filter(function(data) {
      return data;
    });
  }

  // node_modules/rc-select/es/hooks/useOptions.js
  function useOptions(options, children, fieldNames, optionFilterProp, optionLabelProp) {
    return React85.useMemo(function() {
      var mergedOptions = options;
      var childrenAsData = !options;
      if (childrenAsData) {
        mergedOptions = convertChildrenToData(children);
      }
      var valueOptions = /* @__PURE__ */ new Map();
      var labelOptions = /* @__PURE__ */ new Map();
      var setLabelOptions = function setLabelOptions2(labelOptionsMap, option, key2) {
        if (key2 && typeof key2 === "string") {
          labelOptionsMap.set(option[key2], option);
        }
      };
      function dig(optionList) {
        var isChildren = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
        for (var i3 = 0; i3 < optionList.length; i3 += 1) {
          var option = optionList[i3];
          if (!option[fieldNames.options] || isChildren) {
            valueOptions.set(option[fieldNames.value], option);
            setLabelOptions(labelOptions, option, fieldNames.label);
            setLabelOptions(labelOptions, option, optionFilterProp);
            setLabelOptions(labelOptions, option, optionLabelProp);
          } else {
            dig(option[fieldNames.options], true);
          }
        }
      }
      dig(mergedOptions);
      return {
        options: mergedOptions,
        valueOptions,
        labelOptions
      };
    }, [options, children, fieldNames, optionFilterProp, optionLabelProp]);
  }

  // node_modules/rc-select/es/hooks/useRefFunc.js
  var React86 = __toESM(require_react());
  function useRefFunc(callback) {
    var funcRef = React86.useRef();
    funcRef.current = callback;
    var cacheFn = React86.useCallback(function() {
      return funcRef.current.apply(funcRef, arguments);
    }, []);
    return cacheFn;
  }

  // node_modules/rc-select/es/OptGroup.js
  var OptGroup = function OptGroup2() {
    return null;
  };
  OptGroup.isSelectOptGroup = true;
  var OptGroup_default = OptGroup;

  // node_modules/rc-select/es/Option.js
  var Option = function Option2() {
    return null;
  };
  Option.isSelectOption = true;
  var Option_default = Option;

  // node_modules/rc-select/es/OptionList.js
  var React97 = __toESM(require_react());
  var import_react37 = __toESM(require_react());
  var import_classnames25 = __toESM(require_classnames());

  // node_modules/rc-virtual-list/es/List.js
  var React95 = __toESM(require_react());
  var import_react36 = __toESM(require_react());
  var import_react_dom8 = __toESM(require_react_dom());
  var import_classnames24 = __toESM(require_classnames());

  // node_modules/rc-virtual-list/es/Filler.js
  var React87 = __toESM(require_react());
  var import_classnames22 = __toESM(require_classnames());
  var Filler = /* @__PURE__ */ React87.forwardRef(function(_ref, ref) {
    var height = _ref.height, offsetY = _ref.offsetY, offsetX = _ref.offsetX, children = _ref.children, prefixCls = _ref.prefixCls, onInnerResize = _ref.onInnerResize, innerProps = _ref.innerProps, rtl3 = _ref.rtl, extra = _ref.extra;
    var outerStyle = {};
    var innerStyle = {
      display: "flex",
      flexDirection: "column"
    };
    if (offsetY !== void 0) {
      var _objectSpread23;
      outerStyle = {
        height,
        position: "relative",
        overflow: "hidden"
      };
      innerStyle = _objectSpread2(_objectSpread2({}, innerStyle), {}, (_objectSpread23 = {
        transform: "translateY(".concat(offsetY, "px)")
      }, _defineProperty(_objectSpread23, rtl3 ? "marginRight" : "marginLeft", -offsetX), _defineProperty(_objectSpread23, "position", "absolute"), _defineProperty(_objectSpread23, "left", 0), _defineProperty(_objectSpread23, "right", 0), _defineProperty(_objectSpread23, "top", 0), _objectSpread23));
    }
    return /* @__PURE__ */ React87.createElement("div", {
      style: outerStyle
    }, /* @__PURE__ */ React87.createElement(es_default2, {
      onResize: function onResize2(_ref2) {
        var offsetHeight = _ref2.offsetHeight;
        if (offsetHeight && onInnerResize) {
          onInnerResize();
        }
      }
    }, /* @__PURE__ */ React87.createElement("div", _extends({
      style: innerStyle,
      className: (0, import_classnames22.default)(_defineProperty({}, "".concat(prefixCls, "-holder-inner"), prefixCls)),
      ref
    }, innerProps), children, extra)));
  });
  Filler.displayName = "Filler";
  var Filler_default = Filler;

  // node_modules/rc-virtual-list/es/ScrollBar.js
  var React88 = __toESM(require_react());
  var import_classnames23 = __toESM(require_classnames());
  function getPageXY(e3, horizontal) {
    var obj = "touches" in e3 ? e3.touches[0] : e3;
    return obj[horizontal ? "pageX" : "pageY"];
  }
  var ScrollBar = /* @__PURE__ */ React88.forwardRef(function(props, ref) {
    var _classNames;
    var prefixCls = props.prefixCls, rtl3 = props.rtl, scrollOffset = props.scrollOffset, scrollRange = props.scrollRange, onStartMove = props.onStartMove, onStopMove = props.onStopMove, onScroll = props.onScroll, horizontal = props.horizontal, spinSize = props.spinSize, containerSize = props.containerSize, style3 = props.style, propsThumbStyle = props.thumbStyle;
    var _React$useState = React88.useState(false), _React$useState2 = _slicedToArray(_React$useState, 2), dragging = _React$useState2[0], setDragging = _React$useState2[1];
    var _React$useState3 = React88.useState(null), _React$useState4 = _slicedToArray(_React$useState3, 2), pageXY = _React$useState4[0], setPageXY = _React$useState4[1];
    var _React$useState5 = React88.useState(null), _React$useState6 = _slicedToArray(_React$useState5, 2), startTop = _React$useState6[0], setStartTop = _React$useState6[1];
    var isLTR = !rtl3;
    var scrollbarRef = React88.useRef();
    var thumbRef = React88.useRef();
    var _React$useState7 = React88.useState(false), _React$useState8 = _slicedToArray(_React$useState7, 2), visible = _React$useState8[0], setVisible = _React$useState8[1];
    var visibleTimeoutRef = React88.useRef();
    var delayHidden = function delayHidden2() {
      clearTimeout(visibleTimeoutRef.current);
      setVisible(true);
      visibleTimeoutRef.current = setTimeout(function() {
        setVisible(false);
      }, 3e3);
    };
    var enableScrollRange = scrollRange - containerSize || 0;
    var enableOffsetRange = containerSize - spinSize || 0;
    var canScroll = enableScrollRange > 0;
    var top = React88.useMemo(function() {
      if (scrollOffset === 0 || enableScrollRange === 0) {
        return 0;
      }
      var ptg = scrollOffset / enableScrollRange;
      return ptg * enableOffsetRange;
    }, [scrollOffset, enableScrollRange, enableOffsetRange]);
    var onContainerMouseDown = function onContainerMouseDown2(e3) {
      e3.stopPropagation();
      e3.preventDefault();
    };
    var stateRef = React88.useRef({
      top,
      dragging,
      pageY: pageXY,
      startTop
    });
    stateRef.current = {
      top,
      dragging,
      pageY: pageXY,
      startTop
    };
    var onThumbMouseDown = function onThumbMouseDown2(e3) {
      setDragging(true);
      setPageXY(getPageXY(e3, horizontal));
      setStartTop(stateRef.current.top);
      onStartMove();
      e3.stopPropagation();
      e3.preventDefault();
    };
    React88.useEffect(function() {
      var onScrollbarTouchStart = function onScrollbarTouchStart2(e3) {
        e3.preventDefault();
      };
      var scrollbarEle = scrollbarRef.current;
      var thumbEle = thumbRef.current;
      scrollbarEle.addEventListener("touchstart", onScrollbarTouchStart);
      thumbEle.addEventListener("touchstart", onThumbMouseDown);
      return function() {
        scrollbarEle.removeEventListener("touchstart", onScrollbarTouchStart);
        thumbEle.removeEventListener("touchstart", onThumbMouseDown);
      };
    }, []);
    var enableScrollRangeRef = React88.useRef();
    enableScrollRangeRef.current = enableScrollRange;
    var enableOffsetRangeRef = React88.useRef();
    enableOffsetRangeRef.current = enableOffsetRange;
    React88.useEffect(function() {
      if (dragging) {
        var moveRafId;
        var onMouseMove = function onMouseMove2(e3) {
          var _stateRef$current = stateRef.current, stateDragging = _stateRef$current.dragging, statePageY = _stateRef$current.pageY, stateStartTop = _stateRef$current.startTop;
          raf_default.cancel(moveRafId);
          if (stateDragging) {
            var offset4 = getPageXY(e3, horizontal) - statePageY;
            var newTop = stateStartTop;
            if (!isLTR && horizontal) {
              newTop -= offset4;
            } else {
              newTop += offset4;
            }
            var tmpEnableScrollRange = enableScrollRangeRef.current;
            var tmpEnableOffsetRange = enableOffsetRangeRef.current;
            var ptg = tmpEnableOffsetRange ? newTop / tmpEnableOffsetRange : 0;
            var newScrollTop = Math.ceil(ptg * tmpEnableScrollRange);
            newScrollTop = Math.max(newScrollTop, 0);
            newScrollTop = Math.min(newScrollTop, tmpEnableScrollRange);
            moveRafId = raf_default(function() {
              onScroll(newScrollTop, horizontal);
            });
          }
        };
        var onMouseUp = function onMouseUp2() {
          setDragging(false);
          onStopMove();
        };
        window.addEventListener("mousemove", onMouseMove);
        window.addEventListener("touchmove", onMouseMove);
        window.addEventListener("mouseup", onMouseUp);
        window.addEventListener("touchend", onMouseUp);
        return function() {
          window.removeEventListener("mousemove", onMouseMove);
          window.removeEventListener("touchmove", onMouseMove);
          window.removeEventListener("mouseup", onMouseUp);
          window.removeEventListener("touchend", onMouseUp);
          raf_default.cancel(moveRafId);
        };
      }
    }, [dragging]);
    React88.useEffect(function() {
      delayHidden();
    }, [scrollOffset]);
    React88.useImperativeHandle(ref, function() {
      return {
        delayHidden
      };
    });
    var scrollbarPrefixCls = "".concat(prefixCls, "-scrollbar");
    var containerStyle = {
      position: "absolute",
      visibility: visible && canScroll ? null : "hidden"
    };
    var thumbStyle = {
      position: "absolute",
      background: "rgba(0, 0, 0, 0.5)",
      borderRadius: 99,
      cursor: "pointer",
      userSelect: "none"
    };
    if (horizontal) {
      containerStyle.height = 8;
      containerStyle.left = 0;
      containerStyle.right = 0;
      containerStyle.bottom = 0;
      thumbStyle.height = "100%";
      thumbStyle.width = spinSize;
      if (isLTR) {
        thumbStyle.left = top;
      } else {
        thumbStyle.right = top;
      }
    } else {
      containerStyle.width = 8;
      containerStyle.top = 0;
      containerStyle.bottom = 0;
      if (isLTR) {
        containerStyle.right = 0;
      } else {
        containerStyle.left = 0;
      }
      thumbStyle.width = "100%";
      thumbStyle.height = spinSize;
      thumbStyle.top = top;
    }
    return /* @__PURE__ */ React88.createElement("div", {
      ref: scrollbarRef,
      className: (0, import_classnames23.default)(scrollbarPrefixCls, (_classNames = {}, _defineProperty(_classNames, "".concat(scrollbarPrefixCls, "-horizontal"), horizontal), _defineProperty(_classNames, "".concat(scrollbarPrefixCls, "-vertical"), !horizontal), _defineProperty(_classNames, "".concat(scrollbarPrefixCls, "-visible"), visible), _classNames)),
      style: _objectSpread2(_objectSpread2({}, containerStyle), style3),
      onMouseDown: onContainerMouseDown,
      onMouseMove: delayHidden
    }, /* @__PURE__ */ React88.createElement("div", {
      ref: thumbRef,
      className: (0, import_classnames23.default)("".concat(scrollbarPrefixCls, "-thumb"), _defineProperty({}, "".concat(scrollbarPrefixCls, "-thumb-moving"), dragging)),
      style: _objectSpread2(_objectSpread2({}, thumbStyle), propsThumbStyle),
      onMouseDown: onThumbMouseDown
    }));
  });
  if (true) {
    ScrollBar.displayName = "ScrollBar";
  }
  var ScrollBar_default = ScrollBar;

  // node_modules/rc-virtual-list/es/hooks/useChildren.js
  var React90 = __toESM(require_react());

  // node_modules/rc-virtual-list/es/Item.js
  var React89 = __toESM(require_react());
  function Item2(_ref) {
    var children = _ref.children, setRef = _ref.setRef;
    var refFunc = React89.useCallback(function(node) {
      setRef(node);
    }, []);
    return /* @__PURE__ */ React89.cloneElement(children, {
      ref: refFunc
    });
  }

  // node_modules/rc-virtual-list/es/hooks/useChildren.js
  function useChildren(list, startIndex, endIndex, scrollWidth, setNodeRef, renderFunc, _ref) {
    var getKey6 = _ref.getKey;
    return list.slice(startIndex, endIndex + 1).map(function(item, index2) {
      var eleIndex = startIndex + index2;
      var node = renderFunc(item, eleIndex, {
        style: {
          width: scrollWidth
        }
      });
      var key2 = getKey6(item);
      return /* @__PURE__ */ React90.createElement(Item2, {
        key: key2,
        setRef: function setRef(ele) {
          return setNodeRef(item, ele);
        }
      }, node);
    });
  }

  // node_modules/rc-virtual-list/es/hooks/useHeights.js
  var React91 = __toESM(require_react());
  var import_react32 = __toESM(require_react());

  // node_modules/rc-virtual-list/es/utils/CacheMap.js
  var CacheMap = /* @__PURE__ */ function() {
    function CacheMap2() {
      _classCallCheck(this, CacheMap2);
      this.maps = void 0;
      this.id = 0;
      this.maps = /* @__PURE__ */ Object.create(null);
    }
    _createClass(CacheMap2, [{
      key: "set",
      value: function set2(key2, value) {
        this.maps[key2] = value;
        this.id += 1;
      }
    }, {
      key: "get",
      value: function get3(key2) {
        return this.maps[key2];
      }
    }]);
    return CacheMap2;
  }();
  var CacheMap_default = CacheMap;

  // node_modules/rc-virtual-list/es/hooks/useHeights.js
  function useHeights(getKey6, onItemAdd, onItemRemove) {
    var _React$useState = React91.useState(0), _React$useState2 = _slicedToArray(_React$useState, 2), updatedMark = _React$useState2[0], setUpdatedMark = _React$useState2[1];
    var instanceRef = (0, import_react32.useRef)(/* @__PURE__ */ new Map());
    var heightsRef = (0, import_react32.useRef)(new CacheMap_default());
    var collectRafRef = (0, import_react32.useRef)();
    function cancelRaf() {
      raf_default.cancel(collectRafRef.current);
    }
    function collectHeight() {
      var sync = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
      cancelRaf();
      var doCollect = function doCollect2() {
        instanceRef.current.forEach(function(element, key2) {
          if (element && element.offsetParent) {
            var htmlElement = findDOMNode(element);
            var offsetHeight = htmlElement.offsetHeight;
            if (heightsRef.current.get(key2) !== offsetHeight) {
              heightsRef.current.set(key2, htmlElement.offsetHeight);
            }
          }
        });
        setUpdatedMark(function(c2) {
          return c2 + 1;
        });
      };
      if (sync) {
        doCollect();
      } else {
        collectRafRef.current = raf_default(doCollect);
      }
    }
    function setInstanceRef(item, instance2) {
      var key2 = getKey6(item);
      var origin = instanceRef.current.get(key2);
      if (instance2) {
        instanceRef.current.set(key2, instance2);
        collectHeight();
      } else {
        instanceRef.current.delete(key2);
      }
      if (!origin !== !instance2) {
        if (instance2) {
          onItemAdd === null || onItemAdd === void 0 ? void 0 : onItemAdd(item);
        } else {
          onItemRemove === null || onItemRemove === void 0 ? void 0 : onItemRemove(item);
        }
      }
    }
    (0, import_react32.useEffect)(function() {
      return cancelRaf;
    }, []);
    return [setInstanceRef, collectHeight, heightsRef.current, updatedMark];
  }

  // node_modules/rc-virtual-list/es/hooks/useScrollTo.js
  var React92 = __toESM(require_react());
  var MAX_TIMES = 10;
  function useScrollTo(containerRef, data, heights, itemHeight, getKey6, collectHeight, syncScrollTop, triggerFlash) {
    var scrollRef = React92.useRef();
    var _React$useState = React92.useState(null), _React$useState2 = _slicedToArray(_React$useState, 2), syncState = _React$useState2[0], setSyncState = _React$useState2[1];
    useLayoutEffect_default(function() {
      if (syncState && syncState.times < MAX_TIMES) {
        if (!containerRef.current) {
          setSyncState(function(ori) {
            return _objectSpread2({}, ori);
          });
          return;
        }
        collectHeight();
        var targetAlign = syncState.targetAlign, originAlign = syncState.originAlign, index2 = syncState.index, offset4 = syncState.offset;
        var height = containerRef.current.clientHeight;
        var needCollectHeight = false;
        var newTargetAlign = targetAlign;
        var targetTop = null;
        if (height) {
          var mergedAlign = targetAlign || originAlign;
          var stackTop = 0;
          var itemTop = 0;
          var itemBottom = 0;
          var maxLen = Math.min(data.length - 1, index2);
          for (var i3 = 0; i3 <= maxLen; i3 += 1) {
            var key2 = getKey6(data[i3]);
            itemTop = stackTop;
            var cacheHeight = heights.get(key2);
            itemBottom = itemTop + (cacheHeight === void 0 ? itemHeight : cacheHeight);
            stackTop = itemBottom;
          }
          var leftHeight = mergedAlign === "top" ? offset4 : height - offset4;
          for (var _i = maxLen; _i >= 0; _i -= 1) {
            var _key = getKey6(data[_i]);
            var _cacheHeight = heights.get(_key);
            if (_cacheHeight === void 0) {
              needCollectHeight = true;
              break;
            }
            leftHeight -= _cacheHeight;
            if (leftHeight <= 0) {
              break;
            }
          }
          switch (mergedAlign) {
            case "top":
              targetTop = itemTop - offset4;
              break;
            case "bottom":
              targetTop = itemBottom - height + offset4;
              break;
            default: {
              var scrollTop = containerRef.current.scrollTop;
              var scrollBottom = scrollTop + height;
              if (itemTop < scrollTop) {
                newTargetAlign = "top";
              } else if (itemBottom > scrollBottom) {
                newTargetAlign = "bottom";
              }
            }
          }
          if (targetTop !== null) {
            syncScrollTop(targetTop);
          }
          if (targetTop !== syncState.lastTop) {
            needCollectHeight = true;
          }
        }
        if (needCollectHeight) {
          setSyncState(function(ori) {
            return _objectSpread2(_objectSpread2({}, ori), {}, {
              times: ori.times + 1,
              targetAlign: newTargetAlign,
              lastTop: targetTop
            });
          });
        }
      } else if ((syncState === null || syncState === void 0 ? void 0 : syncState.times) === MAX_TIMES) {
        warning_default(false, "Seems `scrollTo` with `rc-virtual-list` reach the max limitation. Please fire issue for us. Thanks.");
      }
    }, [syncState, containerRef.current]);
    return function(arg) {
      if (arg === null || arg === void 0) {
        triggerFlash();
        return;
      }
      raf_default.cancel(scrollRef.current);
      if (typeof arg === "number") {
        syncScrollTop(arg);
      } else if (arg && _typeof(arg) === "object") {
        var index2;
        var align = arg.align;
        if ("index" in arg) {
          index2 = arg.index;
        } else {
          index2 = data.findIndex(function(item) {
            return getKey6(item) === arg.key;
          });
        }
        var _arg$offset = arg.offset, offset4 = _arg$offset === void 0 ? 0 : _arg$offset;
        setSyncState({
          times: 0,
          index: index2,
          offset: offset4,
          originAlign: align
        });
      }
    };
  }

  // node_modules/rc-virtual-list/es/hooks/useDiffItem.js
  var React93 = __toESM(require_react());

  // node_modules/rc-virtual-list/es/utils/algorithmUtil.js
  function findListDiffIndex(originList, targetList, getKey6) {
    var originLen = originList.length;
    var targetLen = targetList.length;
    var shortList;
    var longList;
    if (originLen === 0 && targetLen === 0) {
      return null;
    }
    if (originLen < targetLen) {
      shortList = originList;
      longList = targetList;
    } else {
      shortList = targetList;
      longList = originList;
    }
    var notExistKey = {
      __EMPTY_ITEM__: true
    };
    function getItemKey(item) {
      if (item !== void 0) {
        return getKey6(item);
      }
      return notExistKey;
    }
    var diffIndex = null;
    var multiple = Math.abs(originLen - targetLen) !== 1;
    for (var i3 = 0; i3 < longList.length; i3 += 1) {
      var shortKey = getItemKey(shortList[i3]);
      var longKey = getItemKey(longList[i3]);
      if (shortKey !== longKey) {
        diffIndex = i3;
        multiple = multiple || shortKey !== getItemKey(longList[i3 + 1]);
        break;
      }
    }
    return diffIndex === null ? null : {
      index: diffIndex,
      multiple
    };
  }

  // node_modules/rc-virtual-list/es/hooks/useDiffItem.js
  function useDiffItem(data, getKey6, onDiff) {
    var _React$useState = React93.useState(data), _React$useState2 = _slicedToArray(_React$useState, 2), prevData = _React$useState2[0], setPrevData = _React$useState2[1];
    var _React$useState3 = React93.useState(null), _React$useState4 = _slicedToArray(_React$useState3, 2), diffItem = _React$useState4[0], setDiffItem = _React$useState4[1];
    React93.useEffect(function() {
      var diff = findListDiffIndex(prevData || [], data || [], getKey6);
      if ((diff === null || diff === void 0 ? void 0 : diff.index) !== void 0) {
        onDiff === null || onDiff === void 0 ? void 0 : onDiff(diff.index);
        setDiffItem(data[diff.index]);
      }
      setPrevData(data);
    }, [data]);
    return [diffItem];
  }

  // node_modules/rc-virtual-list/es/hooks/useFrameWheel.js
  var import_react34 = __toESM(require_react());

  // node_modules/rc-virtual-list/es/utils/isFirefox.js
  var isFF = (typeof navigator === "undefined" ? "undefined" : _typeof(navigator)) === "object" && /Firefox/i.test(navigator.userAgent);
  var isFirefox_default = isFF;

  // node_modules/rc-virtual-list/es/hooks/useOriginScroll.js
  var import_react33 = __toESM(require_react());
  var useOriginScroll_default = function(isScrollAtTop, isScrollAtBottom) {
    var lockRef = (0, import_react33.useRef)(false);
    var lockTimeoutRef = (0, import_react33.useRef)(null);
    function lockScroll() {
      clearTimeout(lockTimeoutRef.current);
      lockRef.current = true;
      lockTimeoutRef.current = setTimeout(function() {
        lockRef.current = false;
      }, 50);
    }
    var scrollPingRef = (0, import_react33.useRef)({
      top: isScrollAtTop,
      bottom: isScrollAtBottom
    });
    scrollPingRef.current.top = isScrollAtTop;
    scrollPingRef.current.bottom = isScrollAtBottom;
    return function(deltaY) {
      var smoothOffset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      var originScroll = (
        // Pass origin wheel when on the top
        deltaY < 0 && scrollPingRef.current.top || // Pass origin wheel when on the bottom
        deltaY > 0 && scrollPingRef.current.bottom
      );
      if (smoothOffset && originScroll) {
        clearTimeout(lockTimeoutRef.current);
        lockRef.current = false;
      } else if (!originScroll || lockRef.current) {
        lockScroll();
      }
      return !lockRef.current && originScroll;
    };
  };

  // node_modules/rc-virtual-list/es/hooks/useFrameWheel.js
  function useFrameWheel(inVirtual, isScrollAtTop, isScrollAtBottom, horizontalScroll, onWheelDelta) {
    var offsetRef = (0, import_react34.useRef)(0);
    var nextFrameRef = (0, import_react34.useRef)(null);
    var wheelValueRef = (0, import_react34.useRef)(null);
    var isMouseScrollRef = (0, import_react34.useRef)(false);
    var originScroll = useOriginScroll_default(isScrollAtTop, isScrollAtBottom);
    function onWheelY(event, deltaY) {
      raf_default.cancel(nextFrameRef.current);
      offsetRef.current += deltaY;
      wheelValueRef.current = deltaY;
      if (originScroll(deltaY))
        return;
      if (!isFirefox_default) {
        event.preventDefault();
      }
      nextFrameRef.current = raf_default(function() {
        var patchMultiple = isMouseScrollRef.current ? 10 : 1;
        onWheelDelta(offsetRef.current * patchMultiple);
        offsetRef.current = 0;
      });
    }
    function onWheelX(event, deltaX) {
      onWheelDelta(deltaX, true);
      if (!isFirefox_default) {
        event.preventDefault();
      }
    }
    var wheelDirectionRef = (0, import_react34.useRef)(null);
    var wheelDirectionCleanRef = (0, import_react34.useRef)(null);
    function onWheel(event) {
      if (!inVirtual)
        return;
      raf_default.cancel(wheelDirectionCleanRef.current);
      wheelDirectionCleanRef.current = raf_default(function() {
        wheelDirectionRef.current = null;
      }, 2);
      var deltaX = event.deltaX, deltaY = event.deltaY, shiftKey = event.shiftKey;
      var mergedDeltaX = deltaX;
      var mergedDeltaY = deltaY;
      if (wheelDirectionRef.current === "sx" || !wheelDirectionRef.current && (shiftKey || false) && deltaY && !deltaX) {
        mergedDeltaX = deltaY;
        mergedDeltaY = 0;
        wheelDirectionRef.current = "sx";
      }
      var absX = Math.abs(mergedDeltaX);
      var absY = Math.abs(mergedDeltaY);
      if (wheelDirectionRef.current === null) {
        wheelDirectionRef.current = horizontalScroll && absX > absY ? "x" : "y";
      }
      if (wheelDirectionRef.current === "y") {
        onWheelY(event, mergedDeltaY);
      } else {
        onWheelX(event, mergedDeltaX);
      }
    }
    function onFireFoxScroll(event) {
      if (!inVirtual)
        return;
      isMouseScrollRef.current = event.detail === wheelValueRef.current;
    }
    return [onWheel, onFireFoxScroll];
  }

  // node_modules/rc-virtual-list/es/hooks/useMobileTouchMove.js
  var import_react35 = __toESM(require_react());
  var SMOOTH_PTG = 14 / 15;
  function useMobileTouchMove(inVirtual, listRef, callback) {
    var touchedRef = (0, import_react35.useRef)(false);
    var touchYRef = (0, import_react35.useRef)(0);
    var elementRef = (0, import_react35.useRef)(null);
    var intervalRef = (0, import_react35.useRef)(null);
    var cleanUpEvents;
    var onTouchMove = function onTouchMove2(e3) {
      if (touchedRef.current) {
        var currentY = Math.ceil(e3.touches[0].pageY);
        var offsetY = touchYRef.current - currentY;
        touchYRef.current = currentY;
        if (callback(offsetY)) {
          e3.preventDefault();
        }
        clearInterval(intervalRef.current);
        intervalRef.current = setInterval(function() {
          offsetY *= SMOOTH_PTG;
          if (!callback(offsetY, true) || Math.abs(offsetY) <= 0.1) {
            clearInterval(intervalRef.current);
          }
        }, 16);
      }
    };
    var onTouchEnd = function onTouchEnd2() {
      touchedRef.current = false;
      cleanUpEvents();
    };
    var onTouchStart = function onTouchStart2(e3) {
      cleanUpEvents();
      if (e3.touches.length === 1 && !touchedRef.current) {
        touchedRef.current = true;
        touchYRef.current = Math.ceil(e3.touches[0].pageY);
        elementRef.current = e3.target;
        elementRef.current.addEventListener("touchmove", onTouchMove);
        elementRef.current.addEventListener("touchend", onTouchEnd);
      }
    };
    cleanUpEvents = function cleanUpEvents2() {
      if (elementRef.current) {
        elementRef.current.removeEventListener("touchmove", onTouchMove);
        elementRef.current.removeEventListener("touchend", onTouchEnd);
      }
    };
    useLayoutEffect_default(function() {
      if (inVirtual) {
        listRef.current.addEventListener("touchstart", onTouchStart);
      }
      return function() {
        var _listRef$current;
        (_listRef$current = listRef.current) === null || _listRef$current === void 0 ? void 0 : _listRef$current.removeEventListener("touchstart", onTouchStart);
        cleanUpEvents();
        clearInterval(intervalRef.current);
      };
    }, [inVirtual]);
  }

  // node_modules/rc-virtual-list/es/utils/scrollbarUtil.js
  var MIN_SIZE = 20;
  function getSpinSize() {
    var containerSize = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
    var scrollRange = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
    var baseSize = containerSize / scrollRange * 100;
    if (isNaN(baseSize)) {
      baseSize = 0;
    }
    baseSize = Math.max(baseSize, MIN_SIZE);
    baseSize = Math.min(baseSize, containerSize / 2);
    return Math.floor(baseSize);
  }

  // node_modules/rc-virtual-list/es/hooks/useGetSize.js
  var React94 = __toESM(require_react());
  function useGetSize(mergedData, getKey6, heights, itemHeight) {
    var _React$useMemo = React94.useMemo(function() {
      return [/* @__PURE__ */ new Map(), []];
    }, [mergedData, heights.id, itemHeight]), _React$useMemo2 = _slicedToArray(_React$useMemo, 2), key2Index = _React$useMemo2[0], bottomList = _React$useMemo2[1];
    var getSize3 = function getSize4(startKey) {
      var endKey = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : startKey;
      var startIndex = key2Index.get(startKey);
      var endIndex = key2Index.get(endKey);
      if (startIndex === void 0 || endIndex === void 0) {
        var dataLen = mergedData.length;
        for (var i3 = bottomList.length; i3 < dataLen; i3 += 1) {
          var _heights$get;
          var item = mergedData[i3];
          var key2 = getKey6(item);
          key2Index.set(key2, i3);
          var cacheHeight = (_heights$get = heights.get(key2)) !== null && _heights$get !== void 0 ? _heights$get : itemHeight;
          bottomList[i3] = (bottomList[i3 - 1] || 0) + cacheHeight;
          if (key2 === startKey) {
            startIndex = i3;
          }
          if (key2 === endKey) {
            endIndex = i3;
          }
          if (startIndex !== void 0 && endIndex !== void 0) {
            break;
          }
        }
      }
      return {
        top: bottomList[startIndex - 1] || 0,
        bottom: bottomList[endIndex]
      };
    };
    return getSize3;
  }

  // node_modules/rc-virtual-list/es/List.js
  var _excluded15 = ["prefixCls", "className", "height", "itemHeight", "fullHeight", "style", "data", "children", "itemKey", "virtual", "direction", "scrollWidth", "component", "onScroll", "onVirtualScroll", "onVisibleChange", "innerProps", "extraRender", "styles"];
  var EMPTY_DATA = [];
  var ScrollStyle = {
    overflowY: "auto",
    overflowAnchor: "none"
  };
  function RawList(props, ref) {
    var _props$prefixCls = props.prefixCls, prefixCls = _props$prefixCls === void 0 ? "rc-virtual-list" : _props$prefixCls, className = props.className, height = props.height, itemHeight = props.itemHeight, _props$fullHeight = props.fullHeight, fullHeight = _props$fullHeight === void 0 ? true : _props$fullHeight, style3 = props.style, data = props.data, children = props.children, itemKey3 = props.itemKey, virtual = props.virtual, direction = props.direction, scrollWidth = props.scrollWidth, _props$component = props.component, Component20 = _props$component === void 0 ? "div" : _props$component, onScroll = props.onScroll, onVirtualScroll = props.onVirtualScroll, onVisibleChange = props.onVisibleChange, innerProps = props.innerProps, extraRender = props.extraRender, styles = props.styles, restProps = _objectWithoutProperties(props, _excluded15);
    var useVirtual = !!(virtual !== false && height && itemHeight);
    var inVirtual = useVirtual && data && (itemHeight * data.length > height || !!scrollWidth);
    var isRTL = direction === "rtl";
    var mergedClassName = (0, import_classnames24.default)(prefixCls, _defineProperty({}, "".concat(prefixCls, "-rtl"), isRTL), className);
    var mergedData = data || EMPTY_DATA;
    var componentRef = (0, import_react36.useRef)();
    var fillerInnerRef = (0, import_react36.useRef)();
    var _useState = (0, import_react36.useState)(0), _useState2 = _slicedToArray(_useState, 2), offsetTop = _useState2[0], setOffsetTop = _useState2[1];
    var _useState3 = (0, import_react36.useState)(0), _useState4 = _slicedToArray(_useState3, 2), offsetLeft = _useState4[0], setOffsetLeft = _useState4[1];
    var _useState5 = (0, import_react36.useState)(false), _useState6 = _slicedToArray(_useState5, 2), scrollMoving = _useState6[0], setScrollMoving = _useState6[1];
    var onScrollbarStartMove = function onScrollbarStartMove2() {
      setScrollMoving(true);
    };
    var onScrollbarStopMove = function onScrollbarStopMove2() {
      setScrollMoving(false);
    };
    var getKey6 = React95.useCallback(function(item) {
      if (typeof itemKey3 === "function") {
        return itemKey3(item);
      }
      return item === null || item === void 0 ? void 0 : item[itemKey3];
    }, [itemKey3]);
    var sharedConfig = {
      getKey: getKey6
    };
    function syncScrollTop(newTop) {
      setOffsetTop(function(origin) {
        var value;
        if (typeof newTop === "function") {
          value = newTop(origin);
        } else {
          value = newTop;
        }
        var alignedTop = keepInRange(value);
        componentRef.current.scrollTop = alignedTop;
        return alignedTop;
      });
    }
    var rangeRef = (0, import_react36.useRef)({
      start: 0,
      end: mergedData.length
    });
    var diffItemRef = (0, import_react36.useRef)();
    var _useDiffItem = useDiffItem(mergedData, getKey6), _useDiffItem2 = _slicedToArray(_useDiffItem, 1), diffItem = _useDiffItem2[0];
    diffItemRef.current = diffItem;
    var _useHeights = useHeights(getKey6, null, null), _useHeights2 = _slicedToArray(_useHeights, 4), setInstanceRef = _useHeights2[0], collectHeight = _useHeights2[1], heights = _useHeights2[2], heightUpdatedMark = _useHeights2[3];
    var _React$useMemo = React95.useMemo(function() {
      if (!useVirtual) {
        return {
          scrollHeight: void 0,
          start: 0,
          end: mergedData.length - 1,
          offset: void 0
        };
      }
      if (!inVirtual) {
        var _fillerInnerRef$curre;
        return {
          scrollHeight: ((_fillerInnerRef$curre = fillerInnerRef.current) === null || _fillerInnerRef$curre === void 0 ? void 0 : _fillerInnerRef$curre.offsetHeight) || 0,
          start: 0,
          end: mergedData.length - 1,
          offset: void 0
        };
      }
      var itemTop = 0;
      var startIndex;
      var startOffset;
      var endIndex;
      var dataLen = mergedData.length;
      for (var i3 = 0; i3 < dataLen; i3 += 1) {
        var item = mergedData[i3];
        var key2 = getKey6(item);
        var cacheHeight = heights.get(key2);
        var currentItemBottom = itemTop + (cacheHeight === void 0 ? itemHeight : cacheHeight);
        if (currentItemBottom >= offsetTop && startIndex === void 0) {
          startIndex = i3;
          startOffset = itemTop;
        }
        if (currentItemBottom > offsetTop + height && endIndex === void 0) {
          endIndex = i3;
        }
        itemTop = currentItemBottom;
      }
      if (startIndex === void 0) {
        startIndex = 0;
        startOffset = 0;
        endIndex = Math.ceil(height / itemHeight);
      }
      if (endIndex === void 0) {
        endIndex = mergedData.length - 1;
      }
      endIndex = Math.min(endIndex + 1, mergedData.length - 1);
      return {
        scrollHeight: itemTop,
        start: startIndex,
        end: endIndex,
        offset: startOffset
      };
    }, [inVirtual, useVirtual, offsetTop, mergedData, heightUpdatedMark, height]), scrollHeight = _React$useMemo.scrollHeight, start = _React$useMemo.start, end = _React$useMemo.end, fillerOffset = _React$useMemo.offset;
    rangeRef.current.start = start;
    rangeRef.current.end = end;
    var _React$useState = React95.useState({
      width: 0,
      height
    }), _React$useState2 = _slicedToArray(_React$useState, 2), size = _React$useState2[0], setSize = _React$useState2[1];
    var onHolderResize = function onHolderResize2(sizeInfo) {
      setSize({
        width: sizeInfo.width || sizeInfo.offsetWidth,
        height: sizeInfo.height || sizeInfo.offsetHeight
      });
    };
    var verticalScrollBarRef = (0, import_react36.useRef)();
    var horizontalScrollBarRef = (0, import_react36.useRef)();
    var horizontalScrollBarSpinSize = React95.useMemo(function() {
      return getSpinSize(size.width, scrollWidth);
    }, [size.width, scrollWidth]);
    var verticalScrollBarSpinSize = React95.useMemo(function() {
      return getSpinSize(size.height, scrollHeight);
    }, [size.height, scrollHeight]);
    var maxScrollHeight = scrollHeight - height;
    var maxScrollHeightRef = (0, import_react36.useRef)(maxScrollHeight);
    maxScrollHeightRef.current = maxScrollHeight;
    function keepInRange(newScrollTop) {
      var newTop = newScrollTop;
      if (!Number.isNaN(maxScrollHeightRef.current)) {
        newTop = Math.min(newTop, maxScrollHeightRef.current);
      }
      newTop = Math.max(newTop, 0);
      return newTop;
    }
    var isScrollAtTop = offsetTop <= 0;
    var isScrollAtBottom = offsetTop >= maxScrollHeight;
    var originScroll = useOriginScroll_default(isScrollAtTop, isScrollAtBottom);
    var getVirtualScrollInfo = function getVirtualScrollInfo2() {
      return {
        x: isRTL ? -offsetLeft : offsetLeft,
        y: offsetTop
      };
    };
    var lastVirtualScrollInfoRef = (0, import_react36.useRef)(getVirtualScrollInfo());
    var triggerScroll = useEvent(function() {
      if (onVirtualScroll) {
        var nextInfo = getVirtualScrollInfo();
        if (lastVirtualScrollInfoRef.current.x !== nextInfo.x || lastVirtualScrollInfoRef.current.y !== nextInfo.y) {
          onVirtualScroll(nextInfo);
          lastVirtualScrollInfoRef.current = nextInfo;
        }
      }
    });
    function onScrollBar(newScrollOffset, horizontal) {
      var newOffset = newScrollOffset;
      if (horizontal) {
        (0, import_react_dom8.flushSync)(function() {
          setOffsetLeft(newOffset);
        });
        triggerScroll();
      } else {
        syncScrollTop(newOffset);
      }
    }
    function onFallbackScroll(e3) {
      var newScrollTop = e3.currentTarget.scrollTop;
      if (newScrollTop !== offsetTop) {
        syncScrollTop(newScrollTop);
      }
      onScroll === null || onScroll === void 0 ? void 0 : onScroll(e3);
      triggerScroll();
    }
    var keepInHorizontalRange = function keepInHorizontalRange2(nextOffsetLeft) {
      var tmpOffsetLeft = nextOffsetLeft;
      var max = scrollWidth - size.width;
      tmpOffsetLeft = Math.max(tmpOffsetLeft, 0);
      tmpOffsetLeft = Math.min(tmpOffsetLeft, max);
      return tmpOffsetLeft;
    };
    var onWheelDelta = useEvent(function(offsetXY, fromHorizontal) {
      if (fromHorizontal) {
        (0, import_react_dom8.flushSync)(function() {
          setOffsetLeft(function(left) {
            var nextOffsetLeft = left + (isRTL ? -offsetXY : offsetXY);
            return keepInHorizontalRange(nextOffsetLeft);
          });
        });
        triggerScroll();
      } else {
        syncScrollTop(function(top) {
          var newTop = top + offsetXY;
          return newTop;
        });
      }
    });
    var _useFrameWheel = useFrameWheel(useVirtual, isScrollAtTop, isScrollAtBottom, !!scrollWidth, onWheelDelta), _useFrameWheel2 = _slicedToArray(_useFrameWheel, 2), onRawWheel = _useFrameWheel2[0], onFireFoxScroll = _useFrameWheel2[1];
    useMobileTouchMove(useVirtual, componentRef, function(deltaY, smoothOffset) {
      if (originScroll(deltaY, smoothOffset)) {
        return false;
      }
      onRawWheel({
        preventDefault: function preventDefault() {
        },
        deltaY
      });
      return true;
    });
    useLayoutEffect_default(function() {
      function onMozMousePixelScroll(e3) {
        if (useVirtual) {
          e3.preventDefault();
        }
      }
      var componentEle = componentRef.current;
      componentEle.addEventListener("wheel", onRawWheel);
      componentEle.addEventListener("DOMMouseScroll", onFireFoxScroll);
      componentEle.addEventListener("MozMousePixelScroll", onMozMousePixelScroll);
      return function() {
        componentEle.removeEventListener("wheel", onRawWheel);
        componentEle.removeEventListener("DOMMouseScroll", onFireFoxScroll);
        componentEle.removeEventListener("MozMousePixelScroll", onMozMousePixelScroll);
      };
    }, [useVirtual]);
    useLayoutEffect_default(function() {
      if (scrollWidth) {
        setOffsetLeft(function(left) {
          return keepInHorizontalRange(left);
        });
      }
    }, [size.width, scrollWidth]);
    var delayHideScrollBar = function delayHideScrollBar2() {
      var _verticalScrollBarRef, _horizontalScrollBarR;
      (_verticalScrollBarRef = verticalScrollBarRef.current) === null || _verticalScrollBarRef === void 0 ? void 0 : _verticalScrollBarRef.delayHidden();
      (_horizontalScrollBarR = horizontalScrollBarRef.current) === null || _horizontalScrollBarR === void 0 ? void 0 : _horizontalScrollBarR.delayHidden();
    };
    var _scrollTo = useScrollTo(componentRef, mergedData, heights, itemHeight, getKey6, function() {
      return collectHeight(true);
    }, syncScrollTop, delayHideScrollBar);
    React95.useImperativeHandle(ref, function() {
      return {
        getScrollInfo: getVirtualScrollInfo,
        scrollTo: function scrollTo3(config) {
          function isPosScroll(arg) {
            return arg && _typeof(arg) === "object" && ("left" in arg || "top" in arg);
          }
          if (isPosScroll(config)) {
            if (config.left !== void 0) {
              setOffsetLeft(keepInHorizontalRange(config.left));
            }
            _scrollTo(config.top);
          } else {
            _scrollTo(config);
          }
        }
      };
    });
    useLayoutEffect_default(function() {
      if (onVisibleChange) {
        var renderList = mergedData.slice(start, end + 1);
        onVisibleChange(renderList, mergedData);
      }
    }, [start, end, mergedData]);
    var getSize3 = useGetSize(mergedData, getKey6, heights, itemHeight);
    var extraContent = extraRender === null || extraRender === void 0 ? void 0 : extraRender({
      start,
      end,
      virtual: inVirtual,
      offsetX: offsetLeft,
      offsetY: fillerOffset,
      rtl: isRTL,
      getSize: getSize3
    });
    var listChildren = useChildren(mergedData, start, end, scrollWidth, setInstanceRef, children, sharedConfig);
    var componentStyle = null;
    if (height) {
      componentStyle = _objectSpread2(_defineProperty({}, fullHeight ? "height" : "maxHeight", height), ScrollStyle);
      if (useVirtual) {
        componentStyle.overflowY = "hidden";
        if (scrollWidth) {
          componentStyle.overflowX = "hidden";
        }
        if (scrollMoving) {
          componentStyle.pointerEvents = "none";
        }
      }
    }
    var containerProps = {};
    if (isRTL) {
      containerProps.dir = "rtl";
    }
    return /* @__PURE__ */ React95.createElement("div", _extends({
      style: _objectSpread2(_objectSpread2({}, style3), {}, {
        position: "relative"
      }),
      className: mergedClassName
    }, containerProps, restProps), /* @__PURE__ */ React95.createElement(es_default2, {
      onResize: onHolderResize
    }, /* @__PURE__ */ React95.createElement(Component20, {
      className: "".concat(prefixCls, "-holder"),
      style: componentStyle,
      ref: componentRef,
      onScroll: onFallbackScroll,
      onMouseEnter: delayHideScrollBar
    }, /* @__PURE__ */ React95.createElement(Filler_default, {
      prefixCls,
      height: scrollHeight,
      offsetX: offsetLeft,
      offsetY: fillerOffset,
      scrollWidth,
      onInnerResize: collectHeight,
      ref: fillerInnerRef,
      innerProps,
      rtl: isRTL,
      extra: extraContent
    }, listChildren))), inVirtual && scrollHeight > height && /* @__PURE__ */ React95.createElement(ScrollBar_default, {
      ref: verticalScrollBarRef,
      prefixCls,
      scrollOffset: offsetTop,
      scrollRange: scrollHeight,
      rtl: isRTL,
      onScroll: onScrollBar,
      onStartMove: onScrollbarStartMove,
      onStopMove: onScrollbarStopMove,
      spinSize: verticalScrollBarSpinSize,
      containerSize: size.height,
      style: styles === null || styles === void 0 ? void 0 : styles.verticalScrollBar,
      thumbStyle: styles === null || styles === void 0 ? void 0 : styles.verticalScrollBarThumb
    }), inVirtual && scrollWidth && /* @__PURE__ */ React95.createElement(ScrollBar_default, {
      ref: horizontalScrollBarRef,
      prefixCls,
      scrollOffset: offsetLeft,
      scrollRange: scrollWidth,
      rtl: isRTL,
      onScroll: onScrollBar,
      onStartMove: onScrollbarStartMove,
      onStopMove: onScrollbarStopMove,
      spinSize: horizontalScrollBarSpinSize,
      containerSize: size.width,
      horizontal: true,
      style: styles === null || styles === void 0 ? void 0 : styles.horizontalScrollBar,
      thumbStyle: styles === null || styles === void 0 ? void 0 : styles.horizontalScrollBarThumb
    }));
  }
  var List = /* @__PURE__ */ React95.forwardRef(RawList);
  List.displayName = "List";
  var List_default = List;

  // node_modules/rc-virtual-list/es/index.js
  var es_default8 = List_default;

  // node_modules/rc-select/es/utils/platformUtil.js
  function isPlatformMac() {
    return /(mac\sos|macintosh)/i.test(navigator.appVersion);
  }

  // node_modules/rc-select/es/SelectContext.js
  var React96 = __toESM(require_react());
  var SelectContext = /* @__PURE__ */ React96.createContext(null);
  var SelectContext_default = SelectContext;

  // node_modules/rc-select/es/OptionList.js
  var _excluded16 = ["disabled", "title", "children", "style", "className"];
  function isTitleType2(content) {
    return typeof content === "string" || typeof content === "number";
  }
  var OptionList = function OptionList2(_24, ref) {
    var _useBaseProps = useBaseProps(), prefixCls = _useBaseProps.prefixCls, id2 = _useBaseProps.id, open = _useBaseProps.open, multiple = _useBaseProps.multiple, mode = _useBaseProps.mode, searchValue = _useBaseProps.searchValue, toggleOpen = _useBaseProps.toggleOpen, notFoundContent = _useBaseProps.notFoundContent, onPopupScroll = _useBaseProps.onPopupScroll;
    var _React$useContext = React97.useContext(SelectContext_default), flattenOptions2 = _React$useContext.flattenOptions, onActiveValue = _React$useContext.onActiveValue, defaultActiveFirstOption = _React$useContext.defaultActiveFirstOption, onSelect = _React$useContext.onSelect, menuItemSelectedIcon = _React$useContext.menuItemSelectedIcon, rawValues = _React$useContext.rawValues, fieldNames = _React$useContext.fieldNames, virtual = _React$useContext.virtual, listHeight = _React$useContext.listHeight, listItemHeight = _React$useContext.listItemHeight;
    var itemPrefixCls = "".concat(prefixCls, "-item");
    var memoFlattenOptions = useMemo6(function() {
      return flattenOptions2;
    }, [open, flattenOptions2], function(prev, next) {
      return next[0] && prev[1] !== next[1];
    });
    var listRef = React97.useRef(null);
    var onListMouseDown = function onListMouseDown2(event) {
      event.preventDefault();
    };
    var scrollIntoView2 = function scrollIntoView3(args) {
      if (listRef.current) {
        listRef.current.scrollTo(typeof args === "number" ? {
          index: args
        } : args);
      }
    };
    var getEnabledActiveIndex = function getEnabledActiveIndex2(index2) {
      var offset4 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
      var len = memoFlattenOptions.length;
      for (var i3 = 0; i3 < len; i3 += 1) {
        var current = (index2 + i3 * offset4 + len) % len;
        var _memoFlattenOptions$c = memoFlattenOptions[current], group = _memoFlattenOptions$c.group, data = _memoFlattenOptions$c.data;
        if (!group && !data.disabled) {
          return current;
        }
      }
      return -1;
    };
    var _React$useState = React97.useState(function() {
      return getEnabledActiveIndex(0);
    }), _React$useState2 = _slicedToArray(_React$useState, 2), activeIndex = _React$useState2[0], setActiveIndex = _React$useState2[1];
    var setActive = function setActive2(index2) {
      var fromKeyboard = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      setActiveIndex(index2);
      var info = {
        source: fromKeyboard ? "keyboard" : "mouse"
      };
      var flattenItem = memoFlattenOptions[index2];
      if (!flattenItem) {
        onActiveValue(null, -1, info);
        return;
      }
      onActiveValue(flattenItem.value, index2, info);
    };
    (0, import_react37.useEffect)(function() {
      setActive(defaultActiveFirstOption !== false ? getEnabledActiveIndex(0) : -1);
    }, [memoFlattenOptions.length, searchValue]);
    var isSelected = React97.useCallback(function(value) {
      return rawValues.has(value) && mode !== "combobox";
    }, [mode, _toConsumableArray(rawValues).toString(), rawValues.size]);
    (0, import_react37.useEffect)(function() {
      var timeoutId = setTimeout(function() {
        if (!multiple && open && rawValues.size === 1) {
          var value = Array.from(rawValues)[0];
          var index2 = memoFlattenOptions.findIndex(function(_ref) {
            var data = _ref.data;
            return data.value === value;
          });
          if (index2 !== -1) {
            setActive(index2);
            scrollIntoView2(index2);
          }
        }
      });
      if (open) {
        var _listRef$current;
        (_listRef$current = listRef.current) === null || _listRef$current === void 0 ? void 0 : _listRef$current.scrollTo(void 0);
      }
      return function() {
        return clearTimeout(timeoutId);
      };
    }, [open, searchValue]);
    var onSelectValue = function onSelectValue2(value) {
      if (value !== void 0) {
        onSelect(value, {
          selected: !rawValues.has(value)
        });
      }
      if (!multiple) {
        toggleOpen(false);
      }
    };
    React97.useImperativeHandle(ref, function() {
      return {
        onKeyDown: function onKeyDown3(event) {
          var which = event.which, ctrlKey = event.ctrlKey;
          switch (which) {
            case KeyCode_default.N:
            case KeyCode_default.P:
            case KeyCode_default.UP:
            case KeyCode_default.DOWN: {
              var offset4 = 0;
              if (which === KeyCode_default.UP) {
                offset4 = -1;
              } else if (which === KeyCode_default.DOWN) {
                offset4 = 1;
              } else if (isPlatformMac() && ctrlKey) {
                if (which === KeyCode_default.N) {
                  offset4 = 1;
                } else if (which === KeyCode_default.P) {
                  offset4 = -1;
                }
              }
              if (offset4 !== 0) {
                var nextActiveIndex = getEnabledActiveIndex(activeIndex + offset4, offset4);
                scrollIntoView2(nextActiveIndex);
                setActive(nextActiveIndex, true);
              }
              break;
            }
            case KeyCode_default.ENTER: {
              var item = memoFlattenOptions[activeIndex];
              if (item && !item.data.disabled) {
                onSelectValue(item.value);
              } else {
                onSelectValue(void 0);
              }
              if (open) {
                event.preventDefault();
              }
              break;
            }
            case KeyCode_default.ESC: {
              toggleOpen(false);
              if (open) {
                event.stopPropagation();
              }
            }
          }
        },
        onKeyUp: function onKeyUp() {
        },
        scrollTo: function scrollTo3(index2) {
          scrollIntoView2(index2);
        }
      };
    });
    if (memoFlattenOptions.length === 0) {
      return /* @__PURE__ */ React97.createElement("div", {
        role: "listbox",
        id: "".concat(id2, "_list"),
        className: "".concat(itemPrefixCls, "-empty"),
        onMouseDown: onListMouseDown
      }, notFoundContent);
    }
    var omitFieldNameList = Object.keys(fieldNames).map(function(key2) {
      return fieldNames[key2];
    });
    var getLabel = function getLabel2(item) {
      return item.label;
    };
    var renderItem = function renderItem2(index2) {
      var item = memoFlattenOptions[index2];
      if (!item)
        return null;
      var itemData = item.data || {};
      var value = itemData.value;
      var group = item.group;
      var attrs = pickAttrs(itemData, true);
      var mergedLabel = getLabel(item);
      return item ? /* @__PURE__ */ React97.createElement("div", _extends({
        "aria-label": typeof mergedLabel === "string" && !group ? mergedLabel : null
      }, attrs, {
        key: index2,
        role: group ? "presentation" : "option",
        id: "".concat(id2, "_list_").concat(index2),
        "aria-selected": isSelected(value)
      }), value) : null;
    };
    return /* @__PURE__ */ React97.createElement(React97.Fragment, null, /* @__PURE__ */ React97.createElement("div", {
      role: "listbox",
      id: "".concat(id2, "_list"),
      style: {
        height: 0,
        width: 0,
        overflow: "hidden"
      }
    }, renderItem(activeIndex - 1), renderItem(activeIndex), renderItem(activeIndex + 1)), /* @__PURE__ */ React97.createElement(es_default8, {
      itemKey: "key",
      ref: listRef,
      data: memoFlattenOptions,
      height: listHeight,
      itemHeight: listItemHeight,
      fullHeight: false,
      onMouseDown: onListMouseDown,
      onScroll: onPopupScroll,
      virtual
    }, function(item, itemIndex) {
      var _classNames;
      var group = item.group, groupOption = item.groupOption, data = item.data, label = item.label, value = item.value;
      var key2 = data.key;
      if (group) {
        var _data$title;
        var groupTitle = (_data$title = data.title) !== null && _data$title !== void 0 ? _data$title : isTitleType2(label) ? label.toString() : void 0;
        return /* @__PURE__ */ React97.createElement("div", {
          className: (0, import_classnames25.default)(itemPrefixCls, "".concat(itemPrefixCls, "-group")),
          title: groupTitle
        }, label !== void 0 ? label : key2);
      }
      var disabled = data.disabled, title = data.title, children = data.children, style3 = data.style, className = data.className, otherProps = _objectWithoutProperties(data, _excluded16);
      var passedProps = omit(otherProps, omitFieldNameList);
      var selected = isSelected(value);
      var optionPrefixCls = "".concat(itemPrefixCls, "-option");
      var optionClassName = (0, import_classnames25.default)(itemPrefixCls, optionPrefixCls, className, (_classNames = {}, _defineProperty(_classNames, "".concat(optionPrefixCls, "-grouped"), groupOption), _defineProperty(_classNames, "".concat(optionPrefixCls, "-active"), activeIndex === itemIndex && !disabled), _defineProperty(_classNames, "".concat(optionPrefixCls, "-disabled"), disabled), _defineProperty(_classNames, "".concat(optionPrefixCls, "-selected"), selected), _classNames));
      var mergedLabel = getLabel(item);
      var iconVisible = !menuItemSelectedIcon || typeof menuItemSelectedIcon === "function" || selected;
      var content = typeof mergedLabel === "number" ? mergedLabel : mergedLabel || value;
      var optionTitle = isTitleType2(content) ? content.toString() : void 0;
      if (title !== void 0) {
        optionTitle = title;
      }
      return /* @__PURE__ */ React97.createElement("div", _extends({}, pickAttrs(passedProps), {
        "aria-selected": selected,
        className: optionClassName,
        title: optionTitle,
        onMouseMove: function onMouseMove() {
          if (activeIndex === itemIndex || disabled) {
            return;
          }
          setActive(itemIndex);
        },
        onClick: function onClick() {
          if (!disabled) {
            onSelectValue(value);
          }
        },
        style: style3
      }), /* @__PURE__ */ React97.createElement("div", {
        className: "".concat(optionPrefixCls, "-content")
      }, content), /* @__PURE__ */ React97.isValidElement(menuItemSelectedIcon) || selected, iconVisible && /* @__PURE__ */ React97.createElement(TransBtn_default, {
        className: "".concat(itemPrefixCls, "-option-state"),
        customizeIcon: menuItemSelectedIcon,
        customizeIconProps: {
          isSelected: selected
        }
      }, selected ? "\u2713" : null));
    }));
  };
  var RefOptionList = /* @__PURE__ */ React97.forwardRef(OptionList);
  RefOptionList.displayName = "OptionList";
  var OptionList_default = RefOptionList;

  // node_modules/rc-select/es/utils/warningPropsUtil.js
  var React98 = __toESM(require_react());
  function warningProps(props) {
    var mode = props.mode, options = props.options, children = props.children, backfill = props.backfill, allowClear = props.allowClear, placeholder = props.placeholder, getInputElement = props.getInputElement, showSearch = props.showSearch, onSearch = props.onSearch, defaultOpen = props.defaultOpen, autoFocus = props.autoFocus, labelInValue = props.labelInValue, value = props.value, inputValue = props.inputValue, optionLabelProp = props.optionLabelProp;
    var multiple = isMultiple(mode);
    var mergedShowSearch = showSearch !== void 0 ? showSearch : multiple || mode === "combobox";
    var mergedOptions = options || convertChildrenToData(children);
    warning_default(mode !== "tags" || mergedOptions.every(function(opt) {
      return !opt.disabled;
    }), "Please avoid setting option to disabled in tags mode since user can always type text as tag.");
    if (mode === "tags" || mode === "combobox") {
      var hasNumberValue = mergedOptions.some(function(item) {
        if (item.options) {
          return item.options.some(function(opt) {
            return typeof ("value" in opt ? opt.value : opt.key) === "number";
          });
        }
        return typeof ("value" in item ? item.value : item.key) === "number";
      });
      warning_default(!hasNumberValue, "`value` of Option should not use number type when `mode` is `tags` or `combobox`.");
    }
    warning_default(mode !== "combobox" || !optionLabelProp, "`combobox` mode not support `optionLabelProp`. Please set `value` on Option directly.");
    warning_default(mode === "combobox" || !backfill, "`backfill` only works with `combobox` mode.");
    warning_default(mode === "combobox" || !getInputElement, "`getInputElement` only work with `combobox` mode.");
    noteOnce(mode !== "combobox" || !getInputElement || !allowClear || !placeholder, "Customize `getInputElement` should customize clear and placeholder logic instead of configuring `allowClear` and `placeholder`.");
    if (onSearch && !mergedShowSearch && mode !== "combobox" && mode !== "tags") {
      warning_default(false, "`onSearch` should work with `showSearch` instead of use alone.");
    }
    noteOnce(!defaultOpen || autoFocus, "`defaultOpen` makes Select open without focus which means it will not close by click outside. You can set `autoFocus` if needed.");
    if (value !== void 0 && value !== null) {
      var values = toArray2(value);
      warning_default(!labelInValue || values.every(function(val) {
        return _typeof(val) === "object" && ("key" in val || "value" in val);
      }), "`value` should in shape of `{ value: string | number, label?: ReactNode }` when you set `labelInValue` to `true`");
      warning_default(!multiple || Array.isArray(value), "`value` should be array when `mode` is `multiple` or `tags`");
    }
    if (children) {
      var invalidateChildType = null;
      toArray(children).some(function(node) {
        if (!/* @__PURE__ */ React98.isValidElement(node) || !node.type) {
          return false;
        }
        var _ref = node, type4 = _ref.type;
        if (type4.isSelectOption) {
          return false;
        }
        if (type4.isSelectOptGroup) {
          var allChildrenValid = toArray(node.props.children).every(function(subNode) {
            if (!/* @__PURE__ */ React98.isValidElement(subNode) || !node.type || subNode.type.isSelectOption) {
              return true;
            }
            invalidateChildType = subNode.type;
            return false;
          });
          if (allChildrenValid) {
            return false;
          }
          return true;
        }
        invalidateChildType = type4;
        return true;
      });
      if (invalidateChildType) {
        warning_default(false, "`children` should be `Select.Option` or `Select.OptGroup` instead of `".concat(invalidateChildType.displayName || invalidateChildType.name || invalidateChildType, "`."));
      }
      warning_default(inputValue === void 0, "`inputValue` is deprecated, please use `searchValue` instead.");
    }
  }
  function warningNullOptions(options, fieldNames) {
    if (options) {
      var recursiveOptions = function recursiveOptions2(optionsList) {
        var inGroup = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
        for (var i3 = 0; i3 < optionsList.length; i3++) {
          var option = optionsList[i3];
          if (option[fieldNames === null || fieldNames === void 0 ? void 0 : fieldNames.value] === null) {
            warning_default(false, "`value` in Select options should not be `null`.");
            return true;
          }
          if (!inGroup && Array.isArray(option[fieldNames === null || fieldNames === void 0 ? void 0 : fieldNames.options]) && recursiveOptions2(option[fieldNames === null || fieldNames === void 0 ? void 0 : fieldNames.options], true)) {
            break;
          }
        }
      };
      recursiveOptions(options);
    }
  }
  var warningPropsUtil_default = warningProps;

  // node_modules/rc-select/es/Select.js
  var _excluded17 = ["id", "mode", "prefixCls", "backfill", "fieldNames", "inputValue", "searchValue", "onSearch", "autoClearSearchValue", "onSelect", "onDeselect", "dropdownMatchSelectWidth", "filterOption", "filterSort", "optionFilterProp", "optionLabelProp", "options", "children", "defaultActiveFirstOption", "menuItemSelectedIcon", "virtual", "listHeight", "listItemHeight", "value", "defaultValue", "labelInValue", "onChange"];
  var OMIT_DOM_PROPS = ["inputValue"];
  function isRawValue(value) {
    return !value || _typeof(value) !== "object";
  }
  var Select = /* @__PURE__ */ React99.forwardRef(function(props, ref) {
    var id2 = props.id, mode = props.mode, _props$prefixCls = props.prefixCls, prefixCls = _props$prefixCls === void 0 ? "rc-select" : _props$prefixCls, backfill = props.backfill, fieldNames = props.fieldNames, inputValue = props.inputValue, searchValue = props.searchValue, onSearch = props.onSearch, _props$autoClearSearc = props.autoClearSearchValue, autoClearSearchValue = _props$autoClearSearc === void 0 ? true : _props$autoClearSearc, onSelect = props.onSelect, onDeselect = props.onDeselect, _props$dropdownMatchS = props.dropdownMatchSelectWidth, dropdownMatchSelectWidth = _props$dropdownMatchS === void 0 ? true : _props$dropdownMatchS, filterOption = props.filterOption, filterSort = props.filterSort, optionFilterProp = props.optionFilterProp, optionLabelProp = props.optionLabelProp, options = props.options, children = props.children, defaultActiveFirstOption = props.defaultActiveFirstOption, menuItemSelectedIcon = props.menuItemSelectedIcon, virtual = props.virtual, _props$listHeight = props.listHeight, listHeight = _props$listHeight === void 0 ? 200 : _props$listHeight, _props$listItemHeight = props.listItemHeight, listItemHeight = _props$listItemHeight === void 0 ? 20 : _props$listItemHeight, value = props.value, defaultValue = props.defaultValue, labelInValue = props.labelInValue, onChange = props.onChange, restProps = _objectWithoutProperties(props, _excluded17);
    var mergedId = useId(id2);
    var multiple = isMultiple(mode);
    var childrenAsData = !!(!options && children);
    var mergedFilterOption = React99.useMemo(function() {
      if (filterOption === void 0 && mode === "combobox") {
        return false;
      }
      return filterOption;
    }, [filterOption, mode]);
    var mergedFieldNames = React99.useMemo(
      function() {
        return fillFieldNames(fieldNames, childrenAsData);
      },
      /* eslint-disable react-hooks/exhaustive-deps */
      [
        // We stringify fieldNames to avoid unnecessary re-renders.
        JSON.stringify(fieldNames),
        childrenAsData
      ]
      /* eslint-enable react-hooks/exhaustive-deps */
    );
    var _useMergedState = useMergedState("", {
      value: searchValue !== void 0 ? searchValue : inputValue,
      postState: function postState(search) {
        return search || "";
      }
    }), _useMergedState2 = _slicedToArray(_useMergedState, 2), mergedSearchValue = _useMergedState2[0], setSearchValue = _useMergedState2[1];
    var parsedOptions = useOptions(options, children, mergedFieldNames, optionFilterProp, optionLabelProp);
    var valueOptions = parsedOptions.valueOptions, labelOptions = parsedOptions.labelOptions, mergedOptions = parsedOptions.options;
    var convert2LabelValues = React99.useCallback(function(draftValues) {
      var valueList = toArray2(draftValues);
      return valueList.map(function(val) {
        var rawValue;
        var rawLabel;
        var rawKey;
        var rawDisabled;
        var rawTitle;
        if (isRawValue(val)) {
          rawValue = val;
        } else {
          var _val$value;
          rawKey = val.key;
          rawLabel = val.label;
          rawValue = (_val$value = val.value) !== null && _val$value !== void 0 ? _val$value : rawKey;
        }
        var option = valueOptions.get(rawValue);
        if (option) {
          var _option$key;
          if (rawLabel === void 0)
            rawLabel = option === null || option === void 0 ? void 0 : option[optionLabelProp || mergedFieldNames.label];
          if (rawKey === void 0)
            rawKey = (_option$key = option === null || option === void 0 ? void 0 : option.key) !== null && _option$key !== void 0 ? _option$key : rawValue;
          rawDisabled = option === null || option === void 0 ? void 0 : option.disabled;
          rawTitle = option === null || option === void 0 ? void 0 : option.title;
          if (!optionLabelProp) {
            var optionLabel = option === null || option === void 0 ? void 0 : option[mergedFieldNames.label];
            if (optionLabel !== void 0 && !/* @__PURE__ */ React99.isValidElement(optionLabel) && !/* @__PURE__ */ React99.isValidElement(rawLabel) && optionLabel !== rawLabel) {
              warning_default(false, "`label` of `value` is not same as `label` in Select options.");
            }
          }
        }
        return {
          label: rawLabel,
          value: rawValue,
          key: rawKey,
          disabled: rawDisabled,
          title: rawTitle
        };
      });
    }, [mergedFieldNames, optionLabelProp, valueOptions]);
    var _useMergedState3 = useMergedState(defaultValue, {
      value
    }), _useMergedState4 = _slicedToArray(_useMergedState3, 2), internalValue = _useMergedState4[0], setInternalValue = _useMergedState4[1];
    var rawLabeledValues = React99.useMemo(function() {
      var _values$;
      var values = convert2LabelValues(internalValue);
      if (mode === "combobox" && !((_values$ = values[0]) !== null && _values$ !== void 0 && _values$.value)) {
        return [];
      }
      return values;
    }, [internalValue, convert2LabelValues, mode]);
    var _useCache = useCache_default(rawLabeledValues, valueOptions), _useCache2 = _slicedToArray(_useCache, 2), mergedValues = _useCache2[0], getMixedOption = _useCache2[1];
    var displayValues = React99.useMemo(function() {
      if (!mode && mergedValues.length === 1) {
        var firstValue = mergedValues[0];
        if (firstValue.value === null && (firstValue.label === null || firstValue.label === void 0)) {
          return [];
        }
      }
      return mergedValues.map(function(item) {
        var _item$label;
        return _objectSpread2(_objectSpread2({}, item), {}, {
          label: (_item$label = item.label) !== null && _item$label !== void 0 ? _item$label : item.value
        });
      });
    }, [mode, mergedValues]);
    var rawValues = React99.useMemo(function() {
      return new Set(mergedValues.map(function(val) {
        return val.value;
      }));
    }, [mergedValues]);
    React99.useEffect(function() {
      if (mode === "combobox") {
        var _mergedValues$;
        var strValue = (_mergedValues$ = mergedValues[0]) === null || _mergedValues$ === void 0 ? void 0 : _mergedValues$.value;
        setSearchValue(hasValue2(strValue) ? String(strValue) : "");
      }
    }, [mergedValues]);
    var createTagOption = useRefFunc(function(val, label) {
      var _ref;
      var mergedLabel = label !== null && label !== void 0 ? label : val;
      return _ref = {}, _defineProperty(_ref, mergedFieldNames.value, val), _defineProperty(_ref, mergedFieldNames.label, mergedLabel), _ref;
    });
    var filledTagOptions = React99.useMemo(function() {
      if (mode !== "tags") {
        return mergedOptions;
      }
      var cloneOptions = _toConsumableArray(mergedOptions);
      var existOptions = function existOptions2(val) {
        return valueOptions.has(val);
      };
      _toConsumableArray(mergedValues).sort(function(a2, b2) {
        return a2.value < b2.value ? -1 : 1;
      }).forEach(function(item) {
        var val = item.value;
        if (!existOptions(val)) {
          cloneOptions.push(createTagOption(val, item.label));
        }
      });
      return cloneOptions;
    }, [createTagOption, mergedOptions, valueOptions, mergedValues, mode]);
    var filteredOptions = useFilterOptions_default(filledTagOptions, mergedFieldNames, mergedSearchValue, mergedFilterOption, optionFilterProp);
    var filledSearchOptions = React99.useMemo(function() {
      if (mode !== "tags" || !mergedSearchValue || filteredOptions.some(function(item) {
        return item[optionFilterProp || "value"] === mergedSearchValue;
      })) {
        return filteredOptions;
      }
      return [createTagOption(mergedSearchValue)].concat(_toConsumableArray(filteredOptions));
    }, [createTagOption, optionFilterProp, mode, filteredOptions, mergedSearchValue]);
    var orderedFilteredOptions = React99.useMemo(function() {
      if (!filterSort) {
        return filledSearchOptions;
      }
      return _toConsumableArray(filledSearchOptions).sort(function(a2, b2) {
        return filterSort(a2, b2);
      });
    }, [filledSearchOptions, filterSort]);
    var displayOptions = React99.useMemo(function() {
      return flattenOptions(orderedFilteredOptions, {
        fieldNames: mergedFieldNames,
        childrenAsData
      });
    }, [orderedFilteredOptions, mergedFieldNames, childrenAsData]);
    var triggerChange = function triggerChange2(values) {
      var labeledValues = convert2LabelValues(values);
      setInternalValue(labeledValues);
      if (onChange && // Trigger event only when value changed
      (labeledValues.length !== mergedValues.length || labeledValues.some(function(newVal, index2) {
        var _mergedValues$index;
        return ((_mergedValues$index = mergedValues[index2]) === null || _mergedValues$index === void 0 ? void 0 : _mergedValues$index.value) !== (newVal === null || newVal === void 0 ? void 0 : newVal.value);
      }))) {
        var returnValues = labelInValue ? labeledValues : labeledValues.map(function(v2) {
          return v2.value;
        });
        var returnOptions = labeledValues.map(function(v2) {
          return injectPropsWithOption(getMixedOption(v2.value));
        });
        onChange(
          // Value
          multiple ? returnValues : returnValues[0],
          // Option
          multiple ? returnOptions : returnOptions[0]
        );
      }
    };
    var _React$useState = React99.useState(null), _React$useState2 = _slicedToArray(_React$useState, 2), activeValue = _React$useState2[0], setActiveValue = _React$useState2[1];
    var _React$useState3 = React99.useState(0), _React$useState4 = _slicedToArray(_React$useState3, 2), accessibilityIndex = _React$useState4[0], setAccessibilityIndex = _React$useState4[1];
    var mergedDefaultActiveFirstOption = defaultActiveFirstOption !== void 0 ? defaultActiveFirstOption : mode !== "combobox";
    var onActiveValue = React99.useCallback(function(active, index2) {
      var _ref2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, _ref2$source = _ref2.source, source = _ref2$source === void 0 ? "keyboard" : _ref2$source;
      setAccessibilityIndex(index2);
      if (backfill && mode === "combobox" && active !== null && source === "keyboard") {
        setActiveValue(String(active));
      }
    }, [backfill, mode]);
    var triggerSelect = function triggerSelect2(val, selected, type4) {
      var getSelectEnt = function getSelectEnt2() {
        var _option$key2;
        var option = getMixedOption(val);
        return [labelInValue ? {
          label: option === null || option === void 0 ? void 0 : option[mergedFieldNames.label],
          value: val,
          key: (_option$key2 = option === null || option === void 0 ? void 0 : option.key) !== null && _option$key2 !== void 0 ? _option$key2 : val
        } : val, injectPropsWithOption(option)];
      };
      if (selected && onSelect) {
        var _getSelectEnt = getSelectEnt(), _getSelectEnt2 = _slicedToArray(_getSelectEnt, 2), wrappedValue = _getSelectEnt2[0], _option = _getSelectEnt2[1];
        onSelect(wrappedValue, _option);
      } else if (!selected && onDeselect && type4 !== "clear") {
        var _getSelectEnt3 = getSelectEnt(), _getSelectEnt4 = _slicedToArray(_getSelectEnt3, 2), _wrappedValue = _getSelectEnt4[0], _option2 = _getSelectEnt4[1];
        onDeselect(_wrappedValue, _option2);
      }
    };
    var onInternalSelect = useRefFunc(function(val, info) {
      var cloneValues;
      var mergedSelect = multiple ? info.selected : true;
      if (mergedSelect) {
        cloneValues = multiple ? [].concat(_toConsumableArray(mergedValues), [val]) : [val];
      } else {
        cloneValues = mergedValues.filter(function(v2) {
          return v2.value !== val;
        });
      }
      triggerChange(cloneValues);
      triggerSelect(val, mergedSelect);
      if (mode === "combobox") {
        setActiveValue("");
      } else if (!isMultiple || autoClearSearchValue) {
        setSearchValue("");
        setActiveValue("");
      }
    });
    var onDisplayValuesChange = function onDisplayValuesChange2(nextValues, info) {
      triggerChange(nextValues);
      var type4 = info.type, values = info.values;
      if (type4 === "remove" || type4 === "clear") {
        values.forEach(function(item) {
          triggerSelect(item.value, false, type4);
        });
      }
    };
    var onInternalSearch = function onInternalSearch2(searchText, info) {
      setSearchValue(searchText);
      setActiveValue(null);
      if (info.source === "submit") {
        var formatted = (searchText || "").trim();
        if (formatted) {
          var newRawValues = Array.from(new Set([].concat(_toConsumableArray(rawValues), [formatted])));
          triggerChange(newRawValues);
          triggerSelect(formatted, true);
          setSearchValue("");
        }
        return;
      }
      if (info.source !== "blur") {
        if (mode === "combobox") {
          triggerChange(searchText);
        }
        onSearch === null || onSearch === void 0 ? void 0 : onSearch(searchText);
      }
    };
    var onInternalSearchSplit = function onInternalSearchSplit2(words) {
      var patchValues = words;
      if (mode !== "tags") {
        patchValues = words.map(function(word) {
          var opt = labelOptions.get(word);
          return opt === null || opt === void 0 ? void 0 : opt.value;
        }).filter(function(val) {
          return val !== void 0;
        });
      }
      var newRawValues = Array.from(new Set([].concat(_toConsumableArray(rawValues), _toConsumableArray(patchValues))));
      triggerChange(newRawValues);
      newRawValues.forEach(function(newRawValue) {
        triggerSelect(newRawValue, true);
      });
    };
    var selectContext = React99.useMemo(function() {
      var realVirtual = virtual !== false && dropdownMatchSelectWidth !== false;
      return _objectSpread2(_objectSpread2({}, parsedOptions), {}, {
        flattenOptions: displayOptions,
        onActiveValue,
        defaultActiveFirstOption: mergedDefaultActiveFirstOption,
        onSelect: onInternalSelect,
        menuItemSelectedIcon,
        rawValues,
        fieldNames: mergedFieldNames,
        virtual: realVirtual,
        listHeight,
        listItemHeight,
        childrenAsData
      });
    }, [parsedOptions, displayOptions, onActiveValue, mergedDefaultActiveFirstOption, onInternalSelect, menuItemSelectedIcon, rawValues, mergedFieldNames, virtual, dropdownMatchSelectWidth, listHeight, listItemHeight, childrenAsData]);
    if (true) {
      warningPropsUtil_default(props);
      warningNullOptions(mergedOptions, mergedFieldNames);
    }
    return /* @__PURE__ */ React99.createElement(SelectContext_default.Provider, {
      value: selectContext
    }, /* @__PURE__ */ React99.createElement(BaseSelect_default, _extends({}, restProps, {
      // >>> MISC
      id: mergedId,
      prefixCls,
      ref,
      omitDomProps: OMIT_DOM_PROPS,
      mode,
      displayValues,
      onDisplayValuesChange,
      searchValue: mergedSearchValue,
      onSearch: onInternalSearch,
      autoClearSearchValue,
      onSearchSplit: onInternalSearchSplit,
      dropdownMatchSelectWidth,
      OptionList: OptionList_default,
      emptyOptions: !displayOptions.length,
      activeValue,
      activeDescendantId: "".concat(mergedId, "_list_").concat(accessibilityIndex)
    })));
  });
  if (true) {
    Select.displayName = "Select";
  }
  var TypedSelect = Select;
  TypedSelect.Option = Option_default;
  TypedSelect.OptGroup = OptGroup_default;
  var Select_default = TypedSelect;

  // node_modules/rc-select/es/index.js
  var es_default9 = Select_default;

  // node_modules/antd/es/select/index.js
  var React119 = __toESM(require_react());
  var import_react40 = __toESM(require_react());

  // node_modules/antd/es/config-provider/defaultRenderEmpty.js
  var React103 = __toESM(require_react());

  // node_modules/antd/es/empty/index.js
  var import_classnames26 = __toESM(require_classnames());
  var React102 = __toESM(require_react());

  // node_modules/antd/es/empty/empty.js
  var React100 = __toESM(require_react());
  var Empty = function Empty2() {
    var _React$useContext = React100.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls;
    var prefixCls = getPrefixCls("empty-img-default");
    return /* @__PURE__ */ React100.createElement("svg", {
      className: prefixCls,
      width: "184",
      height: "152",
      viewBox: "0 0 184 152",
      xmlns: "http://www.w3.org/2000/svg"
    }, /* @__PURE__ */ React100.createElement("g", {
      fill: "none",
      fillRule: "evenodd"
    }, /* @__PURE__ */ React100.createElement("g", {
      transform: "translate(24 31.67)"
    }, /* @__PURE__ */ React100.createElement("ellipse", {
      className: "".concat(prefixCls, "-ellipse"),
      cx: "67.797",
      cy: "106.89",
      rx: "67.797",
      ry: "12.668"
    }), /* @__PURE__ */ React100.createElement("path", {
      className: "".concat(prefixCls, "-path-1"),
      d: "M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z"
    }), /* @__PURE__ */ React100.createElement("path", {
      className: "".concat(prefixCls, "-path-2"),
      d: "M101.537 86.214L80.63 61.102c-1.001-1.207-2.507-1.867-4.048-1.867H31.724c-1.54 0-3.047.66-4.048 1.867L6.769 86.214v13.792h94.768V86.214z",
      transform: "translate(13.56)"
    }), /* @__PURE__ */ React100.createElement("path", {
      className: "".concat(prefixCls, "-path-3"),
      d: "M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z"
    }), /* @__PURE__ */ React100.createElement("path", {
      className: "".concat(prefixCls, "-path-4"),
      d: "M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z"
    })), /* @__PURE__ */ React100.createElement("path", {
      className: "".concat(prefixCls, "-path-5"),
      d: "M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z"
    }), /* @__PURE__ */ React100.createElement("g", {
      className: "".concat(prefixCls, "-g"),
      transform: "translate(149.65 15.383)"
    }, /* @__PURE__ */ React100.createElement("ellipse", {
      cx: "20.654",
      cy: "3.167",
      rx: "2.849",
      ry: "2.815"
    }), /* @__PURE__ */ React100.createElement("path", {
      d: "M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z"
    }))));
  };
  var empty_default = Empty;

  // node_modules/antd/es/empty/simple.js
  var React101 = __toESM(require_react());
  var Simple = function Simple2() {
    var _React$useContext = React101.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls;
    var prefixCls = getPrefixCls("empty-img-simple");
    return /* @__PURE__ */ React101.createElement("svg", {
      className: prefixCls,
      width: "64",
      height: "41",
      viewBox: "0 0 64 41",
      xmlns: "http://www.w3.org/2000/svg"
    }, /* @__PURE__ */ React101.createElement("g", {
      transform: "translate(0 1)",
      fill: "none",
      fillRule: "evenodd"
    }, /* @__PURE__ */ React101.createElement("ellipse", {
      className: "".concat(prefixCls, "-ellipse"),
      cx: "32",
      cy: "33",
      rx: "32",
      ry: "7"
    }), /* @__PURE__ */ React101.createElement("g", {
      className: "".concat(prefixCls, "-g"),
      fillRule: "nonzero"
    }, /* @__PURE__ */ React101.createElement("path", {
      d: "M55 12.76L44.854 1.258C44.367.474 43.656 0 42.907 0H21.093c-.749 0-1.46.474-1.947 1.257L9 12.761V22h46v-9.24z"
    }), /* @__PURE__ */ React101.createElement("path", {
      d: "M41.613 15.931c0-1.605.994-2.93 2.227-2.931H55v18.137C55 33.26 53.68 35 52.05 35h-40.1C10.32 35 9 33.259 9 31.137V13h11.16c1.233 0 2.227 1.323 2.227 2.928v.022c0 1.605 1.005 2.901 2.237 2.901h14.752c1.232 0 2.237-1.308 2.237-2.913v-.007z",
      className: "".concat(prefixCls, "-path")
    }))));
  };
  var simple_default = Simple;

  // node_modules/antd/es/empty/index.js
  var __rest = function(s2, e3) {
    var t4 = {};
    for (var p2 in s2)
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t4[p2] = s2[p2];
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t4[p2[i3]] = s2[p2[i3]];
      }
    return t4;
  };
  var defaultEmptyImg = /* @__PURE__ */ React102.createElement(empty_default, null);
  var simpleEmptyImg = /* @__PURE__ */ React102.createElement(simple_default, null);
  var Empty3 = function Empty4(_a) {
    var className = _a.className, customizePrefixCls = _a.prefixCls, _a$image = _a.image, image = _a$image === void 0 ? defaultEmptyImg : _a$image, description = _a.description, children = _a.children, imageStyle = _a.imageStyle, restProps = __rest(_a, ["className", "prefixCls", "image", "description", "children", "imageStyle"]);
    var _React$useContext = React102.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls, direction = _React$useContext.direction;
    return /* @__PURE__ */ React102.createElement(LocaleReceiver_default, {
      componentName: "Empty"
    }, function(contextLocale) {
      var _classNames;
      var prefixCls = getPrefixCls("empty", customizePrefixCls);
      var des = typeof description !== "undefined" ? description : contextLocale.description;
      var alt = typeof des === "string" ? des : "empty";
      var imageNode = null;
      if (typeof image === "string") {
        imageNode = /* @__PURE__ */ React102.createElement("img", {
          alt,
          src: image
        });
      } else {
        imageNode = image;
      }
      return /* @__PURE__ */ React102.createElement("div", _extends({
        className: (0, import_classnames26.default)(prefixCls, (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-normal"), image === simpleEmptyImg), _defineProperty(_classNames, "".concat(prefixCls, "-rtl"), direction === "rtl"), _classNames), className)
      }, restProps), /* @__PURE__ */ React102.createElement("div", {
        className: "".concat(prefixCls, "-image"),
        style: imageStyle
      }, imageNode), des && /* @__PURE__ */ React102.createElement("div", {
        className: "".concat(prefixCls, "-description")
      }, des), children && /* @__PURE__ */ React102.createElement("div", {
        className: "".concat(prefixCls, "-footer")
      }, children));
    });
  };
  Empty3.PRESENTED_IMAGE_DEFAULT = defaultEmptyImg;
  Empty3.PRESENTED_IMAGE_SIMPLE = simpleEmptyImg;
  var empty_default2 = Empty3;

  // node_modules/antd/es/config-provider/defaultRenderEmpty.js
  var defaultRenderEmpty = function defaultRenderEmpty2(componentName) {
    return /* @__PURE__ */ React103.createElement(ConfigConsumer, null, function(_ref) {
      var getPrefixCls = _ref.getPrefixCls;
      var prefix2 = getPrefixCls("empty");
      switch (componentName) {
        case "Table":
        case "List":
          return /* @__PURE__ */ React103.createElement(empty_default2, {
            image: empty_default2.PRESENTED_IMAGE_SIMPLE
          });
        case "Select":
        case "TreeSelect":
        case "Cascader":
        case "Transfer":
        case "Mentions":
          return /* @__PURE__ */ React103.createElement(empty_default2, {
            image: empty_default2.PRESENTED_IMAGE_SIMPLE,
            className: "".concat(prefix2, "-small")
          });
        default:
          return /* @__PURE__ */ React103.createElement(empty_default2, null);
      }
    });
  };
  var defaultRenderEmpty_default = defaultRenderEmpty;

  // node_modules/rc-field-form/es/index.js
  var React112 = __toESM(require_react());

  // node_modules/rc-field-form/es/Field.js
  var React107 = __toESM(require_react());

  // node_modules/rc-field-form/es/FieldContext.js
  var React104 = __toESM(require_react());
  var HOOK_MARK = "RC_FORM_INTERNAL_HOOKS";
  var warningFunc = function warningFunc2() {
    warning_default(false, "Can not find FormContext. Please make sure you wrap Field under Form.");
  };
  var Context2 = /* @__PURE__ */ React104.createContext({
    getFieldValue: warningFunc,
    getFieldsValue: warningFunc,
    getFieldError: warningFunc,
    getFieldWarning: warningFunc,
    getFieldsError: warningFunc,
    isFieldsTouched: warningFunc,
    isFieldTouched: warningFunc,
    isFieldValidating: warningFunc,
    isFieldsValidating: warningFunc,
    resetFields: warningFunc,
    setFields: warningFunc,
    setFieldValue: warningFunc,
    setFieldsValue: warningFunc,
    validateFields: warningFunc,
    submit: warningFunc,
    getInternalHooks: function getInternalHooks() {
      warningFunc();
      return {
        dispatch: warningFunc,
        initEntityValue: warningFunc,
        registerField: warningFunc,
        useSubscribe: warningFunc,
        setInitialValues: warningFunc,
        destroyForm: warningFunc,
        setCallbacks: warningFunc,
        registerWatch: warningFunc,
        getFields: warningFunc,
        setValidateMessages: warningFunc,
        setPreserve: warningFunc,
        getInitialValue: warningFunc
      };
    }
  });
  var FieldContext_default = Context2;

  // node_modules/rc-field-form/es/ListContext.js
  var React105 = __toESM(require_react());
  var ListContext = /* @__PURE__ */ React105.createContext(null);
  var ListContext_default = ListContext;

  // node_modules/rc-field-form/es/utils/typeUtil.js
  function toArray3(value) {
    if (value === void 0 || value === null) {
      return [];
    }
    return Array.isArray(value) ? value : [value];
  }
  function isFormInstance(form) {
    return form && !!form._init;
  }

  // node_modules/async-validator/dist-web/index.js
  function _extends5() {
    _extends5 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i3 = 1; i3 < arguments.length; i3++) {
        var source = arguments[i3];
        for (var key2 in source) {
          if (Object.prototype.hasOwnProperty.call(source, key2)) {
            target[key2] = source[key2];
          }
        }
      }
      return target;
    };
    return _extends5.apply(this, arguments);
  }
  function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    _setPrototypeOf2(subClass, superClass);
  }
  function _getPrototypeOf2(o3) {
    _getPrototypeOf2 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf5(o4) {
      return o4.__proto__ || Object.getPrototypeOf(o4);
    };
    return _getPrototypeOf2(o3);
  }
  function _setPrototypeOf2(o3, p2) {
    _setPrototypeOf2 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf5(o4, p3) {
      o4.__proto__ = p3;
      return o4;
    };
    return _setPrototypeOf2(o3, p2);
  }
  function _isNativeReflectConstruct2() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e3) {
      return false;
    }
  }
  function _construct(Parent, args, Class) {
    if (_isNativeReflectConstruct2()) {
      _construct = Reflect.construct.bind();
    } else {
      _construct = function _construct2(Parent2, args2, Class2) {
        var a2 = [null];
        a2.push.apply(a2, args2);
        var Constructor = Function.bind.apply(Parent2, a2);
        var instance2 = new Constructor();
        if (Class2)
          _setPrototypeOf2(instance2, Class2.prototype);
        return instance2;
      };
    }
    return _construct.apply(null, arguments);
  }
  function _isNativeFunction(fn2) {
    return Function.toString.call(fn2).indexOf("[native code]") !== -1;
  }
  function _wrapNativeSuper(Class) {
    var _cache = typeof Map === "function" ? /* @__PURE__ */ new Map() : void 0;
    _wrapNativeSuper = function _wrapNativeSuper2(Class2) {
      if (Class2 === null || !_isNativeFunction(Class2))
        return Class2;
      if (typeof Class2 !== "function") {
        throw new TypeError("Super expression must either be null or a function");
      }
      if (typeof _cache !== "undefined") {
        if (_cache.has(Class2))
          return _cache.get(Class2);
        _cache.set(Class2, Wrapper);
      }
      function Wrapper() {
        return _construct(Class2, arguments, _getPrototypeOf2(this).constructor);
      }
      Wrapper.prototype = Object.create(Class2.prototype, {
        constructor: {
          value: Wrapper,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
      return _setPrototypeOf2(Wrapper, Class2);
    };
    return _wrapNativeSuper(Class);
  }
  var formatRegExp = /%[sdj%]/g;
  var warning8 = function warning9() {
  };
  if (typeof process !== "undefined" && process.env && true && typeof window !== "undefined" && typeof document !== "undefined") {
    warning8 = function warning12(type4, errors) {
      if (typeof console !== "undefined" && console.warn && typeof ASYNC_VALIDATOR_NO_WARNING === "undefined") {
        if (errors.every(function(e3) {
          return typeof e3 === "string";
        })) {
          console.warn(type4, errors);
        }
      }
    };
  }
  function convertFieldsError(errors) {
    if (!errors || !errors.length)
      return null;
    var fields = {};
    errors.forEach(function(error2) {
      var field = error2.field;
      fields[field] = fields[field] || [];
      fields[field].push(error2);
    });
    return fields;
  }
  function format(template) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    var i3 = 0;
    var len = args.length;
    if (typeof template === "function") {
      return template.apply(null, args);
    }
    if (typeof template === "string") {
      var str = template.replace(formatRegExp, function(x2) {
        if (x2 === "%%") {
          return "%";
        }
        if (i3 >= len) {
          return x2;
        }
        switch (x2) {
          case "%s":
            return String(args[i3++]);
          case "%d":
            return Number(args[i3++]);
          case "%j":
            try {
              return JSON.stringify(args[i3++]);
            } catch (_24) {
              return "[Circular]";
            }
            break;
          default:
            return x2;
        }
      });
      return str;
    }
    return template;
  }
  function isNativeStringType(type4) {
    return type4 === "string" || type4 === "url" || type4 === "hex" || type4 === "email" || type4 === "date" || type4 === "pattern";
  }
  function isEmptyValue(value, type4) {
    if (value === void 0 || value === null) {
      return true;
    }
    if (type4 === "array" && Array.isArray(value) && !value.length) {
      return true;
    }
    if (isNativeStringType(type4) && typeof value === "string" && !value) {
      return true;
    }
    return false;
  }
  function asyncParallelArray(arr, func, callback) {
    var results = [];
    var total = 0;
    var arrLength = arr.length;
    function count(errors) {
      results.push.apply(results, errors || []);
      total++;
      if (total === arrLength) {
        callback(results);
      }
    }
    arr.forEach(function(a2) {
      func(a2, count);
    });
  }
  function asyncSerialArray(arr, func, callback) {
    var index2 = 0;
    var arrLength = arr.length;
    function next(errors) {
      if (errors && errors.length) {
        callback(errors);
        return;
      }
      var original = index2;
      index2 = index2 + 1;
      if (original < arrLength) {
        func(arr[original], next);
      } else {
        callback([]);
      }
    }
    next([]);
  }
  function flattenObjArr(objArr) {
    var ret = [];
    Object.keys(objArr).forEach(function(k2) {
      ret.push.apply(ret, objArr[k2] || []);
    });
    return ret;
  }
  var AsyncValidationError = /* @__PURE__ */ function(_Error) {
    _inheritsLoose(AsyncValidationError2, _Error);
    function AsyncValidationError2(errors, fields) {
      var _this;
      _this = _Error.call(this, "Async Validation Error") || this;
      _this.errors = errors;
      _this.fields = fields;
      return _this;
    }
    return AsyncValidationError2;
  }(/* @__PURE__ */ _wrapNativeSuper(Error));
  function asyncMap(objArr, option, func, callback, source) {
    if (option.first) {
      var _pending = new Promise(function(resolve, reject) {
        var next = function next2(errors) {
          callback(errors);
          return errors.length ? reject(new AsyncValidationError(errors, convertFieldsError(errors))) : resolve(source);
        };
        var flattenArr = flattenObjArr(objArr);
        asyncSerialArray(flattenArr, func, next);
      });
      _pending["catch"](function(e3) {
        return e3;
      });
      return _pending;
    }
    var firstFields = option.firstFields === true ? Object.keys(objArr) : option.firstFields || [];
    var objArrKeys = Object.keys(objArr);
    var objArrLength = objArrKeys.length;
    var total = 0;
    var results = [];
    var pending = new Promise(function(resolve, reject) {
      var next = function next2(errors) {
        results.push.apply(results, errors);
        total++;
        if (total === objArrLength) {
          callback(results);
          return results.length ? reject(new AsyncValidationError(results, convertFieldsError(results))) : resolve(source);
        }
      };
      if (!objArrKeys.length) {
        callback(results);
        resolve(source);
      }
      objArrKeys.forEach(function(key2) {
        var arr = objArr[key2];
        if (firstFields.indexOf(key2) !== -1) {
          asyncSerialArray(arr, func, next);
        } else {
          asyncParallelArray(arr, func, next);
        }
      });
    });
    pending["catch"](function(e3) {
      return e3;
    });
    return pending;
  }
  function isErrorObj(obj) {
    return !!(obj && obj.message !== void 0);
  }
  function getValue2(value, path2) {
    var v2 = value;
    for (var i3 = 0; i3 < path2.length; i3++) {
      if (v2 == void 0) {
        return v2;
      }
      v2 = v2[path2[i3]];
    }
    return v2;
  }
  function complementError(rule, source) {
    return function(oe) {
      var fieldValue;
      if (rule.fullFields) {
        fieldValue = getValue2(source, rule.fullFields);
      } else {
        fieldValue = source[oe.field || rule.fullField];
      }
      if (isErrorObj(oe)) {
        oe.field = oe.field || rule.fullField;
        oe.fieldValue = fieldValue;
        return oe;
      }
      return {
        message: typeof oe === "function" ? oe() : oe,
        fieldValue,
        field: oe.field || rule.fullField
      };
    };
  }
  function deepMerge(target, source) {
    if (source) {
      for (var s2 in source) {
        if (source.hasOwnProperty(s2)) {
          var value = source[s2];
          if (typeof value === "object" && typeof target[s2] === "object") {
            target[s2] = _extends5({}, target[s2], value);
          } else {
            target[s2] = value;
          }
        }
      }
    }
    return target;
  }
  var required$1 = function required(rule, value, source, errors, options, type4) {
    if (rule.required && (!source.hasOwnProperty(rule.field) || isEmptyValue(value, type4 || rule.type))) {
      errors.push(format(options.messages.required, rule.fullField));
    }
  };
  var whitespace = function whitespace2(rule, value, source, errors, options) {
    if (/^\s+$/.test(value) || value === "") {
      errors.push(format(options.messages.whitespace, rule.fullField));
    }
  };
  var urlReg;
  var getUrlRegex = function() {
    if (urlReg) {
      return urlReg;
    }
    var word = "[a-fA-F\\d:]";
    var b2 = function b3(options) {
      return options && options.includeBoundaries ? "(?:(?<=\\s|^)(?=" + word + ")|(?<=" + word + ")(?=\\s|$))" : "";
    };
    var v4 = "(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}";
    var v6seg = "[a-fA-F\\d]{1,4}";
    var v6 = ("\n(?:\n(?:" + v6seg + ":){7}(?:" + v6seg + "|:)|                                    // 1:2:3:4:5:6:7::  1:2:3:4:5:6:7:8\n(?:" + v6seg + ":){6}(?:" + v4 + "|:" + v6seg + "|:)|                             // 1:2:3:4:5:6::    1:2:3:4:5:6::8   1:2:3:4:5:6::8  1:2:3:4:5:6::1.2.3.4\n(?:" + v6seg + ":){5}(?::" + v4 + "|(?::" + v6seg + "){1,2}|:)|                   // 1:2:3:4:5::      1:2:3:4:5::7:8   1:2:3:4:5::8    1:2:3:4:5::7:1.2.3.4\n(?:" + v6seg + ":){4}(?:(?::" + v6seg + "){0,1}:" + v4 + "|(?::" + v6seg + "){1,3}|:)| // 1:2:3:4::        1:2:3:4::6:7:8   1:2:3:4::8      1:2:3:4::6:7:1.2.3.4\n(?:" + v6seg + ":){3}(?:(?::" + v6seg + "){0,2}:" + v4 + "|(?::" + v6seg + "){1,4}|:)| // 1:2:3::          1:2:3::5:6:7:8   1:2:3::8        1:2:3::5:6:7:1.2.3.4\n(?:" + v6seg + ":){2}(?:(?::" + v6seg + "){0,3}:" + v4 + "|(?::" + v6seg + "){1,5}|:)| // 1:2::            1:2::4:5:6:7:8   1:2::8          1:2::4:5:6:7:1.2.3.4\n(?:" + v6seg + ":){1}(?:(?::" + v6seg + "){0,4}:" + v4 + "|(?::" + v6seg + "){1,6}|:)| // 1::              1::3:4:5:6:7:8   1::8            1::3:4:5:6:7:1.2.3.4\n(?::(?:(?::" + v6seg + "){0,5}:" + v4 + "|(?::" + v6seg + "){1,7}|:))             // ::2:3:4:5:6:7:8  ::2:3:4:5:6:7:8  ::8             ::1.2.3.4\n)(?:%[0-9a-zA-Z]{1,})?                                             // %eth0            %1\n").replace(/\s*\/\/.*$/gm, "").replace(/\n/g, "").trim();
    var v46Exact = new RegExp("(?:^" + v4 + "$)|(?:^" + v6 + "$)");
    var v4exact = new RegExp("^" + v4 + "$");
    var v6exact = new RegExp("^" + v6 + "$");
    var ip = function ip2(options) {
      return options && options.exact ? v46Exact : new RegExp("(?:" + b2(options) + v4 + b2(options) + ")|(?:" + b2(options) + v6 + b2(options) + ")", "g");
    };
    ip.v4 = function(options) {
      return options && options.exact ? v4exact : new RegExp("" + b2(options) + v4 + b2(options), "g");
    };
    ip.v6 = function(options) {
      return options && options.exact ? v6exact : new RegExp("" + b2(options) + v6 + b2(options), "g");
    };
    var protocol = "(?:(?:[a-z]+:)?//)";
    var auth = "(?:\\S+(?::\\S*)?@)?";
    var ipv4 = ip.v4().source;
    var ipv6 = ip.v6().source;
    var host = "(?:(?:[a-z\\u00a1-\\uffff0-9][-_]*)*[a-z\\u00a1-\\uffff0-9]+)";
    var domain = "(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*";
    var tld = "(?:\\.(?:[a-z\\u00a1-\\uffff]{2,}))";
    var port = "(?::\\d{2,5})?";
    var path2 = '(?:[/?#][^\\s"]*)?';
    var regex = "(?:" + protocol + "|www\\.)" + auth + "(?:localhost|" + ipv4 + "|" + ipv6 + "|" + host + domain + tld + ")" + port + path2;
    urlReg = new RegExp("(?:^" + regex + "$)", "i");
    return urlReg;
  };
  var pattern$2 = {
    // http://emailregex.com/
    email: /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+\.)+[a-zA-Z\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]{2,}))$/,
    // url: new RegExp(
    //   '^(?!mailto:)(?:(?:http|https|ftp)://|//)(?:\\S+(?::\\S*)?@)?(?:(?:(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[0-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]+-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]+-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))|localhost)(?::\\d{2,5})?(?:(/|\\?|#)[^\\s]*)?$',
    //   'i',
    // ),
    hex: /^#?([a-f0-9]{6}|[a-f0-9]{3})$/i
  };
  var types = {
    integer: function integer(value) {
      return types.number(value) && parseInt(value, 10) === value;
    },
    "float": function float(value) {
      return types.number(value) && !types.integer(value);
    },
    array: function array(value) {
      return Array.isArray(value);
    },
    regexp: function regexp(value) {
      if (value instanceof RegExp) {
        return true;
      }
      try {
        return !!new RegExp(value);
      } catch (e3) {
        return false;
      }
    },
    date: function date(value) {
      return typeof value.getTime === "function" && typeof value.getMonth === "function" && typeof value.getYear === "function" && !isNaN(value.getTime());
    },
    number: function number(value) {
      if (isNaN(value)) {
        return false;
      }
      return typeof value === "number";
    },
    object: function object(value) {
      return typeof value === "object" && !types.array(value);
    },
    method: function method(value) {
      return typeof value === "function";
    },
    email: function email(value) {
      return typeof value === "string" && value.length <= 320 && !!value.match(pattern$2.email);
    },
    url: function url(value) {
      return typeof value === "string" && value.length <= 2048 && !!value.match(getUrlRegex());
    },
    hex: function hex(value) {
      return typeof value === "string" && !!value.match(pattern$2.hex);
    }
  };
  var type$1 = function type(rule, value, source, errors, options) {
    if (rule.required && value === void 0) {
      required$1(rule, value, source, errors, options);
      return;
    }
    var custom = ["integer", "float", "array", "regexp", "object", "method", "email", "number", "date", "url", "hex"];
    var ruleType = rule.type;
    if (custom.indexOf(ruleType) > -1) {
      if (!types[ruleType](value)) {
        errors.push(format(options.messages.types[ruleType], rule.fullField, rule.type));
      }
    } else if (ruleType && typeof value !== rule.type) {
      errors.push(format(options.messages.types[ruleType], rule.fullField, rule.type));
    }
  };
  var range = function range2(rule, value, source, errors, options) {
    var len = typeof rule.len === "number";
    var min = typeof rule.min === "number";
    var max = typeof rule.max === "number";
    var spRegexp = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
    var val = value;
    var key2 = null;
    var num = typeof value === "number";
    var str = typeof value === "string";
    var arr = Array.isArray(value);
    if (num) {
      key2 = "number";
    } else if (str) {
      key2 = "string";
    } else if (arr) {
      key2 = "array";
    }
    if (!key2) {
      return false;
    }
    if (arr) {
      val = value.length;
    }
    if (str) {
      val = value.replace(spRegexp, "_").length;
    }
    if (len) {
      if (val !== rule.len) {
        errors.push(format(options.messages[key2].len, rule.fullField, rule.len));
      }
    } else if (min && !max && val < rule.min) {
      errors.push(format(options.messages[key2].min, rule.fullField, rule.min));
    } else if (max && !min && val > rule.max) {
      errors.push(format(options.messages[key2].max, rule.fullField, rule.max));
    } else if (min && max && (val < rule.min || val > rule.max)) {
      errors.push(format(options.messages[key2].range, rule.fullField, rule.min, rule.max));
    }
  };
  var ENUM$1 = "enum";
  var enumerable$1 = function enumerable(rule, value, source, errors, options) {
    rule[ENUM$1] = Array.isArray(rule[ENUM$1]) ? rule[ENUM$1] : [];
    if (rule[ENUM$1].indexOf(value) === -1) {
      errors.push(format(options.messages[ENUM$1], rule.fullField, rule[ENUM$1].join(", ")));
    }
  };
  var pattern$1 = function pattern(rule, value, source, errors, options) {
    if (rule.pattern) {
      if (rule.pattern instanceof RegExp) {
        rule.pattern.lastIndex = 0;
        if (!rule.pattern.test(value)) {
          errors.push(format(options.messages.pattern.mismatch, rule.fullField, value, rule.pattern));
        }
      } else if (typeof rule.pattern === "string") {
        var _pattern = new RegExp(rule.pattern);
        if (!_pattern.test(value)) {
          errors.push(format(options.messages.pattern.mismatch, rule.fullField, value, rule.pattern));
        }
      }
    }
  };
  var rules = {
    required: required$1,
    whitespace,
    type: type$1,
    range,
    "enum": enumerable$1,
    pattern: pattern$1
  };
  var string = function string2(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
      if (isEmptyValue(value, "string") && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors, options, "string");
      if (!isEmptyValue(value, "string")) {
        rules.type(rule, value, source, errors, options);
        rules.range(rule, value, source, errors, options);
        rules.pattern(rule, value, source, errors, options);
        if (rule.whitespace === true) {
          rules.whitespace(rule, value, source, errors, options);
        }
      }
    }
    callback(errors);
  };
  var method2 = function method3(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
      if (isEmptyValue(value) && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors, options);
      if (value !== void 0) {
        rules.type(rule, value, source, errors, options);
      }
    }
    callback(errors);
  };
  var number2 = function number3(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
      if (value === "") {
        value = void 0;
      }
      if (isEmptyValue(value) && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors, options);
      if (value !== void 0) {
        rules.type(rule, value, source, errors, options);
        rules.range(rule, value, source, errors, options);
      }
    }
    callback(errors);
  };
  var _boolean = function _boolean2(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
      if (isEmptyValue(value) && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors, options);
      if (value !== void 0) {
        rules.type(rule, value, source, errors, options);
      }
    }
    callback(errors);
  };
  var regexp2 = function regexp3(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
      if (isEmptyValue(value) && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors, options);
      if (!isEmptyValue(value)) {
        rules.type(rule, value, source, errors, options);
      }
    }
    callback(errors);
  };
  var integer2 = function integer3(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
      if (isEmptyValue(value) && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors, options);
      if (value !== void 0) {
        rules.type(rule, value, source, errors, options);
        rules.range(rule, value, source, errors, options);
      }
    }
    callback(errors);
  };
  var floatFn = function floatFn2(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
      if (isEmptyValue(value) && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors, options);
      if (value !== void 0) {
        rules.type(rule, value, source, errors, options);
        rules.range(rule, value, source, errors, options);
      }
    }
    callback(errors);
  };
  var array2 = function array3(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
      if ((value === void 0 || value === null) && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors, options, "array");
      if (value !== void 0 && value !== null) {
        rules.type(rule, value, source, errors, options);
        rules.range(rule, value, source, errors, options);
      }
    }
    callback(errors);
  };
  var object2 = function object3(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
      if (isEmptyValue(value) && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors, options);
      if (value !== void 0) {
        rules.type(rule, value, source, errors, options);
      }
    }
    callback(errors);
  };
  var ENUM = "enum";
  var enumerable2 = function enumerable3(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
      if (isEmptyValue(value) && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors, options);
      if (value !== void 0) {
        rules[ENUM](rule, value, source, errors, options);
      }
    }
    callback(errors);
  };
  var pattern2 = function pattern3(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
      if (isEmptyValue(value, "string") && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors, options);
      if (!isEmptyValue(value, "string")) {
        rules.pattern(rule, value, source, errors, options);
      }
    }
    callback(errors);
  };
  var date2 = function date3(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
      if (isEmptyValue(value, "date") && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors, options);
      if (!isEmptyValue(value, "date")) {
        var dateObject;
        if (value instanceof Date) {
          dateObject = value;
        } else {
          dateObject = new Date(value);
        }
        rules.type(rule, dateObject, source, errors, options);
        if (dateObject) {
          rules.range(rule, dateObject.getTime(), source, errors, options);
        }
      }
    }
    callback(errors);
  };
  var required2 = function required3(rule, value, callback, source, options) {
    var errors = [];
    var type4 = Array.isArray(value) ? "array" : typeof value;
    rules.required(rule, value, source, errors, options, type4);
    callback(errors);
  };
  var type2 = function type3(rule, value, callback, source, options) {
    var ruleType = rule.type;
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
      if (isEmptyValue(value, ruleType) && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors, options, ruleType);
      if (!isEmptyValue(value, ruleType)) {
        rules.type(rule, value, source, errors, options);
      }
    }
    callback(errors);
  };
  var any = function any2(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
      if (isEmptyValue(value) && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors, options);
    }
    callback(errors);
  };
  var validators = {
    string,
    method: method2,
    number: number2,
    "boolean": _boolean,
    regexp: regexp2,
    integer: integer2,
    "float": floatFn,
    array: array2,
    object: object2,
    "enum": enumerable2,
    pattern: pattern2,
    date: date2,
    url: type2,
    hex: type2,
    email: type2,
    required: required2,
    any
  };
  function newMessages() {
    return {
      "default": "Validation error on field %s",
      required: "%s is required",
      "enum": "%s must be one of %s",
      whitespace: "%s cannot be empty",
      date: {
        format: "%s date %s is invalid for format %s",
        parse: "%s date could not be parsed, %s is invalid ",
        invalid: "%s date %s is invalid"
      },
      types: {
        string: "%s is not a %s",
        method: "%s is not a %s (function)",
        array: "%s is not an %s",
        object: "%s is not an %s",
        number: "%s is not a %s",
        date: "%s is not a %s",
        "boolean": "%s is not a %s",
        integer: "%s is not an %s",
        "float": "%s is not a %s",
        regexp: "%s is not a valid %s",
        email: "%s is not a valid %s",
        url: "%s is not a valid %s",
        hex: "%s is not a valid %s"
      },
      string: {
        len: "%s must be exactly %s characters",
        min: "%s must be at least %s characters",
        max: "%s cannot be longer than %s characters",
        range: "%s must be between %s and %s characters"
      },
      number: {
        len: "%s must equal %s",
        min: "%s cannot be less than %s",
        max: "%s cannot be greater than %s",
        range: "%s must be between %s and %s"
      },
      array: {
        len: "%s must be exactly %s in length",
        min: "%s cannot be less than %s in length",
        max: "%s cannot be greater than %s in length",
        range: "%s must be between %s and %s in length"
      },
      pattern: {
        mismatch: "%s value %s does not match pattern %s"
      },
      clone: function clone2() {
        var cloned = JSON.parse(JSON.stringify(this));
        cloned.clone = this.clone;
        return cloned;
      }
    };
  }
  var messages = newMessages();
  var Schema = /* @__PURE__ */ function() {
    function Schema2(descriptor) {
      this.rules = null;
      this._messages = messages;
      this.define(descriptor);
    }
    var _proto = Schema2.prototype;
    _proto.define = function define2(rules2) {
      var _this = this;
      if (!rules2) {
        throw new Error("Cannot configure a schema with no rules");
      }
      if (typeof rules2 !== "object" || Array.isArray(rules2)) {
        throw new Error("Rules must be an object");
      }
      this.rules = {};
      Object.keys(rules2).forEach(function(name) {
        var item = rules2[name];
        _this.rules[name] = Array.isArray(item) ? item : [item];
      });
    };
    _proto.messages = function messages2(_messages) {
      if (_messages) {
        this._messages = deepMerge(newMessages(), _messages);
      }
      return this._messages;
    };
    _proto.validate = function validate(source_, o3, oc) {
      var _this2 = this;
      if (o3 === void 0) {
        o3 = {};
      }
      if (oc === void 0) {
        oc = function oc2() {
        };
      }
      var source = source_;
      var options = o3;
      var callback = oc;
      if (typeof options === "function") {
        callback = options;
        options = {};
      }
      if (!this.rules || Object.keys(this.rules).length === 0) {
        if (callback) {
          callback(null, source);
        }
        return Promise.resolve(source);
      }
      function complete(results) {
        var errors = [];
        var fields = {};
        function add(e3) {
          if (Array.isArray(e3)) {
            var _errors;
            errors = (_errors = errors).concat.apply(_errors, e3);
          } else {
            errors.push(e3);
          }
        }
        for (var i3 = 0; i3 < results.length; i3++) {
          add(results[i3]);
        }
        if (!errors.length) {
          callback(null, source);
        } else {
          fields = convertFieldsError(errors);
          callback(errors, fields);
        }
      }
      if (options.messages) {
        var messages$1 = this.messages();
        if (messages$1 === messages) {
          messages$1 = newMessages();
        }
        deepMerge(messages$1, options.messages);
        options.messages = messages$1;
      } else {
        options.messages = this.messages();
      }
      var series = {};
      var keys2 = options.keys || Object.keys(this.rules);
      keys2.forEach(function(z2) {
        var arr = _this2.rules[z2];
        var value = source[z2];
        arr.forEach(function(r4) {
          var rule = r4;
          if (typeof rule.transform === "function") {
            if (source === source_) {
              source = _extends5({}, source);
            }
            value = source[z2] = rule.transform(value);
          }
          if (typeof rule === "function") {
            rule = {
              validator: rule
            };
          } else {
            rule = _extends5({}, rule);
          }
          rule.validator = _this2.getValidationMethod(rule);
          if (!rule.validator) {
            return;
          }
          rule.field = z2;
          rule.fullField = rule.fullField || z2;
          rule.type = _this2.getType(rule);
          series[z2] = series[z2] || [];
          series[z2].push({
            rule,
            value,
            source,
            field: z2
          });
        });
      });
      var errorFields = {};
      return asyncMap(series, options, function(data, doIt) {
        var rule = data.rule;
        var deep = (rule.type === "object" || rule.type === "array") && (typeof rule.fields === "object" || typeof rule.defaultField === "object");
        deep = deep && (rule.required || !rule.required && data.value);
        rule.field = data.field;
        function addFullField(key2, schema) {
          return _extends5({}, schema, {
            fullField: rule.fullField + "." + key2,
            fullFields: rule.fullFields ? [].concat(rule.fullFields, [key2]) : [key2]
          });
        }
        function cb(e3) {
          if (e3 === void 0) {
            e3 = [];
          }
          var errorList = Array.isArray(e3) ? e3 : [e3];
          if (!options.suppressWarning && errorList.length) {
            Schema2.warning("async-validator:", errorList);
          }
          if (errorList.length && rule.message !== void 0) {
            errorList = [].concat(rule.message);
          }
          var filledErrors = errorList.map(complementError(rule, source));
          if (options.first && filledErrors.length) {
            errorFields[rule.field] = 1;
            return doIt(filledErrors);
          }
          if (!deep) {
            doIt(filledErrors);
          } else {
            if (rule.required && !data.value) {
              if (rule.message !== void 0) {
                filledErrors = [].concat(rule.message).map(complementError(rule, source));
              } else if (options.error) {
                filledErrors = [options.error(rule, format(options.messages.required, rule.field))];
              }
              return doIt(filledErrors);
            }
            var fieldsSchema = {};
            if (rule.defaultField) {
              Object.keys(data.value).map(function(key2) {
                fieldsSchema[key2] = rule.defaultField;
              });
            }
            fieldsSchema = _extends5({}, fieldsSchema, data.rule.fields);
            var paredFieldsSchema = {};
            Object.keys(fieldsSchema).forEach(function(field) {
              var fieldSchema = fieldsSchema[field];
              var fieldSchemaList = Array.isArray(fieldSchema) ? fieldSchema : [fieldSchema];
              paredFieldsSchema[field] = fieldSchemaList.map(addFullField.bind(null, field));
            });
            var schema = new Schema2(paredFieldsSchema);
            schema.messages(options.messages);
            if (data.rule.options) {
              data.rule.options.messages = options.messages;
              data.rule.options.error = options.error;
            }
            schema.validate(data.value, data.rule.options || options, function(errs) {
              var finalErrors = [];
              if (filledErrors && filledErrors.length) {
                finalErrors.push.apply(finalErrors, filledErrors);
              }
              if (errs && errs.length) {
                finalErrors.push.apply(finalErrors, errs);
              }
              doIt(finalErrors.length ? finalErrors : null);
            });
          }
        }
        var res;
        if (rule.asyncValidator) {
          res = rule.asyncValidator(rule, data.value, cb, data.source, options);
        } else if (rule.validator) {
          try {
            res = rule.validator(rule, data.value, cb, data.source, options);
          } catch (error2) {
            console.error == null ? void 0 : console.error(error2);
            if (!options.suppressValidatorError) {
              setTimeout(function() {
                throw error2;
              }, 0);
            }
            cb(error2.message);
          }
          if (res === true) {
            cb();
          } else if (res === false) {
            cb(typeof rule.message === "function" ? rule.message(rule.fullField || rule.field) : rule.message || (rule.fullField || rule.field) + " fails");
          } else if (res instanceof Array) {
            cb(res);
          } else if (res instanceof Error) {
            cb(res.message);
          }
        }
        if (res && res.then) {
          res.then(function() {
            return cb();
          }, function(e3) {
            return cb(e3);
          });
        }
      }, function(results) {
        complete(results);
      }, source);
    };
    _proto.getType = function getType(rule) {
      if (rule.type === void 0 && rule.pattern instanceof RegExp) {
        rule.type = "pattern";
      }
      if (typeof rule.validator !== "function" && rule.type && !validators.hasOwnProperty(rule.type)) {
        throw new Error(format("Unknown rule type %s", rule.type));
      }
      return rule.type || "string";
    };
    _proto.getValidationMethod = function getValidationMethod(rule) {
      if (typeof rule.validator === "function") {
        return rule.validator;
      }
      var keys2 = Object.keys(rule);
      var messageIndex = keys2.indexOf("message");
      if (messageIndex !== -1) {
        keys2.splice(messageIndex, 1);
      }
      if (keys2.length === 1 && keys2[0] === "required") {
        return validators.required;
      }
      return validators[this.getType(rule)] || void 0;
    };
    return Schema2;
  }();
  Schema.register = function register(type4, validator) {
    if (typeof validator !== "function") {
      throw new Error("Cannot register a validator by type, validator is not a function");
    }
    validators[type4] = validator;
  };
  Schema.warning = warning8;
  Schema.messages = messages;
  Schema.validators = validators;

  // node_modules/rc-field-form/es/utils/validateUtil.js
  var React106 = __toESM(require_react());

  // node_modules/rc-field-form/es/utils/messages.js
  var typeTemplate2 = "'${name}' is not a valid ${type}";
  var defaultValidateMessages = {
    default: "Validation error on field '${name}'",
    required: "'${name}' is required",
    enum: "'${name}' must be one of [${enum}]",
    whitespace: "'${name}' cannot be empty",
    date: {
      format: "'${name}' is invalid for format date",
      parse: "'${name}' could not be parsed as date",
      invalid: "'${name}' is invalid date"
    },
    types: {
      string: typeTemplate2,
      method: typeTemplate2,
      array: typeTemplate2,
      object: typeTemplate2,
      number: typeTemplate2,
      date: typeTemplate2,
      boolean: typeTemplate2,
      integer: typeTemplate2,
      float: typeTemplate2,
      regexp: typeTemplate2,
      email: typeTemplate2,
      url: typeTemplate2,
      hex: typeTemplate2
    },
    string: {
      len: "'${name}' must be exactly ${len} characters",
      min: "'${name}' must be at least ${min} characters",
      max: "'${name}' cannot be longer than ${max} characters",
      range: "'${name}' must be between ${min} and ${max} characters"
    },
    number: {
      len: "'${name}' must equal ${len}",
      min: "'${name}' cannot be less than ${min}",
      max: "'${name}' cannot be greater than ${max}",
      range: "'${name}' must be between ${min} and ${max}"
    },
    array: {
      len: "'${name}' must be exactly ${len} in length",
      min: "'${name}' cannot be less than ${min} in length",
      max: "'${name}' cannot be greater than ${max} in length",
      range: "'${name}' must be between ${min} and ${max} in length"
    },
    pattern: {
      mismatch: "'${name}' does not match pattern ${pattern}"
    }
  };

  // node_modules/rc-field-form/es/utils/validateUtil.js
  var AsyncValidator = Schema;
  function replaceMessage(template, kv) {
    return template.replace(/\$\{\w+\}/g, function(str) {
      var key2 = str.slice(2, -1);
      return kv[key2];
    });
  }
  var CODE_LOGIC_ERROR = "CODE_LOGIC_ERROR";
  function validateRule(_x, _x2, _x3, _x4, _x5) {
    return _validateRule.apply(this, arguments);
  }
  function _validateRule() {
    _validateRule = _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime().mark(function _callee2(name, value, rule, options, messageVariables) {
      var cloneRule, originValidator, subRuleField, validator, messages2, result2, subResults, kv, fillVariableResult;
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1)
          switch (_context2.prev = _context2.next) {
            case 0:
              cloneRule = _objectSpread2({}, rule);
              delete cloneRule.ruleIndex;
              AsyncValidator.warning = function() {
                return void 0;
              };
              if (cloneRule.validator) {
                originValidator = cloneRule.validator;
                cloneRule.validator = function() {
                  try {
                    return originValidator.apply(void 0, arguments);
                  } catch (error2) {
                    console.error(error2);
                    return Promise.reject(CODE_LOGIC_ERROR);
                  }
                };
              }
              subRuleField = null;
              if (cloneRule && cloneRule.type === "array" && cloneRule.defaultField) {
                subRuleField = cloneRule.defaultField;
                delete cloneRule.defaultField;
              }
              validator = new AsyncValidator(_defineProperty({}, name, [cloneRule]));
              messages2 = merge(defaultValidateMessages, options.validateMessages);
              validator.messages(messages2);
              result2 = [];
              _context2.prev = 10;
              _context2.next = 13;
              return Promise.resolve(validator.validate(_defineProperty({}, name, value), _objectSpread2({}, options)));
            case 13:
              _context2.next = 18;
              break;
            case 15:
              _context2.prev = 15;
              _context2.t0 = _context2["catch"](10);
              if (_context2.t0.errors) {
                result2 = _context2.t0.errors.map(function(_ref4, index2) {
                  var message = _ref4.message;
                  var mergedMessage = message === CODE_LOGIC_ERROR ? messages2.default : message;
                  return /* @__PURE__ */ React106.isValidElement(mergedMessage) ? (
                    // Wrap ReactNode with `key`
                    /* @__PURE__ */ React106.cloneElement(mergedMessage, {
                      key: "error_".concat(index2)
                    })
                  ) : mergedMessage;
                });
              }
            case 18:
              if (!(!result2.length && subRuleField)) {
                _context2.next = 23;
                break;
              }
              _context2.next = 21;
              return Promise.all(value.map(function(subValue, i3) {
                return validateRule("".concat(name, ".").concat(i3), subValue, subRuleField, options, messageVariables);
              }));
            case 21:
              subResults = _context2.sent;
              return _context2.abrupt("return", subResults.reduce(function(prev, errors) {
                return [].concat(_toConsumableArray(prev), _toConsumableArray(errors));
              }, []));
            case 23:
              kv = _objectSpread2(_objectSpread2({}, rule), {}, {
                name,
                enum: (rule.enum || []).join(", ")
              }, messageVariables);
              fillVariableResult = result2.map(function(error2) {
                if (typeof error2 === "string") {
                  return replaceMessage(error2, kv);
                }
                return error2;
              });
              return _context2.abrupt("return", fillVariableResult);
            case 26:
            case "end":
              return _context2.stop();
          }
      }, _callee2, null, [[10, 15]]);
    }));
    return _validateRule.apply(this, arguments);
  }
  function validateRules(namePath, value, rules2, options, validateFirst, messageVariables) {
    var name = namePath.join(".");
    var filledRules = rules2.map(function(currentRule, ruleIndex) {
      var originValidatorFunc = currentRule.validator;
      var cloneRule = _objectSpread2(_objectSpread2({}, currentRule), {}, {
        ruleIndex
      });
      if (originValidatorFunc) {
        cloneRule.validator = function(rule, val, callback) {
          var hasPromise = false;
          var wrappedCallback = function wrappedCallback2() {
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }
            Promise.resolve().then(function() {
              warning_default(!hasPromise, "Your validator function has already return a promise. `callback` will be ignored.");
              if (!hasPromise) {
                callback.apply(void 0, args);
              }
            });
          };
          var promise2 = originValidatorFunc(rule, val, wrappedCallback);
          hasPromise = promise2 && typeof promise2.then === "function" && typeof promise2.catch === "function";
          warning_default(hasPromise, "`callback` is deprecated. Please return a promise instead.");
          if (hasPromise) {
            promise2.then(function() {
              callback();
            }).catch(function(err) {
              callback(err || " ");
            });
          }
        };
      }
      return cloneRule;
    }).sort(function(_ref, _ref2) {
      var w1 = _ref.warningOnly, i1 = _ref.ruleIndex;
      var w2 = _ref2.warningOnly, i22 = _ref2.ruleIndex;
      if (!!w1 === !!w2) {
        return i1 - i22;
      }
      if (w1) {
        return 1;
      }
      return -1;
    });
    var summaryPromise;
    if (validateFirst === true) {
      summaryPromise = new Promise(/* @__PURE__ */ function() {
        var _ref3 = _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime().mark(function _callee(resolve, reject) {
          var i3, rule, errors;
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1)
              switch (_context.prev = _context.next) {
                case 0:
                  i3 = 0;
                case 1:
                  if (!(i3 < filledRules.length)) {
                    _context.next = 12;
                    break;
                  }
                  rule = filledRules[i3];
                  _context.next = 5;
                  return validateRule(name, value, rule, options, messageVariables);
                case 5:
                  errors = _context.sent;
                  if (!errors.length) {
                    _context.next = 9;
                    break;
                  }
                  reject([{
                    errors,
                    rule
                  }]);
                  return _context.abrupt("return");
                case 9:
                  i3 += 1;
                  _context.next = 1;
                  break;
                case 12:
                  resolve([]);
                case 13:
                case "end":
                  return _context.stop();
              }
          }, _callee);
        }));
        return function(_x6, _x7) {
          return _ref3.apply(this, arguments);
        };
      }());
    } else {
      var rulePromises = filledRules.map(function(rule) {
        return validateRule(name, value, rule, options, messageVariables).then(function(errors) {
          return {
            errors,
            rule
          };
        });
      });
      summaryPromise = (validateFirst ? finishOnFirstFailed(rulePromises) : finishOnAllFailed(rulePromises)).then(function(errors) {
        return Promise.reject(errors);
      });
    }
    summaryPromise.catch(function(e3) {
      return e3;
    });
    return summaryPromise;
  }
  function finishOnAllFailed(_x8) {
    return _finishOnAllFailed.apply(this, arguments);
  }
  function _finishOnAllFailed() {
    _finishOnAllFailed = _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime().mark(function _callee3(rulePromises) {
      return _regeneratorRuntime().wrap(function _callee3$(_context3) {
        while (1)
          switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.abrupt("return", Promise.all(rulePromises).then(function(errorsList) {
                var _ref5;
                var errors = (_ref5 = []).concat.apply(_ref5, _toConsumableArray(errorsList));
                return errors;
              }));
            case 1:
            case "end":
              return _context3.stop();
          }
      }, _callee3);
    }));
    return _finishOnAllFailed.apply(this, arguments);
  }
  function finishOnFirstFailed(_x9) {
    return _finishOnFirstFailed.apply(this, arguments);
  }
  function _finishOnFirstFailed() {
    _finishOnFirstFailed = _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime().mark(function _callee4(rulePromises) {
      var count;
      return _regeneratorRuntime().wrap(function _callee4$(_context4) {
        while (1)
          switch (_context4.prev = _context4.next) {
            case 0:
              count = 0;
              return _context4.abrupt("return", new Promise(function(resolve) {
                rulePromises.forEach(function(promise2) {
                  promise2.then(function(ruleError) {
                    if (ruleError.errors.length) {
                      resolve([ruleError]);
                    }
                    count += 1;
                    if (count === rulePromises.length) {
                      resolve([]);
                    }
                  });
                });
              }));
            case 2:
            case "end":
              return _context4.stop();
          }
      }, _callee4);
    }));
    return _finishOnFirstFailed.apply(this, arguments);
  }

  // node_modules/rc-field-form/es/utils/valueUtil.js
  function getNamePath(path2) {
    return toArray3(path2);
  }
  function cloneByNamePathList(store3, namePathList) {
    var newStore = {};
    namePathList.forEach(function(namePath) {
      var value = get(store3, namePath);
      newStore = set(newStore, namePath, value);
    });
    return newStore;
  }
  function containsNamePath(namePathList, namePath) {
    return namePathList && namePathList.some(function(path2) {
      return matchNamePath(path2, namePath);
    });
  }
  function matchNamePath(namePath, changedNamePath) {
    if (!namePath || !changedNamePath || namePath.length !== changedNamePath.length) {
      return false;
    }
    return namePath.every(function(nameUnit, i3) {
      return changedNamePath[i3] === nameUnit;
    });
  }
  function isSimilar(source, target) {
    if (source === target) {
      return true;
    }
    if (!source && target || source && !target) {
      return false;
    }
    if (!source || !target || _typeof(source) !== "object" || _typeof(target) !== "object") {
      return false;
    }
    var sourceKeys = Object.keys(source);
    var targetKeys = Object.keys(target);
    var keys2 = new Set([].concat(sourceKeys, targetKeys));
    return _toConsumableArray(keys2).every(function(key2) {
      var sourceValue = source[key2];
      var targetValue = target[key2];
      if (typeof sourceValue === "function" && typeof targetValue === "function") {
        return true;
      }
      return sourceValue === targetValue;
    });
  }
  function defaultGetValueFromEvent(valuePropName) {
    var event = arguments.length <= 1 ? void 0 : arguments[1];
    if (event && event.target && _typeof(event.target) === "object" && valuePropName in event.target) {
      return event.target[valuePropName];
    }
    return event;
  }
  function move(array4, moveIndex, toIndex) {
    var length = array4.length;
    if (moveIndex < 0 || moveIndex >= length || toIndex < 0 || toIndex >= length) {
      return array4;
    }
    var item = array4[moveIndex];
    var diff = moveIndex - toIndex;
    if (diff > 0) {
      return [].concat(_toConsumableArray(array4.slice(0, toIndex)), [item], _toConsumableArray(array4.slice(toIndex, moveIndex)), _toConsumableArray(array4.slice(moveIndex + 1, length)));
    }
    if (diff < 0) {
      return [].concat(_toConsumableArray(array4.slice(0, moveIndex)), _toConsumableArray(array4.slice(moveIndex + 1, toIndex + 1)), [item], _toConsumableArray(array4.slice(toIndex + 1, length)));
    }
    return array4;
  }

  // node_modules/rc-field-form/es/Field.js
  var _excluded18 = ["name"];
  var EMPTY_ERRORS = [];
  function requireUpdate(shouldUpdate, prev, next, prevValue, nextValue, info) {
    if (typeof shouldUpdate === "function") {
      return shouldUpdate(prev, next, "source" in info ? {
        source: info.source
      } : {});
    }
    return prevValue !== nextValue;
  }
  var Field = /* @__PURE__ */ function(_React$Component) {
    _inherits(Field2, _React$Component);
    var _super = _createSuper(Field2);
    function Field2(props) {
      var _this;
      _classCallCheck(this, Field2);
      _this = _super.call(this, props);
      _this.state = {
        resetCount: 0
      };
      _this.cancelRegisterFunc = null;
      _this.mounted = false;
      _this.touched = false;
      _this.dirty = false;
      _this.validatePromise = void 0;
      _this.prevValidating = void 0;
      _this.errors = EMPTY_ERRORS;
      _this.warnings = EMPTY_ERRORS;
      _this.cancelRegister = function() {
        var _this$props = _this.props, preserve = _this$props.preserve, isListField = _this$props.isListField, name = _this$props.name;
        if (_this.cancelRegisterFunc) {
          _this.cancelRegisterFunc(isListField, preserve, getNamePath(name));
        }
        _this.cancelRegisterFunc = null;
      };
      _this.getNamePath = function() {
        var _this$props2 = _this.props, name = _this$props2.name, fieldContext = _this$props2.fieldContext;
        var _fieldContext$prefixN = fieldContext.prefixName, prefixName = _fieldContext$prefixN === void 0 ? [] : _fieldContext$prefixN;
        return name !== void 0 ? [].concat(_toConsumableArray(prefixName), _toConsumableArray(name)) : [];
      };
      _this.getRules = function() {
        var _this$props3 = _this.props, _this$props3$rules = _this$props3.rules, rules2 = _this$props3$rules === void 0 ? [] : _this$props3$rules, fieldContext = _this$props3.fieldContext;
        return rules2.map(function(rule) {
          if (typeof rule === "function") {
            return rule(fieldContext);
          }
          return rule;
        });
      };
      _this.refresh = function() {
        if (!_this.mounted)
          return;
        _this.setState(function(_ref) {
          var resetCount = _ref.resetCount;
          return {
            resetCount: resetCount + 1
          };
        });
      };
      _this.metaCache = null;
      _this.triggerMetaEvent = function(destroy3) {
        var onMetaChange = _this.props.onMetaChange;
        if (onMetaChange) {
          var meta = _objectSpread2(_objectSpread2({}, _this.getMeta()), {}, {
            destroy: destroy3
          });
          if (!isEqual_default(_this.metaCache, meta)) {
            onMetaChange(meta);
          }
          _this.metaCache = meta;
        } else {
          _this.metaCache = null;
        }
      };
      _this.onStoreChange = function(prevStore, namePathList, info) {
        var _this$props4 = _this.props, shouldUpdate = _this$props4.shouldUpdate, _this$props4$dependen = _this$props4.dependencies, dependencies = _this$props4$dependen === void 0 ? [] : _this$props4$dependen, onReset = _this$props4.onReset;
        var store3 = info.store;
        var namePath = _this.getNamePath();
        var prevValue = _this.getValue(prevStore);
        var curValue = _this.getValue(store3);
        var namePathMatch = namePathList && containsNamePath(namePathList, namePath);
        if (info.type === "valueUpdate" && info.source === "external" && prevValue !== curValue) {
          _this.touched = true;
          _this.dirty = true;
          _this.validatePromise = null;
          _this.errors = EMPTY_ERRORS;
          _this.warnings = EMPTY_ERRORS;
          _this.triggerMetaEvent();
        }
        switch (info.type) {
          case "reset":
            if (!namePathList || namePathMatch) {
              _this.touched = false;
              _this.dirty = false;
              _this.validatePromise = void 0;
              _this.errors = EMPTY_ERRORS;
              _this.warnings = EMPTY_ERRORS;
              _this.triggerMetaEvent();
              onReset === null || onReset === void 0 ? void 0 : onReset();
              _this.refresh();
              return;
            }
            break;
          case "remove": {
            if (shouldUpdate) {
              _this.reRender();
              return;
            }
            break;
          }
          case "setField": {
            if (namePathMatch) {
              var data = info.data;
              if ("touched" in data) {
                _this.touched = data.touched;
              }
              if ("validating" in data && !("originRCField" in data)) {
                _this.validatePromise = data.validating ? Promise.resolve([]) : null;
              }
              if ("errors" in data) {
                _this.errors = data.errors || EMPTY_ERRORS;
              }
              if ("warnings" in data) {
                _this.warnings = data.warnings || EMPTY_ERRORS;
              }
              _this.dirty = true;
              _this.triggerMetaEvent();
              _this.reRender();
              return;
            }
            if (shouldUpdate && !namePath.length && requireUpdate(shouldUpdate, prevStore, store3, prevValue, curValue, info)) {
              _this.reRender();
              return;
            }
            break;
          }
          case "dependenciesUpdate": {
            var dependencyList = dependencies.map(getNamePath);
            if (dependencyList.some(function(dependency) {
              return containsNamePath(info.relatedFields, dependency);
            })) {
              _this.reRender();
              return;
            }
            break;
          }
          default:
            if (namePathMatch || (!dependencies.length || namePath.length || shouldUpdate) && requireUpdate(shouldUpdate, prevStore, store3, prevValue, curValue, info)) {
              _this.reRender();
              return;
            }
            break;
        }
        if (shouldUpdate === true) {
          _this.reRender();
        }
      };
      _this.validateRules = function(options) {
        var namePath = _this.getNamePath();
        var currentValue = _this.getValue();
        var _ref2 = options || {}, triggerName = _ref2.triggerName, _ref2$validateOnly = _ref2.validateOnly, validateOnly = _ref2$validateOnly === void 0 ? false : _ref2$validateOnly;
        var rootPromise = Promise.resolve().then(function() {
          if (!_this.mounted) {
            return [];
          }
          var _this$props5 = _this.props, _this$props5$validate = _this$props5.validateFirst, validateFirst = _this$props5$validate === void 0 ? false : _this$props5$validate, messageVariables = _this$props5.messageVariables;
          var filteredRules = _this.getRules();
          if (triggerName) {
            filteredRules = filteredRules.filter(function(rule) {
              return rule;
            }).filter(function(rule) {
              var validateTrigger = rule.validateTrigger;
              if (!validateTrigger) {
                return true;
              }
              var triggerList = toArray3(validateTrigger);
              return triggerList.includes(triggerName);
            });
          }
          var promise2 = validateRules(namePath, currentValue, filteredRules, options, validateFirst, messageVariables);
          promise2.catch(function(e3) {
            return e3;
          }).then(function() {
            var ruleErrors = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : EMPTY_ERRORS;
            if (_this.validatePromise === rootPromise) {
              var _ruleErrors$forEach;
              _this.validatePromise = null;
              var nextErrors = [];
              var nextWarnings = [];
              (_ruleErrors$forEach = ruleErrors.forEach) === null || _ruleErrors$forEach === void 0 ? void 0 : _ruleErrors$forEach.call(ruleErrors, function(_ref3) {
                var warningOnly = _ref3.rule.warningOnly, _ref3$errors = _ref3.errors, errors = _ref3$errors === void 0 ? EMPTY_ERRORS : _ref3$errors;
                if (warningOnly) {
                  nextWarnings.push.apply(nextWarnings, _toConsumableArray(errors));
                } else {
                  nextErrors.push.apply(nextErrors, _toConsumableArray(errors));
                }
              });
              _this.errors = nextErrors;
              _this.warnings = nextWarnings;
              _this.triggerMetaEvent();
              _this.reRender();
            }
          });
          return promise2;
        });
        if (validateOnly) {
          return rootPromise;
        }
        _this.validatePromise = rootPromise;
        _this.dirty = true;
        _this.errors = EMPTY_ERRORS;
        _this.warnings = EMPTY_ERRORS;
        _this.triggerMetaEvent();
        _this.reRender();
        return rootPromise;
      };
      _this.isFieldValidating = function() {
        return !!_this.validatePromise;
      };
      _this.isFieldTouched = function() {
        return _this.touched;
      };
      _this.isFieldDirty = function() {
        if (_this.dirty || _this.props.initialValue !== void 0) {
          return true;
        }
        var fieldContext = _this.props.fieldContext;
        var _fieldContext$getInte = fieldContext.getInternalHooks(HOOK_MARK), getInitialValue = _fieldContext$getInte.getInitialValue;
        if (getInitialValue(_this.getNamePath()) !== void 0) {
          return true;
        }
        return false;
      };
      _this.getErrors = function() {
        return _this.errors;
      };
      _this.getWarnings = function() {
        return _this.warnings;
      };
      _this.isListField = function() {
        return _this.props.isListField;
      };
      _this.isList = function() {
        return _this.props.isList;
      };
      _this.isPreserve = function() {
        return _this.props.preserve;
      };
      _this.getMeta = function() {
        _this.prevValidating = _this.isFieldValidating();
        var meta = {
          touched: _this.isFieldTouched(),
          validating: _this.prevValidating,
          errors: _this.errors,
          warnings: _this.warnings,
          name: _this.getNamePath(),
          validated: _this.validatePromise === null
        };
        return meta;
      };
      _this.getOnlyChild = function(children) {
        if (typeof children === "function") {
          var meta = _this.getMeta();
          return _objectSpread2(_objectSpread2({}, _this.getOnlyChild(children(_this.getControlled(), meta, _this.props.fieldContext))), {}, {
            isFunction: true
          });
        }
        var childList = toArray(children);
        if (childList.length !== 1 || !/* @__PURE__ */ React107.isValidElement(childList[0])) {
          return {
            child: childList,
            isFunction: false
          };
        }
        return {
          child: childList[0],
          isFunction: false
        };
      };
      _this.getValue = function(store3) {
        var getFieldsValue = _this.props.fieldContext.getFieldsValue;
        var namePath = _this.getNamePath();
        return get(store3 || getFieldsValue(true), namePath);
      };
      _this.getControlled = function() {
        var childProps = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        var _this$props6 = _this.props, trigger = _this$props6.trigger, validateTrigger = _this$props6.validateTrigger, getValueFromEvent = _this$props6.getValueFromEvent, normalize2 = _this$props6.normalize, valuePropName = _this$props6.valuePropName, getValueProps = _this$props6.getValueProps, fieldContext = _this$props6.fieldContext;
        var mergedValidateTrigger = validateTrigger !== void 0 ? validateTrigger : fieldContext.validateTrigger;
        var namePath = _this.getNamePath();
        var getInternalHooks3 = fieldContext.getInternalHooks, getFieldsValue = fieldContext.getFieldsValue;
        var _getInternalHooks = getInternalHooks3(HOOK_MARK), dispatch2 = _getInternalHooks.dispatch;
        var value = _this.getValue();
        var mergedGetValueProps = getValueProps || function(val) {
          return _defineProperty({}, valuePropName, val);
        };
        var originTriggerFunc = childProps[trigger];
        var control = _objectSpread2(_objectSpread2({}, childProps), mergedGetValueProps(value));
        control[trigger] = function() {
          _this.touched = true;
          _this.dirty = true;
          _this.triggerMetaEvent();
          var newValue;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          if (getValueFromEvent) {
            newValue = getValueFromEvent.apply(void 0, args);
          } else {
            newValue = defaultGetValueFromEvent.apply(void 0, [valuePropName].concat(args));
          }
          if (normalize2) {
            newValue = normalize2(newValue, value, getFieldsValue(true));
          }
          dispatch2({
            type: "updateValue",
            namePath,
            value: newValue
          });
          if (originTriggerFunc) {
            originTriggerFunc.apply(void 0, args);
          }
        };
        var validateTriggerList = toArray3(mergedValidateTrigger || []);
        validateTriggerList.forEach(function(triggerName) {
          var originTrigger = control[triggerName];
          control[triggerName] = function() {
            if (originTrigger) {
              originTrigger.apply(void 0, arguments);
            }
            var rules2 = _this.props.rules;
            if (rules2 && rules2.length) {
              dispatch2({
                type: "validateField",
                namePath,
                triggerName
              });
            }
          };
        });
        return control;
      };
      if (props.fieldContext) {
        var getInternalHooks2 = props.fieldContext.getInternalHooks;
        var _getInternalHooks2 = getInternalHooks2(HOOK_MARK), initEntityValue = _getInternalHooks2.initEntityValue;
        initEntityValue(_assertThisInitialized(_this));
      }
      return _this;
    }
    _createClass(Field2, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this$props7 = this.props, shouldUpdate = _this$props7.shouldUpdate, fieldContext = _this$props7.fieldContext;
        this.mounted = true;
        if (fieldContext) {
          var getInternalHooks2 = fieldContext.getInternalHooks;
          var _getInternalHooks3 = getInternalHooks2(HOOK_MARK), registerField = _getInternalHooks3.registerField;
          this.cancelRegisterFunc = registerField(this);
        }
        if (shouldUpdate === true) {
          this.reRender();
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.cancelRegister();
        this.triggerMetaEvent(true);
        this.mounted = false;
      }
    }, {
      key: "reRender",
      value: function reRender() {
        if (!this.mounted)
          return;
        this.forceUpdate();
      }
    }, {
      key: "render",
      value: function render2() {
        var resetCount = this.state.resetCount;
        var children = this.props.children;
        var _this$getOnlyChild = this.getOnlyChild(children), child = _this$getOnlyChild.child, isFunction2 = _this$getOnlyChild.isFunction;
        var returnChildNode;
        if (isFunction2) {
          returnChildNode = child;
        } else if (/* @__PURE__ */ React107.isValidElement(child)) {
          returnChildNode = /* @__PURE__ */ React107.cloneElement(child, this.getControlled(child.props));
        } else {
          warning_default(!child, "`children` of Field is not validate ReactElement.");
          returnChildNode = child;
        }
        return /* @__PURE__ */ React107.createElement(React107.Fragment, {
          key: resetCount
        }, returnChildNode);
      }
    }]);
    return Field2;
  }(React107.Component);
  Field.contextType = FieldContext_default;
  Field.defaultProps = {
    trigger: "onChange",
    valuePropName: "value"
  };
  function WrapperField(_ref5) {
    var name = _ref5.name, restProps = _objectWithoutProperties(_ref5, _excluded18);
    var fieldContext = React107.useContext(FieldContext_default);
    var listContext = React107.useContext(ListContext_default);
    var namePath = name !== void 0 ? getNamePath(name) : void 0;
    var key2 = "keep";
    if (!restProps.isListField) {
      key2 = "_".concat((namePath || []).join("_"));
    }
    if (restProps.preserve === false && restProps.isListField && namePath.length <= 1) {
      warning_default(false, "`preserve` should not apply on Form.List fields.");
    }
    return /* @__PURE__ */ React107.createElement(Field, _extends({
      key: key2,
      name: namePath,
      isListField: !!listContext
    }, restProps, {
      fieldContext
    }));
  }
  var Field_default = WrapperField;

  // node_modules/rc-field-form/es/List.js
  var React108 = __toESM(require_react());
  var List2 = function List3(_ref) {
    var name = _ref.name, initialValue = _ref.initialValue, children = _ref.children, rules2 = _ref.rules, validateTrigger = _ref.validateTrigger, isListField = _ref.isListField;
    var context2 = React108.useContext(FieldContext_default);
    var wrapperListContext = React108.useContext(ListContext_default);
    var keyRef = React108.useRef({
      keys: [],
      id: 0
    });
    var keyManager = keyRef.current;
    var prefixName = React108.useMemo(function() {
      var parentPrefixName = getNamePath(context2.prefixName) || [];
      return [].concat(_toConsumableArray(parentPrefixName), _toConsumableArray(getNamePath(name)));
    }, [context2.prefixName, name]);
    var fieldContext = React108.useMemo(function() {
      return _objectSpread2(_objectSpread2({}, context2), {}, {
        prefixName
      });
    }, [context2, prefixName]);
    var listContext = React108.useMemo(function() {
      return {
        getKey: function getKey6(namePath) {
          var len = prefixName.length;
          var pathName = namePath[len];
          return [keyManager.keys[pathName], namePath.slice(len + 1)];
        }
      };
    }, [prefixName]);
    if (typeof children !== "function") {
      warning_default(false, "Form.List only accepts function as children.");
      return null;
    }
    var shouldUpdate = function shouldUpdate2(prevValue, nextValue, _ref2) {
      var source = _ref2.source;
      if (source === "internal") {
        return false;
      }
      return prevValue !== nextValue;
    };
    return /* @__PURE__ */ React108.createElement(ListContext_default.Provider, {
      value: listContext
    }, /* @__PURE__ */ React108.createElement(FieldContext_default.Provider, {
      value: fieldContext
    }, /* @__PURE__ */ React108.createElement(Field_default, {
      name: [],
      shouldUpdate,
      rules: rules2,
      validateTrigger,
      initialValue,
      isList: true,
      isListField: isListField !== null && isListField !== void 0 ? isListField : !!wrapperListContext
    }, function(_ref3, meta) {
      var _ref3$value = _ref3.value, value = _ref3$value === void 0 ? [] : _ref3$value, onChange = _ref3.onChange;
      var getFieldValue = context2.getFieldValue;
      var getNewValue = function getNewValue2() {
        var values = getFieldValue(prefixName || []);
        return values || [];
      };
      var operations = {
        add: function add(defaultValue, index2) {
          var newValue = getNewValue();
          if (index2 >= 0 && index2 <= newValue.length) {
            keyManager.keys = [].concat(_toConsumableArray(keyManager.keys.slice(0, index2)), [keyManager.id], _toConsumableArray(keyManager.keys.slice(index2)));
            onChange([].concat(_toConsumableArray(newValue.slice(0, index2)), [defaultValue], _toConsumableArray(newValue.slice(index2))));
          } else {
            if (index2 < 0 || index2 > newValue.length) {
              warning_default(false, "The second parameter of the add function should be a valid positive number.");
            }
            keyManager.keys = [].concat(_toConsumableArray(keyManager.keys), [keyManager.id]);
            onChange([].concat(_toConsumableArray(newValue), [defaultValue]));
          }
          keyManager.id += 1;
        },
        remove: function remove2(index2) {
          var newValue = getNewValue();
          var indexSet = new Set(Array.isArray(index2) ? index2 : [index2]);
          if (indexSet.size <= 0) {
            return;
          }
          keyManager.keys = keyManager.keys.filter(function(_24, keysIndex) {
            return !indexSet.has(keysIndex);
          });
          onChange(newValue.filter(function(_24, valueIndex) {
            return !indexSet.has(valueIndex);
          }));
        },
        move: function move2(from, to) {
          if (from === to) {
            return;
          }
          var newValue = getNewValue();
          if (from < 0 || from >= newValue.length || to < 0 || to >= newValue.length) {
            return;
          }
          keyManager.keys = move(keyManager.keys, from, to);
          onChange(move(newValue, from, to));
        }
      };
      var listValue = value || [];
      if (!Array.isArray(listValue)) {
        listValue = [];
        if (true) {
          warning_default(false, "Current value of '".concat(prefixName.join(" > "), "' is not an array type."));
        }
      }
      return children(listValue.map(function(__, index2) {
        var key2 = keyManager.keys[index2];
        if (key2 === void 0) {
          keyManager.keys[index2] = keyManager.id;
          key2 = keyManager.keys[index2];
          keyManager.id += 1;
        }
        return {
          name: index2,
          key: key2,
          isListField: true
        };
      }), operations, meta);
    })));
  };
  var List_default2 = List2;

  // node_modules/rc-field-form/es/useForm.js
  var React109 = __toESM(require_react());

  // node_modules/rc-field-form/es/utils/asyncUtil.js
  function allPromiseFinish(promiseList) {
    var hasError = false;
    var count = promiseList.length;
    var results = [];
    if (!promiseList.length) {
      return Promise.resolve([]);
    }
    return new Promise(function(resolve, reject) {
      promiseList.forEach(function(promise2, index2) {
        promise2.catch(function(e3) {
          hasError = true;
          return e3;
        }).then(function(result2) {
          count -= 1;
          results[index2] = result2;
          if (count > 0) {
            return;
          }
          if (hasError) {
            reject(results);
          }
          resolve(results);
        });
      });
    });
  }

  // node_modules/rc-field-form/es/utils/NameMap.js
  var SPLIT = "__@field_split__";
  function normalize(namePath) {
    return namePath.map(function(cell) {
      return "".concat(_typeof(cell), ":").concat(cell);
    }).join(SPLIT);
  }
  var NameMap = /* @__PURE__ */ function() {
    function NameMap2() {
      _classCallCheck(this, NameMap2);
      this.kvs = /* @__PURE__ */ new Map();
    }
    _createClass(NameMap2, [{
      key: "set",
      value: function set2(key2, value) {
        this.kvs.set(normalize(key2), value);
      }
    }, {
      key: "get",
      value: function get3(key2) {
        return this.kvs.get(normalize(key2));
      }
    }, {
      key: "update",
      value: function update(key2, updater) {
        var origin = this.get(key2);
        var next = updater(origin);
        if (!next) {
          this.delete(key2);
        } else {
          this.set(key2, next);
        }
      }
    }, {
      key: "delete",
      value: function _delete(key2) {
        this.kvs.delete(normalize(key2));
      }
      // Since we only use this in test, let simply realize this
    }, {
      key: "map",
      value: function map(callback) {
        return _toConsumableArray(this.kvs.entries()).map(function(_ref) {
          var _ref2 = _slicedToArray(_ref, 2), key2 = _ref2[0], value = _ref2[1];
          var cells = key2.split(SPLIT);
          return callback({
            key: cells.map(function(cell) {
              var _cell$match = cell.match(/^([^:]*):(.*)$/), _cell$match2 = _slicedToArray(_cell$match, 3), type4 = _cell$match2[1], unit = _cell$match2[2];
              return type4 === "number" ? Number(unit) : unit;
            }),
            value
          });
        });
      }
    }, {
      key: "toJSON",
      value: function toJSON2() {
        var json2 = {};
        this.map(function(_ref3) {
          var key2 = _ref3.key, value = _ref3.value;
          json2[key2.join(".")] = value;
          return null;
        });
        return json2;
      }
    }]);
    return NameMap2;
  }();
  var NameMap_default = NameMap;

  // node_modules/rc-field-form/es/useForm.js
  var _excluded19 = ["name"];
  var FormStore = /* @__PURE__ */ _createClass(function FormStore2(forceRootUpdate) {
    var _this = this;
    _classCallCheck(this, FormStore2);
    this.formHooked = false;
    this.forceRootUpdate = void 0;
    this.subscribable = true;
    this.store = {};
    this.fieldEntities = [];
    this.initialValues = {};
    this.callbacks = {};
    this.validateMessages = null;
    this.preserve = null;
    this.lastValidatePromise = null;
    this.getForm = function() {
      return {
        getFieldValue: _this.getFieldValue,
        getFieldsValue: _this.getFieldsValue,
        getFieldError: _this.getFieldError,
        getFieldWarning: _this.getFieldWarning,
        getFieldsError: _this.getFieldsError,
        isFieldsTouched: _this.isFieldsTouched,
        isFieldTouched: _this.isFieldTouched,
        isFieldValidating: _this.isFieldValidating,
        isFieldsValidating: _this.isFieldsValidating,
        resetFields: _this.resetFields,
        setFields: _this.setFields,
        setFieldValue: _this.setFieldValue,
        setFieldsValue: _this.setFieldsValue,
        validateFields: _this.validateFields,
        submit: _this.submit,
        _init: true,
        getInternalHooks: _this.getInternalHooks
      };
    };
    this.getInternalHooks = function(key2) {
      if (key2 === HOOK_MARK) {
        _this.formHooked = true;
        return {
          dispatch: _this.dispatch,
          initEntityValue: _this.initEntityValue,
          registerField: _this.registerField,
          useSubscribe: _this.useSubscribe,
          setInitialValues: _this.setInitialValues,
          destroyForm: _this.destroyForm,
          setCallbacks: _this.setCallbacks,
          setValidateMessages: _this.setValidateMessages,
          getFields: _this.getFields,
          setPreserve: _this.setPreserve,
          getInitialValue: _this.getInitialValue,
          registerWatch: _this.registerWatch
        };
      }
      warning_default(false, "`getInternalHooks` is internal usage. Should not call directly.");
      return null;
    };
    this.useSubscribe = function(subscribable) {
      _this.subscribable = subscribable;
    };
    this.prevWithoutPreserves = null;
    this.setInitialValues = function(initialValues, init2) {
      _this.initialValues = initialValues || {};
      if (init2) {
        var _this$prevWithoutPres;
        var nextStore = merge(initialValues, _this.store);
        (_this$prevWithoutPres = _this.prevWithoutPreserves) === null || _this$prevWithoutPres === void 0 ? void 0 : _this$prevWithoutPres.map(function(_ref) {
          var namePath = _ref.key;
          nextStore = set(nextStore, namePath, get(initialValues, namePath));
        });
        _this.prevWithoutPreserves = null;
        _this.updateStore(nextStore);
      }
    };
    this.destroyForm = function() {
      var prevWithoutPreserves = new NameMap_default();
      _this.getFieldEntities(true).forEach(function(entity) {
        if (!_this.isMergedPreserve(entity.isPreserve())) {
          prevWithoutPreserves.set(entity.getNamePath(), true);
        }
      });
      _this.prevWithoutPreserves = prevWithoutPreserves;
    };
    this.getInitialValue = function(namePath) {
      var initValue = get(_this.initialValues, namePath);
      return namePath.length ? merge(initValue) : initValue;
    };
    this.setCallbacks = function(callbacks) {
      _this.callbacks = callbacks;
    };
    this.setValidateMessages = function(validateMessages) {
      _this.validateMessages = validateMessages;
    };
    this.setPreserve = function(preserve) {
      _this.preserve = preserve;
    };
    this.watchList = [];
    this.registerWatch = function(callback) {
      _this.watchList.push(callback);
      return function() {
        _this.watchList = _this.watchList.filter(function(fn2) {
          return fn2 !== callback;
        });
      };
    };
    this.notifyWatch = function() {
      var namePath = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
      if (_this.watchList.length) {
        var values = _this.getFieldsValue();
        var allValues = _this.getFieldsValue(true);
        _this.watchList.forEach(function(callback) {
          callback(values, allValues, namePath);
        });
      }
    };
    this.timeoutId = null;
    this.warningUnhooked = function() {
      if (!_this.timeoutId && typeof window !== "undefined") {
        _this.timeoutId = setTimeout(function() {
          _this.timeoutId = null;
          if (!_this.formHooked) {
            warning_default(false, "Instance created by `useForm` is not connected to any Form element. Forget to pass `form` prop?");
          }
        });
      }
    };
    this.updateStore = function(nextStore) {
      _this.store = nextStore;
    };
    this.getFieldEntities = function() {
      var pure = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
      if (!pure) {
        return _this.fieldEntities;
      }
      return _this.fieldEntities.filter(function(field) {
        return field.getNamePath().length;
      });
    };
    this.getFieldsMap = function() {
      var pure = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
      var cache = new NameMap_default();
      _this.getFieldEntities(pure).forEach(function(field) {
        var namePath = field.getNamePath();
        cache.set(namePath, field);
      });
      return cache;
    };
    this.getFieldEntitiesForNamePathList = function(nameList) {
      if (!nameList) {
        return _this.getFieldEntities(true);
      }
      var cache = _this.getFieldsMap(true);
      return nameList.map(function(name) {
        var namePath = getNamePath(name);
        return cache.get(namePath) || {
          INVALIDATE_NAME_PATH: getNamePath(name)
        };
      });
    };
    this.getFieldsValue = function(nameList, filterFunc) {
      _this.warningUnhooked();
      if (nameList === true && !filterFunc) {
        return _this.store;
      }
      var fieldEntities = _this.getFieldEntitiesForNamePathList(Array.isArray(nameList) ? nameList : null);
      var filteredNameList = [];
      fieldEntities.forEach(function(entity) {
        var _entity$isListField;
        var namePath = "INVALIDATE_NAME_PATH" in entity ? entity.INVALIDATE_NAME_PATH : entity.getNamePath();
        if (!nameList && ((_entity$isListField = entity.isListField) === null || _entity$isListField === void 0 ? void 0 : _entity$isListField.call(entity))) {
          return;
        }
        if (!filterFunc) {
          filteredNameList.push(namePath);
        } else {
          var meta = "getMeta" in entity ? entity.getMeta() : null;
          if (filterFunc(meta)) {
            filteredNameList.push(namePath);
          }
        }
      });
      return cloneByNamePathList(_this.store, filteredNameList.map(getNamePath));
    };
    this.getFieldValue = function(name) {
      _this.warningUnhooked();
      var namePath = getNamePath(name);
      return get(_this.store, namePath);
    };
    this.getFieldsError = function(nameList) {
      _this.warningUnhooked();
      var fieldEntities = _this.getFieldEntitiesForNamePathList(nameList);
      return fieldEntities.map(function(entity, index2) {
        if (entity && !("INVALIDATE_NAME_PATH" in entity)) {
          return {
            name: entity.getNamePath(),
            errors: entity.getErrors(),
            warnings: entity.getWarnings()
          };
        }
        return {
          name: getNamePath(nameList[index2]),
          errors: [],
          warnings: []
        };
      });
    };
    this.getFieldError = function(name) {
      _this.warningUnhooked();
      var namePath = getNamePath(name);
      var fieldError = _this.getFieldsError([namePath])[0];
      return fieldError.errors;
    };
    this.getFieldWarning = function(name) {
      _this.warningUnhooked();
      var namePath = getNamePath(name);
      var fieldError = _this.getFieldsError([namePath])[0];
      return fieldError.warnings;
    };
    this.isFieldsTouched = function() {
      _this.warningUnhooked();
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      var arg0 = args[0], arg1 = args[1];
      var namePathList;
      var isAllFieldsTouched = false;
      if (args.length === 0) {
        namePathList = null;
      } else if (args.length === 1) {
        if (Array.isArray(arg0)) {
          namePathList = arg0.map(getNamePath);
          isAllFieldsTouched = false;
        } else {
          namePathList = null;
          isAllFieldsTouched = arg0;
        }
      } else {
        namePathList = arg0.map(getNamePath);
        isAllFieldsTouched = arg1;
      }
      var fieldEntities = _this.getFieldEntities(true);
      var isFieldTouched = function isFieldTouched2(field) {
        return field.isFieldTouched();
      };
      if (!namePathList) {
        return isAllFieldsTouched ? fieldEntities.every(isFieldTouched) : fieldEntities.some(isFieldTouched);
      }
      var map = new NameMap_default();
      namePathList.forEach(function(shortNamePath) {
        map.set(shortNamePath, []);
      });
      fieldEntities.forEach(function(field) {
        var fieldNamePath = field.getNamePath();
        namePathList.forEach(function(shortNamePath) {
          if (shortNamePath.every(function(nameUnit, i3) {
            return fieldNamePath[i3] === nameUnit;
          })) {
            map.update(shortNamePath, function(list) {
              return [].concat(_toConsumableArray(list), [field]);
            });
          }
        });
      });
      var isNamePathListTouched = function isNamePathListTouched2(entities) {
        return entities.some(isFieldTouched);
      };
      var namePathListEntities = map.map(function(_ref2) {
        var value = _ref2.value;
        return value;
      });
      return isAllFieldsTouched ? namePathListEntities.every(isNamePathListTouched) : namePathListEntities.some(isNamePathListTouched);
    };
    this.isFieldTouched = function(name) {
      _this.warningUnhooked();
      return _this.isFieldsTouched([name]);
    };
    this.isFieldsValidating = function(nameList) {
      _this.warningUnhooked();
      var fieldEntities = _this.getFieldEntities();
      if (!nameList) {
        return fieldEntities.some(function(testField) {
          return testField.isFieldValidating();
        });
      }
      var namePathList = nameList.map(getNamePath);
      return fieldEntities.some(function(testField) {
        var fieldNamePath = testField.getNamePath();
        return containsNamePath(namePathList, fieldNamePath) && testField.isFieldValidating();
      });
    };
    this.isFieldValidating = function(name) {
      _this.warningUnhooked();
      return _this.isFieldsValidating([name]);
    };
    this.resetWithFieldInitialValue = function() {
      var info = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      var cache = new NameMap_default();
      var fieldEntities = _this.getFieldEntities(true);
      fieldEntities.forEach(function(field) {
        var initialValue = field.props.initialValue;
        var namePath = field.getNamePath();
        if (initialValue !== void 0) {
          var records = cache.get(namePath) || /* @__PURE__ */ new Set();
          records.add({
            entity: field,
            value: initialValue
          });
          cache.set(namePath, records);
        }
      });
      var resetWithFields = function resetWithFields2(entities) {
        entities.forEach(function(field) {
          var initialValue = field.props.initialValue;
          if (initialValue !== void 0) {
            var namePath = field.getNamePath();
            var formInitialValue = _this.getInitialValue(namePath);
            if (formInitialValue !== void 0) {
              warning_default(false, "Form already set 'initialValues' with path '".concat(namePath.join("."), "'. Field can not overwrite it."));
            } else {
              var records = cache.get(namePath);
              if (records && records.size > 1) {
                warning_default(false, "Multiple Field with path '".concat(namePath.join("."), "' set 'initialValue'. Can not decide which one to pick."));
              } else if (records) {
                var originValue = _this.getFieldValue(namePath);
                if (!info.skipExist || originValue === void 0) {
                  _this.updateStore(set(_this.store, namePath, _toConsumableArray(records)[0].value));
                }
              }
            }
          }
        });
      };
      var requiredFieldEntities;
      if (info.entities) {
        requiredFieldEntities = info.entities;
      } else if (info.namePathList) {
        requiredFieldEntities = [];
        info.namePathList.forEach(function(namePath) {
          var records = cache.get(namePath);
          if (records) {
            var _requiredFieldEntitie;
            (_requiredFieldEntitie = requiredFieldEntities).push.apply(_requiredFieldEntitie, _toConsumableArray(_toConsumableArray(records).map(function(r4) {
              return r4.entity;
            })));
          }
        });
      } else {
        requiredFieldEntities = fieldEntities;
      }
      resetWithFields(requiredFieldEntities);
    };
    this.resetFields = function(nameList) {
      _this.warningUnhooked();
      var prevStore = _this.store;
      if (!nameList) {
        _this.updateStore(merge(_this.initialValues));
        _this.resetWithFieldInitialValue();
        _this.notifyObservers(prevStore, null, {
          type: "reset"
        });
        _this.notifyWatch();
        return;
      }
      var namePathList = nameList.map(getNamePath);
      namePathList.forEach(function(namePath) {
        var initialValue = _this.getInitialValue(namePath);
        _this.updateStore(set(_this.store, namePath, initialValue));
      });
      _this.resetWithFieldInitialValue({
        namePathList
      });
      _this.notifyObservers(prevStore, namePathList, {
        type: "reset"
      });
      _this.notifyWatch(namePathList);
    };
    this.setFields = function(fields) {
      _this.warningUnhooked();
      var prevStore = _this.store;
      var namePathList = [];
      fields.forEach(function(fieldData) {
        var name = fieldData.name, data = _objectWithoutProperties(fieldData, _excluded19);
        var namePath = getNamePath(name);
        namePathList.push(namePath);
        if ("value" in data) {
          _this.updateStore(set(_this.store, namePath, data.value));
        }
        _this.notifyObservers(prevStore, [namePath], {
          type: "setField",
          data: fieldData
        });
      });
      _this.notifyWatch(namePathList);
    };
    this.getFields = function() {
      var entities = _this.getFieldEntities(true);
      var fields = entities.map(function(field) {
        var namePath = field.getNamePath();
        var meta = field.getMeta();
        var fieldData = _objectSpread2(_objectSpread2({}, meta), {}, {
          name: namePath,
          value: _this.getFieldValue(namePath)
        });
        Object.defineProperty(fieldData, "originRCField", {
          value: true
        });
        return fieldData;
      });
      return fields;
    };
    this.initEntityValue = function(entity) {
      var initialValue = entity.props.initialValue;
      if (initialValue !== void 0) {
        var namePath = entity.getNamePath();
        var prevValue = get(_this.store, namePath);
        if (prevValue === void 0) {
          _this.updateStore(set(_this.store, namePath, initialValue));
        }
      }
    };
    this.isMergedPreserve = function(fieldPreserve) {
      var mergedPreserve = fieldPreserve !== void 0 ? fieldPreserve : _this.preserve;
      return mergedPreserve !== null && mergedPreserve !== void 0 ? mergedPreserve : true;
    };
    this.registerField = function(entity) {
      _this.fieldEntities.push(entity);
      var namePath = entity.getNamePath();
      _this.notifyWatch([namePath]);
      if (entity.props.initialValue !== void 0) {
        var prevStore = _this.store;
        _this.resetWithFieldInitialValue({
          entities: [entity],
          skipExist: true
        });
        _this.notifyObservers(prevStore, [entity.getNamePath()], {
          type: "valueUpdate",
          source: "internal"
        });
      }
      return function(isListField, preserve) {
        var subNamePath = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];
        _this.fieldEntities = _this.fieldEntities.filter(function(item) {
          return item !== entity;
        });
        if (!_this.isMergedPreserve(preserve) && (!isListField || subNamePath.length > 1)) {
          var defaultValue = isListField ? void 0 : _this.getInitialValue(namePath);
          if (namePath.length && _this.getFieldValue(namePath) !== defaultValue && _this.fieldEntities.every(function(field) {
            return (
              // Only reset when no namePath exist
              !matchNamePath(field.getNamePath(), namePath)
            );
          })) {
            var _prevStore = _this.store;
            _this.updateStore(set(_prevStore, namePath, defaultValue, true));
            _this.notifyObservers(_prevStore, [namePath], {
              type: "remove"
            });
            _this.triggerDependenciesUpdate(_prevStore, namePath);
          }
        }
        _this.notifyWatch([namePath]);
      };
    };
    this.dispatch = function(action) {
      switch (action.type) {
        case "updateValue": {
          var namePath = action.namePath, value = action.value;
          _this.updateValue(namePath, value);
          break;
        }
        case "validateField": {
          var _namePath = action.namePath, triggerName = action.triggerName;
          _this.validateFields([_namePath], {
            triggerName
          });
          break;
        }
        default:
      }
    };
    this.notifyObservers = function(prevStore, namePathList, info) {
      if (_this.subscribable) {
        var mergedInfo = _objectSpread2(_objectSpread2({}, info), {}, {
          store: _this.getFieldsValue(true)
        });
        _this.getFieldEntities().forEach(function(_ref3) {
          var onStoreChange = _ref3.onStoreChange;
          onStoreChange(prevStore, namePathList, mergedInfo);
        });
      } else {
        _this.forceRootUpdate();
      }
    };
    this.triggerDependenciesUpdate = function(prevStore, namePath) {
      var childrenFields = _this.getDependencyChildrenFields(namePath);
      if (childrenFields.length) {
        _this.validateFields(childrenFields);
      }
      _this.notifyObservers(prevStore, childrenFields, {
        type: "dependenciesUpdate",
        relatedFields: [namePath].concat(_toConsumableArray(childrenFields))
      });
      return childrenFields;
    };
    this.updateValue = function(name, value) {
      var namePath = getNamePath(name);
      var prevStore = _this.store;
      _this.updateStore(set(_this.store, namePath, value));
      _this.notifyObservers(prevStore, [namePath], {
        type: "valueUpdate",
        source: "internal"
      });
      _this.notifyWatch([namePath]);
      var childrenFields = _this.triggerDependenciesUpdate(prevStore, namePath);
      var onValuesChange = _this.callbacks.onValuesChange;
      if (onValuesChange) {
        var changedValues = cloneByNamePathList(_this.store, [namePath]);
        onValuesChange(changedValues, _this.getFieldsValue());
      }
      _this.triggerOnFieldsChange([namePath].concat(_toConsumableArray(childrenFields)));
    };
    this.setFieldsValue = function(store3) {
      _this.warningUnhooked();
      var prevStore = _this.store;
      if (store3) {
        var nextStore = merge(_this.store, store3);
        _this.updateStore(nextStore);
      }
      _this.notifyObservers(prevStore, null, {
        type: "valueUpdate",
        source: "external"
      });
      _this.notifyWatch();
    };
    this.setFieldValue = function(name, value) {
      _this.setFields([{
        name,
        value
      }]);
    };
    this.getDependencyChildrenFields = function(rootNamePath) {
      var children = /* @__PURE__ */ new Set();
      var childrenFields = [];
      var dependencies2fields = new NameMap_default();
      _this.getFieldEntities().forEach(function(field) {
        var dependencies = field.props.dependencies;
        (dependencies || []).forEach(function(dependency) {
          var dependencyNamePath = getNamePath(dependency);
          dependencies2fields.update(dependencyNamePath, function() {
            var fields = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : /* @__PURE__ */ new Set();
            fields.add(field);
            return fields;
          });
        });
      });
      var fillChildren = function fillChildren2(namePath) {
        var fields = dependencies2fields.get(namePath) || /* @__PURE__ */ new Set();
        fields.forEach(function(field) {
          if (!children.has(field)) {
            children.add(field);
            var fieldNamePath = field.getNamePath();
            if (field.isFieldDirty() && fieldNamePath.length) {
              childrenFields.push(fieldNamePath);
              fillChildren2(fieldNamePath);
            }
          }
        });
      };
      fillChildren(rootNamePath);
      return childrenFields;
    };
    this.triggerOnFieldsChange = function(namePathList, filedErrors) {
      var onFieldsChange = _this.callbacks.onFieldsChange;
      if (onFieldsChange) {
        var fields = _this.getFields();
        if (filedErrors) {
          var cache = new NameMap_default();
          filedErrors.forEach(function(_ref4) {
            var name = _ref4.name, errors = _ref4.errors;
            cache.set(name, errors);
          });
          fields.forEach(function(field) {
            field.errors = cache.get(field.name) || field.errors;
          });
        }
        var changedFields = fields.filter(function(_ref5) {
          var fieldName = _ref5.name;
          return containsNamePath(namePathList, fieldName);
        });
        if (changedFields.length) {
          onFieldsChange(changedFields, fields);
        }
      }
    };
    this.validateFields = function(arg1, arg2) {
      _this.warningUnhooked();
      var nameList;
      var options;
      if (Array.isArray(arg1) || typeof arg1 === "string" || typeof arg2 === "string") {
        nameList = arg1;
        options = arg2;
      } else {
        options = arg1;
      }
      var provideNameList = !!nameList;
      var namePathList = provideNameList ? nameList.map(getNamePath) : [];
      var promiseList = [];
      var TMP_SPLIT = String(Date.now());
      var validateNamePathList = /* @__PURE__ */ new Set();
      _this.getFieldEntities(true).forEach(function(field) {
        var _options;
        if (!provideNameList) {
          namePathList.push(field.getNamePath());
        }
        if (((_options = options) === null || _options === void 0 ? void 0 : _options.recursive) && provideNameList) {
          var namePath = field.getNamePath();
          if (
            // nameList[i] === undefined 说明是以 nameList 开头的
            // ['name'] -> ['name','list']
            namePath.every(function(nameUnit, i3) {
              return nameList[i3] === nameUnit || nameList[i3] === void 0;
            })
          ) {
            namePathList.push(namePath);
          }
        }
        if (!field.props.rules || !field.props.rules.length) {
          return;
        }
        var fieldNamePath = field.getNamePath();
        validateNamePathList.add(fieldNamePath.join(TMP_SPLIT));
        if (!provideNameList || containsNamePath(namePathList, fieldNamePath)) {
          var promise2 = field.validateRules(_objectSpread2({
            validateMessages: _objectSpread2(_objectSpread2({}, defaultValidateMessages), _this.validateMessages)
          }, options));
          promiseList.push(promise2.then(function() {
            return {
              name: fieldNamePath,
              errors: [],
              warnings: []
            };
          }).catch(function(ruleErrors) {
            var _ruleErrors$forEach;
            var mergedErrors = [];
            var mergedWarnings = [];
            (_ruleErrors$forEach = ruleErrors.forEach) === null || _ruleErrors$forEach === void 0 ? void 0 : _ruleErrors$forEach.call(ruleErrors, function(_ref6) {
              var warningOnly = _ref6.rule.warningOnly, errors = _ref6.errors;
              if (warningOnly) {
                mergedWarnings.push.apply(mergedWarnings, _toConsumableArray(errors));
              } else {
                mergedErrors.push.apply(mergedErrors, _toConsumableArray(errors));
              }
            });
            if (mergedErrors.length) {
              return Promise.reject({
                name: fieldNamePath,
                errors: mergedErrors,
                warnings: mergedWarnings
              });
            }
            return {
              name: fieldNamePath,
              errors: mergedErrors,
              warnings: mergedWarnings
            };
          }));
        }
      });
      var summaryPromise = allPromiseFinish(promiseList);
      _this.lastValidatePromise = summaryPromise;
      summaryPromise.catch(function(results) {
        return results;
      }).then(function(results) {
        var resultNamePathList = results.map(function(_ref7) {
          var name = _ref7.name;
          return name;
        });
        _this.notifyObservers(_this.store, resultNamePathList, {
          type: "validateFinish"
        });
        _this.triggerOnFieldsChange(resultNamePathList, results);
      });
      var returnPromise = summaryPromise.then(function() {
        if (_this.lastValidatePromise === summaryPromise) {
          return Promise.resolve(_this.getFieldsValue(namePathList));
        }
        return Promise.reject([]);
      }).catch(function(results) {
        var errorList = results.filter(function(result2) {
          return result2 && result2.errors.length;
        });
        return Promise.reject({
          values: _this.getFieldsValue(namePathList),
          errorFields: errorList,
          outOfDate: _this.lastValidatePromise !== summaryPromise
        });
      });
      returnPromise.catch(function(e3) {
        return e3;
      });
      var triggerNamePathList = namePathList.filter(function(namePath) {
        return validateNamePathList.has(namePath.join(TMP_SPLIT));
      });
      _this.triggerOnFieldsChange(triggerNamePathList);
      return returnPromise;
    };
    this.submit = function() {
      _this.warningUnhooked();
      _this.validateFields().then(function(values) {
        var onFinish = _this.callbacks.onFinish;
        if (onFinish) {
          try {
            onFinish(values);
          } catch (err) {
            console.error(err);
          }
        }
      }).catch(function(e3) {
        var onFinishFailed = _this.callbacks.onFinishFailed;
        if (onFinishFailed) {
          onFinishFailed(e3);
        }
      });
    };
    this.forceRootUpdate = forceRootUpdate;
  });
  function useForm(form) {
    var formRef = React109.useRef();
    var _React$useState = React109.useState({}), _React$useState2 = _slicedToArray(_React$useState, 2), forceUpdate = _React$useState2[1];
    if (!formRef.current) {
      if (form) {
        formRef.current = form;
      } else {
        var forceReRender = function forceReRender2() {
          forceUpdate({});
        };
        var formStore = new FormStore(forceReRender);
        formRef.current = formStore.getForm();
      }
    }
    return [formRef.current];
  }
  var useForm_default = useForm;

  // node_modules/rc-field-form/es/Form.js
  var React111 = __toESM(require_react());

  // node_modules/rc-field-form/es/FormContext.js
  var React110 = __toESM(require_react());
  var FormContext = /* @__PURE__ */ React110.createContext({
    triggerFormChange: function triggerFormChange() {
    },
    triggerFormFinish: function triggerFormFinish() {
    },
    registerForm: function registerForm() {
    },
    unregisterForm: function unregisterForm() {
    }
  });
  var FormProvider = function FormProvider2(_ref) {
    var validateMessages = _ref.validateMessages, onFormChange = _ref.onFormChange, onFormFinish = _ref.onFormFinish, children = _ref.children;
    var formContext = React110.useContext(FormContext);
    var formsRef = React110.useRef({});
    return /* @__PURE__ */ React110.createElement(FormContext.Provider, {
      value: _objectSpread2(_objectSpread2({}, formContext), {}, {
        validateMessages: _objectSpread2(_objectSpread2({}, formContext.validateMessages), validateMessages),
        // =========================================================
        // =                  Global Form Control                  =
        // =========================================================
        triggerFormChange: function triggerFormChange2(name, changedFields) {
          if (onFormChange) {
            onFormChange(name, {
              changedFields,
              forms: formsRef.current
            });
          }
          formContext.triggerFormChange(name, changedFields);
        },
        triggerFormFinish: function triggerFormFinish2(name, values) {
          if (onFormFinish) {
            onFormFinish(name, {
              values,
              forms: formsRef.current
            });
          }
          formContext.triggerFormFinish(name, values);
        },
        registerForm: function registerForm2(name, form) {
          if (name) {
            formsRef.current = _objectSpread2(_objectSpread2({}, formsRef.current), {}, _defineProperty({}, name, form));
          }
          formContext.registerForm(name, form);
        },
        unregisterForm: function unregisterForm2(name) {
          var newForms = _objectSpread2({}, formsRef.current);
          delete newForms[name];
          formsRef.current = newForms;
          formContext.unregisterForm(name);
        }
      })
    }, children);
  };
  var FormContext_default = FormContext;

  // node_modules/rc-field-form/es/Form.js
  var _excluded20 = ["name", "initialValues", "fields", "form", "preserve", "children", "component", "validateMessages", "validateTrigger", "onValuesChange", "onFieldsChange", "onFinish", "onFinishFailed"];
  var Form2 = function Form3(_ref, ref) {
    var name = _ref.name, initialValues = _ref.initialValues, fields = _ref.fields, form = _ref.form, preserve = _ref.preserve, children = _ref.children, _ref$component = _ref.component, Component20 = _ref$component === void 0 ? "form" : _ref$component, validateMessages = _ref.validateMessages, _ref$validateTrigger = _ref.validateTrigger, validateTrigger = _ref$validateTrigger === void 0 ? "onChange" : _ref$validateTrigger, onValuesChange = _ref.onValuesChange, _onFieldsChange = _ref.onFieldsChange, _onFinish = _ref.onFinish, onFinishFailed = _ref.onFinishFailed, restProps = _objectWithoutProperties(_ref, _excluded20);
    var formContext = React111.useContext(FormContext_default);
    var _useForm = useForm_default(form), _useForm2 = _slicedToArray(_useForm, 1), formInstance = _useForm2[0];
    var _formInstance$getInte = formInstance.getInternalHooks(HOOK_MARK), useSubscribe = _formInstance$getInte.useSubscribe, setInitialValues = _formInstance$getInte.setInitialValues, setCallbacks = _formInstance$getInte.setCallbacks, setValidateMessages = _formInstance$getInte.setValidateMessages, setPreserve = _formInstance$getInte.setPreserve, destroyForm = _formInstance$getInte.destroyForm;
    React111.useImperativeHandle(ref, function() {
      return formInstance;
    });
    React111.useEffect(function() {
      formContext.registerForm(name, formInstance);
      return function() {
        formContext.unregisterForm(name);
      };
    }, [formContext, formInstance, name]);
    setValidateMessages(_objectSpread2(_objectSpread2({}, formContext.validateMessages), validateMessages));
    setCallbacks({
      onValuesChange,
      onFieldsChange: function onFieldsChange(changedFields) {
        formContext.triggerFormChange(name, changedFields);
        if (_onFieldsChange) {
          for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            rest[_key - 1] = arguments[_key];
          }
          _onFieldsChange.apply(void 0, [changedFields].concat(rest));
        }
      },
      onFinish: function onFinish(values2) {
        formContext.triggerFormFinish(name, values2);
        if (_onFinish) {
          _onFinish(values2);
        }
      },
      onFinishFailed
    });
    setPreserve(preserve);
    var mountRef = React111.useRef(null);
    setInitialValues(initialValues, !mountRef.current);
    if (!mountRef.current) {
      mountRef.current = true;
    }
    React111.useEffect(
      function() {
        return destroyForm;
      },
      // eslint-disable-next-line react-hooks/exhaustive-deps
      []
    );
    var childrenNode;
    var childrenRenderProps = typeof children === "function";
    if (childrenRenderProps) {
      var values = formInstance.getFieldsValue(true);
      childrenNode = children(values, formInstance);
    } else {
      childrenNode = children;
    }
    useSubscribe(!childrenRenderProps);
    var prevFieldsRef = React111.useRef();
    React111.useEffect(function() {
      if (!isSimilar(prevFieldsRef.current || [], fields || [])) {
        formInstance.setFields(fields || []);
      }
      prevFieldsRef.current = fields;
    }, [fields, formInstance]);
    var formContextValue = React111.useMemo(function() {
      return _objectSpread2(_objectSpread2({}, formInstance), {}, {
        validateTrigger
      });
    }, [formInstance, validateTrigger]);
    var wrapperNode = /* @__PURE__ */ React111.createElement(ListContext_default.Provider, {
      value: null
    }, /* @__PURE__ */ React111.createElement(FieldContext_default.Provider, {
      value: formContextValue
    }, childrenNode));
    if (Component20 === false) {
      return wrapperNode;
    }
    return /* @__PURE__ */ React111.createElement(Component20, _extends({}, restProps, {
      onSubmit: function onSubmit(event) {
        event.preventDefault();
        event.stopPropagation();
        formInstance.submit();
      },
      onReset: function onReset(event) {
        var _restProps$onReset;
        event.preventDefault();
        formInstance.resetFields();
        (_restProps$onReset = restProps.onReset) === null || _restProps$onReset === void 0 ? void 0 : _restProps$onReset.call(restProps, event);
      }
    }), wrapperNode);
  };
  var Form_default = Form2;

  // node_modules/rc-field-form/es/useWatch.js
  var import_react38 = __toESM(require_react());
  function stringify(value) {
    try {
      return JSON.stringify(value);
    } catch (err) {
      return Math.random();
    }
  }
  var useWatchWarning = true ? function(namePath) {
    var fullyStr = namePath.join("__RC_FIELD_FORM_SPLIT__");
    var nameStrRef = (0, import_react38.useRef)(fullyStr);
    warning_default(nameStrRef.current === fullyStr, "`useWatch` is not support dynamic `namePath`. Please provide static instead.");
  } : function() {
  };
  function useWatch() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    var _args$ = args[0], dependencies = _args$ === void 0 ? [] : _args$, _args$2 = args[1], _form = _args$2 === void 0 ? {} : _args$2;
    var options = isFormInstance(_form) ? {
      form: _form
    } : _form;
    var form = options.form;
    var _useState = (0, import_react38.useState)(), _useState2 = _slicedToArray(_useState, 2), value = _useState2[0], setValue = _useState2[1];
    var valueStr = (0, import_react38.useMemo)(function() {
      return stringify(value);
    }, [value]);
    var valueStrRef = (0, import_react38.useRef)(valueStr);
    valueStrRef.current = valueStr;
    var fieldContext = (0, import_react38.useContext)(FieldContext_default);
    var formInstance = form || fieldContext;
    var isValidForm = formInstance && formInstance._init;
    if (true) {
      warning_default(args.length === 2 ? form ? isValidForm : true : isValidForm, "useWatch requires a form instance since it can not auto detect from context.");
    }
    var namePath = getNamePath(dependencies);
    var namePathRef = (0, import_react38.useRef)(namePath);
    namePathRef.current = namePath;
    useWatchWarning(namePath);
    (0, import_react38.useEffect)(
      function() {
        if (!isValidForm) {
          return;
        }
        var getFieldsValue = formInstance.getFieldsValue, getInternalHooks2 = formInstance.getInternalHooks;
        var _getInternalHooks = getInternalHooks2(HOOK_MARK), registerWatch = _getInternalHooks.registerWatch;
        var cancelRegister = registerWatch(function(values, allValues) {
          var newValue = get(options.preserve ? allValues : values, namePathRef.current);
          var nextValueStr = stringify(newValue);
          if (valueStrRef.current !== nextValueStr) {
            valueStrRef.current = nextValueStr;
            setValue(newValue);
          }
        });
        var initialValue = get(options.preserve ? getFieldsValue(true) : getFieldsValue(), namePathRef.current);
        setValue(initialValue);
        return cancelRegister;
      },
      // We do not need re-register since namePath content is the same
      // eslint-disable-next-line react-hooks/exhaustive-deps
      [isValidForm]
    );
    return value;
  }
  var useWatch_default = useWatch;

  // node_modules/rc-field-form/es/index.js
  var InternalForm = /* @__PURE__ */ React112.forwardRef(Form_default);
  var RefForm = InternalForm;
  RefForm.FormProvider = FormProvider;
  RefForm.Field = Field_default;
  RefForm.List = List_default2;
  RefForm.useForm = useForm_default;
  RefForm.useWatch = useWatch_default;
  var es_default10 = RefForm;

  // node_modules/antd/es/form/context.js
  var React113 = __toESM(require_react());
  var import_react39 = __toESM(require_react());
  var FormContext2 = /* @__PURE__ */ React113.createContext({
    labelAlign: "right",
    vertical: false,
    itemRef: function itemRef() {
    }
  });
  var NoStyleItemContext = /* @__PURE__ */ React113.createContext(null);
  var FormProvider3 = function FormProvider4(props) {
    var providerProps = omit(props, ["prefixCls"]);
    return /* @__PURE__ */ React113.createElement(FormProvider, _extends({}, providerProps));
  };
  var FormItemPrefixContext = /* @__PURE__ */ React113.createContext({
    prefixCls: ""
  });
  var FormItemInputContext = /* @__PURE__ */ React113.createContext({});
  var NoFormStyle = function NoFormStyle2(_ref) {
    var children = _ref.children, status = _ref.status, override = _ref.override;
    var formItemInputContext = (0, import_react39.useContext)(FormItemInputContext);
    var newFormItemInputContext = (0, import_react39.useMemo)(function() {
      var newContext = _extends({}, formItemInputContext);
      if (override) {
        delete newContext.isFormItemInput;
      }
      if (status) {
        delete newContext.status;
        delete newContext.hasFeedback;
        delete newContext.feedbackIcon;
      }
      return newContext;
    }, [status, override, formItemInputContext]);
    return /* @__PURE__ */ React113.createElement(FormItemInputContext.Provider, {
      value: newFormItemInputContext
    }, children);
  };

  // node_modules/antd/es/_util/type.js
  var tuple = function tuple2() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return args;
  };
  var tupleNum = function tupleNum2() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    return args;
  };

  // node_modules/antd/es/_util/motion.js
  var getCollapsedHeight = function getCollapsedHeight2() {
    return {
      height: 0,
      opacity: 0
    };
  };
  var getRealHeight = function getRealHeight2(node) {
    var scrollHeight = node.scrollHeight;
    return {
      height: scrollHeight,
      opacity: 1
    };
  };
  var getCurrentHeight = function getCurrentHeight2(node) {
    return {
      height: node ? node.offsetHeight : 0
    };
  };
  var skipOpacityTransition = function skipOpacityTransition2(_24, event) {
    return (event === null || event === void 0 ? void 0 : event.deadline) === true || event.propertyName === "height";
  };
  var collapseMotion = {
    motionName: "ant-motion-collapse",
    onAppearStart: getCollapsedHeight,
    onEnterStart: getCollapsedHeight,
    onAppearActive: getRealHeight,
    onEnterActive: getRealHeight,
    onLeaveStart: getCurrentHeight,
    onLeaveActive: getCollapsedHeight,
    onAppearEnd: skipOpacityTransition,
    onEnterEnd: skipOpacityTransition,
    onLeaveEnd: skipOpacityTransition,
    motionDeadline: 500
  };
  var SelectPlacements = tuple("bottomLeft", "bottomRight", "topLeft", "topRight");
  var getTransitionDirection = function getTransitionDirection2(placement) {
    if (placement !== void 0 && (placement === "topLeft" || placement === "topRight")) {
      return "slide-down";
    }
    return "slide-up";
  };
  var getTransitionName3 = function getTransitionName4(rootPrefixCls, motion2, transitionName2) {
    if (transitionName2 !== void 0) {
      return transitionName2;
    }
    return "".concat(rootPrefixCls, "-").concat(motion2);
  };
  var motion_default = collapseMotion;

  // node_modules/antd/es/_util/statusUtils.js
  var import_classnames27 = __toESM(require_classnames());
  var InputStatuses = tuple("warning", "error", "");
  function getStatusClassNames(prefixCls, status, hasFeedback) {
    var _classNames;
    return (0, import_classnames27.default)((_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-status-success"), status === "success"), _defineProperty(_classNames, "".concat(prefixCls, "-status-warning"), status === "warning"), _defineProperty(_classNames, "".concat(prefixCls, "-status-error"), status === "error"), _defineProperty(_classNames, "".concat(prefixCls, "-status-validating"), status === "validating"), _defineProperty(_classNames, "".concat(prefixCls, "-has-feedback"), hasFeedback), _classNames));
  }
  var getMergedStatus = function getMergedStatus2(contextStatus, customStatus) {
    return customStatus || contextStatus;
  };

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/CheckOutlined.js
  var React114 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/CheckOutlined.js
  var CheckOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M912 190h-69.9c-9.8 0-19.1 4.5-25.1 12.2L404.7 724.5 207 474a32 32 0 00-25.1-12.2H112c-6.7 0-10.4 7.7-6.3 12.9l273.9 347c12.8 16.2 37.4 16.2 50.3 0l488.4-618.9c4.1-5.1.4-12.8-6.3-12.8z" } }] }, "name": "check", "theme": "outlined" };
  var CheckOutlined_default = CheckOutlined;

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/CheckOutlined.js
  var CheckOutlined2 = function CheckOutlined3(props, ref) {
    return /* @__PURE__ */ React114.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: CheckOutlined_default
    }));
  };
  CheckOutlined2.displayName = "CheckOutlined";
  var CheckOutlined_default2 = /* @__PURE__ */ React114.forwardRef(CheckOutlined2);

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/DownOutlined.js
  var React115 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/DownOutlined.js
  var DownOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z" } }] }, "name": "down", "theme": "outlined" };
  var DownOutlined_default = DownOutlined;

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/DownOutlined.js
  var DownOutlined2 = function DownOutlined3(props, ref) {
    return /* @__PURE__ */ React115.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: DownOutlined_default
    }));
  };
  DownOutlined2.displayName = "DownOutlined";
  var DownOutlined_default2 = /* @__PURE__ */ React115.forwardRef(DownOutlined2);

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/SearchOutlined.js
  var React116 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/SearchOutlined.js
  var SearchOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M909.6 854.5L649.9 594.8C690.2 542.7 712 479 712 412c0-80.2-31.3-155.4-87.9-212.1-56.6-56.7-132-87.9-212.1-87.9s-155.5 31.3-212.1 87.9C143.2 256.5 112 331.8 112 412c0 80.1 31.3 155.5 87.9 212.1C256.5 680.8 331.8 712 412 712c67 0 130.6-21.8 182.7-62l259.7 259.6a8.2 8.2 0 0011.6 0l43.6-43.5a8.2 8.2 0 000-11.6zM570.4 570.4C528 612.7 471.8 636 412 636s-116-23.3-158.4-65.6C211.3 528 188 471.8 188 412s23.3-116.1 65.6-158.4C296 211.3 352.2 188 412 188s116.1 23.2 158.4 65.6S636 352.2 636 412s-23.3 116.1-65.6 158.4z" } }] }, "name": "search", "theme": "outlined" };
  var SearchOutlined_default = SearchOutlined;

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/SearchOutlined.js
  var SearchOutlined2 = function SearchOutlined3(props, ref) {
    return /* @__PURE__ */ React116.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: SearchOutlined_default
    }));
  };
  SearchOutlined2.displayName = "SearchOutlined";
  var SearchOutlined_default2 = /* @__PURE__ */ React116.forwardRef(SearchOutlined2);

  // node_modules/antd/es/select/utils/iconUtil.js
  var React117 = __toESM(require_react());
  function getIcons(_ref) {
    var suffixIcon = _ref.suffixIcon, clearIcon = _ref.clearIcon, menuItemSelectedIcon = _ref.menuItemSelectedIcon, removeIcon = _ref.removeIcon, loading = _ref.loading, multiple = _ref.multiple, hasFeedback = _ref.hasFeedback, prefixCls = _ref.prefixCls, showArrow = _ref.showArrow, feedbackIcon = _ref.feedbackIcon;
    var mergedClearIcon = clearIcon !== null && clearIcon !== void 0 ? clearIcon : /* @__PURE__ */ React117.createElement(CloseCircleFilled_default2, null);
    var getSuffixIconNode = function getSuffixIconNode2(arrowIcon) {
      return /* @__PURE__ */ React117.createElement(React117.Fragment, null, showArrow !== false && arrowIcon, hasFeedback && feedbackIcon);
    };
    var mergedSuffixIcon = null;
    if (suffixIcon !== void 0) {
      mergedSuffixIcon = getSuffixIconNode(suffixIcon);
    } else if (loading) {
      mergedSuffixIcon = getSuffixIconNode(/* @__PURE__ */ React117.createElement(LoadingOutlined_default2, {
        spin: true
      }));
    } else {
      var iconCls = "".concat(prefixCls, "-suffix");
      mergedSuffixIcon = function mergedSuffixIcon2(_ref2) {
        var open = _ref2.open, showSearch = _ref2.showSearch;
        if (open && showSearch) {
          return getSuffixIconNode(/* @__PURE__ */ React117.createElement(SearchOutlined_default2, {
            className: iconCls
          }));
        }
        return getSuffixIconNode(/* @__PURE__ */ React117.createElement(DownOutlined_default2, {
          className: iconCls
        }));
      };
    }
    var mergedItemIcon = null;
    if (menuItemSelectedIcon !== void 0) {
      mergedItemIcon = menuItemSelectedIcon;
    } else if (multiple) {
      mergedItemIcon = /* @__PURE__ */ React117.createElement(CheckOutlined_default2, null);
    } else {
      mergedItemIcon = null;
    }
    var mergedRemoveIcon = null;
    if (removeIcon !== void 0) {
      mergedRemoveIcon = removeIcon;
    } else {
      mergedRemoveIcon = /* @__PURE__ */ React117.createElement(CloseOutlined_default2, null);
    }
    return {
      clearIcon: mergedClearIcon,
      suffixIcon: mergedSuffixIcon,
      itemIcon: mergedItemIcon,
      removeIcon: mergedRemoveIcon
    };
  }

  // node_modules/antd/es/space/Compact.js
  var import_classnames28 = __toESM(require_classnames());
  var React118 = __toESM(require_react());
  var __rest2 = function(s2, e3) {
    var t4 = {};
    for (var p2 in s2)
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t4[p2] = s2[p2];
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t4[p2[i3]] = s2[p2[i3]];
      }
    return t4;
  };
  var SpaceCompactItemContext = /* @__PURE__ */ React118.createContext(null);
  var useCompactItemContext = function useCompactItemContext2(prefixCls, direction) {
    var compactItemContext = React118.useContext(SpaceCompactItemContext);
    var compactItemClassnames = React118.useMemo(function() {
      var _classNames;
      if (!compactItemContext)
        return "";
      var compactDirection = compactItemContext.compactDirection, isFirstItem = compactItemContext.isFirstItem, isLastItem = compactItemContext.isLastItem;
      var separator = compactDirection === "vertical" ? "-vertical-" : "-";
      return (0, import_classnames28.default)((_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-compact").concat(separator, "item"), true), _defineProperty(_classNames, "".concat(prefixCls, "-compact").concat(separator, "first-item"), isFirstItem), _defineProperty(_classNames, "".concat(prefixCls, "-compact").concat(separator, "last-item"), isLastItem), _defineProperty(_classNames, "".concat(prefixCls, "-compact").concat(separator, "item-rtl"), direction === "rtl"), _classNames));
    }, [prefixCls, direction, compactItemContext]);
    return {
      compactSize: compactItemContext === null || compactItemContext === void 0 ? void 0 : compactItemContext.compactSize,
      compactDirection: compactItemContext === null || compactItemContext === void 0 ? void 0 : compactItemContext.compactDirection,
      compactItemClassnames
    };
  };
  var NoCompactStyle = function NoCompactStyle2(_ref) {
    var children = _ref.children;
    return /* @__PURE__ */ React118.createElement(SpaceCompactItemContext.Provider, {
      value: null
    }, children);
  };
  var CompactItem = function CompactItem2(_a) {
    var children = _a.children, otherProps = __rest2(_a, ["children"]);
    return /* @__PURE__ */ React118.createElement(SpaceCompactItemContext.Provider, {
      value: otherProps
    }, children);
  };
  var Compact = function Compact2(props) {
    var _classNames2;
    var _React$useContext = React118.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls, directionConfig = _React$useContext.direction;
    var _props$size = props.size, size = _props$size === void 0 ? "middle" : _props$size, direction = props.direction, block = props.block, customizePrefixCls = props.prefixCls, className = props.className, children = props.children, restProps = __rest2(props, ["size", "direction", "block", "prefixCls", "className", "children"]);
    var prefixCls = getPrefixCls("space-compact", customizePrefixCls);
    var clx = (0, import_classnames28.default)(prefixCls, (_classNames2 = {}, _defineProperty(_classNames2, "".concat(prefixCls, "-rtl"), directionConfig === "rtl"), _defineProperty(_classNames2, "".concat(prefixCls, "-block"), block), _defineProperty(_classNames2, "".concat(prefixCls, "-vertical"), direction === "vertical"), _classNames2), className);
    var compactItemContext = React118.useContext(SpaceCompactItemContext);
    var childNodes = toArray(children);
    var nodes = React118.useMemo(function() {
      return childNodes.map(function(child, i3) {
        var key2 = child && child.key || "".concat(prefixCls, "-item-").concat(i3);
        return /* @__PURE__ */ React118.createElement(CompactItem, {
          key: key2,
          compactSize: size,
          compactDirection: direction,
          isFirstItem: i3 === 0 && (!compactItemContext || (compactItemContext === null || compactItemContext === void 0 ? void 0 : compactItemContext.isFirstItem)),
          isLastItem: i3 === childNodes.length - 1 && (!compactItemContext || (compactItemContext === null || compactItemContext === void 0 ? void 0 : compactItemContext.isLastItem))
        }, child);
      });
    }, [size, childNodes, compactItemContext]);
    if (childNodes.length === 0) {
      return null;
    }
    return /* @__PURE__ */ React118.createElement("div", _extends({
      className: clx
    }, restProps), nodes);
  };
  var Compact_default = Compact;

  // node_modules/antd/es/select/index.js
  var __rest3 = function(s2, e3) {
    var t4 = {};
    for (var p2 in s2)
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t4[p2] = s2[p2];
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t4[p2[i3]] = s2[p2[i3]];
      }
    return t4;
  };
  var SECRET_COMBOBOX_MODE_DO_NOT_USE = "SECRET_COMBOBOX_MODE_DO_NOT_USE";
  var InternalSelect = function InternalSelect2(_a, ref) {
    var _classNames2;
    var customizePrefixCls = _a.prefixCls, _a$bordered = _a.bordered, bordered = _a$bordered === void 0 ? true : _a$bordered, className = _a.className, getPopupContainer = _a.getPopupContainer, dropdownClassName = _a.dropdownClassName, popupClassName = _a.popupClassName, _a$listHeight = _a.listHeight, listHeight = _a$listHeight === void 0 ? 256 : _a$listHeight, placement = _a.placement, _a$listItemHeight = _a.listItemHeight, listItemHeight = _a$listItemHeight === void 0 ? 24 : _a$listItemHeight, customizeSize = _a.size, customDisabled = _a.disabled, notFoundContent = _a.notFoundContent, customStatus = _a.status, showArrow = _a.showArrow, props = __rest3(_a, ["prefixCls", "bordered", "className", "getPopupContainer", "dropdownClassName", "popupClassName", "listHeight", "placement", "listItemHeight", "size", "disabled", "notFoundContent", "status", "showArrow"]);
    var _React$useContext = React119.useContext(ConfigContext), getContextPopupContainer = _React$useContext.getPopupContainer, getPrefixCls = _React$useContext.getPrefixCls, renderEmpty = _React$useContext.renderEmpty, direction = _React$useContext.direction, virtual = _React$useContext.virtual, dropdownMatchSelectWidth = _React$useContext.dropdownMatchSelectWidth;
    var size = React119.useContext(SizeContext_default);
    var prefixCls = getPrefixCls("select", customizePrefixCls);
    var rootPrefixCls = getPrefixCls();
    var _useCompactItemContex = useCompactItemContext(prefixCls, direction), compactSize = _useCompactItemContex.compactSize, compactItemClassnames = _useCompactItemContex.compactItemClassnames;
    var mode = React119.useMemo(function() {
      var m2 = props.mode;
      if (m2 === "combobox") {
        return void 0;
      }
      if (m2 === SECRET_COMBOBOX_MODE_DO_NOT_USE) {
        return "combobox";
      }
      return m2;
    }, [props.mode]);
    var isMultiple2 = mode === "multiple" || mode === "tags";
    var mergedShowArrow = showArrow !== void 0 ? showArrow : props.loading || !(isMultiple2 || mode === "combobox");
    true ? warning_default2(!dropdownClassName, "Select", "`dropdownClassName` is deprecated which will be removed in next major version. Please use `popupClassName` instead.") : void 0;
    var _useContext = (0, import_react40.useContext)(FormItemInputContext), contextStatus = _useContext.status, hasFeedback = _useContext.hasFeedback, isFormItemInput = _useContext.isFormItemInput, feedbackIcon = _useContext.feedbackIcon;
    var mergedStatus = getMergedStatus(contextStatus, customStatus);
    var mergedNotFound;
    if (notFoundContent !== void 0) {
      mergedNotFound = notFoundContent;
    } else if (mode === "combobox") {
      mergedNotFound = null;
    } else {
      mergedNotFound = (renderEmpty || defaultRenderEmpty_default)("Select");
    }
    var _getIcons = getIcons(_extends(_extends({}, props), {
      multiple: isMultiple2,
      hasFeedback,
      feedbackIcon,
      showArrow: mergedShowArrow,
      prefixCls
    })), suffixIcon = _getIcons.suffixIcon, itemIcon = _getIcons.itemIcon, removeIcon = _getIcons.removeIcon, clearIcon = _getIcons.clearIcon;
    var selectProps = omit(props, ["suffixIcon", "itemIcon"]);
    var rcSelectRtlDropdownClassName = (0, import_classnames29.default)(popupClassName || dropdownClassName, _defineProperty({}, "".concat(prefixCls, "-dropdown-").concat(direction), direction === "rtl"));
    var mergedSize = compactSize || customizeSize || size;
    var disabled = React119.useContext(DisabledContext_default);
    var mergedDisabled = customDisabled !== null && customDisabled !== void 0 ? customDisabled : disabled;
    var mergedClassName = (0, import_classnames29.default)((_classNames2 = {}, _defineProperty(_classNames2, "".concat(prefixCls, "-lg"), mergedSize === "large"), _defineProperty(_classNames2, "".concat(prefixCls, "-sm"), mergedSize === "small"), _defineProperty(_classNames2, "".concat(prefixCls, "-rtl"), direction === "rtl"), _defineProperty(_classNames2, "".concat(prefixCls, "-borderless"), !bordered), _defineProperty(_classNames2, "".concat(prefixCls, "-in-form-item"), isFormItemInput), _classNames2), getStatusClassNames(prefixCls, mergedStatus, hasFeedback), compactItemClassnames, className);
    var getPlacement = function getPlacement2() {
      if (placement !== void 0) {
        return placement;
      }
      return direction === "rtl" ? "bottomRight" : "bottomLeft";
    };
    return /* @__PURE__ */ React119.createElement(es_default9, _extends({
      ref,
      virtual,
      dropdownMatchSelectWidth
    }, selectProps, {
      transitionName: getTransitionName3(rootPrefixCls, getTransitionDirection(placement), props.transitionName),
      listHeight,
      listItemHeight,
      mode,
      prefixCls,
      placement: getPlacement(),
      direction,
      inputIcon: suffixIcon,
      menuItemSelectedIcon: itemIcon,
      removeIcon,
      clearIcon,
      notFoundContent: mergedNotFound,
      className: mergedClassName,
      getPopupContainer: getPopupContainer || getContextPopupContainer,
      dropdownClassName: rcSelectRtlDropdownClassName,
      showArrow: hasFeedback || showArrow,
      disabled: mergedDisabled
    }));
  };
  var Select2 = /* @__PURE__ */ React119.forwardRef(InternalSelect);
  Select2.SECRET_COMBOBOX_MODE_DO_NOT_USE = SECRET_COMBOBOX_MODE_DO_NOT_USE;
  Select2.Option = Option_default;
  Select2.OptGroup = OptGroup_default;
  var select_default = Select2;

  // node_modules/antd/es/grid/hooks/useBreakpoint.js
  var import_react41 = __toESM(require_react());

  // node_modules/antd/es/_util/hooks/useForceUpdate.js
  var React120 = __toESM(require_react());
  function useForceUpdate() {
    var _React$useReducer = React120.useReducer(function(x2) {
      return x2 + 1;
    }, 0), _React$useReducer2 = _slicedToArray(_React$useReducer, 2), forceUpdate = _React$useReducer2[1];
    return forceUpdate;
  }

  // node_modules/antd/es/_util/responsiveObserve.js
  var responsiveArray = ["xxl", "xl", "lg", "md", "sm", "xs"];
  var responsiveMap = {
    xs: "(max-width: 575px)",
    sm: "(min-width: 576px)",
    md: "(min-width: 768px)",
    lg: "(min-width: 992px)",
    xl: "(min-width: 1200px)",
    xxl: "(min-width: 1600px)"
  };
  var subscribers = /* @__PURE__ */ new Map();
  var subUid = -1;
  var screens = {};
  var responsiveObserve = {
    matchHandlers: {},
    dispatch: function dispatch(pointMap) {
      screens = pointMap;
      subscribers.forEach(function(func) {
        return func(screens);
      });
      return subscribers.size >= 1;
    },
    subscribe: function subscribe(func) {
      if (!subscribers.size)
        this.register();
      subUid += 1;
      subscribers.set(subUid, func);
      func(screens);
      return subUid;
    },
    unsubscribe: function unsubscribe(token) {
      subscribers["delete"](token);
      if (!subscribers.size)
        this.unregister();
    },
    unregister: function unregister() {
      var _this = this;
      Object.keys(responsiveMap).forEach(function(screen) {
        var matchMediaQuery = responsiveMap[screen];
        var handler = _this.matchHandlers[matchMediaQuery];
        handler === null || handler === void 0 ? void 0 : handler.mql.removeListener(handler === null || handler === void 0 ? void 0 : handler.listener);
      });
      subscribers.clear();
    },
    register: function register2() {
      var _this2 = this;
      Object.keys(responsiveMap).forEach(function(screen) {
        var matchMediaQuery = responsiveMap[screen];
        var listener2 = function listener3(_ref) {
          var matches = _ref.matches;
          _this2.dispatch(_extends(_extends({}, screens), _defineProperty({}, screen, matches)));
        };
        var mql = window.matchMedia(matchMediaQuery);
        mql.addListener(listener2);
        _this2.matchHandlers[matchMediaQuery] = {
          mql,
          listener: listener2
        };
        listener2(mql);
      });
    }
  };
  var responsiveObserve_default = responsiveObserve;

  // node_modules/antd/es/grid/hooks/useBreakpoint.js
  function useBreakpoint() {
    var refreshOnChange = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
    var screensRef = (0, import_react41.useRef)({});
    var forceUpdate = useForceUpdate();
    (0, import_react41.useEffect)(function() {
      var token = responsiveObserve_default.subscribe(function(supportScreens) {
        screensRef.current = supportScreens;
        if (refreshOnChange) {
          forceUpdate();
        }
      });
      return function() {
        return responsiveObserve_default.unsubscribe(token);
      };
    }, []);
    return screensRef.current;
  }
  var useBreakpoint_default = useBreakpoint;

  // node_modules/antd/es/tooltip/index.js
  var import_classnames31 = __toESM(require_classnames());

  // node_modules/rc-tooltip/es/Tooltip.js
  var React122 = __toESM(require_react());
  var import_react42 = __toESM(require_react());

  // node_modules/rc-tooltip/es/placements.js
  var autoAdjustOverflow = {
    adjustX: 1,
    adjustY: 1
  };
  var targetOffset = [0, 0];
  var placements = {
    left: {
      points: ["cr", "cl"],
      overflow: autoAdjustOverflow,
      offset: [-4, 0],
      targetOffset
    },
    right: {
      points: ["cl", "cr"],
      overflow: autoAdjustOverflow,
      offset: [4, 0],
      targetOffset
    },
    top: {
      points: ["bc", "tc"],
      overflow: autoAdjustOverflow,
      offset: [0, -4],
      targetOffset
    },
    bottom: {
      points: ["tc", "bc"],
      overflow: autoAdjustOverflow,
      offset: [0, 4],
      targetOffset
    },
    topLeft: {
      points: ["bl", "tl"],
      overflow: autoAdjustOverflow,
      offset: [0, -4],
      targetOffset
    },
    leftTop: {
      points: ["tr", "tl"],
      overflow: autoAdjustOverflow,
      offset: [-4, 0],
      targetOffset
    },
    topRight: {
      points: ["br", "tr"],
      overflow: autoAdjustOverflow,
      offset: [0, -4],
      targetOffset
    },
    rightTop: {
      points: ["tl", "tr"],
      overflow: autoAdjustOverflow,
      offset: [4, 0],
      targetOffset
    },
    bottomRight: {
      points: ["tr", "br"],
      overflow: autoAdjustOverflow,
      offset: [0, 4],
      targetOffset
    },
    rightBottom: {
      points: ["bl", "br"],
      overflow: autoAdjustOverflow,
      offset: [4, 0],
      targetOffset
    },
    bottomLeft: {
      points: ["tl", "bl"],
      overflow: autoAdjustOverflow,
      offset: [0, 4],
      targetOffset
    },
    leftBottom: {
      points: ["br", "bl"],
      overflow: autoAdjustOverflow,
      offset: [-4, 0],
      targetOffset
    }
  };

  // node_modules/rc-tooltip/es/Popup.js
  var React121 = __toESM(require_react());
  var import_classnames30 = __toESM(require_classnames());
  function Popup2(props) {
    var showArrow = props.showArrow, arrowContent = props.arrowContent, children = props.children, prefixCls = props.prefixCls, id2 = props.id, overlayInnerStyle = props.overlayInnerStyle, className = props.className, style3 = props.style;
    return /* @__PURE__ */ React121.createElement("div", {
      className: (0, import_classnames30.default)("".concat(prefixCls, "-content"), className),
      style: style3
    }, showArrow !== false && /* @__PURE__ */ React121.createElement("div", {
      className: "".concat(prefixCls, "-arrow"),
      key: "arrow"
    }, arrowContent), /* @__PURE__ */ React121.createElement("div", {
      className: "".concat(prefixCls, "-inner"),
      id: id2,
      role: "tooltip",
      style: overlayInnerStyle
    }, typeof children === "function" ? children() : children));
  }

  // node_modules/rc-tooltip/es/Tooltip.js
  var Tooltip = function Tooltip2(props, ref) {
    var overlayClassName = props.overlayClassName, _props$trigger = props.trigger, trigger = _props$trigger === void 0 ? ["hover"] : _props$trigger, _props$mouseEnterDela = props.mouseEnterDelay, mouseEnterDelay = _props$mouseEnterDela === void 0 ? 0 : _props$mouseEnterDela, _props$mouseLeaveDela = props.mouseLeaveDelay, mouseLeaveDelay = _props$mouseLeaveDela === void 0 ? 0.1 : _props$mouseLeaveDela, overlayStyle = props.overlayStyle, _props$prefixCls = props.prefixCls, prefixCls = _props$prefixCls === void 0 ? "rc-tooltip" : _props$prefixCls, children = props.children, onVisibleChange = props.onVisibleChange, afterVisibleChange = props.afterVisibleChange, transitionName2 = props.transitionName, animation = props.animation, motion2 = props.motion, _props$placement = props.placement, placement = _props$placement === void 0 ? "right" : _props$placement, _props$align = props.align, align = _props$align === void 0 ? {} : _props$align, _props$destroyTooltip = props.destroyTooltipOnHide, destroyTooltipOnHide = _props$destroyTooltip === void 0 ? false : _props$destroyTooltip, defaultVisible = props.defaultVisible, getTooltipContainer = props.getTooltipContainer, overlayInnerStyle = props.overlayInnerStyle, arrowContent = props.arrowContent, overlay = props.overlay, id2 = props.id, showArrow = props.showArrow, restProps = _objectWithoutProperties(props, ["overlayClassName", "trigger", "mouseEnterDelay", "mouseLeaveDelay", "overlayStyle", "prefixCls", "children", "onVisibleChange", "afterVisibleChange", "transitionName", "animation", "motion", "placement", "align", "destroyTooltipOnHide", "defaultVisible", "getTooltipContainer", "overlayInnerStyle", "arrowContent", "overlay", "id", "showArrow"]);
    var domRef = (0, import_react42.useRef)(null);
    (0, import_react42.useImperativeHandle)(ref, function() {
      return domRef.current;
    });
    var extraProps = _objectSpread2({}, restProps);
    if ("visible" in props) {
      extraProps.popupVisible = props.visible;
    }
    var getPopupElement = function getPopupElement2() {
      return /* @__PURE__ */ React122.createElement(Popup2, {
        showArrow,
        arrowContent,
        key: "content",
        prefixCls,
        id: id2,
        overlayInnerStyle
      }, overlay);
    };
    var destroyTooltip = false;
    var autoDestroy = false;
    if (typeof destroyTooltipOnHide === "boolean") {
      destroyTooltip = destroyTooltipOnHide;
    } else if (destroyTooltipOnHide && _typeof(destroyTooltipOnHide) === "object") {
      var keepParent = destroyTooltipOnHide.keepParent;
      destroyTooltip = keepParent === true;
      autoDestroy = keepParent === false;
    }
    return /* @__PURE__ */ React122.createElement(es_default7, _extends({
      popupClassName: overlayClassName,
      prefixCls,
      popup: getPopupElement,
      action: trigger,
      builtinPlacements: placements,
      popupPlacement: placement,
      ref: domRef,
      popupAlign: align,
      getPopupContainer: getTooltipContainer,
      onPopupVisibleChange: onVisibleChange,
      afterPopupVisibleChange: afterVisibleChange,
      popupTransitionName: transitionName2,
      popupAnimation: animation,
      popupMotion: motion2,
      defaultPopupVisible: defaultVisible,
      destroyPopupOnHide: destroyTooltip,
      autoDestroy,
      mouseLeaveDelay,
      popupStyle: overlayStyle,
      mouseEnterDelay
    }, extraProps), children);
  };
  var Tooltip_default = /* @__PURE__ */ (0, import_react42.forwardRef)(Tooltip);

  // node_modules/rc-tooltip/es/index.js
  var es_default11 = Tooltip_default;

  // node_modules/antd/es/tooltip/index.js
  var React123 = __toESM(require_react());

  // node_modules/antd/es/_util/colors.js
  var PresetStatusColorTypes = tuple("success", "processing", "error", "default", "warning");
  var PresetColorTypes = tuple("pink", "red", "yellow", "orange", "cyan", "green", "blue", "purple", "geekblue", "magenta", "volcano", "gold", "lime");

  // node_modules/antd/es/_util/placements.js
  var autoAdjustOverflowEnabled = {
    adjustX: 1,
    adjustY: 1
  };
  var autoAdjustOverflowDisabled = {
    adjustX: 0,
    adjustY: 0
  };
  var targetOffset2 = [0, 0];
  function getOverflowOptions(autoAdjustOverflow4) {
    if (typeof autoAdjustOverflow4 === "boolean") {
      return autoAdjustOverflow4 ? autoAdjustOverflowEnabled : autoAdjustOverflowDisabled;
    }
    return _extends(_extends({}, autoAdjustOverflowDisabled), autoAdjustOverflow4);
  }
  function getPlacements(config) {
    var _config$arrowWidth = config.arrowWidth, arrowWidth = _config$arrowWidth === void 0 ? 4 : _config$arrowWidth, _config$horizontalArr = config.horizontalArrowShift, horizontalArrowShift = _config$horizontalArr === void 0 ? 16 : _config$horizontalArr, _config$verticalArrow = config.verticalArrowShift, verticalArrowShift = _config$verticalArrow === void 0 ? 8 : _config$verticalArrow, autoAdjustOverflow4 = config.autoAdjustOverflow, arrowPointAtCenter = config.arrowPointAtCenter;
    var placementMap = {
      left: {
        points: ["cr", "cl"],
        offset: [-4, 0]
      },
      right: {
        points: ["cl", "cr"],
        offset: [4, 0]
      },
      top: {
        points: ["bc", "tc"],
        offset: [0, -4]
      },
      bottom: {
        points: ["tc", "bc"],
        offset: [0, 4]
      },
      topLeft: {
        points: ["bl", "tc"],
        offset: [-(horizontalArrowShift + arrowWidth), -4]
      },
      leftTop: {
        points: ["tr", "cl"],
        offset: [-4, -(verticalArrowShift + arrowWidth)]
      },
      topRight: {
        points: ["br", "tc"],
        offset: [horizontalArrowShift + arrowWidth, -4]
      },
      rightTop: {
        points: ["tl", "cr"],
        offset: [4, -(verticalArrowShift + arrowWidth)]
      },
      bottomRight: {
        points: ["tr", "bc"],
        offset: [horizontalArrowShift + arrowWidth, 4]
      },
      rightBottom: {
        points: ["bl", "cr"],
        offset: [4, verticalArrowShift + arrowWidth]
      },
      bottomLeft: {
        points: ["tl", "bc"],
        offset: [-(horizontalArrowShift + arrowWidth), 4]
      },
      leftBottom: {
        points: ["br", "cl"],
        offset: [-4, verticalArrowShift + arrowWidth]
      }
    };
    Object.keys(placementMap).forEach(function(key2) {
      placementMap[key2] = arrowPointAtCenter ? _extends(_extends({}, placementMap[key2]), {
        overflow: getOverflowOptions(autoAdjustOverflow4),
        targetOffset: targetOffset2
      }) : _extends(_extends({}, placements[key2]), {
        overflow: getOverflowOptions(autoAdjustOverflow4)
      });
      placementMap[key2].ignoreShake = true;
    });
    return placementMap;
  }

  // node_modules/antd/es/tooltip/index.js
  var __rest4 = function(s2, e3) {
    var t4 = {};
    for (var p2 in s2)
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t4[p2] = s2[p2];
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t4[p2[i3]] = s2[p2[i3]];
      }
    return t4;
  };
  var splitObject = function splitObject2(obj, keys2) {
    var picked = {};
    var omitted = _extends({}, obj);
    keys2.forEach(function(key2) {
      if (obj && key2 in obj) {
        picked[key2] = obj[key2];
        delete omitted[key2];
      }
    });
    return {
      picked,
      omitted
    };
  };
  var PresetColorRegex = new RegExp("^(".concat(PresetColorTypes.join("|"), ")(-inverse)?$"));
  function getDisabledCompatibleChildren(element, prefixCls) {
    var elementType = element.type;
    if ((elementType.__ANT_BUTTON === true || element.type === "button") && element.props.disabled || elementType.__ANT_SWITCH === true && (element.props.disabled || element.props.loading) || elementType.__ANT_RADIO === true && element.props.disabled) {
      var _splitObject = splitObject(element.props.style, ["position", "left", "right", "top", "bottom", "float", "display", "zIndex"]), picked = _splitObject.picked, omitted = _splitObject.omitted;
      var spanStyle = _extends(_extends({
        display: "inline-block"
      }, picked), {
        cursor: "not-allowed",
        width: element.props.block ? "100%" : void 0
      });
      var buttonStyle = _extends(_extends({}, omitted), {
        pointerEvents: "none"
      });
      var child = cloneElement4(element, {
        style: buttonStyle,
        className: null
      });
      return /* @__PURE__ */ React123.createElement("span", {
        style: spanStyle,
        className: (0, import_classnames31.default)(element.props.className, "".concat(prefixCls, "-disabled-compatible-wrapper"))
      }, child);
    }
    return element;
  }
  var Tooltip3 = /* @__PURE__ */ React123.forwardRef(function(props, ref) {
    var _classNames2;
    var _React$useContext = React123.useContext(ConfigContext), getContextPopupContainer = _React$useContext.getPopupContainer, getPrefixCls = _React$useContext.getPrefixCls, direction = _React$useContext.direction;
    if (true) {
      [["visible", "open"], ["defaultVisible", "defaultOpen"], ["onVisibleChange", "onOpenChange"], ["afterVisibleChange", "afterOpenChange"]].forEach(function(_ref) {
        var _ref2 = _slicedToArray(_ref, 2), deprecatedName = _ref2[0], newName = _ref2[1];
        true ? warning_default2(!(deprecatedName in props), "Tooltip", "`".concat(deprecatedName, "` is deprecated which will be removed in next major version, please use `").concat(newName, "` instead.")) : void 0;
      });
    }
    var _useMergedState = useMergedState(false, {
      value: props.open !== void 0 ? props.open : props.visible,
      defaultValue: props.defaultOpen !== void 0 ? props.defaultOpen : props.defaultVisible
    }), _useMergedState2 = _slicedToArray(_useMergedState, 2), open = _useMergedState2[0], setOpen = _useMergedState2[1];
    var isNoTitle = function isNoTitle2() {
      var title = props.title, overlay = props.overlay;
      return !title && !overlay && title !== 0;
    };
    var onOpenChange = function onOpenChange2(vis) {
      var _a, _b;
      setOpen(isNoTitle() ? false : vis);
      if (!isNoTitle()) {
        (_a = props.onOpenChange) === null || _a === void 0 ? void 0 : _a.call(props, vis);
        (_b = props.onVisibleChange) === null || _b === void 0 ? void 0 : _b.call(props, vis);
      }
    };
    var getTooltipPlacements = function getTooltipPlacements2() {
      var builtinPlacements = props.builtinPlacements, _props$arrowPointAtCe = props.arrowPointAtCenter, arrowPointAtCenter = _props$arrowPointAtCe === void 0 ? false : _props$arrowPointAtCe, _props$autoAdjustOver = props.autoAdjustOverflow, autoAdjustOverflow4 = _props$autoAdjustOver === void 0 ? true : _props$autoAdjustOver;
      return builtinPlacements || getPlacements({
        arrowPointAtCenter,
        autoAdjustOverflow: autoAdjustOverflow4
      });
    };
    var onPopupAlign = function onPopupAlign2(domNode, align) {
      var placements4 = getTooltipPlacements();
      var placement2 = Object.keys(placements4).find(function(key2) {
        var _a, _b;
        return placements4[key2].points[0] === ((_a = align.points) === null || _a === void 0 ? void 0 : _a[0]) && placements4[key2].points[1] === ((_b = align.points) === null || _b === void 0 ? void 0 : _b[1]);
      });
      if (!placement2) {
        return;
      }
      var rect = domNode.getBoundingClientRect();
      var transformOrigin = {
        top: "50%",
        left: "50%"
      };
      if (/top|Bottom/.test(placement2)) {
        transformOrigin.top = "".concat(rect.height - align.offset[1], "px");
      } else if (/Top|bottom/.test(placement2)) {
        transformOrigin.top = "".concat(-align.offset[1], "px");
      }
      if (/left|Right/.test(placement2)) {
        transformOrigin.left = "".concat(rect.width - align.offset[0], "px");
      } else if (/right|Left/.test(placement2)) {
        transformOrigin.left = "".concat(-align.offset[0], "px");
      }
      domNode.style.transformOrigin = "".concat(transformOrigin.left, " ").concat(transformOrigin.top);
    };
    var getOverlay = function getOverlay2() {
      var title = props.title, overlay = props.overlay;
      if (title === 0) {
        return title;
      }
      return overlay || title || "";
    };
    var getPopupContainer = props.getPopupContainer, _props$placement = props.placement, placement = _props$placement === void 0 ? "top" : _props$placement, _props$mouseEnterDela = props.mouseEnterDelay, mouseEnterDelay = _props$mouseEnterDela === void 0 ? 0.1 : _props$mouseEnterDela, _props$mouseLeaveDela = props.mouseLeaveDelay, mouseLeaveDelay = _props$mouseLeaveDela === void 0 ? 0.1 : _props$mouseLeaveDela, otherProps = __rest4(props, ["getPopupContainer", "placement", "mouseEnterDelay", "mouseLeaveDelay"]);
    var customizePrefixCls = props.prefixCls, openClassName = props.openClassName, getTooltipContainer = props.getTooltipContainer, overlayClassName = props.overlayClassName, color = props.color, overlayInnerStyle = props.overlayInnerStyle, children = props.children;
    var prefixCls = getPrefixCls("tooltip", customizePrefixCls);
    var rootPrefixCls = getPrefixCls();
    var tempOpen = open;
    if (!("open" in props) && !("visible" in props) && isNoTitle()) {
      tempOpen = false;
    }
    var child = getDisabledCompatibleChildren(isValidElement6(children) && !isFragment3(children) ? children : /* @__PURE__ */ React123.createElement("span", null, children), prefixCls);
    var childProps = child.props;
    var childCls = !childProps.className || typeof childProps.className === "string" ? (0, import_classnames31.default)(childProps.className, _defineProperty({}, openClassName || "".concat(prefixCls, "-open"), true)) : childProps.className;
    var customOverlayClassName = (0, import_classnames31.default)(overlayClassName, (_classNames2 = {}, _defineProperty(_classNames2, "".concat(prefixCls, "-rtl"), direction === "rtl"), _defineProperty(_classNames2, "".concat(prefixCls, "-").concat(color), color && PresetColorRegex.test(color)), _classNames2));
    var formattedOverlayInnerStyle = overlayInnerStyle;
    var arrowContentStyle = {};
    if (color && !PresetColorRegex.test(color)) {
      formattedOverlayInnerStyle = _extends(_extends({}, overlayInnerStyle), {
        background: color
      });
      arrowContentStyle = {
        "--antd-arrow-background-color": color
      };
    }
    return /* @__PURE__ */ React123.createElement(es_default11, _extends({}, otherProps, {
      placement,
      mouseEnterDelay,
      mouseLeaveDelay,
      prefixCls,
      overlayClassName: customOverlayClassName,
      getTooltipContainer: getPopupContainer || getTooltipContainer || getContextPopupContainer,
      ref,
      builtinPlacements: getTooltipPlacements(),
      overlay: getOverlay(),
      visible: tempOpen,
      onVisibleChange: onOpenChange,
      onPopupAlign,
      overlayInnerStyle: formattedOverlayInnerStyle,
      arrowContent: /* @__PURE__ */ React123.createElement("span", {
        className: "".concat(prefixCls, "-arrow-content"),
        style: arrowContentStyle
      }),
      motion: {
        motionName: getTransitionName3(rootPrefixCls, "zoom-big-fast", props.transitionName),
        motionDeadline: 1e3
      }
    }), tempOpen ? cloneElement4(child, {
      className: childCls
    }) : child);
  });
  if (true) {
    Tooltip3.displayName = "Tooltip";
  }
  var tooltip_default = Tooltip3;

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/EllipsisOutlined.js
  var React124 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/EllipsisOutlined.js
  var EllipsisOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M176 511a56 56 0 10112 0 56 56 0 10-112 0zm280 0a56 56 0 10112 0 56 56 0 10-112 0zm280 0a56 56 0 10112 0 56 56 0 10-112 0z" } }] }, "name": "ellipsis", "theme": "outlined" };
  var EllipsisOutlined_default = EllipsisOutlined;

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/EllipsisOutlined.js
  var EllipsisOutlined2 = function EllipsisOutlined3(props, ref) {
    return /* @__PURE__ */ React124.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: EllipsisOutlined_default
    }));
  };
  EllipsisOutlined2.displayName = "EllipsisOutlined";
  var EllipsisOutlined_default2 = /* @__PURE__ */ React124.forwardRef(EllipsisOutlined2);

  // node_modules/antd/es/menu/index.js
  var import_classnames44 = __toESM(require_classnames());

  // node_modules/rc-menu/es/Menu.js
  var import_classnames36 = __toESM(require_classnames());
  var React142 = __toESM(require_react());
  var import_react44 = __toESM(require_react());
  var import_react_dom9 = __toESM(require_react_dom());

  // node_modules/rc-menu/es/context/IdContext.js
  var React125 = __toESM(require_react());
  var IdContext = /* @__PURE__ */ React125.createContext(null);
  function getMenuId(uuid6, eventKey) {
    if (uuid6 === void 0) {
      return null;
    }
    return "".concat(uuid6, "-").concat(eventKey);
  }
  function useMenuId(eventKey) {
    var id2 = React125.useContext(IdContext);
    return getMenuId(id2, eventKey);
  }

  // node_modules/rc-menu/es/context/MenuContext.js
  var React126 = __toESM(require_react());
  var _excluded21 = ["children", "locked"];
  var MenuContext = /* @__PURE__ */ React126.createContext(null);
  function mergeProps(origin, target) {
    var clone2 = _objectSpread2({}, origin);
    Object.keys(target).forEach(function(key2) {
      var value = target[key2];
      if (value !== void 0) {
        clone2[key2] = value;
      }
    });
    return clone2;
  }
  function InheritableContextProvider(_ref) {
    var children = _ref.children, locked = _ref.locked, restProps = _objectWithoutProperties(_ref, _excluded21);
    var context2 = React126.useContext(MenuContext);
    var inheritableContext = useMemo6(function() {
      return mergeProps(context2, restProps);
    }, [context2, restProps], function(prev, next) {
      return !locked && (prev[0] !== next[0] || !isEqual_default(prev[1], next[1], true));
    });
    return /* @__PURE__ */ React126.createElement(MenuContext.Provider, {
      value: inheritableContext
    }, children);
  }

  // node_modules/rc-menu/es/context/PathContext.js
  var React127 = __toESM(require_react());
  var EmptyList = [];
  var PathRegisterContext = /* @__PURE__ */ React127.createContext(null);
  function useMeasure() {
    return React127.useContext(PathRegisterContext);
  }
  var PathTrackerContext = /* @__PURE__ */ React127.createContext(EmptyList);
  function useFullPath(eventKey) {
    var parentKeyPath = React127.useContext(PathTrackerContext);
    return React127.useMemo(function() {
      return eventKey !== void 0 ? [].concat(_toConsumableArray(parentKeyPath), [eventKey]) : parentKeyPath;
    }, [parentKeyPath, eventKey]);
  }
  var PathUserContext = /* @__PURE__ */ React127.createContext(null);

  // node_modules/rc-menu/es/context/PrivateContext.js
  var React128 = __toESM(require_react());
  var PrivateContext = /* @__PURE__ */ React128.createContext({});
  var PrivateContext_default = PrivateContext;

  // node_modules/rc-menu/es/hooks/useAccessibility.js
  var React129 = __toESM(require_react());

  // node_modules/rc-util/es/Dom/focus.js
  function focusable(node) {
    var includePositive = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    if (isVisible_default(node)) {
      var nodeName = node.nodeName.toLowerCase();
      var isFocusableElement = (
        // Focusable element
        ["input", "select", "textarea", "button"].includes(nodeName) || // Editable element
        node.isContentEditable || // Anchor with href element
        nodeName === "a" && !!node.getAttribute("href")
      );
      var tabIndexAttr = node.getAttribute("tabindex");
      var tabIndexNum = Number(tabIndexAttr);
      var tabIndex = null;
      if (tabIndexAttr && !Number.isNaN(tabIndexNum)) {
        tabIndex = tabIndexNum;
      } else if (isFocusableElement && tabIndex === null) {
        tabIndex = 0;
      }
      if (isFocusableElement && node.disabled) {
        tabIndex = null;
      }
      return tabIndex !== null && (tabIndex >= 0 || includePositive && tabIndex < 0);
    }
    return false;
  }
  function getFocusNodeList(node) {
    var includePositive = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    var res = _toConsumableArray(node.querySelectorAll("*")).filter(function(child) {
      return focusable(child, includePositive);
    });
    if (focusable(node, includePositive)) {
      res.unshift(node);
    }
    return res;
  }

  // node_modules/rc-menu/es/hooks/useAccessibility.js
  var LEFT2 = KeyCode_default.LEFT;
  var RIGHT = KeyCode_default.RIGHT;
  var UP = KeyCode_default.UP;
  var DOWN = KeyCode_default.DOWN;
  var ENTER = KeyCode_default.ENTER;
  var ESC = KeyCode_default.ESC;
  var HOME = KeyCode_default.HOME;
  var END = KeyCode_default.END;
  var ArrowKeys = [UP, DOWN, LEFT2, RIGHT];
  function getOffset2(mode, isRootLevel, isRtl, which) {
    var _inline, _horizontal, _vertical, _offsets;
    var prev = "prev";
    var next = "next";
    var children = "children";
    var parent = "parent";
    if (mode === "inline" && which === ENTER) {
      return {
        inlineTrigger: true
      };
    }
    var inline2 = (_inline = {}, _defineProperty(_inline, UP, prev), _defineProperty(_inline, DOWN, next), _inline);
    var horizontal = (_horizontal = {}, _defineProperty(_horizontal, LEFT2, isRtl ? next : prev), _defineProperty(_horizontal, RIGHT, isRtl ? prev : next), _defineProperty(_horizontal, DOWN, children), _defineProperty(_horizontal, ENTER, children), _horizontal);
    var vertical = (_vertical = {}, _defineProperty(_vertical, UP, prev), _defineProperty(_vertical, DOWN, next), _defineProperty(_vertical, ENTER, children), _defineProperty(_vertical, ESC, parent), _defineProperty(_vertical, LEFT2, isRtl ? children : parent), _defineProperty(_vertical, RIGHT, isRtl ? parent : children), _vertical);
    var offsets = {
      inline: inline2,
      horizontal,
      vertical,
      inlineSub: inline2,
      horizontalSub: vertical,
      verticalSub: vertical
    };
    var type4 = (_offsets = offsets["".concat(mode).concat(isRootLevel ? "" : "Sub")]) === null || _offsets === void 0 ? void 0 : _offsets[which];
    switch (type4) {
      case prev:
        return {
          offset: -1,
          sibling: true
        };
      case next:
        return {
          offset: 1,
          sibling: true
        };
      case parent:
        return {
          offset: -1,
          sibling: false
        };
      case children:
        return {
          offset: 1,
          sibling: false
        };
      default:
        return null;
    }
  }
  function findContainerUL(element) {
    var current = element;
    while (current) {
      if (current.getAttribute("data-menu-list")) {
        return current;
      }
      current = current.parentElement;
    }
    return null;
  }
  function getFocusElement(activeElement, elements) {
    var current = activeElement || document.activeElement;
    while (current) {
      if (elements.has(current)) {
        return current;
      }
      current = current.parentElement;
    }
    return null;
  }
  function getFocusableElements(container, elements) {
    var list = getFocusNodeList(container, true);
    return list.filter(function(ele) {
      return elements.has(ele);
    });
  }
  function getNextFocusElement(parentQueryContainer, elements, focusMenuElement) {
    var offset4 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 1;
    if (!parentQueryContainer) {
      return null;
    }
    var sameLevelFocusableMenuElementList = getFocusableElements(parentQueryContainer, elements);
    var count = sameLevelFocusableMenuElementList.length;
    var focusIndex = sameLevelFocusableMenuElementList.findIndex(function(ele) {
      return focusMenuElement === ele;
    });
    if (offset4 < 0) {
      if (focusIndex === -1) {
        focusIndex = count - 1;
      } else {
        focusIndex -= 1;
      }
    } else if (offset4 > 0) {
      focusIndex += 1;
    }
    focusIndex = (focusIndex + count) % count;
    return sameLevelFocusableMenuElementList[focusIndex];
  }
  function useAccessibility(mode, activeKey, isRtl, id2, containerRef, getKeys, getKeyPath, triggerActiveKey, triggerAccessibilityOpen, originOnKeyDown) {
    var rafRef = React129.useRef();
    var activeRef = React129.useRef();
    activeRef.current = activeKey;
    var cleanRaf = function cleanRaf2() {
      raf_default.cancel(rafRef.current);
    };
    React129.useEffect(function() {
      return function() {
        cleanRaf();
      };
    }, []);
    return function(e3) {
      var which = e3.which;
      if ([].concat(ArrowKeys, [ENTER, ESC, HOME, END]).includes(which)) {
        var elements;
        var key2element;
        var element2key;
        var refreshElements = function refreshElements2() {
          elements = /* @__PURE__ */ new Set();
          key2element = /* @__PURE__ */ new Map();
          element2key = /* @__PURE__ */ new Map();
          var keys2 = getKeys();
          keys2.forEach(function(key2) {
            var element = document.querySelector("[data-menu-id='".concat(getMenuId(id2, key2), "']"));
            if (element) {
              elements.add(element);
              element2key.set(element, key2);
              key2element.set(key2, element);
            }
          });
          return elements;
        };
        refreshElements();
        var activeElement = key2element.get(activeKey);
        var focusMenuElement = getFocusElement(activeElement, elements);
        var focusMenuKey = element2key.get(focusMenuElement);
        var offsetObj = getOffset2(mode, getKeyPath(focusMenuKey, true).length === 1, isRtl, which);
        if (!offsetObj && which !== HOME && which !== END) {
          return;
        }
        if (ArrowKeys.includes(which) || [HOME, END].includes(which)) {
          e3.preventDefault();
        }
        var tryFocus = function tryFocus2(menuElement) {
          if (menuElement) {
            var focusTargetElement = menuElement;
            var link = menuElement.querySelector("a");
            if (link !== null && link !== void 0 && link.getAttribute("href")) {
              focusTargetElement = link;
            }
            var targetKey = element2key.get(menuElement);
            triggerActiveKey(targetKey);
            cleanRaf();
            rafRef.current = raf_default(function() {
              if (activeRef.current === targetKey) {
                focusTargetElement.focus();
              }
            });
          }
        };
        if ([HOME, END].includes(which) || offsetObj.sibling || !focusMenuElement) {
          var parentQueryContainer;
          if (!focusMenuElement || mode === "inline") {
            parentQueryContainer = containerRef.current;
          } else {
            parentQueryContainer = findContainerUL(focusMenuElement);
          }
          var targetElement;
          var focusableElements = getFocusableElements(parentQueryContainer, elements);
          if (which === HOME) {
            targetElement = focusableElements[0];
          } else if (which === END) {
            targetElement = focusableElements[focusableElements.length - 1];
          } else {
            targetElement = getNextFocusElement(parentQueryContainer, elements, focusMenuElement, offsetObj.offset);
          }
          tryFocus(targetElement);
        } else if (offsetObj.inlineTrigger) {
          triggerAccessibilityOpen(focusMenuKey);
        } else if (offsetObj.offset > 0) {
          triggerAccessibilityOpen(focusMenuKey, true);
          cleanRaf();
          rafRef.current = raf_default(function() {
            refreshElements();
            var controlId = focusMenuElement.getAttribute("aria-controls");
            var subQueryContainer = document.getElementById(controlId);
            var targetElement2 = getNextFocusElement(subQueryContainer, elements);
            tryFocus(targetElement2);
          }, 5);
        } else if (offsetObj.offset < 0) {
          var keyPath = getKeyPath(focusMenuKey, true);
          var parentKey = keyPath[keyPath.length - 2];
          var parentMenuElement = key2element.get(parentKey);
          triggerAccessibilityOpen(parentKey, false);
          tryFocus(parentMenuElement);
        }
      }
      originOnKeyDown === null || originOnKeyDown === void 0 ? void 0 : originOnKeyDown(e3);
    };
  }

  // node_modules/rc-menu/es/hooks/useKeyRecords.js
  var React130 = __toESM(require_react());
  var import_react43 = __toESM(require_react());

  // node_modules/rc-menu/es/utils/timeUtil.js
  function nextSlice(callback) {
    Promise.resolve().then(callback);
  }

  // node_modules/rc-menu/es/hooks/useKeyRecords.js
  var PATH_SPLIT = "__RC_UTIL_PATH_SPLIT__";
  var getPathStr = function getPathStr2(keyPath) {
    return keyPath.join(PATH_SPLIT);
  };
  var getPathKeys = function getPathKeys2(keyPathStr) {
    return keyPathStr.split(PATH_SPLIT);
  };
  var OVERFLOW_KEY = "rc-menu-more";
  function useKeyRecords() {
    var _React$useState = React130.useState({}), _React$useState2 = _slicedToArray(_React$useState, 2), internalForceUpdate = _React$useState2[1];
    var key2pathRef = (0, import_react43.useRef)(/* @__PURE__ */ new Map());
    var path2keyRef = (0, import_react43.useRef)(/* @__PURE__ */ new Map());
    var _React$useState3 = React130.useState([]), _React$useState4 = _slicedToArray(_React$useState3, 2), overflowKeys = _React$useState4[0], setOverflowKeys = _React$useState4[1];
    var updateRef = (0, import_react43.useRef)(0);
    var destroyRef = (0, import_react43.useRef)(false);
    var forceUpdate = function forceUpdate2() {
      if (!destroyRef.current) {
        internalForceUpdate({});
      }
    };
    var registerPath = (0, import_react43.useCallback)(function(key2, keyPath) {
      if (true) {
        warning_default(!key2pathRef.current.has(key2), "Duplicated key '".concat(key2, "' used in Menu by path [").concat(keyPath.join(" > "), "]"));
      }
      var connectedPath = getPathStr(keyPath);
      path2keyRef.current.set(connectedPath, key2);
      key2pathRef.current.set(key2, connectedPath);
      updateRef.current += 1;
      var id2 = updateRef.current;
      nextSlice(function() {
        if (id2 === updateRef.current) {
          forceUpdate();
        }
      });
    }, []);
    var unregisterPath = (0, import_react43.useCallback)(function(key2, keyPath) {
      var connectedPath = getPathStr(keyPath);
      path2keyRef.current.delete(connectedPath);
      key2pathRef.current.delete(key2);
    }, []);
    var refreshOverflowKeys = (0, import_react43.useCallback)(function(keys2) {
      setOverflowKeys(keys2);
    }, []);
    var getKeyPath = (0, import_react43.useCallback)(function(eventKey, includeOverflow) {
      var fullPath = key2pathRef.current.get(eventKey) || "";
      var keys2 = getPathKeys(fullPath);
      if (includeOverflow && overflowKeys.includes(keys2[0])) {
        keys2.unshift(OVERFLOW_KEY);
      }
      return keys2;
    }, [overflowKeys]);
    var isSubPathKey = (0, import_react43.useCallback)(function(pathKeys, eventKey) {
      return pathKeys.some(function(pathKey) {
        var pathKeyList = getKeyPath(pathKey, true);
        return pathKeyList.includes(eventKey);
      });
    }, [getKeyPath]);
    var getKeys = function getKeys2() {
      var keys2 = _toConsumableArray(key2pathRef.current.keys());
      if (overflowKeys.length) {
        keys2.push(OVERFLOW_KEY);
      }
      return keys2;
    };
    var getSubPathKeys = (0, import_react43.useCallback)(function(key2) {
      var connectedPath = "".concat(key2pathRef.current.get(key2)).concat(PATH_SPLIT);
      var pathKeys = /* @__PURE__ */ new Set();
      _toConsumableArray(path2keyRef.current.keys()).forEach(function(pathKey) {
        if (pathKey.startsWith(connectedPath)) {
          pathKeys.add(path2keyRef.current.get(pathKey));
        }
      });
      return pathKeys;
    }, []);
    React130.useEffect(function() {
      return function() {
        destroyRef.current = true;
      };
    }, []);
    return {
      // Register
      registerPath,
      unregisterPath,
      refreshOverflowKeys,
      // Util
      isSubPathKey,
      getKeyPath,
      getKeys,
      getSubPathKeys
    };
  }

  // node_modules/rc-menu/es/hooks/useMemoCallback.js
  var React131 = __toESM(require_react());
  function useMemoCallback(func) {
    var funRef = React131.useRef(func);
    funRef.current = func;
    var callback = React131.useCallback(function() {
      var _funRef$current;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return (_funRef$current = funRef.current) === null || _funRef$current === void 0 ? void 0 : _funRef$current.call.apply(_funRef$current, [funRef].concat(args));
    }, []);
    return func ? callback : void 0;
  }

  // node_modules/rc-menu/es/hooks/useUUID.js
  var React132 = __toESM(require_react());
  var uniquePrefix = Math.random().toFixed(5).toString().slice(2);
  var internalId = 0;
  function useUUID(id2) {
    var _useMergedState = useMergedState(id2, {
      value: id2
    }), _useMergedState2 = _slicedToArray(_useMergedState, 2), uuid6 = _useMergedState2[0], setUUID = _useMergedState2[1];
    React132.useEffect(function() {
      internalId += 1;
      var newId = false ? "test" : "".concat(uniquePrefix, "-").concat(internalId);
      setUUID("rc-menu-uuid-".concat(newId));
    }, []);
    return uuid6;
  }

  // node_modules/rc-menu/es/MenuItem.js
  var import_classnames32 = __toESM(require_classnames());
  var React136 = __toESM(require_react());

  // node_modules/rc-menu/es/hooks/useActive.js
  var React133 = __toESM(require_react());
  function useActive(eventKey, disabled, onMouseEnter, onMouseLeave) {
    var _React$useContext = React133.useContext(MenuContext), activeKey = _React$useContext.activeKey, onActive = _React$useContext.onActive, onInactive = _React$useContext.onInactive;
    var ret = {
      active: activeKey === eventKey
    };
    if (!disabled) {
      ret.onMouseEnter = function(domEvent) {
        onMouseEnter === null || onMouseEnter === void 0 ? void 0 : onMouseEnter({
          key: eventKey,
          domEvent
        });
        onActive(eventKey);
      };
      ret.onMouseLeave = function(domEvent) {
        onMouseLeave === null || onMouseLeave === void 0 ? void 0 : onMouseLeave({
          key: eventKey,
          domEvent
        });
        onInactive(eventKey);
      };
    }
    return ret;
  }

  // node_modules/rc-menu/es/hooks/useDirectionStyle.js
  var React134 = __toESM(require_react());
  function useDirectionStyle(level) {
    var _React$useContext = React134.useContext(MenuContext), mode = _React$useContext.mode, rtl3 = _React$useContext.rtl, inlineIndent = _React$useContext.inlineIndent;
    if (mode !== "inline") {
      return null;
    }
    var len = level;
    return rtl3 ? {
      paddingRight: len * inlineIndent
    } : {
      paddingLeft: len * inlineIndent
    };
  }

  // node_modules/rc-menu/es/Icon.js
  var React135 = __toESM(require_react());
  function Icon2(_ref) {
    var icon = _ref.icon, props = _ref.props, children = _ref.children;
    var iconNode;
    if (typeof icon === "function") {
      iconNode = /* @__PURE__ */ React135.createElement(icon, _objectSpread2({}, props));
    } else {
      iconNode = icon;
    }
    return iconNode || children || null;
  }

  // node_modules/rc-menu/es/utils/warnUtil.js
  var _excluded25 = ["item"];
  function warnItemProp(_ref) {
    var item = _ref.item, restInfo = _objectWithoutProperties(_ref, _excluded25);
    Object.defineProperty(restInfo, "item", {
      get: function get3() {
        warning_default(false, "`info.item` is deprecated since we will move to function component that not provides React Node instance in future.");
        return item;
      }
    });
    return restInfo;
  }

  // node_modules/rc-menu/es/MenuItem.js
  var _excluded26 = ["title", "attribute", "elementRef"];
  var _excluded27 = ["style", "className", "eventKey", "warnKey", "disabled", "itemIcon", "children", "role", "onMouseEnter", "onMouseLeave", "onClick", "onKeyDown", "onFocus"];
  var _excluded33 = ["active"];
  var LegacyMenuItem = /* @__PURE__ */ function(_React$Component) {
    _inherits(LegacyMenuItem2, _React$Component);
    var _super = _createSuper(LegacyMenuItem2);
    function LegacyMenuItem2() {
      _classCallCheck(this, LegacyMenuItem2);
      return _super.apply(this, arguments);
    }
    _createClass(LegacyMenuItem2, [{
      key: "render",
      value: function render2() {
        var _this$props = this.props, title = _this$props.title, attribute = _this$props.attribute, elementRef = _this$props.elementRef, restProps = _objectWithoutProperties(_this$props, _excluded26);
        var passedProps = omit(restProps, ["eventKey", "popupClassName", "popupOffset", "onTitleClick"]);
        warning_default(!attribute, "`attribute` of Menu.Item is deprecated. Please pass attribute directly.");
        return /* @__PURE__ */ React136.createElement(es_default5.Item, _extends({}, attribute, {
          title: typeof title === "string" ? title : void 0
        }, passedProps, {
          ref: elementRef
        }));
      }
    }]);
    return LegacyMenuItem2;
  }(React136.Component);
  var InternalMenuItem = /* @__PURE__ */ React136.forwardRef(function(props, ref) {
    var _classNames;
    var style3 = props.style, className = props.className, eventKey = props.eventKey, warnKey = props.warnKey, disabled = props.disabled, itemIcon = props.itemIcon, children = props.children, role = props.role, onMouseEnter = props.onMouseEnter, onMouseLeave = props.onMouseLeave, onClick = props.onClick, onKeyDown3 = props.onKeyDown, onFocus = props.onFocus, restProps = _objectWithoutProperties(props, _excluded27);
    var domDataId = useMenuId(eventKey);
    var _React$useContext = React136.useContext(MenuContext), prefixCls = _React$useContext.prefixCls, onItemClick = _React$useContext.onItemClick, contextDisabled = _React$useContext.disabled, overflowDisabled = _React$useContext.overflowDisabled, contextItemIcon = _React$useContext.itemIcon, selectedKeys = _React$useContext.selectedKeys, onActive = _React$useContext.onActive;
    var _React$useContext2 = React136.useContext(PrivateContext_default), _internalRenderMenuItem = _React$useContext2._internalRenderMenuItem;
    var itemCls = "".concat(prefixCls, "-item");
    var legacyMenuItemRef = React136.useRef();
    var elementRef = React136.useRef();
    var mergedDisabled = contextDisabled || disabled;
    var mergedEleRef = useComposeRef(ref, elementRef);
    var connectedKeys = useFullPath(eventKey);
    if (warnKey) {
      warning_default(false, "MenuItem should not leave undefined `key`.");
    }
    var getEventInfo = function getEventInfo2(e3) {
      return {
        key: eventKey,
        // Note: For legacy code is reversed which not like other antd component
        keyPath: _toConsumableArray(connectedKeys).reverse(),
        item: legacyMenuItemRef.current,
        domEvent: e3
      };
    };
    var mergedItemIcon = itemIcon || contextItemIcon;
    var _useActive = useActive(eventKey, mergedDisabled, onMouseEnter, onMouseLeave), active = _useActive.active, activeProps = _objectWithoutProperties(_useActive, _excluded33);
    var selected = selectedKeys.includes(eventKey);
    var directionStyle = useDirectionStyle(connectedKeys.length);
    var onInternalClick = function onInternalClick2(e3) {
      if (mergedDisabled) {
        return;
      }
      var info = getEventInfo(e3);
      onClick === null || onClick === void 0 ? void 0 : onClick(warnItemProp(info));
      onItemClick(info);
    };
    var onInternalKeyDown = function onInternalKeyDown2(e3) {
      onKeyDown3 === null || onKeyDown3 === void 0 ? void 0 : onKeyDown3(e3);
      if (e3.which === KeyCode_default.ENTER) {
        var info = getEventInfo(e3);
        onClick === null || onClick === void 0 ? void 0 : onClick(warnItemProp(info));
        onItemClick(info);
      }
    };
    var onInternalFocus = function onInternalFocus2(e3) {
      onActive(eventKey);
      onFocus === null || onFocus === void 0 ? void 0 : onFocus(e3);
    };
    var optionRoleProps = {};
    if (props.role === "option") {
      optionRoleProps["aria-selected"] = selected;
    }
    var renderNode = /* @__PURE__ */ React136.createElement(LegacyMenuItem, _extends({
      ref: legacyMenuItemRef,
      elementRef: mergedEleRef,
      role: role === null ? "none" : role || "menuitem",
      tabIndex: disabled ? null : -1,
      "data-menu-id": overflowDisabled && domDataId ? null : domDataId
    }, restProps, activeProps, optionRoleProps, {
      component: "li",
      "aria-disabled": disabled,
      style: _objectSpread2(_objectSpread2({}, directionStyle), style3),
      className: (0, import_classnames32.default)(itemCls, (_classNames = {}, _defineProperty(_classNames, "".concat(itemCls, "-active"), active), _defineProperty(_classNames, "".concat(itemCls, "-selected"), selected), _defineProperty(_classNames, "".concat(itemCls, "-disabled"), mergedDisabled), _classNames), className),
      onClick: onInternalClick,
      onKeyDown: onInternalKeyDown,
      onFocus: onInternalFocus
    }), children, /* @__PURE__ */ React136.createElement(Icon2, {
      props: _objectSpread2(_objectSpread2({}, props), {}, {
        isSelected: selected
      }),
      icon: mergedItemIcon
    }));
    if (_internalRenderMenuItem) {
      renderNode = _internalRenderMenuItem(renderNode, props, {
        selected
      });
    }
    return renderNode;
  });
  function MenuItem(props, ref) {
    var eventKey = props.eventKey;
    var measure = useMeasure();
    var connectedKeyPath = useFullPath(eventKey);
    React136.useEffect(function() {
      if (measure) {
        measure.registerPath(eventKey, connectedKeyPath);
        return function() {
          measure.unregisterPath(eventKey, connectedKeyPath);
        };
      }
    }, [connectedKeyPath]);
    if (measure) {
      return null;
    }
    return /* @__PURE__ */ React136.createElement(InternalMenuItem, _extends({}, props, {
      ref
    }));
  }
  var MenuItem_default = /* @__PURE__ */ React136.forwardRef(MenuItem);

  // node_modules/rc-menu/es/SubMenu/index.js
  var React141 = __toESM(require_react());
  var import_classnames35 = __toESM(require_classnames());

  // node_modules/rc-menu/es/SubMenu/SubMenuList.js
  var React137 = __toESM(require_react());
  var import_classnames33 = __toESM(require_classnames());
  var _excluded28 = ["className", "children"];
  var InternalSubMenuList = function InternalSubMenuList2(_ref, ref) {
    var className = _ref.className, children = _ref.children, restProps = _objectWithoutProperties(_ref, _excluded28);
    var _React$useContext = React137.useContext(MenuContext), prefixCls = _React$useContext.prefixCls, mode = _React$useContext.mode, rtl3 = _React$useContext.rtl;
    return /* @__PURE__ */ React137.createElement("ul", _extends({
      className: (0, import_classnames33.default)(prefixCls, rtl3 && "".concat(prefixCls, "-rtl"), "".concat(prefixCls, "-sub"), "".concat(prefixCls, "-").concat(mode === "inline" ? "inline" : "vertical"), className),
      role: "menu"
    }, restProps, {
      "data-menu-list": true,
      ref
    }), children);
  };
  var SubMenuList = /* @__PURE__ */ React137.forwardRef(InternalSubMenuList);
  SubMenuList.displayName = "SubMenuList";
  var SubMenuList_default = SubMenuList;

  // node_modules/rc-menu/es/utils/nodeUtil.js
  var React138 = __toESM(require_react());
  var _excluded29 = ["label", "children", "key", "type"];
  function parseChildren(children, keyPath) {
    return toArray(children).map(function(child, index2) {
      if (/* @__PURE__ */ React138.isValidElement(child)) {
        var _eventKey, _child$props;
        var key2 = child.key;
        var eventKey = (_eventKey = (_child$props = child.props) === null || _child$props === void 0 ? void 0 : _child$props.eventKey) !== null && _eventKey !== void 0 ? _eventKey : key2;
        var emptyKey = eventKey === null || eventKey === void 0;
        if (emptyKey) {
          eventKey = "tmp_key-".concat([].concat(_toConsumableArray(keyPath), [index2]).join("-"));
        }
        var cloneProps = {
          key: eventKey,
          eventKey
        };
        if (emptyKey) {
          cloneProps.warnKey = true;
        }
        return /* @__PURE__ */ React138.cloneElement(child, cloneProps);
      }
      return child;
    });
  }
  function convertItemsToNodes(list) {
    return (list || []).map(function(opt, index2) {
      if (opt && _typeof(opt) === "object") {
        var _ref = opt, label = _ref.label, children = _ref.children, key2 = _ref.key, type4 = _ref.type, restProps = _objectWithoutProperties(_ref, _excluded29);
        var mergedKey = key2 !== null && key2 !== void 0 ? key2 : "tmp-".concat(index2);
        if (children || type4 === "group") {
          if (type4 === "group") {
            return /* @__PURE__ */ React138.createElement(MenuItemGroup, _extends({
              key: mergedKey
            }, restProps, {
              title: label
            }), convertItemsToNodes(children));
          }
          return /* @__PURE__ */ React138.createElement(SubMenu, _extends({
            key: mergedKey
          }, restProps, {
            title: label
          }), convertItemsToNodes(children));
        }
        if (type4 === "divider") {
          return /* @__PURE__ */ React138.createElement(Divider, _extends({
            key: mergedKey
          }, restProps));
        }
        return /* @__PURE__ */ React138.createElement(MenuItem_default, _extends({
          key: mergedKey
        }, restProps), label);
      }
      return null;
    }).filter(function(opt) {
      return opt;
    });
  }
  function parseItems(children, items, keyPath) {
    var childNodes = children;
    if (items) {
      childNodes = convertItemsToNodes(items);
    }
    return parseChildren(childNodes, keyPath);
  }

  // node_modules/rc-menu/es/SubMenu/PopupTrigger.js
  var React139 = __toESM(require_react());
  var import_classnames34 = __toESM(require_classnames());

  // node_modules/rc-menu/es/placements.js
  var autoAdjustOverflow2 = {
    adjustX: 1,
    adjustY: 1
  };
  var placements2 = {
    topLeft: {
      points: ["bl", "tl"],
      overflow: autoAdjustOverflow2,
      offset: [0, -7]
    },
    bottomLeft: {
      points: ["tl", "bl"],
      overflow: autoAdjustOverflow2,
      offset: [0, 7]
    },
    leftTop: {
      points: ["tr", "tl"],
      overflow: autoAdjustOverflow2,
      offset: [-4, 0]
    },
    rightTop: {
      points: ["tl", "tr"],
      overflow: autoAdjustOverflow2,
      offset: [4, 0]
    }
  };
  var placementsRtl = {
    topLeft: {
      points: ["bl", "tl"],
      overflow: autoAdjustOverflow2,
      offset: [0, -7]
    },
    bottomLeft: {
      points: ["tl", "bl"],
      overflow: autoAdjustOverflow2,
      offset: [0, 7]
    },
    rightTop: {
      points: ["tr", "tl"],
      overflow: autoAdjustOverflow2,
      offset: [-4, 0]
    },
    leftTop: {
      points: ["tl", "tr"],
      overflow: autoAdjustOverflow2,
      offset: [4, 0]
    }
  };

  // node_modules/rc-menu/es/utils/motionUtil.js
  function getMotion2(mode, motion2, defaultMotions) {
    if (motion2) {
      return motion2;
    }
    if (defaultMotions) {
      return defaultMotions[mode] || defaultMotions.other;
    }
    return void 0;
  }

  // node_modules/rc-menu/es/SubMenu/PopupTrigger.js
  var popupPlacementMap = {
    horizontal: "bottomLeft",
    vertical: "rightTop",
    "vertical-left": "rightTop",
    "vertical-right": "leftTop"
  };
  function PopupTrigger(_ref) {
    var prefixCls = _ref.prefixCls, visible = _ref.visible, children = _ref.children, popup = _ref.popup, popupClassName = _ref.popupClassName, popupOffset = _ref.popupOffset, disabled = _ref.disabled, mode = _ref.mode, onVisibleChange = _ref.onVisibleChange;
    var _React$useContext = React139.useContext(MenuContext), getPopupContainer = _React$useContext.getPopupContainer, rtl3 = _React$useContext.rtl, subMenuOpenDelay = _React$useContext.subMenuOpenDelay, subMenuCloseDelay = _React$useContext.subMenuCloseDelay, builtinPlacements = _React$useContext.builtinPlacements, triggerSubMenuAction = _React$useContext.triggerSubMenuAction, forceSubMenuRender = _React$useContext.forceSubMenuRender, rootClassName = _React$useContext.rootClassName, motion2 = _React$useContext.motion, defaultMotions = _React$useContext.defaultMotions;
    var _React$useState = React139.useState(false), _React$useState2 = _slicedToArray(_React$useState, 2), innerVisible = _React$useState2[0], setInnerVisible = _React$useState2[1];
    var placement = rtl3 ? _objectSpread2(_objectSpread2({}, placementsRtl), builtinPlacements) : _objectSpread2(_objectSpread2({}, placements2), builtinPlacements);
    var popupPlacement = popupPlacementMap[mode];
    var targetMotion = getMotion2(mode, motion2, defaultMotions);
    var targetMotionRef = React139.useRef(targetMotion);
    if (mode !== "inline") {
      targetMotionRef.current = targetMotion;
    }
    var mergedMotion = _objectSpread2(_objectSpread2({}, targetMotionRef.current), {}, {
      leavedClassName: "".concat(prefixCls, "-hidden"),
      removeOnLeave: false,
      motionAppear: true
    });
    var visibleRef = React139.useRef();
    React139.useEffect(function() {
      visibleRef.current = raf_default(function() {
        setInnerVisible(visible);
      });
      return function() {
        raf_default.cancel(visibleRef.current);
      };
    }, [visible]);
    return /* @__PURE__ */ React139.createElement(es_default7, {
      prefixCls,
      popupClassName: (0, import_classnames34.default)("".concat(prefixCls, "-popup"), _defineProperty({}, "".concat(prefixCls, "-rtl"), rtl3), popupClassName, rootClassName),
      stretch: mode === "horizontal" ? "minWidth" : null,
      getPopupContainer,
      builtinPlacements: placement,
      popupPlacement,
      popupVisible: innerVisible,
      popup,
      popupAlign: popupOffset && {
        offset: popupOffset
      },
      action: disabled ? [] : [triggerSubMenuAction],
      mouseEnterDelay: subMenuOpenDelay,
      mouseLeaveDelay: subMenuCloseDelay,
      onPopupVisibleChange: onVisibleChange,
      forceRender: forceSubMenuRender,
      popupMotion: mergedMotion
    }, children);
  }

  // node_modules/rc-menu/es/SubMenu/InlineSubMenuList.js
  var React140 = __toESM(require_react());
  function InlineSubMenuList(_ref) {
    var id2 = _ref.id, open = _ref.open, keyPath = _ref.keyPath, children = _ref.children;
    var fixedMode = "inline";
    var _React$useContext = React140.useContext(MenuContext), prefixCls = _React$useContext.prefixCls, forceSubMenuRender = _React$useContext.forceSubMenuRender, motion2 = _React$useContext.motion, defaultMotions = _React$useContext.defaultMotions, mode = _React$useContext.mode;
    var sameModeRef = React140.useRef(false);
    sameModeRef.current = mode === fixedMode;
    var _React$useState = React140.useState(!sameModeRef.current), _React$useState2 = _slicedToArray(_React$useState, 2), destroy3 = _React$useState2[0], setDestroy = _React$useState2[1];
    var mergedOpen = sameModeRef.current ? open : false;
    React140.useEffect(function() {
      if (sameModeRef.current) {
        setDestroy(false);
      }
    }, [mode]);
    var mergedMotion = _objectSpread2({}, getMotion2(fixedMode, motion2, defaultMotions));
    if (keyPath.length > 1) {
      mergedMotion.motionAppear = false;
    }
    var originOnVisibleChanged = mergedMotion.onVisibleChanged;
    mergedMotion.onVisibleChanged = function(newVisible) {
      if (!sameModeRef.current && !newVisible) {
        setDestroy(true);
      }
      return originOnVisibleChanged === null || originOnVisibleChanged === void 0 ? void 0 : originOnVisibleChanged(newVisible);
    };
    if (destroy3) {
      return null;
    }
    return /* @__PURE__ */ React140.createElement(InheritableContextProvider, {
      mode: fixedMode,
      locked: !sameModeRef.current
    }, /* @__PURE__ */ React140.createElement(es_default3, _extends({
      visible: mergedOpen
    }, mergedMotion, {
      forceRender: forceSubMenuRender,
      removeOnLeave: false,
      leavedClassName: "".concat(prefixCls, "-hidden")
    }), function(_ref2) {
      var motionClassName = _ref2.className, motionStyle = _ref2.style;
      return /* @__PURE__ */ React140.createElement(SubMenuList_default, {
        id: id2,
        className: motionClassName,
        style: motionStyle
      }, children);
    }));
  }

  // node_modules/rc-menu/es/SubMenu/index.js
  var _excluded30 = ["style", "className", "title", "eventKey", "warnKey", "disabled", "internalPopupClose", "children", "itemIcon", "expandIcon", "popupClassName", "popupOffset", "onClick", "onMouseEnter", "onMouseLeave", "onTitleClick", "onTitleMouseEnter", "onTitleMouseLeave"];
  var _excluded210 = ["active"];
  var InternalSubMenu = function InternalSubMenu2(props) {
    var _classNames;
    var style3 = props.style, className = props.className, title = props.title, eventKey = props.eventKey, warnKey = props.warnKey, disabled = props.disabled, internalPopupClose = props.internalPopupClose, children = props.children, itemIcon = props.itemIcon, expandIcon = props.expandIcon, popupClassName = props.popupClassName, popupOffset = props.popupOffset, onClick = props.onClick, onMouseEnter = props.onMouseEnter, onMouseLeave = props.onMouseLeave, onTitleClick = props.onTitleClick, onTitleMouseEnter = props.onTitleMouseEnter, onTitleMouseLeave = props.onTitleMouseLeave, restProps = _objectWithoutProperties(props, _excluded30);
    var domDataId = useMenuId(eventKey);
    var _React$useContext = React141.useContext(MenuContext), prefixCls = _React$useContext.prefixCls, mode = _React$useContext.mode, openKeys = _React$useContext.openKeys, contextDisabled = _React$useContext.disabled, overflowDisabled = _React$useContext.overflowDisabled, activeKey = _React$useContext.activeKey, selectedKeys = _React$useContext.selectedKeys, contextItemIcon = _React$useContext.itemIcon, contextExpandIcon = _React$useContext.expandIcon, onItemClick = _React$useContext.onItemClick, onOpenChange = _React$useContext.onOpenChange, onActive = _React$useContext.onActive;
    var _React$useContext2 = React141.useContext(PrivateContext_default), _internalRenderSubMenuItem = _React$useContext2._internalRenderSubMenuItem;
    var _React$useContext3 = React141.useContext(PathUserContext), isSubPathKey = _React$useContext3.isSubPathKey;
    var connectedPath = useFullPath();
    var subMenuPrefixCls = "".concat(prefixCls, "-submenu");
    var mergedDisabled = contextDisabled || disabled;
    var elementRef = React141.useRef();
    var popupRef = React141.useRef();
    if (warnKey) {
      warning_default(false, "SubMenu should not leave undefined `key`.");
    }
    var mergedItemIcon = itemIcon || contextItemIcon;
    var mergedExpandIcon = expandIcon || contextExpandIcon;
    var originOpen = openKeys.includes(eventKey);
    var open = !overflowDisabled && originOpen;
    var childrenSelected = isSubPathKey(selectedKeys, eventKey);
    var _useActive = useActive(eventKey, mergedDisabled, onTitleMouseEnter, onTitleMouseLeave), active = _useActive.active, activeProps = _objectWithoutProperties(_useActive, _excluded210);
    var _React$useState = React141.useState(false), _React$useState2 = _slicedToArray(_React$useState, 2), childrenActive = _React$useState2[0], setChildrenActive = _React$useState2[1];
    var triggerChildrenActive = function triggerChildrenActive2(newActive) {
      if (!mergedDisabled) {
        setChildrenActive(newActive);
      }
    };
    var onInternalMouseEnter = function onInternalMouseEnter2(domEvent) {
      triggerChildrenActive(true);
      onMouseEnter === null || onMouseEnter === void 0 ? void 0 : onMouseEnter({
        key: eventKey,
        domEvent
      });
    };
    var onInternalMouseLeave = function onInternalMouseLeave2(domEvent) {
      triggerChildrenActive(false);
      onMouseLeave === null || onMouseLeave === void 0 ? void 0 : onMouseLeave({
        key: eventKey,
        domEvent
      });
    };
    var mergedActive = React141.useMemo(function() {
      if (active) {
        return active;
      }
      if (mode !== "inline") {
        return childrenActive || isSubPathKey([activeKey], eventKey);
      }
      return false;
    }, [mode, active, activeKey, childrenActive, eventKey, isSubPathKey]);
    var directionStyle = useDirectionStyle(connectedPath.length);
    var onInternalTitleClick = function onInternalTitleClick2(e3) {
      if (mergedDisabled) {
        return;
      }
      onTitleClick === null || onTitleClick === void 0 ? void 0 : onTitleClick({
        key: eventKey,
        domEvent: e3
      });
      if (mode === "inline") {
        onOpenChange(eventKey, !originOpen);
      }
    };
    var onMergedItemClick = useMemoCallback(function(info) {
      onClick === null || onClick === void 0 ? void 0 : onClick(warnItemProp(info));
      onItemClick(info);
    });
    var onPopupVisibleChange = function onPopupVisibleChange2(newVisible) {
      if (mode !== "inline") {
        onOpenChange(eventKey, newVisible);
      }
    };
    var onInternalFocus = function onInternalFocus2() {
      onActive(eventKey);
    };
    var popupId = domDataId && "".concat(domDataId, "-popup");
    var titleNode = /* @__PURE__ */ React141.createElement("div", _extends({
      role: "menuitem",
      style: directionStyle,
      className: "".concat(subMenuPrefixCls, "-title"),
      tabIndex: mergedDisabled ? null : -1,
      ref: elementRef,
      title: typeof title === "string" ? title : null,
      "data-menu-id": overflowDisabled && domDataId ? null : domDataId,
      "aria-expanded": open,
      "aria-haspopup": true,
      "aria-controls": popupId,
      "aria-disabled": mergedDisabled,
      onClick: onInternalTitleClick,
      onFocus: onInternalFocus
    }, activeProps), title, /* @__PURE__ */ React141.createElement(Icon2, {
      icon: mode !== "horizontal" ? mergedExpandIcon : null,
      props: _objectSpread2(_objectSpread2({}, props), {}, {
        isOpen: open,
        // [Legacy] Not sure why need this mark
        isSubMenu: true
      })
    }, /* @__PURE__ */ React141.createElement("i", {
      className: "".concat(subMenuPrefixCls, "-arrow")
    })));
    var triggerModeRef = React141.useRef(mode);
    if (mode !== "inline" && connectedPath.length > 1) {
      triggerModeRef.current = "vertical";
    } else {
      triggerModeRef.current = mode;
    }
    if (!overflowDisabled) {
      var triggerMode = triggerModeRef.current;
      titleNode = /* @__PURE__ */ React141.createElement(PopupTrigger, {
        mode: triggerMode,
        prefixCls: subMenuPrefixCls,
        visible: !internalPopupClose && open && mode !== "inline",
        popupClassName,
        popupOffset,
        popup: /* @__PURE__ */ React141.createElement(
          InheritableContextProvider,
          {
            mode: triggerMode === "horizontal" ? "vertical" : triggerMode
          },
          /* @__PURE__ */ React141.createElement(SubMenuList_default, {
            id: popupId,
            ref: popupRef
          }, children)
        ),
        disabled: mergedDisabled,
        onVisibleChange: onPopupVisibleChange
      }, titleNode);
    }
    var listNode = /* @__PURE__ */ React141.createElement(es_default5.Item, _extends({
      role: "none"
    }, restProps, {
      component: "li",
      style: style3,
      className: (0, import_classnames35.default)(subMenuPrefixCls, "".concat(subMenuPrefixCls, "-").concat(mode), className, (_classNames = {}, _defineProperty(_classNames, "".concat(subMenuPrefixCls, "-open"), open), _defineProperty(_classNames, "".concat(subMenuPrefixCls, "-active"), mergedActive), _defineProperty(_classNames, "".concat(subMenuPrefixCls, "-selected"), childrenSelected), _defineProperty(_classNames, "".concat(subMenuPrefixCls, "-disabled"), mergedDisabled), _classNames)),
      onMouseEnter: onInternalMouseEnter,
      onMouseLeave: onInternalMouseLeave
    }), titleNode, !overflowDisabled && /* @__PURE__ */ React141.createElement(InlineSubMenuList, {
      id: popupId,
      open,
      keyPath: connectedPath
    }, children));
    if (_internalRenderSubMenuItem) {
      listNode = _internalRenderSubMenuItem(listNode, props, {
        selected: childrenSelected,
        active: mergedActive,
        open,
        disabled: mergedDisabled
      });
    }
    return /* @__PURE__ */ React141.createElement(InheritableContextProvider, {
      onItemClick: onMergedItemClick,
      mode: mode === "horizontal" ? "vertical" : mode,
      itemIcon: mergedItemIcon,
      expandIcon: mergedExpandIcon
    }, listNode);
  };
  function SubMenu(props) {
    var eventKey = props.eventKey, children = props.children;
    var connectedKeyPath = useFullPath(eventKey);
    var childList = parseChildren(children, connectedKeyPath);
    var measure = useMeasure();
    React141.useEffect(function() {
      if (measure) {
        measure.registerPath(eventKey, connectedKeyPath);
        return function() {
          measure.unregisterPath(eventKey, connectedKeyPath);
        };
      }
    }, [connectedKeyPath]);
    var renderNode;
    if (measure) {
      renderNode = childList;
    } else {
      renderNode = /* @__PURE__ */ React141.createElement(InternalSubMenu, props, childList);
    }
    return /* @__PURE__ */ React141.createElement(PathTrackerContext.Provider, {
      value: connectedKeyPath
    }, renderNode);
  }

  // node_modules/rc-menu/es/Menu.js
  var _excluded31 = ["prefixCls", "rootClassName", "style", "className", "tabIndex", "items", "children", "direction", "id", "mode", "inlineCollapsed", "disabled", "disabledOverflow", "subMenuOpenDelay", "subMenuCloseDelay", "forceSubMenuRender", "defaultOpenKeys", "openKeys", "activeKey", "defaultActiveFirst", "selectable", "multiple", "defaultSelectedKeys", "selectedKeys", "onSelect", "onDeselect", "inlineIndent", "motion", "defaultMotions", "triggerSubMenuAction", "builtinPlacements", "itemIcon", "expandIcon", "overflowedIndicator", "overflowedIndicatorPopupClassName", "getPopupContainer", "onClick", "onOpenChange", "onKeyDown", "openAnimation", "openTransitionName", "_internalRenderMenuItem", "_internalRenderSubMenuItem"];
  var EMPTY_LIST = [];
  var Menu = /* @__PURE__ */ React142.forwardRef(function(props, ref) {
    var _childList$, _classNames;
    var _ref = props, _ref$prefixCls = _ref.prefixCls, prefixCls = _ref$prefixCls === void 0 ? "rc-menu" : _ref$prefixCls, rootClassName = _ref.rootClassName, style3 = _ref.style, className = _ref.className, _ref$tabIndex = _ref.tabIndex, tabIndex = _ref$tabIndex === void 0 ? 0 : _ref$tabIndex, items = _ref.items, children = _ref.children, direction = _ref.direction, id2 = _ref.id, _ref$mode = _ref.mode, mode = _ref$mode === void 0 ? "vertical" : _ref$mode, inlineCollapsed = _ref.inlineCollapsed, disabled = _ref.disabled, disabledOverflow = _ref.disabledOverflow, _ref$subMenuOpenDelay = _ref.subMenuOpenDelay, subMenuOpenDelay = _ref$subMenuOpenDelay === void 0 ? 0.1 : _ref$subMenuOpenDelay, _ref$subMenuCloseDela = _ref.subMenuCloseDelay, subMenuCloseDelay = _ref$subMenuCloseDela === void 0 ? 0.1 : _ref$subMenuCloseDela, forceSubMenuRender = _ref.forceSubMenuRender, defaultOpenKeys = _ref.defaultOpenKeys, openKeys = _ref.openKeys, activeKey = _ref.activeKey, defaultActiveFirst = _ref.defaultActiveFirst, _ref$selectable = _ref.selectable, selectable = _ref$selectable === void 0 ? true : _ref$selectable, _ref$multiple = _ref.multiple, multiple = _ref$multiple === void 0 ? false : _ref$multiple, defaultSelectedKeys = _ref.defaultSelectedKeys, selectedKeys = _ref.selectedKeys, onSelect = _ref.onSelect, onDeselect = _ref.onDeselect, _ref$inlineIndent = _ref.inlineIndent, inlineIndent = _ref$inlineIndent === void 0 ? 24 : _ref$inlineIndent, motion2 = _ref.motion, defaultMotions = _ref.defaultMotions, _ref$triggerSubMenuAc = _ref.triggerSubMenuAction, triggerSubMenuAction = _ref$triggerSubMenuAc === void 0 ? "hover" : _ref$triggerSubMenuAc, builtinPlacements = _ref.builtinPlacements, itemIcon = _ref.itemIcon, expandIcon = _ref.expandIcon, _ref$overflowedIndica = _ref.overflowedIndicator, overflowedIndicator = _ref$overflowedIndica === void 0 ? "..." : _ref$overflowedIndica, overflowedIndicatorPopupClassName = _ref.overflowedIndicatorPopupClassName, getPopupContainer = _ref.getPopupContainer, onClick = _ref.onClick, onOpenChange = _ref.onOpenChange, onKeyDown3 = _ref.onKeyDown, openAnimation = _ref.openAnimation, openTransitionName = _ref.openTransitionName, _internalRenderMenuItem = _ref._internalRenderMenuItem, _internalRenderSubMenuItem = _ref._internalRenderSubMenuItem, restProps = _objectWithoutProperties(_ref, _excluded31);
    var childList = React142.useMemo(function() {
      return parseItems(children, items, EMPTY_LIST);
    }, [children, items]);
    var _React$useState = React142.useState(false), _React$useState2 = _slicedToArray(_React$useState, 2), mounted = _React$useState2[0], setMounted = _React$useState2[1];
    var containerRef = React142.useRef();
    var uuid6 = useUUID(id2);
    var isRtl = direction === "rtl";
    if (true) {
      warning_default(!openAnimation && !openTransitionName, "`openAnimation` and `openTransitionName` is removed. Please use `motion` or `defaultMotion` instead.");
    }
    var _useMergedState = useMergedState(defaultOpenKeys, {
      value: openKeys,
      postState: function postState(keys2) {
        return keys2 || EMPTY_LIST;
      }
    }), _useMergedState2 = _slicedToArray(_useMergedState, 2), mergedOpenKeys = _useMergedState2[0], setMergedOpenKeys = _useMergedState2[1];
    var triggerOpenKeys = function triggerOpenKeys2(keys2) {
      var forceFlush = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      function doUpdate() {
        setMergedOpenKeys(keys2);
        onOpenChange === null || onOpenChange === void 0 ? void 0 : onOpenChange(keys2);
      }
      if (forceFlush) {
        (0, import_react_dom9.flushSync)(doUpdate);
      } else {
        doUpdate();
      }
    };
    var _React$useState3 = React142.useState(mergedOpenKeys), _React$useState4 = _slicedToArray(_React$useState3, 2), inlineCacheOpenKeys = _React$useState4[0], setInlineCacheOpenKeys = _React$useState4[1];
    var mountRef = React142.useRef(false);
    var _React$useMemo = React142.useMemo(function() {
      if ((mode === "inline" || mode === "vertical") && inlineCollapsed) {
        return ["vertical", inlineCollapsed];
      }
      return [mode, false];
    }, [mode, inlineCollapsed]), _React$useMemo2 = _slicedToArray(_React$useMemo, 2), mergedMode = _React$useMemo2[0], mergedInlineCollapsed = _React$useMemo2[1];
    var isInlineMode = mergedMode === "inline";
    var _React$useState5 = React142.useState(mergedMode), _React$useState6 = _slicedToArray(_React$useState5, 2), internalMode = _React$useState6[0], setInternalMode = _React$useState6[1];
    var _React$useState7 = React142.useState(mergedInlineCollapsed), _React$useState8 = _slicedToArray(_React$useState7, 2), internalInlineCollapsed = _React$useState8[0], setInternalInlineCollapsed = _React$useState8[1];
    React142.useEffect(function() {
      setInternalMode(mergedMode);
      setInternalInlineCollapsed(mergedInlineCollapsed);
      if (!mountRef.current) {
        return;
      }
      if (isInlineMode) {
        setMergedOpenKeys(inlineCacheOpenKeys);
      } else {
        triggerOpenKeys(EMPTY_LIST);
      }
    }, [mergedMode, mergedInlineCollapsed]);
    var _React$useState9 = React142.useState(0), _React$useState10 = _slicedToArray(_React$useState9, 2), lastVisibleIndex = _React$useState10[0], setLastVisibleIndex = _React$useState10[1];
    var allVisible = lastVisibleIndex >= childList.length - 1 || internalMode !== "horizontal" || disabledOverflow;
    React142.useEffect(function() {
      if (isInlineMode) {
        setInlineCacheOpenKeys(mergedOpenKeys);
      }
    }, [mergedOpenKeys]);
    React142.useEffect(function() {
      mountRef.current = true;
      return function() {
        mountRef.current = false;
      };
    }, []);
    var _useKeyRecords = useKeyRecords(), registerPath = _useKeyRecords.registerPath, unregisterPath = _useKeyRecords.unregisterPath, refreshOverflowKeys = _useKeyRecords.refreshOverflowKeys, isSubPathKey = _useKeyRecords.isSubPathKey, getKeyPath = _useKeyRecords.getKeyPath, getKeys = _useKeyRecords.getKeys, getSubPathKeys = _useKeyRecords.getSubPathKeys;
    var registerPathContext = React142.useMemo(function() {
      return {
        registerPath,
        unregisterPath
      };
    }, [registerPath, unregisterPath]);
    var pathUserContext = React142.useMemo(function() {
      return {
        isSubPathKey
      };
    }, [isSubPathKey]);
    React142.useEffect(function() {
      refreshOverflowKeys(allVisible ? EMPTY_LIST : childList.slice(lastVisibleIndex + 1).map(function(child) {
        return child.key;
      }));
    }, [lastVisibleIndex, allVisible]);
    var _useMergedState3 = useMergedState(activeKey || defaultActiveFirst && ((_childList$ = childList[0]) === null || _childList$ === void 0 ? void 0 : _childList$.key), {
      value: activeKey
    }), _useMergedState4 = _slicedToArray(_useMergedState3, 2), mergedActiveKey = _useMergedState4[0], setMergedActiveKey = _useMergedState4[1];
    var onActive = useMemoCallback(function(key2) {
      setMergedActiveKey(key2);
    });
    var onInactive = useMemoCallback(function() {
      setMergedActiveKey(void 0);
    });
    (0, import_react44.useImperativeHandle)(ref, function() {
      return {
        list: containerRef.current,
        focus: function focus(options) {
          var _childList$find;
          var shouldFocusKey = mergedActiveKey !== null && mergedActiveKey !== void 0 ? mergedActiveKey : (_childList$find = childList.find(function(node) {
            return !node.props.disabled;
          })) === null || _childList$find === void 0 ? void 0 : _childList$find.key;
          if (shouldFocusKey) {
            var _containerRef$current, _containerRef$current2, _containerRef$current3;
            (_containerRef$current = containerRef.current) === null || _containerRef$current === void 0 ? void 0 : (_containerRef$current2 = _containerRef$current.querySelector("li[data-menu-id='".concat(getMenuId(uuid6, shouldFocusKey), "']"))) === null || _containerRef$current2 === void 0 ? void 0 : (_containerRef$current3 = _containerRef$current2.focus) === null || _containerRef$current3 === void 0 ? void 0 : _containerRef$current3.call(_containerRef$current2, options);
          }
        }
      };
    });
    var _useMergedState5 = useMergedState(defaultSelectedKeys || [], {
      value: selectedKeys,
      // Legacy convert key to array
      postState: function postState(keys2) {
        if (Array.isArray(keys2)) {
          return keys2;
        }
        if (keys2 === null || keys2 === void 0) {
          return EMPTY_LIST;
        }
        return [keys2];
      }
    }), _useMergedState6 = _slicedToArray(_useMergedState5, 2), mergedSelectKeys = _useMergedState6[0], setMergedSelectKeys = _useMergedState6[1];
    var triggerSelection = function triggerSelection2(info) {
      if (selectable) {
        var targetKey = info.key;
        var exist = mergedSelectKeys.includes(targetKey);
        var newSelectKeys;
        if (multiple) {
          if (exist) {
            newSelectKeys = mergedSelectKeys.filter(function(key2) {
              return key2 !== targetKey;
            });
          } else {
            newSelectKeys = [].concat(_toConsumableArray(mergedSelectKeys), [targetKey]);
          }
        } else {
          newSelectKeys = [targetKey];
        }
        setMergedSelectKeys(newSelectKeys);
        var selectInfo = _objectSpread2(_objectSpread2({}, info), {}, {
          selectedKeys: newSelectKeys
        });
        if (exist) {
          onDeselect === null || onDeselect === void 0 ? void 0 : onDeselect(selectInfo);
        } else {
          onSelect === null || onSelect === void 0 ? void 0 : onSelect(selectInfo);
        }
      }
      if (!multiple && mergedOpenKeys.length && internalMode !== "inline") {
        triggerOpenKeys(EMPTY_LIST);
      }
    };
    var onInternalClick = useMemoCallback(function(info) {
      onClick === null || onClick === void 0 ? void 0 : onClick(warnItemProp(info));
      triggerSelection(info);
    });
    var onInternalOpenChange = useMemoCallback(function(key2, open) {
      var newOpenKeys = mergedOpenKeys.filter(function(k2) {
        return k2 !== key2;
      });
      if (open) {
        newOpenKeys.push(key2);
      } else if (internalMode !== "inline") {
        var subPathKeys = getSubPathKeys(key2);
        newOpenKeys = newOpenKeys.filter(function(k2) {
          return !subPathKeys.has(k2);
        });
      }
      if (!isEqual_default(mergedOpenKeys, newOpenKeys, true)) {
        triggerOpenKeys(newOpenKeys, true);
      }
    });
    var getInternalPopupContainer = useMemoCallback(getPopupContainer);
    var triggerAccessibilityOpen = function triggerAccessibilityOpen2(key2, open) {
      var nextOpen = open !== null && open !== void 0 ? open : !mergedOpenKeys.includes(key2);
      onInternalOpenChange(key2, nextOpen);
    };
    var onInternalKeyDown = useAccessibility(internalMode, mergedActiveKey, isRtl, uuid6, containerRef, getKeys, getKeyPath, setMergedActiveKey, triggerAccessibilityOpen, onKeyDown3);
    React142.useEffect(function() {
      setMounted(true);
    }, []);
    var privateContext = React142.useMemo(function() {
      return {
        _internalRenderMenuItem,
        _internalRenderSubMenuItem
      };
    }, [_internalRenderMenuItem, _internalRenderSubMenuItem]);
    var wrappedChildList = internalMode !== "horizontal" || disabledOverflow ? childList : (
      // Need wrap for overflow dropdown that do not response for open
      childList.map(function(child, index2) {
        return (
          // Always wrap provider to avoid sub node re-mount
          /* @__PURE__ */ React142.createElement(InheritableContextProvider, {
            key: child.key,
            overflowDisabled: index2 > lastVisibleIndex
          }, child)
        );
      })
    );
    var container = /* @__PURE__ */ React142.createElement(es_default5, _extends({
      id: id2,
      ref: containerRef,
      prefixCls: "".concat(prefixCls, "-overflow"),
      component: "ul",
      itemComponent: MenuItem_default,
      className: (0, import_classnames36.default)(prefixCls, "".concat(prefixCls, "-root"), "".concat(prefixCls, "-").concat(internalMode), className, (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-inline-collapsed"), internalInlineCollapsed), _defineProperty(_classNames, "".concat(prefixCls, "-rtl"), isRtl), _classNames), rootClassName),
      dir: direction,
      style: style3,
      role: "menu",
      tabIndex,
      data: wrappedChildList,
      renderRawItem: function renderRawItem(node) {
        return node;
      },
      renderRawRest: function renderRawRest(omitItems) {
        var len = omitItems.length;
        var originOmitItems = len ? childList.slice(-len) : null;
        return /* @__PURE__ */ React142.createElement(SubMenu, {
          eventKey: OVERFLOW_KEY,
          title: overflowedIndicator,
          disabled: allVisible,
          internalPopupClose: len === 0,
          popupClassName: overflowedIndicatorPopupClassName
        }, originOmitItems);
      },
      maxCount: internalMode !== "horizontal" || disabledOverflow ? es_default5.INVALIDATE : es_default5.RESPONSIVE,
      ssr: "full",
      "data-menu-list": true,
      onVisibleChange: function onVisibleChange(newLastIndex) {
        setLastVisibleIndex(newLastIndex);
      },
      onKeyDown: onInternalKeyDown
    }, restProps));
    return /* @__PURE__ */ React142.createElement(PrivateContext_default.Provider, {
      value: privateContext
    }, /* @__PURE__ */ React142.createElement(IdContext.Provider, {
      value: uuid6
    }, /* @__PURE__ */ React142.createElement(InheritableContextProvider, {
      prefixCls,
      rootClassName,
      mode: internalMode,
      openKeys: mergedOpenKeys,
      rtl: isRtl,
      disabled,
      motion: mounted ? motion2 : null,
      defaultMotions: mounted ? defaultMotions : null,
      activeKey: mergedActiveKey,
      onActive,
      onInactive,
      selectedKeys: mergedSelectKeys,
      inlineIndent,
      subMenuOpenDelay,
      subMenuCloseDelay,
      forceSubMenuRender,
      builtinPlacements,
      triggerSubMenuAction,
      getPopupContainer: getInternalPopupContainer,
      itemIcon,
      expandIcon,
      onItemClick: onInternalClick,
      onOpenChange: onInternalOpenChange
    }, /* @__PURE__ */ React142.createElement(PathUserContext.Provider, {
      value: pathUserContext
    }, container), /* @__PURE__ */ React142.createElement("div", {
      style: {
        display: "none"
      },
      "aria-hidden": true
    }, /* @__PURE__ */ React142.createElement(PathRegisterContext.Provider, {
      value: registerPathContext
    }, childList)))));
  });
  var Menu_default = Menu;

  // node_modules/rc-menu/es/MenuItemGroup.js
  var import_classnames37 = __toESM(require_classnames());
  var React143 = __toESM(require_react());
  var _excluded34 = ["className", "title", "eventKey", "children"];
  var _excluded211 = ["children"];
  var InternalMenuItemGroup = function InternalMenuItemGroup2(_ref) {
    var className = _ref.className, title = _ref.title, eventKey = _ref.eventKey, children = _ref.children, restProps = _objectWithoutProperties(_ref, _excluded34);
    var _React$useContext = React143.useContext(MenuContext), prefixCls = _React$useContext.prefixCls;
    var groupPrefixCls = "".concat(prefixCls, "-item-group");
    return /* @__PURE__ */ React143.createElement("li", _extends({
      role: "presentation"
    }, restProps, {
      onClick: function onClick(e3) {
        return e3.stopPropagation();
      },
      className: (0, import_classnames37.default)(groupPrefixCls, className)
    }), /* @__PURE__ */ React143.createElement("div", {
      role: "presentation",
      className: "".concat(groupPrefixCls, "-title"),
      title: typeof title === "string" ? title : void 0
    }, title), /* @__PURE__ */ React143.createElement("ul", {
      role: "group",
      className: "".concat(groupPrefixCls, "-list")
    }, children));
  };
  function MenuItemGroup(_ref2) {
    var children = _ref2.children, props = _objectWithoutProperties(_ref2, _excluded211);
    var connectedKeyPath = useFullPath(props.eventKey);
    var childList = parseChildren(children, connectedKeyPath);
    var measure = useMeasure();
    if (measure) {
      return childList;
    }
    return /* @__PURE__ */ React143.createElement(InternalMenuItemGroup, omit(props, ["warnKey"]), childList);
  }

  // node_modules/rc-menu/es/Divider.js
  var React144 = __toESM(require_react());
  var import_classnames38 = __toESM(require_classnames());
  function Divider(_ref) {
    var className = _ref.className, style3 = _ref.style;
    var _React$useContext = React144.useContext(MenuContext), prefixCls = _React$useContext.prefixCls;
    var measure = useMeasure();
    if (measure) {
      return null;
    }
    return /* @__PURE__ */ React144.createElement("li", {
      className: (0, import_classnames38.default)("".concat(prefixCls, "-item-divider"), className),
      style: style3
    });
  }

  // node_modules/rc-menu/es/index.js
  var ExportMenu = Menu_default;
  ExportMenu.Item = MenuItem_default;
  ExportMenu.SubMenu = SubMenu;
  ExportMenu.ItemGroup = MenuItemGroup;
  ExportMenu.Divider = Divider;
  var es_default12 = ExportMenu;

  // node_modules/antd/es/menu/index.js
  var React155 = __toESM(require_react());
  var import_react47 = __toESM(require_react());

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/BarsOutlined.js
  var React145 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/BarsOutlined.js
  var BarsOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "0 0 1024 1024", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M912 192H328c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h584c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0 284H328c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h584c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0 284H328c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h584c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zM104 228a56 56 0 10112 0 56 56 0 10-112 0zm0 284a56 56 0 10112 0 56 56 0 10-112 0zm0 284a56 56 0 10112 0 56 56 0 10-112 0z" } }] }, "name": "bars", "theme": "outlined" };
  var BarsOutlined_default = BarsOutlined;

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/BarsOutlined.js
  var BarsOutlined2 = function BarsOutlined3(props, ref) {
    return /* @__PURE__ */ React145.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: BarsOutlined_default
    }));
  };
  BarsOutlined2.displayName = "BarsOutlined";
  var BarsOutlined_default2 = /* @__PURE__ */ React145.forwardRef(BarsOutlined2);

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/LeftOutlined.js
  var React146 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/LeftOutlined.js
  var LeftOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M724 218.3V141c0-6.7-7.7-10.4-12.9-6.3L260.3 486.8a31.86 31.86 0 000 50.3l450.8 352.1c5.3 4.1 12.9.4 12.9-6.3v-77.3c0-4.9-2.3-9.6-6.1-12.6l-360-281 360-281.1c3.8-3 6.1-7.7 6.1-12.6z" } }] }, "name": "left", "theme": "outlined" };
  var LeftOutlined_default = LeftOutlined;

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/LeftOutlined.js
  var LeftOutlined2 = function LeftOutlined3(props, ref) {
    return /* @__PURE__ */ React146.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: LeftOutlined_default
    }));
  };
  LeftOutlined2.displayName = "LeftOutlined";
  var LeftOutlined_default2 = /* @__PURE__ */ React146.forwardRef(LeftOutlined2);

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/RightOutlined.js
  var React147 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/RightOutlined.js
  var RightOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M765.7 486.8L314.9 134.7A7.97 7.97 0 00302 141v77.3c0 4.9 2.3 9.6 6.1 12.6l360 281.1-360 281.1c-3.9 3-6.1 7.7-6.1 12.6V883c0 6.7 7.7 10.4 12.9 6.3l450.8-352.1a31.96 31.96 0 000-50.4z" } }] }, "name": "right", "theme": "outlined" };
  var RightOutlined_default = RightOutlined;

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/RightOutlined.js
  var RightOutlined2 = function RightOutlined3(props, ref) {
    return /* @__PURE__ */ React147.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: RightOutlined_default
    }));
  };
  RightOutlined2.displayName = "RightOutlined";
  var RightOutlined_default2 = /* @__PURE__ */ React147.forwardRef(RightOutlined2);

  // node_modules/antd/es/layout/Sider.js
  var import_classnames40 = __toESM(require_classnames());
  var React149 = __toESM(require_react());
  var import_react45 = __toESM(require_react());

  // node_modules/antd/es/_util/isNumeric.js
  var isNumeric = function isNumeric2(value) {
    return !isNaN(parseFloat(value)) && isFinite(value);
  };
  var isNumeric_default = isNumeric;

  // node_modules/antd/es/layout/layout.js
  var import_classnames39 = __toESM(require_classnames());
  var React148 = __toESM(require_react());
  var __rest5 = function(s2, e3) {
    var t4 = {};
    for (var p2 in s2)
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t4[p2] = s2[p2];
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t4[p2[i3]] = s2[p2[i3]];
      }
    return t4;
  };
  var LayoutContext = /* @__PURE__ */ React148.createContext({
    siderHook: {
      addSider: function addSider() {
        return null;
      },
      removeSider: function removeSider() {
        return null;
      }
    }
  });
  function generator(_ref) {
    var suffixCls = _ref.suffixCls, tagName = _ref.tagName, displayName = _ref.displayName;
    return function(BasicComponent) {
      var Adapter = /* @__PURE__ */ React148.forwardRef(function(props, ref) {
        var _React$useContext = React148.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls;
        var customizePrefixCls = props.prefixCls;
        var prefixCls = getPrefixCls(suffixCls, customizePrefixCls);
        return /* @__PURE__ */ React148.createElement(BasicComponent, _extends({
          ref,
          prefixCls,
          tagName
        }, props));
      });
      if (true) {
        Adapter.displayName = displayName;
      }
      return Adapter;
    };
  }
  var Basic = /* @__PURE__ */ React148.forwardRef(function(props, ref) {
    var prefixCls = props.prefixCls, className = props.className, children = props.children, tagName = props.tagName, others = __rest5(props, ["prefixCls", "className", "children", "tagName"]);
    var classString = (0, import_classnames39.default)(prefixCls, className);
    return /* @__PURE__ */ React148.createElement(tagName, _extends(_extends({
      className: classString
    }, others), {
      ref
    }), children);
  });
  var BasicLayout = /* @__PURE__ */ React148.forwardRef(function(props, ref) {
    var _classNames;
    var _React$useContext2 = React148.useContext(ConfigContext), direction = _React$useContext2.direction;
    var _React$useState = React148.useState([]), _React$useState2 = _slicedToArray(_React$useState, 2), siders = _React$useState2[0], setSiders = _React$useState2[1];
    var prefixCls = props.prefixCls, className = props.className, children = props.children, hasSider = props.hasSider, Tag2 = props.tagName, others = __rest5(props, ["prefixCls", "className", "children", "hasSider", "tagName"]);
    var classString = (0, import_classnames39.default)(prefixCls, (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-has-sider"), typeof hasSider === "boolean" ? hasSider : siders.length > 0), _defineProperty(_classNames, "".concat(prefixCls, "-rtl"), direction === "rtl"), _classNames), className);
    var contextValue = React148.useMemo(function() {
      return {
        siderHook: {
          addSider: function addSider2(id2) {
            setSiders(function(prev) {
              return [].concat(_toConsumableArray(prev), [id2]);
            });
          },
          removeSider: function removeSider2(id2) {
            setSiders(function(prev) {
              return prev.filter(function(currentId) {
                return currentId !== id2;
              });
            });
          }
        }
      };
    }, []);
    return /* @__PURE__ */ React148.createElement(LayoutContext.Provider, {
      value: contextValue
    }, /* @__PURE__ */ React148.createElement(Tag2, _extends({
      ref,
      className: classString
    }, others), children));
  });
  var Layout = generator({
    suffixCls: "layout",
    tagName: "section",
    displayName: "Layout"
  })(BasicLayout);
  var Header = generator({
    suffixCls: "layout-header",
    tagName: "header",
    displayName: "Header"
  })(Basic);
  var Footer = generator({
    suffixCls: "layout-footer",
    tagName: "footer",
    displayName: "Footer"
  })(Basic);
  var Content = generator({
    suffixCls: "layout-content",
    tagName: "main",
    displayName: "Content"
  })(Basic);
  var layout_default = Layout;

  // node_modules/antd/es/layout/Sider.js
  var __rest6 = function(s2, e3) {
    var t4 = {};
    for (var p2 in s2)
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t4[p2] = s2[p2];
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t4[p2[i3]] = s2[p2[i3]];
      }
    return t4;
  };
  var dimensionMaxMap = {
    xs: "479.98px",
    sm: "575.98px",
    md: "767.98px",
    lg: "991.98px",
    xl: "1199.98px",
    xxl: "1599.98px"
  };
  var SiderContext = /* @__PURE__ */ React149.createContext({});
  var generateId = function() {
    var i3 = 0;
    return function() {
      var prefix2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
      i3 += 1;
      return "".concat(prefix2).concat(i3);
    };
  }();
  var Sider = /* @__PURE__ */ React149.forwardRef(function(_a, ref) {
    var customizePrefixCls = _a.prefixCls, className = _a.className, trigger = _a.trigger, children = _a.children, _a$defaultCollapsed = _a.defaultCollapsed, defaultCollapsed = _a$defaultCollapsed === void 0 ? false : _a$defaultCollapsed, _a$theme = _a.theme, theme = _a$theme === void 0 ? "dark" : _a$theme, _a$style = _a.style, style3 = _a$style === void 0 ? {} : _a$style, _a$collapsible = _a.collapsible, collapsible = _a$collapsible === void 0 ? false : _a$collapsible, _a$reverseArrow = _a.reverseArrow, reverseArrow = _a$reverseArrow === void 0 ? false : _a$reverseArrow, _a$width = _a.width, width = _a$width === void 0 ? 200 : _a$width, _a$collapsedWidth = _a.collapsedWidth, collapsedWidth = _a$collapsedWidth === void 0 ? 80 : _a$collapsedWidth, zeroWidthTriggerStyle = _a.zeroWidthTriggerStyle, breakpoint = _a.breakpoint, onCollapse = _a.onCollapse, onBreakpoint = _a.onBreakpoint, props = __rest6(_a, ["prefixCls", "className", "trigger", "children", "defaultCollapsed", "theme", "style", "collapsible", "reverseArrow", "width", "collapsedWidth", "zeroWidthTriggerStyle", "breakpoint", "onCollapse", "onBreakpoint"]);
    var _useContext = (0, import_react45.useContext)(LayoutContext), siderHook = _useContext.siderHook;
    var _useState = (0, import_react45.useState)("collapsed" in props ? props.collapsed : defaultCollapsed), _useState2 = _slicedToArray(_useState, 2), collapsed = _useState2[0], setCollapsed = _useState2[1];
    var _useState3 = (0, import_react45.useState)(false), _useState4 = _slicedToArray(_useState3, 2), below = _useState4[0], setBelow = _useState4[1];
    (0, import_react45.useEffect)(function() {
      if ("collapsed" in props) {
        setCollapsed(props.collapsed);
      }
    }, [props.collapsed]);
    var handleSetCollapsed = function handleSetCollapsed2(value, type4) {
      if (!("collapsed" in props)) {
        setCollapsed(value);
      }
      onCollapse === null || onCollapse === void 0 ? void 0 : onCollapse(value, type4);
    };
    var responsiveHandlerRef = (0, import_react45.useRef)();
    responsiveHandlerRef.current = function(mql) {
      setBelow(mql.matches);
      onBreakpoint === null || onBreakpoint === void 0 ? void 0 : onBreakpoint(mql.matches);
      if (collapsed !== mql.matches) {
        handleSetCollapsed(mql.matches, "responsive");
      }
    };
    (0, import_react45.useEffect)(function() {
      function responsiveHandler(mql2) {
        return responsiveHandlerRef.current(mql2);
      }
      var mql;
      if (typeof window !== "undefined") {
        var _window = window, matchMedia = _window.matchMedia;
        if (matchMedia && breakpoint && breakpoint in dimensionMaxMap) {
          mql = matchMedia("(max-width: ".concat(dimensionMaxMap[breakpoint], ")"));
          try {
            mql.addEventListener("change", responsiveHandler);
          } catch (error2) {
            mql.addListener(responsiveHandler);
          }
          responsiveHandler(mql);
        }
      }
      return function() {
        try {
          mql === null || mql === void 0 ? void 0 : mql.removeEventListener("change", responsiveHandler);
        } catch (error2) {
          mql === null || mql === void 0 ? void 0 : mql.removeListener(responsiveHandler);
        }
      };
    }, [breakpoint]);
    (0, import_react45.useEffect)(function() {
      var uniqueId = generateId("ant-sider-");
      siderHook.addSider(uniqueId);
      return function() {
        return siderHook.removeSider(uniqueId);
      };
    }, []);
    var toggle = function toggle2() {
      handleSetCollapsed(!collapsed, "clickTrigger");
    };
    var _useContext2 = (0, import_react45.useContext)(ConfigContext), getPrefixCls = _useContext2.getPrefixCls;
    var renderSider = function renderSider2() {
      var _classNames;
      var prefixCls = getPrefixCls("layout-sider", customizePrefixCls);
      var divProps = omit(props, ["collapsed"]);
      var rawWidth = collapsed ? collapsedWidth : width;
      var siderWidth = isNumeric_default(rawWidth) ? "".concat(rawWidth, "px") : String(rawWidth);
      var zeroWidthTrigger = parseFloat(String(collapsedWidth || 0)) === 0 ? /* @__PURE__ */ React149.createElement("span", {
        onClick: toggle,
        className: (0, import_classnames40.default)("".concat(prefixCls, "-zero-width-trigger"), "".concat(prefixCls, "-zero-width-trigger-").concat(reverseArrow ? "right" : "left")),
        style: zeroWidthTriggerStyle
      }, trigger || /* @__PURE__ */ React149.createElement(BarsOutlined_default2, null)) : null;
      var iconObj = {
        expanded: reverseArrow ? /* @__PURE__ */ React149.createElement(RightOutlined_default2, null) : /* @__PURE__ */ React149.createElement(LeftOutlined_default2, null),
        collapsed: reverseArrow ? /* @__PURE__ */ React149.createElement(LeftOutlined_default2, null) : /* @__PURE__ */ React149.createElement(RightOutlined_default2, null)
      };
      var status = collapsed ? "collapsed" : "expanded";
      var defaultTrigger = iconObj[status];
      var triggerDom = trigger !== null ? zeroWidthTrigger || /* @__PURE__ */ React149.createElement("div", {
        className: "".concat(prefixCls, "-trigger"),
        onClick: toggle,
        style: {
          width: siderWidth
        }
      }, trigger || defaultTrigger) : null;
      var divStyle = _extends(_extends({}, style3), {
        flex: "0 0 ".concat(siderWidth),
        maxWidth: siderWidth,
        minWidth: siderWidth,
        width: siderWidth
      });
      var siderCls = (0, import_classnames40.default)(prefixCls, "".concat(prefixCls, "-").concat(theme), (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-collapsed"), !!collapsed), _defineProperty(_classNames, "".concat(prefixCls, "-has-trigger"), collapsible && trigger !== null && !zeroWidthTrigger), _defineProperty(_classNames, "".concat(prefixCls, "-below"), !!below), _defineProperty(_classNames, "".concat(prefixCls, "-zero-width"), parseFloat(siderWidth) === 0), _classNames), className);
      return /* @__PURE__ */ React149.createElement("aside", _extends({
        className: siderCls
      }, divProps, {
        style: divStyle,
        ref
      }), /* @__PURE__ */ React149.createElement("div", {
        className: "".concat(prefixCls, "-children")
      }, children), collapsible || below && zeroWidthTrigger ? triggerDom : null);
    };
    var contextValue = React149.useMemo(function() {
      return {
        siderCollapsed: collapsed
      };
    }, [collapsed]);
    return /* @__PURE__ */ React149.createElement(SiderContext.Provider, {
      value: contextValue
    }, renderSider());
  });
  if (true) {
    Sider.displayName = "Sider";
  }
  var Sider_default = Sider;

  // node_modules/antd/es/menu/hooks/useItems.js
  var React153 = __toESM(require_react());

  // node_modules/antd/es/menu/MenuDivider.js
  var import_classnames41 = __toESM(require_classnames());
  var React150 = __toESM(require_react());
  var __rest7 = function(s2, e3) {
    var t4 = {};
    for (var p2 in s2)
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t4[p2] = s2[p2];
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t4[p2[i3]] = s2[p2[i3]];
      }
    return t4;
  };
  var MenuDivider = function MenuDivider2(_a) {
    var customizePrefixCls = _a.prefixCls, className = _a.className, dashed = _a.dashed, restProps = __rest7(_a, ["prefixCls", "className", "dashed"]);
    var _React$useContext = React150.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls;
    var prefixCls = getPrefixCls("menu", customizePrefixCls);
    var classString = (0, import_classnames41.default)(_defineProperty({}, "".concat(prefixCls, "-item-divider-dashed"), !!dashed), className);
    return /* @__PURE__ */ React150.createElement(Divider, _extends({
      className: classString
    }, restProps));
  };
  var MenuDivider_default = MenuDivider;

  // node_modules/antd/es/menu/MenuItem.js
  var import_classnames42 = __toESM(require_classnames());
  var React151 = __toESM(require_react());

  // node_modules/antd/es/menu/MenuContext.js
  var import_react46 = __toESM(require_react());
  var MenuContext2 = /* @__PURE__ */ (0, import_react46.createContext)({
    prefixCls: "",
    firstLevel: true,
    inlineCollapsed: false
  });
  var MenuContext_default = MenuContext2;

  // node_modules/antd/es/menu/MenuItem.js
  var __rest8 = function(s2, e3) {
    var t4 = {};
    for (var p2 in s2)
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t4[p2] = s2[p2];
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t4[p2[i3]] = s2[p2[i3]];
      }
    return t4;
  };
  var MenuItem2 = /* @__PURE__ */ function(_React$Component) {
    _inherits(MenuItem7, _React$Component);
    var _super = _createSuper(MenuItem7);
    function MenuItem7() {
      var _this;
      _classCallCheck(this, MenuItem7);
      _this = _super.apply(this, arguments);
      _this.renderItem = function(_ref) {
        var _classNames;
        var siderCollapsed = _ref.siderCollapsed;
        var _a;
        var _this$context = _this.context, prefixCls = _this$context.prefixCls, firstLevel = _this$context.firstLevel, inlineCollapsed = _this$context.inlineCollapsed, direction = _this$context.direction, disableMenuItemTitleTooltip = _this$context.disableMenuItemTitleTooltip;
        var _this$props = _this.props, className = _this$props.className, children = _this$props.children;
        var _b = _this.props, title = _b.title, icon = _b.icon, danger = _b.danger, rest = __rest8(_b, ["title", "icon", "danger"]);
        var tooltipTitle = title;
        if (typeof title === "undefined") {
          tooltipTitle = firstLevel ? children : "";
        } else if (title === false) {
          tooltipTitle = "";
        }
        var tooltipProps = {
          title: tooltipTitle
        };
        if (!siderCollapsed && !inlineCollapsed) {
          tooltipProps.title = null;
          tooltipProps.open = false;
        }
        var childrenLength = toArray(children).length;
        var returnNode = /* @__PURE__ */ React151.createElement(MenuItem_default, _extends({}, rest, {
          className: (0, import_classnames42.default)((_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-item-danger"), danger), _defineProperty(_classNames, "".concat(prefixCls, "-item-only-child"), (icon ? childrenLength + 1 : childrenLength) === 1), _classNames), className),
          title: typeof title === "string" ? title : void 0
        }), cloneElement4(icon, {
          className: (0, import_classnames42.default)(isValidElement6(icon) ? (_a = icon.props) === null || _a === void 0 ? void 0 : _a.className : "", "".concat(prefixCls, "-item-icon"))
        }), _this.renderItemChildren(inlineCollapsed));
        if (!disableMenuItemTitleTooltip) {
          returnNode = /* @__PURE__ */ React151.createElement(tooltip_default, _extends({}, tooltipProps, {
            placement: direction === "rtl" ? "left" : "right",
            overlayClassName: "".concat(prefixCls, "-inline-collapsed-tooltip")
          }), returnNode);
        }
        return returnNode;
      };
      return _this;
    }
    _createClass(MenuItem7, [{
      key: "renderItemChildren",
      value: function renderItemChildren(inlineCollapsed) {
        var _this$context2 = this.context, prefixCls = _this$context2.prefixCls, firstLevel = _this$context2.firstLevel;
        var _this$props2 = this.props, icon = _this$props2.icon, children = _this$props2.children;
        var wrapNode = /* @__PURE__ */ React151.createElement("span", {
          className: "".concat(prefixCls, "-title-content")
        }, children);
        if (!icon || isValidElement6(children) && children.type === "span") {
          if (children && inlineCollapsed && firstLevel && typeof children === "string") {
            return /* @__PURE__ */ React151.createElement("div", {
              className: "".concat(prefixCls, "-inline-collapsed-noicon")
            }, children.charAt(0));
          }
        }
        return wrapNode;
      }
    }, {
      key: "render",
      value: function render2() {
        return /* @__PURE__ */ React151.createElement(SiderContext.Consumer, null, this.renderItem);
      }
    }]);
    return MenuItem7;
  }(React151.Component);
  MenuItem2.contextType = MenuContext_default;

  // node_modules/antd/es/menu/SubMenu.js
  var import_classnames43 = __toESM(require_classnames());
  var React152 = __toESM(require_react());
  function SubMenu2(props) {
    var _a;
    var popupClassName = props.popupClassName, icon = props.icon, title = props.title, theme = props.theme;
    var context2 = React152.useContext(MenuContext_default);
    var prefixCls = context2.prefixCls, inlineCollapsed = context2.inlineCollapsed, antdMenuTheme = context2.antdMenuTheme;
    var parentPath = useFullPath();
    var titleNode;
    if (!icon) {
      titleNode = inlineCollapsed && !parentPath.length && title && typeof title === "string" ? /* @__PURE__ */ React152.createElement("div", {
        className: "".concat(prefixCls, "-inline-collapsed-noicon")
      }, title.charAt(0)) : /* @__PURE__ */ React152.createElement("span", {
        className: "".concat(prefixCls, "-title-content")
      }, title);
    } else {
      var titleIsSpan = isValidElement6(title) && title.type === "span";
      titleNode = /* @__PURE__ */ React152.createElement(React152.Fragment, null, cloneElement4(icon, {
        className: (0, import_classnames43.default)(isValidElement6(icon) ? (_a = icon.props) === null || _a === void 0 ? void 0 : _a.className : "", "".concat(prefixCls, "-item-icon"))
      }), titleIsSpan ? title : /* @__PURE__ */ React152.createElement("span", {
        className: "".concat(prefixCls, "-title-content")
      }, title));
    }
    var contextValue = React152.useMemo(function() {
      return _extends(_extends({}, context2), {
        firstLevel: false
      });
    }, [context2]);
    return /* @__PURE__ */ React152.createElement(MenuContext_default.Provider, {
      value: contextValue
    }, /* @__PURE__ */ React152.createElement(SubMenu, _extends({}, omit(props, ["icon"]), {
      title: titleNode,
      popupClassName: (0, import_classnames43.default)(prefixCls, "".concat(prefixCls, "-").concat(theme || antdMenuTheme), popupClassName)
    })));
  }
  var SubMenu_default = SubMenu2;

  // node_modules/antd/es/menu/hooks/useItems.js
  var __rest9 = function(s2, e3) {
    var t4 = {};
    for (var p2 in s2)
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t4[p2] = s2[p2];
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t4[p2[i3]] = s2[p2[i3]];
      }
    return t4;
  };
  function convertItemsToNodes2(list) {
    return (list || []).map(function(opt, index2) {
      if (opt && _typeof(opt) === "object") {
        var _a = opt, label = _a.label, children = _a.children, key2 = _a.key, type4 = _a.type, restProps = __rest9(_a, ["label", "children", "key", "type"]);
        var mergedKey = key2 !== null && key2 !== void 0 ? key2 : "tmp-".concat(index2);
        if (children || type4 === "group") {
          if (type4 === "group") {
            return /* @__PURE__ */ React153.createElement(MenuItemGroup, _extends({
              key: mergedKey
            }, restProps, {
              title: label
            }), convertItemsToNodes2(children));
          }
          return /* @__PURE__ */ React153.createElement(SubMenu_default, _extends({
            key: mergedKey
          }, restProps, {
            title: label
          }), convertItemsToNodes2(children));
        }
        if (type4 === "divider") {
          return /* @__PURE__ */ React153.createElement(MenuDivider_default, _extends({
            key: mergedKey
          }, restProps));
        }
        return /* @__PURE__ */ React153.createElement(MenuItem2, _extends({
          key: mergedKey
        }, restProps), label);
      }
      return null;
    }).filter(function(opt) {
      return opt;
    });
  }
  function useItems(items) {
    return React153.useMemo(function() {
      if (!items) {
        return items;
      }
      return convertItemsToNodes2(items);
    }, [items]);
  }

  // node_modules/antd/es/menu/OverrideContext.js
  var React154 = __toESM(require_react());
  var __rest10 = function(s2, e3) {
    var t4 = {};
    for (var p2 in s2)
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t4[p2] = s2[p2];
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t4[p2[i3]] = s2[p2[i3]];
      }
    return t4;
  };
  var OverrideContext = /* @__PURE__ */ React154.createContext(null);
  var OverrideProvider = function OverrideProvider2(_a) {
    var children = _a.children, restProps = __rest10(_a, ["children"]);
    var override = React154.useContext(OverrideContext);
    var context2 = React154.useMemo(function() {
      return _extends(_extends({}, override), restProps);
    }, [
      override,
      restProps.prefixCls,
      // restProps.expandIcon, Not mark as deps since this is a ReactNode
      restProps.mode,
      restProps.selectable
      // restProps.validator, Not mark as deps since this is a function
    ]);
    return /* @__PURE__ */ React154.createElement(OverrideContext.Provider, {
      value: context2
    }, children);
  };
  var OverrideContext_default = OverrideContext;

  // node_modules/antd/es/menu/index.js
  var __rest11 = function(s2, e3) {
    var t4 = {};
    for (var p2 in s2)
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t4[p2] = s2[p2];
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t4[p2[i3]] = s2[p2[i3]];
      }
    return t4;
  };
  var InternalMenu = /* @__PURE__ */ (0, import_react47.forwardRef)(function(props, ref) {
    var _a;
    var override = React155.useContext(OverrideContext_default) || {};
    var _React$useContext = React155.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls, getPopupContainer = _React$useContext.getPopupContainer, direction = _React$useContext.direction;
    var rootPrefixCls = getPrefixCls();
    var customizePrefixCls = props.prefixCls, className = props.className, _props$theme = props.theme, theme = _props$theme === void 0 ? "light" : _props$theme, expandIcon = props.expandIcon, _internalDisableMenuItemTitleTooltip = props._internalDisableMenuItemTitleTooltip, inlineCollapsed = props.inlineCollapsed, siderCollapsed = props.siderCollapsed, items = props.items, children = props.children, mode = props.mode, selectable = props.selectable, onClick = props.onClick, restProps = __rest11(props, ["prefixCls", "className", "theme", "expandIcon", "_internalDisableMenuItemTitleTooltip", "inlineCollapsed", "siderCollapsed", "items", "children", "mode", "selectable", "onClick"]);
    var passedProps = omit(restProps, ["collapsedWidth"]);
    var mergedChildren = useItems(items) || children;
    true ? warning_default2(!("inlineCollapsed" in props && mode !== "inline"), "Menu", "`inlineCollapsed` should only be used when `mode` is inline.") : void 0;
    true ? warning_default2(!(props.siderCollapsed !== void 0 && "inlineCollapsed" in props), "Menu", "`inlineCollapsed` not control Menu under Sider. Should set `collapsed` on Sider instead.") : void 0;
    true ? warning_default2("items" in props && !children, "Menu", "`children` will be removed in next major version. Please use `items` instead.") : void 0;
    (_a = override.validator) === null || _a === void 0 ? void 0 : _a.call(override, {
      mode
    });
    var onItemClick = useEvent(function() {
      var _a2;
      onClick === null || onClick === void 0 ? void 0 : onClick.apply(void 0, arguments);
      (_a2 = override === null || override === void 0 ? void 0 : override.onClick) === null || _a2 === void 0 ? void 0 : _a2.call(override);
    });
    var mergedMode = override.mode || mode;
    var mergedSelectable = selectable !== null && selectable !== void 0 ? selectable : override.selectable;
    var mergedInlineCollapsed = React155.useMemo(function() {
      if (siderCollapsed !== void 0) {
        return siderCollapsed;
      }
      return inlineCollapsed;
    }, [inlineCollapsed, siderCollapsed]);
    var defaultMotions = {
      horizontal: {
        motionName: "".concat(rootPrefixCls, "-slide-up")
      },
      inline: motion_default,
      other: {
        motionName: "".concat(rootPrefixCls, "-zoom-big")
      }
    };
    var prefixCls = getPrefixCls("menu", customizePrefixCls || override.prefixCls);
    var menuClassName = (0, import_classnames44.default)("".concat(prefixCls, "-").concat(theme), className);
    var mergedExpandIcon;
    if (typeof expandIcon === "function") {
      mergedExpandIcon = expandIcon;
    } else {
      mergedExpandIcon = cloneElement4(expandIcon || override.expandIcon, {
        className: "".concat(prefixCls, "-submenu-expand-icon")
      });
    }
    var contextValue = React155.useMemo(function() {
      return {
        prefixCls,
        inlineCollapsed: mergedInlineCollapsed || false,
        antdMenuTheme: theme,
        direction,
        firstLevel: true,
        disableMenuItemTitleTooltip: _internalDisableMenuItemTitleTooltip
      };
    }, [prefixCls, mergedInlineCollapsed, theme, direction, _internalDisableMenuItemTitleTooltip]);
    return /* @__PURE__ */ React155.createElement(OverrideContext_default.Provider, {
      value: null
    }, /* @__PURE__ */ React155.createElement(MenuContext_default.Provider, {
      value: contextValue
    }, /* @__PURE__ */ React155.createElement(es_default12, _extends({
      getPopupContainer,
      overflowedIndicator: /* @__PURE__ */ React155.createElement(EllipsisOutlined_default2, null),
      overflowedIndicatorPopupClassName: "".concat(prefixCls, "-").concat(theme),
      mode: mergedMode,
      selectable: mergedSelectable,
      onClick: onItemClick
    }, passedProps, {
      inlineCollapsed: mergedInlineCollapsed,
      className: menuClassName,
      prefixCls,
      direction,
      defaultMotions,
      expandIcon: mergedExpandIcon,
      ref
    }), mergedChildren)));
  });
  var Menu2 = /* @__PURE__ */ function(_React$Component) {
    _inherits(Menu3, _React$Component);
    var _super = _createSuper(Menu3);
    function Menu3() {
      var _this;
      _classCallCheck(this, Menu3);
      _this = _super.apply(this, arguments);
      _this.focus = function(options) {
        var _a;
        (_a = _this.menu) === null || _a === void 0 ? void 0 : _a.focus(options);
      };
      return _this;
    }
    _createClass(Menu3, [{
      key: "render",
      value: function render2() {
        var _this2 = this;
        return /* @__PURE__ */ React155.createElement(SiderContext.Consumer, null, function(context2) {
          return /* @__PURE__ */ React155.createElement(InternalMenu, _extends({
            ref: function ref(node) {
              _this2.menu = node;
            }
          }, _this2.props, context2));
        });
      }
    }]);
    return Menu3;
  }(React155.Component);
  Menu2.Divider = MenuDivider_default;
  Menu2.Item = MenuItem2;
  Menu2.SubMenu = SubMenu_default;
  Menu2.ItemGroup = MenuItemGroup;
  var menu_default = Menu2;

  // node_modules/antd/es/dropdown/dropdown.js
  var import_classnames50 = __toESM(require_classnames());

  // node_modules/rc-dropdown/es/Dropdown.js
  var React157 = __toESM(require_react());
  var import_classnames45 = __toESM(require_classnames());

  // node_modules/rc-dropdown/es/placements.js
  var autoAdjustOverflow3 = {
    adjustX: 1,
    adjustY: 1
  };
  var targetOffset3 = [0, 0];
  var placements3 = {
    topLeft: {
      points: ["bl", "tl"],
      overflow: autoAdjustOverflow3,
      offset: [0, -4],
      targetOffset: targetOffset3
    },
    topCenter: {
      points: ["bc", "tc"],
      overflow: autoAdjustOverflow3,
      offset: [0, -4],
      targetOffset: targetOffset3
    },
    topRight: {
      points: ["br", "tr"],
      overflow: autoAdjustOverflow3,
      offset: [0, -4],
      targetOffset: targetOffset3
    },
    bottomLeft: {
      points: ["tl", "bl"],
      overflow: autoAdjustOverflow3,
      offset: [0, 4],
      targetOffset: targetOffset3
    },
    bottomCenter: {
      points: ["tc", "bc"],
      overflow: autoAdjustOverflow3,
      offset: [0, 4],
      targetOffset: targetOffset3
    },
    bottomRight: {
      points: ["tr", "br"],
      overflow: autoAdjustOverflow3,
      offset: [0, 4],
      targetOffset: targetOffset3
    }
  };
  var placements_default = placements3;

  // node_modules/rc-dropdown/es/hooks/useAccessibility.js
  var React156 = __toESM(require_react());
  var ESC2 = KeyCode_default.ESC;
  var TAB = KeyCode_default.TAB;
  function useAccessibility2(_ref) {
    var visible = _ref.visible, setTriggerVisible = _ref.setTriggerVisible, triggerRef = _ref.triggerRef, onVisibleChange = _ref.onVisibleChange, autoFocus = _ref.autoFocus;
    var focusMenuRef = React156.useRef(false);
    var handleCloseMenuAndReturnFocus = function handleCloseMenuAndReturnFocus2() {
      if (visible && triggerRef.current) {
        var _triggerRef$current, _triggerRef$current$t, _triggerRef$current$t2, _triggerRef$current$t3;
        (_triggerRef$current = triggerRef.current) === null || _triggerRef$current === void 0 ? void 0 : (_triggerRef$current$t = _triggerRef$current.triggerRef) === null || _triggerRef$current$t === void 0 ? void 0 : (_triggerRef$current$t2 = _triggerRef$current$t.current) === null || _triggerRef$current$t2 === void 0 ? void 0 : (_triggerRef$current$t3 = _triggerRef$current$t2.focus) === null || _triggerRef$current$t3 === void 0 ? void 0 : _triggerRef$current$t3.call(_triggerRef$current$t2);
        setTriggerVisible(false);
        if (typeof onVisibleChange === "function") {
          onVisibleChange(false);
        }
      }
    };
    var focusMenu = function focusMenu2() {
      var _triggerRef$current2, _triggerRef$current2$, _triggerRef$current2$2, _triggerRef$current2$3;
      var elements = getFocusNodeList((_triggerRef$current2 = triggerRef.current) === null || _triggerRef$current2 === void 0 ? void 0 : (_triggerRef$current2$ = _triggerRef$current2.popupRef) === null || _triggerRef$current2$ === void 0 ? void 0 : (_triggerRef$current2$2 = _triggerRef$current2$.current) === null || _triggerRef$current2$2 === void 0 ? void 0 : (_triggerRef$current2$3 = _triggerRef$current2$2.getElement) === null || _triggerRef$current2$3 === void 0 ? void 0 : _triggerRef$current2$3.call(_triggerRef$current2$2));
      var firstElement = elements[0];
      if (firstElement === null || firstElement === void 0 ? void 0 : firstElement.focus) {
        firstElement.focus();
        focusMenuRef.current = true;
        return true;
      }
      return false;
    };
    var handleKeyDown = function handleKeyDown2(event) {
      switch (event.keyCode) {
        case ESC2:
          handleCloseMenuAndReturnFocus();
          break;
        case TAB: {
          var focusResult = false;
          if (!focusMenuRef.current) {
            focusResult = focusMenu();
          }
          if (focusResult) {
            event.preventDefault();
          } else {
            handleCloseMenuAndReturnFocus();
          }
          break;
        }
      }
    };
    React156.useEffect(function() {
      if (visible) {
        window.addEventListener("keydown", handleKeyDown);
        if (autoFocus) {
          raf_default(focusMenu, 3);
        }
        return function() {
          window.removeEventListener("keydown", handleKeyDown);
          focusMenuRef.current = false;
        };
      }
      return function() {
        focusMenuRef.current = false;
      };
    }, [visible]);
  }

  // node_modules/rc-dropdown/es/Dropdown.js
  var _excluded35 = ["arrow", "prefixCls", "transitionName", "animation", "align", "placement", "placements", "getPopupContainer", "showAction", "hideAction", "overlayClassName", "overlayStyle", "visible", "trigger", "autoFocus"];
  function Dropdown(props, ref) {
    var _props$arrow = props.arrow, arrow = _props$arrow === void 0 ? false : _props$arrow, _props$prefixCls = props.prefixCls, prefixCls = _props$prefixCls === void 0 ? "rc-dropdown" : _props$prefixCls, transitionName2 = props.transitionName, animation = props.animation, align = props.align, _props$placement = props.placement, placement = _props$placement === void 0 ? "bottomLeft" : _props$placement, _props$placements = props.placements, placements4 = _props$placements === void 0 ? placements_default : _props$placements, getPopupContainer = props.getPopupContainer, showAction = props.showAction, hideAction = props.hideAction, overlayClassName = props.overlayClassName, overlayStyle = props.overlayStyle, visible = props.visible, _props$trigger = props.trigger, trigger = _props$trigger === void 0 ? ["hover"] : _props$trigger, autoFocus = props.autoFocus, otherProps = _objectWithoutProperties(props, _excluded35);
    var _React$useState = React157.useState(), _React$useState2 = _slicedToArray(_React$useState, 2), triggerVisible = _React$useState2[0], setTriggerVisible = _React$useState2[1];
    var mergedVisible = "visible" in props ? visible : triggerVisible;
    var triggerRef = React157.useRef(null);
    React157.useImperativeHandle(ref, function() {
      return triggerRef.current;
    });
    useAccessibility2({
      visible: mergedVisible,
      setTriggerVisible,
      triggerRef,
      onVisibleChange: props.onVisibleChange,
      autoFocus
    });
    var getOverlayElement = function getOverlayElement2() {
      var overlay = props.overlay;
      var overlayElement;
      if (typeof overlay === "function") {
        overlayElement = overlay();
      } else {
        overlayElement = overlay;
      }
      return overlayElement;
    };
    var onClick = function onClick2(e3) {
      var onOverlayClick = props.onOverlayClick;
      setTriggerVisible(false);
      if (onOverlayClick) {
        onOverlayClick(e3);
      }
    };
    var onVisibleChange = function onVisibleChange2(newVisible) {
      var onVisibleChangeProp = props.onVisibleChange;
      setTriggerVisible(newVisible);
      if (typeof onVisibleChangeProp === "function") {
        onVisibleChangeProp(newVisible);
      }
    };
    var getMenuElement = function getMenuElement2() {
      var overlayElement = getOverlayElement();
      return /* @__PURE__ */ React157.createElement(React157.Fragment, null, arrow && /* @__PURE__ */ React157.createElement("div", {
        className: "".concat(prefixCls, "-arrow")
      }), overlayElement);
    };
    var getMenuElementOrLambda = function getMenuElementOrLambda2() {
      var overlay = props.overlay;
      if (typeof overlay === "function") {
        return getMenuElement;
      }
      return getMenuElement();
    };
    var getMinOverlayWidthMatchTrigger = function getMinOverlayWidthMatchTrigger2() {
      var minOverlayWidthMatchTrigger = props.minOverlayWidthMatchTrigger, alignPoint2 = props.alignPoint;
      if ("minOverlayWidthMatchTrigger" in props) {
        return minOverlayWidthMatchTrigger;
      }
      return !alignPoint2;
    };
    var getOpenClassName = function getOpenClassName2() {
      var openClassName = props.openClassName;
      if (openClassName !== void 0) {
        return openClassName;
      }
      return "".concat(prefixCls, "-open");
    };
    var renderChildren = function renderChildren2() {
      var children = props.children;
      var childrenProps = children.props ? children.props : {};
      var childClassName = (0, import_classnames45.default)(childrenProps.className, getOpenClassName());
      return mergedVisible && children ? /* @__PURE__ */ React157.cloneElement(children, {
        className: childClassName
      }) : children;
    };
    var triggerHideAction = hideAction;
    if (!triggerHideAction && trigger.indexOf("contextMenu") !== -1) {
      triggerHideAction = ["click"];
    }
    return /* @__PURE__ */ React157.createElement(es_default7, _objectSpread2(_objectSpread2({
      builtinPlacements: placements4
    }, otherProps), {}, {
      prefixCls,
      ref: triggerRef,
      popupClassName: (0, import_classnames45.default)(overlayClassName, _defineProperty({}, "".concat(prefixCls, "-show-arrow"), arrow)),
      popupStyle: overlayStyle,
      action: trigger,
      showAction,
      hideAction: triggerHideAction || [],
      popupPlacement: placement,
      popupAlign: align,
      popupTransitionName: transitionName2,
      popupAnimation: animation,
      popupVisible: mergedVisible,
      stretch: getMinOverlayWidthMatchTrigger() ? "minWidth" : "",
      popup: getMenuElementOrLambda(),
      onPopupVisibleChange: onVisibleChange,
      onPopupClick: onClick,
      getPopupContainer
    }), renderChildren());
  }
  var Dropdown_default = /* @__PURE__ */ React157.forwardRef(Dropdown);

  // node_modules/rc-dropdown/es/index.js
  var es_default13 = Dropdown_default;

  // node_modules/antd/es/dropdown/dropdown.js
  var React166 = __toESM(require_react());

  // node_modules/antd/es/dropdown/dropdown-button.js
  var import_classnames49 = __toESM(require_classnames());
  var React165 = __toESM(require_react());

  // node_modules/antd/es/button/button.js
  var import_classnames47 = __toESM(require_classnames());
  var React161 = __toESM(require_react());

  // node_modules/antd/es/_util/wave.js
  var React158 = __toESM(require_react());

  // node_modules/antd/es/_util/raf.js
  var id = 0;
  var ids = {};
  function wrapperRaf3(callback) {
    var delayFrames = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
    var myId = id++;
    var restFrames = delayFrames;
    function internalCallback() {
      restFrames -= 1;
      if (restFrames <= 0) {
        callback();
        delete ids[myId];
      } else {
        ids[myId] = raf_default(internalCallback);
      }
    }
    ids[myId] = raf_default(internalCallback);
    return myId;
  }
  wrapperRaf3.cancel = function cancel(pid) {
    if (pid === void 0)
      return;
    raf_default.cancel(ids[pid]);
    delete ids[pid];
  };
  wrapperRaf3.ids = ids;

  // node_modules/antd/es/_util/wave.js
  var styleForPseudo;
  function isHidden(element) {
    if (false) {
      return false;
    }
    return !element || element.offsetParent === null || element.hidden;
  }
  function getValidateContainer(nodeRoot) {
    if (nodeRoot instanceof Document) {
      return nodeRoot.body;
    }
    return Array.from(nodeRoot.childNodes).find(function(ele) {
      return (ele === null || ele === void 0 ? void 0 : ele.nodeType) === Node.ELEMENT_NODE;
    });
  }
  function isNotGrey(color) {
    var match2 = (color || "").match(/rgba?\((\d*), (\d*), (\d*)(, [\d.]*)?\)/);
    if (match2 && match2[1] && match2[2] && match2[3]) {
      return !(match2[1] === match2[2] && match2[2] === match2[3]);
    }
    return true;
  }
  var Wave = /* @__PURE__ */ function(_React$Component) {
    _inherits(Wave2, _React$Component);
    var _super = _createSuper(Wave2);
    function Wave2() {
      var _this;
      _classCallCheck(this, Wave2);
      _this = _super.apply(this, arguments);
      _this.containerRef = /* @__PURE__ */ React158.createRef();
      _this.animationStart = false;
      _this.destroyed = false;
      _this.onClick = function(node, waveColor) {
        var _a, _b;
        var _this$props = _this.props, insertExtraNode = _this$props.insertExtraNode, disabled = _this$props.disabled;
        if (disabled || !node || isHidden(node) || node.className.includes("-leave")) {
          return;
        }
        _this.extraNode = document.createElement("div");
        var _assertThisInitialize = _assertThisInitialized(_this), extraNode = _assertThisInitialize.extraNode;
        var getPrefixCls = _this.context.getPrefixCls;
        extraNode.className = "".concat(getPrefixCls(""), "-click-animating-node");
        var attributeName = _this.getAttributeName();
        node.setAttribute(attributeName, "true");
        if (waveColor && waveColor !== "#fff" && waveColor !== "#ffffff" && waveColor !== "rgb(255, 255, 255)" && waveColor !== "rgba(255, 255, 255, 1)" && isNotGrey(waveColor) && !/rgba\((?:\d*, ){3}0\)/.test(waveColor) && // any transparent rgba color
        waveColor !== "transparent") {
          extraNode.style.borderColor = waveColor;
          var nodeRoot = ((_a = node.getRootNode) === null || _a === void 0 ? void 0 : _a.call(node)) || node.ownerDocument;
          var nodeBody = (_b = getValidateContainer(nodeRoot)) !== null && _b !== void 0 ? _b : nodeRoot;
          styleForPseudo = updateCSS("\n      [".concat(getPrefixCls(""), "-click-animating-without-extra-node='true']::after, .").concat(getPrefixCls(""), "-click-animating-node {\n        --antd-wave-shadow-color: ").concat(waveColor, ";\n      }"), "antd-wave", {
            csp: _this.csp,
            attachTo: nodeBody
          });
        }
        if (insertExtraNode) {
          node.appendChild(extraNode);
        }
        ["transition", "animation"].forEach(function(name) {
          node.addEventListener("".concat(name, "start"), _this.onTransitionStart);
          node.addEventListener("".concat(name, "end"), _this.onTransitionEnd);
        });
      };
      _this.onTransitionStart = function(e3) {
        if (_this.destroyed) {
          return;
        }
        var node = _this.containerRef.current;
        if (!e3 || e3.target !== node || _this.animationStart) {
          return;
        }
        _this.resetEffect(node);
      };
      _this.onTransitionEnd = function(e3) {
        if (!e3 || e3.animationName !== "fadeEffect") {
          return;
        }
        _this.resetEffect(e3.target);
      };
      _this.bindAnimationEvent = function(node) {
        if (!node || !node.getAttribute || node.getAttribute("disabled") || node.className.includes("disabled")) {
          return;
        }
        var onClick = function onClick2(e3) {
          if (e3.target.tagName === "INPUT" || isHidden(e3.target)) {
            return;
          }
          _this.resetEffect(node);
          var waveColor = getComputedStyle(node).getPropertyValue("border-top-color") || // Firefox Compatible
          getComputedStyle(node).getPropertyValue("border-color") || getComputedStyle(node).getPropertyValue("background-color");
          _this.clickWaveTimeoutId = window.setTimeout(function() {
            return _this.onClick(node, waveColor);
          }, 0);
          wrapperRaf3.cancel(_this.animationStartId);
          _this.animationStart = true;
          _this.animationStartId = wrapperRaf3(function() {
            _this.animationStart = false;
          }, 10);
        };
        node.addEventListener("click", onClick, true);
        return {
          cancel: function cancel2() {
            node.removeEventListener("click", onClick, true);
          }
        };
      };
      _this.renderWave = function(_ref) {
        var csp = _ref.csp;
        var children = _this.props.children;
        _this.csp = csp;
        if (!/* @__PURE__ */ React158.isValidElement(children))
          return children;
        var ref = _this.containerRef;
        if (supportRef(children)) {
          ref = composeRef(children.ref, _this.containerRef);
        }
        return cloneElement4(children, {
          ref
        });
      };
      return _this;
    }
    _createClass(Wave2, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this.destroyed = false;
        var node = this.containerRef.current;
        if (!node || node.nodeType !== 1) {
          return;
        }
        this.instance = this.bindAnimationEvent(node);
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this.instance) {
          this.instance.cancel();
        }
        if (this.clickWaveTimeoutId) {
          clearTimeout(this.clickWaveTimeoutId);
        }
        this.destroyed = true;
      }
    }, {
      key: "getAttributeName",
      value: function getAttributeName() {
        var getPrefixCls = this.context.getPrefixCls;
        var insertExtraNode = this.props.insertExtraNode;
        return insertExtraNode ? "".concat(getPrefixCls(""), "-click-animating") : "".concat(getPrefixCls(""), "-click-animating-without-extra-node");
      }
    }, {
      key: "resetEffect",
      value: function resetEffect(node) {
        var _this2 = this;
        if (!node || node === this.extraNode || !(node instanceof Element)) {
          return;
        }
        var insertExtraNode = this.props.insertExtraNode;
        var attributeName = this.getAttributeName();
        node.setAttribute(attributeName, "false");
        if (styleForPseudo) {
          styleForPseudo.innerHTML = "";
        }
        if (insertExtraNode && this.extraNode && node.contains(this.extraNode)) {
          node.removeChild(this.extraNode);
        }
        ["transition", "animation"].forEach(function(name) {
          node.removeEventListener("".concat(name, "start"), _this2.onTransitionStart);
          node.removeEventListener("".concat(name, "end"), _this2.onTransitionEnd);
        });
      }
    }, {
      key: "render",
      value: function render2() {
        return /* @__PURE__ */ React158.createElement(ConfigConsumer, null, this.renderWave);
      }
    }]);
    return Wave2;
  }(React158.Component);
  Wave.contextType = ConfigContext;
  var wave_default = Wave;

  // node_modules/antd/es/button/button-group.js
  var import_classnames46 = __toESM(require_classnames());
  var React159 = __toESM(require_react());
  var __rest12 = function(s2, e3) {
    var t4 = {};
    for (var p2 in s2)
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t4[p2] = s2[p2];
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t4[p2[i3]] = s2[p2[i3]];
      }
    return t4;
  };
  var GroupSizeContext = /* @__PURE__ */ React159.createContext(void 0);
  var ButtonGroup = function ButtonGroup2(props) {
    var _classNames;
    var _React$useContext = React159.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls, direction = _React$useContext.direction;
    var customizePrefixCls = props.prefixCls, size = props.size, className = props.className, others = __rest12(props, ["prefixCls", "size", "className"]);
    var prefixCls = getPrefixCls("btn-group", customizePrefixCls);
    var sizeCls = "";
    switch (size) {
      case "large":
        sizeCls = "lg";
        break;
      case "small":
        sizeCls = "sm";
        break;
      case "middle":
      case void 0:
        break;
      default:
        true ? warning_default2(!size, "Button.Group", "Invalid prop `size`.") : void 0;
    }
    var classes = (0, import_classnames46.default)(prefixCls, (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-").concat(sizeCls), sizeCls), _defineProperty(_classNames, "".concat(prefixCls, "-rtl"), direction === "rtl"), _classNames), className);
    return /* @__PURE__ */ React159.createElement(GroupSizeContext.Provider, {
      value: size
    }, /* @__PURE__ */ React159.createElement("div", _extends({}, others, {
      className: classes
    })));
  };
  var button_group_default = ButtonGroup;

  // node_modules/antd/es/button/LoadingIcon.js
  var import_react48 = __toESM(require_react());
  var getCollapsedWidth = function getCollapsedWidth2() {
    return {
      width: 0,
      opacity: 0,
      transform: "scale(0)"
    };
  };
  var getRealWidth = function getRealWidth2(node) {
    return {
      width: node.scrollWidth,
      opacity: 1,
      transform: "scale(1)"
    };
  };
  var LoadingIcon = function LoadingIcon2(_ref) {
    var prefixCls = _ref.prefixCls, loading = _ref.loading, existIcon = _ref.existIcon;
    var visible = !!loading;
    if (existIcon) {
      return /* @__PURE__ */ import_react48.default.createElement("span", {
        className: "".concat(prefixCls, "-loading-icon")
      }, /* @__PURE__ */ import_react48.default.createElement(LoadingOutlined_default2, null));
    }
    return /* @__PURE__ */ import_react48.default.createElement(es_default3, {
      visible,
      // We do not really use this motionName
      motionName: "".concat(prefixCls, "-loading-icon-motion"),
      removeOnLeave: true,
      onAppearStart: getCollapsedWidth,
      onAppearActive: getRealWidth,
      onEnterStart: getCollapsedWidth,
      onEnterActive: getRealWidth,
      onLeaveStart: getRealWidth,
      onLeaveActive: getCollapsedWidth
    }, function(_ref2, ref) {
      var className = _ref2.className, style3 = _ref2.style;
      return /* @__PURE__ */ import_react48.default.createElement("span", {
        className: "".concat(prefixCls, "-loading-icon"),
        style: style3,
        ref
      }, /* @__PURE__ */ import_react48.default.createElement(LoadingOutlined_default2, {
        className
      }));
    });
  };
  var LoadingIcon_default = LoadingIcon;

  // node_modules/antd/es/button/button.js
  var __rest13 = function(s2, e3) {
    var t4 = {};
    for (var p2 in s2)
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t4[p2] = s2[p2];
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t4[p2[i3]] = s2[p2[i3]];
      }
    return t4;
  };
  var rxTwoCNChar = /^[\u4e00-\u9fa5]{2}$/;
  var isTwoCNChar = rxTwoCNChar.test.bind(rxTwoCNChar);
  function isString(str) {
    return typeof str === "string";
  }
  function isUnBorderedButtonType(type4) {
    return type4 === "text" || type4 === "link";
  }
  function insertSpace(child, needInserted) {
    if (child === null || child === void 0) {
      return;
    }
    var SPACE = needInserted ? " " : "";
    if (typeof child !== "string" && typeof child !== "number" && isString(child.type) && isTwoCNChar(child.props.children)) {
      return cloneElement4(child, {
        children: child.props.children.split("").join(SPACE)
      });
    }
    if (typeof child === "string") {
      return isTwoCNChar(child) ? /* @__PURE__ */ React161.createElement("span", null, child.split("").join(SPACE)) : /* @__PURE__ */ React161.createElement("span", null, child);
    }
    if (isFragment3(child)) {
      return /* @__PURE__ */ React161.createElement("span", null, child);
    }
    return child;
  }
  function spaceChildren(children, needInserted) {
    var isPrevChildPure = false;
    var childList = [];
    React161.Children.forEach(children, function(child) {
      var type4 = _typeof(child);
      var isCurrentChildPure = type4 === "string" || type4 === "number";
      if (isPrevChildPure && isCurrentChildPure) {
        var lastIndex = childList.length - 1;
        var lastChild = childList[lastIndex];
        childList[lastIndex] = "".concat(lastChild).concat(child);
      } else {
        childList.push(child);
      }
      isPrevChildPure = isCurrentChildPure;
    });
    return React161.Children.map(childList, function(child) {
      return insertSpace(child, needInserted);
    });
  }
  var ButtonTypes = tuple("default", "primary", "ghost", "dashed", "link", "text");
  var ButtonShapes = tuple("default", "circle", "round");
  var ButtonHTMLTypes = tuple("submit", "button", "reset");
  var InternalButton = function InternalButton2(props, ref) {
    var _classNames;
    var _props$loading = props.loading, loading = _props$loading === void 0 ? false : _props$loading, customizePrefixCls = props.prefixCls, _props$type = props.type, type4 = _props$type === void 0 ? "default" : _props$type, danger = props.danger, _props$shape = props.shape, shape = _props$shape === void 0 ? "default" : _props$shape, customizeSize = props.size, customDisabled = props.disabled, className = props.className, children = props.children, icon = props.icon, _props$ghost = props.ghost, ghost = _props$ghost === void 0 ? false : _props$ghost, _props$block = props.block, block = _props$block === void 0 ? false : _props$block, _props$htmlType = props.htmlType, htmlType = _props$htmlType === void 0 ? "button" : _props$htmlType, rest = __rest13(props, ["loading", "prefixCls", "type", "danger", "shape", "size", "disabled", "className", "children", "icon", "ghost", "block", "htmlType"]);
    var size = React161.useContext(SizeContext_default);
    var disabled = React161.useContext(DisabledContext_default);
    var mergedDisabled = customDisabled !== null && customDisabled !== void 0 ? customDisabled : disabled;
    var groupSize = React161.useContext(GroupSizeContext);
    var _React$useState = React161.useState(!!loading), _React$useState2 = _slicedToArray(_React$useState, 2), innerLoading = _React$useState2[0], setLoading = _React$useState2[1];
    var _React$useState3 = React161.useState(false), _React$useState4 = _slicedToArray(_React$useState3, 2), hasTwoCNChar = _React$useState4[0], setHasTwoCNChar = _React$useState4[1];
    var _React$useContext = React161.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls, autoInsertSpaceInButton = _React$useContext.autoInsertSpaceInButton, direction = _React$useContext.direction;
    var buttonRef = ref || /* @__PURE__ */ React161.createRef();
    var isNeedInserted = function isNeedInserted2() {
      return React161.Children.count(children) === 1 && !icon && !isUnBorderedButtonType(type4);
    };
    var fixTwoCNChar = function fixTwoCNChar2() {
      if (!buttonRef || !buttonRef.current || autoInsertSpaceInButton === false) {
        return;
      }
      var buttonText = buttonRef.current.textContent;
      if (isNeedInserted() && isTwoCNChar(buttonText)) {
        if (!hasTwoCNChar) {
          setHasTwoCNChar(true);
        }
      } else if (hasTwoCNChar) {
        setHasTwoCNChar(false);
      }
    };
    var loadingOrDelay = typeof loading === "boolean" ? loading : (loading === null || loading === void 0 ? void 0 : loading.delay) || true;
    React161.useEffect(function() {
      var delayTimer = null;
      if (typeof loadingOrDelay === "number") {
        delayTimer = window.setTimeout(function() {
          delayTimer = null;
          setLoading(loadingOrDelay);
        }, loadingOrDelay);
      } else {
        setLoading(loadingOrDelay);
      }
      return function() {
        if (delayTimer) {
          window.clearTimeout(delayTimer);
          delayTimer = null;
        }
      };
    }, [loadingOrDelay]);
    React161.useEffect(fixTwoCNChar, [buttonRef]);
    var handleClick = function handleClick2(e3) {
      var onClick = props.onClick;
      if (innerLoading || mergedDisabled) {
        e3.preventDefault();
        return;
      }
      onClick === null || onClick === void 0 ? void 0 : onClick(e3);
    };
    true ? warning_default2(!(typeof icon === "string" && icon.length > 2), "Button", "`icon` is using ReactNode instead of string naming in v4. Please check `".concat(icon, "` at https://ant.design/components/icon")) : void 0;
    true ? warning_default2(!(ghost && isUnBorderedButtonType(type4)), "Button", "`link` or `text` button can't be a `ghost` button.") : void 0;
    var prefixCls = getPrefixCls("btn", customizePrefixCls);
    var autoInsertSpace = autoInsertSpaceInButton !== false;
    var _useCompactItemContex = useCompactItemContext(prefixCls, direction), compactSize = _useCompactItemContex.compactSize, compactItemClassnames = _useCompactItemContex.compactItemClassnames;
    var sizeClassNameMap = {
      large: "lg",
      small: "sm",
      middle: void 0
    };
    var sizeFullname = compactSize || groupSize || customizeSize || size;
    var sizeCls = sizeFullname ? sizeClassNameMap[sizeFullname] || "" : "";
    var iconType = innerLoading ? "loading" : icon;
    var linkButtonRestProps = omit(rest, ["navigate"]);
    var classes = (0, import_classnames47.default)(prefixCls, (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-").concat(shape), shape !== "default" && shape), _defineProperty(_classNames, "".concat(prefixCls, "-").concat(type4), type4), _defineProperty(_classNames, "".concat(prefixCls, "-").concat(sizeCls), sizeCls), _defineProperty(_classNames, "".concat(prefixCls, "-icon-only"), !children && children !== 0 && !!iconType), _defineProperty(_classNames, "".concat(prefixCls, "-background-ghost"), ghost && !isUnBorderedButtonType(type4)), _defineProperty(_classNames, "".concat(prefixCls, "-loading"), innerLoading), _defineProperty(_classNames, "".concat(prefixCls, "-two-chinese-chars"), hasTwoCNChar && autoInsertSpace && !innerLoading), _defineProperty(_classNames, "".concat(prefixCls, "-block"), block), _defineProperty(_classNames, "".concat(prefixCls, "-dangerous"), !!danger), _defineProperty(_classNames, "".concat(prefixCls, "-rtl"), direction === "rtl"), _defineProperty(_classNames, "".concat(prefixCls, "-disabled"), linkButtonRestProps.href !== void 0 && mergedDisabled), _classNames), compactItemClassnames, className);
    var iconNode = icon && !innerLoading ? icon : /* @__PURE__ */ React161.createElement(LoadingIcon_default, {
      existIcon: !!icon,
      prefixCls,
      loading: !!innerLoading
    });
    var kids = children || children === 0 ? spaceChildren(children, isNeedInserted() && autoInsertSpace) : null;
    if (linkButtonRestProps.href !== void 0) {
      return /* @__PURE__ */ React161.createElement("a", _extends({}, linkButtonRestProps, {
        className: classes,
        onClick: handleClick,
        ref: buttonRef
      }), iconNode, kids);
    }
    var buttonNode = /* @__PURE__ */ React161.createElement("button", _extends({}, rest, {
      type: htmlType,
      className: classes,
      onClick: handleClick,
      disabled: mergedDisabled,
      ref: buttonRef
    }), iconNode, kids);
    if (isUnBorderedButtonType(type4)) {
      return buttonNode;
    }
    return /* @__PURE__ */ React161.createElement(wave_default, {
      disabled: !!innerLoading
    }, buttonNode);
  };
  var Button = /* @__PURE__ */ React161.forwardRef(InternalButton);
  if (true) {
    Button.displayName = "Button";
  }
  Button.Group = button_group_default;
  Button.__ANT_BUTTON = true;
  var button_default = Button;

  // node_modules/antd/es/button/index.js
  var button_default2 = button_default;

  // node_modules/antd/es/space/index.js
  var import_classnames48 = __toESM(require_classnames());
  var React164 = __toESM(require_react());

  // node_modules/antd/es/_util/hooks/useFlexGapSupport.js
  var React162 = __toESM(require_react());

  // node_modules/rc-util/es/Dom/styleChecker.js
  var isStyleNameSupport = function isStyleNameSupport2(styleName) {
    if (canUseDom() && window.document.documentElement) {
      var styleNameList = Array.isArray(styleName) ? styleName : [styleName];
      var documentElement = window.document.documentElement;
      return styleNameList.some(function(name) {
        return name in documentElement.style;
      });
    }
    return false;
  };
  var isStyleValueSupport = function isStyleValueSupport2(styleName, value) {
    if (!isStyleNameSupport(styleName)) {
      return false;
    }
    var ele = document.createElement("div");
    var origin = ele.style[styleName];
    ele.style[styleName] = value;
    return ele.style[styleName] !== origin;
  };
  function isStyleSupport(styleName, styleValue) {
    if (!Array.isArray(styleName) && styleValue !== void 0) {
      return isStyleValueSupport(styleName, styleValue);
    }
    return isStyleNameSupport(styleName);
  }

  // node_modules/antd/es/_util/styleChecker.js
  var canUseDocElement = function canUseDocElement2() {
    return canUseDom() && window.document.documentElement;
  };
  var flexGapSupported;
  var detectFlexGapSupported = function detectFlexGapSupported2() {
    if (!canUseDocElement()) {
      return false;
    }
    if (flexGapSupported !== void 0) {
      return flexGapSupported;
    }
    var flex = document.createElement("div");
    flex.style.display = "flex";
    flex.style.flexDirection = "column";
    flex.style.rowGap = "1px";
    flex.appendChild(document.createElement("div"));
    flex.appendChild(document.createElement("div"));
    document.body.appendChild(flex);
    flexGapSupported = flex.scrollHeight === 1;
    document.body.removeChild(flex);
    return flexGapSupported;
  };

  // node_modules/antd/es/_util/hooks/useFlexGapSupport.js
  var useFlexGapSupport_default = function() {
    var _React$useState = React162.useState(false), _React$useState2 = _slicedToArray(_React$useState, 2), flexible = _React$useState2[0], setFlexible = _React$useState2[1];
    React162.useEffect(function() {
      setFlexible(detectFlexGapSupported());
    }, []);
    return flexible;
  };

  // node_modules/antd/es/space/Item.js
  var React163 = __toESM(require_react());
  function Item3(_ref) {
    var className = _ref.className, direction = _ref.direction, index2 = _ref.index, marginDirection = _ref.marginDirection, children = _ref.children, split = _ref.split, wrap = _ref.wrap;
    var _React$useContext = React163.useContext(SpaceContext), horizontalSize = _React$useContext.horizontalSize, verticalSize = _React$useContext.verticalSize, latestIndex = _React$useContext.latestIndex, supportFlexGap = _React$useContext.supportFlexGap;
    var style3 = {};
    if (!supportFlexGap) {
      if (direction === "vertical") {
        if (index2 < latestIndex) {
          style3 = {
            marginBottom: horizontalSize / (split ? 2 : 1)
          };
        }
      } else {
        style3 = _extends(_extends({}, index2 < latestIndex && _defineProperty({}, marginDirection, horizontalSize / (split ? 2 : 1))), wrap && {
          paddingBottom: verticalSize
        });
      }
    }
    if (children === null || children === void 0) {
      return null;
    }
    return /* @__PURE__ */ React163.createElement(React163.Fragment, null, /* @__PURE__ */ React163.createElement("div", {
      className,
      style: style3
    }, children), index2 < latestIndex && split && /* @__PURE__ */ React163.createElement("span", {
      className: "".concat(className, "-split"),
      style: style3
    }, split));
  }

  // node_modules/antd/es/space/index.js
  var __rest14 = function(s2, e3) {
    var t4 = {};
    for (var p2 in s2)
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t4[p2] = s2[p2];
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t4[p2[i3]] = s2[p2[i3]];
      }
    return t4;
  };
  var SpaceContext = /* @__PURE__ */ React164.createContext({
    latestIndex: 0,
    horizontalSize: 0,
    verticalSize: 0,
    supportFlexGap: false
  });
  var spaceSize = {
    small: 8,
    middle: 16,
    large: 24
  };
  function getNumberSize(size) {
    return typeof size === "string" ? spaceSize[size] : size || 0;
  }
  var Space = function Space2(props) {
    var _classNames;
    var _React$useContext = React164.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls, space = _React$useContext.space, directionConfig = _React$useContext.direction;
    var _props$size = props.size, size = _props$size === void 0 ? (space === null || space === void 0 ? void 0 : space.size) || "small" : _props$size, align = props.align, className = props.className, children = props.children, _props$direction = props.direction, direction = _props$direction === void 0 ? "horizontal" : _props$direction, customizePrefixCls = props.prefixCls, split = props.split, style3 = props.style, _props$wrap = props.wrap, wrap = _props$wrap === void 0 ? false : _props$wrap, otherProps = __rest14(props, ["size", "align", "className", "children", "direction", "prefixCls", "split", "style", "wrap"]);
    var supportFlexGap = useFlexGapSupport_default();
    var _React$useMemo = React164.useMemo(function() {
      return (Array.isArray(size) ? size : [size, size]).map(function(item) {
        return getNumberSize(item);
      });
    }, [size]), _React$useMemo2 = _slicedToArray(_React$useMemo, 2), horizontalSize = _React$useMemo2[0], verticalSize = _React$useMemo2[1];
    var childNodes = toArray(children, {
      keepEmpty: true
    });
    var mergedAlign = align === void 0 && direction === "horizontal" ? "center" : align;
    var prefixCls = getPrefixCls("space", customizePrefixCls);
    var cn3 = (0, import_classnames48.default)(prefixCls, "".concat(prefixCls, "-").concat(direction), (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-rtl"), directionConfig === "rtl"), _defineProperty(_classNames, "".concat(prefixCls, "-align-").concat(mergedAlign), mergedAlign), _classNames), className);
    var itemClassName = "".concat(prefixCls, "-item");
    var marginDirection = directionConfig === "rtl" ? "marginLeft" : "marginRight";
    var latestIndex = 0;
    var nodes = childNodes.map(function(child, i3) {
      if (child !== null && child !== void 0) {
        latestIndex = i3;
      }
      var key2 = child && child.key || "".concat(itemClassName, "-").concat(i3);
      return /* @__PURE__ */ React164.createElement(Item3, {
        className: itemClassName,
        key: key2,
        direction,
        index: i3,
        marginDirection,
        split,
        wrap
      }, child);
    });
    var spaceContext = React164.useMemo(function() {
      return {
        horizontalSize,
        verticalSize,
        latestIndex,
        supportFlexGap
      };
    }, [horizontalSize, verticalSize, latestIndex, supportFlexGap]);
    if (childNodes.length === 0) {
      return null;
    }
    var gapStyle = {};
    if (wrap) {
      gapStyle.flexWrap = "wrap";
      if (!supportFlexGap) {
        gapStyle.marginBottom = -verticalSize;
      }
    }
    if (supportFlexGap) {
      gapStyle.columnGap = horizontalSize;
      gapStyle.rowGap = verticalSize;
    }
    return /* @__PURE__ */ React164.createElement("div", _extends({
      className: cn3,
      style: _extends(_extends({}, gapStyle), style3)
    }, otherProps), /* @__PURE__ */ React164.createElement(SpaceContext.Provider, {
      value: spaceContext
    }, nodes));
  };
  var CompoundedSpace = Space;
  CompoundedSpace.Compact = Compact_default;
  var space_default = CompoundedSpace;

  // node_modules/antd/es/dropdown/dropdown-button.js
  var __rest15 = function(s2, e3) {
    var t4 = {};
    for (var p2 in s2)
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t4[p2] = s2[p2];
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t4[p2[i3]] = s2[p2[i3]];
      }
    return t4;
  };
  var DropdownButton = function DropdownButton2(props) {
    var _React$useContext = React165.useContext(ConfigContext), getContextPopupContainer = _React$useContext.getPopupContainer, getPrefixCls = _React$useContext.getPrefixCls, direction = _React$useContext.direction;
    var customizePrefixCls = props.prefixCls, _props$type = props.type, type4 = _props$type === void 0 ? "default" : _props$type, danger = props.danger, disabled = props.disabled, loading = props.loading, onClick = props.onClick, htmlType = props.htmlType, children = props.children, className = props.className, menu = props.menu, arrow = props.arrow, autoFocus = props.autoFocus, overlay = props.overlay, trigger = props.trigger, align = props.align, visible = props.visible, open = props.open, onVisibleChange = props.onVisibleChange, onOpenChange = props.onOpenChange, placement = props.placement, getPopupContainer = props.getPopupContainer, href = props.href, _props$icon = props.icon, icon = _props$icon === void 0 ? /* @__PURE__ */ React165.createElement(EllipsisOutlined_default2, null) : _props$icon, title = props.title, _props$buttonsRender = props.buttonsRender, buttonsRender = _props$buttonsRender === void 0 ? function(buttons) {
      return buttons;
    } : _props$buttonsRender, mouseEnterDelay = props.mouseEnterDelay, mouseLeaveDelay = props.mouseLeaveDelay, overlayClassName = props.overlayClassName, overlayStyle = props.overlayStyle, destroyPopupOnHide = props.destroyPopupOnHide, restProps = __rest15(props, ["prefixCls", "type", "danger", "disabled", "loading", "onClick", "htmlType", "children", "className", "menu", "arrow", "autoFocus", "overlay", "trigger", "align", "visible", "open", "onVisibleChange", "onOpenChange", "placement", "getPopupContainer", "href", "icon", "title", "buttonsRender", "mouseEnterDelay", "mouseLeaveDelay", "overlayClassName", "overlayStyle", "destroyPopupOnHide"]);
    var prefixCls = getPrefixCls("dropdown-button", customizePrefixCls);
    var dropdownProps = {
      menu,
      arrow,
      autoFocus,
      align,
      disabled,
      trigger: disabled ? [] : trigger,
      onOpenChange: onOpenChange || onVisibleChange,
      getPopupContainer: getPopupContainer || getContextPopupContainer,
      mouseEnterDelay,
      mouseLeaveDelay,
      overlayClassName,
      overlayStyle,
      destroyPopupOnHide
    };
    var _useCompactItemContex = useCompactItemContext(prefixCls, direction), compactSize = _useCompactItemContex.compactSize, compactItemClassnames = _useCompactItemContex.compactItemClassnames;
    var classes = (0, import_classnames49.default)(prefixCls, compactItemClassnames, className);
    if ("overlay" in props) {
      dropdownProps.overlay = overlay;
    }
    if ("open" in props) {
      dropdownProps.open = open;
    } else if ("visible" in props) {
      dropdownProps.open = visible;
    }
    if ("placement" in props) {
      dropdownProps.placement = placement;
    } else {
      dropdownProps.placement = direction === "rtl" ? "bottomLeft" : "bottomRight";
    }
    var leftButton = /* @__PURE__ */ React165.createElement(button_default2, {
      type: type4,
      danger,
      disabled,
      loading,
      onClick,
      htmlType,
      href,
      title
    }, children);
    var rightButton = /* @__PURE__ */ React165.createElement(button_default2, {
      type: type4,
      danger,
      icon
    });
    var _buttonsRender = buttonsRender([leftButton, rightButton]), _buttonsRender2 = _slicedToArray(_buttonsRender, 2), leftButtonToRender = _buttonsRender2[0], rightButtonToRender = _buttonsRender2[1];
    return /* @__PURE__ */ React165.createElement(space_default.Compact, _extends({
      className: classes,
      size: compactSize,
      block: true
    }, restProps), leftButtonToRender, /* @__PURE__ */ React165.createElement(dropdown_default, _extends({}, dropdownProps), rightButtonToRender));
  };
  DropdownButton.__ANT_BUTTON = true;
  var dropdown_button_default = DropdownButton;

  // node_modules/antd/es/dropdown/dropdown.js
  var Placements = tuple("topLeft", "topCenter", "topRight", "bottomLeft", "bottomCenter", "bottomRight", "top", "bottom");
  var Dropdown2 = function Dropdown3(props) {
    var _React$useContext = React166.useContext(ConfigContext), getContextPopupContainer = _React$useContext.getPopupContainer, getPrefixCls = _React$useContext.getPrefixCls, direction = _React$useContext.direction;
    if (true) {
      [["visible", "open"], ["onVisibleChange", "onOpenChange"]].forEach(function(_ref) {
        var _ref2 = _slicedToArray(_ref, 2), deprecatedName = _ref2[0], newName = _ref2[1];
        true ? warning_default2(!(deprecatedName in props), "Dropdown", "`".concat(deprecatedName, "` is deprecated which will be removed in next major version, please use `").concat(newName, "` instead.")) : void 0;
      });
      true ? warning_default2(!("overlay" in props), "Dropdown", "`overlay` is deprecated. Please use `menu` instead.") : void 0;
    }
    var getTransitionName5 = function getTransitionName6() {
      var rootPrefixCls = getPrefixCls();
      var _props$placement = props.placement, placement = _props$placement === void 0 ? "" : _props$placement, transitionName2 = props.transitionName;
      if (transitionName2 !== void 0) {
        return transitionName2;
      }
      if (placement.includes("top")) {
        return "".concat(rootPrefixCls, "-slide-down");
      }
      return "".concat(rootPrefixCls, "-slide-up");
    };
    var getPlacement = function getPlacement2() {
      var placement = props.placement;
      if (!placement) {
        return direction === "rtl" ? "bottomRight" : "bottomLeft";
      }
      if (placement.includes("Center")) {
        var newPlacement = placement.slice(0, placement.indexOf("Center"));
        true ? warning_default2(!placement.includes("Center"), "Dropdown", "You are using '".concat(placement, "' placement in Dropdown, which is deprecated. Try to use '").concat(newPlacement, "' instead.")) : void 0;
        return newPlacement;
      }
      return placement;
    };
    var menu = props.menu, arrow = props.arrow, customizePrefixCls = props.prefixCls, children = props.children, trigger = props.trigger, disabled = props.disabled, dropdownRender = props.dropdownRender, getPopupContainer = props.getPopupContainer, overlayClassName = props.overlayClassName, visible = props.visible, open = props.open, onVisibleChange = props.onVisibleChange, onOpenChange = props.onOpenChange, _props$mouseEnterDela = props.mouseEnterDelay, mouseEnterDelay = _props$mouseEnterDela === void 0 ? 0.15 : _props$mouseEnterDela, _props$mouseLeaveDela = props.mouseLeaveDelay, mouseLeaveDelay = _props$mouseLeaveDela === void 0 ? 0.1 : _props$mouseLeaveDela, _props$autoAdjustOver = props.autoAdjustOverflow, autoAdjustOverflow4 = _props$autoAdjustOver === void 0 ? true : _props$autoAdjustOver;
    var prefixCls = getPrefixCls("dropdown", customizePrefixCls);
    var child = React166.Children.only(children);
    var dropdownTrigger = cloneElement4(child, {
      className: (0, import_classnames50.default)("".concat(prefixCls, "-trigger"), _defineProperty({}, "".concat(prefixCls, "-rtl"), direction === "rtl"), child.props.className),
      disabled
    });
    var triggerActions = disabled ? [] : trigger;
    var alignPoint2;
    if (triggerActions && triggerActions.includes("contextMenu")) {
      alignPoint2 = true;
    }
    var _useMergedState = useMergedState(false, {
      value: open !== void 0 ? open : visible
    }), _useMergedState2 = _slicedToArray(_useMergedState, 2), mergedOpen = _useMergedState2[0], setOpen = _useMergedState2[1];
    var onInnerOpenChange = useEvent(function(nextOpen) {
      onVisibleChange === null || onVisibleChange === void 0 ? void 0 : onVisibleChange(nextOpen);
      onOpenChange === null || onOpenChange === void 0 ? void 0 : onOpenChange(nextOpen);
      setOpen(nextOpen);
    });
    var overlayClassNameCustomized = (0, import_classnames50.default)(overlayClassName, _defineProperty({}, "".concat(prefixCls, "-rtl"), direction === "rtl"));
    var builtinPlacements = getPlacements({
      arrowPointAtCenter: _typeof(arrow) === "object" && arrow.pointAtCenter,
      autoAdjustOverflow: autoAdjustOverflow4
    });
    var onMenuClick = React166.useCallback(function() {
      setOpen(false);
    }, []);
    var renderOverlay = function renderOverlay2() {
      var overlay = props.overlay;
      var overlayNode;
      if (menu === null || menu === void 0 ? void 0 : menu.items) {
        overlayNode = /* @__PURE__ */ React166.createElement(menu_default, _extends({}, menu));
      } else if (typeof overlay === "function") {
        overlayNode = overlay();
      } else {
        overlayNode = overlay;
      }
      if (dropdownRender) {
        overlayNode = dropdownRender(overlayNode);
      }
      overlayNode = React166.Children.only(typeof overlayNode === "string" ? /* @__PURE__ */ React166.createElement("span", null, overlayNode) : overlayNode);
      return /* @__PURE__ */ React166.createElement(OverrideProvider, {
        prefixCls: "".concat(prefixCls, "-menu"),
        expandIcon: /* @__PURE__ */ React166.createElement("span", {
          className: "".concat(prefixCls, "-menu-submenu-arrow")
        }, /* @__PURE__ */ React166.createElement(RightOutlined_default2, {
          className: "".concat(prefixCls, "-menu-submenu-arrow-icon")
        })),
        mode: "vertical",
        selectable: false,
        onClick: onMenuClick,
        validator: function validator(_ref3) {
          var mode = _ref3.mode;
          true ? warning_default2(!mode || mode === "vertical", "Dropdown", 'mode="'.concat(mode, `" is not supported for Dropdown's Menu.`)) : void 0;
        }
      }, /* @__PURE__ */ React166.createElement(NoCompactStyle, null, overlayNode));
    };
    return /* @__PURE__ */ React166.createElement(es_default13, _extends({
      alignPoint: alignPoint2
    }, props, {
      mouseEnterDelay,
      mouseLeaveDelay,
      visible: mergedOpen,
      builtinPlacements,
      arrow: !!arrow,
      overlayClassName: overlayClassNameCustomized,
      prefixCls,
      getPopupContainer: getPopupContainer || getContextPopupContainer,
      transitionName: getTransitionName5(),
      trigger: triggerActions,
      overlay: renderOverlay,
      placement: getPlacement(),
      onVisibleChange: onInnerOpenChange
    }), dropdownTrigger);
  };
  Dropdown2.Button = dropdown_button_default;
  var dropdown_default = Dropdown2;

  // node_modules/rc-picker/es/generate/moment.js
  var import_moment = __toESM(require_moment());
  var generateConfig = {
    // get
    getNow: function getNow() {
      return (0, import_moment.default)();
    },
    getFixedDate: function getFixedDate(string3) {
      return (0, import_moment.default)(string3, "YYYY-MM-DD");
    },
    getEndDate: function getEndDate(date4) {
      var clone2 = date4.clone();
      return clone2.endOf("month");
    },
    getWeekDay: function getWeekDay(date4) {
      var clone2 = date4.clone().locale("en_US");
      return clone2.weekday() + clone2.localeData().firstDayOfWeek();
    },
    getYear: function getYear(date4) {
      return date4.year();
    },
    getMonth: function getMonth(date4) {
      return date4.month();
    },
    getDate: function getDate(date4) {
      return date4.date();
    },
    getHour: function getHour(date4) {
      return date4.hour();
    },
    getMinute: function getMinute(date4) {
      return date4.minute();
    },
    getSecond: function getSecond(date4) {
      return date4.second();
    },
    // set
    addYear: function addYear(date4, diff) {
      var clone2 = date4.clone();
      return clone2.add(diff, "year");
    },
    addMonth: function addMonth(date4, diff) {
      var clone2 = date4.clone();
      return clone2.add(diff, "month");
    },
    addDate: function addDate(date4, diff) {
      var clone2 = date4.clone();
      return clone2.add(diff, "day");
    },
    setYear: function setYear(date4, year) {
      var clone2 = date4.clone();
      return clone2.year(year);
    },
    setMonth: function setMonth(date4, month) {
      var clone2 = date4.clone();
      return clone2.month(month);
    },
    setDate: function setDate(date4, num) {
      var clone2 = date4.clone();
      return clone2.date(num);
    },
    setHour: function setHour(date4, hour) {
      var clone2 = date4.clone();
      return clone2.hour(hour);
    },
    setMinute: function setMinute(date4, minute) {
      var clone2 = date4.clone();
      return clone2.minute(minute);
    },
    setSecond: function setSecond(date4, second) {
      var clone2 = date4.clone();
      return clone2.second(second);
    },
    // Compare
    isAfter: function isAfter(date1, date22) {
      return date1.isAfter(date22);
    },
    isValidate: function isValidate(date4) {
      return date4.isValid();
    },
    locale: {
      getWeekFirstDay: function getWeekFirstDay(locale4) {
        var date4 = (0, import_moment.default)().locale(locale4);
        return date4.localeData().firstDayOfWeek();
      },
      getWeekFirstDate: function getWeekFirstDate(locale4, date4) {
        var clone2 = date4.clone();
        var result2 = clone2.locale(locale4);
        return result2.weekday(0);
      },
      getWeek: function getWeek(locale4, date4) {
        var clone2 = date4.clone();
        var result2 = clone2.locale(locale4);
        return result2.week();
      },
      getShortWeekDays: function getShortWeekDays(locale4) {
        var date4 = (0, import_moment.default)().locale(locale4);
        return date4.localeData().weekdaysMin();
      },
      getShortMonths: function getShortMonths(locale4) {
        var date4 = (0, import_moment.default)().locale(locale4);
        return date4.localeData().monthsShort();
      },
      format: function format2(locale4, date4, _format) {
        var clone2 = date4.clone();
        var result2 = clone2.locale(locale4);
        return result2.format(_format);
      },
      parse: function parse(locale4, text, formats) {
        var fallbackFormatList = [];
        for (var i3 = 0; i3 < formats.length; i3 += 1) {
          var format3 = formats[i3];
          var formatText = text;
          if (format3.includes("wo") || format3.includes("Wo")) {
            format3 = format3.replace(/wo/g, "w").replace(/Wo/g, "W");
            var matchFormat = format3.match(/[-YyMmDdHhSsWwGg]+/g);
            var matchText = formatText.match(/[-\d]+/g);
            if (matchFormat && matchText) {
              format3 = matchFormat.join("");
              formatText = matchText.join("");
            } else {
              fallbackFormatList.push(format3.replace(/o/g, ""));
            }
          }
          var date4 = (0, import_moment.default)(formatText, format3, locale4, true);
          if (date4.isValid()) {
            return date4;
          }
        }
        for (var _i = 0; _i < fallbackFormatList.length; _i += 1) {
          var _date = (0, import_moment.default)(text, fallbackFormatList[_i], locale4, false);
          if (_date.isValid()) {
            noteOnce(false, "Not match any format strictly and fallback to fuzzy match. Please help to fire a issue about this.");
            return _date;
          }
        }
        return null;
      }
    }
  };
  var moment_default = generateConfig;

  // node_modules/rc-picker/es/Picker.js
  var React197 = __toESM(require_react());
  var import_classnames59 = __toESM(require_classnames());

  // node_modules/rc-picker/es/PickerPanel.js
  var React194 = __toESM(require_react());
  var import_classnames57 = __toESM(require_classnames());

  // node_modules/rc-picker/es/panels/TimePanel/index.js
  var React176 = __toESM(require_react());
  var import_classnames53 = __toESM(require_classnames());

  // node_modules/rc-picker/es/panels/TimePanel/TimeHeader.js
  var React173 = __toESM(require_react());

  // node_modules/rc-picker/es/panels/Header.js
  var React168 = __toESM(require_react());

  // node_modules/rc-picker/es/PanelContext.js
  var React167 = __toESM(require_react());
  var PanelContext = /* @__PURE__ */ React167.createContext({});
  var PanelContext_default = PanelContext;

  // node_modules/rc-picker/es/panels/Header.js
  var HIDDEN_STYLE = {
    visibility: "hidden"
  };
  function Header2(_ref) {
    var prefixCls = _ref.prefixCls, _ref$prevIcon = _ref.prevIcon, prevIcon = _ref$prevIcon === void 0 ? "\u2039" : _ref$prevIcon, _ref$nextIcon = _ref.nextIcon, nextIcon = _ref$nextIcon === void 0 ? "\u203A" : _ref$nextIcon, _ref$superPrevIcon = _ref.superPrevIcon, superPrevIcon = _ref$superPrevIcon === void 0 ? "\xAB" : _ref$superPrevIcon, _ref$superNextIcon = _ref.superNextIcon, superNextIcon = _ref$superNextIcon === void 0 ? "\xBB" : _ref$superNextIcon, onSuperPrev = _ref.onSuperPrev, onSuperNext = _ref.onSuperNext, onPrev = _ref.onPrev, onNext = _ref.onNext, children = _ref.children;
    var _React$useContext = React168.useContext(PanelContext_default), hideNextBtn = _React$useContext.hideNextBtn, hidePrevBtn = _React$useContext.hidePrevBtn;
    return /* @__PURE__ */ React168.createElement("div", {
      className: prefixCls
    }, onSuperPrev && /* @__PURE__ */ React168.createElement("button", {
      type: "button",
      onClick: onSuperPrev,
      tabIndex: -1,
      className: "".concat(prefixCls, "-super-prev-btn"),
      style: hidePrevBtn ? HIDDEN_STYLE : {}
    }, superPrevIcon), onPrev && /* @__PURE__ */ React168.createElement("button", {
      type: "button",
      onClick: onPrev,
      tabIndex: -1,
      className: "".concat(prefixCls, "-prev-btn"),
      style: hidePrevBtn ? HIDDEN_STYLE : {}
    }, prevIcon), /* @__PURE__ */ React168.createElement("div", {
      className: "".concat(prefixCls, "-view")
    }, children), onNext && /* @__PURE__ */ React168.createElement("button", {
      type: "button",
      onClick: onNext,
      tabIndex: -1,
      className: "".concat(prefixCls, "-next-btn"),
      style: hideNextBtn ? HIDDEN_STYLE : {}
    }, nextIcon), onSuperNext && /* @__PURE__ */ React168.createElement("button", {
      type: "button",
      onClick: onSuperNext,
      tabIndex: -1,
      className: "".concat(prefixCls, "-super-next-btn"),
      style: hideNextBtn ? HIDDEN_STYLE : {}
    }, superNextIcon));
  }
  var Header_default = Header2;

  // node_modules/rc-picker/es/panels/DecadePanel/index.js
  var React172 = __toESM(require_react());

  // node_modules/rc-picker/es/panels/DecadePanel/DecadeHeader.js
  var React169 = __toESM(require_react());
  function DecadeHeader(props) {
    var prefixCls = props.prefixCls, generateConfig2 = props.generateConfig, viewDate = props.viewDate, onPrevDecades = props.onPrevDecades, onNextDecades = props.onNextDecades;
    var _React$useContext = React169.useContext(PanelContext_default), hideHeader = _React$useContext.hideHeader;
    if (hideHeader) {
      return null;
    }
    var headerPrefixCls = "".concat(prefixCls, "-header");
    var yearNumber = generateConfig2.getYear(viewDate);
    var startYear = Math.floor(yearNumber / DECADE_DISTANCE_COUNT) * DECADE_DISTANCE_COUNT;
    var endYear = startYear + DECADE_DISTANCE_COUNT - 1;
    return /* @__PURE__ */ React169.createElement(Header_default, _extends({}, props, {
      prefixCls: headerPrefixCls,
      onSuperPrev: onPrevDecades,
      onSuperNext: onNextDecades
    }), startYear, "-", endYear);
  }
  var DecadeHeader_default = DecadeHeader;

  // node_modules/rc-picker/es/panels/DecadePanel/DecadeBody.js
  var React171 = __toESM(require_react());

  // node_modules/rc-picker/es/panels/PanelBody.js
  var React170 = __toESM(require_react());
  var import_classnames51 = __toESM(require_classnames());

  // node_modules/rc-picker/es/utils/timeUtil.js
  function setTime(generateConfig2, date4, hour, minute, second) {
    var nextTime = generateConfig2.setHour(date4, hour);
    nextTime = generateConfig2.setMinute(nextTime, minute);
    nextTime = generateConfig2.setSecond(nextTime, second);
    return nextTime;
  }
  function setDateTime(generateConfig2, date4, defaultDate) {
    if (!defaultDate) {
      return date4;
    }
    var newDate = date4;
    newDate = generateConfig2.setHour(newDate, generateConfig2.getHour(defaultDate));
    newDate = generateConfig2.setMinute(newDate, generateConfig2.getMinute(defaultDate));
    newDate = generateConfig2.setSecond(newDate, generateConfig2.getSecond(defaultDate));
    return newDate;
  }
  function getLowerBoundTime(hour, minute, second, hourStep, minuteStep, secondStep) {
    var lowerBoundHour = Math.floor(hour / hourStep) * hourStep;
    if (lowerBoundHour < hour) {
      return [lowerBoundHour, 60 - minuteStep, 60 - secondStep];
    }
    var lowerBoundMinute = Math.floor(minute / minuteStep) * minuteStep;
    if (lowerBoundMinute < minute) {
      return [lowerBoundHour, lowerBoundMinute, 60 - secondStep];
    }
    var lowerBoundSecond = Math.floor(second / secondStep) * secondStep;
    return [lowerBoundHour, lowerBoundMinute, lowerBoundSecond];
  }
  function getLastDay(generateConfig2, date4) {
    var year = generateConfig2.getYear(date4);
    var month = generateConfig2.getMonth(date4) + 1;
    var endDate = generateConfig2.getEndDate(generateConfig2.getFixedDate("".concat(year, "-").concat(month, "-01")));
    var lastDay = generateConfig2.getDate(endDate);
    var monthShow = month < 10 ? "0".concat(month) : "".concat(month);
    return "".concat(year, "-").concat(monthShow, "-").concat(lastDay);
  }

  // node_modules/rc-picker/es/panels/PanelBody.js
  function PanelBody(_ref) {
    var prefixCls = _ref.prefixCls, disabledDate = _ref.disabledDate, onSelect = _ref.onSelect, picker = _ref.picker, rowNum = _ref.rowNum, colNum = _ref.colNum, prefixColumn = _ref.prefixColumn, rowClassName = _ref.rowClassName, baseDate = _ref.baseDate, getCellClassName = _ref.getCellClassName, getCellText = _ref.getCellText, getCellNode = _ref.getCellNode, getCellDate = _ref.getCellDate, generateConfig2 = _ref.generateConfig, titleCell = _ref.titleCell, headerCells = _ref.headerCells;
    var _React$useContext = React170.useContext(PanelContext_default), onDateMouseEnter = _React$useContext.onDateMouseEnter, onDateMouseLeave = _React$useContext.onDateMouseLeave, mode = _React$useContext.mode;
    var cellPrefixCls = "".concat(prefixCls, "-cell");
    var rows = [];
    for (var i3 = 0; i3 < rowNum; i3 += 1) {
      var row = [];
      var rowStartDate = void 0;
      var _loop = function _loop2() {
        var _objectSpread23;
        var offset4 = i3 * colNum + j2;
        var currentDate = getCellDate(baseDate, offset4);
        var disabled = getCellDateDisabled({
          cellDate: currentDate,
          mode,
          disabledDate,
          generateConfig: generateConfig2
        });
        if (j2 === 0) {
          rowStartDate = currentDate;
          if (prefixColumn) {
            row.push(prefixColumn(rowStartDate));
          }
        }
        var title = titleCell && titleCell(currentDate);
        row.push(/* @__PURE__ */ React170.createElement("td", {
          key: j2,
          title,
          className: (0, import_classnames51.default)(cellPrefixCls, _objectSpread2((_objectSpread23 = {}, _defineProperty(_objectSpread23, "".concat(cellPrefixCls, "-disabled"), disabled), _defineProperty(_objectSpread23, "".concat(cellPrefixCls, "-start"), getCellText(currentDate) === 1 || picker === "year" && Number(title) % 10 === 0), _defineProperty(_objectSpread23, "".concat(cellPrefixCls, "-end"), title === getLastDay(generateConfig2, currentDate) || picker === "year" && Number(title) % 10 === 9), _objectSpread23), getCellClassName(currentDate))),
          onClick: function onClick() {
            if (!disabled) {
              onSelect(currentDate);
            }
          },
          onMouseEnter: function onMouseEnter() {
            if (!disabled && onDateMouseEnter) {
              onDateMouseEnter(currentDate);
            }
          },
          onMouseLeave: function onMouseLeave() {
            if (!disabled && onDateMouseLeave) {
              onDateMouseLeave(currentDate);
            }
          }
        }, getCellNode ? getCellNode(currentDate) : /* @__PURE__ */ React170.createElement("div", {
          className: "".concat(cellPrefixCls, "-inner")
        }, getCellText(currentDate))));
      };
      for (var j2 = 0; j2 < colNum; j2 += 1) {
        _loop();
      }
      rows.push(/* @__PURE__ */ React170.createElement("tr", {
        key: i3,
        className: rowClassName && rowClassName(rowStartDate)
      }, row));
    }
    return /* @__PURE__ */ React170.createElement("div", {
      className: "".concat(prefixCls, "-body")
    }, /* @__PURE__ */ React170.createElement("table", {
      className: "".concat(prefixCls, "-content")
    }, headerCells && /* @__PURE__ */ React170.createElement("thead", null, /* @__PURE__ */ React170.createElement("tr", null, headerCells)), /* @__PURE__ */ React170.createElement("tbody", null, rows)));
  }

  // node_modules/rc-picker/es/panels/DecadePanel/DecadeBody.js
  var DECADE_COL_COUNT = 3;
  var DECADE_ROW_COUNT = 4;
  function DecadeBody(props) {
    var DECADE_UNIT_DIFF_DES = DECADE_UNIT_DIFF - 1;
    var prefixCls = props.prefixCls, viewDate = props.viewDate, generateConfig2 = props.generateConfig;
    var cellPrefixCls = "".concat(prefixCls, "-cell");
    var yearNumber = generateConfig2.getYear(viewDate);
    var decadeYearNumber = Math.floor(yearNumber / DECADE_UNIT_DIFF) * DECADE_UNIT_DIFF;
    var startDecadeYear = Math.floor(yearNumber / DECADE_DISTANCE_COUNT) * DECADE_DISTANCE_COUNT;
    var endDecadeYear = startDecadeYear + DECADE_DISTANCE_COUNT - 1;
    var baseDecadeYear = generateConfig2.setYear(viewDate, startDecadeYear - Math.ceil((DECADE_COL_COUNT * DECADE_ROW_COUNT * DECADE_UNIT_DIFF - DECADE_DISTANCE_COUNT) / 2));
    var getCellClassName = function getCellClassName2(date4) {
      var _ref;
      var startDecadeNumber = generateConfig2.getYear(date4);
      var endDecadeNumber = startDecadeNumber + DECADE_UNIT_DIFF_DES;
      return _ref = {}, _defineProperty(_ref, "".concat(cellPrefixCls, "-in-view"), startDecadeYear <= startDecadeNumber && endDecadeNumber <= endDecadeYear), _defineProperty(_ref, "".concat(cellPrefixCls, "-selected"), startDecadeNumber === decadeYearNumber), _ref;
    };
    return /* @__PURE__ */ React171.createElement(PanelBody, _extends({}, props, {
      rowNum: DECADE_ROW_COUNT,
      colNum: DECADE_COL_COUNT,
      baseDate: baseDecadeYear,
      getCellText: function getCellText(date4) {
        var startDecadeNumber = generateConfig2.getYear(date4);
        return "".concat(startDecadeNumber, "-").concat(startDecadeNumber + DECADE_UNIT_DIFF_DES);
      },
      getCellClassName,
      getCellDate: function getCellDate(date4, offset4) {
        return generateConfig2.addYear(date4, offset4 * DECADE_UNIT_DIFF);
      }
    }));
  }
  var DecadeBody_default = DecadeBody;

  // node_modules/rc-picker/es/utils/uiUtil.js
  var scrollIds = /* @__PURE__ */ new Map();
  function waitElementReady(element, callback) {
    var id2;
    function tryOrNextFrame() {
      if (isVisible_default(element)) {
        callback();
      } else {
        id2 = raf_default(function() {
          tryOrNextFrame();
        });
      }
    }
    tryOrNextFrame();
    return function() {
      raf_default.cancel(id2);
    };
  }
  function scrollTo2(element, to, duration) {
    if (scrollIds.get(element)) {
      cancelAnimationFrame(scrollIds.get(element));
    }
    if (duration <= 0) {
      scrollIds.set(element, requestAnimationFrame(function() {
        element.scrollTop = to;
      }));
      return;
    }
    var difference = to - element.scrollTop;
    var perTick = difference / duration * 10;
    scrollIds.set(element, requestAnimationFrame(function() {
      element.scrollTop += perTick;
      if (element.scrollTop !== to) {
        scrollTo2(element, to, duration - 10);
      }
    }));
  }
  function createKeyDownHandler(event, _ref) {
    var onLeftRight = _ref.onLeftRight, onCtrlLeftRight = _ref.onCtrlLeftRight, onUpDown = _ref.onUpDown, onPageUpDown = _ref.onPageUpDown, onEnter = _ref.onEnter;
    var which = event.which, ctrlKey = event.ctrlKey, metaKey = event.metaKey;
    switch (which) {
      case KeyCode_default.LEFT:
        if (ctrlKey || metaKey) {
          if (onCtrlLeftRight) {
            onCtrlLeftRight(-1);
            return true;
          }
        } else if (onLeftRight) {
          onLeftRight(-1);
          return true;
        }
        break;
      case KeyCode_default.RIGHT:
        if (ctrlKey || metaKey) {
          if (onCtrlLeftRight) {
            onCtrlLeftRight(1);
            return true;
          }
        } else if (onLeftRight) {
          onLeftRight(1);
          return true;
        }
        break;
      case KeyCode_default.UP:
        if (onUpDown) {
          onUpDown(-1);
          return true;
        }
        break;
      case KeyCode_default.DOWN:
        if (onUpDown) {
          onUpDown(1);
          return true;
        }
        break;
      case KeyCode_default.PAGE_UP:
        if (onPageUpDown) {
          onPageUpDown(-1);
          return true;
        }
        break;
      case KeyCode_default.PAGE_DOWN:
        if (onPageUpDown) {
          onPageUpDown(1);
          return true;
        }
        break;
      case KeyCode_default.ENTER:
        if (onEnter) {
          onEnter();
          return true;
        }
        break;
    }
    return false;
  }
  function getDefaultFormat(format3, picker, showTime, use12Hours) {
    var mergedFormat = format3;
    if (!mergedFormat) {
      switch (picker) {
        case "time":
          mergedFormat = use12Hours ? "hh:mm:ss a" : "HH:mm:ss";
          break;
        case "week":
          mergedFormat = "gggg-wo";
          break;
        case "month":
          mergedFormat = "YYYY-MM";
          break;
        case "quarter":
          mergedFormat = "YYYY-[Q]Q";
          break;
        case "year":
          mergedFormat = "YYYY";
          break;
        default:
          mergedFormat = showTime ? "YYYY-MM-DD HH:mm:ss" : "YYYY-MM-DD";
      }
    }
    return mergedFormat;
  }
  function getInputSize(picker, format3, generateConfig2) {
    var defaultSize = picker === "time" ? 8 : 10;
    var length = typeof format3 === "function" ? format3(generateConfig2.getNow()).length : format3.length;
    return Math.max(defaultSize, length) + 2;
  }
  var globalClickFunc = null;
  var clickCallbacks = /* @__PURE__ */ new Set();
  function addGlobalMouseDownEvent(callback) {
    if (!globalClickFunc && typeof window !== "undefined" && window.addEventListener) {
      globalClickFunc = function globalClickFunc2(e3) {
        _toConsumableArray(clickCallbacks).forEach(function(queueFunc) {
          queueFunc(e3);
        });
      };
      window.addEventListener("mousedown", globalClickFunc);
    }
    clickCallbacks.add(callback);
    return function() {
      clickCallbacks.delete(callback);
      if (clickCallbacks.size === 0) {
        window.removeEventListener("mousedown", globalClickFunc);
        globalClickFunc = null;
      }
    };
  }
  function getTargetFromEvent(e3) {
    var target = e3.target;
    if (e3.composed && target.shadowRoot) {
      var _e$composedPath;
      return ((_e$composedPath = e3.composedPath) === null || _e$composedPath === void 0 ? void 0 : _e$composedPath.call(e3)[0]) || target;
    }
    return target;
  }
  var getYearNextMode = function getYearNextMode2(next) {
    if (next === "month" || next === "date") {
      return "year";
    }
    return next;
  };
  var getMonthNextMode = function getMonthNextMode2(next) {
    if (next === "date") {
      return "month";
    }
    return next;
  };
  var getQuarterNextMode = function getQuarterNextMode2(next) {
    if (next === "month" || next === "date") {
      return "quarter";
    }
    return next;
  };
  var getWeekNextMode = function getWeekNextMode2(next) {
    if (next === "date") {
      return "week";
    }
    return next;
  };
  var PickerModeMap = {
    year: getYearNextMode,
    month: getMonthNextMode,
    quarter: getQuarterNextMode,
    week: getWeekNextMode,
    time: null,
    date: null
  };
  function elementsContains(elements, target) {
    return elements.some(function(ele) {
      return ele && ele.contains(target);
    });
  }

  // node_modules/rc-picker/es/panels/DecadePanel/index.js
  var DECADE_UNIT_DIFF = 10;
  var DECADE_DISTANCE_COUNT = DECADE_UNIT_DIFF * 10;
  function DecadePanel(props) {
    var prefixCls = props.prefixCls, onViewDateChange = props.onViewDateChange, generateConfig2 = props.generateConfig, viewDate = props.viewDate, operationRef = props.operationRef, onSelect = props.onSelect, onPanelChange = props.onPanelChange;
    var panelPrefixCls = "".concat(prefixCls, "-decade-panel");
    operationRef.current = {
      onKeyDown: function onKeyDown3(event) {
        return createKeyDownHandler(event, {
          onLeftRight: function onLeftRight(diff) {
            onSelect(generateConfig2.addYear(viewDate, diff * DECADE_UNIT_DIFF), "key");
          },
          onCtrlLeftRight: function onCtrlLeftRight(diff) {
            onSelect(generateConfig2.addYear(viewDate, diff * DECADE_DISTANCE_COUNT), "key");
          },
          onUpDown: function onUpDown(diff) {
            onSelect(generateConfig2.addYear(viewDate, diff * DECADE_UNIT_DIFF * DECADE_COL_COUNT), "key");
          },
          onEnter: function onEnter() {
            onPanelChange("year", viewDate);
          }
        });
      }
    };
    var onDecadesChange = function onDecadesChange2(diff) {
      var newDate = generateConfig2.addYear(viewDate, diff * DECADE_DISTANCE_COUNT);
      onViewDateChange(newDate);
      onPanelChange(null, newDate);
    };
    var onInternalSelect = function onInternalSelect2(date4) {
      onSelect(date4, "mouse");
      onPanelChange("year", date4);
    };
    return /* @__PURE__ */ React172.createElement("div", {
      className: panelPrefixCls
    }, /* @__PURE__ */ React172.createElement(DecadeHeader_default, _extends({}, props, {
      prefixCls,
      onPrevDecades: function onPrevDecades() {
        onDecadesChange(-1);
      },
      onNextDecades: function onNextDecades() {
        onDecadesChange(1);
      }
    })), /* @__PURE__ */ React172.createElement(DecadeBody_default, _extends({}, props, {
      prefixCls,
      onSelect: onInternalSelect
    })));
  }
  var DecadePanel_default = DecadePanel;

  // node_modules/rc-picker/es/utils/dateUtil.js
  var WEEK_DAY_COUNT = 7;
  function isNullEqual(value1, value2) {
    if (!value1 && !value2) {
      return true;
    }
    if (!value1 || !value2) {
      return false;
    }
    return void 0;
  }
  function isSameDecade(generateConfig2, decade1, decade2) {
    var equal = isNullEqual(decade1, decade2);
    if (typeof equal === "boolean") {
      return equal;
    }
    var num1 = Math.floor(generateConfig2.getYear(decade1) / 10);
    var num2 = Math.floor(generateConfig2.getYear(decade2) / 10);
    return num1 === num2;
  }
  function isSameYear(generateConfig2, year1, year2) {
    var equal = isNullEqual(year1, year2);
    if (typeof equal === "boolean") {
      return equal;
    }
    return generateConfig2.getYear(year1) === generateConfig2.getYear(year2);
  }
  function getQuarter(generateConfig2, date4) {
    var quota = Math.floor(generateConfig2.getMonth(date4) / 3);
    return quota + 1;
  }
  function isSameQuarter(generateConfig2, quarter1, quarter2) {
    var equal = isNullEqual(quarter1, quarter2);
    if (typeof equal === "boolean") {
      return equal;
    }
    return isSameYear(generateConfig2, quarter1, quarter2) && getQuarter(generateConfig2, quarter1) === getQuarter(generateConfig2, quarter2);
  }
  function isSameMonth(generateConfig2, month1, month2) {
    var equal = isNullEqual(month1, month2);
    if (typeof equal === "boolean") {
      return equal;
    }
    return isSameYear(generateConfig2, month1, month2) && generateConfig2.getMonth(month1) === generateConfig2.getMonth(month2);
  }
  function isSameDate(generateConfig2, date1, date22) {
    var equal = isNullEqual(date1, date22);
    if (typeof equal === "boolean") {
      return equal;
    }
    return generateConfig2.getYear(date1) === generateConfig2.getYear(date22) && generateConfig2.getMonth(date1) === generateConfig2.getMonth(date22) && generateConfig2.getDate(date1) === generateConfig2.getDate(date22);
  }
  function isSameTime(generateConfig2, time1, time2) {
    var equal = isNullEqual(time1, time2);
    if (typeof equal === "boolean") {
      return equal;
    }
    return generateConfig2.getHour(time1) === generateConfig2.getHour(time2) && generateConfig2.getMinute(time1) === generateConfig2.getMinute(time2) && generateConfig2.getSecond(time1) === generateConfig2.getSecond(time2);
  }
  function isSameWeek(generateConfig2, locale4, date1, date22) {
    var equal = isNullEqual(date1, date22);
    if (typeof equal === "boolean") {
      return equal;
    }
    return isSameYear(generateConfig2, date1, date22) && generateConfig2.locale.getWeek(locale4, date1) === generateConfig2.locale.getWeek(locale4, date22);
  }
  function isEqual2(generateConfig2, value1, value2) {
    return isSameDate(generateConfig2, value1, value2) && isSameTime(generateConfig2, value1, value2);
  }
  function isInRange(generateConfig2, startDate, endDate, current) {
    if (!startDate || !endDate || !current) {
      return false;
    }
    return !isSameDate(generateConfig2, startDate, current) && !isSameDate(generateConfig2, endDate, current) && generateConfig2.isAfter(current, startDate) && generateConfig2.isAfter(endDate, current);
  }
  function getWeekStartDate(locale4, generateConfig2, value) {
    var weekFirstDay = generateConfig2.locale.getWeekFirstDay(locale4);
    var monthStartDate = generateConfig2.setDate(value, 1);
    var startDateWeekDay = generateConfig2.getWeekDay(monthStartDate);
    var alignStartDate = generateConfig2.addDate(monthStartDate, weekFirstDay - startDateWeekDay);
    if (generateConfig2.getMonth(alignStartDate) === generateConfig2.getMonth(value) && generateConfig2.getDate(alignStartDate) > 1) {
      alignStartDate = generateConfig2.addDate(alignStartDate, -7);
    }
    return alignStartDate;
  }
  function getClosingViewDate(viewDate, picker, generateConfig2) {
    var offset4 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 1;
    switch (picker) {
      case "year":
        return generateConfig2.addYear(viewDate, offset4 * 10);
      case "quarter":
      case "month":
        return generateConfig2.addYear(viewDate, offset4);
      default:
        return generateConfig2.addMonth(viewDate, offset4);
    }
  }
  function formatValue(value, _ref) {
    var generateConfig2 = _ref.generateConfig, locale4 = _ref.locale, format3 = _ref.format;
    return typeof format3 === "function" ? format3(value) : generateConfig2.locale.format(locale4.locale, value, format3);
  }
  function parseValue(value, _ref2) {
    var generateConfig2 = _ref2.generateConfig, locale4 = _ref2.locale, formatList = _ref2.formatList;
    if (!value || typeof formatList[0] === "function") {
      return null;
    }
    return generateConfig2.locale.parse(locale4.locale, value, formatList);
  }
  function getCellDateDisabled(_ref3) {
    var cellDate = _ref3.cellDate, mode = _ref3.mode, disabledDate = _ref3.disabledDate, generateConfig2 = _ref3.generateConfig;
    if (!disabledDate)
      return false;
    var getDisabledFromRange = function getDisabledFromRange2(currentMode, start, end) {
      var current = start;
      while (current <= end) {
        var date4 = void 0;
        switch (currentMode) {
          case "date": {
            date4 = generateConfig2.setDate(cellDate, current);
            if (!disabledDate(date4)) {
              return false;
            }
            break;
          }
          case "month": {
            date4 = generateConfig2.setMonth(cellDate, current);
            if (!getCellDateDisabled({
              cellDate: date4,
              mode: "month",
              generateConfig: generateConfig2,
              disabledDate
            })) {
              return false;
            }
            break;
          }
          case "year": {
            date4 = generateConfig2.setYear(cellDate, current);
            if (!getCellDateDisabled({
              cellDate: date4,
              mode: "year",
              generateConfig: generateConfig2,
              disabledDate
            })) {
              return false;
            }
            break;
          }
        }
        current += 1;
      }
      return true;
    };
    switch (mode) {
      case "date":
      case "week": {
        return disabledDate(cellDate);
      }
      case "month": {
        var startDate = 1;
        var endDate = generateConfig2.getDate(generateConfig2.getEndDate(cellDate));
        return getDisabledFromRange("date", startDate, endDate);
      }
      case "quarter": {
        var startMonth = Math.floor(generateConfig2.getMonth(cellDate) / 3) * 3;
        var endMonth = startMonth + 2;
        return getDisabledFromRange("month", startMonth, endMonth);
      }
      case "year": {
        return getDisabledFromRange("month", 0, 11);
      }
      case "decade": {
        var year = generateConfig2.getYear(cellDate);
        var startYear = Math.floor(year / DECADE_UNIT_DIFF) * DECADE_UNIT_DIFF;
        var endYear = startYear + DECADE_UNIT_DIFF - 1;
        return getDisabledFromRange("year", startYear, endYear);
      }
    }
  }

  // node_modules/rc-picker/es/panels/TimePanel/TimeHeader.js
  function TimeHeader(props) {
    var _React$useContext = React173.useContext(PanelContext_default), hideHeader = _React$useContext.hideHeader;
    if (hideHeader) {
      return null;
    }
    var prefixCls = props.prefixCls, generateConfig2 = props.generateConfig, locale4 = props.locale, value = props.value, format3 = props.format;
    var headerPrefixCls = "".concat(prefixCls, "-header");
    return /* @__PURE__ */ React173.createElement(Header_default, {
      prefixCls: headerPrefixCls
    }, value ? formatValue(value, {
      locale: locale4,
      format: format3,
      generateConfig: generateConfig2
    }) : "\xA0");
  }
  var TimeHeader_default = TimeHeader;

  // node_modules/rc-picker/es/panels/TimePanel/TimeBody.js
  var React175 = __toESM(require_react());

  // node_modules/rc-picker/es/hooks/useTimeSelection.js
  function useTimeSelection(_ref) {
    var value = _ref.value, generateConfig2 = _ref.generateConfig, disabledMinutes = _ref.disabledMinutes, disabledSeconds = _ref.disabledSeconds, minutes = _ref.minutes, seconds = _ref.seconds, use12Hours = _ref.use12Hours;
    var setTime2 = function setTime3(isNewPM, newHour, newMinute, newSecond) {
      var newDate = value || generateConfig2.getNow();
      var mergedHour = Math.max(0, newHour);
      var mergedMinute = Math.max(0, newMinute);
      var mergedSecond = Math.max(0, newSecond);
      var newDisabledMinutes = disabledMinutes && disabledMinutes(mergedHour);
      if (newDisabledMinutes === null || newDisabledMinutes === void 0 ? void 0 : newDisabledMinutes.includes(mergedMinute)) {
        var availableMinute = minutes.find(function(i3) {
          return !newDisabledMinutes.includes(i3.value);
        });
        if (availableMinute) {
          mergedMinute = availableMinute.value;
        } else {
          return null;
        }
      }
      var newDisabledSeconds = disabledSeconds && disabledSeconds(mergedHour, mergedMinute);
      if (newDisabledSeconds === null || newDisabledSeconds === void 0 ? void 0 : newDisabledSeconds.includes(mergedSecond)) {
        var availableSecond = seconds.find(function(i3) {
          return !newDisabledSeconds.includes(i3.value);
        });
        if (availableSecond) {
          mergedSecond = availableSecond.value;
        } else {
          return null;
        }
      }
      newDate = setTime(generateConfig2, newDate, !use12Hours || !isNewPM ? mergedHour : mergedHour + 12, mergedMinute, mergedSecond);
      return newDate;
    };
    return setTime2;
  }

  // node_modules/rc-picker/es/utils/miscUtil.js
  function leftPad(str, length) {
    var fill = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "0";
    var current = String(str);
    while (current.length < length) {
      current = "".concat(fill).concat(str);
    }
    return current;
  }
  var tuple3 = function tuple4() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return args;
  };
  function toArray4(val) {
    if (val === null || val === void 0) {
      return [];
    }
    return Array.isArray(val) ? val : [val];
  }
  function getDataOrAriaProps2(props) {
    var retProps = {};
    Object.keys(props).forEach(function(key2) {
      if ((key2.substr(0, 5) === "data-" || key2.substr(0, 5) === "aria-" || key2 === "role" || key2 === "name") && key2.substr(0, 7) !== "data-__") {
        retProps[key2] = props[key2];
      }
    });
    return retProps;
  }
  function getValue3(values, index2) {
    return values ? values[index2] : null;
  }
  function updateValues(values, value, index2) {
    var newValues = [getValue3(values, 0), getValue3(values, 1)];
    newValues[index2] = typeof value === "function" ? value(newValues[index2]) : value;
    if (!newValues[0] && !newValues[1]) {
      return null;
    }
    return newValues;
  }

  // node_modules/rc-picker/es/panels/TimePanel/TimeUnitColumn.js
  var React174 = __toESM(require_react());
  var import_react49 = __toESM(require_react());
  var import_classnames52 = __toESM(require_classnames());
  function TimeUnitColumn(props) {
    var prefixCls = props.prefixCls, units = props.units, onSelect = props.onSelect, value = props.value, active = props.active, hideDisabledOptions = props.hideDisabledOptions;
    var cellPrefixCls = "".concat(prefixCls, "-cell");
    var _React$useContext = React174.useContext(PanelContext_default), open = _React$useContext.open;
    var ulRef = (0, import_react49.useRef)(null);
    var liRefs = (0, import_react49.useRef)(/* @__PURE__ */ new Map());
    var scrollRef = (0, import_react49.useRef)();
    (0, import_react49.useLayoutEffect)(function() {
      var li = liRefs.current.get(value);
      if (li && open !== false) {
        scrollTo2(ulRef.current, li.offsetTop, 120);
      }
    }, [value]);
    (0, import_react49.useLayoutEffect)(function() {
      if (open) {
        var li = liRefs.current.get(value);
        if (li) {
          scrollRef.current = waitElementReady(li, function() {
            scrollTo2(ulRef.current, li.offsetTop, 0);
          });
        }
      }
      return function() {
        var _scrollRef$current;
        (_scrollRef$current = scrollRef.current) === null || _scrollRef$current === void 0 ? void 0 : _scrollRef$current.call(scrollRef);
      };
    }, [open]);
    return /* @__PURE__ */ React174.createElement("ul", {
      className: (0, import_classnames52.default)("".concat(prefixCls, "-column"), _defineProperty({}, "".concat(prefixCls, "-column-active"), active)),
      ref: ulRef,
      style: {
        position: "relative"
      }
    }, units.map(function(unit) {
      var _classNames2;
      if (hideDisabledOptions && unit.disabled) {
        return null;
      }
      return /* @__PURE__ */ React174.createElement("li", {
        key: unit.value,
        ref: function ref(element) {
          liRefs.current.set(unit.value, element);
        },
        className: (0, import_classnames52.default)(cellPrefixCls, (_classNames2 = {}, _defineProperty(_classNames2, "".concat(cellPrefixCls, "-disabled"), unit.disabled), _defineProperty(_classNames2, "".concat(cellPrefixCls, "-selected"), value === unit.value), _classNames2)),
        onClick: function onClick() {
          if (unit.disabled) {
            return;
          }
          onSelect(unit.value);
        }
      }, /* @__PURE__ */ React174.createElement("div", {
        className: "".concat(cellPrefixCls, "-inner")
      }, unit.label));
    }));
  }
  var TimeUnitColumn_default = TimeUnitColumn;

  // node_modules/rc-picker/es/panels/TimePanel/TimeBody.js
  function shouldUnitsUpdate(prevUnits, nextUnits) {
    if (prevUnits.length !== nextUnits.length)
      return true;
    for (var i3 = 0; i3 < prevUnits.length; i3 += 1) {
      if (prevUnits[i3].disabled !== nextUnits[i3].disabled)
        return true;
    }
    return false;
  }
  function generateUnits(start, end, step, disabledUnits) {
    var units = [];
    var integerStep = step >= 1 ? step | 0 : 1;
    for (var i3 = start; i3 <= end; i3 += integerStep) {
      units.push({
        label: leftPad(i3, 2),
        value: i3,
        disabled: (disabledUnits || []).includes(i3)
      });
    }
    return units;
  }
  function TimeBody(props) {
    var generateConfig2 = props.generateConfig, prefixCls = props.prefixCls, operationRef = props.operationRef, activeColumnIndex = props.activeColumnIndex, value = props.value, showHour = props.showHour, showMinute = props.showMinute, showSecond = props.showSecond, use12Hours = props.use12Hours, _props$hourStep = props.hourStep, hourStep = _props$hourStep === void 0 ? 1 : _props$hourStep, _props$minuteStep = props.minuteStep, minuteStep = _props$minuteStep === void 0 ? 1 : _props$minuteStep, _props$secondStep = props.secondStep, secondStep = _props$secondStep === void 0 ? 1 : _props$secondStep, disabledHours = props.disabledHours, disabledMinutes = props.disabledMinutes, disabledSeconds = props.disabledSeconds, disabledTime = props.disabledTime, hideDisabledOptions = props.hideDisabledOptions, onSelect = props.onSelect;
    var columns4 = [];
    var contentPrefixCls = "".concat(prefixCls, "-content");
    var columnPrefixCls = "".concat(prefixCls, "-time-panel");
    var isPM;
    var originHour = value ? generateConfig2.getHour(value) : -1;
    var hour = originHour;
    var minute = value ? generateConfig2.getMinute(value) : -1;
    var second = value ? generateConfig2.getSecond(value) : -1;
    var now2 = generateConfig2.getNow();
    var _React$useMemo = React175.useMemo(function() {
      if (disabledTime) {
        var disabledConfig = disabledTime(now2);
        return [disabledConfig.disabledHours, disabledConfig.disabledMinutes, disabledConfig.disabledSeconds];
      }
      return [disabledHours, disabledMinutes, disabledSeconds];
    }, [disabledHours, disabledMinutes, disabledSeconds, disabledTime, now2]), _React$useMemo2 = _slicedToArray(_React$useMemo, 3), mergedDisabledHours = _React$useMemo2[0], mergedDisabledMinutes = _React$useMemo2[1], mergedDisabledSeconds = _React$useMemo2[2];
    var rawHours = generateUnits(0, 23, hourStep, mergedDisabledHours && mergedDisabledHours());
    var memorizedRawHours = useMemo6(function() {
      return rawHours;
    }, rawHours, shouldUnitsUpdate);
    if (use12Hours) {
      isPM = hour >= 12;
      hour %= 12;
    }
    var _React$useMemo3 = React175.useMemo(function() {
      if (!use12Hours) {
        return [false, false];
      }
      var AMPMDisabled = [true, true];
      memorizedRawHours.forEach(function(_ref) {
        var disabled = _ref.disabled, hourValue = _ref.value;
        if (disabled)
          return;
        if (hourValue >= 12) {
          AMPMDisabled[1] = false;
        } else {
          AMPMDisabled[0] = false;
        }
      });
      return AMPMDisabled;
    }, [use12Hours, memorizedRawHours]), _React$useMemo4 = _slicedToArray(_React$useMemo3, 2), AMDisabled = _React$useMemo4[0], PMDisabled = _React$useMemo4[1];
    var hours = React175.useMemo(function() {
      if (!use12Hours)
        return memorizedRawHours;
      return memorizedRawHours.filter(isPM ? function(hourMeta) {
        return hourMeta.value >= 12;
      } : function(hourMeta) {
        return hourMeta.value < 12;
      }).map(function(hourMeta) {
        var hourValue = hourMeta.value % 12;
        var hourLabel = hourValue === 0 ? "12" : leftPad(hourValue, 2);
        return _objectSpread2(_objectSpread2({}, hourMeta), {}, {
          label: hourLabel,
          value: hourValue
        });
      });
    }, [use12Hours, isPM, memorizedRawHours]);
    var minutes = generateUnits(0, 59, minuteStep, mergedDisabledMinutes && mergedDisabledMinutes(originHour));
    var seconds = generateUnits(0, 59, secondStep, mergedDisabledSeconds && mergedDisabledSeconds(originHour, minute));
    var setTime2 = useTimeSelection({
      value,
      generateConfig: generateConfig2,
      disabledMinutes: mergedDisabledMinutes,
      disabledSeconds: mergedDisabledSeconds,
      minutes,
      seconds,
      use12Hours
    });
    operationRef.current = {
      onUpDown: function onUpDown(diff) {
        var column = columns4[activeColumnIndex];
        if (column) {
          var valueIndex = column.units.findIndex(function(unit) {
            return unit.value === column.value;
          });
          var unitLen = column.units.length;
          for (var i3 = 1; i3 < unitLen; i3 += 1) {
            var nextUnit = column.units[(valueIndex + diff * i3 + unitLen) % unitLen];
            if (nextUnit.disabled !== true) {
              column.onSelect(nextUnit.value);
              break;
            }
          }
        }
      }
    };
    function addColumnNode(condition, node, columnValue, units, onColumnSelect) {
      if (condition !== false) {
        columns4.push({
          node: /* @__PURE__ */ React175.cloneElement(node, {
            prefixCls: columnPrefixCls,
            value: columnValue,
            active: activeColumnIndex === columns4.length,
            onSelect: onColumnSelect,
            units,
            hideDisabledOptions
          }),
          onSelect: onColumnSelect,
          value: columnValue,
          units
        });
      }
    }
    addColumnNode(showHour, /* @__PURE__ */ React175.createElement(TimeUnitColumn_default, {
      key: "hour"
    }), hour, hours, function(num) {
      onSelect(setTime2(isPM, num, minute, second), "mouse");
    });
    addColumnNode(showMinute, /* @__PURE__ */ React175.createElement(TimeUnitColumn_default, {
      key: "minute"
    }), minute, minutes, function(num) {
      onSelect(setTime2(isPM, hour, num, second), "mouse");
    });
    addColumnNode(showSecond, /* @__PURE__ */ React175.createElement(TimeUnitColumn_default, {
      key: "second"
    }), second, seconds, function(num) {
      onSelect(setTime2(isPM, hour, minute, num), "mouse");
    });
    var PMIndex = -1;
    if (typeof isPM === "boolean") {
      PMIndex = isPM ? 1 : 0;
    }
    addColumnNode(use12Hours === true, /* @__PURE__ */ React175.createElement(TimeUnitColumn_default, {
      key: "12hours"
    }), PMIndex, [{
      label: "AM",
      value: 0,
      disabled: AMDisabled
    }, {
      label: "PM",
      value: 1,
      disabled: PMDisabled
    }], function(num) {
      onSelect(setTime2(!!num, hour, minute, second), "mouse");
    });
    return /* @__PURE__ */ React175.createElement("div", {
      className: contentPrefixCls
    }, columns4.map(function(_ref2) {
      var node = _ref2.node;
      return node;
    }));
  }
  var TimeBody_default = TimeBody;

  // node_modules/rc-picker/es/panels/TimePanel/index.js
  var countBoolean = function countBoolean2(boolList) {
    return boolList.filter(function(bool) {
      return bool !== false;
    }).length;
  };
  function TimePanel(props) {
    var generateConfig2 = props.generateConfig, _props$format = props.format, format3 = _props$format === void 0 ? "HH:mm:ss" : _props$format, prefixCls = props.prefixCls, active = props.active, operationRef = props.operationRef, showHour = props.showHour, showMinute = props.showMinute, showSecond = props.showSecond, _props$use12Hours = props.use12Hours, use12Hours = _props$use12Hours === void 0 ? false : _props$use12Hours, onSelect = props.onSelect, value = props.value;
    var panelPrefixCls = "".concat(prefixCls, "-time-panel");
    var bodyOperationRef = React176.useRef();
    var _React$useState = React176.useState(-1), _React$useState2 = _slicedToArray(_React$useState, 2), activeColumnIndex = _React$useState2[0], setActiveColumnIndex = _React$useState2[1];
    var columnsCount = countBoolean([showHour, showMinute, showSecond, use12Hours]);
    operationRef.current = {
      onKeyDown: function onKeyDown3(event) {
        return createKeyDownHandler(event, {
          onLeftRight: function onLeftRight(diff) {
            setActiveColumnIndex((activeColumnIndex + diff + columnsCount) % columnsCount);
          },
          onUpDown: function onUpDown(diff) {
            if (activeColumnIndex === -1) {
              setActiveColumnIndex(0);
            } else if (bodyOperationRef.current) {
              bodyOperationRef.current.onUpDown(diff);
            }
          },
          onEnter: function onEnter() {
            onSelect(value || generateConfig2.getNow(), "key");
            setActiveColumnIndex(-1);
          }
        });
      },
      onBlur: function onBlur() {
        setActiveColumnIndex(-1);
      }
    };
    return /* @__PURE__ */ React176.createElement("div", {
      className: (0, import_classnames53.default)(panelPrefixCls, _defineProperty({}, "".concat(panelPrefixCls, "-active"), active))
    }, /* @__PURE__ */ React176.createElement(TimeHeader_default, _extends({}, props, {
      format: format3,
      prefixCls
    })), /* @__PURE__ */ React176.createElement(TimeBody_default, _extends({}, props, {
      prefixCls,
      activeColumnIndex,
      operationRef: bodyOperationRef
    })));
  }
  var TimePanel_default = TimePanel;

  // node_modules/rc-picker/es/panels/DatetimePanel/index.js
  var React181 = __toESM(require_react());
  var import_classnames55 = __toESM(require_classnames());

  // node_modules/rc-picker/es/panels/DatePanel/index.js
  var React180 = __toESM(require_react());
  var import_classnames54 = __toESM(require_classnames());

  // node_modules/rc-picker/es/panels/DatePanel/DateBody.js
  var React178 = __toESM(require_react());

  // node_modules/rc-picker/es/RangeContext.js
  var React177 = __toESM(require_react());
  var RangeContext = /* @__PURE__ */ React177.createContext({});
  var RangeContext_default = RangeContext;

  // node_modules/rc-picker/es/hooks/useCellClassName.js
  function useCellClassName(_ref) {
    var cellPrefixCls = _ref.cellPrefixCls, generateConfig2 = _ref.generateConfig, rangedValue = _ref.rangedValue, hoverRangedValue = _ref.hoverRangedValue, isInView = _ref.isInView, isSameCell = _ref.isSameCell, offsetCell = _ref.offsetCell, today = _ref.today, value = _ref.value;
    function getClassName(currentDate) {
      var _ref2;
      var prevDate = offsetCell(currentDate, -1);
      var nextDate = offsetCell(currentDate, 1);
      var rangeStart = getValue3(rangedValue, 0);
      var rangeEnd = getValue3(rangedValue, 1);
      var hoverStart = getValue3(hoverRangedValue, 0);
      var hoverEnd = getValue3(hoverRangedValue, 1);
      var isRangeHovered = isInRange(generateConfig2, hoverStart, hoverEnd, currentDate);
      function isRangeStart(date4) {
        return isSameCell(rangeStart, date4);
      }
      function isRangeEnd(date4) {
        return isSameCell(rangeEnd, date4);
      }
      var isHoverStart = isSameCell(hoverStart, currentDate);
      var isHoverEnd = isSameCell(hoverEnd, currentDate);
      var isHoverEdgeStart = (isRangeHovered || isHoverEnd) && (!isInView(prevDate) || isRangeEnd(prevDate));
      var isHoverEdgeEnd = (isRangeHovered || isHoverStart) && (!isInView(nextDate) || isRangeStart(nextDate));
      return _ref2 = {}, _defineProperty(_ref2, "".concat(cellPrefixCls, "-in-view"), isInView(currentDate)), _defineProperty(_ref2, "".concat(cellPrefixCls, "-in-range"), isInRange(generateConfig2, rangeStart, rangeEnd, currentDate)), _defineProperty(_ref2, "".concat(cellPrefixCls, "-range-start"), isRangeStart(currentDate)), _defineProperty(_ref2, "".concat(cellPrefixCls, "-range-end"), isRangeEnd(currentDate)), _defineProperty(_ref2, "".concat(cellPrefixCls, "-range-start-single"), isRangeStart(currentDate) && !rangeEnd), _defineProperty(_ref2, "".concat(cellPrefixCls, "-range-end-single"), isRangeEnd(currentDate) && !rangeStart), _defineProperty(_ref2, "".concat(cellPrefixCls, "-range-start-near-hover"), isRangeStart(currentDate) && (isSameCell(prevDate, hoverStart) || isInRange(generateConfig2, hoverStart, hoverEnd, prevDate))), _defineProperty(_ref2, "".concat(cellPrefixCls, "-range-end-near-hover"), isRangeEnd(currentDate) && (isSameCell(nextDate, hoverEnd) || isInRange(generateConfig2, hoverStart, hoverEnd, nextDate))), _defineProperty(_ref2, "".concat(cellPrefixCls, "-range-hover"), isRangeHovered), _defineProperty(_ref2, "".concat(cellPrefixCls, "-range-hover-start"), isHoverStart), _defineProperty(_ref2, "".concat(cellPrefixCls, "-range-hover-end"), isHoverEnd), _defineProperty(_ref2, "".concat(cellPrefixCls, "-range-hover-edge-start"), isHoverEdgeStart), _defineProperty(_ref2, "".concat(cellPrefixCls, "-range-hover-edge-end"), isHoverEdgeEnd), _defineProperty(_ref2, "".concat(cellPrefixCls, "-range-hover-edge-start-near-range"), isHoverEdgeStart && isSameCell(prevDate, rangeEnd)), _defineProperty(_ref2, "".concat(cellPrefixCls, "-range-hover-edge-end-near-range"), isHoverEdgeEnd && isSameCell(nextDate, rangeStart)), _defineProperty(_ref2, "".concat(cellPrefixCls, "-today"), isSameCell(today, currentDate)), _defineProperty(_ref2, "".concat(cellPrefixCls, "-selected"), isSameCell(value, currentDate)), _ref2;
    }
    return getClassName;
  }

  // node_modules/rc-picker/es/panels/DatePanel/DateBody.js
  function DateBody(props) {
    var prefixCls = props.prefixCls, generateConfig2 = props.generateConfig, prefixColumn = props.prefixColumn, locale4 = props.locale, rowCount = props.rowCount, viewDate = props.viewDate, value = props.value, dateRender = props.dateRender;
    var _React$useContext = React178.useContext(RangeContext_default), rangedValue = _React$useContext.rangedValue, hoverRangedValue = _React$useContext.hoverRangedValue;
    var baseDate = getWeekStartDate(locale4.locale, generateConfig2, viewDate);
    var cellPrefixCls = "".concat(prefixCls, "-cell");
    var weekFirstDay = generateConfig2.locale.getWeekFirstDay(locale4.locale);
    var today = generateConfig2.getNow();
    var headerCells = [];
    var weekDaysLocale = locale4.shortWeekDays || (generateConfig2.locale.getShortWeekDays ? generateConfig2.locale.getShortWeekDays(locale4.locale) : []);
    if (prefixColumn) {
      headerCells.push(/* @__PURE__ */ React178.createElement("th", {
        key: "empty",
        "aria-label": "empty cell"
      }));
    }
    for (var i3 = 0; i3 < WEEK_DAY_COUNT; i3 += 1) {
      headerCells.push(/* @__PURE__ */ React178.createElement("th", {
        key: i3
      }, weekDaysLocale[(i3 + weekFirstDay) % WEEK_DAY_COUNT]));
    }
    var getCellClassName = useCellClassName({
      cellPrefixCls,
      today,
      value,
      generateConfig: generateConfig2,
      rangedValue: prefixColumn ? null : rangedValue,
      hoverRangedValue: prefixColumn ? null : hoverRangedValue,
      isSameCell: function isSameCell(current, target) {
        return isSameDate(generateConfig2, current, target);
      },
      isInView: function isInView(date4) {
        return isSameMonth(generateConfig2, date4, viewDate);
      },
      offsetCell: function offsetCell(date4, offset4) {
        return generateConfig2.addDate(date4, offset4);
      }
    });
    var getCellNode = dateRender ? function(date4) {
      return dateRender(date4, today);
    } : void 0;
    return /* @__PURE__ */ React178.createElement(PanelBody, _extends({}, props, {
      rowNum: rowCount,
      colNum: WEEK_DAY_COUNT,
      baseDate,
      getCellNode,
      getCellText: generateConfig2.getDate,
      getCellClassName,
      getCellDate: generateConfig2.addDate,
      titleCell: function titleCell(date4) {
        return formatValue(date4, {
          locale: locale4,
          format: "YYYY-MM-DD",
          generateConfig: generateConfig2
        });
      },
      headerCells
    }));
  }
  var DateBody_default = DateBody;

  // node_modules/rc-picker/es/panels/DatePanel/DateHeader.js
  var React179 = __toESM(require_react());
  function DateHeader(props) {
    var prefixCls = props.prefixCls, generateConfig2 = props.generateConfig, locale4 = props.locale, viewDate = props.viewDate, onNextMonth = props.onNextMonth, onPrevMonth = props.onPrevMonth, onNextYear = props.onNextYear, onPrevYear = props.onPrevYear, onYearClick = props.onYearClick, onMonthClick = props.onMonthClick;
    var _React$useContext = React179.useContext(PanelContext_default), hideHeader = _React$useContext.hideHeader;
    if (hideHeader) {
      return null;
    }
    var headerPrefixCls = "".concat(prefixCls, "-header");
    var monthsLocale = locale4.shortMonths || (generateConfig2.locale.getShortMonths ? generateConfig2.locale.getShortMonths(locale4.locale) : []);
    var month = generateConfig2.getMonth(viewDate);
    var yearNode = /* @__PURE__ */ React179.createElement("button", {
      type: "button",
      key: "year",
      onClick: onYearClick,
      tabIndex: -1,
      className: "".concat(prefixCls, "-year-btn")
    }, formatValue(viewDate, {
      locale: locale4,
      format: locale4.yearFormat,
      generateConfig: generateConfig2
    }));
    var monthNode = /* @__PURE__ */ React179.createElement("button", {
      type: "button",
      key: "month",
      onClick: onMonthClick,
      tabIndex: -1,
      className: "".concat(prefixCls, "-month-btn")
    }, locale4.monthFormat ? formatValue(viewDate, {
      locale: locale4,
      format: locale4.monthFormat,
      generateConfig: generateConfig2
    }) : monthsLocale[month]);
    var monthYearNodes = locale4.monthBeforeYear ? [monthNode, yearNode] : [yearNode, monthNode];
    return /* @__PURE__ */ React179.createElement(Header_default, _extends({}, props, {
      prefixCls: headerPrefixCls,
      onSuperPrev: onPrevYear,
      onPrev: onPrevMonth,
      onNext: onNextMonth,
      onSuperNext: onNextYear
    }), monthYearNodes);
  }
  var DateHeader_default = DateHeader;

  // node_modules/rc-picker/es/panels/DatePanel/index.js
  var DATE_ROW_COUNT = 6;
  function DatePanel(props) {
    var prefixCls = props.prefixCls, _props$panelName = props.panelName, panelName = _props$panelName === void 0 ? "date" : _props$panelName, keyboardConfig = props.keyboardConfig, active = props.active, operationRef = props.operationRef, generateConfig2 = props.generateConfig, value = props.value, viewDate = props.viewDate, onViewDateChange = props.onViewDateChange, onPanelChange = props.onPanelChange, _onSelect = props.onSelect;
    var panelPrefixCls = "".concat(prefixCls, "-").concat(panelName, "-panel");
    operationRef.current = {
      onKeyDown: function onKeyDown3(event) {
        return createKeyDownHandler(event, _objectSpread2({
          onLeftRight: function onLeftRight(diff) {
            _onSelect(generateConfig2.addDate(value || viewDate, diff), "key");
          },
          onCtrlLeftRight: function onCtrlLeftRight(diff) {
            _onSelect(generateConfig2.addYear(value || viewDate, diff), "key");
          },
          onUpDown: function onUpDown(diff) {
            _onSelect(generateConfig2.addDate(value || viewDate, diff * WEEK_DAY_COUNT), "key");
          },
          onPageUpDown: function onPageUpDown(diff) {
            _onSelect(generateConfig2.addMonth(value || viewDate, diff), "key");
          }
        }, keyboardConfig));
      }
    };
    var onYearChange = function onYearChange2(diff) {
      var newDate = generateConfig2.addYear(viewDate, diff);
      onViewDateChange(newDate);
      onPanelChange(null, newDate);
    };
    var onMonthChange = function onMonthChange2(diff) {
      var newDate = generateConfig2.addMonth(viewDate, diff);
      onViewDateChange(newDate);
      onPanelChange(null, newDate);
    };
    return /* @__PURE__ */ React180.createElement("div", {
      className: (0, import_classnames54.default)(panelPrefixCls, _defineProperty({}, "".concat(panelPrefixCls, "-active"), active))
    }, /* @__PURE__ */ React180.createElement(DateHeader_default, _extends({}, props, {
      prefixCls,
      value,
      viewDate,
      onPrevYear: function onPrevYear() {
        onYearChange(-1);
      },
      onNextYear: function onNextYear() {
        onYearChange(1);
      },
      onPrevMonth: function onPrevMonth() {
        onMonthChange(-1);
      },
      onNextMonth: function onNextMonth() {
        onMonthChange(1);
      },
      onMonthClick: function onMonthClick() {
        onPanelChange("month", viewDate);
      },
      onYearClick: function onYearClick() {
        onPanelChange("year", viewDate);
      }
    })), /* @__PURE__ */ React180.createElement(DateBody_default, _extends({}, props, {
      onSelect: function onSelect(date4) {
        return _onSelect(date4, "mouse");
      },
      prefixCls,
      value,
      viewDate,
      rowCount: DATE_ROW_COUNT
    })));
  }
  var DatePanel_default = DatePanel;

  // node_modules/rc-picker/es/panels/DatetimePanel/index.js
  var ACTIVE_PANEL = tuple3("date", "time");
  function DatetimePanel(props) {
    var prefixCls = props.prefixCls, operationRef = props.operationRef, generateConfig2 = props.generateConfig, value = props.value, defaultValue = props.defaultValue, disabledTime = props.disabledTime, showTime = props.showTime, onSelect = props.onSelect;
    var panelPrefixCls = "".concat(prefixCls, "-datetime-panel");
    var _React$useState = React181.useState(null), _React$useState2 = _slicedToArray(_React$useState, 2), activePanel = _React$useState2[0], setActivePanel = _React$useState2[1];
    var dateOperationRef = React181.useRef({});
    var timeOperationRef = React181.useRef({});
    var timeProps = _typeof(showTime) === "object" ? _objectSpread2({}, showTime) : {};
    function getNextActive(offset4) {
      var activeIndex = ACTIVE_PANEL.indexOf(activePanel) + offset4;
      var nextActivePanel = ACTIVE_PANEL[activeIndex] || null;
      return nextActivePanel;
    }
    var onBlur = function onBlur2(e3) {
      if (timeOperationRef.current.onBlur) {
        timeOperationRef.current.onBlur(e3);
      }
      setActivePanel(null);
    };
    operationRef.current = {
      onKeyDown: function onKeyDown3(event) {
        if (event.which === KeyCode_default.TAB) {
          var nextActivePanel = getNextActive(event.shiftKey ? -1 : 1);
          setActivePanel(nextActivePanel);
          if (nextActivePanel) {
            event.preventDefault();
          }
          return true;
        }
        if (activePanel) {
          var ref = activePanel === "date" ? dateOperationRef : timeOperationRef;
          if (ref.current && ref.current.onKeyDown) {
            ref.current.onKeyDown(event);
          }
          return true;
        }
        if ([KeyCode_default.LEFT, KeyCode_default.RIGHT, KeyCode_default.UP, KeyCode_default.DOWN].includes(event.which)) {
          setActivePanel("date");
          return true;
        }
        return false;
      },
      onBlur,
      onClose: onBlur
    };
    var onInternalSelect = function onInternalSelect2(date4, source) {
      var selectedDate = date4;
      if (source === "date" && !value && timeProps.defaultValue) {
        selectedDate = generateConfig2.setHour(selectedDate, generateConfig2.getHour(timeProps.defaultValue));
        selectedDate = generateConfig2.setMinute(selectedDate, generateConfig2.getMinute(timeProps.defaultValue));
        selectedDate = generateConfig2.setSecond(selectedDate, generateConfig2.getSecond(timeProps.defaultValue));
      } else if (source === "time" && !value && defaultValue) {
        selectedDate = generateConfig2.setYear(selectedDate, generateConfig2.getYear(defaultValue));
        selectedDate = generateConfig2.setMonth(selectedDate, generateConfig2.getMonth(defaultValue));
        selectedDate = generateConfig2.setDate(selectedDate, generateConfig2.getDate(defaultValue));
      }
      if (onSelect) {
        onSelect(selectedDate, "mouse");
      }
    };
    var disabledTimes = disabledTime ? disabledTime(value || null) : {};
    return /* @__PURE__ */ React181.createElement("div", {
      className: (0, import_classnames55.default)(panelPrefixCls, _defineProperty({}, "".concat(panelPrefixCls, "-active"), activePanel))
    }, /* @__PURE__ */ React181.createElement(DatePanel_default, _extends({}, props, {
      operationRef: dateOperationRef,
      active: activePanel === "date",
      onSelect: function onSelect2(date4) {
        onInternalSelect(setDateTime(generateConfig2, date4, !value && _typeof(showTime) === "object" ? showTime.defaultValue : null), "date");
      }
    })), /* @__PURE__ */ React181.createElement(TimePanel_default, _extends({}, props, {
      format: void 0
    }, timeProps, disabledTimes, {
      disabledTime: null,
      defaultValue: void 0,
      operationRef: timeOperationRef,
      active: activePanel === "time",
      onSelect: function onSelect2(date4) {
        onInternalSelect(date4, "time");
      }
    })));
  }
  var DatetimePanel_default = DatetimePanel;

  // node_modules/rc-picker/es/panels/WeekPanel/index.js
  var React182 = __toESM(require_react());
  var import_classnames56 = __toESM(require_classnames());
  function WeekPanel(props) {
    var prefixCls = props.prefixCls, generateConfig2 = props.generateConfig, locale4 = props.locale, value = props.value;
    var cellPrefixCls = "".concat(prefixCls, "-cell");
    var prefixColumn = function prefixColumn2(date4) {
      return /* @__PURE__ */ React182.createElement("td", {
        key: "week",
        className: (0, import_classnames56.default)(cellPrefixCls, "".concat(cellPrefixCls, "-week"))
      }, generateConfig2.locale.getWeek(locale4.locale, date4));
    };
    var rowPrefixCls = "".concat(prefixCls, "-week-panel-row");
    var rowClassName = function rowClassName2(date4) {
      return (0, import_classnames56.default)(rowPrefixCls, _defineProperty({}, "".concat(rowPrefixCls, "-selected"), isSameWeek(generateConfig2, locale4.locale, value, date4)));
    };
    return /* @__PURE__ */ React182.createElement(DatePanel_default, _extends({}, props, {
      panelName: "week",
      prefixColumn,
      rowClassName,
      keyboardConfig: {
        onLeftRight: null
      }
    }));
  }
  var WeekPanel_default = WeekPanel;

  // node_modules/rc-picker/es/panels/MonthPanel/index.js
  var React185 = __toESM(require_react());

  // node_modules/rc-picker/es/panels/MonthPanel/MonthHeader.js
  var React183 = __toESM(require_react());
  function MonthHeader(props) {
    var prefixCls = props.prefixCls, generateConfig2 = props.generateConfig, locale4 = props.locale, viewDate = props.viewDate, onNextYear = props.onNextYear, onPrevYear = props.onPrevYear, onYearClick = props.onYearClick;
    var _React$useContext = React183.useContext(PanelContext_default), hideHeader = _React$useContext.hideHeader;
    if (hideHeader) {
      return null;
    }
    var headerPrefixCls = "".concat(prefixCls, "-header");
    return /* @__PURE__ */ React183.createElement(Header_default, _extends({}, props, {
      prefixCls: headerPrefixCls,
      onSuperPrev: onPrevYear,
      onSuperNext: onNextYear
    }), /* @__PURE__ */ React183.createElement("button", {
      type: "button",
      onClick: onYearClick,
      className: "".concat(prefixCls, "-year-btn")
    }, formatValue(viewDate, {
      locale: locale4,
      format: locale4.yearFormat,
      generateConfig: generateConfig2
    })));
  }
  var MonthHeader_default = MonthHeader;

  // node_modules/rc-picker/es/panels/MonthPanel/MonthBody.js
  var React184 = __toESM(require_react());
  var MONTH_COL_COUNT = 3;
  var MONTH_ROW_COUNT = 4;
  function MonthBody(props) {
    var prefixCls = props.prefixCls, locale4 = props.locale, value = props.value, viewDate = props.viewDate, generateConfig2 = props.generateConfig, monthCellRender = props.monthCellRender;
    var _React$useContext = React184.useContext(RangeContext_default), rangedValue = _React$useContext.rangedValue, hoverRangedValue = _React$useContext.hoverRangedValue;
    var cellPrefixCls = "".concat(prefixCls, "-cell");
    var getCellClassName = useCellClassName({
      cellPrefixCls,
      value,
      generateConfig: generateConfig2,
      rangedValue,
      hoverRangedValue,
      isSameCell: function isSameCell(current, target) {
        return isSameMonth(generateConfig2, current, target);
      },
      isInView: function isInView() {
        return true;
      },
      offsetCell: function offsetCell(date4, offset4) {
        return generateConfig2.addMonth(date4, offset4);
      }
    });
    var monthsLocale = locale4.shortMonths || (generateConfig2.locale.getShortMonths ? generateConfig2.locale.getShortMonths(locale4.locale) : []);
    var baseMonth = generateConfig2.setMonth(viewDate, 0);
    var getCellNode = monthCellRender ? function(date4) {
      return monthCellRender(date4, locale4);
    } : void 0;
    return /* @__PURE__ */ React184.createElement(PanelBody, _extends({}, props, {
      rowNum: MONTH_ROW_COUNT,
      colNum: MONTH_COL_COUNT,
      baseDate: baseMonth,
      getCellNode,
      getCellText: function getCellText(date4) {
        return locale4.monthFormat ? formatValue(date4, {
          locale: locale4,
          format: locale4.monthFormat,
          generateConfig: generateConfig2
        }) : monthsLocale[generateConfig2.getMonth(date4)];
      },
      getCellClassName,
      getCellDate: generateConfig2.addMonth,
      titleCell: function titleCell(date4) {
        return formatValue(date4, {
          locale: locale4,
          format: "YYYY-MM",
          generateConfig: generateConfig2
        });
      }
    }));
  }
  var MonthBody_default = MonthBody;

  // node_modules/rc-picker/es/panels/MonthPanel/index.js
  function MonthPanel(props) {
    var prefixCls = props.prefixCls, operationRef = props.operationRef, onViewDateChange = props.onViewDateChange, generateConfig2 = props.generateConfig, value = props.value, viewDate = props.viewDate, onPanelChange = props.onPanelChange, _onSelect = props.onSelect;
    var panelPrefixCls = "".concat(prefixCls, "-month-panel");
    operationRef.current = {
      onKeyDown: function onKeyDown3(event) {
        return createKeyDownHandler(event, {
          onLeftRight: function onLeftRight(diff) {
            _onSelect(generateConfig2.addMonth(value || viewDate, diff), "key");
          },
          onCtrlLeftRight: function onCtrlLeftRight(diff) {
            _onSelect(generateConfig2.addYear(value || viewDate, diff), "key");
          },
          onUpDown: function onUpDown(diff) {
            _onSelect(generateConfig2.addMonth(value || viewDate, diff * MONTH_COL_COUNT), "key");
          },
          onEnter: function onEnter() {
            onPanelChange("date", value || viewDate);
          }
        });
      }
    };
    var onYearChange = function onYearChange2(diff) {
      var newDate = generateConfig2.addYear(viewDate, diff);
      onViewDateChange(newDate);
      onPanelChange(null, newDate);
    };
    return /* @__PURE__ */ React185.createElement("div", {
      className: panelPrefixCls
    }, /* @__PURE__ */ React185.createElement(MonthHeader_default, _extends({}, props, {
      prefixCls,
      onPrevYear: function onPrevYear() {
        onYearChange(-1);
      },
      onNextYear: function onNextYear() {
        onYearChange(1);
      },
      onYearClick: function onYearClick() {
        onPanelChange("year", viewDate);
      }
    })), /* @__PURE__ */ React185.createElement(MonthBody_default, _extends({}, props, {
      prefixCls,
      onSelect: function onSelect(date4) {
        _onSelect(date4, "mouse");
        onPanelChange("date", date4);
      }
    })));
  }
  var MonthPanel_default = MonthPanel;

  // node_modules/rc-picker/es/panels/QuarterPanel/index.js
  var React188 = __toESM(require_react());

  // node_modules/rc-picker/es/panels/QuarterPanel/QuarterHeader.js
  var React186 = __toESM(require_react());
  function QuarterHeader(props) {
    var prefixCls = props.prefixCls, generateConfig2 = props.generateConfig, locale4 = props.locale, viewDate = props.viewDate, onNextYear = props.onNextYear, onPrevYear = props.onPrevYear, onYearClick = props.onYearClick;
    var _React$useContext = React186.useContext(PanelContext_default), hideHeader = _React$useContext.hideHeader;
    if (hideHeader) {
      return null;
    }
    var headerPrefixCls = "".concat(prefixCls, "-header");
    return /* @__PURE__ */ React186.createElement(Header_default, _extends({}, props, {
      prefixCls: headerPrefixCls,
      onSuperPrev: onPrevYear,
      onSuperNext: onNextYear
    }), /* @__PURE__ */ React186.createElement("button", {
      type: "button",
      onClick: onYearClick,
      className: "".concat(prefixCls, "-year-btn")
    }, formatValue(viewDate, {
      locale: locale4,
      format: locale4.yearFormat,
      generateConfig: generateConfig2
    })));
  }
  var QuarterHeader_default = QuarterHeader;

  // node_modules/rc-picker/es/panels/QuarterPanel/QuarterBody.js
  var React187 = __toESM(require_react());
  var QUARTER_COL_COUNT = 4;
  var QUARTER_ROW_COUNT = 1;
  function QuarterBody(props) {
    var prefixCls = props.prefixCls, locale4 = props.locale, value = props.value, viewDate = props.viewDate, generateConfig2 = props.generateConfig;
    var _React$useContext = React187.useContext(RangeContext_default), rangedValue = _React$useContext.rangedValue, hoverRangedValue = _React$useContext.hoverRangedValue;
    var cellPrefixCls = "".concat(prefixCls, "-cell");
    var getCellClassName = useCellClassName({
      cellPrefixCls,
      value,
      generateConfig: generateConfig2,
      rangedValue,
      hoverRangedValue,
      isSameCell: function isSameCell(current, target) {
        return isSameQuarter(generateConfig2, current, target);
      },
      isInView: function isInView() {
        return true;
      },
      offsetCell: function offsetCell(date4, offset4) {
        return generateConfig2.addMonth(date4, offset4 * 3);
      }
    });
    var baseQuarter = generateConfig2.setDate(generateConfig2.setMonth(viewDate, 0), 1);
    return /* @__PURE__ */ React187.createElement(PanelBody, _extends({}, props, {
      rowNum: QUARTER_ROW_COUNT,
      colNum: QUARTER_COL_COUNT,
      baseDate: baseQuarter,
      getCellText: function getCellText(date4) {
        return formatValue(date4, {
          locale: locale4,
          format: locale4.quarterFormat || "[Q]Q",
          generateConfig: generateConfig2
        });
      },
      getCellClassName,
      getCellDate: function getCellDate(date4, offset4) {
        return generateConfig2.addMonth(date4, offset4 * 3);
      },
      titleCell: function titleCell(date4) {
        return formatValue(date4, {
          locale: locale4,
          format: "YYYY-[Q]Q",
          generateConfig: generateConfig2
        });
      }
    }));
  }
  var QuarterBody_default = QuarterBody;

  // node_modules/rc-picker/es/panels/QuarterPanel/index.js
  function QuarterPanel(props) {
    var prefixCls = props.prefixCls, operationRef = props.operationRef, onViewDateChange = props.onViewDateChange, generateConfig2 = props.generateConfig, value = props.value, viewDate = props.viewDate, onPanelChange = props.onPanelChange, _onSelect = props.onSelect;
    var panelPrefixCls = "".concat(prefixCls, "-quarter-panel");
    operationRef.current = {
      onKeyDown: function onKeyDown3(event) {
        return createKeyDownHandler(event, {
          onLeftRight: function onLeftRight(diff) {
            _onSelect(generateConfig2.addMonth(value || viewDate, diff * 3), "key");
          },
          onCtrlLeftRight: function onCtrlLeftRight(diff) {
            _onSelect(generateConfig2.addYear(value || viewDate, diff), "key");
          },
          onUpDown: function onUpDown(diff) {
            _onSelect(generateConfig2.addYear(value || viewDate, diff), "key");
          }
        });
      }
    };
    var onYearChange = function onYearChange2(diff) {
      var newDate = generateConfig2.addYear(viewDate, diff);
      onViewDateChange(newDate);
      onPanelChange(null, newDate);
    };
    return /* @__PURE__ */ React188.createElement("div", {
      className: panelPrefixCls
    }, /* @__PURE__ */ React188.createElement(QuarterHeader_default, _extends({}, props, {
      prefixCls,
      onPrevYear: function onPrevYear() {
        onYearChange(-1);
      },
      onNextYear: function onNextYear() {
        onYearChange(1);
      },
      onYearClick: function onYearClick() {
        onPanelChange("year", viewDate);
      }
    })), /* @__PURE__ */ React188.createElement(QuarterBody_default, _extends({}, props, {
      prefixCls,
      onSelect: function onSelect(date4) {
        _onSelect(date4, "mouse");
      }
    })));
  }
  var QuarterPanel_default = QuarterPanel;

  // node_modules/rc-picker/es/panels/YearPanel/index.js
  var React191 = __toESM(require_react());

  // node_modules/rc-picker/es/panels/YearPanel/YearHeader.js
  var React189 = __toESM(require_react());
  function YearHeader(props) {
    var prefixCls = props.prefixCls, generateConfig2 = props.generateConfig, viewDate = props.viewDate, onPrevDecade = props.onPrevDecade, onNextDecade = props.onNextDecade, onDecadeClick = props.onDecadeClick;
    var _React$useContext = React189.useContext(PanelContext_default), hideHeader = _React$useContext.hideHeader;
    if (hideHeader) {
      return null;
    }
    var headerPrefixCls = "".concat(prefixCls, "-header");
    var yearNumber = generateConfig2.getYear(viewDate);
    var startYear = Math.floor(yearNumber / YEAR_DECADE_COUNT) * YEAR_DECADE_COUNT;
    var endYear = startYear + YEAR_DECADE_COUNT - 1;
    return /* @__PURE__ */ React189.createElement(Header_default, _extends({}, props, {
      prefixCls: headerPrefixCls,
      onSuperPrev: onPrevDecade,
      onSuperNext: onNextDecade
    }), /* @__PURE__ */ React189.createElement("button", {
      type: "button",
      onClick: onDecadeClick,
      className: "".concat(prefixCls, "-decade-btn")
    }, startYear, "-", endYear));
  }
  var YearHeader_default = YearHeader;

  // node_modules/rc-picker/es/panels/YearPanel/YearBody.js
  var React190 = __toESM(require_react());
  var YEAR_COL_COUNT = 3;
  var YEAR_ROW_COUNT = 4;
  function YearBody(props) {
    var prefixCls = props.prefixCls, value = props.value, viewDate = props.viewDate, locale4 = props.locale, generateConfig2 = props.generateConfig;
    var _React$useContext = React190.useContext(RangeContext_default), rangedValue = _React$useContext.rangedValue, hoverRangedValue = _React$useContext.hoverRangedValue;
    var yearPrefixCls = "".concat(prefixCls, "-cell");
    var yearNumber = generateConfig2.getYear(viewDate);
    var startYear = Math.floor(yearNumber / YEAR_DECADE_COUNT) * YEAR_DECADE_COUNT;
    var endYear = startYear + YEAR_DECADE_COUNT - 1;
    var baseYear = generateConfig2.setYear(viewDate, startYear - Math.ceil((YEAR_COL_COUNT * YEAR_ROW_COUNT - YEAR_DECADE_COUNT) / 2));
    var isInView = function isInView2(date4) {
      var currentYearNumber = generateConfig2.getYear(date4);
      return startYear <= currentYearNumber && currentYearNumber <= endYear;
    };
    var getCellClassName = useCellClassName({
      cellPrefixCls: yearPrefixCls,
      value,
      generateConfig: generateConfig2,
      rangedValue,
      hoverRangedValue,
      isSameCell: function isSameCell(current, target) {
        return isSameYear(generateConfig2, current, target);
      },
      isInView,
      offsetCell: function offsetCell(date4, offset4) {
        return generateConfig2.addYear(date4, offset4);
      }
    });
    return /* @__PURE__ */ React190.createElement(PanelBody, _extends({}, props, {
      rowNum: YEAR_ROW_COUNT,
      colNum: YEAR_COL_COUNT,
      baseDate: baseYear,
      getCellText: generateConfig2.getYear,
      getCellClassName,
      getCellDate: generateConfig2.addYear,
      titleCell: function titleCell(date4) {
        return formatValue(date4, {
          locale: locale4,
          format: "YYYY",
          generateConfig: generateConfig2
        });
      }
    }));
  }
  var YearBody_default = YearBody;

  // node_modules/rc-picker/es/panels/YearPanel/index.js
  var YEAR_DECADE_COUNT = 10;
  function YearPanel(props) {
    var prefixCls = props.prefixCls, operationRef = props.operationRef, onViewDateChange = props.onViewDateChange, generateConfig2 = props.generateConfig, value = props.value, viewDate = props.viewDate, sourceMode = props.sourceMode, _onSelect = props.onSelect, onPanelChange = props.onPanelChange;
    var panelPrefixCls = "".concat(prefixCls, "-year-panel");
    operationRef.current = {
      onKeyDown: function onKeyDown3(event) {
        return createKeyDownHandler(event, {
          onLeftRight: function onLeftRight(diff) {
            _onSelect(generateConfig2.addYear(value || viewDate, diff), "key");
          },
          onCtrlLeftRight: function onCtrlLeftRight(diff) {
            _onSelect(generateConfig2.addYear(value || viewDate, diff * YEAR_DECADE_COUNT), "key");
          },
          onUpDown: function onUpDown(diff) {
            _onSelect(generateConfig2.addYear(value || viewDate, diff * YEAR_COL_COUNT), "key");
          },
          onEnter: function onEnter() {
            onPanelChange(sourceMode === "date" ? "date" : "month", value || viewDate);
          }
        });
      }
    };
    var onDecadeChange = function onDecadeChange2(diff) {
      var newDate = generateConfig2.addYear(viewDate, diff * 10);
      onViewDateChange(newDate);
      onPanelChange(null, newDate);
    };
    return /* @__PURE__ */ React191.createElement("div", {
      className: panelPrefixCls
    }, /* @__PURE__ */ React191.createElement(YearHeader_default, _extends({}, props, {
      prefixCls,
      onPrevDecade: function onPrevDecade() {
        onDecadeChange(-1);
      },
      onNextDecade: function onNextDecade() {
        onDecadeChange(1);
      },
      onDecadeClick: function onDecadeClick() {
        onPanelChange("decade", viewDate);
      }
    })), /* @__PURE__ */ React191.createElement(YearBody_default, _extends({}, props, {
      prefixCls,
      onSelect: function onSelect(date4) {
        onPanelChange(sourceMode === "date" ? "date" : "month", date4);
        _onSelect(date4, "mouse");
      }
    })));
  }
  var YearPanel_default = YearPanel;

  // node_modules/rc-picker/es/utils/getExtraFooter.js
  var React192 = __toESM(require_react());
  function getExtraFooter(prefixCls, mode, renderExtraFooter) {
    if (!renderExtraFooter) {
      return null;
    }
    return /* @__PURE__ */ React192.createElement("div", {
      className: "".concat(prefixCls, "-footer-extra")
    }, renderExtraFooter(mode));
  }

  // node_modules/rc-picker/es/utils/getRanges.js
  var React193 = __toESM(require_react());
  function getRanges(_ref) {
    var prefixCls = _ref.prefixCls, _ref$rangeList = _ref.rangeList, rangeList = _ref$rangeList === void 0 ? [] : _ref$rangeList, _ref$components = _ref.components, components = _ref$components === void 0 ? {} : _ref$components, needConfirmButton = _ref.needConfirmButton, onNow = _ref.onNow, onOk = _ref.onOk, okDisabled = _ref.okDisabled, showNow = _ref.showNow, locale4 = _ref.locale;
    var presetNode;
    var okNode;
    if (rangeList.length) {
      var Item5 = components.rangeItem || "span";
      presetNode = /* @__PURE__ */ React193.createElement(React193.Fragment, null, rangeList.map(function(_ref2) {
        var label = _ref2.label, onClick = _ref2.onClick, onMouseEnter = _ref2.onMouseEnter, onMouseLeave = _ref2.onMouseLeave;
        return /* @__PURE__ */ React193.createElement("li", {
          key: label,
          className: "".concat(prefixCls, "-preset")
        }, /* @__PURE__ */ React193.createElement(Item5, {
          onClick,
          onMouseEnter,
          onMouseLeave
        }, label));
      }));
    }
    if (needConfirmButton) {
      var Button2 = components.button || "button";
      if (onNow && !presetNode && showNow !== false) {
        presetNode = /* @__PURE__ */ React193.createElement("li", {
          className: "".concat(prefixCls, "-now")
        }, /* @__PURE__ */ React193.createElement("a", {
          className: "".concat(prefixCls, "-now-btn"),
          onClick: onNow
        }, locale4.now));
      }
      okNode = needConfirmButton && /* @__PURE__ */ React193.createElement("li", {
        className: "".concat(prefixCls, "-ok")
      }, /* @__PURE__ */ React193.createElement(Button2, {
        disabled: okDisabled,
        onClick: onOk
      }, locale4.ok));
    }
    if (!presetNode && !okNode) {
      return null;
    }
    return /* @__PURE__ */ React193.createElement("ul", {
      className: "".concat(prefixCls, "-ranges")
    }, presetNode, okNode);
  }

  // node_modules/rc-picker/es/PickerPanel.js
  var CALENDAR_PANEL_MODE = ["date", "month"];
  function PickerPanel(props) {
    var _classNames;
    var _props$prefixCls = props.prefixCls, prefixCls = _props$prefixCls === void 0 ? "rc-picker" : _props$prefixCls, className = props.className, style3 = props.style, locale4 = props.locale, generateConfig2 = props.generateConfig, value = props.value, defaultValue = props.defaultValue, pickerValue = props.pickerValue, defaultPickerValue = props.defaultPickerValue, disabledDate = props.disabledDate, mode = props.mode, _props$picker = props.picker, picker = _props$picker === void 0 ? "date" : _props$picker, _props$tabIndex = props.tabIndex, tabIndex = _props$tabIndex === void 0 ? 0 : _props$tabIndex, showNow = props.showNow, showTime = props.showTime, showToday = props.showToday, renderExtraFooter = props.renderExtraFooter, hideHeader = props.hideHeader, onSelect = props.onSelect, onChange = props.onChange, onPanelChange = props.onPanelChange, onMouseDown = props.onMouseDown, onPickerValueChange = props.onPickerValueChange, _onOk = props.onOk, components = props.components, direction = props.direction, _props$hourStep = props.hourStep, hourStep = _props$hourStep === void 0 ? 1 : _props$hourStep, _props$minuteStep = props.minuteStep, minuteStep = _props$minuteStep === void 0 ? 1 : _props$minuteStep, _props$secondStep = props.secondStep, secondStep = _props$secondStep === void 0 ? 1 : _props$secondStep;
    var needConfirmButton = picker === "date" && !!showTime || picker === "time";
    var isHourStepValid = 24 % hourStep === 0;
    var isMinuteStepValid = 60 % minuteStep === 0;
    var isSecondStepValid = 60 % secondStep === 0;
    if (true) {
      warning_default(!value || generateConfig2.isValidate(value), "Invalidate date pass to `value`.");
      warning_default(!value || generateConfig2.isValidate(value), "Invalidate date pass to `defaultValue`.");
      warning_default(isHourStepValid, "`hourStep` ".concat(hourStep, " is invalid. It should be a factor of 24."));
      warning_default(isMinuteStepValid, "`minuteStep` ".concat(minuteStep, " is invalid. It should be a factor of 60."));
      warning_default(isSecondStepValid, "`secondStep` ".concat(secondStep, " is invalid. It should be a factor of 60."));
    }
    var panelContext = React194.useContext(PanelContext_default);
    var operationRef = panelContext.operationRef, panelDivRef = panelContext.panelRef, onContextSelect = panelContext.onSelect, hideRanges = panelContext.hideRanges, defaultOpenValue = panelContext.defaultOpenValue;
    var _React$useContext = React194.useContext(RangeContext_default), inRange = _React$useContext.inRange, panelPosition = _React$useContext.panelPosition, rangedValue = _React$useContext.rangedValue, hoverRangedValue = _React$useContext.hoverRangedValue;
    var panelRef = React194.useRef({});
    var initRef = React194.useRef(true);
    var _useMergedState = useMergedState(null, {
      value,
      defaultValue,
      postState: function postState(val) {
        if (!val && defaultOpenValue && picker === "time") {
          return defaultOpenValue;
        }
        return val;
      }
    }), _useMergedState2 = _slicedToArray(_useMergedState, 2), mergedValue = _useMergedState2[0], setInnerValue = _useMergedState2[1];
    var _useMergedState3 = useMergedState(null, {
      value: pickerValue,
      defaultValue: defaultPickerValue || mergedValue,
      postState: function postState(date4) {
        var now3 = generateConfig2.getNow();
        if (!date4) {
          return now3;
        }
        if (!mergedValue && showTime) {
          var defaultDateObject = _typeof(showTime) === "object" ? showTime.defaultValue : defaultValue;
          return setDateTime(generateConfig2, Array.isArray(date4) ? date4[0] : date4, defaultDateObject || now3);
        }
        return Array.isArray(date4) ? date4[0] : date4;
      }
    }), _useMergedState4 = _slicedToArray(_useMergedState3, 2), viewDate = _useMergedState4[0], setInnerViewDate = _useMergedState4[1];
    var setViewDate = function setViewDate2(date4) {
      setInnerViewDate(date4);
      if (onPickerValueChange) {
        onPickerValueChange(date4);
      }
    };
    var getInternalNextMode = function getInternalNextMode2(nextMode) {
      var getNextMode = PickerModeMap[picker];
      if (getNextMode) {
        return getNextMode(nextMode);
      }
      return nextMode;
    };
    var _useMergedState5 = useMergedState(function() {
      if (picker === "time") {
        return "time";
      }
      return getInternalNextMode("date");
    }, {
      value: mode
    }), _useMergedState6 = _slicedToArray(_useMergedState5, 2), mergedMode = _useMergedState6[0], setInnerMode = _useMergedState6[1];
    React194.useEffect(function() {
      setInnerMode(picker);
    }, [picker]);
    var _React$useState = React194.useState(function() {
      return mergedMode;
    }), _React$useState2 = _slicedToArray(_React$useState, 2), sourceMode = _React$useState2[0], setSourceMode = _React$useState2[1];
    var onInternalPanelChange = function onInternalPanelChange2(newMode, viewValue) {
      var nextMode = getInternalNextMode(newMode || mergedMode);
      setSourceMode(mergedMode);
      setInnerMode(nextMode);
      if (onPanelChange && (mergedMode !== nextMode || isEqual2(generateConfig2, viewDate, viewDate))) {
        onPanelChange(viewValue, nextMode);
      }
    };
    var triggerSelect = function triggerSelect2(date4, type4) {
      var forceTriggerSelect = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      if (mergedMode === picker || forceTriggerSelect) {
        setInnerValue(date4);
        if (onSelect) {
          onSelect(date4);
        }
        if (onContextSelect) {
          onContextSelect(date4, type4);
        }
        if (onChange && !isEqual2(generateConfig2, date4, mergedValue) && !(disabledDate === null || disabledDate === void 0 ? void 0 : disabledDate(date4))) {
          onChange(date4);
        }
      }
    };
    var isSelectable = function isSelectable2(key2) {
      if (CALENDAR_PANEL_MODE.includes(mergedMode)) {
        var date4;
        var operationFnc;
        var isDateMode = mergedMode === "date";
        if (key2 === KeyCode_default.PAGE_UP || key2 === KeyCode_default.PAGE_DOWN) {
          operationFnc = isDateMode ? generateConfig2.addMonth : generateConfig2.addYear;
        } else {
          operationFnc = isDateMode ? generateConfig2.addDate : generateConfig2.addMonth;
        }
        switch (key2) {
          case KeyCode_default.LEFT:
          case KeyCode_default.PAGE_UP:
            date4 = operationFnc(viewDate, -1);
            break;
          case KeyCode_default.RIGHT:
          case KeyCode_default.PAGE_DOWN:
            date4 = operationFnc(viewDate, 1);
            break;
          case KeyCode_default.UP:
          case KeyCode_default.DOWN:
            date4 = operationFnc(viewDate, Number("".concat(key2 === KeyCode_default.UP ? "-" : "").concat(isDateMode ? WEEK_DAY_COUNT : MONTH_COL_COUNT)));
            break;
        }
        if (date4) {
          return !(disabledDate === null || disabledDate === void 0 ? void 0 : disabledDate(date4));
        }
      }
      return true;
    };
    var onInternalKeyDown = function onInternalKeyDown2(e3) {
      if (panelRef.current && panelRef.current.onKeyDown) {
        var selectable = true;
        var which = e3.which;
        if ([KeyCode_default.LEFT, KeyCode_default.RIGHT, KeyCode_default.UP, KeyCode_default.DOWN, KeyCode_default.PAGE_UP, KeyCode_default.PAGE_DOWN, KeyCode_default.ENTER].includes(which)) {
          e3.preventDefault();
          if (which !== KeyCode_default.ENTER && tabIndex === 0) {
            selectable = isSelectable(which);
          }
        }
        if (selectable) {
          return panelRef.current.onKeyDown(e3);
        }
      }
      {
        warning_default(false, "Panel not correct handle keyDown event. Please help to fire issue about this.");
        return false;
      }
    };
    var onInternalBlur = function onInternalBlur2(e3) {
      if (panelRef.current && panelRef.current.onBlur) {
        panelRef.current.onBlur(e3);
      }
    };
    if (operationRef && panelPosition !== "right") {
      operationRef.current = {
        onKeyDown: onInternalKeyDown,
        onClose: function onClose2() {
          if (panelRef.current && panelRef.current.onClose) {
            panelRef.current.onClose();
          }
        }
      };
    }
    React194.useEffect(function() {
      if (value && !initRef.current) {
        setInnerViewDate(value);
      }
    }, [value]);
    React194.useEffect(function() {
      initRef.current = false;
    }, []);
    var panelNode;
    var pickerProps = _objectSpread2(_objectSpread2({}, props), {}, {
      operationRef: panelRef,
      prefixCls,
      viewDate,
      value: mergedValue,
      onViewDateChange: setViewDate,
      sourceMode,
      onPanelChange: onInternalPanelChange,
      disabledDate
    });
    delete pickerProps.onChange;
    delete pickerProps.onSelect;
    switch (mergedMode) {
      case "decade":
        panelNode = /* @__PURE__ */ React194.createElement(DecadePanel_default, _extends({}, pickerProps, {
          onSelect: function onSelect2(date4, type4) {
            setViewDate(date4);
            triggerSelect(date4, type4);
          }
        }));
        break;
      case "year":
        panelNode = /* @__PURE__ */ React194.createElement(YearPanel_default, _extends({}, pickerProps, {
          onSelect: function onSelect2(date4, type4) {
            setViewDate(date4);
            triggerSelect(date4, type4);
          }
        }));
        break;
      case "month":
        panelNode = /* @__PURE__ */ React194.createElement(MonthPanel_default, _extends({}, pickerProps, {
          onSelect: function onSelect2(date4, type4) {
            setViewDate(date4);
            triggerSelect(date4, type4);
          }
        }));
        break;
      case "quarter":
        panelNode = /* @__PURE__ */ React194.createElement(QuarterPanel_default, _extends({}, pickerProps, {
          onSelect: function onSelect2(date4, type4) {
            setViewDate(date4);
            triggerSelect(date4, type4);
          }
        }));
        break;
      case "week":
        panelNode = /* @__PURE__ */ React194.createElement(WeekPanel_default, _extends({}, pickerProps, {
          onSelect: function onSelect2(date4, type4) {
            setViewDate(date4);
            triggerSelect(date4, type4);
          }
        }));
        break;
      case "time":
        delete pickerProps.showTime;
        panelNode = /* @__PURE__ */ React194.createElement(TimePanel_default, _extends({}, pickerProps, _typeof(showTime) === "object" ? showTime : null, {
          onSelect: function onSelect2(date4, type4) {
            setViewDate(date4);
            triggerSelect(date4, type4);
          }
        }));
        break;
      default:
        if (showTime) {
          panelNode = /* @__PURE__ */ React194.createElement(DatetimePanel_default, _extends({}, pickerProps, {
            onSelect: function onSelect2(date4, type4) {
              setViewDate(date4);
              triggerSelect(date4, type4);
            }
          }));
        } else {
          panelNode = /* @__PURE__ */ React194.createElement(DatePanel_default, _extends({}, pickerProps, {
            onSelect: function onSelect2(date4, type4) {
              setViewDate(date4);
              triggerSelect(date4, type4);
            }
          }));
        }
    }
    var extraFooter;
    var rangesNode;
    var onNow = function onNow2() {
      var now3 = generateConfig2.getNow();
      var lowerBoundTime = getLowerBoundTime(generateConfig2.getHour(now3), generateConfig2.getMinute(now3), generateConfig2.getSecond(now3), isHourStepValid ? hourStep : 1, isMinuteStepValid ? minuteStep : 1, isSecondStepValid ? secondStep : 1);
      var adjustedNow = setTime(
        generateConfig2,
        now3,
        lowerBoundTime[0],
        // hour
        lowerBoundTime[1],
        // minute
        lowerBoundTime[2]
      );
      triggerSelect(adjustedNow, "submit");
    };
    if (!hideRanges) {
      extraFooter = getExtraFooter(prefixCls, mergedMode, renderExtraFooter);
      rangesNode = getRanges({
        prefixCls,
        components,
        needConfirmButton,
        okDisabled: !mergedValue || disabledDate && disabledDate(mergedValue),
        locale: locale4,
        showNow,
        onNow: needConfirmButton && onNow,
        onOk: function onOk() {
          if (mergedValue) {
            triggerSelect(mergedValue, "submit", true);
            if (_onOk) {
              _onOk(mergedValue);
            }
          }
        }
      });
    }
    var todayNode;
    if (showToday && mergedMode === "date" && picker === "date" && !showTime) {
      var now2 = generateConfig2.getNow();
      var todayCls = "".concat(prefixCls, "-today-btn");
      var disabled = disabledDate && disabledDate(now2);
      todayNode = /* @__PURE__ */ React194.createElement("a", {
        className: (0, import_classnames57.default)(todayCls, disabled && "".concat(todayCls, "-disabled")),
        "aria-disabled": disabled,
        onClick: function onClick() {
          if (!disabled) {
            triggerSelect(now2, "mouse", true);
          }
        }
      }, locale4.today);
    }
    return /* @__PURE__ */ React194.createElement(PanelContext_default.Provider, {
      value: _objectSpread2(_objectSpread2({}, panelContext), {}, {
        mode: mergedMode,
        hideHeader: "hideHeader" in props ? hideHeader : panelContext.hideHeader,
        hidePrevBtn: inRange && panelPosition === "right",
        hideNextBtn: inRange && panelPosition === "left"
      })
    }, /* @__PURE__ */ React194.createElement("div", {
      tabIndex,
      className: (0, import_classnames57.default)("".concat(prefixCls, "-panel"), className, (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-panel-has-range"), rangedValue && rangedValue[0] && rangedValue[1]), _defineProperty(_classNames, "".concat(prefixCls, "-panel-has-range-hover"), hoverRangedValue && hoverRangedValue[0] && hoverRangedValue[1]), _defineProperty(_classNames, "".concat(prefixCls, "-panel-rtl"), direction === "rtl"), _classNames)),
      style: style3,
      onKeyDown: onInternalKeyDown,
      onBlur: onInternalBlur,
      onMouseDown,
      ref: panelDivRef
    }, panelNode, extraFooter || rangesNode || todayNode ? /* @__PURE__ */ React194.createElement("div", {
      className: "".concat(prefixCls, "-footer")
    }, extraFooter, rangesNode, todayNode) : null));
  }
  var PickerPanel_default = PickerPanel;

  // node_modules/rc-picker/es/PickerTrigger.js
  var React195 = __toESM(require_react());
  var import_classnames58 = __toESM(require_classnames());
  var BUILT_IN_PLACEMENTS = {
    bottomLeft: {
      points: ["tl", "bl"],
      offset: [0, 4],
      overflow: {
        adjustX: 1,
        adjustY: 1
      }
    },
    bottomRight: {
      points: ["tr", "br"],
      offset: [0, 4],
      overflow: {
        adjustX: 1,
        adjustY: 1
      }
    },
    topLeft: {
      points: ["bl", "tl"],
      offset: [0, -4],
      overflow: {
        adjustX: 0,
        adjustY: 1
      }
    },
    topRight: {
      points: ["br", "tr"],
      offset: [0, -4],
      overflow: {
        adjustX: 0,
        adjustY: 1
      }
    }
  };
  function PickerTrigger(_ref) {
    var _classNames;
    var prefixCls = _ref.prefixCls, popupElement = _ref.popupElement, popupStyle = _ref.popupStyle, visible = _ref.visible, dropdownClassName = _ref.dropdownClassName, dropdownAlign = _ref.dropdownAlign, transitionName2 = _ref.transitionName, getPopupContainer = _ref.getPopupContainer, children = _ref.children, range3 = _ref.range, popupPlacement = _ref.popupPlacement, direction = _ref.direction;
    var dropdownPrefixCls = "".concat(prefixCls, "-dropdown");
    var getPopupPlacement = function getPopupPlacement2() {
      if (popupPlacement !== void 0) {
        return popupPlacement;
      }
      return direction === "rtl" ? "bottomRight" : "bottomLeft";
    };
    return /* @__PURE__ */ React195.createElement(es_default7, {
      showAction: [],
      hideAction: [],
      popupPlacement: getPopupPlacement(),
      builtinPlacements: BUILT_IN_PLACEMENTS,
      prefixCls: dropdownPrefixCls,
      popupTransitionName: transitionName2,
      popup: popupElement,
      popupAlign: dropdownAlign,
      popupVisible: visible,
      popupClassName: (0, import_classnames58.default)(dropdownClassName, (_classNames = {}, _defineProperty(_classNames, "".concat(dropdownPrefixCls, "-range"), range3), _defineProperty(_classNames, "".concat(dropdownPrefixCls, "-rtl"), direction === "rtl"), _classNames)),
      popupStyle,
      getPopupContainer
    }, children);
  }
  var PickerTrigger_default = PickerTrigger;

  // node_modules/rc-picker/es/hooks/usePickerInput.js
  var import_react50 = __toESM(require_react());
  function usePickerInput(_ref) {
    var open = _ref.open, value = _ref.value, isClickOutside = _ref.isClickOutside, triggerOpen = _ref.triggerOpen, forwardKeyDown = _ref.forwardKeyDown, _onKeyDown = _ref.onKeyDown, blurToCancel = _ref.blurToCancel, onSubmit = _ref.onSubmit, onCancel = _ref.onCancel, _onFocus = _ref.onFocus, _onBlur = _ref.onBlur, currentFocusedKey = _ref.currentFocusedKey, _ref$key = _ref.key, key2 = _ref$key === void 0 ? "start" : _ref$key;
    var _useState = (0, import_react50.useState)(false), _useState2 = _slicedToArray(_useState, 2), typing = _useState2[0], setTyping = _useState2[1];
    var _useState3 = (0, import_react50.useState)(false), _useState4 = _slicedToArray(_useState3, 2), focused = _useState4[0], setFocused = _useState4[1];
    var delayBlurTimer = (0, import_react50.useRef)();
    var preventBlurRef = (0, import_react50.useRef)(false);
    var valueChangedRef = (0, import_react50.useRef)(false);
    var preventDefaultRef = (0, import_react50.useRef)(false);
    var inputProps = {
      onMouseDown: function onMouseDown() {
        setTyping(true);
        triggerOpen(true);
      },
      onKeyDown: function onKeyDown3(e3) {
        var preventDefault = function preventDefault2() {
          preventDefaultRef.current = true;
        };
        _onKeyDown(e3, preventDefault);
        if (preventDefaultRef.current)
          return;
        switch (e3.which) {
          case KeyCode_default.ENTER: {
            if (!open) {
              triggerOpen(true);
            } else if (onSubmit() !== false) {
              setTyping(true);
            }
            e3.preventDefault();
            return;
          }
          case KeyCode_default.TAB: {
            if (typing && open && !e3.shiftKey) {
              setTyping(false);
              e3.preventDefault();
            } else if (!typing && open) {
              if (!forwardKeyDown(e3) && e3.shiftKey) {
                setTyping(true);
                e3.preventDefault();
              }
            }
            return;
          }
          case KeyCode_default.ESC: {
            setTyping(true);
            onCancel();
            return;
          }
        }
        if (!open && ![KeyCode_default.SHIFT].includes(e3.which)) {
          triggerOpen(true);
        } else if (!typing) {
          forwardKeyDown(e3);
        }
      },
      onFocus: function onFocus(e3) {
        setTyping(true);
        setFocused(true);
        if (currentFocusedKey) {
          currentFocusedKey.current = key2;
        }
        clearTimeout(delayBlurTimer.current);
        if (_onFocus) {
          _onFocus(e3);
        }
      },
      onBlur: function onBlur(e3) {
        if (preventBlurRef.current || !isClickOutside(document.activeElement)) {
          preventBlurRef.current = false;
          return;
        }
        if (blurToCancel) {
          setTimeout(function() {
            var _document = document, activeElement = _document.activeElement;
            while (activeElement && activeElement.shadowRoot) {
              activeElement = activeElement.shadowRoot.activeElement;
            }
            if (isClickOutside(activeElement)) {
              onCancel();
            }
          }, 0);
        } else if (open) {
          triggerOpen(false);
          if (valueChangedRef.current) {
            onSubmit();
          }
        }
        setFocused(false);
        if (currentFocusedKey) {
          currentFocusedKey.current = "";
          delayBlurTimer.current = setTimeout(function() {
            if (currentFocusedKey.current) {
              return;
            }
            _onBlur === null || _onBlur === void 0 ? void 0 : _onBlur(e3);
          }, 100);
        } else {
          _onBlur === null || _onBlur === void 0 ? void 0 : _onBlur(e3);
        }
      }
    };
    (0, import_react50.useEffect)(function() {
      valueChangedRef.current = false;
    }, [open]);
    (0, import_react50.useEffect)(function() {
      valueChangedRef.current = true;
    }, [value]);
    (0, import_react50.useEffect)(function() {
      return addGlobalMouseDownEvent(function(e3) {
        var target = getTargetFromEvent(e3);
        var clickedOutside = isClickOutside(target);
        if (open) {
          if (!clickedOutside) {
            preventBlurRef.current = true;
            requestAnimationFrame(function() {
              preventBlurRef.current = false;
            });
          } else if (!focused || clickedOutside) {
            triggerOpen(false);
          }
        } else if (focused && !clickedOutside) {
          preventBlurRef.current = true;
        }
      });
    });
    (0, import_react50.useEffect)(function() {
      return function() {
        return clearTimeout(delayBlurTimer.current);
      };
    }, []);
    return [inputProps, {
      focused,
      typing
    }];
  }

  // node_modules/rc-picker/es/hooks/useTextValueMapping.js
  var React196 = __toESM(require_react());
  function useTextValueMapping(_ref) {
    var valueTexts = _ref.valueTexts, onTextChange = _ref.onTextChange;
    var _React$useState = React196.useState(""), _React$useState2 = _slicedToArray(_React$useState, 2), text = _React$useState2[0], setInnerText = _React$useState2[1];
    var valueTextsRef = React196.useRef([]);
    valueTextsRef.current = valueTexts;
    function triggerTextChange(value) {
      setInnerText(value);
      onTextChange(value);
    }
    function resetText() {
      setInnerText(valueTextsRef.current[0]);
    }
    React196.useEffect(function() {
      if (valueTexts.every(function(valText) {
        return valText !== text;
      })) {
        resetText();
      }
    }, [valueTexts.join("||")]);
    return [text, triggerTextChange, resetText];
  }

  // node_modules/rc-picker/es/hooks/useValueTexts.js
  function useValueTexts(value, _ref) {
    var formatList = _ref.formatList, generateConfig2 = _ref.generateConfig, locale4 = _ref.locale;
    return useMemo6(function() {
      if (!value) {
        return [[""], ""];
      }
      var firstValueText = "";
      var fullValueTexts = [];
      for (var i3 = 0; i3 < formatList.length; i3 += 1) {
        var format3 = formatList[i3];
        var formatStr = formatValue(value, {
          generateConfig: generateConfig2,
          locale: locale4,
          format: format3
        });
        fullValueTexts.push(formatStr);
        if (i3 === 0) {
          firstValueText = formatStr;
        }
      }
      return [fullValueTexts, firstValueText];
    }, [value, formatList, locale4], function(prev, next) {
      return (
        // Not Same Date
        !isEqual2(generateConfig2, prev[0], next[0]) || // Not Same format
        !isEqual_default(prev[1], next[1], true) || // Not Same locale
        !isEqual_default(prev[2], next[2], true)
      );
    });
  }

  // node_modules/rc-picker/es/hooks/useHoverValue.js
  var import_react51 = __toESM(require_react());
  function useHoverValue(valueText, _ref) {
    var formatList = _ref.formatList, generateConfig2 = _ref.generateConfig, locale4 = _ref.locale;
    var _useState = (0, import_react51.useState)(null), _useState2 = _slicedToArray(_useState, 2), value = _useState2[0], internalSetValue = _useState2[1];
    var raf3 = (0, import_react51.useRef)(null);
    function setValue(val) {
      var immediately = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      cancelAnimationFrame(raf3.current);
      if (immediately) {
        internalSetValue(val);
        return;
      }
      raf3.current = requestAnimationFrame(function() {
        internalSetValue(val);
      });
    }
    var _useValueTexts = useValueTexts(value, {
      formatList,
      generateConfig: generateConfig2,
      locale: locale4
    }), _useValueTexts2 = _slicedToArray(_useValueTexts, 2), firstText = _useValueTexts2[1];
    function onEnter(date4) {
      setValue(date4);
    }
    function onLeave() {
      var immediately = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
      setValue(null, immediately);
    }
    (0, import_react51.useEffect)(function() {
      onLeave(true);
    }, [valueText]);
    (0, import_react51.useEffect)(function() {
      return function() {
        return cancelAnimationFrame(raf3.current);
      };
    }, []);
    return [firstText, onEnter, onLeave];
  }

  // node_modules/rc-picker/es/utils/warnUtil.js
  function legacyPropsWarning(props) {
    var picker = props.picker, disabledHours = props.disabledHours, disabledMinutes = props.disabledMinutes, disabledSeconds = props.disabledSeconds;
    if (picker === "time" && (disabledHours || disabledMinutes || disabledSeconds)) {
      warning_default(false, "'disabledHours', 'disabledMinutes', 'disabledSeconds' will be removed in the next major version, please use 'disabledTime' instead.");
    }
  }

  // node_modules/rc-picker/es/Picker.js
  function InnerPicker(props) {
    var _classNames2;
    var _props$prefixCls = props.prefixCls, prefixCls = _props$prefixCls === void 0 ? "rc-picker" : _props$prefixCls, id2 = props.id, tabIndex = props.tabIndex, style3 = props.style, className = props.className, dropdownClassName = props.dropdownClassName, dropdownAlign = props.dropdownAlign, popupStyle = props.popupStyle, transitionName2 = props.transitionName, generateConfig2 = props.generateConfig, locale4 = props.locale, inputReadOnly = props.inputReadOnly, allowClear = props.allowClear, autoFocus = props.autoFocus, showTime = props.showTime, _props$picker = props.picker, picker = _props$picker === void 0 ? "date" : _props$picker, format3 = props.format, use12Hours = props.use12Hours, value = props.value, defaultValue = props.defaultValue, open = props.open, defaultOpen = props.defaultOpen, defaultOpenValue = props.defaultOpenValue, suffixIcon = props.suffixIcon, clearIcon = props.clearIcon, disabled = props.disabled, disabledDate = props.disabledDate, placeholder = props.placeholder, getPopupContainer = props.getPopupContainer, pickerRef = props.pickerRef, panelRender = props.panelRender, onChange = props.onChange, onOpenChange = props.onOpenChange, onFocus = props.onFocus, onBlur = props.onBlur, onMouseDown = props.onMouseDown, onMouseUp = props.onMouseUp, onMouseEnter = props.onMouseEnter, onMouseLeave = props.onMouseLeave, onContextMenu = props.onContextMenu, onClick = props.onClick, _onKeyDown = props.onKeyDown, _onSelect = props.onSelect, direction = props.direction, _props$autoComplete = props.autoComplete, autoComplete = _props$autoComplete === void 0 ? "off" : _props$autoComplete, inputRender = props.inputRender;
    var inputRef = React197.useRef(null);
    var needConfirmButton = picker === "date" && !!showTime || picker === "time";
    if (true) {
      legacyPropsWarning(props);
    }
    var formatList = toArray4(getDefaultFormat(format3, picker, showTime, use12Hours));
    var panelDivRef = React197.useRef(null);
    var inputDivRef = React197.useRef(null);
    var containerRef = React197.useRef(null);
    var _useMergedState = useMergedState(null, {
      value,
      defaultValue
    }), _useMergedState2 = _slicedToArray(_useMergedState, 2), mergedValue = _useMergedState2[0], setInnerValue = _useMergedState2[1];
    var _React$useState = React197.useState(mergedValue), _React$useState2 = _slicedToArray(_React$useState, 2), selectedValue = _React$useState2[0], setSelectedValue = _React$useState2[1];
    var operationRef = React197.useRef(null);
    var _useMergedState3 = useMergedState(false, {
      value: open,
      defaultValue: defaultOpen,
      postState: function postState(postOpen) {
        return disabled ? false : postOpen;
      },
      onChange: function onChange2(newOpen) {
        if (onOpenChange) {
          onOpenChange(newOpen);
        }
        if (!newOpen && operationRef.current && operationRef.current.onClose) {
          operationRef.current.onClose();
        }
      }
    }), _useMergedState4 = _slicedToArray(_useMergedState3, 2), mergedOpen = _useMergedState4[0], triggerInnerOpen = _useMergedState4[1];
    var _useValueTexts = useValueTexts(selectedValue, {
      formatList,
      generateConfig: generateConfig2,
      locale: locale4
    }), _useValueTexts2 = _slicedToArray(_useValueTexts, 2), valueTexts = _useValueTexts2[0], firstValueText = _useValueTexts2[1];
    var _useTextValueMapping = useTextValueMapping({
      valueTexts,
      onTextChange: function onTextChange(newText) {
        var inputDate = parseValue(newText, {
          locale: locale4,
          formatList,
          generateConfig: generateConfig2
        });
        if (inputDate && (!disabledDate || !disabledDate(inputDate))) {
          setSelectedValue(inputDate);
        }
      }
    }), _useTextValueMapping2 = _slicedToArray(_useTextValueMapping, 3), text = _useTextValueMapping2[0], triggerTextChange = _useTextValueMapping2[1], resetText = _useTextValueMapping2[2];
    var triggerChange = function triggerChange2(newValue) {
      setSelectedValue(newValue);
      setInnerValue(newValue);
      if (onChange && !isEqual2(generateConfig2, mergedValue, newValue)) {
        onChange(newValue, newValue ? formatValue(newValue, {
          generateConfig: generateConfig2,
          locale: locale4,
          format: formatList[0]
        }) : "");
      }
    };
    var triggerOpen = function triggerOpen2(newOpen) {
      if (disabled && newOpen) {
        return;
      }
      triggerInnerOpen(newOpen);
    };
    var forwardKeyDown = function forwardKeyDown2(e3) {
      if (mergedOpen && operationRef.current && operationRef.current.onKeyDown) {
        return operationRef.current.onKeyDown(e3);
      }
      {
        warning_default(false, "Picker not correct forward KeyDown operation. Please help to fire issue about this.");
        return false;
      }
    };
    var onInternalClick = function onInternalClick2() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      onClick === null || onClick === void 0 ? void 0 : onClick.apply(void 0, args);
      if (inputRef.current) {
        inputRef.current.focus();
        triggerOpen(true);
      }
    };
    var _usePickerInput = usePickerInput({
      blurToCancel: needConfirmButton,
      open: mergedOpen,
      value: text,
      triggerOpen,
      forwardKeyDown,
      isClickOutside: function isClickOutside(target) {
        return !elementsContains([panelDivRef.current, inputDivRef.current, containerRef.current], target);
      },
      onSubmit: function onSubmit() {
        if (
          // When user typing disabledDate with keyboard and enter, this value will be empty
          !selectedValue || // Normal disabled check
          disabledDate && disabledDate(selectedValue)
        ) {
          return false;
        }
        triggerChange(selectedValue);
        triggerOpen(false);
        resetText();
        return true;
      },
      onCancel: function onCancel() {
        triggerOpen(false);
        setSelectedValue(mergedValue);
        resetText();
      },
      onKeyDown: function onKeyDown3(e3, preventDefault) {
        _onKeyDown === null || _onKeyDown === void 0 ? void 0 : _onKeyDown(e3, preventDefault);
      },
      onFocus,
      onBlur
    }), _usePickerInput2 = _slicedToArray(_usePickerInput, 2), inputProps = _usePickerInput2[0], _usePickerInput2$ = _usePickerInput2[1], focused = _usePickerInput2$.focused, typing = _usePickerInput2$.typing;
    React197.useEffect(function() {
      if (!mergedOpen) {
        setSelectedValue(mergedValue);
        if (!valueTexts.length || valueTexts[0] === "") {
          triggerTextChange("");
        } else if (firstValueText !== text) {
          resetText();
        }
      }
    }, [mergedOpen, valueTexts]);
    React197.useEffect(function() {
      if (!mergedOpen) {
        resetText();
      }
    }, [picker]);
    React197.useEffect(function() {
      setSelectedValue(mergedValue);
    }, [mergedValue]);
    if (pickerRef) {
      pickerRef.current = {
        focus: function focus() {
          if (inputRef.current) {
            inputRef.current.focus();
          }
        },
        blur: function blur() {
          if (inputRef.current) {
            inputRef.current.blur();
          }
        }
      };
    }
    var _useHoverValue = useHoverValue(text, {
      formatList,
      generateConfig: generateConfig2,
      locale: locale4
    }), _useHoverValue2 = _slicedToArray(_useHoverValue, 3), hoverValue = _useHoverValue2[0], onEnter = _useHoverValue2[1], onLeave = _useHoverValue2[2];
    var panelProps = _objectSpread2(_objectSpread2({}, props), {}, {
      className: void 0,
      style: void 0,
      pickerValue: void 0,
      onPickerValueChange: void 0,
      onChange: null
    });
    var panelNode = /* @__PURE__ */ React197.createElement(PickerPanel_default, _extends({}, panelProps, {
      generateConfig: generateConfig2,
      className: (0, import_classnames59.default)(_defineProperty({}, "".concat(prefixCls, "-panel-focused"), !typing)),
      value: selectedValue,
      locale: locale4,
      tabIndex: -1,
      onSelect: function onSelect(date4) {
        _onSelect === null || _onSelect === void 0 ? void 0 : _onSelect(date4);
        setSelectedValue(date4);
      },
      direction,
      onPanelChange: function onPanelChange(viewDate, mode) {
        var onPanelChange2 = props.onPanelChange;
        onLeave(true);
        onPanelChange2 === null || onPanelChange2 === void 0 ? void 0 : onPanelChange2(viewDate, mode);
      }
    }));
    if (panelRender) {
      panelNode = panelRender(panelNode);
    }
    var panel = /* @__PURE__ */ React197.createElement("div", {
      className: "".concat(prefixCls, "-panel-container"),
      onMouseDown: function onMouseDown2(e3) {
        e3.preventDefault();
      }
    }, panelNode);
    var suffixNode;
    if (suffixIcon) {
      suffixNode = /* @__PURE__ */ React197.createElement("span", {
        className: "".concat(prefixCls, "-suffix")
      }, suffixIcon);
    }
    var clearNode;
    if (allowClear && mergedValue && !disabled) {
      clearNode = /* @__PURE__ */ React197.createElement("span", {
        onMouseDown: function onMouseDown2(e3) {
          e3.preventDefault();
          e3.stopPropagation();
        },
        onMouseUp: function onMouseUp2(e3) {
          e3.preventDefault();
          e3.stopPropagation();
          triggerChange(null);
          triggerOpen(false);
        },
        className: "".concat(prefixCls, "-clear"),
        role: "button"
      }, clearIcon || /* @__PURE__ */ React197.createElement("span", {
        className: "".concat(prefixCls, "-clear-btn")
      }));
    }
    var mergedInputProps = _objectSpread2(_objectSpread2(_objectSpread2({
      id: id2,
      tabIndex,
      disabled,
      readOnly: inputReadOnly || typeof formatList[0] === "function" || !typing,
      value: hoverValue || text,
      onChange: function onChange2(e3) {
        triggerTextChange(e3.target.value);
      },
      autoFocus,
      placeholder,
      ref: inputRef,
      title: text
    }, inputProps), {}, {
      size: getInputSize(picker, formatList[0], generateConfig2)
    }, getDataOrAriaProps2(props)), {}, {
      autoComplete
    });
    var inputNode = inputRender ? inputRender(mergedInputProps) : /* @__PURE__ */ React197.createElement("input", mergedInputProps);
    if (true) {
      warning_default(!defaultOpenValue, "`defaultOpenValue` may confuse user for the current value status. Please use `defaultValue` instead.");
    }
    var onContextSelect = function onContextSelect2(date4, type4) {
      if (type4 === "submit" || type4 !== "key" && !needConfirmButton) {
        triggerChange(date4);
        triggerOpen(false);
      }
    };
    var popupPlacement = direction === "rtl" ? "bottomRight" : "bottomLeft";
    return /* @__PURE__ */ React197.createElement(PanelContext_default.Provider, {
      value: {
        operationRef,
        hideHeader: picker === "time",
        panelRef: panelDivRef,
        onSelect: onContextSelect,
        open: mergedOpen,
        defaultOpenValue,
        onDateMouseEnter: onEnter,
        onDateMouseLeave: onLeave
      }
    }, /* @__PURE__ */ React197.createElement(PickerTrigger_default, {
      visible: mergedOpen,
      popupElement: panel,
      popupStyle,
      prefixCls,
      dropdownClassName,
      dropdownAlign,
      getPopupContainer,
      transitionName: transitionName2,
      popupPlacement,
      direction
    }, /* @__PURE__ */ React197.createElement("div", {
      ref: containerRef,
      className: (0, import_classnames59.default)(prefixCls, className, (_classNames2 = {}, _defineProperty(_classNames2, "".concat(prefixCls, "-disabled"), disabled), _defineProperty(_classNames2, "".concat(prefixCls, "-focused"), focused), _defineProperty(_classNames2, "".concat(prefixCls, "-rtl"), direction === "rtl"), _classNames2)),
      style: style3,
      onMouseDown,
      onMouseUp,
      onMouseEnter,
      onMouseLeave,
      onContextMenu,
      onClick: onInternalClick
    }, /* @__PURE__ */ React197.createElement("div", {
      className: (0, import_classnames59.default)("".concat(prefixCls, "-input"), _defineProperty({}, "".concat(prefixCls, "-input-placeholder"), !!hoverValue)),
      ref: inputDivRef
    }, inputNode, suffixNode, clearNode))));
  }
  var Picker = /* @__PURE__ */ function(_React$Component) {
    _inherits(Picker2, _React$Component);
    var _super = _createSuper(Picker2);
    function Picker2() {
      var _this;
      _classCallCheck(this, Picker2);
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      _this = _super.call.apply(_super, [this].concat(args));
      _this.pickerRef = /* @__PURE__ */ React197.createRef();
      _this.focus = function() {
        if (_this.pickerRef.current) {
          _this.pickerRef.current.focus();
        }
      };
      _this.blur = function() {
        if (_this.pickerRef.current) {
          _this.pickerRef.current.blur();
        }
      };
      return _this;
    }
    _createClass(Picker2, [{
      key: "render",
      value: function render2() {
        return /* @__PURE__ */ React197.createElement(InnerPicker, _extends({}, this.props, {
          pickerRef: this.pickerRef
        }));
      }
    }]);
    return Picker2;
  }(React197.Component);
  var Picker_default = Picker;

  // node_modules/rc-picker/es/RangePicker.js
  var React200 = __toESM(require_react());
  var import_react52 = __toESM(require_react());
  var import_classnames60 = __toESM(require_classnames());

  // node_modules/rc-picker/es/hooks/useRangeDisabled.js
  var React198 = __toESM(require_react());
  function useRangeDisabled(_ref, disabledStart, disabledEnd) {
    var picker = _ref.picker, locale4 = _ref.locale, selectedValue = _ref.selectedValue, disabledDate = _ref.disabledDate, disabled = _ref.disabled, generateConfig2 = _ref.generateConfig;
    var startDate = getValue3(selectedValue, 0);
    var endDate = getValue3(selectedValue, 1);
    function weekFirstDate(date4) {
      return generateConfig2.locale.getWeekFirstDate(locale4.locale, date4);
    }
    function monthNumber(date4) {
      var year = generateConfig2.getYear(date4);
      var month = generateConfig2.getMonth(date4);
      return year * 100 + month;
    }
    function quarterNumber(date4) {
      var year = generateConfig2.getYear(date4);
      var quarter = getQuarter(generateConfig2, date4);
      return year * 10 + quarter;
    }
    var disabledStartDate = React198.useCallback(function(date4) {
      if (disabledDate && disabledDate(date4)) {
        return true;
      }
      if (disabled[1] && endDate) {
        return !isSameDate(generateConfig2, date4, endDate) && generateConfig2.isAfter(date4, endDate);
      }
      if (disabledStart && endDate) {
        switch (picker) {
          case "quarter":
            return quarterNumber(date4) > quarterNumber(endDate);
          case "month":
            return monthNumber(date4) > monthNumber(endDate);
          case "week":
            return weekFirstDate(date4) > weekFirstDate(endDate);
          default:
            return !isSameDate(generateConfig2, date4, endDate) && generateConfig2.isAfter(date4, endDate);
        }
      }
      return false;
    }, [disabledDate, disabled[1], endDate, disabledStart]);
    var disabledEndDate = React198.useCallback(function(date4) {
      if (disabledDate && disabledDate(date4)) {
        return true;
      }
      if (disabled[0] && startDate) {
        return !isSameDate(generateConfig2, date4, endDate) && generateConfig2.isAfter(startDate, date4);
      }
      if (disabledEnd && startDate) {
        switch (picker) {
          case "quarter":
            return quarterNumber(date4) < quarterNumber(startDate);
          case "month":
            return monthNumber(date4) < monthNumber(startDate);
          case "week":
            return weekFirstDate(date4) < weekFirstDate(startDate);
          default:
            return !isSameDate(generateConfig2, date4, startDate) && generateConfig2.isAfter(startDate, date4);
        }
      }
      return false;
    }, [disabledDate, disabled[0], startDate, disabledEnd]);
    return [disabledStartDate, disabledEndDate];
  }

  // node_modules/rc-picker/es/hooks/useRangeViewDates.js
  var React199 = __toESM(require_react());
  function getStartEndDistance(startDate, endDate, picker, generateConfig2) {
    var startNext = getClosingViewDate(startDate, picker, generateConfig2, 1);
    function getDistance(compareFunc) {
      if (compareFunc(startDate, endDate)) {
        return "same";
      }
      if (compareFunc(startNext, endDate)) {
        return "closing";
      }
      return "far";
    }
    switch (picker) {
      case "year":
        return getDistance(function(start, end) {
          return isSameDecade(generateConfig2, start, end);
        });
      case "quarter":
      case "month":
        return getDistance(function(start, end) {
          return isSameYear(generateConfig2, start, end);
        });
      default:
        return getDistance(function(start, end) {
          return isSameMonth(generateConfig2, start, end);
        });
    }
  }
  function getRangeViewDate(values, index2, picker, generateConfig2) {
    var startDate = getValue3(values, 0);
    var endDate = getValue3(values, 1);
    if (index2 === 0) {
      return startDate;
    }
    if (startDate && endDate) {
      var distance = getStartEndDistance(startDate, endDate, picker, generateConfig2);
      switch (distance) {
        case "same":
          return startDate;
        case "closing":
          return startDate;
        default:
          return getClosingViewDate(endDate, picker, generateConfig2, -1);
      }
    }
    return startDate;
  }
  function useRangeViewDates(_ref) {
    var values = _ref.values, picker = _ref.picker, defaultDates = _ref.defaultDates, generateConfig2 = _ref.generateConfig;
    var _React$useState = React199.useState(function() {
      return [getValue3(defaultDates, 0), getValue3(defaultDates, 1)];
    }), _React$useState2 = _slicedToArray(_React$useState, 2), defaultViewDates = _React$useState2[0], setDefaultViewDates = _React$useState2[1];
    var _React$useState3 = React199.useState(null), _React$useState4 = _slicedToArray(_React$useState3, 2), viewDates = _React$useState4[0], setInternalViewDates = _React$useState4[1];
    var startDate = getValue3(values, 0);
    var endDate = getValue3(values, 1);
    function getViewDate(index2) {
      if (defaultViewDates[index2]) {
        return defaultViewDates[index2];
      }
      return getValue3(viewDates, index2) || getRangeViewDate(values, index2, picker, generateConfig2) || startDate || endDate || generateConfig2.getNow();
    }
    function setViewDate(viewDate, index2) {
      if (viewDate) {
        var newViewDates = updateValues(viewDates, viewDate, index2);
        setDefaultViewDates(
          // Should always be an array
          updateValues(defaultViewDates, null, index2) || [null, null]
        );
        var anotherIndex = (index2 + 1) % 2;
        if (!getValue3(values, anotherIndex)) {
          newViewDates = updateValues(newViewDates, viewDate, anotherIndex);
        }
        setInternalViewDates(newViewDates);
      } else if (startDate || endDate) {
        setInternalViewDates(null);
      }
    }
    return [getViewDate, setViewDate];
  }

  // node_modules/rc-picker/es/RangePicker.js
  function reorderValues(values, generateConfig2) {
    if (values && values[0] && values[1] && generateConfig2.isAfter(values[0], values[1])) {
      return [values[1], values[0]];
    }
    return values;
  }
  function canValueTrigger(value, index2, disabled, allowEmpty) {
    if (value) {
      return true;
    }
    if (allowEmpty && allowEmpty[index2]) {
      return true;
    }
    if (disabled[(index2 + 1) % 2]) {
      return true;
    }
    return false;
  }
  function InnerRangePicker(props) {
    var _classNames2, _classNames3, _classNames4;
    var _props$prefixCls = props.prefixCls, prefixCls = _props$prefixCls === void 0 ? "rc-picker" : _props$prefixCls, id2 = props.id, style3 = props.style, className = props.className, popupStyle = props.popupStyle, dropdownClassName = props.dropdownClassName, transitionName2 = props.transitionName, dropdownAlign = props.dropdownAlign, getPopupContainer = props.getPopupContainer, generateConfig2 = props.generateConfig, locale4 = props.locale, placeholder = props.placeholder, autoFocus = props.autoFocus, disabled = props.disabled, format3 = props.format, _props$picker = props.picker, picker = _props$picker === void 0 ? "date" : _props$picker, showTime = props.showTime, use12Hours = props.use12Hours, _props$separator = props.separator, separator = _props$separator === void 0 ? "~" : _props$separator, value = props.value, defaultValue = props.defaultValue, defaultPickerValue = props.defaultPickerValue, open = props.open, defaultOpen = props.defaultOpen, disabledDate = props.disabledDate, _disabledTime = props.disabledTime, dateRender = props.dateRender, panelRender = props.panelRender, ranges = props.ranges, allowEmpty = props.allowEmpty, allowClear = props.allowClear, suffixIcon = props.suffixIcon, clearIcon = props.clearIcon, pickerRef = props.pickerRef, inputReadOnly = props.inputReadOnly, mode = props.mode, renderExtraFooter = props.renderExtraFooter, onChange = props.onChange, onOpenChange = props.onOpenChange, onPanelChange = props.onPanelChange, onCalendarChange = props.onCalendarChange, _onFocus = props.onFocus, onBlur = props.onBlur, onMouseDown = props.onMouseDown, onMouseUp = props.onMouseUp, onMouseEnter = props.onMouseEnter, onMouseLeave = props.onMouseLeave, onClick = props.onClick, _onOk = props.onOk, _onKeyDown = props.onKeyDown, components = props.components, order = props.order, direction = props.direction, activePickerIndex = props.activePickerIndex, _props$autoComplete = props.autoComplete, autoComplete = _props$autoComplete === void 0 ? "off" : _props$autoComplete;
    var needConfirmButton = picker === "date" && !!showTime || picker === "time";
    var openRecordsRef = (0, import_react52.useRef)({});
    var containerRef = (0, import_react52.useRef)(null);
    var panelDivRef = (0, import_react52.useRef)(null);
    var startInputDivRef = (0, import_react52.useRef)(null);
    var endInputDivRef = (0, import_react52.useRef)(null);
    var separatorRef = (0, import_react52.useRef)(null);
    var startInputRef = (0, import_react52.useRef)(null);
    var endInputRef = (0, import_react52.useRef)(null);
    var arrowRef = (0, import_react52.useRef)(null);
    if (true) {
      legacyPropsWarning(props);
    }
    var formatList = toArray4(getDefaultFormat(format3, picker, showTime, use12Hours));
    var _useMergedState = useMergedState(0, {
      value: activePickerIndex
    }), _useMergedState2 = _slicedToArray(_useMergedState, 2), mergedActivePickerIndex = _useMergedState2[0], setMergedActivePickerIndex = _useMergedState2[1];
    var operationRef = (0, import_react52.useRef)(null);
    var mergedDisabled = React200.useMemo(function() {
      if (Array.isArray(disabled)) {
        return disabled;
      }
      return [disabled || false, disabled || false];
    }, [disabled]);
    var _useMergedState3 = useMergedState(null, {
      value,
      defaultValue,
      postState: function postState(values) {
        return picker === "time" && !order ? values : reorderValues(values, generateConfig2);
      }
    }), _useMergedState4 = _slicedToArray(_useMergedState3, 2), mergedValue = _useMergedState4[0], setInnerValue = _useMergedState4[1];
    var _useRangeViewDates = useRangeViewDates({
      values: mergedValue,
      picker,
      defaultDates: defaultPickerValue,
      generateConfig: generateConfig2
    }), _useRangeViewDates2 = _slicedToArray(_useRangeViewDates, 2), getViewDate = _useRangeViewDates2[0], setViewDate = _useRangeViewDates2[1];
    var _useMergedState5 = useMergedState(mergedValue, {
      postState: function postState(values) {
        var postValues = values;
        if (mergedDisabled[0] && mergedDisabled[1]) {
          return postValues;
        }
        for (var i3 = 0; i3 < 2; i3 += 1) {
          if (mergedDisabled[i3] && !postValues && !getValue3(postValues, i3) && !getValue3(allowEmpty, i3)) {
            postValues = updateValues(postValues, generateConfig2.getNow(), i3);
          }
        }
        return postValues;
      }
    }), _useMergedState6 = _slicedToArray(_useMergedState5, 2), selectedValue = _useMergedState6[0], setSelectedValue = _useMergedState6[1];
    var _useMergedState7 = useMergedState([picker, picker], {
      value: mode
    }), _useMergedState8 = _slicedToArray(_useMergedState7, 2), mergedModes = _useMergedState8[0], setInnerModes = _useMergedState8[1];
    (0, import_react52.useEffect)(function() {
      setInnerModes([picker, picker]);
    }, [picker]);
    var triggerModesChange = function triggerModesChange2(modes, values) {
      setInnerModes(modes);
      if (onPanelChange) {
        onPanelChange(values, modes);
      }
    };
    var _useRangeDisabled = useRangeDisabled({
      picker,
      selectedValue,
      locale: locale4,
      disabled: mergedDisabled,
      disabledDate,
      generateConfig: generateConfig2
    }, openRecordsRef.current[1], openRecordsRef.current[0]), _useRangeDisabled2 = _slicedToArray(_useRangeDisabled, 2), disabledStartDate = _useRangeDisabled2[0], disabledEndDate = _useRangeDisabled2[1];
    var _useMergedState9 = useMergedState(false, {
      value: open,
      defaultValue: defaultOpen,
      postState: function postState(postOpen) {
        return mergedDisabled[mergedActivePickerIndex] ? false : postOpen;
      },
      onChange: function onChange2(newOpen) {
        if (onOpenChange) {
          onOpenChange(newOpen);
        }
        if (!newOpen && operationRef.current && operationRef.current.onClose) {
          operationRef.current.onClose();
        }
      }
    }), _useMergedState10 = _slicedToArray(_useMergedState9, 2), mergedOpen = _useMergedState10[0], triggerInnerOpen = _useMergedState10[1];
    var startOpen = mergedOpen && mergedActivePickerIndex === 0;
    var endOpen = mergedOpen && mergedActivePickerIndex === 1;
    var _useState = (0, import_react52.useState)(0), _useState2 = _slicedToArray(_useState, 2), popupMinWidth = _useState2[0], setPopupMinWidth = _useState2[1];
    (0, import_react52.useEffect)(function() {
      if (!mergedOpen && containerRef.current) {
        setPopupMinWidth(containerRef.current.offsetWidth);
      }
    }, [mergedOpen]);
    var triggerRef = React200.useRef();
    function _triggerOpen(newOpen, index2) {
      if (newOpen) {
        clearTimeout(triggerRef.current);
        openRecordsRef.current[index2] = true;
        setMergedActivePickerIndex(index2);
        triggerInnerOpen(newOpen);
        if (!mergedOpen) {
          setViewDate(null, index2);
        }
      } else if (mergedActivePickerIndex === index2) {
        triggerInnerOpen(newOpen);
        var openRecords = openRecordsRef.current;
        triggerRef.current = setTimeout(function() {
          if (openRecords === openRecordsRef.current) {
            openRecordsRef.current = {};
          }
        });
      }
    }
    function triggerOpenAndFocus(index2) {
      _triggerOpen(true, index2);
      setTimeout(function() {
        var inputRef = [startInputRef, endInputRef][index2];
        if (inputRef.current) {
          inputRef.current.focus();
        }
      }, 0);
    }
    function triggerChange(newValue, sourceIndex) {
      var values = newValue;
      var startValue = getValue3(values, 0);
      var endValue = getValue3(values, 1);
      if (startValue && endValue && generateConfig2.isAfter(startValue, endValue)) {
        if (
          // WeekPicker only compare week
          picker === "week" && !isSameWeek(generateConfig2, locale4.locale, startValue, endValue) || // QuotaPicker only compare week
          picker === "quarter" && !isSameQuarter(generateConfig2, startValue, endValue) || // Other non-TimePicker compare date
          picker !== "week" && picker !== "quarter" && picker !== "time" && !isSameDate(generateConfig2, startValue, endValue)
        ) {
          if (sourceIndex === 0) {
            values = [startValue, null];
            endValue = null;
          } else {
            startValue = null;
            values = [null, endValue];
          }
          openRecordsRef.current = _defineProperty({}, sourceIndex, true);
        } else if (picker !== "time" || order !== false) {
          values = reorderValues(values, generateConfig2);
        }
      }
      setSelectedValue(values);
      var startStr2 = values && values[0] ? formatValue(values[0], {
        generateConfig: generateConfig2,
        locale: locale4,
        format: formatList[0]
      }) : "";
      var endStr2 = values && values[1] ? formatValue(values[1], {
        generateConfig: generateConfig2,
        locale: locale4,
        format: formatList[0]
      }) : "";
      if (onCalendarChange) {
        var info = {
          range: sourceIndex === 0 ? "start" : "end"
        };
        onCalendarChange(values, [startStr2, endStr2], info);
      }
      var canStartValueTrigger = canValueTrigger(startValue, 0, mergedDisabled, allowEmpty);
      var canEndValueTrigger = canValueTrigger(endValue, 1, mergedDisabled, allowEmpty);
      var canTrigger = values === null || canStartValueTrigger && canEndValueTrigger;
      if (canTrigger) {
        setInnerValue(values);
        if (onChange && (!isEqual2(generateConfig2, getValue3(mergedValue, 0), startValue) || !isEqual2(generateConfig2, getValue3(mergedValue, 1), endValue))) {
          onChange(values, [startStr2, endStr2]);
        }
      }
      var nextOpenIndex = null;
      if (sourceIndex === 0 && !mergedDisabled[1]) {
        nextOpenIndex = 1;
      } else if (sourceIndex === 1 && !mergedDisabled[0]) {
        nextOpenIndex = 0;
      }
      if (nextOpenIndex !== null && nextOpenIndex !== mergedActivePickerIndex && (!openRecordsRef.current[nextOpenIndex] || !getValue3(values, nextOpenIndex)) && getValue3(values, sourceIndex)) {
        triggerOpenAndFocus(nextOpenIndex);
      } else {
        _triggerOpen(false, sourceIndex);
      }
    }
    var forwardKeyDown = function forwardKeyDown2(e3) {
      if (mergedOpen && operationRef.current && operationRef.current.onKeyDown) {
        return operationRef.current.onKeyDown(e3);
      }
      {
        warning_default(false, "Picker not correct forward KeyDown operation. Please help to fire issue about this.");
        return false;
      }
    };
    var sharedTextHooksProps = {
      formatList,
      generateConfig: generateConfig2,
      locale: locale4
    };
    var _useValueTexts = useValueTexts(getValue3(selectedValue, 0), sharedTextHooksProps), _useValueTexts2 = _slicedToArray(_useValueTexts, 2), startValueTexts = _useValueTexts2[0], firstStartValueText = _useValueTexts2[1];
    var _useValueTexts3 = useValueTexts(getValue3(selectedValue, 1), sharedTextHooksProps), _useValueTexts4 = _slicedToArray(_useValueTexts3, 2), endValueTexts = _useValueTexts4[0], firstEndValueText = _useValueTexts4[1];
    var _onTextChange = function onTextChange(newText, index2) {
      var inputDate = parseValue(newText, {
        locale: locale4,
        formatList,
        generateConfig: generateConfig2
      });
      var disabledFunc = index2 === 0 ? disabledStartDate : disabledEndDate;
      if (inputDate && !disabledFunc(inputDate)) {
        setSelectedValue(updateValues(selectedValue, inputDate, index2));
        setViewDate(inputDate, index2);
      }
    };
    var _useTextValueMapping = useTextValueMapping({
      valueTexts: startValueTexts,
      onTextChange: function onTextChange(newText) {
        return _onTextChange(newText, 0);
      }
    }), _useTextValueMapping2 = _slicedToArray(_useTextValueMapping, 3), startText = _useTextValueMapping2[0], triggerStartTextChange = _useTextValueMapping2[1], resetStartText = _useTextValueMapping2[2];
    var _useTextValueMapping3 = useTextValueMapping({
      valueTexts: endValueTexts,
      onTextChange: function onTextChange(newText) {
        return _onTextChange(newText, 1);
      }
    }), _useTextValueMapping4 = _slicedToArray(_useTextValueMapping3, 3), endText = _useTextValueMapping4[0], triggerEndTextChange = _useTextValueMapping4[1], resetEndText = _useTextValueMapping4[2];
    var _useState3 = (0, import_react52.useState)(null), _useState4 = _slicedToArray(_useState3, 2), rangeHoverValue = _useState4[0], setRangeHoverValue = _useState4[1];
    var _useState5 = (0, import_react52.useState)(null), _useState6 = _slicedToArray(_useState5, 2), hoverRangedValue = _useState6[0], setHoverRangedValue = _useState6[1];
    var _useHoverValue = useHoverValue(startText, {
      formatList,
      generateConfig: generateConfig2,
      locale: locale4
    }), _useHoverValue2 = _slicedToArray(_useHoverValue, 3), startHoverValue = _useHoverValue2[0], onStartEnter = _useHoverValue2[1], onStartLeave = _useHoverValue2[2];
    var _useHoverValue3 = useHoverValue(endText, {
      formatList,
      generateConfig: generateConfig2,
      locale: locale4
    }), _useHoverValue4 = _slicedToArray(_useHoverValue3, 3), endHoverValue = _useHoverValue4[0], onEndEnter = _useHoverValue4[1], onEndLeave = _useHoverValue4[2];
    var onDateMouseEnter = function onDateMouseEnter2(date4) {
      setHoverRangedValue(updateValues(selectedValue, date4, mergedActivePickerIndex));
      if (mergedActivePickerIndex === 0) {
        onStartEnter(date4);
      } else {
        onEndEnter(date4);
      }
    };
    var onDateMouseLeave = function onDateMouseLeave2() {
      setHoverRangedValue(updateValues(selectedValue, null, mergedActivePickerIndex));
      if (mergedActivePickerIndex === 0) {
        onStartLeave();
      } else {
        onEndLeave();
      }
    };
    var getSharedInputHookProps = function getSharedInputHookProps2(index2, resetText) {
      return {
        blurToCancel: needConfirmButton,
        forwardKeyDown,
        onBlur,
        isClickOutside: function isClickOutside(target) {
          return !elementsContains([panelDivRef.current, startInputDivRef.current, endInputDivRef.current, containerRef.current], target);
        },
        onFocus: function onFocus(e3) {
          setMergedActivePickerIndex(index2);
          if (_onFocus) {
            _onFocus(e3);
          }
        },
        triggerOpen: function triggerOpen(newOpen) {
          _triggerOpen(newOpen, index2);
        },
        onSubmit: function onSubmit() {
          if (
            // When user typing disabledDate with keyboard and enter, this value will be empty
            !selectedValue || // Normal disabled check
            disabledDate && disabledDate(selectedValue[index2])
          ) {
            return false;
          }
          triggerChange(selectedValue, index2);
          resetText();
        },
        onCancel: function onCancel() {
          _triggerOpen(false, index2);
          setSelectedValue(mergedValue);
          resetText();
        }
      };
    };
    var currentFocusedKey = (0, import_react52.useRef)("");
    var _usePickerInput = usePickerInput(_objectSpread2(_objectSpread2({}, getSharedInputHookProps(0, resetStartText)), {}, {
      open: startOpen,
      value: startText,
      currentFocusedKey,
      key: "start",
      onKeyDown: function onKeyDown3(e3, preventDefault) {
        _onKeyDown === null || _onKeyDown === void 0 ? void 0 : _onKeyDown(e3, preventDefault);
      }
    })), _usePickerInput2 = _slicedToArray(_usePickerInput, 2), startInputProps = _usePickerInput2[0], _usePickerInput2$ = _usePickerInput2[1], startFocused = _usePickerInput2$.focused, startTyping = _usePickerInput2$.typing;
    var _usePickerInput3 = usePickerInput(_objectSpread2(_objectSpread2({}, getSharedInputHookProps(1, resetEndText)), {}, {
      open: endOpen,
      value: endText,
      currentFocusedKey,
      key: "end",
      onKeyDown: function onKeyDown3(e3, preventDefault) {
        _onKeyDown === null || _onKeyDown === void 0 ? void 0 : _onKeyDown(e3, preventDefault);
      }
    })), _usePickerInput4 = _slicedToArray(_usePickerInput3, 2), endInputProps = _usePickerInput4[0], _usePickerInput4$ = _usePickerInput4[1], endFocused = _usePickerInput4$.focused, endTyping = _usePickerInput4$.typing;
    var onPickerClick = function onPickerClick2(e3) {
      if (onClick) {
        onClick(e3);
      }
      if (!mergedOpen && !startInputRef.current.contains(e3.target) && !endInputRef.current.contains(e3.target)) {
        if (!mergedDisabled[0]) {
          triggerOpenAndFocus(0);
        } else if (!mergedDisabled[1]) {
          triggerOpenAndFocus(1);
        }
      }
    };
    var onPickerMouseDown = function onPickerMouseDown2(e3) {
      if (onMouseDown) {
        onMouseDown(e3);
      }
      if (mergedOpen && (startFocused || endFocused) && !startInputRef.current.contains(e3.target) && !endInputRef.current.contains(e3.target)) {
        e3.preventDefault();
      }
    };
    var startStr = mergedValue && mergedValue[0] ? formatValue(mergedValue[0], {
      locale: locale4,
      format: "YYYYMMDDHHmmss",
      generateConfig: generateConfig2
    }) : "";
    var endStr = mergedValue && mergedValue[1] ? formatValue(mergedValue[1], {
      locale: locale4,
      format: "YYYYMMDDHHmmss",
      generateConfig: generateConfig2
    }) : "";
    (0, import_react52.useEffect)(function() {
      if (!mergedOpen) {
        setSelectedValue(mergedValue);
        if (!startValueTexts.length || startValueTexts[0] === "") {
          triggerStartTextChange("");
        } else if (firstStartValueText !== startText) {
          resetStartText();
        }
        if (!endValueTexts.length || endValueTexts[0] === "") {
          triggerEndTextChange("");
        } else if (firstEndValueText !== endText) {
          resetEndText();
        }
      }
    }, [mergedOpen, startValueTexts, endValueTexts]);
    (0, import_react52.useEffect)(function() {
      setSelectedValue(mergedValue);
    }, [startStr, endStr]);
    if (true) {
      if (value && Array.isArray(disabled) && (getValue3(disabled, 0) && !getValue3(value, 0) || getValue3(disabled, 1) && !getValue3(value, 1))) {
        warning_default(false, "`disabled` should not set with empty `value`. You should set `allowEmpty` or `value` instead.");
      }
    }
    if (pickerRef) {
      pickerRef.current = {
        focus: function focus() {
          if (startInputRef.current) {
            startInputRef.current.focus();
          }
        },
        blur: function blur() {
          if (startInputRef.current) {
            startInputRef.current.blur();
          }
          if (endInputRef.current) {
            endInputRef.current.blur();
          }
        }
      };
    }
    var rangeLabels = Object.keys(ranges || {});
    var rangeList = rangeLabels.map(function(label) {
      var range3 = ranges[label];
      var newValues = typeof range3 === "function" ? range3() : range3;
      return {
        label,
        onClick: function onClick2() {
          triggerChange(newValues, null);
          _triggerOpen(false, mergedActivePickerIndex);
        },
        onMouseEnter: function onMouseEnter2() {
          setRangeHoverValue(newValues);
        },
        onMouseLeave: function onMouseLeave2() {
          setRangeHoverValue(null);
        }
      };
    });
    function renderPanel() {
      var panelPosition = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
      var panelProps = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var panelHoverRangedValue = null;
      if (mergedOpen && hoverRangedValue && hoverRangedValue[0] && hoverRangedValue[1] && generateConfig2.isAfter(hoverRangedValue[1], hoverRangedValue[0])) {
        panelHoverRangedValue = hoverRangedValue;
      }
      var panelShowTime = showTime;
      if (showTime && _typeof(showTime) === "object" && showTime.defaultValue) {
        var timeDefaultValues = showTime.defaultValue;
        panelShowTime = _objectSpread2(_objectSpread2({}, showTime), {}, {
          defaultValue: getValue3(timeDefaultValues, mergedActivePickerIndex) || void 0
        });
      }
      var panelDateRender = null;
      if (dateRender) {
        panelDateRender = function panelDateRender2(date4, today) {
          return dateRender(date4, today, {
            range: mergedActivePickerIndex ? "end" : "start"
          });
        };
      }
      return /* @__PURE__ */ React200.createElement(RangeContext_default.Provider, {
        value: {
          inRange: true,
          panelPosition,
          rangedValue: rangeHoverValue || selectedValue,
          hoverRangedValue: panelHoverRangedValue
        }
      }, /* @__PURE__ */ React200.createElement(PickerPanel_default, _extends({}, props, panelProps, {
        dateRender: panelDateRender,
        showTime: panelShowTime,
        mode: mergedModes[mergedActivePickerIndex],
        generateConfig: generateConfig2,
        style: void 0,
        direction,
        disabledDate: mergedActivePickerIndex === 0 ? disabledStartDate : disabledEndDate,
        disabledTime: function disabledTime(date4) {
          if (_disabledTime) {
            return _disabledTime(date4, mergedActivePickerIndex === 0 ? "start" : "end");
          }
          return false;
        },
        className: (0, import_classnames60.default)(_defineProperty({}, "".concat(prefixCls, "-panel-focused"), mergedActivePickerIndex === 0 ? !startTyping : !endTyping)),
        value: getValue3(selectedValue, mergedActivePickerIndex),
        locale: locale4,
        tabIndex: -1,
        onPanelChange: function onPanelChange2(date4, newMode) {
          if (mergedActivePickerIndex === 0) {
            onStartLeave(true);
          }
          if (mergedActivePickerIndex === 1) {
            onEndLeave(true);
          }
          triggerModesChange(updateValues(mergedModes, newMode, mergedActivePickerIndex), updateValues(selectedValue, date4, mergedActivePickerIndex));
          var viewDate = date4;
          if (panelPosition === "right" && mergedModes[mergedActivePickerIndex] === newMode) {
            viewDate = getClosingViewDate(viewDate, newMode, generateConfig2, -1);
          }
          setViewDate(viewDate, mergedActivePickerIndex);
        },
        onOk: null,
        onSelect: void 0,
        onChange: void 0,
        defaultValue: mergedActivePickerIndex === 0 ? getValue3(selectedValue, 1) : getValue3(selectedValue, 0)
      })));
    }
    var arrowLeft = 0;
    var panelLeft = 0;
    if (mergedActivePickerIndex && startInputDivRef.current && separatorRef.current && panelDivRef.current) {
      arrowLeft = startInputDivRef.current.offsetWidth + separatorRef.current.offsetWidth;
      var arrowMarginLeft = arrowRef.current.offsetLeft > arrowLeft ? arrowRef.current.offsetLeft - arrowLeft : arrowRef.current.offsetLeft;
      if (panelDivRef.current.offsetWidth && arrowRef.current.offsetWidth && arrowLeft > panelDivRef.current.offsetWidth - arrowRef.current.offsetWidth - (direction === "rtl" ? 0 : arrowMarginLeft)) {
        panelLeft = arrowLeft;
      }
    }
    var arrowPositionStyle = direction === "rtl" ? {
      right: arrowLeft
    } : {
      left: arrowLeft
    };
    function renderPanels() {
      var panels;
      var extraNode = getExtraFooter(prefixCls, mergedModes[mergedActivePickerIndex], renderExtraFooter);
      var rangesNode = getRanges({
        prefixCls,
        components,
        needConfirmButton,
        okDisabled: !getValue3(selectedValue, mergedActivePickerIndex) || disabledDate && disabledDate(selectedValue[mergedActivePickerIndex]),
        locale: locale4,
        rangeList,
        onOk: function onOk() {
          if (getValue3(selectedValue, mergedActivePickerIndex)) {
            triggerChange(selectedValue, mergedActivePickerIndex);
            if (_onOk) {
              _onOk(selectedValue);
            }
          }
        }
      });
      if (picker !== "time" && !showTime) {
        var viewDate = getViewDate(mergedActivePickerIndex);
        var nextViewDate = getClosingViewDate(viewDate, picker, generateConfig2);
        var currentMode = mergedModes[mergedActivePickerIndex];
        var showDoublePanel = currentMode === picker;
        var leftPanel = renderPanel(showDoublePanel ? "left" : false, {
          pickerValue: viewDate,
          onPickerValueChange: function onPickerValueChange(newViewDate) {
            setViewDate(newViewDate, mergedActivePickerIndex);
          }
        });
        var rightPanel = renderPanel("right", {
          pickerValue: nextViewDate,
          onPickerValueChange: function onPickerValueChange(newViewDate) {
            setViewDate(getClosingViewDate(newViewDate, picker, generateConfig2, -1), mergedActivePickerIndex);
          }
        });
        if (direction === "rtl") {
          panels = /* @__PURE__ */ React200.createElement(React200.Fragment, null, rightPanel, showDoublePanel && leftPanel);
        } else {
          panels = /* @__PURE__ */ React200.createElement(React200.Fragment, null, leftPanel, showDoublePanel && rightPanel);
        }
      } else {
        panels = renderPanel();
      }
      var mergedNodes = /* @__PURE__ */ React200.createElement(React200.Fragment, null, /* @__PURE__ */ React200.createElement("div", {
        className: "".concat(prefixCls, "-panels")
      }, panels), (extraNode || rangesNode) && /* @__PURE__ */ React200.createElement("div", {
        className: "".concat(prefixCls, "-footer")
      }, extraNode, rangesNode));
      if (panelRender) {
        mergedNodes = panelRender(mergedNodes);
      }
      return /* @__PURE__ */ React200.createElement("div", {
        className: "".concat(prefixCls, "-panel-container"),
        style: {
          marginLeft: panelLeft
        },
        ref: panelDivRef,
        onMouseDown: function onMouseDown2(e3) {
          e3.preventDefault();
        }
      }, mergedNodes);
    }
    var rangePanel = /* @__PURE__ */ React200.createElement("div", {
      className: (0, import_classnames60.default)("".concat(prefixCls, "-range-wrapper"), "".concat(prefixCls, "-").concat(picker, "-range-wrapper")),
      style: {
        minWidth: popupMinWidth
      }
    }, /* @__PURE__ */ React200.createElement("div", {
      ref: arrowRef,
      className: "".concat(prefixCls, "-range-arrow"),
      style: arrowPositionStyle
    }), renderPanels());
    var suffixNode;
    if (suffixIcon) {
      suffixNode = /* @__PURE__ */ React200.createElement("span", {
        className: "".concat(prefixCls, "-suffix")
      }, suffixIcon);
    }
    var clearNode;
    if (allowClear && (getValue3(mergedValue, 0) && !mergedDisabled[0] || getValue3(mergedValue, 1) && !mergedDisabled[1])) {
      clearNode = /* @__PURE__ */ React200.createElement("span", {
        onMouseDown: function onMouseDown2(e3) {
          e3.preventDefault();
          e3.stopPropagation();
        },
        onMouseUp: function onMouseUp2(e3) {
          e3.preventDefault();
          e3.stopPropagation();
          var values = mergedValue;
          if (!mergedDisabled[0]) {
            values = updateValues(values, null, 0);
          }
          if (!mergedDisabled[1]) {
            values = updateValues(values, null, 1);
          }
          triggerChange(values, null);
          _triggerOpen(false, mergedActivePickerIndex);
        },
        className: "".concat(prefixCls, "-clear")
      }, clearIcon || /* @__PURE__ */ React200.createElement("span", {
        className: "".concat(prefixCls, "-clear-btn")
      }));
    }
    var inputSharedProps = {
      size: getInputSize(picker, formatList[0], generateConfig2)
    };
    var activeBarLeft = 0;
    var activeBarWidth = 0;
    if (startInputDivRef.current && endInputDivRef.current && separatorRef.current) {
      if (mergedActivePickerIndex === 0) {
        activeBarWidth = startInputDivRef.current.offsetWidth;
      } else {
        activeBarLeft = arrowLeft;
        activeBarWidth = endInputDivRef.current.offsetWidth;
      }
    }
    var activeBarPositionStyle = direction === "rtl" ? {
      right: activeBarLeft
    } : {
      left: activeBarLeft
    };
    var onContextSelect = function onContextSelect2(date4, type4) {
      var values = updateValues(selectedValue, date4, mergedActivePickerIndex);
      if (type4 === "submit" || type4 !== "key" && !needConfirmButton) {
        triggerChange(values, mergedActivePickerIndex);
        if (mergedActivePickerIndex === 0) {
          onStartLeave();
        } else {
          onEndLeave();
        }
      } else {
        setSelectedValue(values);
      }
    };
    return /* @__PURE__ */ React200.createElement(PanelContext_default.Provider, {
      value: {
        operationRef,
        hideHeader: picker === "time",
        onDateMouseEnter,
        onDateMouseLeave,
        hideRanges: true,
        onSelect: onContextSelect,
        open: mergedOpen
      }
    }, /* @__PURE__ */ React200.createElement(PickerTrigger_default, {
      visible: mergedOpen,
      popupElement: rangePanel,
      popupStyle,
      prefixCls,
      dropdownClassName,
      dropdownAlign,
      getPopupContainer,
      transitionName: transitionName2,
      range: true,
      direction
    }, /* @__PURE__ */ React200.createElement("div", _extends({
      ref: containerRef,
      className: (0, import_classnames60.default)(prefixCls, "".concat(prefixCls, "-range"), className, (_classNames2 = {}, _defineProperty(_classNames2, "".concat(prefixCls, "-disabled"), mergedDisabled[0] && mergedDisabled[1]), _defineProperty(_classNames2, "".concat(prefixCls, "-focused"), mergedActivePickerIndex === 0 ? startFocused : endFocused), _defineProperty(_classNames2, "".concat(prefixCls, "-rtl"), direction === "rtl"), _classNames2)),
      style: style3,
      onClick: onPickerClick,
      onMouseEnter,
      onMouseLeave,
      onMouseDown: onPickerMouseDown,
      onMouseUp
    }, getDataOrAriaProps2(props)), /* @__PURE__ */ React200.createElement("div", {
      className: (0, import_classnames60.default)("".concat(prefixCls, "-input"), (_classNames3 = {}, _defineProperty(_classNames3, "".concat(prefixCls, "-input-active"), mergedActivePickerIndex === 0), _defineProperty(_classNames3, "".concat(prefixCls, "-input-placeholder"), !!startHoverValue), _classNames3)),
      ref: startInputDivRef
    }, /* @__PURE__ */ React200.createElement("input", _extends({
      id: id2,
      disabled: mergedDisabled[0],
      readOnly: inputReadOnly || typeof formatList[0] === "function" || !startTyping,
      value: startHoverValue || startText,
      onChange: function onChange2(e3) {
        triggerStartTextChange(e3.target.value);
      },
      autoFocus,
      placeholder: getValue3(placeholder, 0) || "",
      ref: startInputRef
    }, startInputProps, inputSharedProps, {
      autoComplete
    }))), /* @__PURE__ */ React200.createElement("div", {
      className: "".concat(prefixCls, "-range-separator"),
      ref: separatorRef
    }, separator), /* @__PURE__ */ React200.createElement("div", {
      className: (0, import_classnames60.default)("".concat(prefixCls, "-input"), (_classNames4 = {}, _defineProperty(_classNames4, "".concat(prefixCls, "-input-active"), mergedActivePickerIndex === 1), _defineProperty(_classNames4, "".concat(prefixCls, "-input-placeholder"), !!endHoverValue), _classNames4)),
      ref: endInputDivRef
    }, /* @__PURE__ */ React200.createElement("input", _extends({
      disabled: mergedDisabled[1],
      readOnly: inputReadOnly || typeof formatList[0] === "function" || !endTyping,
      value: endHoverValue || endText,
      onChange: function onChange2(e3) {
        triggerEndTextChange(e3.target.value);
      },
      placeholder: getValue3(placeholder, 1) || "",
      ref: endInputRef
    }, endInputProps, inputSharedProps, {
      autoComplete
    }))), /* @__PURE__ */ React200.createElement("div", {
      className: "".concat(prefixCls, "-active-bar"),
      style: _objectSpread2(_objectSpread2({}, activeBarPositionStyle), {}, {
        width: activeBarWidth,
        position: "absolute"
      })
    }), suffixNode, clearNode)));
  }
  var RangePicker = /* @__PURE__ */ function(_React$Component) {
    _inherits(RangePicker3, _React$Component);
    var _super = _createSuper(RangePicker3);
    function RangePicker3() {
      var _this;
      _classCallCheck(this, RangePicker3);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _super.call.apply(_super, [this].concat(args));
      _this.pickerRef = /* @__PURE__ */ React200.createRef();
      _this.focus = function() {
        if (_this.pickerRef.current) {
          _this.pickerRef.current.focus();
        }
      };
      _this.blur = function() {
        if (_this.pickerRef.current) {
          _this.pickerRef.current.blur();
        }
      };
      return _this;
    }
    _createClass(RangePicker3, [{
      key: "render",
      value: function render2() {
        return /* @__PURE__ */ React200.createElement(InnerRangePicker, _extends({}, this.props, {
          pickerRef: this.pickerRef
        }));
      }
    }]);
    return RangePicker3;
  }(React200.Component);
  var RangePicker_default = RangePicker;

  // node_modules/rc-picker/es/index.js
  var es_default14 = Picker_default;

  // node_modules/antd/es/radio/group.js
  var import_classnames63 = __toESM(require_classnames());
  var React204 = __toESM(require_react());

  // node_modules/antd/es/radio/context.js
  var React201 = __toESM(require_react());
  var RadioGroupContext = /* @__PURE__ */ React201.createContext(null);
  var RadioGroupContextProvider = RadioGroupContext.Provider;
  var context_default4 = RadioGroupContext;
  var RadioOptionTypeContext = /* @__PURE__ */ React201.createContext(null);
  var RadioOptionTypeContextProvider = RadioOptionTypeContext.Provider;

  // node_modules/antd/es/radio/radio.js
  var import_classnames62 = __toESM(require_classnames());

  // node_modules/rc-checkbox/es/index.js
  var import_classnames61 = __toESM(require_classnames());
  var React202 = __toESM(require_react());
  var import_react53 = __toESM(require_react());
  var _excluded36 = ["prefixCls", "className", "style", "checked", "disabled", "defaultChecked", "type", "onChange"];
  var Checkbox = /* @__PURE__ */ (0, import_react53.forwardRef)(function(props, ref) {
    var _classNames;
    var _props$prefixCls = props.prefixCls, prefixCls = _props$prefixCls === void 0 ? "rc-checkbox" : _props$prefixCls, className = props.className, style3 = props.style, checked = props.checked, disabled = props.disabled, _props$defaultChecked = props.defaultChecked, defaultChecked = _props$defaultChecked === void 0 ? false : _props$defaultChecked, _props$type = props.type, type4 = _props$type === void 0 ? "checkbox" : _props$type, onChange = props.onChange, inputProps = _objectWithoutProperties(props, _excluded36);
    var inputRef = (0, import_react53.useRef)(null);
    var _useMergedState = useMergedState(defaultChecked, {
      value: checked
    }), _useMergedState2 = _slicedToArray(_useMergedState, 2), rawValue = _useMergedState2[0], setRawValue = _useMergedState2[1];
    (0, import_react53.useImperativeHandle)(ref, function() {
      return {
        focus: function focus() {
          var _inputRef$current;
          (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.focus();
        },
        blur: function blur() {
          var _inputRef$current2;
          (_inputRef$current2 = inputRef.current) === null || _inputRef$current2 === void 0 ? void 0 : _inputRef$current2.blur();
        },
        input: inputRef.current
      };
    });
    var classString = (0, import_classnames61.default)(prefixCls, className, (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-checked"), rawValue), _defineProperty(_classNames, "".concat(prefixCls, "-disabled"), disabled), _classNames));
    var handleChange = function handleChange2(e3) {
      if (disabled) {
        return;
      }
      if (!("checked" in props)) {
        setRawValue(e3.target.checked);
      }
      onChange === null || onChange === void 0 ? void 0 : onChange({
        target: _objectSpread2(_objectSpread2({}, props), {}, {
          type: type4,
          checked: e3.target.checked
        }),
        stopPropagation: function stopPropagation() {
          e3.stopPropagation();
        },
        preventDefault: function preventDefault() {
          e3.preventDefault();
        },
        nativeEvent: e3.nativeEvent
      });
    };
    return /* @__PURE__ */ React202.createElement("span", {
      className: classString,
      style: style3
    }, /* @__PURE__ */ React202.createElement("input", _extends({}, inputProps, {
      className: "".concat(prefixCls, "-input"),
      ref: inputRef,
      onChange: handleChange,
      disabled,
      checked: !!rawValue,
      type: type4
    })), /* @__PURE__ */ React202.createElement("span", {
      className: "".concat(prefixCls, "-inner")
    }));
  });
  var es_default15 = Checkbox;

  // node_modules/antd/es/radio/radio.js
  var React203 = __toESM(require_react());
  var import_react54 = __toESM(require_react());
  var __rest16 = function(s2, e3) {
    var t4 = {};
    for (var p2 in s2)
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t4[p2] = s2[p2];
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t4[p2[i3]] = s2[p2[i3]];
      }
    return t4;
  };
  var InternalRadio = function InternalRadio2(props, ref) {
    var _classNames;
    var groupContext = React203.useContext(context_default4);
    var radioOptionTypeContext = React203.useContext(RadioOptionTypeContext);
    var _React$useContext = React203.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls, direction = _React$useContext.direction;
    var innerRef = React203.useRef();
    var mergedRef = composeRef(ref, innerRef);
    var _useContext = (0, import_react54.useContext)(FormItemInputContext), isFormItemInput = _useContext.isFormItemInput;
    true ? warning_default2(!("optionType" in props), "Radio", "`optionType` is only support in Radio.Group.") : void 0;
    var onChange = function onChange2(e3) {
      var _a, _b;
      (_a = props.onChange) === null || _a === void 0 ? void 0 : _a.call(props, e3);
      (_b = groupContext === null || groupContext === void 0 ? void 0 : groupContext.onChange) === null || _b === void 0 ? void 0 : _b.call(groupContext, e3);
    };
    var customizePrefixCls = props.prefixCls, className = props.className, children = props.children, style3 = props.style, customDisabled = props.disabled, restProps = __rest16(props, ["prefixCls", "className", "children", "style", "disabled"]);
    var radioPrefixCls = getPrefixCls("radio", customizePrefixCls);
    var prefixCls = ((groupContext === null || groupContext === void 0 ? void 0 : groupContext.optionType) || radioOptionTypeContext) === "button" ? "".concat(radioPrefixCls, "-button") : radioPrefixCls;
    var radioProps = _extends({}, restProps);
    var disabled = React203.useContext(DisabledContext_default);
    radioProps.disabled = customDisabled || disabled;
    if (groupContext) {
      radioProps.name = groupContext.name;
      radioProps.onChange = onChange;
      radioProps.checked = props.value === groupContext.value;
      radioProps.disabled = radioProps.disabled || groupContext.disabled;
    }
    var wrapperClassString = (0, import_classnames62.default)("".concat(prefixCls, "-wrapper"), (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-wrapper-checked"), radioProps.checked), _defineProperty(_classNames, "".concat(prefixCls, "-wrapper-disabled"), radioProps.disabled), _defineProperty(_classNames, "".concat(prefixCls, "-wrapper-rtl"), direction === "rtl"), _defineProperty(_classNames, "".concat(prefixCls, "-wrapper-in-form-item"), isFormItemInput), _classNames), className);
    return (
      // eslint-disable-next-line jsx-a11y/label-has-associated-control
      /* @__PURE__ */ React203.createElement("label", {
        className: wrapperClassString,
        style: style3,
        onMouseEnter: props.onMouseEnter,
        onMouseLeave: props.onMouseLeave
      }, /* @__PURE__ */ React203.createElement(es_default15, _extends({}, radioProps, {
        type: "radio",
        prefixCls,
        ref: mergedRef
      })), children !== void 0 ? /* @__PURE__ */ React203.createElement("span", null, children) : null)
    );
  };
  var Radio = /* @__PURE__ */ React203.forwardRef(InternalRadio);
  if (true) {
    Radio.displayName = "Radio";
  }
  var radio_default = Radio;

  // node_modules/antd/es/radio/group.js
  var RadioGroup = /* @__PURE__ */ React204.forwardRef(function(props, ref) {
    var _classNames;
    var _React$useContext = React204.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls, direction = _React$useContext.direction;
    var size = React204.useContext(SizeContext_default);
    var _useMergedState = useMergedState(props.defaultValue, {
      value: props.value
    }), _useMergedState2 = _slicedToArray(_useMergedState, 2), value = _useMergedState2[0], setValue = _useMergedState2[1];
    var onRadioChange = function onRadioChange2(ev) {
      var lastValue = value;
      var val = ev.target.value;
      if (!("value" in props)) {
        setValue(val);
      }
      var onChange = props.onChange;
      if (onChange && val !== lastValue) {
        onChange(ev);
      }
    };
    var customizePrefixCls = props.prefixCls, _props$className = props.className, className = _props$className === void 0 ? "" : _props$className, options = props.options, _props$buttonStyle = props.buttonStyle, buttonStyle = _props$buttonStyle === void 0 ? "outline" : _props$buttonStyle, disabled = props.disabled, children = props.children, customizeSize = props.size, style3 = props.style, id2 = props.id, onMouseEnter = props.onMouseEnter, onMouseLeave = props.onMouseLeave, onFocus = props.onFocus, onBlur = props.onBlur;
    var prefixCls = getPrefixCls("radio", customizePrefixCls);
    var groupPrefixCls = "".concat(prefixCls, "-group");
    var childrenToRender = children;
    if (options && options.length > 0) {
      childrenToRender = options.map(function(option) {
        if (typeof option === "string" || typeof option === "number") {
          return /* @__PURE__ */ React204.createElement(radio_default, {
            key: option.toString(),
            prefixCls,
            disabled,
            value: option,
            checked: value === option
          }, option);
        }
        return /* @__PURE__ */ React204.createElement(radio_default, {
          key: "radio-group-value-options-".concat(option.value),
          prefixCls,
          disabled: option.disabled || disabled,
          value: option.value,
          checked: value === option.value,
          style: option.style
        }, option.label);
      });
    }
    var mergedSize = customizeSize || size;
    var classString = (0, import_classnames63.default)(groupPrefixCls, "".concat(groupPrefixCls, "-").concat(buttonStyle), (_classNames = {}, _defineProperty(_classNames, "".concat(groupPrefixCls, "-").concat(mergedSize), mergedSize), _defineProperty(_classNames, "".concat(groupPrefixCls, "-rtl"), direction === "rtl"), _classNames), className);
    return /* @__PURE__ */ React204.createElement("div", _extends({}, getDataOrAriaProps(props), {
      className: classString,
      style: style3,
      onMouseEnter,
      onMouseLeave,
      onFocus,
      onBlur,
      id: id2,
      ref
    }), /* @__PURE__ */ React204.createElement(RadioGroupContextProvider, {
      value: {
        onChange: onRadioChange,
        value,
        disabled: props.disabled,
        name: props.name,
        optionType: props.optionType
      }
    }, childrenToRender));
  });
  var group_default = /* @__PURE__ */ React204.memo(RadioGroup);

  // node_modules/antd/es/radio/radioButton.js
  var React205 = __toESM(require_react());
  var __rest17 = function(s2, e3) {
    var t4 = {};
    for (var p2 in s2)
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t4[p2] = s2[p2];
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t4[p2[i3]] = s2[p2[i3]];
      }
    return t4;
  };
  var RadioButton = function RadioButton2(props, ref) {
    var _React$useContext = React205.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls;
    var customizePrefixCls = props.prefixCls, radioProps = __rest17(props, ["prefixCls"]);
    var prefixCls = getPrefixCls("radio", customizePrefixCls);
    return /* @__PURE__ */ React205.createElement(RadioOptionTypeContextProvider, {
      value: "button"
    }, /* @__PURE__ */ React205.createElement(radio_default, _extends({
      prefixCls
    }, radioProps, {
      type: "radio",
      ref
    })));
  };
  var radioButton_default = /* @__PURE__ */ React205.forwardRef(RadioButton);

  // node_modules/antd/es/radio/index.js
  var Radio2 = radio_default;
  Radio2.Button = radioButton_default;
  Radio2.Group = group_default;
  Radio2.__ANT_RADIO = true;
  var radio_default2 = Radio2;

  // node_modules/antd/es/card/Card.js
  var import_classnames81 = __toESM(require_classnames());
  var React231 = __toESM(require_react());

  // node_modules/antd/es/skeleton/Skeleton.js
  var import_classnames72 = __toESM(require_classnames());
  var React215 = __toESM(require_react());

  // node_modules/antd/es/skeleton/Avatar.js
  var import_classnames65 = __toESM(require_classnames());
  var React207 = __toESM(require_react());

  // node_modules/antd/es/skeleton/Element.js
  var import_classnames64 = __toESM(require_classnames());
  var React206 = __toESM(require_react());
  var Element2 = function Element3(props) {
    var _classNames, _classNames2;
    var prefixCls = props.prefixCls, className = props.className, style3 = props.style, size = props.size, shape = props.shape;
    var sizeCls = (0, import_classnames64.default)((_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-lg"), size === "large"), _defineProperty(_classNames, "".concat(prefixCls, "-sm"), size === "small"), _classNames));
    var shapeCls = (0, import_classnames64.default)((_classNames2 = {}, _defineProperty(_classNames2, "".concat(prefixCls, "-circle"), shape === "circle"), _defineProperty(_classNames2, "".concat(prefixCls, "-square"), shape === "square"), _defineProperty(_classNames2, "".concat(prefixCls, "-round"), shape === "round"), _classNames2));
    var sizeStyle = React206.useMemo(function() {
      return typeof size === "number" ? {
        width: size,
        height: size,
        lineHeight: "".concat(size, "px")
      } : {};
    }, [size]);
    return /* @__PURE__ */ React206.createElement("span", {
      className: (0, import_classnames64.default)(prefixCls, sizeCls, shapeCls, className),
      style: _extends(_extends({}, sizeStyle), style3)
    });
  };
  var Element_default = Element2;

  // node_modules/antd/es/skeleton/Avatar.js
  var SkeletonAvatar = function SkeletonAvatar2(props) {
    var customizePrefixCls = props.prefixCls, className = props.className, active = props.active, _props$shape = props.shape, shape = _props$shape === void 0 ? "circle" : _props$shape, _props$size = props.size, size = _props$size === void 0 ? "default" : _props$size;
    var _React$useContext = React207.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls;
    var prefixCls = getPrefixCls("skeleton", customizePrefixCls);
    var otherProps = omit(props, ["prefixCls", "className"]);
    var cls = (0, import_classnames65.default)(prefixCls, "".concat(prefixCls, "-element"), _defineProperty({}, "".concat(prefixCls, "-active"), active), className);
    return /* @__PURE__ */ React207.createElement("div", {
      className: cls
    }, /* @__PURE__ */ React207.createElement(Element_default, _extends({
      prefixCls: "".concat(prefixCls, "-avatar"),
      shape,
      size
    }, otherProps)));
  };
  var Avatar_default = SkeletonAvatar;

  // node_modules/antd/es/skeleton/Button.js
  var import_classnames66 = __toESM(require_classnames());
  var React208 = __toESM(require_react());
  var SkeletonButton = function SkeletonButton2(props) {
    var _classNames;
    var customizePrefixCls = props.prefixCls, className = props.className, active = props.active, _props$block = props.block, block = _props$block === void 0 ? false : _props$block, _props$size = props.size, size = _props$size === void 0 ? "default" : _props$size;
    var _React$useContext = React208.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls;
    var prefixCls = getPrefixCls("skeleton", customizePrefixCls);
    var otherProps = omit(props, ["prefixCls"]);
    var cls = (0, import_classnames66.default)(prefixCls, "".concat(prefixCls, "-element"), (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-active"), active), _defineProperty(_classNames, "".concat(prefixCls, "-block"), block), _classNames), className);
    return /* @__PURE__ */ React208.createElement("div", {
      className: cls
    }, /* @__PURE__ */ React208.createElement(Element_default, _extends({
      prefixCls: "".concat(prefixCls, "-button"),
      size
    }, otherProps)));
  };
  var Button_default = SkeletonButton;

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/DotChartOutlined.js
  var React209 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/DotChartOutlined.js
  var DotChartOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M888 792H200V168c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v688c0 4.4 3.6 8 8 8h752c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zM288 604a64 64 0 10128 0 64 64 0 10-128 0zm118-224a48 48 0 1096 0 48 48 0 10-96 0zm158 228a96 96 0 10192 0 96 96 0 10-192 0zm148-314a56 56 0 10112 0 56 56 0 10-112 0z" } }] }, "name": "dot-chart", "theme": "outlined" };
  var DotChartOutlined_default = DotChartOutlined;

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/DotChartOutlined.js
  var DotChartOutlined2 = function DotChartOutlined3(props, ref) {
    return /* @__PURE__ */ React209.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: DotChartOutlined_default
    }));
  };
  DotChartOutlined2.displayName = "DotChartOutlined";
  var DotChartOutlined_default2 = /* @__PURE__ */ React209.forwardRef(DotChartOutlined2);

  // node_modules/antd/es/skeleton/Node.js
  var import_classnames67 = __toESM(require_classnames());
  var React210 = __toESM(require_react());
  var SkeletonNode = function SkeletonNode2(props) {
    var customizePrefixCls = props.prefixCls, className = props.className, style3 = props.style, active = props.active, children = props.children;
    var _React$useContext = React210.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls;
    var prefixCls = getPrefixCls("skeleton", customizePrefixCls);
    var cls = (0, import_classnames67.default)(prefixCls, "".concat(prefixCls, "-element"), _defineProperty({}, "".concat(prefixCls, "-active"), active), className);
    var content = children !== null && children !== void 0 ? children : /* @__PURE__ */ React210.createElement(DotChartOutlined_default2, null);
    return /* @__PURE__ */ React210.createElement("div", {
      className: cls
    }, /* @__PURE__ */ React210.createElement("div", {
      className: (0, import_classnames67.default)("".concat(prefixCls, "-image"), className),
      style: style3
    }, content));
  };
  var Node_default = SkeletonNode;

  // node_modules/antd/es/skeleton/Image.js
  var import_classnames68 = __toESM(require_classnames());
  var React211 = __toESM(require_react());
  var path = "M365.714286 329.142857q0 45.714286-32.036571 77.677714t-77.677714 32.036571-77.677714-32.036571-32.036571-77.677714 32.036571-77.677714 77.677714-32.036571 77.677714 32.036571 32.036571 77.677714zM950.857143 548.571429l0 256-804.571429 0 0-109.714286 182.857143-182.857143 91.428571 91.428571 292.571429-292.571429zM1005.714286 146.285714l-914.285714 0q-7.460571 0-12.873143 5.412571t-5.412571 12.873143l0 694.857143q0 7.460571 5.412571 12.873143t12.873143 5.412571l914.285714 0q7.460571 0 12.873143-5.412571t5.412571-12.873143l0-694.857143q0-7.460571-5.412571-12.873143t-12.873143-5.412571zM1097.142857 164.571429l0 694.857143q0 37.741714-26.843429 64.585143t-64.585143 26.843429l-914.285714 0q-37.741714 0-64.585143-26.843429t-26.843429-64.585143l0-694.857143q0-37.741714 26.843429-64.585143t64.585143-26.843429l914.285714 0q37.741714 0 64.585143 26.843429t26.843429 64.585143z";
  var SkeletonImage = function SkeletonImage2(props) {
    var customizePrefixCls = props.prefixCls, className = props.className, style3 = props.style, active = props.active;
    var _React$useContext = React211.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls;
    var prefixCls = getPrefixCls("skeleton", customizePrefixCls);
    var cls = (0, import_classnames68.default)(prefixCls, "".concat(prefixCls, "-element"), _defineProperty({}, "".concat(prefixCls, "-active"), active), className);
    return /* @__PURE__ */ React211.createElement("div", {
      className: cls
    }, /* @__PURE__ */ React211.createElement("div", {
      className: (0, import_classnames68.default)("".concat(prefixCls, "-image"), className),
      style: style3
    }, /* @__PURE__ */ React211.createElement("svg", {
      viewBox: "0 0 1098 1024",
      xmlns: "http://www.w3.org/2000/svg",
      className: "".concat(prefixCls, "-image-svg")
    }, /* @__PURE__ */ React211.createElement("path", {
      d: path,
      className: "".concat(prefixCls, "-image-path")
    }))));
  };
  var Image_default = SkeletonImage;

  // node_modules/antd/es/skeleton/Input.js
  var import_classnames69 = __toESM(require_classnames());
  var React212 = __toESM(require_react());
  var SkeletonInput = function SkeletonInput2(props) {
    var _classNames;
    var customizePrefixCls = props.prefixCls, className = props.className, active = props.active, block = props.block, _props$size = props.size, size = _props$size === void 0 ? "default" : _props$size;
    var _React$useContext = React212.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls;
    var prefixCls = getPrefixCls("skeleton", customizePrefixCls);
    var otherProps = omit(props, ["prefixCls"]);
    var cls = (0, import_classnames69.default)(prefixCls, "".concat(prefixCls, "-element"), (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-active"), active), _defineProperty(_classNames, "".concat(prefixCls, "-block"), block), _classNames), className);
    return /* @__PURE__ */ React212.createElement("div", {
      className: cls
    }, /* @__PURE__ */ React212.createElement(Element_default, _extends({
      prefixCls: "".concat(prefixCls, "-input"),
      size
    }, otherProps)));
  };
  var Input_default2 = SkeletonInput;

  // node_modules/antd/es/skeleton/Paragraph.js
  var import_classnames70 = __toESM(require_classnames());
  var React213 = __toESM(require_react());
  var Paragraph = function Paragraph2(props) {
    var getWidth3 = function getWidth4(index2) {
      var width = props.width, _props$rows = props.rows, rows2 = _props$rows === void 0 ? 2 : _props$rows;
      if (Array.isArray(width)) {
        return width[index2];
      }
      if (rows2 - 1 === index2) {
        return width;
      }
      return void 0;
    };
    var prefixCls = props.prefixCls, className = props.className, style3 = props.style, rows = props.rows;
    var rowList = _toConsumableArray(Array(rows)).map(function(_24, index2) {
      return (
        // eslint-disable-next-line react/no-array-index-key
        /* @__PURE__ */ React213.createElement("li", {
          key: index2,
          style: {
            width: getWidth3(index2)
          }
        })
      );
    });
    return /* @__PURE__ */ React213.createElement("ul", {
      className: (0, import_classnames70.default)(prefixCls, className),
      style: style3
    }, rowList);
  };
  var Paragraph_default = Paragraph;

  // node_modules/antd/es/skeleton/Title.js
  var import_classnames71 = __toESM(require_classnames());
  var React214 = __toESM(require_react());
  var Title = function Title2(_ref) {
    var prefixCls = _ref.prefixCls, className = _ref.className, width = _ref.width, style3 = _ref.style;
    return /* @__PURE__ */ React214.createElement("h3", {
      className: (0, import_classnames71.default)(prefixCls, className),
      style: _extends({
        width
      }, style3)
    });
  };
  var Title_default = Title;

  // node_modules/antd/es/skeleton/Skeleton.js
  function getComponentProps(prop) {
    if (prop && _typeof(prop) === "object") {
      return prop;
    }
    return {};
  }
  function getAvatarBasicProps(hasTitle, hasParagraph) {
    if (hasTitle && !hasParagraph) {
      return {
        size: "large",
        shape: "square"
      };
    }
    return {
      size: "large",
      shape: "circle"
    };
  }
  function getTitleBasicProps(hasAvatar, hasParagraph) {
    if (!hasAvatar && hasParagraph) {
      return {
        width: "38%"
      };
    }
    if (hasAvatar && hasParagraph) {
      return {
        width: "50%"
      };
    }
    return {};
  }
  function getParagraphBasicProps(hasAvatar, hasTitle) {
    var basicProps = {};
    if (!hasAvatar || !hasTitle) {
      basicProps.width = "61%";
    }
    if (!hasAvatar && hasTitle) {
      basicProps.rows = 3;
    } else {
      basicProps.rows = 2;
    }
    return basicProps;
  }
  var Skeleton = function Skeleton2(props) {
    var customizePrefixCls = props.prefixCls, loading = props.loading, className = props.className, style3 = props.style, children = props.children, _props$avatar = props.avatar, avatar = _props$avatar === void 0 ? false : _props$avatar, _props$title = props.title, title = _props$title === void 0 ? true : _props$title, _props$paragraph = props.paragraph, paragraph = _props$paragraph === void 0 ? true : _props$paragraph, active = props.active, round = props.round;
    var _React$useContext = React215.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls, direction = _React$useContext.direction;
    var prefixCls = getPrefixCls("skeleton", customizePrefixCls);
    if (loading || !("loading" in props)) {
      var _classNames;
      var hasAvatar = !!avatar;
      var hasTitle = !!title;
      var hasParagraph = !!paragraph;
      var avatarNode;
      if (hasAvatar) {
        var avatarProps = _extends(_extends({
          prefixCls: "".concat(prefixCls, "-avatar")
        }, getAvatarBasicProps(hasTitle, hasParagraph)), getComponentProps(avatar));
        avatarNode = /* @__PURE__ */ React215.createElement("div", {
          className: "".concat(prefixCls, "-header")
        }, /* @__PURE__ */ React215.createElement(Element_default, _extends({}, avatarProps)));
      }
      var contentNode;
      if (hasTitle || hasParagraph) {
        var $title;
        if (hasTitle) {
          var titleProps = _extends(_extends({
            prefixCls: "".concat(prefixCls, "-title")
          }, getTitleBasicProps(hasAvatar, hasParagraph)), getComponentProps(title));
          $title = /* @__PURE__ */ React215.createElement(Title_default, _extends({}, titleProps));
        }
        var paragraphNode;
        if (hasParagraph) {
          var paragraphProps = _extends(_extends({
            prefixCls: "".concat(prefixCls, "-paragraph")
          }, getParagraphBasicProps(hasAvatar, hasTitle)), getComponentProps(paragraph));
          paragraphNode = /* @__PURE__ */ React215.createElement(Paragraph_default, _extends({}, paragraphProps));
        }
        contentNode = /* @__PURE__ */ React215.createElement("div", {
          className: "".concat(prefixCls, "-content")
        }, $title, paragraphNode);
      }
      var cls = (0, import_classnames72.default)(prefixCls, (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-with-avatar"), hasAvatar), _defineProperty(_classNames, "".concat(prefixCls, "-active"), active), _defineProperty(_classNames, "".concat(prefixCls, "-rtl"), direction === "rtl"), _defineProperty(_classNames, "".concat(prefixCls, "-round"), round), _classNames), className);
      return /* @__PURE__ */ React215.createElement("div", {
        className: cls,
        style: style3
      }, avatarNode, contentNode);
    }
    return typeof children !== "undefined" ? children : null;
  };
  Skeleton.Button = Button_default;
  Skeleton.Avatar = Avatar_default;
  Skeleton.Input = Input_default2;
  Skeleton.Image = Image_default;
  Skeleton.Node = Node_default;
  var Skeleton_default = Skeleton;

  // node_modules/antd/es/skeleton/index.js
  var skeleton_default = Skeleton_default;

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/PlusOutlined.js
  var React216 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/PlusOutlined.js
  var PlusOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M482 152h60q8 0 8 8v704q0 8-8 8h-60q-8 0-8-8V160q0-8 8-8z" } }, { "tag": "path", "attrs": { "d": "M192 474h672q8 0 8 8v60q0 8-8 8H160q-8 0-8-8v-60q0-8 8-8z" } }] }, "name": "plus", "theme": "outlined" };
  var PlusOutlined_default = PlusOutlined;

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/PlusOutlined.js
  var PlusOutlined2 = function PlusOutlined3(props, ref) {
    return /* @__PURE__ */ React216.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: PlusOutlined_default
    }));
  };
  PlusOutlined2.displayName = "PlusOutlined";
  var PlusOutlined_default2 = /* @__PURE__ */ React216.forwardRef(PlusOutlined2);

  // node_modules/antd/es/tabs/index.js
  var import_classnames79 = __toESM(require_classnames());

  // node_modules/rc-tabs/es/Tabs.js
  var React227 = __toESM(require_react());
  var import_react62 = __toESM(require_react());
  var import_classnames78 = __toESM(require_classnames());

  // node_modules/rc-tabs/es/TabPanelList/index.js
  var React218 = __toESM(require_react());
  var import_classnames74 = __toESM(require_classnames());

  // node_modules/rc-tabs/es/TabContext.js
  var import_react55 = __toESM(require_react());
  var TabContext_default = /* @__PURE__ */ (0, import_react55.createContext)(null);

  // node_modules/rc-tabs/es/TabPanelList/TabPane.js
  var React217 = __toESM(require_react());
  var import_classnames73 = __toESM(require_classnames());
  var TabPane = /* @__PURE__ */ React217.forwardRef(function(_ref, ref) {
    var prefixCls = _ref.prefixCls, className = _ref.className, style3 = _ref.style, id2 = _ref.id, active = _ref.active, tabKey = _ref.tabKey, children = _ref.children;
    return /* @__PURE__ */ React217.createElement("div", {
      id: id2 && "".concat(id2, "-panel-").concat(tabKey),
      role: "tabpanel",
      tabIndex: active ? 0 : -1,
      "aria-labelledby": id2 && "".concat(id2, "-tab-").concat(tabKey),
      "aria-hidden": !active,
      style: style3,
      className: (0, import_classnames73.default)(prefixCls, active && "".concat(prefixCls, "-active"), className),
      ref
    }, children);
  });
  if (true) {
    TabPane.displayName = "TabPane";
  }
  var TabPane_default = TabPane;

  // node_modules/rc-tabs/es/TabPanelList/index.js
  var _excluded37 = ["key", "forceRender", "style", "className"];
  function TabPanelList(_ref) {
    var id2 = _ref.id, activeKey = _ref.activeKey, animated = _ref.animated, tabPosition = _ref.tabPosition, destroyInactiveTabPane = _ref.destroyInactiveTabPane;
    var _React$useContext = React218.useContext(TabContext_default), prefixCls = _React$useContext.prefixCls, tabs = _React$useContext.tabs;
    var tabPaneAnimated = animated.tabPane;
    var tabPanePrefixCls = "".concat(prefixCls, "-tabpane");
    return /* @__PURE__ */ React218.createElement("div", {
      className: (0, import_classnames74.default)("".concat(prefixCls, "-content-holder"))
    }, /* @__PURE__ */ React218.createElement("div", {
      className: (0, import_classnames74.default)("".concat(prefixCls, "-content"), "".concat(prefixCls, "-content-").concat(tabPosition), _defineProperty({}, "".concat(prefixCls, "-content-animated"), tabPaneAnimated))
    }, tabs.map(function(_ref2) {
      var key2 = _ref2.key, forceRender = _ref2.forceRender, paneStyle = _ref2.style, paneClassName = _ref2.className, restTabProps = _objectWithoutProperties(_ref2, _excluded37);
      var active = key2 === activeKey;
      return /* @__PURE__ */ React218.createElement(es_default3, _extends({
        key: key2,
        visible: active,
        forceRender,
        removeOnLeave: !!destroyInactiveTabPane,
        leavedClassName: "".concat(tabPanePrefixCls, "-hidden")
      }, animated.tabPaneMotion), function(_ref3, ref) {
        var motionStyle = _ref3.style, motionClassName = _ref3.className;
        return /* @__PURE__ */ React218.createElement(TabPane_default, _extends({}, restTabProps, {
          prefixCls: tabPanePrefixCls,
          id: id2,
          tabKey: key2,
          animated: tabPaneAnimated,
          active,
          style: _objectSpread2(_objectSpread2({}, paneStyle), motionStyle),
          className: (0, import_classnames74.default)(paneClassName, motionClassName),
          ref
        }));
      });
    })));
  }

  // node_modules/rc-tabs/es/TabNavList/Wrapper.js
  var React226 = __toESM(require_react());

  // node_modules/rc-tabs/es/TabNavList/index.js
  var import_classnames77 = __toESM(require_classnames());
  var React225 = __toESM(require_react());
  var import_react61 = __toESM(require_react());

  // node_modules/rc-tabs/es/hooks/useOffsets.js
  var import_react56 = __toESM(require_react());
  var DEFAULT_SIZE = {
    width: 0,
    height: 0,
    left: 0,
    top: 0
  };
  function useOffsets(tabs, tabSizes, holderScrollWidth) {
    return (0, import_react56.useMemo)(function() {
      var _tabs$;
      var map = /* @__PURE__ */ new Map();
      var lastOffset = tabSizes.get((_tabs$ = tabs[0]) === null || _tabs$ === void 0 ? void 0 : _tabs$.key) || DEFAULT_SIZE;
      var rightOffset = lastOffset.left + lastOffset.width;
      for (var i3 = 0; i3 < tabs.length; i3 += 1) {
        var key2 = tabs[i3].key;
        var data = tabSizes.get(key2);
        if (!data) {
          var _tabs;
          data = tabSizes.get((_tabs = tabs[i3 - 1]) === null || _tabs === void 0 ? void 0 : _tabs.key) || DEFAULT_SIZE;
        }
        var entity = map.get(key2) || _objectSpread2({}, data);
        entity.right = rightOffset - entity.left - entity.width;
        map.set(key2, entity);
      }
      return map;
    }, [tabs.map(function(tab) {
      return tab.key;
    }).join("_"), tabSizes, holderScrollWidth]);
  }

  // node_modules/rc-tabs/es/hooks/useSyncState.js
  var React219 = __toESM(require_react());
  function useSyncState(defaultState, onChange) {
    var stateRef = React219.useRef(defaultState);
    var _React$useState = React219.useState({}), _React$useState2 = _slicedToArray(_React$useState, 2), forceUpdate = _React$useState2[1];
    function setState(updater) {
      var newValue = typeof updater === "function" ? updater(stateRef.current) : updater;
      if (newValue !== stateRef.current) {
        onChange(newValue, stateRef.current);
      }
      stateRef.current = newValue;
      forceUpdate({});
    }
    return [stateRef.current, setState];
  }

  // node_modules/rc-tabs/es/hooks/useTouchMove.js
  var React220 = __toESM(require_react());
  var import_react57 = __toESM(require_react());
  var MIN_SWIPE_DISTANCE = 0.1;
  var STOP_SWIPE_DISTANCE = 0.01;
  var REFRESH_INTERVAL = 20;
  var SPEED_OFF_MULTIPLE = Math.pow(0.995, REFRESH_INTERVAL);
  function useTouchMove(ref, onOffset) {
    var _useState = (0, import_react57.useState)(), _useState2 = _slicedToArray(_useState, 2), touchPosition = _useState2[0], setTouchPosition = _useState2[1];
    var _useState3 = (0, import_react57.useState)(0), _useState4 = _slicedToArray(_useState3, 2), lastTimestamp = _useState4[0], setLastTimestamp = _useState4[1];
    var _useState5 = (0, import_react57.useState)(0), _useState6 = _slicedToArray(_useState5, 2), lastTimeDiff = _useState6[0], setLastTimeDiff = _useState6[1];
    var _useState7 = (0, import_react57.useState)(), _useState8 = _slicedToArray(_useState7, 2), lastOffset = _useState8[0], setLastOffset = _useState8[1];
    var motionRef = (0, import_react57.useRef)();
    function onTouchStart(e3) {
      var _e$touches$ = e3.touches[0], screenX = _e$touches$.screenX, screenY = _e$touches$.screenY;
      setTouchPosition({
        x: screenX,
        y: screenY
      });
      window.clearInterval(motionRef.current);
    }
    function onTouchMove(e3) {
      if (!touchPosition)
        return;
      e3.preventDefault();
      var _e$touches$2 = e3.touches[0], screenX = _e$touches$2.screenX, screenY = _e$touches$2.screenY;
      setTouchPosition({
        x: screenX,
        y: screenY
      });
      var offsetX = screenX - touchPosition.x;
      var offsetY = screenY - touchPosition.y;
      onOffset(offsetX, offsetY);
      var now2 = Date.now();
      setLastTimestamp(now2);
      setLastTimeDiff(now2 - lastTimestamp);
      setLastOffset({
        x: offsetX,
        y: offsetY
      });
    }
    function onTouchEnd() {
      if (!touchPosition)
        return;
      setTouchPosition(null);
      setLastOffset(null);
      if (lastOffset) {
        var distanceX = lastOffset.x / lastTimeDiff;
        var distanceY = lastOffset.y / lastTimeDiff;
        var absX = Math.abs(distanceX);
        var absY = Math.abs(distanceY);
        if (Math.max(absX, absY) < MIN_SWIPE_DISTANCE)
          return;
        var currentX = distanceX;
        var currentY = distanceY;
        motionRef.current = window.setInterval(function() {
          if (Math.abs(currentX) < STOP_SWIPE_DISTANCE && Math.abs(currentY) < STOP_SWIPE_DISTANCE) {
            window.clearInterval(motionRef.current);
            return;
          }
          currentX *= SPEED_OFF_MULTIPLE;
          currentY *= SPEED_OFF_MULTIPLE;
          onOffset(currentX * REFRESH_INTERVAL, currentY * REFRESH_INTERVAL);
        }, REFRESH_INTERVAL);
      }
    }
    var lastWheelDirectionRef = (0, import_react57.useRef)();
    function onWheel(e3) {
      var deltaX = e3.deltaX, deltaY = e3.deltaY;
      var mixed = 0;
      var absX = Math.abs(deltaX);
      var absY = Math.abs(deltaY);
      if (absX === absY) {
        mixed = lastWheelDirectionRef.current === "x" ? deltaX : deltaY;
      } else if (absX > absY) {
        mixed = deltaX;
        lastWheelDirectionRef.current = "x";
      } else {
        mixed = deltaY;
        lastWheelDirectionRef.current = "y";
      }
      if (onOffset(-mixed, -mixed)) {
        e3.preventDefault();
      }
    }
    var touchEventsRef = (0, import_react57.useRef)(null);
    touchEventsRef.current = {
      onTouchStart,
      onTouchMove,
      onTouchEnd,
      onWheel
    };
    React220.useEffect(function() {
      function onProxyTouchStart(e3) {
        touchEventsRef.current.onTouchStart(e3);
      }
      function onProxyTouchMove(e3) {
        touchEventsRef.current.onTouchMove(e3);
      }
      function onProxyTouchEnd(e3) {
        touchEventsRef.current.onTouchEnd(e3);
      }
      function onProxyWheel(e3) {
        touchEventsRef.current.onWheel(e3);
      }
      document.addEventListener("touchmove", onProxyTouchMove, {
        passive: false
      });
      document.addEventListener("touchend", onProxyTouchEnd, {
        passive: false
      });
      ref.current.addEventListener("touchstart", onProxyTouchStart, {
        passive: false
      });
      ref.current.addEventListener("wheel", onProxyWheel);
      return function() {
        document.removeEventListener("touchmove", onProxyTouchMove);
        document.removeEventListener("touchend", onProxyTouchEnd);
      };
    }, []);
  }

  // node_modules/rc-tabs/es/hooks/useUpdate.js
  var import_react58 = __toESM(require_react());
  function useUpdate(callback) {
    var _useState = (0, import_react58.useState)(0), _useState2 = _slicedToArray(_useState, 2), count = _useState2[0], setCount = _useState2[1];
    var effectRef = (0, import_react58.useRef)(0);
    var callbackRef = (0, import_react58.useRef)();
    callbackRef.current = callback;
    useLayoutUpdateEffect(function() {
      var _callbackRef$current;
      (_callbackRef$current = callbackRef.current) === null || _callbackRef$current === void 0 ? void 0 : _callbackRef$current.call(callbackRef);
    }, [count]);
    return function() {
      if (effectRef.current !== count) {
        return;
      }
      effectRef.current += 1;
      setCount(effectRef.current);
    };
  }
  function useUpdateState(defaultState) {
    var batchRef = (0, import_react58.useRef)([]);
    var _useState3 = (0, import_react58.useState)({}), _useState4 = _slicedToArray(_useState3, 2), forceUpdate = _useState4[1];
    var state = (0, import_react58.useRef)(typeof defaultState === "function" ? defaultState() : defaultState);
    var flushUpdate = useUpdate(function() {
      var current = state.current;
      batchRef.current.forEach(function(callback) {
        current = callback(current);
      });
      batchRef.current = [];
      state.current = current;
      forceUpdate({});
    });
    function updater(callback) {
      batchRef.current.push(callback);
      flushUpdate();
    }
    return [state.current, updater];
  }

  // node_modules/rc-tabs/es/hooks/useVisibleRange.js
  var import_react59 = __toESM(require_react());
  var DEFAULT_SIZE2 = {
    width: 0,
    height: 0,
    left: 0,
    top: 0,
    right: 0
  };
  function useVisibleRange(tabOffsets, visibleTabContentValue, transform, tabContentSizeValue, addNodeSizeValue, operationNodeSizeValue, _ref) {
    var tabs = _ref.tabs, tabPosition = _ref.tabPosition, rtl3 = _ref.rtl;
    var charUnit;
    var position;
    var transformSize;
    if (["top", "bottom"].includes(tabPosition)) {
      charUnit = "width";
      position = rtl3 ? "right" : "left";
      transformSize = Math.abs(transform);
    } else {
      charUnit = "height";
      position = "top";
      transformSize = -transform;
    }
    return (0, import_react59.useMemo)(function() {
      if (!tabs.length) {
        return [0, 0];
      }
      var len = tabs.length;
      var endIndex = len;
      for (var i3 = 0; i3 < len; i3 += 1) {
        var offset4 = tabOffsets.get(tabs[i3].key) || DEFAULT_SIZE2;
        if (offset4[position] + offset4[charUnit] > transformSize + visibleTabContentValue) {
          endIndex = i3 - 1;
          break;
        }
      }
      var startIndex = 0;
      for (var _i = len - 1; _i >= 0; _i -= 1) {
        var _offset = tabOffsets.get(tabs[_i].key) || DEFAULT_SIZE2;
        if (_offset[position] < transformSize) {
          startIndex = _i + 1;
          break;
        }
      }
      return [startIndex, endIndex];
    }, [tabOffsets, visibleTabContentValue, tabContentSizeValue, addNodeSizeValue, operationNodeSizeValue, transformSize, tabPosition, tabs.map(function(tab) {
      return tab.key;
    }).join("_"), rtl3]);
  }

  // node_modules/rc-tabs/es/util.js
  function stringify2(obj) {
    var tgt;
    if (obj instanceof Map) {
      tgt = {};
      obj.forEach(function(v2, k2) {
        tgt[k2] = v2;
      });
    } else {
      tgt = obj;
    }
    return JSON.stringify(tgt);
  }
  var RC_TABS_DOUBLE_QUOTE = "TABS_DQ";
  function genDataNodeKey(key2) {
    return String(key2).replace(/"/g, RC_TABS_DOUBLE_QUOTE);
  }

  // node_modules/rc-tabs/es/TabNavList/AddButton.js
  var React221 = __toESM(require_react());
  function AddButton(_ref, ref) {
    var prefixCls = _ref.prefixCls, editable = _ref.editable, locale4 = _ref.locale, style3 = _ref.style;
    if (!editable || editable.showAdd === false) {
      return null;
    }
    return /* @__PURE__ */ React221.createElement("button", {
      ref,
      type: "button",
      className: "".concat(prefixCls, "-nav-add"),
      style: style3,
      "aria-label": (locale4 === null || locale4 === void 0 ? void 0 : locale4.addAriaLabel) || "Add tab",
      onClick: function onClick(event) {
        editable.onEdit("add", {
          event
        });
      }
    }, editable.addIcon || "+");
  }
  var AddButton_default = /* @__PURE__ */ React221.forwardRef(AddButton);

  // node_modules/rc-tabs/es/TabNavList/ExtraContent.js
  var React222 = __toESM(require_react());
  var ExtraContent = /* @__PURE__ */ React222.forwardRef(function(_ref, ref) {
    var position = _ref.position, prefixCls = _ref.prefixCls, extra = _ref.extra;
    if (!extra)
      return null;
    var content;
    var assertExtra = {};
    if (_typeof(extra) === "object" && !/* @__PURE__ */ React222.isValidElement(extra)) {
      assertExtra = extra;
    } else {
      assertExtra.right = extra;
    }
    if (position === "right") {
      content = assertExtra.right;
    }
    if (position === "left") {
      content = assertExtra.left;
    }
    return content ? /* @__PURE__ */ React222.createElement("div", {
      className: "".concat(prefixCls, "-extra-content"),
      ref
    }, content) : null;
  });
  if (true) {
    ExtraContent.displayName = "ExtraContent";
  }
  var ExtraContent_default = ExtraContent;

  // node_modules/rc-tabs/es/TabNavList/OperationNode.js
  var import_classnames75 = __toESM(require_classnames());
  var React223 = __toESM(require_react());
  var import_react60 = __toESM(require_react());
  function OperationNode(_ref, ref) {
    var prefixCls = _ref.prefixCls, id2 = _ref.id, tabs = _ref.tabs, locale4 = _ref.locale, mobile = _ref.mobile, _ref$moreIcon = _ref.moreIcon, moreIcon = _ref$moreIcon === void 0 ? "More" : _ref$moreIcon, moreTransitionName = _ref.moreTransitionName, style3 = _ref.style, className = _ref.className, editable = _ref.editable, tabBarGutter = _ref.tabBarGutter, rtl3 = _ref.rtl, removeAriaLabel = _ref.removeAriaLabel, onTabClick = _ref.onTabClick, getPopupContainer = _ref.getPopupContainer, popupClassName = _ref.popupClassName;
    var _useState = (0, import_react60.useState)(false), _useState2 = _slicedToArray(_useState, 2), open = _useState2[0], setOpen = _useState2[1];
    var _useState3 = (0, import_react60.useState)(null), _useState4 = _slicedToArray(_useState3, 2), selectedKey = _useState4[0], setSelectedKey = _useState4[1];
    var popupId = "".concat(id2, "-more-popup");
    var dropdownPrefix = "".concat(prefixCls, "-dropdown");
    var selectedItemId = selectedKey !== null ? "".concat(popupId, "-").concat(selectedKey) : null;
    var dropdownAriaLabel = locale4 === null || locale4 === void 0 ? void 0 : locale4.dropdownAriaLabel;
    function onRemoveTab(event, key2) {
      event.preventDefault();
      event.stopPropagation();
      editable.onEdit("remove", {
        key: key2,
        event
      });
    }
    var menu = /* @__PURE__ */ React223.createElement(es_default12, {
      onClick: function onClick(_ref2) {
        var key2 = _ref2.key, domEvent = _ref2.domEvent;
        onTabClick(key2, domEvent);
        setOpen(false);
      },
      prefixCls: "".concat(dropdownPrefix, "-menu"),
      id: popupId,
      tabIndex: -1,
      role: "listbox",
      "aria-activedescendant": selectedItemId,
      selectedKeys: [selectedKey],
      "aria-label": dropdownAriaLabel !== void 0 ? dropdownAriaLabel : "expanded dropdown"
    }, tabs.map(function(tab) {
      var removable = editable && tab.closable !== false && !tab.disabled;
      return /* @__PURE__ */ React223.createElement(MenuItem_default, {
        key: tab.key,
        id: "".concat(popupId, "-").concat(tab.key),
        role: "option",
        "aria-controls": id2 && "".concat(id2, "-panel-").concat(tab.key),
        disabled: tab.disabled
      }, /* @__PURE__ */ React223.createElement("span", null, tab.label), removable && /* @__PURE__ */ React223.createElement("button", {
        type: "button",
        "aria-label": removeAriaLabel || "remove",
        tabIndex: 0,
        className: "".concat(dropdownPrefix, "-menu-item-remove"),
        onClick: function onClick(e3) {
          e3.stopPropagation();
          onRemoveTab(e3, tab.key);
        }
      }, tab.closeIcon || editable.removeIcon || "\xD7"));
    }));
    function selectOffset(offset4) {
      var enabledTabs = tabs.filter(function(tab2) {
        return !tab2.disabled;
      });
      var selectedIndex = enabledTabs.findIndex(function(tab2) {
        return tab2.key === selectedKey;
      }) || 0;
      var len = enabledTabs.length;
      for (var i3 = 0; i3 < len; i3 += 1) {
        selectedIndex = (selectedIndex + offset4 + len) % len;
        var tab = enabledTabs[selectedIndex];
        if (!tab.disabled) {
          setSelectedKey(tab.key);
          return;
        }
      }
    }
    function onKeyDown3(e3) {
      var which = e3.which;
      if (!open) {
        if ([KeyCode_default.DOWN, KeyCode_default.SPACE, KeyCode_default.ENTER].includes(which)) {
          setOpen(true);
          e3.preventDefault();
        }
        return;
      }
      switch (which) {
        case KeyCode_default.UP:
          selectOffset(-1);
          e3.preventDefault();
          break;
        case KeyCode_default.DOWN:
          selectOffset(1);
          e3.preventDefault();
          break;
        case KeyCode_default.ESC:
          setOpen(false);
          break;
        case KeyCode_default.SPACE:
        case KeyCode_default.ENTER:
          if (selectedKey !== null)
            onTabClick(selectedKey, e3);
          break;
      }
    }
    (0, import_react60.useEffect)(function() {
      var ele = document.getElementById(selectedItemId);
      if (ele && ele.scrollIntoView) {
        ele.scrollIntoView(false);
      }
    }, [selectedKey]);
    (0, import_react60.useEffect)(function() {
      if (!open) {
        setSelectedKey(null);
      }
    }, [open]);
    var moreStyle = _defineProperty({}, rtl3 ? "marginRight" : "marginLeft", tabBarGutter);
    if (!tabs.length) {
      moreStyle.visibility = "hidden";
      moreStyle.order = 1;
    }
    var overlayClassName = (0, import_classnames75.default)(_defineProperty({}, "".concat(dropdownPrefix, "-rtl"), rtl3));
    var moreNode = mobile ? null : /* @__PURE__ */ React223.createElement(es_default13, {
      prefixCls: dropdownPrefix,
      overlay: menu,
      trigger: ["hover"],
      visible: tabs.length ? open : false,
      transitionName: moreTransitionName,
      onVisibleChange: setOpen,
      overlayClassName: (0, import_classnames75.default)(overlayClassName, popupClassName),
      mouseEnterDelay: 0.1,
      mouseLeaveDelay: 0.1,
      getPopupContainer
    }, /* @__PURE__ */ React223.createElement("button", {
      type: "button",
      className: "".concat(prefixCls, "-nav-more"),
      style: moreStyle,
      tabIndex: -1,
      "aria-hidden": "true",
      "aria-haspopup": "listbox",
      "aria-controls": popupId,
      id: "".concat(id2, "-more"),
      "aria-expanded": open,
      onKeyDown: onKeyDown3
    }, moreIcon));
    return /* @__PURE__ */ React223.createElement("div", {
      className: (0, import_classnames75.default)("".concat(prefixCls, "-nav-operations"), className),
      style: style3,
      ref
    }, moreNode, /* @__PURE__ */ React223.createElement(AddButton_default, {
      prefixCls,
      locale: locale4,
      editable
    }));
  }
  var OperationNode_default = /* @__PURE__ */ React223.memo(/* @__PURE__ */ React223.forwardRef(OperationNode), function(_24, next) {
    return (
      // https://github.com/ant-design/ant-design/issues/32544
      // We'd better remove syntactic sugar in `rc-menu` since this has perf issue
      next.tabMoving
    );
  });

  // node_modules/rc-tabs/es/TabNavList/TabNode.js
  var import_classnames76 = __toESM(require_classnames());
  var React224 = __toESM(require_react());
  function TabNode(_ref) {
    var _classNames;
    var prefixCls = _ref.prefixCls, id2 = _ref.id, active = _ref.active, _ref$tab = _ref.tab, key2 = _ref$tab.key, label = _ref$tab.label, disabled = _ref$tab.disabled, closeIcon = _ref$tab.closeIcon, closable = _ref.closable, renderWrapper = _ref.renderWrapper, removeAriaLabel = _ref.removeAriaLabel, editable = _ref.editable, onClick = _ref.onClick, onFocus = _ref.onFocus, style3 = _ref.style;
    var tabPrefix = "".concat(prefixCls, "-tab");
    var removable = editable && closable !== false && !disabled;
    function onInternalClick(e3) {
      if (disabled) {
        return;
      }
      onClick(e3);
    }
    function onRemoveTab(event) {
      event.preventDefault();
      event.stopPropagation();
      editable.onEdit("remove", {
        key: key2,
        event
      });
    }
    var node = /* @__PURE__ */ React224.createElement("div", {
      key: key2,
      "data-node-key": genDataNodeKey(key2),
      className: (0, import_classnames76.default)(tabPrefix, (_classNames = {}, _defineProperty(_classNames, "".concat(tabPrefix, "-with-remove"), removable), _defineProperty(_classNames, "".concat(tabPrefix, "-active"), active), _defineProperty(_classNames, "".concat(tabPrefix, "-disabled"), disabled), _classNames)),
      style: style3,
      onClick: onInternalClick
    }, /* @__PURE__ */ React224.createElement("div", {
      role: "tab",
      "aria-selected": active,
      id: id2 && "".concat(id2, "-tab-").concat(key2),
      className: "".concat(tabPrefix, "-btn"),
      "aria-controls": id2 && "".concat(id2, "-panel-").concat(key2),
      "aria-disabled": disabled,
      tabIndex: disabled ? null : 0,
      onClick: function onClick2(e3) {
        e3.stopPropagation();
        onInternalClick(e3);
      },
      onKeyDown: function onKeyDown3(e3) {
        if ([KeyCode_default.SPACE, KeyCode_default.ENTER].includes(e3.which)) {
          e3.preventDefault();
          onInternalClick(e3);
        }
      },
      onFocus
    }, label), removable && /* @__PURE__ */ React224.createElement("button", {
      type: "button",
      "aria-label": removeAriaLabel || "remove",
      tabIndex: 0,
      className: "".concat(tabPrefix, "-remove"),
      onClick: function onClick2(e3) {
        e3.stopPropagation();
        onRemoveTab(e3);
      }
    }, closeIcon || editable.removeIcon || "\xD7"));
    return renderWrapper ? renderWrapper(node) : node;
  }
  var TabNode_default = TabNode;

  // node_modules/rc-tabs/es/TabNavList/index.js
  var getSize = function getSize2(refObj) {
    var _ref = refObj.current || {}, _ref$offsetWidth = _ref.offsetWidth, offsetWidth = _ref$offsetWidth === void 0 ? 0 : _ref$offsetWidth, _ref$offsetHeight = _ref.offsetHeight, offsetHeight = _ref$offsetHeight === void 0 ? 0 : _ref$offsetHeight;
    return [offsetWidth, offsetHeight];
  };
  var getUnitValue = function getUnitValue2(size, tabPositionTopOrBottom) {
    return size[tabPositionTopOrBottom ? 0 : 1];
  };
  function TabNavList(props, ref) {
    var _classNames;
    var _React$useContext = React225.useContext(TabContext_default), prefixCls = _React$useContext.prefixCls, tabs = _React$useContext.tabs;
    var className = props.className, style3 = props.style, id2 = props.id, animated = props.animated, activeKey = props.activeKey, rtl3 = props.rtl, extra = props.extra, editable = props.editable, locale4 = props.locale, tabPosition = props.tabPosition, tabBarGutter = props.tabBarGutter, children = props.children, onTabClick = props.onTabClick, onTabScroll = props.onTabScroll;
    var containerRef = (0, import_react61.useRef)();
    var extraLeftRef = (0, import_react61.useRef)();
    var extraRightRef = (0, import_react61.useRef)();
    var tabsWrapperRef = (0, import_react61.useRef)();
    var tabListRef = (0, import_react61.useRef)();
    var operationsRef = (0, import_react61.useRef)();
    var innerAddButtonRef = (0, import_react61.useRef)();
    var tabPositionTopOrBottom = tabPosition === "top" || tabPosition === "bottom";
    var _useSyncState = useSyncState(0, function(next, prev) {
      if (tabPositionTopOrBottom && onTabScroll) {
        onTabScroll({
          direction: next > prev ? "left" : "right"
        });
      }
    }), _useSyncState2 = _slicedToArray(_useSyncState, 2), transformLeft = _useSyncState2[0], setTransformLeft = _useSyncState2[1];
    var _useSyncState3 = useSyncState(0, function(next, prev) {
      if (!tabPositionTopOrBottom && onTabScroll) {
        onTabScroll({
          direction: next > prev ? "top" : "bottom"
        });
      }
    }), _useSyncState4 = _slicedToArray(_useSyncState3, 2), transformTop = _useSyncState4[0], setTransformTop = _useSyncState4[1];
    var _useState = (0, import_react61.useState)([0, 0]), _useState2 = _slicedToArray(_useState, 2), containerExcludeExtraSize = _useState2[0], setContainerExcludeExtraSize = _useState2[1];
    var _useState3 = (0, import_react61.useState)([0, 0]), _useState4 = _slicedToArray(_useState3, 2), tabContentSize = _useState4[0], setTabContentSize = _useState4[1];
    var _useState5 = (0, import_react61.useState)([0, 0]), _useState6 = _slicedToArray(_useState5, 2), addSize = _useState6[0], setAddSize = _useState6[1];
    var _useState7 = (0, import_react61.useState)([0, 0]), _useState8 = _slicedToArray(_useState7, 2), operationSize = _useState8[0], setOperationSize = _useState8[1];
    var _useUpdateState = useUpdateState(/* @__PURE__ */ new Map()), _useUpdateState2 = _slicedToArray(_useUpdateState, 2), tabSizes = _useUpdateState2[0], setTabSizes = _useUpdateState2[1];
    var tabOffsets = useOffsets(tabs, tabSizes, tabContentSize[0]);
    var containerExcludeExtraSizeValue = getUnitValue(containerExcludeExtraSize, tabPositionTopOrBottom);
    var tabContentSizeValue = getUnitValue(tabContentSize, tabPositionTopOrBottom);
    var addSizeValue = getUnitValue(addSize, tabPositionTopOrBottom);
    var operationSizeValue = getUnitValue(operationSize, tabPositionTopOrBottom);
    var needScroll = containerExcludeExtraSizeValue < tabContentSizeValue + addSizeValue;
    var visibleTabContentValue = needScroll ? containerExcludeExtraSizeValue - operationSizeValue : containerExcludeExtraSizeValue - addSizeValue;
    var operationsHiddenClassName = "".concat(prefixCls, "-nav-operations-hidden");
    var transformMin = 0;
    var transformMax = 0;
    if (!tabPositionTopOrBottom) {
      transformMin = Math.min(0, visibleTabContentValue - tabContentSizeValue);
      transformMax = 0;
    } else if (rtl3) {
      transformMin = 0;
      transformMax = Math.max(0, tabContentSizeValue - visibleTabContentValue);
    } else {
      transformMin = Math.min(0, visibleTabContentValue - tabContentSizeValue);
      transformMax = 0;
    }
    function alignInRange(value) {
      if (value < transformMin) {
        return transformMin;
      }
      if (value > transformMax) {
        return transformMax;
      }
      return value;
    }
    var touchMovingRef = (0, import_react61.useRef)();
    var _useState9 = (0, import_react61.useState)(), _useState10 = _slicedToArray(_useState9, 2), lockAnimation = _useState10[0], setLockAnimation = _useState10[1];
    function doLockAnimation() {
      setLockAnimation(Date.now());
    }
    function clearTouchMoving() {
      window.clearTimeout(touchMovingRef.current);
    }
    useTouchMove(tabsWrapperRef, function(offsetX, offsetY) {
      function doMove(setState, offset4) {
        setState(function(value) {
          var newValue = alignInRange(value + offset4);
          return newValue;
        });
      }
      if (!needScroll) {
        return false;
      }
      if (tabPositionTopOrBottom) {
        doMove(setTransformLeft, offsetX);
      } else {
        doMove(setTransformTop, offsetY);
      }
      clearTouchMoving();
      doLockAnimation();
      return true;
    });
    (0, import_react61.useEffect)(function() {
      clearTouchMoving();
      if (lockAnimation) {
        touchMovingRef.current = window.setTimeout(function() {
          setLockAnimation(0);
        }, 100);
      }
      return clearTouchMoving;
    }, [lockAnimation]);
    var _useVisibleRange = useVisibleRange(
      tabOffsets,
      // Container
      visibleTabContentValue,
      // Transform
      tabPositionTopOrBottom ? transformLeft : transformTop,
      // Tabs
      tabContentSizeValue,
      // Add
      addSizeValue,
      // Operation
      operationSizeValue,
      _objectSpread2(_objectSpread2({}, props), {}, {
        tabs
      })
    ), _useVisibleRange2 = _slicedToArray(_useVisibleRange, 2), visibleStart = _useVisibleRange2[0], visibleEnd = _useVisibleRange2[1];
    var scrollToTab = useEvent(function() {
      var key2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : activeKey;
      var tabOffset = tabOffsets.get(key2) || {
        width: 0,
        height: 0,
        left: 0,
        right: 0,
        top: 0
      };
      if (tabPositionTopOrBottom) {
        var newTransform = transformLeft;
        if (rtl3) {
          if (tabOffset.right < transformLeft) {
            newTransform = tabOffset.right;
          } else if (tabOffset.right + tabOffset.width > transformLeft + visibleTabContentValue) {
            newTransform = tabOffset.right + tabOffset.width - visibleTabContentValue;
          }
        } else if (tabOffset.left < -transformLeft) {
          newTransform = -tabOffset.left;
        } else if (tabOffset.left + tabOffset.width > -transformLeft + visibleTabContentValue) {
          newTransform = -(tabOffset.left + tabOffset.width - visibleTabContentValue);
        }
        setTransformTop(0);
        setTransformLeft(alignInRange(newTransform));
      } else {
        var _newTransform = transformTop;
        if (tabOffset.top < -transformTop) {
          _newTransform = -tabOffset.top;
        } else if (tabOffset.top + tabOffset.height > -transformTop + visibleTabContentValue) {
          _newTransform = -(tabOffset.top + tabOffset.height - visibleTabContentValue);
        }
        setTransformLeft(0);
        setTransformTop(alignInRange(_newTransform));
      }
    });
    var tabNodeStyle = {};
    if (tabPosition === "top" || tabPosition === "bottom") {
      tabNodeStyle[rtl3 ? "marginRight" : "marginLeft"] = tabBarGutter;
    } else {
      tabNodeStyle.marginTop = tabBarGutter;
    }
    var tabNodes = tabs.map(function(tab, i3) {
      var key2 = tab.key;
      return /* @__PURE__ */ React225.createElement(TabNode_default, {
        id: id2,
        prefixCls,
        key: key2,
        tab,
        style: i3 === 0 ? void 0 : tabNodeStyle,
        closable: tab.closable,
        editable,
        active: key2 === activeKey,
        renderWrapper: children,
        removeAriaLabel: locale4 === null || locale4 === void 0 ? void 0 : locale4.removeAriaLabel,
        onClick: function onClick(e3) {
          onTabClick(key2, e3);
        },
        onFocus: function onFocus() {
          scrollToTab(key2);
          doLockAnimation();
          if (!tabsWrapperRef.current) {
            return;
          }
          if (!rtl3) {
            tabsWrapperRef.current.scrollLeft = 0;
          }
          tabsWrapperRef.current.scrollTop = 0;
        }
      });
    });
    var updateTabSizes = function updateTabSizes2() {
      return setTabSizes(function() {
        var newSizes = /* @__PURE__ */ new Map();
        tabs.forEach(function(_ref2) {
          var _tabListRef$current;
          var key2 = _ref2.key;
          var btnNode = (_tabListRef$current = tabListRef.current) === null || _tabListRef$current === void 0 ? void 0 : _tabListRef$current.querySelector('[data-node-key="'.concat(genDataNodeKey(key2), '"]'));
          if (btnNode) {
            newSizes.set(key2, {
              width: btnNode.offsetWidth,
              height: btnNode.offsetHeight,
              left: btnNode.offsetLeft,
              top: btnNode.offsetTop
            });
          }
        });
        return newSizes;
      });
    };
    (0, import_react61.useEffect)(function() {
      updateTabSizes();
    }, [tabs.map(function(tab) {
      return tab.key;
    }).join("_")]);
    var onListHolderResize = useUpdate(function() {
      var containerSize = getSize(containerRef);
      var extraLeftSize = getSize(extraLeftRef);
      var extraRightSize = getSize(extraRightRef);
      setContainerExcludeExtraSize([containerSize[0] - extraLeftSize[0] - extraRightSize[0], containerSize[1] - extraLeftSize[1] - extraRightSize[1]]);
      var newAddSize = getSize(innerAddButtonRef);
      setAddSize(newAddSize);
      var newOperationSize = getSize(operationsRef);
      setOperationSize(newOperationSize);
      var tabContentFullSize = getSize(tabListRef);
      setTabContentSize([tabContentFullSize[0] - newAddSize[0], tabContentFullSize[1] - newAddSize[1]]);
      updateTabSizes();
    });
    var startHiddenTabs = tabs.slice(0, visibleStart);
    var endHiddenTabs = tabs.slice(visibleEnd + 1);
    var hiddenTabs = [].concat(_toConsumableArray(startHiddenTabs), _toConsumableArray(endHiddenTabs));
    var _useState11 = (0, import_react61.useState)(), _useState12 = _slicedToArray(_useState11, 2), inkStyle = _useState12[0], setInkStyle = _useState12[1];
    var activeTabOffset = tabOffsets.get(activeKey);
    var inkBarRafRef = (0, import_react61.useRef)();
    function cleanInkBarRaf() {
      raf_default.cancel(inkBarRafRef.current);
    }
    (0, import_react61.useEffect)(function() {
      var newInkStyle = {};
      if (activeTabOffset) {
        if (tabPositionTopOrBottom) {
          if (rtl3) {
            newInkStyle.right = activeTabOffset.right;
          } else {
            newInkStyle.left = activeTabOffset.left;
          }
          newInkStyle.width = activeTabOffset.width;
        } else {
          newInkStyle.top = activeTabOffset.top;
          newInkStyle.height = activeTabOffset.height;
        }
      }
      cleanInkBarRaf();
      inkBarRafRef.current = raf_default(function() {
        setInkStyle(newInkStyle);
      });
      return cleanInkBarRaf;
    }, [activeTabOffset, tabPositionTopOrBottom, rtl3]);
    (0, import_react61.useEffect)(function() {
      scrollToTab();
    }, [activeKey, transformMin, transformMax, stringify2(activeTabOffset), stringify2(tabOffsets), tabPositionTopOrBottom]);
    (0, import_react61.useEffect)(function() {
      onListHolderResize();
    }, [rtl3]);
    var hasDropdown = !!hiddenTabs.length;
    var wrapPrefix = "".concat(prefixCls, "-nav-wrap");
    var pingLeft;
    var pingRight;
    var pingTop;
    var pingBottom;
    if (tabPositionTopOrBottom) {
      if (rtl3) {
        pingRight = transformLeft > 0;
        pingLeft = transformLeft !== transformMax;
      } else {
        pingLeft = transformLeft < 0;
        pingRight = transformLeft !== transformMin;
      }
    } else {
      pingTop = transformTop < 0;
      pingBottom = transformTop !== transformMin;
    }
    return /* @__PURE__ */ React225.createElement(es_default2, {
      onResize: onListHolderResize
    }, /* @__PURE__ */ React225.createElement("div", {
      ref: useComposeRef(ref, containerRef),
      role: "tablist",
      className: (0, import_classnames77.default)("".concat(prefixCls, "-nav"), className),
      style: style3,
      onKeyDown: function onKeyDown3() {
        doLockAnimation();
      }
    }, /* @__PURE__ */ React225.createElement(ExtraContent_default, {
      ref: extraLeftRef,
      position: "left",
      extra,
      prefixCls
    }), /* @__PURE__ */ React225.createElement("div", {
      className: (0, import_classnames77.default)(wrapPrefix, (_classNames = {}, _defineProperty(_classNames, "".concat(wrapPrefix, "-ping-left"), pingLeft), _defineProperty(_classNames, "".concat(wrapPrefix, "-ping-right"), pingRight), _defineProperty(_classNames, "".concat(wrapPrefix, "-ping-top"), pingTop), _defineProperty(_classNames, "".concat(wrapPrefix, "-ping-bottom"), pingBottom), _classNames)),
      ref: tabsWrapperRef
    }, /* @__PURE__ */ React225.createElement(es_default2, {
      onResize: onListHolderResize
    }, /* @__PURE__ */ React225.createElement("div", {
      ref: tabListRef,
      className: "".concat(prefixCls, "-nav-list"),
      style: {
        transform: "translate(".concat(transformLeft, "px, ").concat(transformTop, "px)"),
        transition: lockAnimation ? "none" : void 0
      }
    }, tabNodes, /* @__PURE__ */ React225.createElement(AddButton_default, {
      ref: innerAddButtonRef,
      prefixCls,
      locale: locale4,
      editable,
      style: _objectSpread2(_objectSpread2({}, tabNodes.length === 0 ? void 0 : tabNodeStyle), {}, {
        visibility: hasDropdown ? "hidden" : null
      })
    }), /* @__PURE__ */ React225.createElement("div", {
      className: (0, import_classnames77.default)("".concat(prefixCls, "-ink-bar"), _defineProperty({}, "".concat(prefixCls, "-ink-bar-animated"), animated.inkBar)),
      style: inkStyle
    })))), /* @__PURE__ */ React225.createElement(OperationNode_default, _extends({}, props, {
      removeAriaLabel: locale4 === null || locale4 === void 0 ? void 0 : locale4.removeAriaLabel,
      ref: operationsRef,
      prefixCls,
      tabs: hiddenTabs,
      className: !hasDropdown && operationsHiddenClassName,
      tabMoving: !!lockAnimation
    })), /* @__PURE__ */ React225.createElement(ExtraContent_default, {
      ref: extraRightRef,
      position: "right",
      extra,
      prefixCls
    })));
  }
  var TabNavList_default = /* @__PURE__ */ React225.forwardRef(TabNavList);

  // node_modules/rc-tabs/es/TabNavList/Wrapper.js
  var _excluded38 = ["renderTabBar"];
  var _excluded212 = ["label", "key"];
  function TabNavListWrapper(_ref) {
    var renderTabBar = _ref.renderTabBar, restProps = _objectWithoutProperties(_ref, _excluded38);
    var _React$useContext = React226.useContext(TabContext_default), tabs = _React$useContext.tabs;
    if (renderTabBar) {
      var tabNavBarProps = _objectSpread2(_objectSpread2({}, restProps), {}, {
        // Legacy support. We do not use this actually
        panes: tabs.map(function(_ref2) {
          var label = _ref2.label, key2 = _ref2.key, restTabProps = _objectWithoutProperties(_ref2, _excluded212);
          return /* @__PURE__ */ React226.createElement(TabPane_default, _extends({
            tab: label,
            key: key2,
            tabKey: key2
          }, restTabProps));
        })
      });
      return renderTabBar(tabNavBarProps, TabNavList_default);
    }
    return /* @__PURE__ */ React226.createElement(TabNavList_default, restProps);
  }

  // node_modules/rc-tabs/es/hooks/useAnimateConfig.js
  function useAnimateConfig() {
    var animated = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
      inkBar: true,
      tabPane: false
    };
    var mergedAnimated;
    if (animated === false) {
      mergedAnimated = {
        inkBar: false,
        tabPane: false
      };
    } else if (animated === true) {
      mergedAnimated = {
        inkBar: true,
        tabPane: false
      };
    } else {
      mergedAnimated = _objectSpread2({
        inkBar: true
      }, _typeof(animated) === "object" ? animated : {});
    }
    if (mergedAnimated.tabPaneMotion && mergedAnimated.tabPane === void 0) {
      mergedAnimated.tabPane = true;
    }
    if (!mergedAnimated.tabPaneMotion && mergedAnimated.tabPane) {
      if (true) {
        warning_default(false, "`animated.tabPane` is true but `animated.tabPaneMotion` is not provided. Motion will not work.");
      }
      mergedAnimated.tabPane = false;
    }
    return mergedAnimated;
  }

  // node_modules/rc-tabs/es/Tabs.js
  var _excluded39 = ["id", "prefixCls", "className", "items", "direction", "activeKey", "defaultActiveKey", "editable", "animated", "tabPosition", "tabBarGutter", "tabBarStyle", "tabBarExtraContent", "locale", "moreIcon", "moreTransitionName", "destroyInactiveTabPane", "renderTabBar", "onChange", "onTabClick", "onTabScroll", "getPopupContainer", "popupClassName"];
  var uuid2 = 0;
  function Tabs(_ref, ref) {
    var _classNames;
    var id2 = _ref.id, _ref$prefixCls = _ref.prefixCls, prefixCls = _ref$prefixCls === void 0 ? "rc-tabs" : _ref$prefixCls, className = _ref.className, items = _ref.items, direction = _ref.direction, activeKey = _ref.activeKey, defaultActiveKey = _ref.defaultActiveKey, editable = _ref.editable, animated = _ref.animated, _ref$tabPosition = _ref.tabPosition, tabPosition = _ref$tabPosition === void 0 ? "top" : _ref$tabPosition, tabBarGutter = _ref.tabBarGutter, tabBarStyle = _ref.tabBarStyle, tabBarExtraContent = _ref.tabBarExtraContent, locale4 = _ref.locale, moreIcon = _ref.moreIcon, moreTransitionName = _ref.moreTransitionName, destroyInactiveTabPane = _ref.destroyInactiveTabPane, renderTabBar = _ref.renderTabBar, onChange = _ref.onChange, onTabClick = _ref.onTabClick, onTabScroll = _ref.onTabScroll, getPopupContainer = _ref.getPopupContainer, popupClassName = _ref.popupClassName, restProps = _objectWithoutProperties(_ref, _excluded39);
    var tabs = React227.useMemo(function() {
      return (items || []).filter(function(item) {
        return item && _typeof(item) === "object" && "key" in item;
      });
    }, [items]);
    var rtl3 = direction === "rtl";
    var mergedAnimated = useAnimateConfig(animated);
    var _useState = (0, import_react62.useState)(false), _useState2 = _slicedToArray(_useState, 2), mobile = _useState2[0], setMobile = _useState2[1];
    (0, import_react62.useEffect)(function() {
      setMobile(isMobile_default());
    }, []);
    var _useMergedState = useMergedState(function() {
      var _tabs$;
      return (_tabs$ = tabs[0]) === null || _tabs$ === void 0 ? void 0 : _tabs$.key;
    }, {
      value: activeKey,
      defaultValue: defaultActiveKey
    }), _useMergedState2 = _slicedToArray(_useMergedState, 2), mergedActiveKey = _useMergedState2[0], setMergedActiveKey = _useMergedState2[1];
    var _useState3 = (0, import_react62.useState)(function() {
      return tabs.findIndex(function(tab) {
        return tab.key === mergedActiveKey;
      });
    }), _useState4 = _slicedToArray(_useState3, 2), activeIndex = _useState4[0], setActiveIndex = _useState4[1];
    (0, import_react62.useEffect)(function() {
      var newActiveIndex = tabs.findIndex(function(tab) {
        return tab.key === mergedActiveKey;
      });
      if (newActiveIndex === -1) {
        var _tabs$newActiveIndex;
        newActiveIndex = Math.max(0, Math.min(activeIndex, tabs.length - 1));
        setMergedActiveKey((_tabs$newActiveIndex = tabs[newActiveIndex]) === null || _tabs$newActiveIndex === void 0 ? void 0 : _tabs$newActiveIndex.key);
      }
      setActiveIndex(newActiveIndex);
    }, [tabs.map(function(tab) {
      return tab.key;
    }).join("_"), mergedActiveKey, activeIndex]);
    var _useMergedState3 = useMergedState(null, {
      value: id2
    }), _useMergedState4 = _slicedToArray(_useMergedState3, 2), mergedId = _useMergedState4[0], setMergedId = _useMergedState4[1];
    (0, import_react62.useEffect)(function() {
      if (!id2) {
        setMergedId("rc-tabs-".concat(false ? "test" : uuid2));
        uuid2 += 1;
      }
    }, []);
    function onInternalTabClick(key2, e3) {
      onTabClick === null || onTabClick === void 0 ? void 0 : onTabClick(key2, e3);
      var isActiveChanged = key2 !== mergedActiveKey;
      setMergedActiveKey(key2);
      if (isActiveChanged) {
        onChange === null || onChange === void 0 ? void 0 : onChange(key2);
      }
    }
    var sharedProps = {
      id: mergedId,
      activeKey: mergedActiveKey,
      animated: mergedAnimated,
      tabPosition,
      rtl: rtl3,
      mobile
    };
    var tabNavBar;
    var tabNavBarProps = _objectSpread2(_objectSpread2({}, sharedProps), {}, {
      editable,
      locale: locale4,
      moreIcon,
      moreTransitionName,
      tabBarGutter,
      onTabClick: onInternalTabClick,
      onTabScroll,
      extra: tabBarExtraContent,
      style: tabBarStyle,
      panes: null,
      getPopupContainer,
      popupClassName
    });
    return /* @__PURE__ */ React227.createElement(TabContext_default.Provider, {
      value: {
        tabs,
        prefixCls
      }
    }, /* @__PURE__ */ React227.createElement("div", _extends({
      ref,
      id: id2,
      className: (0, import_classnames78.default)(prefixCls, "".concat(prefixCls, "-").concat(tabPosition), (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-mobile"), mobile), _defineProperty(_classNames, "".concat(prefixCls, "-editable"), editable), _defineProperty(_classNames, "".concat(prefixCls, "-rtl"), rtl3), _classNames), className)
    }, restProps), tabNavBar, /* @__PURE__ */ React227.createElement(TabNavListWrapper, _extends({}, tabNavBarProps, {
      renderTabBar
    })), /* @__PURE__ */ React227.createElement(TabPanelList, _extends({
      destroyInactiveTabPane
    }, sharedProps, {
      animated: mergedAnimated
    }))));
  }
  var ForwardTabs = /* @__PURE__ */ React227.forwardRef(Tabs);
  if (true) {
    ForwardTabs.displayName = "Tabs";
  }
  var Tabs_default = ForwardTabs;

  // node_modules/rc-tabs/es/index.js
  var es_default16 = Tabs_default;

  // node_modules/antd/es/tabs/index.js
  var React229 = __toESM(require_react());

  // node_modules/antd/es/tabs/hooks/useAnimateConfig.js
  var motion = {
    motionAppear: false,
    motionEnter: true,
    motionLeave: true
  };
  function useAnimateConfig2(prefixCls) {
    var animated = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
      inkBar: true,
      tabPane: false
    };
    var mergedAnimated;
    if (animated === false) {
      mergedAnimated = {
        inkBar: false,
        tabPane: false
      };
    } else if (animated === true) {
      mergedAnimated = {
        inkBar: true,
        tabPane: true
      };
    } else {
      mergedAnimated = _extends({
        inkBar: true
      }, _typeof(animated) === "object" ? animated : {});
    }
    if (mergedAnimated.tabPane) {
      mergedAnimated.tabPaneMotion = _extends(_extends({}, motion), {
        motionName: getTransitionName3(prefixCls, "switch")
      });
    }
    return mergedAnimated;
  }

  // node_modules/antd/es/tabs/hooks/useLegacyItems.js
  var React228 = __toESM(require_react());
  var __rest18 = function(s2, e3) {
    var t4 = {};
    for (var p2 in s2)
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t4[p2] = s2[p2];
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t4[p2[i3]] = s2[p2[i3]];
      }
    return t4;
  };
  function filter(items) {
    return items.filter(function(item) {
      return item;
    });
  }
  function useLegacyItems(items, children) {
    if (items) {
      return items;
    }
    true ? warning_default2(!children, "Tabs", "Tabs.TabPane is deprecated. Please use `items` directly.") : void 0;
    var childrenItems = toArray(children).map(function(node) {
      if (/* @__PURE__ */ React228.isValidElement(node)) {
        var key2 = node.key, props = node.props;
        var _a = props || {}, tab = _a.tab, restProps = __rest18(_a, ["tab"]);
        var item = _extends(_extends({
          key: String(key2)
        }, restProps), {
          label: tab
        });
        return item;
      }
      return null;
    });
    return filter(childrenItems);
  }

  // node_modules/antd/es/tabs/TabPane.js
  var TabPane2 = function TabPane3() {
    return null;
  };
  if (true) {
    TabPane2.displayName = "DeprecatedTabPane";
  }
  var TabPane_default2 = TabPane2;

  // node_modules/antd/es/tabs/index.js
  var __rest19 = function(s2, e3) {
    var t4 = {};
    for (var p2 in s2)
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t4[p2] = s2[p2];
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t4[p2[i3]] = s2[p2[i3]];
      }
    return t4;
  };
  function Tabs2(_a) {
    var type4 = _a.type, className = _a.className, propSize = _a.size, _onEdit = _a.onEdit, hideAdd = _a.hideAdd, centered = _a.centered, addIcon = _a.addIcon, children = _a.children, items = _a.items, animated = _a.animated, props = __rest19(_a, ["type", "className", "size", "onEdit", "hideAdd", "centered", "addIcon", "children", "items", "animated"]);
    var customizePrefixCls = props.prefixCls, _props$moreIcon = props.moreIcon, moreIcon = _props$moreIcon === void 0 ? /* @__PURE__ */ React229.createElement(EllipsisOutlined_default2, null) : _props$moreIcon;
    var _React$useContext = React229.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls, direction = _React$useContext.direction, getPopupContainer = _React$useContext.getPopupContainer;
    var prefixCls = getPrefixCls("tabs", customizePrefixCls);
    var editable;
    if (type4 === "editable-card") {
      editable = {
        onEdit: function onEdit(editType, _ref) {
          var key2 = _ref.key, event = _ref.event;
          _onEdit === null || _onEdit === void 0 ? void 0 : _onEdit(editType === "add" ? event : key2, editType);
        },
        removeIcon: /* @__PURE__ */ React229.createElement(CloseOutlined_default2, null),
        addIcon: addIcon || /* @__PURE__ */ React229.createElement(PlusOutlined_default2, null),
        showAdd: hideAdd !== true
      };
    }
    var rootPrefixCls = getPrefixCls();
    true ? warning_default2(!("onPrevClick" in props) && !("onNextClick" in props), "Tabs", "`onPrevClick` and `onNextClick` has been removed. Please use `onTabScroll` instead.") : void 0;
    var mergedItems = useLegacyItems(items, children);
    var mergedAnimated = useAnimateConfig2(prefixCls, animated);
    return /* @__PURE__ */ React229.createElement(SizeContext_default.Consumer, null, function(contextSize) {
      var _classNames;
      var size = propSize !== void 0 ? propSize : contextSize;
      return /* @__PURE__ */ React229.createElement(es_default16, _extends({
        direction,
        getPopupContainer,
        moreTransitionName: "".concat(rootPrefixCls, "-slide-up")
      }, props, {
        items: mergedItems,
        className: (0, import_classnames79.default)((_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-").concat(size), size), _defineProperty(_classNames, "".concat(prefixCls, "-card"), ["card", "editable-card"].includes(type4)), _defineProperty(_classNames, "".concat(prefixCls, "-editable-card"), type4 === "editable-card"), _defineProperty(_classNames, "".concat(prefixCls, "-centered"), centered), _classNames), className),
        editable,
        moreIcon,
        prefixCls,
        animated: mergedAnimated
      }));
    });
  }
  Tabs2.TabPane = TabPane_default2;
  var tabs_default = Tabs2;

  // node_modules/antd/es/card/Grid.js
  var import_classnames80 = __toESM(require_classnames());
  var React230 = __toESM(require_react());
  var __rest20 = function(s2, e3) {
    var t4 = {};
    for (var p2 in s2)
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t4[p2] = s2[p2];
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t4[p2[i3]] = s2[p2[i3]];
      }
    return t4;
  };
  var Grid = function Grid2(_a) {
    var prefixCls = _a.prefixCls, className = _a.className, _a$hoverable = _a.hoverable, hoverable = _a$hoverable === void 0 ? true : _a$hoverable, props = __rest20(_a, ["prefixCls", "className", "hoverable"]);
    return /* @__PURE__ */ React230.createElement(ConfigConsumer, null, function(_ref) {
      var getPrefixCls = _ref.getPrefixCls;
      var prefix2 = getPrefixCls("card", prefixCls);
      var classString = (0, import_classnames80.default)("".concat(prefix2, "-grid"), className, _defineProperty({}, "".concat(prefix2, "-grid-hoverable"), hoverable));
      return /* @__PURE__ */ React230.createElement("div", _extends({}, props, {
        className: classString
      }));
    });
  };
  var Grid_default = Grid;

  // node_modules/antd/es/card/Card.js
  var __rest21 = function(s2, e3) {
    var t4 = {};
    for (var p2 in s2)
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t4[p2] = s2[p2];
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t4[p2[i3]] = s2[p2[i3]];
      }
    return t4;
  };
  function getAction(actions) {
    var actionList = actions.map(function(action, index2) {
      return (
        // eslint-disable-next-line react/no-array-index-key
        /* @__PURE__ */ React231.createElement("li", {
          style: {
            width: "".concat(100 / actions.length, "%")
          },
          key: "action-".concat(index2)
        }, /* @__PURE__ */ React231.createElement("span", null, action))
      );
    });
    return actionList;
  }
  var Card = /* @__PURE__ */ React231.forwardRef(function(props, ref) {
    var _extends22, _classNames;
    var _React$useContext = React231.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls, direction = _React$useContext.direction;
    var size = React231.useContext(SizeContext_default);
    var onTabChange = function onTabChange2(key2) {
      var _a;
      (_a = props.onTabChange) === null || _a === void 0 ? void 0 : _a.call(props, key2);
    };
    var isContainGrid = function isContainGrid2() {
      var containGrid;
      React231.Children.forEach(props.children, function(element) {
        if (element && element.type && element.type === Grid_default) {
          containGrid = true;
        }
      });
      return containGrid;
    };
    var customizePrefixCls = props.prefixCls, className = props.className, extra = props.extra, _props$headStyle = props.headStyle, headStyle = _props$headStyle === void 0 ? {} : _props$headStyle, _props$bodyStyle = props.bodyStyle, bodyStyle = _props$bodyStyle === void 0 ? {} : _props$bodyStyle, title = props.title, loading = props.loading, _props$bordered = props.bordered, bordered = _props$bordered === void 0 ? true : _props$bordered, customizeSize = props.size, type4 = props.type, cover = props.cover, actions = props.actions, tabList = props.tabList, children = props.children, activeTabKey = props.activeTabKey, defaultActiveTabKey = props.defaultActiveTabKey, tabBarExtraContent = props.tabBarExtraContent, hoverable = props.hoverable, _props$tabProps = props.tabProps, tabProps = _props$tabProps === void 0 ? {} : _props$tabProps, others = __rest21(props, ["prefixCls", "className", "extra", "headStyle", "bodyStyle", "title", "loading", "bordered", "size", "type", "cover", "actions", "tabList", "children", "activeTabKey", "defaultActiveTabKey", "tabBarExtraContent", "hoverable", "tabProps"]);
    var prefixCls = getPrefixCls("card", customizePrefixCls);
    var loadingBlock = /* @__PURE__ */ React231.createElement(skeleton_default, {
      loading: true,
      active: true,
      paragraph: {
        rows: 4
      },
      title: false
    }, children);
    var hasActiveTabKey = activeTabKey !== void 0;
    var extraProps = _extends(_extends({}, tabProps), (_extends22 = {}, _defineProperty(_extends22, hasActiveTabKey ? "activeKey" : "defaultActiveKey", hasActiveTabKey ? activeTabKey : defaultActiveTabKey), _defineProperty(_extends22, "tabBarExtraContent", tabBarExtraContent), _extends22));
    var head;
    var tabs = tabList && tabList.length ? /* @__PURE__ */ React231.createElement(tabs_default, _extends({
      size: "large"
    }, extraProps, {
      className: "".concat(prefixCls, "-head-tabs"),
      onChange: onTabChange,
      items: tabList.map(function(item) {
        var _a;
        return {
          label: item.tab,
          key: item.key,
          disabled: (_a = item.disabled) !== null && _a !== void 0 ? _a : false
        };
      })
    })) : null;
    if (title || extra || tabs) {
      head = /* @__PURE__ */ React231.createElement("div", {
        className: "".concat(prefixCls, "-head"),
        style: headStyle
      }, /* @__PURE__ */ React231.createElement("div", {
        className: "".concat(prefixCls, "-head-wrapper")
      }, title && /* @__PURE__ */ React231.createElement("div", {
        className: "".concat(prefixCls, "-head-title")
      }, title), extra && /* @__PURE__ */ React231.createElement("div", {
        className: "".concat(prefixCls, "-extra")
      }, extra)), tabs);
    }
    var coverDom = cover ? /* @__PURE__ */ React231.createElement("div", {
      className: "".concat(prefixCls, "-cover")
    }, cover) : null;
    var body = /* @__PURE__ */ React231.createElement("div", {
      className: "".concat(prefixCls, "-body"),
      style: bodyStyle
    }, loading ? loadingBlock : children);
    var actionDom = actions && actions.length ? /* @__PURE__ */ React231.createElement("ul", {
      className: "".concat(prefixCls, "-actions")
    }, getAction(actions)) : null;
    var divProps = omit(others, ["onTabChange"]);
    var mergedSize = customizeSize || size;
    var classString = (0, import_classnames81.default)(prefixCls, (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-loading"), loading), _defineProperty(_classNames, "".concat(prefixCls, "-bordered"), bordered), _defineProperty(_classNames, "".concat(prefixCls, "-hoverable"), hoverable), _defineProperty(_classNames, "".concat(prefixCls, "-contain-grid"), isContainGrid()), _defineProperty(_classNames, "".concat(prefixCls, "-contain-tabs"), tabList && tabList.length), _defineProperty(_classNames, "".concat(prefixCls, "-").concat(mergedSize), mergedSize), _defineProperty(_classNames, "".concat(prefixCls, "-type-").concat(type4), !!type4), _defineProperty(_classNames, "".concat(prefixCls, "-rtl"), direction === "rtl"), _classNames), className);
    return /* @__PURE__ */ React231.createElement("div", _extends({
      ref
    }, divProps, {
      className: classString
    }), head, coverDom, body, actionDom);
  });
  var Card_default = Card;

  // node_modules/antd/es/card/Meta.js
  var import_classnames82 = __toESM(require_classnames());
  var React232 = __toESM(require_react());
  var __rest22 = function(s2, e3) {
    var t4 = {};
    for (var p2 in s2)
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t4[p2] = s2[p2];
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t4[p2[i3]] = s2[p2[i3]];
      }
    return t4;
  };
  var Meta = function Meta2(props) {
    return /* @__PURE__ */ React232.createElement(ConfigConsumer, null, function(_ref) {
      var getPrefixCls = _ref.getPrefixCls;
      var customizePrefixCls = props.prefixCls, className = props.className, avatar = props.avatar, title = props.title, description = props.description, others = __rest22(props, ["prefixCls", "className", "avatar", "title", "description"]);
      var prefixCls = getPrefixCls("card", customizePrefixCls);
      var classString = (0, import_classnames82.default)("".concat(prefixCls, "-meta"), className);
      var avatarDom = avatar ? /* @__PURE__ */ React232.createElement("div", {
        className: "".concat(prefixCls, "-meta-avatar")
      }, avatar) : null;
      var titleDom = title ? /* @__PURE__ */ React232.createElement("div", {
        className: "".concat(prefixCls, "-meta-title")
      }, title) : null;
      var descriptionDom = description ? /* @__PURE__ */ React232.createElement("div", {
        className: "".concat(prefixCls, "-meta-description")
      }, description) : null;
      var MetaDetail = titleDom || descriptionDom ? /* @__PURE__ */ React232.createElement("div", {
        className: "".concat(prefixCls, "-meta-detail")
      }, titleDom, descriptionDom) : null;
      return /* @__PURE__ */ React232.createElement("div", _extends({}, others, {
        className: classString
      }), avatarDom, MetaDetail);
    });
  };
  var Meta_default = Meta;

  // node_modules/antd/es/card/index.js
  var Card2 = Card_default;
  Card2.Grid = Grid_default;
  Card2.Meta = Meta_default;
  var card_default = Card2;

  // node_modules/@ant-design/react-slick/es/slider.js
  var import_react69 = __toESM(require_react());

  // node_modules/@ant-design/react-slick/es/inner-slider.js
  var import_react67 = __toESM(require_react());

  // node_modules/@ant-design/react-slick/es/initial-state.js
  var initialState = {
    animating: false,
    autoplaying: null,
    currentDirection: 0,
    currentLeft: null,
    currentSlide: 0,
    direction: 1,
    dragging: false,
    edgeDragged: false,
    initialized: false,
    lazyLoadedList: [],
    listHeight: null,
    listWidth: null,
    scrolling: false,
    slideCount: null,
    slideHeight: null,
    slideWidth: null,
    swipeLeft: null,
    swiped: false,
    // used by swipeEvent. differentites between touch and swipe.
    swiping: false,
    touchObject: {
      startX: 0,
      startY: 0,
      curX: 0,
      curY: 0
    },
    trackStyle: {},
    trackWidth: 0,
    targetSlide: 0
  };
  var initial_state_default = initialState;

  // node_modules/throttle-debounce/esm/index.js
  function throttle2(delay, callback, options) {
    var _ref = options || {}, _ref$noTrailing = _ref.noTrailing, noTrailing = _ref$noTrailing === void 0 ? false : _ref$noTrailing, _ref$noLeading = _ref.noLeading, noLeading = _ref$noLeading === void 0 ? false : _ref$noLeading, _ref$debounceMode = _ref.debounceMode, debounceMode = _ref$debounceMode === void 0 ? void 0 : _ref$debounceMode;
    var timeoutID;
    var cancelled2 = false;
    var lastExec = 0;
    function clearExistingTimeout() {
      if (timeoutID) {
        clearTimeout(timeoutID);
      }
    }
    function cancel2(options2) {
      var _ref2 = options2 || {}, _ref2$upcomingOnly = _ref2.upcomingOnly, upcomingOnly = _ref2$upcomingOnly === void 0 ? false : _ref2$upcomingOnly;
      clearExistingTimeout();
      cancelled2 = !upcomingOnly;
    }
    function wrapper() {
      for (var _len = arguments.length, arguments_ = new Array(_len), _key = 0; _key < _len; _key++) {
        arguments_[_key] = arguments[_key];
      }
      var self2 = this;
      var elapsed = Date.now() - lastExec;
      if (cancelled2) {
        return;
      }
      function exec() {
        lastExec = Date.now();
        callback.apply(self2, arguments_);
      }
      function clear() {
        timeoutID = void 0;
      }
      if (!noLeading && debounceMode && !timeoutID) {
        exec();
      }
      clearExistingTimeout();
      if (debounceMode === void 0 && elapsed > delay) {
        if (noLeading) {
          lastExec = Date.now();
          if (!noTrailing) {
            timeoutID = setTimeout(debounceMode ? clear : exec, delay);
          }
        } else {
          exec();
        }
      } else if (noTrailing !== true) {
        timeoutID = setTimeout(debounceMode ? clear : exec, debounceMode === void 0 ? delay - elapsed : delay);
      }
    }
    wrapper.cancel = cancel2;
    return wrapper;
  }
  function debounce(delay, callback, options) {
    var _ref = options || {}, _ref$atBegin = _ref.atBegin, atBegin = _ref$atBegin === void 0 ? false : _ref$atBegin;
    return throttle2(delay, callback, {
      debounceMode: atBegin !== false
    });
  }

  // node_modules/@ant-design/react-slick/es/inner-slider.js
  var import_classnames86 = __toESM(require_classnames());

  // node_modules/@ant-design/react-slick/es/utils/innerSliderUtils.js
  var import_react63 = __toESM(require_react());
  function clamp(number4, lowerBound, upperBound) {
    return Math.max(lowerBound, Math.min(number4, upperBound));
  }
  var safePreventDefault = function safePreventDefault2(event) {
    var passiveEvents = ["onTouchStart", "onTouchMove", "onWheel"];
    if (!passiveEvents.includes(event._reactName)) {
      event.preventDefault();
    }
  };
  var getOnDemandLazySlides = function getOnDemandLazySlides2(spec) {
    var onDemandSlides = [];
    var startIndex = lazyStartIndex(spec);
    var endIndex = lazyEndIndex(spec);
    for (var slideIndex = startIndex; slideIndex < endIndex; slideIndex++) {
      if (spec.lazyLoadedList.indexOf(slideIndex) < 0) {
        onDemandSlides.push(slideIndex);
      }
    }
    return onDemandSlides;
  };
  var lazyStartIndex = function lazyStartIndex2(spec) {
    return spec.currentSlide - lazySlidesOnLeft(spec);
  };
  var lazyEndIndex = function lazyEndIndex2(spec) {
    return spec.currentSlide + lazySlidesOnRight(spec);
  };
  var lazySlidesOnLeft = function lazySlidesOnLeft2(spec) {
    return spec.centerMode ? Math.floor(spec.slidesToShow / 2) + (parseInt(spec.centerPadding) > 0 ? 1 : 0) : 0;
  };
  var lazySlidesOnRight = function lazySlidesOnRight2(spec) {
    return spec.centerMode ? Math.floor((spec.slidesToShow - 1) / 2) + 1 + (parseInt(spec.centerPadding) > 0 ? 1 : 0) : spec.slidesToShow;
  };
  var getWidth = function getWidth2(elem) {
    return elem && elem.offsetWidth || 0;
  };
  var getHeight = function getHeight2(elem) {
    return elem && elem.offsetHeight || 0;
  };
  var getSwipeDirection = function getSwipeDirection2(touchObject) {
    var verticalSwiping = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    var xDist, yDist, r4, swipeAngle;
    xDist = touchObject.startX - touchObject.curX;
    yDist = touchObject.startY - touchObject.curY;
    r4 = Math.atan2(yDist, xDist);
    swipeAngle = Math.round(r4 * 180 / Math.PI);
    if (swipeAngle < 0) {
      swipeAngle = 360 - Math.abs(swipeAngle);
    }
    if (swipeAngle <= 45 && swipeAngle >= 0 || swipeAngle <= 360 && swipeAngle >= 315) {
      return "left";
    }
    if (swipeAngle >= 135 && swipeAngle <= 225) {
      return "right";
    }
    if (verticalSwiping === true) {
      if (swipeAngle >= 35 && swipeAngle <= 135) {
        return "up";
      } else {
        return "down";
      }
    }
    return "vertical";
  };
  var canGoNext = function canGoNext2(spec) {
    var canGo = true;
    if (!spec.infinite) {
      if (spec.centerMode && spec.currentSlide >= spec.slideCount - 1) {
        canGo = false;
      } else if (spec.slideCount <= spec.slidesToShow || spec.currentSlide >= spec.slideCount - spec.slidesToShow) {
        canGo = false;
      }
    }
    return canGo;
  };
  var extractObject = function extractObject2(spec, keys2) {
    var newObject = {};
    keys2.forEach(function(key2) {
      return newObject[key2] = spec[key2];
    });
    return newObject;
  };
  var initializedState = function initializedState2(spec) {
    var slideCount = import_react63.default.Children.count(spec.children);
    var listNode = spec.listRef;
    var listWidth = Math.ceil(getWidth(listNode));
    var trackNode = spec.trackRef && spec.trackRef.node;
    var trackWidth = Math.ceil(getWidth(trackNode));
    var slideWidth;
    if (!spec.vertical) {
      var centerPaddingAdj = spec.centerMode && parseInt(spec.centerPadding) * 2;
      if (typeof spec.centerPadding === "string" && spec.centerPadding.slice(-1) === "%") {
        centerPaddingAdj *= listWidth / 100;
      }
      slideWidth = Math.ceil((listWidth - centerPaddingAdj) / spec.slidesToShow);
    } else {
      slideWidth = listWidth;
    }
    var slideHeight = listNode && getHeight(listNode.querySelector('[data-index="0"]'));
    var listHeight = slideHeight * spec.slidesToShow;
    var currentSlide = spec.currentSlide === void 0 ? spec.initialSlide : spec.currentSlide;
    if (spec.rtl && spec.currentSlide === void 0) {
      currentSlide = slideCount - 1 - spec.initialSlide;
    }
    var lazyLoadedList = spec.lazyLoadedList || [];
    var slidesToLoad = getOnDemandLazySlides(_objectSpread2(_objectSpread2({}, spec), {}, {
      currentSlide,
      lazyLoadedList
    }));
    lazyLoadedList = lazyLoadedList.concat(slidesToLoad);
    var state = {
      slideCount,
      slideWidth,
      listWidth,
      trackWidth,
      currentSlide,
      slideHeight,
      listHeight,
      lazyLoadedList
    };
    if (spec.autoplaying === null && spec.autoplay) {
      state["autoplaying"] = "playing";
    }
    return state;
  };
  var slideHandler = function slideHandler2(spec) {
    var waitForAnimate = spec.waitForAnimate, animating = spec.animating, fade = spec.fade, infinite = spec.infinite, index2 = spec.index, slideCount = spec.slideCount, lazyLoad = spec.lazyLoad, currentSlide = spec.currentSlide, centerMode = spec.centerMode, slidesToScroll = spec.slidesToScroll, slidesToShow = spec.slidesToShow, useCSS = spec.useCSS;
    var lazyLoadedList = spec.lazyLoadedList;
    if (waitForAnimate && animating)
      return {};
    var animationSlide = index2, finalSlide, animationLeft, finalLeft;
    var state = {}, nextState = {};
    var targetSlide = infinite ? index2 : clamp(index2, 0, slideCount - 1);
    if (fade) {
      if (!infinite && (index2 < 0 || index2 >= slideCount))
        return {};
      if (index2 < 0) {
        animationSlide = index2 + slideCount;
      } else if (index2 >= slideCount) {
        animationSlide = index2 - slideCount;
      }
      if (lazyLoad && lazyLoadedList.indexOf(animationSlide) < 0) {
        lazyLoadedList = lazyLoadedList.concat(animationSlide);
      }
      state = {
        animating: true,
        currentSlide: animationSlide,
        lazyLoadedList,
        targetSlide: animationSlide
      };
      nextState = {
        animating: false,
        targetSlide: animationSlide
      };
    } else {
      finalSlide = animationSlide;
      if (animationSlide < 0) {
        finalSlide = animationSlide + slideCount;
        if (!infinite)
          finalSlide = 0;
        else if (slideCount % slidesToScroll !== 0)
          finalSlide = slideCount - slideCount % slidesToScroll;
      } else if (!canGoNext(spec) && animationSlide > currentSlide) {
        animationSlide = finalSlide = currentSlide;
      } else if (centerMode && animationSlide >= slideCount) {
        animationSlide = infinite ? slideCount : slideCount - 1;
        finalSlide = infinite ? 0 : slideCount - 1;
      } else if (animationSlide >= slideCount) {
        finalSlide = animationSlide - slideCount;
        if (!infinite)
          finalSlide = slideCount - slidesToShow;
        else if (slideCount % slidesToScroll !== 0)
          finalSlide = 0;
      }
      if (!infinite && animationSlide + slidesToShow >= slideCount) {
        finalSlide = slideCount - slidesToShow;
      }
      animationLeft = getTrackLeft(_objectSpread2(_objectSpread2({}, spec), {}, {
        slideIndex: animationSlide
      }));
      finalLeft = getTrackLeft(_objectSpread2(_objectSpread2({}, spec), {}, {
        slideIndex: finalSlide
      }));
      if (!infinite) {
        if (animationLeft === finalLeft)
          animationSlide = finalSlide;
        animationLeft = finalLeft;
      }
      if (lazyLoad) {
        lazyLoadedList = lazyLoadedList.concat(getOnDemandLazySlides(_objectSpread2(_objectSpread2({}, spec), {}, {
          currentSlide: animationSlide
        })));
      }
      if (!useCSS) {
        state = {
          currentSlide: finalSlide,
          trackStyle: getTrackCSS(_objectSpread2(_objectSpread2({}, spec), {}, {
            left: finalLeft
          })),
          lazyLoadedList,
          targetSlide
        };
      } else {
        state = {
          animating: true,
          currentSlide: finalSlide,
          trackStyle: getTrackAnimateCSS(_objectSpread2(_objectSpread2({}, spec), {}, {
            left: animationLeft
          })),
          lazyLoadedList,
          targetSlide
        };
        nextState = {
          animating: false,
          currentSlide: finalSlide,
          trackStyle: getTrackCSS(_objectSpread2(_objectSpread2({}, spec), {}, {
            left: finalLeft
          })),
          swipeLeft: null,
          targetSlide
        };
      }
    }
    return {
      state,
      nextState
    };
  };
  var changeSlide = function changeSlide2(spec, options) {
    var indexOffset, previousInt, slideOffset, unevenOffset, targetSlide;
    var slidesToScroll = spec.slidesToScroll, slidesToShow = spec.slidesToShow, slideCount = spec.slideCount, currentSlide = spec.currentSlide, previousTargetSlide = spec.targetSlide, lazyLoad = spec.lazyLoad, infinite = spec.infinite;
    unevenOffset = slideCount % slidesToScroll !== 0;
    indexOffset = unevenOffset ? 0 : (slideCount - currentSlide) % slidesToScroll;
    if (options.message === "previous") {
      slideOffset = indexOffset === 0 ? slidesToScroll : slidesToShow - indexOffset;
      targetSlide = currentSlide - slideOffset;
      if (lazyLoad && !infinite) {
        previousInt = currentSlide - slideOffset;
        targetSlide = previousInt === -1 ? slideCount - 1 : previousInt;
      }
      if (!infinite) {
        targetSlide = previousTargetSlide - slidesToScroll;
      }
    } else if (options.message === "next") {
      slideOffset = indexOffset === 0 ? slidesToScroll : indexOffset;
      targetSlide = currentSlide + slideOffset;
      if (lazyLoad && !infinite) {
        targetSlide = (currentSlide + slidesToScroll) % slideCount + indexOffset;
      }
      if (!infinite) {
        targetSlide = previousTargetSlide + slidesToScroll;
      }
    } else if (options.message === "dots") {
      targetSlide = options.index * options.slidesToScroll;
    } else if (options.message === "children") {
      targetSlide = options.index;
      if (infinite) {
        var direction = siblingDirection(_objectSpread2(_objectSpread2({}, spec), {}, {
          targetSlide
        }));
        if (targetSlide > options.currentSlide && direction === "left") {
          targetSlide = targetSlide - slideCount;
        } else if (targetSlide < options.currentSlide && direction === "right") {
          targetSlide = targetSlide + slideCount;
        }
      }
    } else if (options.message === "index") {
      targetSlide = Number(options.index);
    }
    return targetSlide;
  };
  var keyHandler = function keyHandler2(e3, accessibility, rtl3) {
    if (e3.target.tagName.match("TEXTAREA|INPUT|SELECT") || !accessibility)
      return "";
    if (e3.keyCode === 37)
      return rtl3 ? "next" : "previous";
    if (e3.keyCode === 39)
      return rtl3 ? "previous" : "next";
    return "";
  };
  var swipeStart = function swipeStart2(e3, swipe, draggable) {
    e3.target.tagName === "IMG" && safePreventDefault(e3);
    if (!swipe || !draggable && e3.type.indexOf("mouse") !== -1)
      return "";
    return {
      dragging: true,
      touchObject: {
        startX: e3.touches ? e3.touches[0].pageX : e3.clientX,
        startY: e3.touches ? e3.touches[0].pageY : e3.clientY,
        curX: e3.touches ? e3.touches[0].pageX : e3.clientX,
        curY: e3.touches ? e3.touches[0].pageY : e3.clientY
      }
    };
  };
  var swipeMove = function swipeMove2(e3, spec) {
    var scrolling = spec.scrolling, animating = spec.animating, vertical = spec.vertical, swipeToSlide = spec.swipeToSlide, verticalSwiping = spec.verticalSwiping, rtl3 = spec.rtl, currentSlide = spec.currentSlide, edgeFriction = spec.edgeFriction, edgeDragged = spec.edgeDragged, onEdge = spec.onEdge, swiped = spec.swiped, swiping = spec.swiping, slideCount = spec.slideCount, slidesToScroll = spec.slidesToScroll, infinite = spec.infinite, touchObject = spec.touchObject, swipeEvent = spec.swipeEvent, listHeight = spec.listHeight, listWidth = spec.listWidth;
    if (scrolling)
      return;
    if (animating)
      return safePreventDefault(e3);
    if (vertical && swipeToSlide && verticalSwiping)
      safePreventDefault(e3);
    var swipeLeft, state = {};
    var curLeft = getTrackLeft(spec);
    touchObject.curX = e3.touches ? e3.touches[0].pageX : e3.clientX;
    touchObject.curY = e3.touches ? e3.touches[0].pageY : e3.clientY;
    touchObject.swipeLength = Math.round(Math.sqrt(Math.pow(touchObject.curX - touchObject.startX, 2)));
    var verticalSwipeLength = Math.round(Math.sqrt(Math.pow(touchObject.curY - touchObject.startY, 2)));
    if (!verticalSwiping && !swiping && verticalSwipeLength > 10) {
      return {
        scrolling: true
      };
    }
    if (verticalSwiping)
      touchObject.swipeLength = verticalSwipeLength;
    var positionOffset = (!rtl3 ? 1 : -1) * (touchObject.curX > touchObject.startX ? 1 : -1);
    if (verticalSwiping)
      positionOffset = touchObject.curY > touchObject.startY ? 1 : -1;
    var dotCount = Math.ceil(slideCount / slidesToScroll);
    var swipeDirection = getSwipeDirection(spec.touchObject, verticalSwiping);
    var touchSwipeLength = touchObject.swipeLength;
    if (!infinite) {
      if (currentSlide === 0 && (swipeDirection === "right" || swipeDirection === "down") || currentSlide + 1 >= dotCount && (swipeDirection === "left" || swipeDirection === "up") || !canGoNext(spec) && (swipeDirection === "left" || swipeDirection === "up")) {
        touchSwipeLength = touchObject.swipeLength * edgeFriction;
        if (edgeDragged === false && onEdge) {
          onEdge(swipeDirection);
          state["edgeDragged"] = true;
        }
      }
    }
    if (!swiped && swipeEvent) {
      swipeEvent(swipeDirection);
      state["swiped"] = true;
    }
    if (!vertical) {
      if (!rtl3) {
        swipeLeft = curLeft + touchSwipeLength * positionOffset;
      } else {
        swipeLeft = curLeft - touchSwipeLength * positionOffset;
      }
    } else {
      swipeLeft = curLeft + touchSwipeLength * (listHeight / listWidth) * positionOffset;
    }
    if (verticalSwiping) {
      swipeLeft = curLeft + touchSwipeLength * positionOffset;
    }
    state = _objectSpread2(_objectSpread2({}, state), {}, {
      touchObject,
      swipeLeft,
      trackStyle: getTrackCSS(_objectSpread2(_objectSpread2({}, spec), {}, {
        left: swipeLeft
      }))
    });
    if (Math.abs(touchObject.curX - touchObject.startX) < Math.abs(touchObject.curY - touchObject.startY) * 0.8) {
      return state;
    }
    if (touchObject.swipeLength > 10) {
      state["swiping"] = true;
      safePreventDefault(e3);
    }
    return state;
  };
  var swipeEnd = function swipeEnd2(e3, spec) {
    var dragging = spec.dragging, swipe = spec.swipe, touchObject = spec.touchObject, listWidth = spec.listWidth, touchThreshold = spec.touchThreshold, verticalSwiping = spec.verticalSwiping, listHeight = spec.listHeight, swipeToSlide = spec.swipeToSlide, scrolling = spec.scrolling, onSwipe = spec.onSwipe, targetSlide = spec.targetSlide, currentSlide = spec.currentSlide, infinite = spec.infinite;
    if (!dragging) {
      if (swipe)
        safePreventDefault(e3);
      return {};
    }
    var minSwipe = verticalSwiping ? listHeight / touchThreshold : listWidth / touchThreshold;
    var swipeDirection = getSwipeDirection(touchObject, verticalSwiping);
    var state = {
      dragging: false,
      edgeDragged: false,
      scrolling: false,
      swiping: false,
      swiped: false,
      swipeLeft: null,
      touchObject: {}
    };
    if (scrolling) {
      return state;
    }
    if (!touchObject.swipeLength) {
      return state;
    }
    if (touchObject.swipeLength > minSwipe) {
      safePreventDefault(e3);
      if (onSwipe) {
        onSwipe(swipeDirection);
      }
      var slideCount, newSlide;
      var activeSlide = infinite ? currentSlide : targetSlide;
      switch (swipeDirection) {
        case "left":
        case "up":
          newSlide = activeSlide + getSlideCount(spec);
          slideCount = swipeToSlide ? checkNavigable(spec, newSlide) : newSlide;
          state["currentDirection"] = 0;
          break;
        case "right":
        case "down":
          newSlide = activeSlide - getSlideCount(spec);
          slideCount = swipeToSlide ? checkNavigable(spec, newSlide) : newSlide;
          state["currentDirection"] = 1;
          break;
        default:
          slideCount = activeSlide;
      }
      state["triggerSlideHandler"] = slideCount;
    } else {
      var currentLeft = getTrackLeft(spec);
      state["trackStyle"] = getTrackAnimateCSS(_objectSpread2(_objectSpread2({}, spec), {}, {
        left: currentLeft
      }));
    }
    return state;
  };
  var getNavigableIndexes = function getNavigableIndexes2(spec) {
    var max = spec.infinite ? spec.slideCount * 2 : spec.slideCount;
    var breakpoint = spec.infinite ? spec.slidesToShow * -1 : 0;
    var counter = spec.infinite ? spec.slidesToShow * -1 : 0;
    var indexes = [];
    while (breakpoint < max) {
      indexes.push(breakpoint);
      breakpoint = counter + spec.slidesToScroll;
      counter += Math.min(spec.slidesToScroll, spec.slidesToShow);
    }
    return indexes;
  };
  var checkNavigable = function checkNavigable2(spec, index2) {
    var navigables = getNavigableIndexes(spec);
    var prevNavigable = 0;
    if (index2 > navigables[navigables.length - 1]) {
      index2 = navigables[navigables.length - 1];
    } else {
      for (var n4 in navigables) {
        if (index2 < navigables[n4]) {
          index2 = prevNavigable;
          break;
        }
        prevNavigable = navigables[n4];
      }
    }
    return index2;
  };
  var getSlideCount = function getSlideCount2(spec) {
    var centerOffset = spec.centerMode ? spec.slideWidth * Math.floor(spec.slidesToShow / 2) : 0;
    if (spec.swipeToSlide) {
      var swipedSlide;
      var slickList = spec.listRef;
      var slides = slickList.querySelectorAll && slickList.querySelectorAll(".slick-slide") || [];
      Array.from(slides).every(function(slide) {
        if (!spec.vertical) {
          if (slide.offsetLeft - centerOffset + getWidth(slide) / 2 > spec.swipeLeft * -1) {
            swipedSlide = slide;
            return false;
          }
        } else {
          if (slide.offsetTop + getHeight(slide) / 2 > spec.swipeLeft * -1) {
            swipedSlide = slide;
            return false;
          }
        }
        return true;
      });
      if (!swipedSlide) {
        return 0;
      }
      var currentIndex = spec.rtl === true ? spec.slideCount - spec.currentSlide : spec.currentSlide;
      var slidesTraversed = Math.abs(swipedSlide.dataset.index - currentIndex) || 1;
      return slidesTraversed;
    } else {
      return spec.slidesToScroll;
    }
  };
  var checkSpecKeys = function checkSpecKeys2(spec, keysArray) {
    return (
      // eslint-disable-next-line no-prototype-builtins
      keysArray.reduce(function(value, key2) {
        return value && spec.hasOwnProperty(key2);
      }, true) ? null : console.error("Keys Missing:", spec)
    );
  };
  var getTrackCSS = function getTrackCSS2(spec) {
    checkSpecKeys(spec, ["left", "variableWidth", "slideCount", "slidesToShow", "slideWidth"]);
    var trackWidth, trackHeight;
    var trackChildren = spec.slideCount + 2 * spec.slidesToShow;
    if (!spec.vertical) {
      trackWidth = getTotalSlides(spec) * spec.slideWidth;
    } else {
      trackHeight = trackChildren * spec.slideHeight;
    }
    var style3 = {
      opacity: 1,
      transition: "",
      WebkitTransition: ""
    };
    if (spec.useTransform) {
      var WebkitTransform = !spec.vertical ? "translate3d(" + spec.left + "px, 0px, 0px)" : "translate3d(0px, " + spec.left + "px, 0px)";
      var transform = !spec.vertical ? "translate3d(" + spec.left + "px, 0px, 0px)" : "translate3d(0px, " + spec.left + "px, 0px)";
      var msTransform = !spec.vertical ? "translateX(" + spec.left + "px)" : "translateY(" + spec.left + "px)";
      style3 = _objectSpread2(_objectSpread2({}, style3), {}, {
        WebkitTransform,
        transform,
        msTransform
      });
    } else {
      if (spec.vertical) {
        style3["top"] = spec.left;
      } else {
        style3["left"] = spec.left;
      }
    }
    if (spec.fade)
      style3 = {
        opacity: 1
      };
    if (trackWidth)
      style3.width = trackWidth;
    if (trackHeight)
      style3.height = trackHeight;
    if (window && !window.addEventListener && window.attachEvent) {
      if (!spec.vertical) {
        style3.marginLeft = spec.left + "px";
      } else {
        style3.marginTop = spec.left + "px";
      }
    }
    return style3;
  };
  var getTrackAnimateCSS = function getTrackAnimateCSS2(spec) {
    checkSpecKeys(spec, ["left", "variableWidth", "slideCount", "slidesToShow", "slideWidth", "speed", "cssEase"]);
    var style3 = getTrackCSS(spec);
    if (spec.useTransform) {
      style3.WebkitTransition = "-webkit-transform " + spec.speed + "ms " + spec.cssEase;
      style3.transition = "transform " + spec.speed + "ms " + spec.cssEase;
    } else {
      if (spec.vertical) {
        style3.transition = "top " + spec.speed + "ms " + spec.cssEase;
      } else {
        style3.transition = "left " + spec.speed + "ms " + spec.cssEase;
      }
    }
    return style3;
  };
  var getTrackLeft = function getTrackLeft2(spec) {
    if (spec.unslick) {
      return 0;
    }
    checkSpecKeys(spec, ["slideIndex", "trackRef", "infinite", "centerMode", "slideCount", "slidesToShow", "slidesToScroll", "slideWidth", "listWidth", "variableWidth", "slideHeight"]);
    var slideIndex = spec.slideIndex, trackRef = spec.trackRef, infinite = spec.infinite, centerMode = spec.centerMode, slideCount = spec.slideCount, slidesToShow = spec.slidesToShow, slidesToScroll = spec.slidesToScroll, slideWidth = spec.slideWidth, listWidth = spec.listWidth, variableWidth = spec.variableWidth, slideHeight = spec.slideHeight, fade = spec.fade, vertical = spec.vertical;
    var slideOffset = 0;
    var targetLeft;
    var targetSlide;
    var verticalOffset = 0;
    if (fade || spec.slideCount === 1) {
      return 0;
    }
    var slidesToOffset = 0;
    if (infinite) {
      slidesToOffset = -getPreClones(spec);
      if (slideCount % slidesToScroll !== 0 && slideIndex + slidesToScroll > slideCount) {
        slidesToOffset = -(slideIndex > slideCount ? slidesToShow - (slideIndex - slideCount) : slideCount % slidesToScroll);
      }
      if (centerMode) {
        slidesToOffset += parseInt(slidesToShow / 2);
      }
    } else {
      if (slideCount % slidesToScroll !== 0 && slideIndex + slidesToScroll > slideCount) {
        slidesToOffset = slidesToShow - slideCount % slidesToScroll;
      }
      if (centerMode) {
        slidesToOffset = parseInt(slidesToShow / 2);
      }
    }
    slideOffset = slidesToOffset * slideWidth;
    verticalOffset = slidesToOffset * slideHeight;
    if (!vertical) {
      targetLeft = slideIndex * slideWidth * -1 + slideOffset;
    } else {
      targetLeft = slideIndex * slideHeight * -1 + verticalOffset;
    }
    if (variableWidth === true) {
      var targetSlideIndex;
      var trackElem = trackRef && trackRef.node;
      targetSlideIndex = slideIndex + getPreClones(spec);
      targetSlide = trackElem && trackElem.childNodes[targetSlideIndex];
      targetLeft = targetSlide ? targetSlide.offsetLeft * -1 : 0;
      if (centerMode === true) {
        targetSlideIndex = infinite ? slideIndex + getPreClones(spec) : slideIndex;
        targetSlide = trackElem && trackElem.children[targetSlideIndex];
        targetLeft = 0;
        for (var slide = 0; slide < targetSlideIndex; slide++) {
          targetLeft -= trackElem && trackElem.children[slide] && trackElem.children[slide].offsetWidth;
        }
        targetLeft -= parseInt(spec.centerPadding);
        targetLeft += targetSlide && (listWidth - targetSlide.offsetWidth) / 2;
      }
    }
    return targetLeft;
  };
  var getPreClones = function getPreClones2(spec) {
    if (spec.unslick || !spec.infinite) {
      return 0;
    }
    if (spec.variableWidth) {
      return spec.slideCount;
    }
    return spec.slidesToShow + (spec.centerMode ? 1 : 0);
  };
  var getPostClones = function getPostClones2(spec) {
    if (spec.unslick || !spec.infinite) {
      return 0;
    }
    return spec.slideCount;
  };
  var getTotalSlides = function getTotalSlides2(spec) {
    return spec.slideCount === 1 ? 1 : getPreClones(spec) + spec.slideCount + getPostClones(spec);
  };
  var siblingDirection = function siblingDirection2(spec) {
    if (spec.targetSlide > spec.currentSlide) {
      if (spec.targetSlide > spec.currentSlide + slidesOnRight(spec)) {
        return "left";
      }
      return "right";
    } else {
      if (spec.targetSlide < spec.currentSlide - slidesOnLeft(spec)) {
        return "right";
      }
      return "left";
    }
  };
  var slidesOnRight = function slidesOnRight2(_ref) {
    var slidesToShow = _ref.slidesToShow, centerMode = _ref.centerMode, rtl3 = _ref.rtl, centerPadding = _ref.centerPadding;
    if (centerMode) {
      var right = (slidesToShow - 1) / 2 + 1;
      if (parseInt(centerPadding) > 0)
        right += 1;
      if (rtl3 && slidesToShow % 2 === 0)
        right += 1;
      return right;
    }
    if (rtl3) {
      return 0;
    }
    return slidesToShow - 1;
  };
  var slidesOnLeft = function slidesOnLeft2(_ref2) {
    var slidesToShow = _ref2.slidesToShow, centerMode = _ref2.centerMode, rtl3 = _ref2.rtl, centerPadding = _ref2.centerPadding;
    if (centerMode) {
      var left = (slidesToShow - 1) / 2 + 1;
      if (parseInt(centerPadding) > 0)
        left += 1;
      if (!rtl3 && slidesToShow % 2 === 0)
        left += 1;
      return left;
    }
    if (rtl3) {
      return slidesToShow - 1;
    }
    return 0;
  };
  var canUseDOM = function canUseDOM2() {
    return !!(typeof window !== "undefined" && window.document && window.document.createElement);
  };

  // node_modules/@ant-design/react-slick/es/track.js
  var import_react64 = __toESM(require_react());
  var import_classnames83 = __toESM(require_classnames());
  var getSlideClasses = function getSlideClasses2(spec) {
    var slickActive, slickCenter, slickCloned;
    var centerOffset, index2;
    if (spec.rtl) {
      index2 = spec.slideCount - 1 - spec.index;
    } else {
      index2 = spec.index;
    }
    slickCloned = index2 < 0 || index2 >= spec.slideCount;
    if (spec.centerMode) {
      centerOffset = Math.floor(spec.slidesToShow / 2);
      slickCenter = (index2 - spec.currentSlide) % spec.slideCount === 0;
      if (index2 > spec.currentSlide - centerOffset - 1 && index2 <= spec.currentSlide + centerOffset) {
        slickActive = true;
      }
    } else {
      slickActive = spec.currentSlide <= index2 && index2 < spec.currentSlide + spec.slidesToShow;
    }
    var focusedSlide;
    if (spec.targetSlide < 0) {
      focusedSlide = spec.targetSlide + spec.slideCount;
    } else if (spec.targetSlide >= spec.slideCount) {
      focusedSlide = spec.targetSlide - spec.slideCount;
    } else {
      focusedSlide = spec.targetSlide;
    }
    var slickCurrent = index2 === focusedSlide;
    return {
      "slick-slide": true,
      "slick-active": slickActive,
      "slick-center": slickCenter,
      "slick-cloned": slickCloned,
      "slick-current": slickCurrent
      // dubious in case of RTL
    };
  };
  var getSlideStyle = function getSlideStyle2(spec) {
    var style3 = {};
    if (spec.variableWidth === void 0 || spec.variableWidth === false) {
      style3.width = spec.slideWidth;
    }
    if (spec.fade) {
      style3.position = "relative";
      if (spec.vertical && spec.slideHeight) {
        style3.top = -spec.index * parseInt(spec.slideHeight);
      } else {
        style3.left = -spec.index * parseInt(spec.slideWidth);
      }
      style3.opacity = spec.currentSlide === spec.index ? 1 : 0;
      if (spec.useCSS) {
        style3.transition = "opacity " + spec.speed + "ms " + spec.cssEase + ", visibility " + spec.speed + "ms " + spec.cssEase;
      }
    }
    return style3;
  };
  var getKey2 = function getKey3(child, fallbackKey) {
    return child.key + "-" + fallbackKey;
  };
  var renderSlides = function renderSlides2(spec) {
    var key2;
    var slides = [];
    var preCloneSlides = [];
    var postCloneSlides = [];
    var childrenCount = import_react64.default.Children.count(spec.children);
    var startIndex = lazyStartIndex(spec);
    var endIndex = lazyEndIndex(spec);
    import_react64.default.Children.forEach(spec.children, function(elem, index2) {
      var child;
      var childOnClickOptions = {
        message: "children",
        index: index2,
        slidesToScroll: spec.slidesToScroll,
        currentSlide: spec.currentSlide
      };
      if (!spec.lazyLoad || spec.lazyLoad && spec.lazyLoadedList.indexOf(index2) >= 0) {
        child = elem;
      } else {
        child = /* @__PURE__ */ import_react64.default.createElement("div", null);
      }
      var childStyle = getSlideStyle(_objectSpread2(_objectSpread2({}, spec), {}, {
        index: index2
      }));
      var slideClass = child.props.className || "";
      var slideClasses = getSlideClasses(_objectSpread2(_objectSpread2({}, spec), {}, {
        index: index2
      }));
      slides.push(/* @__PURE__ */ import_react64.default.cloneElement(child, {
        key: "original" + getKey2(child, index2),
        "data-index": index2,
        className: (0, import_classnames83.default)(slideClasses, slideClass),
        tabIndex: "-1",
        "aria-hidden": !slideClasses["slick-active"],
        style: _objectSpread2(_objectSpread2({
          outline: "none"
        }, child.props.style || {}), childStyle),
        onClick: function onClick(e3) {
          child.props && child.props.onClick && child.props.onClick(e3);
          if (spec.focusOnSelect) {
            spec.focusOnSelect(childOnClickOptions);
          }
        }
      }));
      if (spec.infinite && spec.fade === false) {
        var preCloneNo = childrenCount - index2;
        if (preCloneNo <= getPreClones(spec) && childrenCount !== spec.slidesToShow) {
          key2 = -preCloneNo;
          if (key2 >= startIndex) {
            child = elem;
          }
          slideClasses = getSlideClasses(_objectSpread2(_objectSpread2({}, spec), {}, {
            index: key2
          }));
          preCloneSlides.push(/* @__PURE__ */ import_react64.default.cloneElement(child, {
            key: "precloned" + getKey2(child, key2),
            "data-index": key2,
            tabIndex: "-1",
            className: (0, import_classnames83.default)(slideClasses, slideClass),
            "aria-hidden": !slideClasses["slick-active"],
            style: _objectSpread2(_objectSpread2({}, child.props.style || {}), childStyle),
            onClick: function onClick(e3) {
              child.props && child.props.onClick && child.props.onClick(e3);
              if (spec.focusOnSelect) {
                spec.focusOnSelect(childOnClickOptions);
              }
            }
          }));
        }
        if (childrenCount !== spec.slidesToShow) {
          key2 = childrenCount + index2;
          if (key2 < endIndex) {
            child = elem;
          }
          slideClasses = getSlideClasses(_objectSpread2(_objectSpread2({}, spec), {}, {
            index: key2
          }));
          postCloneSlides.push(/* @__PURE__ */ import_react64.default.cloneElement(child, {
            key: "postcloned" + getKey2(child, key2),
            "data-index": key2,
            tabIndex: "-1",
            className: (0, import_classnames83.default)(slideClasses, slideClass),
            "aria-hidden": !slideClasses["slick-active"],
            style: _objectSpread2(_objectSpread2({}, child.props.style || {}), childStyle),
            onClick: function onClick(e3) {
              child.props && child.props.onClick && child.props.onClick(e3);
              if (spec.focusOnSelect) {
                spec.focusOnSelect(childOnClickOptions);
              }
            }
          }));
        }
      }
    });
    if (spec.rtl) {
      return preCloneSlides.concat(slides, postCloneSlides).reverse();
    } else {
      return preCloneSlides.concat(slides, postCloneSlides);
    }
  };
  var Track = /* @__PURE__ */ function(_React$PureComponent) {
    _inherits(Track2, _React$PureComponent);
    var _super = _createSuper(Track2);
    function Track2() {
      var _this;
      _classCallCheck(this, Track2);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _super.call.apply(_super, [this].concat(args));
      _defineProperty(_assertThisInitialized(_this), "node", null);
      _defineProperty(_assertThisInitialized(_this), "handleRef", function(ref) {
        _this.node = ref;
      });
      return _this;
    }
    _createClass(Track2, [{
      key: "render",
      value: function render2() {
        var slides = renderSlides(this.props);
        var _this$props = this.props, onMouseEnter = _this$props.onMouseEnter, onMouseOver = _this$props.onMouseOver, onMouseLeave = _this$props.onMouseLeave;
        var mouseEvents = {
          onMouseEnter,
          onMouseOver,
          onMouseLeave
        };
        return /* @__PURE__ */ import_react64.default.createElement("div", _extends({
          ref: this.handleRef,
          className: "slick-track",
          style: this.props.trackStyle
        }, mouseEvents), slides);
      }
    }]);
    return Track2;
  }(import_react64.default.PureComponent);

  // node_modules/@ant-design/react-slick/es/dots.js
  var import_react65 = __toESM(require_react());
  var import_classnames84 = __toESM(require_classnames());
  var getDotCount = function getDotCount2(spec) {
    var dots;
    if (spec.infinite) {
      dots = Math.ceil(spec.slideCount / spec.slidesToScroll);
    } else {
      dots = Math.ceil((spec.slideCount - spec.slidesToShow) / spec.slidesToScroll) + 1;
    }
    return dots;
  };
  var Dots = /* @__PURE__ */ function(_React$PureComponent) {
    _inherits(Dots2, _React$PureComponent);
    var _super = _createSuper(Dots2);
    function Dots2() {
      _classCallCheck(this, Dots2);
      return _super.apply(this, arguments);
    }
    _createClass(Dots2, [{
      key: "clickHandler",
      value: function clickHandler(options, e3) {
        e3.preventDefault();
        this.props.clickHandler(options);
      }
    }, {
      key: "render",
      value: function render2() {
        var _this$props = this.props, onMouseEnter = _this$props.onMouseEnter, onMouseOver = _this$props.onMouseOver, onMouseLeave = _this$props.onMouseLeave, infinite = _this$props.infinite, slidesToScroll = _this$props.slidesToScroll, slidesToShow = _this$props.slidesToShow, slideCount = _this$props.slideCount, currentSlide = _this$props.currentSlide;
        var dotCount = getDotCount({
          slideCount,
          slidesToScroll,
          slidesToShow,
          infinite
        });
        var mouseEvents = {
          onMouseEnter,
          onMouseOver,
          onMouseLeave
        };
        var dots = [];
        for (var i3 = 0; i3 < dotCount; i3++) {
          var _rightBound = (i3 + 1) * slidesToScroll - 1;
          var rightBound = infinite ? _rightBound : clamp(_rightBound, 0, slideCount - 1);
          var _leftBound = rightBound - (slidesToScroll - 1);
          var leftBound = infinite ? _leftBound : clamp(_leftBound, 0, slideCount - 1);
          var className = (0, import_classnames84.default)({
            "slick-active": infinite ? currentSlide >= leftBound && currentSlide <= rightBound : currentSlide === leftBound
          });
          var dotOptions = {
            message: "dots",
            index: i3,
            slidesToScroll,
            currentSlide
          };
          var onClick = this.clickHandler.bind(this, dotOptions);
          dots = dots.concat(/* @__PURE__ */ import_react65.default.createElement("li", {
            key: i3,
            className
          }, /* @__PURE__ */ import_react65.default.cloneElement(this.props.customPaging(i3), {
            onClick
          })));
        }
        return /* @__PURE__ */ import_react65.default.cloneElement(this.props.appendDots(dots), _objectSpread2({
          className: this.props.dotsClass
        }, mouseEvents));
      }
    }]);
    return Dots2;
  }(import_react65.default.PureComponent);

  // node_modules/@ant-design/react-slick/es/arrows.js
  var import_react66 = __toESM(require_react());
  var import_classnames85 = __toESM(require_classnames());
  var PrevArrow = /* @__PURE__ */ function(_React$PureComponent) {
    _inherits(PrevArrow2, _React$PureComponent);
    var _super = _createSuper(PrevArrow2);
    function PrevArrow2() {
      _classCallCheck(this, PrevArrow2);
      return _super.apply(this, arguments);
    }
    _createClass(PrevArrow2, [{
      key: "clickHandler",
      value: function clickHandler(options, e3) {
        if (e3) {
          e3.preventDefault();
        }
        this.props.clickHandler(options, e3);
      }
    }, {
      key: "render",
      value: function render2() {
        var prevClasses = {
          "slick-arrow": true,
          "slick-prev": true
        };
        var prevHandler = this.clickHandler.bind(this, {
          message: "previous"
        });
        if (!this.props.infinite && (this.props.currentSlide === 0 || this.props.slideCount <= this.props.slidesToShow)) {
          prevClasses["slick-disabled"] = true;
          prevHandler = null;
        }
        var prevArrowProps = {
          key: "0",
          "data-role": "none",
          className: (0, import_classnames85.default)(prevClasses),
          style: {
            display: "block"
          },
          onClick: prevHandler
        };
        var customProps = {
          currentSlide: this.props.currentSlide,
          slideCount: this.props.slideCount
        };
        var prevArrow;
        if (this.props.prevArrow) {
          prevArrow = /* @__PURE__ */ import_react66.default.cloneElement(this.props.prevArrow, _objectSpread2(_objectSpread2({}, prevArrowProps), customProps));
        } else {
          prevArrow = /* @__PURE__ */ import_react66.default.createElement("button", _extends({
            key: "0",
            type: "button"
          }, prevArrowProps), " ", "Previous");
        }
        return prevArrow;
      }
    }]);
    return PrevArrow2;
  }(import_react66.default.PureComponent);
  var NextArrow = /* @__PURE__ */ function(_React$PureComponent2) {
    _inherits(NextArrow2, _React$PureComponent2);
    var _super2 = _createSuper(NextArrow2);
    function NextArrow2() {
      _classCallCheck(this, NextArrow2);
      return _super2.apply(this, arguments);
    }
    _createClass(NextArrow2, [{
      key: "clickHandler",
      value: function clickHandler(options, e3) {
        if (e3) {
          e3.preventDefault();
        }
        this.props.clickHandler(options, e3);
      }
    }, {
      key: "render",
      value: function render2() {
        var nextClasses = {
          "slick-arrow": true,
          "slick-next": true
        };
        var nextHandler = this.clickHandler.bind(this, {
          message: "next"
        });
        if (!canGoNext(this.props)) {
          nextClasses["slick-disabled"] = true;
          nextHandler = null;
        }
        var nextArrowProps = {
          key: "1",
          "data-role": "none",
          className: (0, import_classnames85.default)(nextClasses),
          style: {
            display: "block"
          },
          onClick: nextHandler
        };
        var customProps = {
          currentSlide: this.props.currentSlide,
          slideCount: this.props.slideCount
        };
        var nextArrow;
        if (this.props.nextArrow) {
          nextArrow = /* @__PURE__ */ import_react66.default.cloneElement(this.props.nextArrow, _objectSpread2(_objectSpread2({}, nextArrowProps), customProps));
        } else {
          nextArrow = /* @__PURE__ */ import_react66.default.createElement("button", _extends({
            key: "1",
            type: "button"
          }, nextArrowProps), " ", "Next");
        }
        return nextArrow;
      }
    }]);
    return NextArrow2;
  }(import_react66.default.PureComponent);

  // node_modules/@ant-design/react-slick/es/inner-slider.js
  var _excluded40 = ["animating"];
  var InnerSlider = /* @__PURE__ */ function(_React$Component) {
    _inherits(InnerSlider2, _React$Component);
    var _super = _createSuper(InnerSlider2);
    function InnerSlider2(props) {
      var _this;
      _classCallCheck(this, InnerSlider2);
      _this = _super.call(this, props);
      _defineProperty(_assertThisInitialized(_this), "listRefHandler", function(ref) {
        return _this.list = ref;
      });
      _defineProperty(_assertThisInitialized(_this), "trackRefHandler", function(ref) {
        return _this.track = ref;
      });
      _defineProperty(_assertThisInitialized(_this), "adaptHeight", function() {
        if (_this.props.adaptiveHeight && _this.list) {
          var elem = _this.list.querySelector('[data-index="'.concat(_this.state.currentSlide, '"]'));
          _this.list.style.height = getHeight(elem) + "px";
        }
      });
      _defineProperty(_assertThisInitialized(_this), "componentDidMount", function() {
        _this.props.onInit && _this.props.onInit();
        if (_this.props.lazyLoad) {
          var slidesToLoad = getOnDemandLazySlides(_objectSpread2(_objectSpread2({}, _this.props), _this.state));
          if (slidesToLoad.length > 0) {
            _this.setState(function(prevState) {
              return {
                lazyLoadedList: prevState.lazyLoadedList.concat(slidesToLoad)
              };
            });
            if (_this.props.onLazyLoad) {
              _this.props.onLazyLoad(slidesToLoad);
            }
          }
        }
        var spec = _objectSpread2({
          listRef: _this.list,
          trackRef: _this.track
        }, _this.props);
        _this.updateState(spec, true, function() {
          _this.adaptHeight();
          _this.props.autoplay && _this.autoPlay("playing");
        });
        if (_this.props.lazyLoad === "progressive") {
          _this.lazyLoadTimer = setInterval(_this.progressiveLazyLoad, 1e3);
        }
        _this.ro = new ResizeObserver_es_default(function() {
          if (_this.state.animating) {
            _this.onWindowResized(false);
            _this.callbackTimers.push(setTimeout(function() {
              return _this.onWindowResized();
            }, _this.props.speed));
          } else {
            _this.onWindowResized();
          }
        });
        _this.ro.observe(_this.list);
        document.querySelectorAll && Array.prototype.forEach.call(document.querySelectorAll(".slick-slide"), function(slide) {
          slide.onfocus = _this.props.pauseOnFocus ? _this.onSlideFocus : null;
          slide.onblur = _this.props.pauseOnFocus ? _this.onSlideBlur : null;
        });
        if (window.addEventListener) {
          window.addEventListener("resize", _this.onWindowResized);
        } else {
          window.attachEvent("onresize", _this.onWindowResized);
        }
      });
      _defineProperty(_assertThisInitialized(_this), "componentWillUnmount", function() {
        if (_this.animationEndCallback) {
          clearTimeout(_this.animationEndCallback);
        }
        if (_this.lazyLoadTimer) {
          clearInterval(_this.lazyLoadTimer);
        }
        if (_this.callbackTimers.length) {
          _this.callbackTimers.forEach(function(timer) {
            return clearTimeout(timer);
          });
          _this.callbackTimers = [];
        }
        if (window.addEventListener) {
          window.removeEventListener("resize", _this.onWindowResized);
        } else {
          window.detachEvent("onresize", _this.onWindowResized);
        }
        if (_this.autoplayTimer) {
          clearInterval(_this.autoplayTimer);
        }
        _this.ro.disconnect();
      });
      _defineProperty(_assertThisInitialized(_this), "componentDidUpdate", function(prevProps) {
        _this.checkImagesLoad();
        _this.props.onReInit && _this.props.onReInit();
        if (_this.props.lazyLoad) {
          var slidesToLoad = getOnDemandLazySlides(_objectSpread2(_objectSpread2({}, _this.props), _this.state));
          if (slidesToLoad.length > 0) {
            _this.setState(function(prevState) {
              return {
                lazyLoadedList: prevState.lazyLoadedList.concat(slidesToLoad)
              };
            });
            if (_this.props.onLazyLoad) {
              _this.props.onLazyLoad(slidesToLoad);
            }
          }
        }
        _this.adaptHeight();
        var spec = _objectSpread2(_objectSpread2({
          listRef: _this.list,
          trackRef: _this.track
        }, _this.props), _this.state);
        var setTrackStyle = _this.didPropsChange(prevProps);
        setTrackStyle && _this.updateState(spec, setTrackStyle, function() {
          if (_this.state.currentSlide >= import_react67.default.Children.count(_this.props.children)) {
            _this.changeSlide({
              message: "index",
              index: import_react67.default.Children.count(_this.props.children) - _this.props.slidesToShow,
              currentSlide: _this.state.currentSlide
            });
          }
          if (prevProps.autoplay !== _this.props.autoplay || prevProps.autoplaySpeed !== _this.props.autoplaySpeed) {
            if (!prevProps.autoplay && _this.props.autoplay) {
              _this.autoPlay("playing");
            } else if (_this.props.autoplay) {
              _this.autoPlay("update");
            } else {
              _this.pause("paused");
            }
          }
        });
      });
      _defineProperty(_assertThisInitialized(_this), "onWindowResized", function(setTrackStyle) {
        if (_this.debouncedResize)
          _this.debouncedResize.cancel();
        _this.debouncedResize = debounce(50, function() {
          return _this.resizeWindow(setTrackStyle);
        });
        _this.debouncedResize();
      });
      _defineProperty(_assertThisInitialized(_this), "resizeWindow", function() {
        var setTrackStyle = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
        var isTrackMounted = Boolean(_this.track && _this.track.node);
        if (!isTrackMounted)
          return;
        var spec = _objectSpread2(_objectSpread2({
          listRef: _this.list,
          trackRef: _this.track
        }, _this.props), _this.state);
        _this.updateState(spec, setTrackStyle, function() {
          if (_this.props.autoplay)
            _this.autoPlay("update");
          else
            _this.pause("paused");
        });
        _this.setState({
          animating: false
        });
        clearTimeout(_this.animationEndCallback);
        delete _this.animationEndCallback;
      });
      _defineProperty(_assertThisInitialized(_this), "updateState", function(spec, setTrackStyle, callback) {
        var updatedState = initializedState(spec);
        spec = _objectSpread2(_objectSpread2(_objectSpread2({}, spec), updatedState), {}, {
          slideIndex: updatedState.currentSlide
        });
        var targetLeft = getTrackLeft(spec);
        spec = _objectSpread2(_objectSpread2({}, spec), {}, {
          left: targetLeft
        });
        var trackStyle = getTrackCSS(spec);
        if (setTrackStyle || import_react67.default.Children.count(_this.props.children) !== import_react67.default.Children.count(spec.children)) {
          updatedState["trackStyle"] = trackStyle;
        }
        _this.setState(updatedState, callback);
      });
      _defineProperty(_assertThisInitialized(_this), "ssrInit", function() {
        if (_this.props.variableWidth) {
          var _trackWidth = 0, _trackLeft = 0;
          var childrenWidths = [];
          var preClones = getPreClones(_objectSpread2(_objectSpread2(_objectSpread2({}, _this.props), _this.state), {}, {
            slideCount: _this.props.children.length
          }));
          var postClones = getPostClones(_objectSpread2(_objectSpread2(_objectSpread2({}, _this.props), _this.state), {}, {
            slideCount: _this.props.children.length
          }));
          _this.props.children.forEach(function(child) {
            childrenWidths.push(child.props.style.width);
            _trackWidth += child.props.style.width;
          });
          for (var i3 = 0; i3 < preClones; i3++) {
            _trackLeft += childrenWidths[childrenWidths.length - 1 - i3];
            _trackWidth += childrenWidths[childrenWidths.length - 1 - i3];
          }
          for (var _i = 0; _i < postClones; _i++) {
            _trackWidth += childrenWidths[_i];
          }
          for (var _i2 = 0; _i2 < _this.state.currentSlide; _i2++) {
            _trackLeft += childrenWidths[_i2];
          }
          var _trackStyle = {
            width: _trackWidth + "px",
            left: -_trackLeft + "px"
          };
          if (_this.props.centerMode) {
            var currentWidth = "".concat(childrenWidths[_this.state.currentSlide], "px");
            _trackStyle.left = "calc(".concat(_trackStyle.left, " + (100% - ").concat(currentWidth, ") / 2 ) ");
          }
          return {
            trackStyle: _trackStyle
          };
        }
        var childrenCount = import_react67.default.Children.count(_this.props.children);
        var spec = _objectSpread2(_objectSpread2(_objectSpread2({}, _this.props), _this.state), {}, {
          slideCount: childrenCount
        });
        var slideCount = getPreClones(spec) + getPostClones(spec) + childrenCount;
        var trackWidth = 100 / _this.props.slidesToShow * slideCount;
        var slideWidth = 100 / slideCount;
        var trackLeft = -slideWidth * (getPreClones(spec) + _this.state.currentSlide) * trackWidth / 100;
        if (_this.props.centerMode) {
          trackLeft += (100 - slideWidth * trackWidth / 100) / 2;
        }
        var trackStyle = {
          width: trackWidth + "%",
          left: trackLeft + "%"
        };
        return {
          slideWidth: slideWidth + "%",
          trackStyle
        };
      });
      _defineProperty(_assertThisInitialized(_this), "checkImagesLoad", function() {
        var images = _this.list && _this.list.querySelectorAll && _this.list.querySelectorAll(".slick-slide img") || [];
        var imagesCount = images.length, loadedCount = 0;
        Array.prototype.forEach.call(images, function(image) {
          var handler = function handler2() {
            return ++loadedCount && loadedCount >= imagesCount && _this.onWindowResized();
          };
          if (!image.onclick) {
            image.onclick = function() {
              return image.parentNode.focus();
            };
          } else {
            var prevClickHandler = image.onclick;
            image.onclick = function(e3) {
              prevClickHandler(e3);
              image.parentNode.focus();
            };
          }
          if (!image.onload) {
            if (_this.props.lazyLoad) {
              image.onload = function() {
                _this.adaptHeight();
                _this.callbackTimers.push(setTimeout(_this.onWindowResized, _this.props.speed));
              };
            } else {
              image.onload = handler;
              image.onerror = function() {
                handler();
                _this.props.onLazyLoadError && _this.props.onLazyLoadError();
              };
            }
          }
        });
      });
      _defineProperty(_assertThisInitialized(_this), "progressiveLazyLoad", function() {
        var slidesToLoad = [];
        var spec = _objectSpread2(_objectSpread2({}, _this.props), _this.state);
        for (var index2 = _this.state.currentSlide; index2 < _this.state.slideCount + getPostClones(spec); index2++) {
          if (_this.state.lazyLoadedList.indexOf(index2) < 0) {
            slidesToLoad.push(index2);
            break;
          }
        }
        for (var _index = _this.state.currentSlide - 1; _index >= -getPreClones(spec); _index--) {
          if (_this.state.lazyLoadedList.indexOf(_index) < 0) {
            slidesToLoad.push(_index);
            break;
          }
        }
        if (slidesToLoad.length > 0) {
          _this.setState(function(state) {
            return {
              lazyLoadedList: state.lazyLoadedList.concat(slidesToLoad)
            };
          });
          if (_this.props.onLazyLoad) {
            _this.props.onLazyLoad(slidesToLoad);
          }
        } else {
          if (_this.lazyLoadTimer) {
            clearInterval(_this.lazyLoadTimer);
            delete _this.lazyLoadTimer;
          }
        }
      });
      _defineProperty(_assertThisInitialized(_this), "slideHandler", function(index2) {
        var dontAnimate = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
        var _this$props = _this.props, asNavFor = _this$props.asNavFor, beforeChange = _this$props.beforeChange, onLazyLoad = _this$props.onLazyLoad, speed = _this$props.speed, afterChange = _this$props.afterChange;
        var currentSlide = _this.state.currentSlide;
        var _slideHandler = slideHandler(_objectSpread2(_objectSpread2(_objectSpread2({
          index: index2
        }, _this.props), _this.state), {}, {
          trackRef: _this.track,
          useCSS: _this.props.useCSS && !dontAnimate
        })), state = _slideHandler.state, nextState = _slideHandler.nextState;
        if (!state)
          return;
        beforeChange && beforeChange(currentSlide, state.currentSlide);
        var slidesToLoad = state.lazyLoadedList.filter(function(value) {
          return _this.state.lazyLoadedList.indexOf(value) < 0;
        });
        onLazyLoad && slidesToLoad.length > 0 && onLazyLoad(slidesToLoad);
        if (!_this.props.waitForAnimate && _this.animationEndCallback) {
          clearTimeout(_this.animationEndCallback);
          afterChange && afterChange(currentSlide);
          delete _this.animationEndCallback;
        }
        _this.setState(state, function() {
          if (asNavFor && _this.asNavForIndex !== index2) {
            _this.asNavForIndex = index2;
            asNavFor.innerSlider.slideHandler(index2);
          }
          if (!nextState)
            return;
          _this.animationEndCallback = setTimeout(function() {
            var animating = nextState.animating, firstBatch = _objectWithoutProperties(nextState, _excluded40);
            _this.setState(firstBatch, function() {
              _this.callbackTimers.push(setTimeout(function() {
                return _this.setState({
                  animating
                });
              }, 10));
              afterChange && afterChange(state.currentSlide);
              delete _this.animationEndCallback;
            });
          }, speed);
        });
      });
      _defineProperty(_assertThisInitialized(_this), "changeSlide", function(options) {
        var dontAnimate = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
        var spec = _objectSpread2(_objectSpread2({}, _this.props), _this.state);
        var targetSlide = changeSlide(spec, options);
        if (targetSlide !== 0 && !targetSlide)
          return;
        if (dontAnimate === true) {
          _this.slideHandler(targetSlide, dontAnimate);
        } else {
          _this.slideHandler(targetSlide);
        }
        _this.props.autoplay && _this.autoPlay("update");
        if (_this.props.focusOnSelect) {
          var nodes = _this.list.querySelectorAll(".slick-current");
          nodes[0] && nodes[0].focus();
        }
      });
      _defineProperty(_assertThisInitialized(_this), "clickHandler", function(e3) {
        if (_this.clickable === false) {
          e3.stopPropagation();
          e3.preventDefault();
        }
        _this.clickable = true;
      });
      _defineProperty(_assertThisInitialized(_this), "keyHandler", function(e3) {
        var dir = keyHandler(e3, _this.props.accessibility, _this.props.rtl);
        dir !== "" && _this.changeSlide({
          message: dir
        });
      });
      _defineProperty(_assertThisInitialized(_this), "selectHandler", function(options) {
        _this.changeSlide(options);
      });
      _defineProperty(_assertThisInitialized(_this), "disableBodyScroll", function() {
        var preventDefault = function preventDefault2(e3) {
          e3 = e3 || window.event;
          if (e3.preventDefault)
            e3.preventDefault();
          e3.returnValue = false;
        };
        window.ontouchmove = preventDefault;
      });
      _defineProperty(_assertThisInitialized(_this), "enableBodyScroll", function() {
        window.ontouchmove = null;
      });
      _defineProperty(_assertThisInitialized(_this), "swipeStart", function(e3) {
        if (_this.props.verticalSwiping) {
          _this.disableBodyScroll();
        }
        var state = swipeStart(e3, _this.props.swipe, _this.props.draggable);
        state !== "" && _this.setState(state);
      });
      _defineProperty(_assertThisInitialized(_this), "swipeMove", function(e3) {
        var state = swipeMove(e3, _objectSpread2(_objectSpread2(_objectSpread2({}, _this.props), _this.state), {}, {
          trackRef: _this.track,
          listRef: _this.list,
          slideIndex: _this.state.currentSlide
        }));
        if (!state)
          return;
        if (state["swiping"]) {
          _this.clickable = false;
        }
        _this.setState(state);
      });
      _defineProperty(_assertThisInitialized(_this), "swipeEnd", function(e3) {
        var state = swipeEnd(e3, _objectSpread2(_objectSpread2(_objectSpread2({}, _this.props), _this.state), {}, {
          trackRef: _this.track,
          listRef: _this.list,
          slideIndex: _this.state.currentSlide
        }));
        if (!state)
          return;
        var triggerSlideHandler = state["triggerSlideHandler"];
        delete state["triggerSlideHandler"];
        _this.setState(state);
        if (triggerSlideHandler === void 0)
          return;
        _this.slideHandler(triggerSlideHandler);
        if (_this.props.verticalSwiping) {
          _this.enableBodyScroll();
        }
      });
      _defineProperty(_assertThisInitialized(_this), "touchEnd", function(e3) {
        _this.swipeEnd(e3);
        _this.clickable = true;
      });
      _defineProperty(_assertThisInitialized(_this), "slickPrev", function() {
        _this.callbackTimers.push(setTimeout(function() {
          return _this.changeSlide({
            message: "previous"
          });
        }, 0));
      });
      _defineProperty(_assertThisInitialized(_this), "slickNext", function() {
        _this.callbackTimers.push(setTimeout(function() {
          return _this.changeSlide({
            message: "next"
          });
        }, 0));
      });
      _defineProperty(_assertThisInitialized(_this), "slickGoTo", function(slide) {
        var dontAnimate = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
        slide = Number(slide);
        if (isNaN(slide))
          return "";
        _this.callbackTimers.push(setTimeout(function() {
          return _this.changeSlide({
            message: "index",
            index: slide,
            currentSlide: _this.state.currentSlide
          }, dontAnimate);
        }, 0));
      });
      _defineProperty(_assertThisInitialized(_this), "play", function() {
        var nextIndex;
        if (_this.props.rtl) {
          nextIndex = _this.state.currentSlide - _this.props.slidesToScroll;
        } else {
          if (canGoNext(_objectSpread2(_objectSpread2({}, _this.props), _this.state))) {
            nextIndex = _this.state.currentSlide + _this.props.slidesToScroll;
          } else {
            return false;
          }
        }
        _this.slideHandler(nextIndex);
      });
      _defineProperty(_assertThisInitialized(_this), "autoPlay", function(playType) {
        if (_this.autoplayTimer) {
          clearInterval(_this.autoplayTimer);
        }
        var autoplaying = _this.state.autoplaying;
        if (playType === "update") {
          if (autoplaying === "hovered" || autoplaying === "focused" || autoplaying === "paused") {
            return;
          }
        } else if (playType === "leave") {
          if (autoplaying === "paused" || autoplaying === "focused") {
            return;
          }
        } else if (playType === "blur") {
          if (autoplaying === "paused" || autoplaying === "hovered") {
            return;
          }
        }
        _this.autoplayTimer = setInterval(_this.play, _this.props.autoplaySpeed + 50);
        _this.setState({
          autoplaying: "playing"
        });
      });
      _defineProperty(_assertThisInitialized(_this), "pause", function(pauseType) {
        if (_this.autoplayTimer) {
          clearInterval(_this.autoplayTimer);
          _this.autoplayTimer = null;
        }
        var autoplaying = _this.state.autoplaying;
        if (pauseType === "paused") {
          _this.setState({
            autoplaying: "paused"
          });
        } else if (pauseType === "focused") {
          if (autoplaying === "hovered" || autoplaying === "playing") {
            _this.setState({
              autoplaying: "focused"
            });
          }
        } else {
          if (autoplaying === "playing") {
            _this.setState({
              autoplaying: "hovered"
            });
          }
        }
      });
      _defineProperty(_assertThisInitialized(_this), "onDotsOver", function() {
        return _this.props.autoplay && _this.pause("hovered");
      });
      _defineProperty(_assertThisInitialized(_this), "onDotsLeave", function() {
        return _this.props.autoplay && _this.state.autoplaying === "hovered" && _this.autoPlay("leave");
      });
      _defineProperty(_assertThisInitialized(_this), "onTrackOver", function() {
        return _this.props.autoplay && _this.pause("hovered");
      });
      _defineProperty(_assertThisInitialized(_this), "onTrackLeave", function() {
        return _this.props.autoplay && _this.state.autoplaying === "hovered" && _this.autoPlay("leave");
      });
      _defineProperty(_assertThisInitialized(_this), "onSlideFocus", function() {
        return _this.props.autoplay && _this.pause("focused");
      });
      _defineProperty(_assertThisInitialized(_this), "onSlideBlur", function() {
        return _this.props.autoplay && _this.state.autoplaying === "focused" && _this.autoPlay("blur");
      });
      _defineProperty(_assertThisInitialized(_this), "render", function() {
        var className = (0, import_classnames86.default)("slick-slider", _this.props.className, {
          "slick-vertical": _this.props.vertical,
          "slick-initialized": true
        });
        var spec = _objectSpread2(_objectSpread2({}, _this.props), _this.state);
        var trackProps = extractObject(spec, ["fade", "cssEase", "speed", "infinite", "centerMode", "focusOnSelect", "currentSlide", "lazyLoad", "lazyLoadedList", "rtl", "slideWidth", "slideHeight", "listHeight", "vertical", "slidesToShow", "slidesToScroll", "slideCount", "trackStyle", "variableWidth", "unslick", "centerPadding", "targetSlide", "useCSS"]);
        var pauseOnHover = _this.props.pauseOnHover;
        trackProps = _objectSpread2(_objectSpread2({}, trackProps), {}, {
          onMouseEnter: pauseOnHover ? _this.onTrackOver : null,
          onMouseLeave: pauseOnHover ? _this.onTrackLeave : null,
          onMouseOver: pauseOnHover ? _this.onTrackOver : null,
          focusOnSelect: _this.props.focusOnSelect && _this.clickable ? _this.selectHandler : null
        });
        var dots;
        if (_this.props.dots === true && _this.state.slideCount >= _this.props.slidesToShow) {
          var dotProps = extractObject(spec, ["dotsClass", "slideCount", "slidesToShow", "currentSlide", "slidesToScroll", "clickHandler", "children", "customPaging", "infinite", "appendDots"]);
          var pauseOnDotsHover = _this.props.pauseOnDotsHover;
          dotProps = _objectSpread2(_objectSpread2({}, dotProps), {}, {
            clickHandler: _this.changeSlide,
            onMouseEnter: pauseOnDotsHover ? _this.onDotsLeave : null,
            onMouseOver: pauseOnDotsHover ? _this.onDotsOver : null,
            onMouseLeave: pauseOnDotsHover ? _this.onDotsLeave : null
          });
          dots = /* @__PURE__ */ import_react67.default.createElement(Dots, dotProps);
        }
        var prevArrow, nextArrow;
        var arrowProps = extractObject(spec, ["infinite", "centerMode", "currentSlide", "slideCount", "slidesToShow", "prevArrow", "nextArrow"]);
        arrowProps.clickHandler = _this.changeSlide;
        if (_this.props.arrows) {
          prevArrow = /* @__PURE__ */ import_react67.default.createElement(PrevArrow, arrowProps);
          nextArrow = /* @__PURE__ */ import_react67.default.createElement(NextArrow, arrowProps);
        }
        var verticalHeightStyle = null;
        if (_this.props.vertical) {
          verticalHeightStyle = {
            height: _this.state.listHeight
          };
        }
        var centerPaddingStyle = null;
        if (_this.props.vertical === false) {
          if (_this.props.centerMode === true) {
            centerPaddingStyle = {
              padding: "0px " + _this.props.centerPadding
            };
          }
        } else {
          if (_this.props.centerMode === true) {
            centerPaddingStyle = {
              padding: _this.props.centerPadding + " 0px"
            };
          }
        }
        var listStyle = _objectSpread2(_objectSpread2({}, verticalHeightStyle), centerPaddingStyle);
        var touchMove = _this.props.touchMove;
        var listProps = {
          className: "slick-list",
          style: listStyle,
          onClick: _this.clickHandler,
          onMouseDown: touchMove ? _this.swipeStart : null,
          onMouseMove: _this.state.dragging && touchMove ? _this.swipeMove : null,
          onMouseUp: touchMove ? _this.swipeEnd : null,
          onMouseLeave: _this.state.dragging && touchMove ? _this.swipeEnd : null,
          onTouchStart: touchMove ? _this.swipeStart : null,
          onTouchMove: _this.state.dragging && touchMove ? _this.swipeMove : null,
          onTouchEnd: touchMove ? _this.touchEnd : null,
          onTouchCancel: _this.state.dragging && touchMove ? _this.swipeEnd : null,
          onKeyDown: _this.props.accessibility ? _this.keyHandler : null
        };
        var innerSliderProps = {
          className,
          dir: "ltr",
          style: _this.props.style
        };
        if (_this.props.unslick) {
          listProps = {
            className: "slick-list"
          };
          innerSliderProps = {
            className,
            style: _this.props.style
          };
        }
        return /* @__PURE__ */ import_react67.default.createElement("div", innerSliderProps, !_this.props.unslick ? prevArrow : "", /* @__PURE__ */ import_react67.default.createElement("div", _extends({
          ref: _this.listRefHandler
        }, listProps), /* @__PURE__ */ import_react67.default.createElement(Track, _extends({
          ref: _this.trackRefHandler
        }, trackProps), _this.props.children)), !_this.props.unslick ? nextArrow : "", !_this.props.unslick ? dots : "");
      });
      _this.list = null;
      _this.track = null;
      _this.state = _objectSpread2(_objectSpread2({}, initial_state_default), {}, {
        currentSlide: _this.props.initialSlide,
        slideCount: import_react67.default.Children.count(_this.props.children)
      });
      _this.callbackTimers = [];
      _this.clickable = true;
      _this.debouncedResize = null;
      var ssrState = _this.ssrInit();
      _this.state = _objectSpread2(_objectSpread2({}, _this.state), ssrState);
      return _this;
    }
    _createClass(InnerSlider2, [{
      key: "didPropsChange",
      value: function didPropsChange(prevProps) {
        var setTrackStyle = false;
        for (var _i3 = 0, _Object$keys = Object.keys(this.props); _i3 < _Object$keys.length; _i3++) {
          var key2 = _Object$keys[_i3];
          if (!prevProps.hasOwnProperty(key2)) {
            setTrackStyle = true;
            break;
          }
          if (_typeof(prevProps[key2]) === "object" || typeof prevProps[key2] === "function") {
            continue;
          }
          if (prevProps[key2] !== this.props[key2]) {
            setTrackStyle = true;
            break;
          }
        }
        return setTrackStyle || import_react67.default.Children.count(this.props.children) !== import_react67.default.Children.count(prevProps.children);
      }
    }]);
    return InnerSlider2;
  }(import_react67.default.Component);

  // node_modules/@ant-design/react-slick/es/slider.js
  var import_json2mq = __toESM(require_json2mq());

  // node_modules/@ant-design/react-slick/es/default-props.js
  var import_react68 = __toESM(require_react());
  var defaultProps = {
    accessibility: true,
    adaptiveHeight: false,
    afterChange: null,
    appendDots: function appendDots(dots) {
      return /* @__PURE__ */ import_react68.default.createElement("ul", {
        style: {
          display: "block"
        }
      }, dots);
    },
    arrows: true,
    autoplay: false,
    autoplaySpeed: 3e3,
    beforeChange: null,
    centerMode: false,
    centerPadding: "50px",
    className: "",
    cssEase: "ease",
    customPaging: function customPaging(i3) {
      return /* @__PURE__ */ import_react68.default.createElement("button", null, i3 + 1);
    },
    dots: false,
    dotsClass: "slick-dots",
    draggable: true,
    easing: "linear",
    edgeFriction: 0.35,
    fade: false,
    focusOnSelect: false,
    infinite: true,
    initialSlide: 0,
    lazyLoad: null,
    nextArrow: null,
    onEdge: null,
    onInit: null,
    onLazyLoadError: null,
    onReInit: null,
    pauseOnDotsHover: false,
    pauseOnFocus: false,
    pauseOnHover: true,
    prevArrow: null,
    responsive: null,
    rows: 1,
    rtl: false,
    slide: "div",
    slidesPerRow: 1,
    slidesToScroll: 1,
    slidesToShow: 1,
    speed: 500,
    swipe: true,
    swipeEvent: null,
    swipeToSlide: false,
    touchMove: true,
    touchThreshold: 5,
    useCSS: true,
    useTransform: true,
    variableWidth: false,
    vertical: false,
    waitForAnimate: true
  };
  var default_props_default = defaultProps;

  // node_modules/@ant-design/react-slick/es/slider.js
  var Slider = /* @__PURE__ */ function(_React$Component) {
    _inherits(Slider2, _React$Component);
    var _super = _createSuper(Slider2);
    function Slider2(props) {
      var _this;
      _classCallCheck(this, Slider2);
      _this = _super.call(this, props);
      _defineProperty(_assertThisInitialized(_this), "innerSliderRefHandler", function(ref) {
        return _this.innerSlider = ref;
      });
      _defineProperty(_assertThisInitialized(_this), "slickPrev", function() {
        return _this.innerSlider.slickPrev();
      });
      _defineProperty(_assertThisInitialized(_this), "slickNext", function() {
        return _this.innerSlider.slickNext();
      });
      _defineProperty(_assertThisInitialized(_this), "slickGoTo", function(slide) {
        var dontAnimate = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
        return _this.innerSlider.slickGoTo(slide, dontAnimate);
      });
      _defineProperty(_assertThisInitialized(_this), "slickPause", function() {
        return _this.innerSlider.pause("paused");
      });
      _defineProperty(_assertThisInitialized(_this), "slickPlay", function() {
        return _this.innerSlider.autoPlay("play");
      });
      _this.state = {
        breakpoint: null
      };
      _this._responsiveMediaHandlers = [];
      return _this;
    }
    _createClass(Slider2, [{
      key: "media",
      value: function media(query, handler) {
        var mql = window.matchMedia(query);
        var listener2 = function listener3(_ref) {
          var matches = _ref.matches;
          if (matches) {
            handler();
          }
        };
        mql.addListener(listener2);
        listener2(mql);
        this._responsiveMediaHandlers.push({
          mql,
          query,
          listener: listener2
        });
      }
      // handles responsive breakpoints
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;
        if (this.props.responsive) {
          var breakpoints = this.props.responsive.map(function(breakpt) {
            return breakpt.breakpoint;
          });
          breakpoints.sort(function(x2, y2) {
            return x2 - y2;
          });
          breakpoints.forEach(function(breakpoint, index2) {
            var bQuery;
            if (index2 === 0) {
              bQuery = (0, import_json2mq.default)({
                minWidth: 0,
                maxWidth: breakpoint
              });
            } else {
              bQuery = (0, import_json2mq.default)({
                minWidth: breakpoints[index2 - 1] + 1,
                maxWidth: breakpoint
              });
            }
            canUseDOM() && _this2.media(bQuery, function() {
              _this2.setState({
                breakpoint
              });
            });
          });
          var query = (0, import_json2mq.default)({
            minWidth: breakpoints.slice(-1)[0]
          });
          canUseDOM() && this.media(query, function() {
            _this2.setState({
              breakpoint: null
            });
          });
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this._responsiveMediaHandlers.forEach(function(obj) {
          obj.mql.removeListener(obj.listener);
        });
      }
    }, {
      key: "render",
      value: function render2() {
        var _this3 = this;
        var settings;
        var newProps;
        if (this.state.breakpoint) {
          newProps = this.props.responsive.filter(function(resp) {
            return resp.breakpoint === _this3.state.breakpoint;
          });
          settings = newProps[0].settings === "unslick" ? "unslick" : _objectSpread2(_objectSpread2(_objectSpread2({}, default_props_default), this.props), newProps[0].settings);
        } else {
          settings = _objectSpread2(_objectSpread2({}, default_props_default), this.props);
        }
        if (settings.centerMode) {
          if (settings.slidesToScroll > 1 && true) {
            console.warn("slidesToScroll should be equal to 1 in centerMode, you are using ".concat(settings.slidesToScroll));
          }
          settings.slidesToScroll = 1;
        }
        if (settings.fade) {
          if (settings.slidesToShow > 1 && true) {
            console.warn("slidesToShow should be equal to 1 when fade is true, you're using ".concat(settings.slidesToShow));
          }
          if (settings.slidesToScroll > 1 && true) {
            console.warn("slidesToScroll should be equal to 1 when fade is true, you're using ".concat(settings.slidesToScroll));
          }
          settings.slidesToShow = 1;
          settings.slidesToScroll = 1;
        }
        var children = import_react69.default.Children.toArray(this.props.children);
        children = children.filter(function(child) {
          if (typeof child === "string") {
            return !!child.trim();
          }
          return !!child;
        });
        if (settings.variableWidth && (settings.rows > 1 || settings.slidesPerRow > 1)) {
          console.warn("variableWidth is not supported in case of rows > 1 or slidesPerRow > 1");
          settings.variableWidth = false;
        }
        var newChildren = [];
        var currentWidth = null;
        for (var i3 = 0; i3 < children.length; i3 += settings.rows * settings.slidesPerRow) {
          var newSlide = [];
          for (var j2 = i3; j2 < i3 + settings.rows * settings.slidesPerRow; j2 += settings.slidesPerRow) {
            var row = [];
            for (var k2 = j2; k2 < j2 + settings.slidesPerRow; k2 += 1) {
              if (settings.variableWidth && children[k2].props.style) {
                currentWidth = children[k2].props.style.width;
              }
              if (k2 >= children.length)
                break;
              row.push(/* @__PURE__ */ import_react69.default.cloneElement(children[k2], {
                key: 100 * i3 + 10 * j2 + k2,
                tabIndex: -1,
                style: {
                  width: "".concat(100 / settings.slidesPerRow, "%"),
                  display: "inline-block"
                }
              }));
            }
            newSlide.push(/* @__PURE__ */ import_react69.default.createElement("div", {
              key: 10 * i3 + j2
            }, row));
          }
          if (settings.variableWidth) {
            newChildren.push(/* @__PURE__ */ import_react69.default.createElement("div", {
              key: i3,
              style: {
                width: currentWidth
              }
            }, newSlide));
          } else {
            newChildren.push(/* @__PURE__ */ import_react69.default.createElement("div", {
              key: i3
            }, newSlide));
          }
        }
        if (settings === "unslick") {
          var className = "regular slider " + (this.props.className || "");
          return /* @__PURE__ */ import_react69.default.createElement("div", {
            className
          }, children);
        } else if (newChildren.length <= settings.slidesToShow) {
          settings.unslick = true;
        }
        return /* @__PURE__ */ import_react69.default.createElement(InnerSlider, _extends({
          style: this.props.style,
          ref: this.innerSliderRefHandler
        }, settings), newChildren);
      }
    }]);
    return Slider2;
  }(import_react69.default.Component);

  // node_modules/@ant-design/react-slick/es/index.js
  var es_default17 = Slider;

  // node_modules/antd/es/carousel/index.js
  var import_classnames87 = __toESM(require_classnames());
  var React240 = __toESM(require_react());
  var __rest23 = function(s2, e3) {
    var t4 = {};
    for (var p2 in s2)
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t4[p2] = s2[p2];
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t4[p2[i3]] = s2[p2[i3]];
      }
    return t4;
  };
  var Carousel = /* @__PURE__ */ React240.forwardRef(function(_a, ref) {
    var _classNames;
    var _a$dots = _a.dots, dots = _a$dots === void 0 ? true : _a$dots, _a$arrows = _a.arrows, arrows = _a$arrows === void 0 ? false : _a$arrows, _a$draggable = _a.draggable, draggable = _a$draggable === void 0 ? false : _a$draggable, _a$dotPosition = _a.dotPosition, dotPosition = _a$dotPosition === void 0 ? "bottom" : _a$dotPosition, _a$vertical = _a.vertical, vertical = _a$vertical === void 0 ? dotPosition === "left" || dotPosition === "right" : _a$vertical, props = __rest23(_a, ["dots", "arrows", "draggable", "dotPosition", "vertical"]);
    var _React$useContext = React240.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls, direction = _React$useContext.direction;
    var slickRef = React240.useRef();
    var goTo = function goTo2(slide) {
      var dontAnimate = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      slickRef.current.slickGoTo(slide, dontAnimate);
    };
    React240.useImperativeHandle(ref, function() {
      return {
        goTo,
        autoPlay: slickRef.current.innerSlider.autoPlay,
        innerSlider: slickRef.current.innerSlider,
        prev: slickRef.current.slickPrev,
        next: slickRef.current.slickNext
      };
    }, [slickRef.current]);
    var prevCount = React240.useRef(React240.Children.count(props.children));
    React240.useEffect(function() {
      if (prevCount.current !== React240.Children.count(props.children)) {
        goTo(props.initialSlide || 0, false);
        prevCount.current = React240.Children.count(props.children);
      }
    }, [props.children]);
    var newProps = _extends({
      vertical
    }, props);
    if (newProps.effect === "fade") {
      newProps.fade = true;
    }
    var prefixCls = getPrefixCls("carousel", newProps.prefixCls);
    var dotsClass = "slick-dots";
    var enableDots = !!dots;
    var dsClass = (0, import_classnames87.default)(dotsClass, "".concat(dotsClass, "-").concat(dotPosition), typeof dots === "boolean" ? false : dots === null || dots === void 0 ? void 0 : dots.className);
    var className = (0, import_classnames87.default)(prefixCls, (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-rtl"), direction === "rtl"), _defineProperty(_classNames, "".concat(prefixCls, "-vertical"), dotPosition === "left" || dotPosition === "right"), _classNames));
    return /* @__PURE__ */ React240.createElement("div", {
      className
    }, /* @__PURE__ */ React240.createElement(es_default17, _extends({
      ref: slickRef
    }, newProps, {
      dots: enableDots,
      dotsClass: dsClass,
      arrows,
      draggable
    })));
  });
  var carousel_default = Carousel;

  // node_modules/rc-tree/es/utils/keyUtil.js
  function getEntity(keyEntities, key2) {
    return keyEntities[key2];
  }

  // node_modules/rc-tree/es/utils/conductUtil.js
  function removeFromCheckedKeys(halfCheckedKeys, checkedKeys) {
    var filteredKeys = /* @__PURE__ */ new Set();
    halfCheckedKeys.forEach(function(key2) {
      if (!checkedKeys.has(key2)) {
        filteredKeys.add(key2);
      }
    });
    return filteredKeys;
  }
  function isCheckDisabled(node) {
    var _ref = node || {}, disabled = _ref.disabled, disableCheckbox = _ref.disableCheckbox, checkable = _ref.checkable;
    return !!(disabled || disableCheckbox) || checkable === false;
  }
  function fillConductCheck(keys2, levelEntities, maxLevel, syntheticGetCheckDisabled) {
    var checkedKeys = new Set(keys2);
    var halfCheckedKeys = /* @__PURE__ */ new Set();
    for (var level = 0; level <= maxLevel; level += 1) {
      var entities = levelEntities.get(level) || /* @__PURE__ */ new Set();
      entities.forEach(function(entity) {
        var key2 = entity.key, node = entity.node, _entity$children = entity.children, children = _entity$children === void 0 ? [] : _entity$children;
        if (checkedKeys.has(key2) && !syntheticGetCheckDisabled(node)) {
          children.filter(function(childEntity) {
            return !syntheticGetCheckDisabled(childEntity.node);
          }).forEach(function(childEntity) {
            checkedKeys.add(childEntity.key);
          });
        }
      });
    }
    var visitedKeys = /* @__PURE__ */ new Set();
    for (var _level = maxLevel; _level >= 0; _level -= 1) {
      var _entities = levelEntities.get(_level) || /* @__PURE__ */ new Set();
      _entities.forEach(function(entity) {
        var parent = entity.parent, node = entity.node;
        if (syntheticGetCheckDisabled(node) || !entity.parent || visitedKeys.has(entity.parent.key)) {
          return;
        }
        if (syntheticGetCheckDisabled(entity.parent.node)) {
          visitedKeys.add(parent.key);
          return;
        }
        var allChecked = true;
        var partialChecked = false;
        (parent.children || []).filter(function(childEntity) {
          return !syntheticGetCheckDisabled(childEntity.node);
        }).forEach(function(_ref2) {
          var key2 = _ref2.key;
          var checked = checkedKeys.has(key2);
          if (allChecked && !checked) {
            allChecked = false;
          }
          if (!partialChecked && (checked || halfCheckedKeys.has(key2))) {
            partialChecked = true;
          }
        });
        if (allChecked) {
          checkedKeys.add(parent.key);
        }
        if (partialChecked) {
          halfCheckedKeys.add(parent.key);
        }
        visitedKeys.add(parent.key);
      });
    }
    return {
      checkedKeys: Array.from(checkedKeys),
      halfCheckedKeys: Array.from(removeFromCheckedKeys(halfCheckedKeys, checkedKeys))
    };
  }
  function cleanConductCheck(keys2, halfKeys, levelEntities, maxLevel, syntheticGetCheckDisabled) {
    var checkedKeys = new Set(keys2);
    var halfCheckedKeys = new Set(halfKeys);
    for (var level = 0; level <= maxLevel; level += 1) {
      var entities = levelEntities.get(level) || /* @__PURE__ */ new Set();
      entities.forEach(function(entity) {
        var key2 = entity.key, node = entity.node, _entity$children2 = entity.children, children = _entity$children2 === void 0 ? [] : _entity$children2;
        if (!checkedKeys.has(key2) && !halfCheckedKeys.has(key2) && !syntheticGetCheckDisabled(node)) {
          children.filter(function(childEntity) {
            return !syntheticGetCheckDisabled(childEntity.node);
          }).forEach(function(childEntity) {
            checkedKeys.delete(childEntity.key);
          });
        }
      });
    }
    halfCheckedKeys = /* @__PURE__ */ new Set();
    var visitedKeys = /* @__PURE__ */ new Set();
    for (var _level2 = maxLevel; _level2 >= 0; _level2 -= 1) {
      var _entities2 = levelEntities.get(_level2) || /* @__PURE__ */ new Set();
      _entities2.forEach(function(entity) {
        var parent = entity.parent, node = entity.node;
        if (syntheticGetCheckDisabled(node) || !entity.parent || visitedKeys.has(entity.parent.key)) {
          return;
        }
        if (syntheticGetCheckDisabled(entity.parent.node)) {
          visitedKeys.add(parent.key);
          return;
        }
        var allChecked = true;
        var partialChecked = false;
        (parent.children || []).filter(function(childEntity) {
          return !syntheticGetCheckDisabled(childEntity.node);
        }).forEach(function(_ref3) {
          var key2 = _ref3.key;
          var checked = checkedKeys.has(key2);
          if (allChecked && !checked) {
            allChecked = false;
          }
          if (!partialChecked && (checked || halfCheckedKeys.has(key2))) {
            partialChecked = true;
          }
        });
        if (!allChecked) {
          checkedKeys.delete(parent.key);
        }
        if (partialChecked) {
          halfCheckedKeys.add(parent.key);
        }
        visitedKeys.add(parent.key);
      });
    }
    return {
      checkedKeys: Array.from(checkedKeys),
      halfCheckedKeys: Array.from(removeFromCheckedKeys(halfCheckedKeys, checkedKeys))
    };
  }
  function conductCheck(keyList, checked, keyEntities, getCheckDisabled) {
    var warningMissKeys = [];
    var syntheticGetCheckDisabled;
    if (getCheckDisabled) {
      syntheticGetCheckDisabled = getCheckDisabled;
    } else {
      syntheticGetCheckDisabled = isCheckDisabled;
    }
    var keys2 = new Set(keyList.filter(function(key2) {
      var hasEntity = !!getEntity(keyEntities, key2);
      if (!hasEntity) {
        warningMissKeys.push(key2);
      }
      return hasEntity;
    }));
    var levelEntities = /* @__PURE__ */ new Map();
    var maxLevel = 0;
    Object.keys(keyEntities).forEach(function(key2) {
      var entity = keyEntities[key2];
      var level = entity.level;
      var levelSet = levelEntities.get(level);
      if (!levelSet) {
        levelSet = /* @__PURE__ */ new Set();
        levelEntities.set(level, levelSet);
      }
      levelSet.add(entity);
      maxLevel = Math.max(maxLevel, level);
    });
    warning_default(!warningMissKeys.length, "Tree missing follow keys: ".concat(warningMissKeys.slice(0, 100).map(function(key2) {
      return "'".concat(key2, "'");
    }).join(", ")));
    var result2;
    if (checked === true) {
      result2 = fillConductCheck(keys2, levelEntities, maxLevel, syntheticGetCheckDisabled);
    } else {
      result2 = cleanConductCheck(keys2, checked.halfCheckedKeys, levelEntities, maxLevel, syntheticGetCheckDisabled);
    }
    return result2;
  }

  // node_modules/rc-tree/es/utils/treeUtil.js
  var _excluded41 = ["children"];
  function getPosition(level, index2) {
    return "".concat(level, "-").concat(index2);
  }
  function isTreeNode(node) {
    return node && node.type && node.type.isTreeNode;
  }
  function getKey4(key2, pos) {
    if (key2 !== null && key2 !== void 0) {
      return key2;
    }
    return pos;
  }
  function fillFieldNames2(fieldNames) {
    var _ref = fieldNames || {}, title = _ref.title, _title = _ref._title, key2 = _ref.key, children = _ref.children;
    var mergedTitle = title || "title";
    return {
      title: mergedTitle,
      _title: _title || [mergedTitle],
      key: key2 || "key",
      children: children || "children"
    };
  }
  function warningWithoutKey(treeData, fieldNames) {
    var keys2 = /* @__PURE__ */ new Map();
    function dig(list) {
      var path2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
      (list || []).forEach(function(treeNode) {
        var key2 = treeNode[fieldNames.key];
        var children = treeNode[fieldNames.children];
        warning_default(key2 !== null && key2 !== void 0, "Tree node must have a certain key: [".concat(path2).concat(key2, "]"));
        var recordKey = String(key2);
        warning_default(!keys2.has(recordKey) || key2 === null || key2 === void 0, "Same 'key' exist in the Tree: ".concat(recordKey));
        keys2.set(recordKey, true);
        dig(children, "".concat(path2).concat(recordKey, " > "));
      });
    }
    dig(treeData);
  }
  function convertTreeToData(rootNodes) {
    function dig(node) {
      var treeNodes = toArray(node);
      return treeNodes.map(function(treeNode) {
        if (!isTreeNode(treeNode)) {
          warning_default(!treeNode, "Tree/TreeNode can only accept TreeNode as children.");
          return null;
        }
        var key2 = treeNode.key;
        var _treeNode$props = treeNode.props, children = _treeNode$props.children, rest = _objectWithoutProperties(_treeNode$props, _excluded41);
        var dataNode = _objectSpread2({
          key: key2
        }, rest);
        var parsedChildren = dig(children);
        if (parsedChildren.length) {
          dataNode.children = parsedChildren;
        }
        return dataNode;
      }).filter(function(dataNode) {
        return dataNode;
      });
    }
    return dig(rootNodes);
  }
  function flattenTreeData(treeNodeList, expandedKeys, fieldNames) {
    var _fillFieldNames = fillFieldNames2(fieldNames), fieldTitles = _fillFieldNames._title, fieldKey = _fillFieldNames.key, fieldChildren = _fillFieldNames.children;
    var expandedKeySet = new Set(expandedKeys === true ? [] : expandedKeys);
    var flattenList = [];
    function dig(list) {
      var parent = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
      return list.map(function(treeNode, index2) {
        var pos = getPosition(parent ? parent.pos : "0", index2);
        var mergedKey = getKey4(treeNode[fieldKey], pos);
        var mergedTitle;
        for (var i3 = 0; i3 < fieldTitles.length; i3 += 1) {
          var fieldTitle = fieldTitles[i3];
          if (treeNode[fieldTitle] !== void 0) {
            mergedTitle = treeNode[fieldTitle];
            break;
          }
        }
        var flattenNode = _objectSpread2(_objectSpread2({}, omit(treeNode, [].concat(_toConsumableArray(fieldTitles), [fieldKey, fieldChildren]))), {}, {
          title: mergedTitle,
          key: mergedKey,
          parent,
          pos,
          children: null,
          data: treeNode,
          isStart: [].concat(_toConsumableArray(parent ? parent.isStart : []), [index2 === 0]),
          isEnd: [].concat(_toConsumableArray(parent ? parent.isEnd : []), [index2 === list.length - 1])
        });
        flattenList.push(flattenNode);
        if (expandedKeys === true || expandedKeySet.has(mergedKey)) {
          flattenNode.children = dig(treeNode[fieldChildren] || [], flattenNode);
        } else {
          flattenNode.children = [];
        }
        return flattenNode;
      });
    }
    dig(treeNodeList);
    return flattenList;
  }
  function traverseDataNodes(dataNodes, callback, config) {
    var mergedConfig = {};
    if (_typeof(config) === "object") {
      mergedConfig = config;
    } else {
      mergedConfig = {
        externalGetKey: config
      };
    }
    mergedConfig = mergedConfig || {};
    var _mergedConfig = mergedConfig, childrenPropName = _mergedConfig.childrenPropName, externalGetKey = _mergedConfig.externalGetKey, fieldNames = _mergedConfig.fieldNames;
    var _fillFieldNames2 = fillFieldNames2(fieldNames), fieldKey = _fillFieldNames2.key, fieldChildren = _fillFieldNames2.children;
    var mergeChildrenPropName = childrenPropName || fieldChildren;
    var syntheticGetKey;
    if (externalGetKey) {
      if (typeof externalGetKey === "string") {
        syntheticGetKey = function syntheticGetKey2(node) {
          return node[externalGetKey];
        };
      } else if (typeof externalGetKey === "function") {
        syntheticGetKey = function syntheticGetKey2(node) {
          return externalGetKey(node);
        };
      }
    } else {
      syntheticGetKey = function syntheticGetKey2(node, pos) {
        return getKey4(node[fieldKey], pos);
      };
    }
    function processNode(node, index2, parent, pathNodes) {
      var children = node ? node[mergeChildrenPropName] : dataNodes;
      var pos = node ? getPosition(parent.pos, index2) : "0";
      var connectNodes = node ? [].concat(_toConsumableArray(pathNodes), [node]) : [];
      if (node) {
        var key2 = syntheticGetKey(node, pos);
        var data = {
          node,
          index: index2,
          pos,
          key: key2,
          parentPos: parent.node ? parent.pos : null,
          level: parent.level + 1,
          nodes: connectNodes
        };
        callback(data);
      }
      if (children) {
        children.forEach(function(subNode, subIndex) {
          processNode(subNode, subIndex, {
            node,
            pos,
            level: parent ? parent.level + 1 : -1
          }, connectNodes);
        });
      }
    }
    processNode(null);
  }
  function convertDataToEntities(dataNodes) {
    var _ref2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, initWrapper = _ref2.initWrapper, processEntity = _ref2.processEntity, onProcessFinished = _ref2.onProcessFinished, externalGetKey = _ref2.externalGetKey, childrenPropName = _ref2.childrenPropName, fieldNames = _ref2.fieldNames;
    var legacyExternalGetKey = arguments.length > 2 ? arguments[2] : void 0;
    var mergedExternalGetKey = externalGetKey || legacyExternalGetKey;
    var posEntities = {};
    var keyEntities = {};
    var wrapper = {
      posEntities,
      keyEntities
    };
    if (initWrapper) {
      wrapper = initWrapper(wrapper) || wrapper;
    }
    traverseDataNodes(dataNodes, function(item) {
      var node = item.node, index2 = item.index, pos = item.pos, key2 = item.key, parentPos = item.parentPos, level = item.level, nodes = item.nodes;
      var entity = {
        node,
        nodes,
        index: index2,
        key: key2,
        pos,
        level
      };
      var mergedKey = getKey4(key2, pos);
      posEntities[pos] = entity;
      keyEntities[mergedKey] = entity;
      entity.parent = posEntities[parentPos];
      if (entity.parent) {
        entity.parent.children = entity.parent.children || [];
        entity.parent.children.push(entity);
      }
      if (processEntity) {
        processEntity(entity, wrapper);
      }
    }, {
      externalGetKey: mergedExternalGetKey,
      childrenPropName,
      fieldNames
    });
    if (onProcessFinished) {
      onProcessFinished(wrapper);
    }
    return wrapper;
  }
  function getTreeNodeProps(key2, _ref3) {
    var expandedKeys = _ref3.expandedKeys, selectedKeys = _ref3.selectedKeys, loadedKeys = _ref3.loadedKeys, loadingKeys = _ref3.loadingKeys, checkedKeys = _ref3.checkedKeys, halfCheckedKeys = _ref3.halfCheckedKeys, dragOverNodeKey = _ref3.dragOverNodeKey, dropPosition = _ref3.dropPosition, keyEntities = _ref3.keyEntities;
    var entity = getEntity(keyEntities, key2);
    var treeNodeProps = {
      eventKey: key2,
      expanded: expandedKeys.indexOf(key2) !== -1,
      selected: selectedKeys.indexOf(key2) !== -1,
      loaded: loadedKeys.indexOf(key2) !== -1,
      loading: loadingKeys.indexOf(key2) !== -1,
      checked: checkedKeys.indexOf(key2) !== -1,
      halfChecked: halfCheckedKeys.indexOf(key2) !== -1,
      pos: String(entity ? entity.pos : ""),
      // [Legacy] Drag props
      // Since the interaction of drag is changed, the semantic of the props are
      // not accuracy, I think it should be finally removed
      dragOver: dragOverNodeKey === key2 && dropPosition === 0,
      dragOverGapTop: dragOverNodeKey === key2 && dropPosition === -1,
      dragOverGapBottom: dragOverNodeKey === key2 && dropPosition === 1
    };
    return treeNodeProps;
  }
  function convertNodePropsToEventData(props) {
    var data = props.data, expanded = props.expanded, selected = props.selected, checked = props.checked, loaded = props.loaded, loading = props.loading, halfChecked = props.halfChecked, dragOver = props.dragOver, dragOverGapTop = props.dragOverGapTop, dragOverGapBottom = props.dragOverGapBottom, pos = props.pos, active = props.active, eventKey = props.eventKey;
    var eventData = _objectSpread2(_objectSpread2({}, data), {}, {
      expanded,
      selected,
      checked,
      loaded,
      loading,
      halfChecked,
      dragOver,
      dragOverGapTop,
      dragOverGapBottom,
      pos,
      active,
      key: eventKey
    });
    if (!("props" in eventData)) {
      Object.defineProperty(eventData, "props", {
        get: function get3() {
          warning_default(false, "Second param return from event is node data instead of TreeNode instance. Please read value directly instead of reading from `props`.");
          return props;
        }
      });
    }
    return eventData;
  }

  // node_modules/antd/es/checkbox/Checkbox.js
  var import_classnames89 = __toESM(require_classnames());
  var React242 = __toESM(require_react());
  var import_react70 = __toESM(require_react());

  // node_modules/antd/es/checkbox/Group.js
  var import_classnames88 = __toESM(require_classnames());
  var React241 = __toESM(require_react());
  var __rest24 = function(s2, e3) {
    var t4 = {};
    for (var p2 in s2)
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t4[p2] = s2[p2];
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t4[p2[i3]] = s2[p2[i3]];
      }
    return t4;
  };
  var GroupContext = /* @__PURE__ */ React241.createContext(null);
  var InternalCheckboxGroup = function InternalCheckboxGroup2(_a, ref) {
    var defaultValue = _a.defaultValue, children = _a.children, _a$options = _a.options, options = _a$options === void 0 ? [] : _a$options, customizePrefixCls = _a.prefixCls, className = _a.className, style3 = _a.style, onChange = _a.onChange, restProps = __rest24(_a, ["defaultValue", "children", "options", "prefixCls", "className", "style", "onChange"]);
    var _React$useContext = React241.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls, direction = _React$useContext.direction;
    var _React$useState = React241.useState(restProps.value || defaultValue || []), _React$useState2 = _slicedToArray(_React$useState, 2), value = _React$useState2[0], setValue = _React$useState2[1];
    var _React$useState3 = React241.useState([]), _React$useState4 = _slicedToArray(_React$useState3, 2), registeredValues = _React$useState4[0], setRegisteredValues = _React$useState4[1];
    React241.useEffect(function() {
      if ("value" in restProps) {
        setValue(restProps.value || []);
      }
    }, [restProps.value]);
    var getOptions2 = function getOptions3() {
      return options.map(function(option) {
        if (typeof option === "string" || typeof option === "number") {
          return {
            label: option,
            value: option
          };
        }
        return option;
      });
    };
    var cancelValue = function cancelValue2(val) {
      setRegisteredValues(function(prevValues) {
        return prevValues.filter(function(v2) {
          return v2 !== val;
        });
      });
    };
    var registerValue = function registerValue2(val) {
      setRegisteredValues(function(prevValues) {
        return [].concat(_toConsumableArray(prevValues), [val]);
      });
    };
    var toggleOption = function toggleOption2(option) {
      var optionIndex = value.indexOf(option.value);
      var newValue = _toConsumableArray(value);
      if (optionIndex === -1) {
        newValue.push(option.value);
      } else {
        newValue.splice(optionIndex, 1);
      }
      if (!("value" in restProps)) {
        setValue(newValue);
      }
      var opts = getOptions2();
      onChange === null || onChange === void 0 ? void 0 : onChange(newValue.filter(function(val) {
        return registeredValues.includes(val);
      }).sort(function(a2, b2) {
        var indexA = opts.findIndex(function(opt) {
          return opt.value === a2;
        });
        var indexB = opts.findIndex(function(opt) {
          return opt.value === b2;
        });
        return indexA - indexB;
      }));
    };
    var prefixCls = getPrefixCls("checkbox", customizePrefixCls);
    var groupPrefixCls = "".concat(prefixCls, "-group");
    var domProps = omit(restProps, ["value", "disabled"]);
    if (options && options.length > 0) {
      children = getOptions2().map(function(option) {
        return /* @__PURE__ */ React241.createElement(Checkbox_default, {
          prefixCls,
          key: option.value.toString(),
          disabled: "disabled" in option ? option.disabled : restProps.disabled,
          value: option.value,
          checked: value.includes(option.value),
          onChange: option.onChange,
          className: "".concat(groupPrefixCls, "-item"),
          style: option.style
        }, option.label);
      });
    }
    var context2 = {
      toggleOption,
      value,
      disabled: restProps.disabled,
      name: restProps.name,
      // https://github.com/ant-design/ant-design/issues/16376
      registerValue,
      cancelValue
    };
    var classString = (0, import_classnames88.default)(groupPrefixCls, _defineProperty({}, "".concat(groupPrefixCls, "-rtl"), direction === "rtl"), className);
    return /* @__PURE__ */ React241.createElement("div", _extends({
      className: classString,
      style: style3
    }, domProps, {
      ref
    }), /* @__PURE__ */ React241.createElement(GroupContext.Provider, {
      value: context2
    }, children));
  };
  var CheckboxGroup = /* @__PURE__ */ React241.forwardRef(InternalCheckboxGroup);
  var Group_default = /* @__PURE__ */ React241.memo(CheckboxGroup);

  // node_modules/antd/es/checkbox/Checkbox.js
  var __rest25 = function(s2, e3) {
    var t4 = {};
    for (var p2 in s2)
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t4[p2] = s2[p2];
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t4[p2[i3]] = s2[p2[i3]];
      }
    return t4;
  };
  var InternalCheckbox = function InternalCheckbox2(_a, ref) {
    var _classNames;
    var _b;
    var customizePrefixCls = _a.prefixCls, className = _a.className, children = _a.children, _a$indeterminate = _a.indeterminate, indeterminate = _a$indeterminate === void 0 ? false : _a$indeterminate, style3 = _a.style, onMouseEnter = _a.onMouseEnter, onMouseLeave = _a.onMouseLeave, _a$skipGroup = _a.skipGroup, skipGroup = _a$skipGroup === void 0 ? false : _a$skipGroup, disabled = _a.disabled, restProps = __rest25(_a, ["prefixCls", "className", "children", "indeterminate", "style", "onMouseEnter", "onMouseLeave", "skipGroup", "disabled"]);
    var _React$useContext = React242.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls, direction = _React$useContext.direction;
    var checkboxGroup = React242.useContext(GroupContext);
    var _useContext = (0, import_react70.useContext)(FormItemInputContext), isFormItemInput = _useContext.isFormItemInput;
    var contextDisabled = (0, import_react70.useContext)(DisabledContext_default);
    var mergedDisabled = (_b = (checkboxGroup === null || checkboxGroup === void 0 ? void 0 : checkboxGroup.disabled) || disabled) !== null && _b !== void 0 ? _b : contextDisabled;
    var prevValue = React242.useRef(restProps.value);
    React242.useEffect(function() {
      checkboxGroup === null || checkboxGroup === void 0 ? void 0 : checkboxGroup.registerValue(restProps.value);
      true ? warning_default2("checked" in restProps || !!checkboxGroup || !("value" in restProps), "Checkbox", "`value` is not a valid prop, do you mean `checked`?") : void 0;
    }, []);
    React242.useEffect(function() {
      if (skipGroup) {
        return;
      }
      if (restProps.value !== prevValue.current) {
        checkboxGroup === null || checkboxGroup === void 0 ? void 0 : checkboxGroup.cancelValue(prevValue.current);
        checkboxGroup === null || checkboxGroup === void 0 ? void 0 : checkboxGroup.registerValue(restProps.value);
        prevValue.current = restProps.value;
      }
      return function() {
        return checkboxGroup === null || checkboxGroup === void 0 ? void 0 : checkboxGroup.cancelValue(restProps.value);
      };
    }, [restProps.value]);
    var prefixCls = getPrefixCls("checkbox", customizePrefixCls);
    var checkboxProps = _extends({}, restProps);
    if (checkboxGroup && !skipGroup) {
      checkboxProps.onChange = function() {
        if (restProps.onChange) {
          restProps.onChange.apply(restProps, arguments);
        }
        if (checkboxGroup.toggleOption) {
          checkboxGroup.toggleOption({
            label: children,
            value: restProps.value
          });
        }
      };
      checkboxProps.name = checkboxGroup.name;
      checkboxProps.checked = checkboxGroup.value.includes(restProps.value);
    }
    var classString = (0, import_classnames89.default)((_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-wrapper"), true), _defineProperty(_classNames, "".concat(prefixCls, "-rtl"), direction === "rtl"), _defineProperty(_classNames, "".concat(prefixCls, "-wrapper-checked"), checkboxProps.checked), _defineProperty(_classNames, "".concat(prefixCls, "-wrapper-disabled"), mergedDisabled), _defineProperty(_classNames, "".concat(prefixCls, "-wrapper-in-form-item"), isFormItemInput), _classNames), className);
    var checkboxClass = (0, import_classnames89.default)(_defineProperty({}, "".concat(prefixCls, "-indeterminate"), indeterminate));
    var ariaChecked = indeterminate ? "mixed" : void 0;
    return (
      // eslint-disable-next-line jsx-a11y/label-has-associated-control
      /* @__PURE__ */ React242.createElement("label", {
        className: classString,
        style: style3,
        onMouseEnter,
        onMouseLeave
      }, /* @__PURE__ */ React242.createElement(es_default15, _extends({
        "aria-checked": ariaChecked
      }, checkboxProps, {
        prefixCls,
        className: checkboxClass,
        disabled: mergedDisabled,
        ref
      })), children !== void 0 && /* @__PURE__ */ React242.createElement("span", null, children))
    );
  };
  var Checkbox2 = /* @__PURE__ */ React242.forwardRef(InternalCheckbox);
  if (true) {
    Checkbox2.displayName = "Checkbox";
  }
  var Checkbox_default = Checkbox2;

  // node_modules/antd/es/checkbox/index.js
  var Checkbox3 = Checkbox_default;
  Checkbox3.Group = Group_default;
  Checkbox3.__ANT_CHECKBOX = true;
  var checkbox_default = Checkbox3;

  // node_modules/antd/es/grid/col.js
  var import_classnames90 = __toESM(require_classnames());
  var React243 = __toESM(require_react());

  // node_modules/antd/es/grid/RowContext.js
  var import_react71 = __toESM(require_react());
  var RowContext = /* @__PURE__ */ (0, import_react71.createContext)({});
  var RowContext_default = RowContext;

  // node_modules/antd/es/grid/col.js
  var __rest26 = function(s2, e3) {
    var t4 = {};
    for (var p2 in s2)
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t4[p2] = s2[p2];
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t4[p2[i3]] = s2[p2[i3]];
      }
    return t4;
  };
  function parseFlex(flex) {
    if (typeof flex === "number") {
      return "".concat(flex, " ").concat(flex, " auto");
    }
    if (/^\d+(\.\d+)?(px|em|rem|%)$/.test(flex)) {
      return "0 0 ".concat(flex);
    }
    return flex;
  }
  var sizes = ["xs", "sm", "md", "lg", "xl", "xxl"];
  var Col = /* @__PURE__ */ React243.forwardRef(function(props, ref) {
    var _classNames;
    var _React$useContext = React243.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls, direction = _React$useContext.direction;
    var _React$useContext2 = React243.useContext(RowContext_default), gutter = _React$useContext2.gutter, wrap = _React$useContext2.wrap, supportFlexGap = _React$useContext2.supportFlexGap;
    var customizePrefixCls = props.prefixCls, span = props.span, order = props.order, offset4 = props.offset, push = props.push, pull = props.pull, className = props.className, children = props.children, flex = props.flex, style3 = props.style, others = __rest26(props, ["prefixCls", "span", "order", "offset", "push", "pull", "className", "children", "flex", "style"]);
    var prefixCls = getPrefixCls("col", customizePrefixCls);
    var sizeClassObj = {};
    sizes.forEach(function(size) {
      var _extends22;
      var sizeProps = {};
      var propSize = props[size];
      if (typeof propSize === "number") {
        sizeProps.span = propSize;
      } else if (_typeof(propSize) === "object") {
        sizeProps = propSize || {};
      }
      delete others[size];
      sizeClassObj = _extends(_extends({}, sizeClassObj), (_extends22 = {}, _defineProperty(_extends22, "".concat(prefixCls, "-").concat(size, "-").concat(sizeProps.span), sizeProps.span !== void 0), _defineProperty(_extends22, "".concat(prefixCls, "-").concat(size, "-order-").concat(sizeProps.order), sizeProps.order || sizeProps.order === 0), _defineProperty(_extends22, "".concat(prefixCls, "-").concat(size, "-offset-").concat(sizeProps.offset), sizeProps.offset || sizeProps.offset === 0), _defineProperty(_extends22, "".concat(prefixCls, "-").concat(size, "-push-").concat(sizeProps.push), sizeProps.push || sizeProps.push === 0), _defineProperty(_extends22, "".concat(prefixCls, "-").concat(size, "-pull-").concat(sizeProps.pull), sizeProps.pull || sizeProps.pull === 0), _defineProperty(_extends22, "".concat(prefixCls, "-rtl"), direction === "rtl"), _extends22));
    });
    var classes = (0, import_classnames90.default)(prefixCls, (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-").concat(span), span !== void 0), _defineProperty(_classNames, "".concat(prefixCls, "-order-").concat(order), order), _defineProperty(_classNames, "".concat(prefixCls, "-offset-").concat(offset4), offset4), _defineProperty(_classNames, "".concat(prefixCls, "-push-").concat(push), push), _defineProperty(_classNames, "".concat(prefixCls, "-pull-").concat(pull), pull), _classNames), className, sizeClassObj);
    var mergedStyle = {};
    if (gutter && gutter[0] > 0) {
      var horizontalGutter = gutter[0] / 2;
      mergedStyle.paddingLeft = horizontalGutter;
      mergedStyle.paddingRight = horizontalGutter;
    }
    if (gutter && gutter[1] > 0 && !supportFlexGap) {
      var verticalGutter = gutter[1] / 2;
      mergedStyle.paddingTop = verticalGutter;
      mergedStyle.paddingBottom = verticalGutter;
    }
    if (flex) {
      mergedStyle.flex = parseFlex(flex);
      if (wrap === false && !mergedStyle.minWidth) {
        mergedStyle.minWidth = 0;
      }
    }
    return /* @__PURE__ */ React243.createElement("div", _extends({}, others, {
      style: _extends(_extends({}, mergedStyle), style3),
      className: classes,
      ref
    }), children);
  });
  if (true) {
    Col.displayName = "Col";
  }
  var col_default = Col;

  // node_modules/antd/es/grid/row.js
  var import_classnames91 = __toESM(require_classnames());
  var React244 = __toESM(require_react());
  var __rest27 = function(s2, e3) {
    var t4 = {};
    for (var p2 in s2)
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t4[p2] = s2[p2];
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t4[p2[i3]] = s2[p2[i3]];
      }
    return t4;
  };
  var RowAligns = tuple("top", "middle", "bottom", "stretch");
  var RowJustify = tuple("start", "end", "center", "space-around", "space-between", "space-evenly");
  function useMergePropByScreen(oriProp, screen) {
    var _React$useState = React244.useState(typeof oriProp === "string" ? oriProp : ""), _React$useState2 = _slicedToArray(_React$useState, 2), prop = _React$useState2[0], setProp = _React$useState2[1];
    var clacMergeAlignOrJustify = function clacMergeAlignOrJustify2() {
      if (typeof oriProp === "string") {
        setProp(oriProp);
      }
      if (_typeof(oriProp) !== "object") {
        return;
      }
      for (var i3 = 0; i3 < responsiveArray.length; i3++) {
        var breakpoint = responsiveArray[i3];
        if (!screen[breakpoint])
          continue;
        var curVal = oriProp[breakpoint];
        if (curVal !== void 0) {
          setProp(curVal);
          return;
        }
      }
    };
    React244.useEffect(function() {
      clacMergeAlignOrJustify();
    }, [JSON.stringify(oriProp), screen]);
    return prop;
  }
  var Row = /* @__PURE__ */ React244.forwardRef(function(props, ref) {
    var _classNames;
    var customizePrefixCls = props.prefixCls, justify = props.justify, align = props.align, className = props.className, style3 = props.style, children = props.children, _props$gutter = props.gutter, gutter = _props$gutter === void 0 ? 0 : _props$gutter, wrap = props.wrap, others = __rest27(props, ["prefixCls", "justify", "align", "className", "style", "children", "gutter", "wrap"]);
    var _React$useContext = React244.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls, direction = _React$useContext.direction;
    var _React$useState3 = React244.useState({
      xs: true,
      sm: true,
      md: true,
      lg: true,
      xl: true,
      xxl: true
    }), _React$useState4 = _slicedToArray(_React$useState3, 2), screens2 = _React$useState4[0], setScreens = _React$useState4[1];
    var _React$useState5 = React244.useState({
      xs: false,
      sm: false,
      md: false,
      lg: false,
      xl: false,
      xxl: false
    }), _React$useState6 = _slicedToArray(_React$useState5, 2), curScreens = _React$useState6[0], setCurScreens = _React$useState6[1];
    var mergeAlign = useMergePropByScreen(align, curScreens);
    var mergeJustify = useMergePropByScreen(justify, curScreens);
    var supportFlexGap = useFlexGapSupport_default();
    var gutterRef = React244.useRef(gutter);
    React244.useEffect(function() {
      var token = responsiveObserve_default.subscribe(function(screen) {
        setCurScreens(screen);
        var currentGutter = gutterRef.current || 0;
        if (!Array.isArray(currentGutter) && _typeof(currentGutter) === "object" || Array.isArray(currentGutter) && (_typeof(currentGutter[0]) === "object" || _typeof(currentGutter[1]) === "object")) {
          setScreens(screen);
        }
      });
      return function() {
        return responsiveObserve_default.unsubscribe(token);
      };
    }, []);
    var getGutter = function getGutter2() {
      var results = [void 0, void 0];
      var normalizedGutter = Array.isArray(gutter) ? gutter : [gutter, void 0];
      normalizedGutter.forEach(function(g2, index2) {
        if (_typeof(g2) === "object") {
          for (var i3 = 0; i3 < responsiveArray.length; i3++) {
            var breakpoint = responsiveArray[i3];
            if (screens2[breakpoint] && g2[breakpoint] !== void 0) {
              results[index2] = g2[breakpoint];
              break;
            }
          }
        } else {
          results[index2] = g2;
        }
      });
      return results;
    };
    var prefixCls = getPrefixCls("row", customizePrefixCls);
    var gutters = getGutter();
    var classes = (0, import_classnames91.default)(prefixCls, (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-no-wrap"), wrap === false), _defineProperty(_classNames, "".concat(prefixCls, "-").concat(mergeJustify), mergeJustify), _defineProperty(_classNames, "".concat(prefixCls, "-").concat(mergeAlign), mergeAlign), _defineProperty(_classNames, "".concat(prefixCls, "-rtl"), direction === "rtl"), _classNames), className);
    var rowStyle = {};
    var horizontalGutter = gutters[0] != null && gutters[0] > 0 ? gutters[0] / -2 : void 0;
    var verticalGutter = gutters[1] != null && gutters[1] > 0 ? gutters[1] / -2 : void 0;
    if (horizontalGutter) {
      rowStyle.marginLeft = horizontalGutter;
      rowStyle.marginRight = horizontalGutter;
    }
    if (supportFlexGap) {
      var _gutters = _slicedToArray(gutters, 2);
      rowStyle.rowGap = _gutters[1];
    } else if (verticalGutter) {
      rowStyle.marginTop = verticalGutter;
      rowStyle.marginBottom = verticalGutter;
    }
    var _gutters2 = _slicedToArray(gutters, 2), gutterH = _gutters2[0], gutterV = _gutters2[1];
    var rowContext = React244.useMemo(function() {
      return {
        gutter: [gutterH, gutterV],
        wrap,
        supportFlexGap
      };
    }, [gutterH, gutterV, wrap, supportFlexGap]);
    return /* @__PURE__ */ React244.createElement(RowContext_default.Provider, {
      value: rowContext
    }, /* @__PURE__ */ React244.createElement("div", _extends({}, others, {
      className: classes,
      style: _extends(_extends({}, rowStyle), style3),
      ref
    }), children));
  });
  if (true) {
    Row.displayName = "Row";
  }
  var row_default = Row;

  // node_modules/antd/es/col/index.js
  var col_default2 = col_default;

  // node_modules/antd/es/comment/index.js
  var import_classnames92 = __toESM(require_classnames());
  var React245 = __toESM(require_react());
  var __rest28 = function(s2, e3) {
    var t4 = {};
    for (var p2 in s2)
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t4[p2] = s2[p2];
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t4[p2[i3]] = s2[p2[i3]];
      }
    return t4;
  };
  var Comment = function Comment2(_a) {
    var actions = _a.actions, author = _a.author, avatar = _a.avatar, children = _a.children, className = _a.className, content = _a.content, customizePrefixCls = _a.prefixCls, datetime = _a.datetime, otherProps = __rest28(_a, ["actions", "author", "avatar", "children", "className", "content", "prefixCls", "datetime"]);
    var _React$useContext = React245.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls, direction = _React$useContext.direction;
    var renderNested = function renderNested2(prefixCls2, nestedChildren) {
      return /* @__PURE__ */ React245.createElement("div", {
        className: (0, import_classnames92.default)("".concat(prefixCls2, "-nested"))
      }, nestedChildren);
    };
    var prefixCls = getPrefixCls("comment", customizePrefixCls);
    var avatarDom = avatar ? /* @__PURE__ */ React245.createElement("div", {
      className: "".concat(prefixCls, "-avatar")
    }, typeof avatar === "string" ? /* @__PURE__ */ React245.createElement("img", {
      src: avatar,
      alt: "comment-avatar"
    }) : avatar) : null;
    var actionDom = actions && actions.length ? /* @__PURE__ */ React245.createElement("ul", {
      className: "".concat(prefixCls, "-actions")
    }, actions.map(function(action, index2) {
      return /* @__PURE__ */ React245.createElement("li", {
        key: "action-".concat(index2)
      }, action);
    })) : null;
    var authorContent = (author || datetime) && /* @__PURE__ */ React245.createElement("div", {
      className: "".concat(prefixCls, "-content-author")
    }, author && /* @__PURE__ */ React245.createElement("span", {
      className: "".concat(prefixCls, "-content-author-name")
    }, author), datetime && /* @__PURE__ */ React245.createElement("span", {
      className: "".concat(prefixCls, "-content-author-time")
    }, datetime));
    var contentDom = /* @__PURE__ */ React245.createElement("div", {
      className: "".concat(prefixCls, "-content")
    }, authorContent, /* @__PURE__ */ React245.createElement("div", {
      className: "".concat(prefixCls, "-content-detail")
    }, content), actionDom);
    var cls = (0, import_classnames92.default)(prefixCls, _defineProperty({}, "".concat(prefixCls, "-rtl"), direction === "rtl"), className);
    return /* @__PURE__ */ React245.createElement("div", _extends({}, otherProps, {
      className: cls
    }), /* @__PURE__ */ React245.createElement("div", {
      className: "".concat(prefixCls, "-inner")
    }, avatarDom, contentDom), children ? renderNested(prefixCls, children) : null);
  };
  var comment_default = Comment;

  // node_modules/antd/es/date-picker/PickerButton.js
  var React246 = __toESM(require_react());
  function PickerButton(props) {
    return /* @__PURE__ */ React246.createElement(button_default2, _extends({
      size: "small",
      type: "primary"
    }, props));
  }

  // node_modules/antd/es/date-picker/PickerTag.js
  var React249 = __toESM(require_react());

  // node_modules/antd/es/tag/index.js
  var import_classnames94 = __toESM(require_classnames());
  var React248 = __toESM(require_react());

  // node_modules/antd/es/tag/CheckableTag.js
  var import_classnames93 = __toESM(require_classnames());
  var React247 = __toESM(require_react());
  var __rest29 = function(s2, e3) {
    var t4 = {};
    for (var p2 in s2)
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t4[p2] = s2[p2];
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t4[p2[i3]] = s2[p2[i3]];
      }
    return t4;
  };
  var CheckableTag = function CheckableTag2(_a) {
    var _classNames;
    var customizePrefixCls = _a.prefixCls, className = _a.className, checked = _a.checked, onChange = _a.onChange, onClick = _a.onClick, restProps = __rest29(_a, ["prefixCls", "className", "checked", "onChange", "onClick"]);
    var _React$useContext = React247.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls;
    var handleClick = function handleClick2(e3) {
      onChange === null || onChange === void 0 ? void 0 : onChange(!checked);
      onClick === null || onClick === void 0 ? void 0 : onClick(e3);
    };
    var prefixCls = getPrefixCls("tag", customizePrefixCls);
    var cls = (0, import_classnames93.default)(prefixCls, (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-checkable"), true), _defineProperty(_classNames, "".concat(prefixCls, "-checkable-checked"), checked), _classNames), className);
    return /* @__PURE__ */ React247.createElement("span", _extends({}, restProps, {
      className: cls,
      onClick: handleClick
    }));
  };
  var CheckableTag_default = CheckableTag;

  // node_modules/antd/es/tag/index.js
  var __rest30 = function(s2, e3) {
    var t4 = {};
    for (var p2 in s2)
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t4[p2] = s2[p2];
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t4[p2[i3]] = s2[p2[i3]];
      }
    return t4;
  };
  var PresetColorRegex2 = new RegExp("^(".concat(PresetColorTypes.join("|"), ")(-inverse)?$"));
  var PresetStatusColorRegex = new RegExp("^(".concat(PresetStatusColorTypes.join("|"), ")$"));
  var InternalTag = function InternalTag2(_a, ref) {
    var _classNames;
    var customizePrefixCls = _a.prefixCls, className = _a.className, style3 = _a.style, children = _a.children, icon = _a.icon, color = _a.color, onClose2 = _a.onClose, closeIcon = _a.closeIcon, _a$closable = _a.closable, closable = _a$closable === void 0 ? false : _a$closable, props = __rest30(_a, ["prefixCls", "className", "style", "children", "icon", "color", "onClose", "closeIcon", "closable"]);
    var _React$useContext = React248.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls, direction = _React$useContext.direction;
    var _React$useState = React248.useState(true), _React$useState2 = _slicedToArray(_React$useState, 2), visible = _React$useState2[0], setVisible = _React$useState2[1];
    if (true) {
      true ? warning_default2(!("visible" in props), "Tag", "`visible` will be removed in next major version, please use `visible && <Tag />` instead.") : void 0;
    }
    React248.useEffect(function() {
      if ("visible" in props) {
        setVisible(props.visible);
      }
    }, [props.visible]);
    var isPresetColor = function isPresetColor2() {
      if (!color) {
        return false;
      }
      return PresetColorRegex2.test(color) || PresetStatusColorRegex.test(color);
    };
    var tagStyle = _extends({
      backgroundColor: color && !isPresetColor() ? color : void 0
    }, style3);
    var presetColor = isPresetColor();
    var prefixCls = getPrefixCls("tag", customizePrefixCls);
    var tagClassName = (0, import_classnames94.default)(prefixCls, (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-").concat(color), presetColor), _defineProperty(_classNames, "".concat(prefixCls, "-has-color"), color && !presetColor), _defineProperty(_classNames, "".concat(prefixCls, "-hidden"), !visible), _defineProperty(_classNames, "".concat(prefixCls, "-rtl"), direction === "rtl"), _classNames), className);
    var handleCloseClick = function handleCloseClick2(e3) {
      e3.stopPropagation();
      onClose2 === null || onClose2 === void 0 ? void 0 : onClose2(e3);
      if (e3.defaultPrevented) {
        return;
      }
      if (!("visible" in props)) {
        setVisible(false);
      }
    };
    var renderCloseIcon = function renderCloseIcon2() {
      if (closable) {
        return closeIcon ? /* @__PURE__ */ React248.createElement("span", {
          className: "".concat(prefixCls, "-close-icon"),
          onClick: handleCloseClick
        }, closeIcon) : /* @__PURE__ */ React248.createElement(CloseOutlined_default2, {
          className: "".concat(prefixCls, "-close-icon"),
          onClick: handleCloseClick
        });
      }
      return null;
    };
    var isNeedWave = "onClick" in props || children && children.type === "a";
    var tagProps = omit(props, ["visible"]);
    var iconNode = icon || null;
    var kids = iconNode ? /* @__PURE__ */ React248.createElement(React248.Fragment, null, iconNode, /* @__PURE__ */ React248.createElement("span", null, children)) : children;
    var tagNode = /* @__PURE__ */ React248.createElement("span", _extends({}, tagProps, {
      ref,
      className: tagClassName,
      style: tagStyle
    }), kids, renderCloseIcon());
    return isNeedWave ? /* @__PURE__ */ React248.createElement(wave_default, null, tagNode) : tagNode;
  };
  var Tag = /* @__PURE__ */ React248.forwardRef(InternalTag);
  if (true) {
    Tag.displayName = "Tag";
  }
  Tag.CheckableTag = CheckableTag_default;
  var tag_default = Tag;

  // node_modules/antd/es/date-picker/PickerTag.js
  function PickerTag(props) {
    return /* @__PURE__ */ React249.createElement(tag_default, _extends({
      color: "blue"
    }, props));
  }

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/CalendarOutlined.js
  var React250 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/CalendarOutlined.js
  var CalendarOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M880 184H712v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H384v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H144c-17.7 0-32 14.3-32 32v664c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V216c0-17.7-14.3-32-32-32zm-40 656H184V460h656v380zM184 392V256h128v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h256v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h128v136H184z" } }] }, "name": "calendar", "theme": "outlined" };
  var CalendarOutlined_default = CalendarOutlined;

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/CalendarOutlined.js
  var CalendarOutlined2 = function CalendarOutlined3(props, ref) {
    return /* @__PURE__ */ React250.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: CalendarOutlined_default
    }));
  };
  CalendarOutlined2.displayName = "CalendarOutlined";
  var CalendarOutlined_default2 = /* @__PURE__ */ React250.forwardRef(CalendarOutlined2);

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/ClockCircleOutlined.js
  var React251 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/ClockCircleOutlined.js
  var ClockCircleOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z" } }, { "tag": "path", "attrs": { "d": "M686.7 638.6L544.1 535.5V288c0-4.4-3.6-8-8-8H488c-4.4 0-8 3.6-8 8v275.4c0 2.6 1.2 5 3.3 6.5l165.4 120.6c3.6 2.6 8.6 1.8 11.2-1.7l28.6-39c2.6-3.7 1.8-8.7-1.8-11.2z" } }] }, "name": "clock-circle", "theme": "outlined" };
  var ClockCircleOutlined_default = ClockCircleOutlined;

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/ClockCircleOutlined.js
  var ClockCircleOutlined2 = function ClockCircleOutlined3(props, ref) {
    return /* @__PURE__ */ React251.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: ClockCircleOutlined_default
    }));
  };
  ClockCircleOutlined2.displayName = "ClockCircleOutlined";
  var ClockCircleOutlined_default2 = /* @__PURE__ */ React251.forwardRef(ClockCircleOutlined2);

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/SwapRightOutlined.js
  var React252 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/SwapRightOutlined.js
  var SwapRightOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "0 0 1024 1024", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M873.1 596.2l-164-208A32 32 0 00684 376h-64.8c-6.7 0-10.4 7.7-6.3 13l144.3 183H152c-4.4 0-8 3.6-8 8v60c0 4.4 3.6 8 8 8h695.9c26.8 0 41.7-30.8 25.2-51.8z" } }] }, "name": "swap-right", "theme": "outlined" };
  var SwapRightOutlined_default = SwapRightOutlined;

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/SwapRightOutlined.js
  var SwapRightOutlined2 = function SwapRightOutlined3(props, ref) {
    return /* @__PURE__ */ React252.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: SwapRightOutlined_default
    }));
  };
  SwapRightOutlined2.displayName = "SwapRightOutlined";
  var SwapRightOutlined_default2 = /* @__PURE__ */ React252.forwardRef(SwapRightOutlined2);

  // node_modules/antd/es/date-picker/generatePicker/generateRangePicker.js
  var import_classnames95 = __toESM(require_classnames());
  var React253 = __toESM(require_react());
  var import_react72 = __toESM(require_react());

  // node_modules/antd/es/date-picker/util.js
  function getPlaceholder(picker, locale4, customizePlaceholder) {
    if (customizePlaceholder !== void 0) {
      return customizePlaceholder;
    }
    if (picker === "year" && locale4.lang.yearPlaceholder) {
      return locale4.lang.yearPlaceholder;
    }
    if (picker === "quarter" && locale4.lang.quarterPlaceholder) {
      return locale4.lang.quarterPlaceholder;
    }
    if (picker === "month" && locale4.lang.monthPlaceholder) {
      return locale4.lang.monthPlaceholder;
    }
    if (picker === "week" && locale4.lang.weekPlaceholder) {
      return locale4.lang.weekPlaceholder;
    }
    if (picker === "time" && locale4.timePickerLocale.placeholder) {
      return locale4.timePickerLocale.placeholder;
    }
    return locale4.lang.placeholder;
  }
  function getRangePlaceholder(picker, locale4, customizePlaceholder) {
    if (customizePlaceholder !== void 0) {
      return customizePlaceholder;
    }
    if (picker === "year" && locale4.lang.yearPlaceholder) {
      return locale4.lang.rangeYearPlaceholder;
    }
    if (picker === "quarter" && locale4.lang.quarterPlaceholder) {
      return locale4.lang.rangeQuarterPlaceholder;
    }
    if (picker === "month" && locale4.lang.monthPlaceholder) {
      return locale4.lang.rangeMonthPlaceholder;
    }
    if (picker === "week" && locale4.lang.weekPlaceholder) {
      return locale4.lang.rangeWeekPlaceholder;
    }
    if (picker === "time" && locale4.timePickerLocale.placeholder) {
      return locale4.timePickerLocale.rangePlaceholder;
    }
    return locale4.lang.rangePlaceholder;
  }
  function transPlacement2DropdownAlign(direction, placement) {
    var overflow = {
      adjustX: 1,
      adjustY: 1
    };
    switch (placement) {
      case "bottomLeft": {
        return {
          points: ["tl", "bl"],
          offset: [0, 4],
          overflow
        };
      }
      case "bottomRight": {
        return {
          points: ["tr", "br"],
          offset: [0, 4],
          overflow
        };
      }
      case "topLeft": {
        return {
          points: ["bl", "tl"],
          offset: [0, -4],
          overflow
        };
      }
      case "topRight": {
        return {
          points: ["br", "tr"],
          offset: [0, -4],
          overflow
        };
      }
      default: {
        return {
          points: direction === "rtl" ? ["tr", "br"] : ["tl", "bl"],
          offset: [0, 4],
          overflow
        };
      }
    }
  }

  // node_modules/antd/es/date-picker/generatePicker/generateRangePicker.js
  var __rest31 = function(s2, e3) {
    var t4 = {};
    for (var p2 in s2)
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t4[p2] = s2[p2];
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t4[p2[i3]] = s2[p2[i3]];
      }
    return t4;
  };
  function generateRangePicker(generateConfig2) {
    var RangePicker3 = /* @__PURE__ */ (0, import_react72.forwardRef)(function(props, ref) {
      var customizePrefixCls = props.prefixCls, customGetPopupContainer = props.getPopupContainer, className = props.className, placement = props.placement, customizeSize = props.size, customDisabled = props.disabled, _props$bordered = props.bordered, bordered = _props$bordered === void 0 ? true : _props$bordered, placeholder = props.placeholder, popupClassName = props.popupClassName, dropdownClassName = props.dropdownClassName, customStatus = props.status, restProps = __rest31(props, ["prefixCls", "getPopupContainer", "className", "placement", "size", "disabled", "bordered", "placeholder", "popupClassName", "dropdownClassName", "status"]);
      var innerRef = React253.useRef(null);
      var _useContext = (0, import_react72.useContext)(ConfigContext), getPrefixCls = _useContext.getPrefixCls, direction = _useContext.direction, getPopupContainer = _useContext.getPopupContainer;
      var prefixCls = getPrefixCls("picker", customizePrefixCls);
      var _useCompactItemContex = useCompactItemContext(prefixCls, direction), compactSize = _useCompactItemContex.compactSize, compactItemClassnames = _useCompactItemContex.compactItemClassnames;
      var format3 = props.format, showTime = props.showTime, picker = props.picker;
      var rootPrefixCls = getPrefixCls();
      var additionalOverrideProps = {};
      additionalOverrideProps = _extends(_extends(_extends({}, additionalOverrideProps), showTime ? getTimeProps(_extends({
        format: format3,
        picker
      }, showTime)) : {}), picker === "time" ? getTimeProps(_extends(_extends({
        format: format3
      }, props), {
        picker
      })) : {});
      true ? warning_default2(!dropdownClassName, "RangePicker", "`dropdownClassName` is deprecated which will be removed in next major version. Please use `popupClassName` instead.") : void 0;
      var size = React253.useContext(SizeContext_default);
      var mergedSize = compactSize || customizeSize || size;
      var disabled = React253.useContext(DisabledContext_default);
      var mergedDisabled = customDisabled !== null && customDisabled !== void 0 ? customDisabled : disabled;
      var formItemContext = (0, import_react72.useContext)(FormItemInputContext);
      var hasFeedback = formItemContext.hasFeedback, contextStatus = formItemContext.status, feedbackIcon = formItemContext.feedbackIcon;
      var suffixNode = /* @__PURE__ */ React253.createElement(React253.Fragment, null, picker === "time" ? /* @__PURE__ */ React253.createElement(ClockCircleOutlined_default2, null) : /* @__PURE__ */ React253.createElement(CalendarOutlined_default2, null), hasFeedback && feedbackIcon);
      (0, import_react72.useImperativeHandle)(ref, function() {
        return {
          focus: function focus() {
            var _a;
            return (_a = innerRef.current) === null || _a === void 0 ? void 0 : _a.focus();
          },
          blur: function blur() {
            var _a;
            return (_a = innerRef.current) === null || _a === void 0 ? void 0 : _a.blur();
          }
        };
      });
      return /* @__PURE__ */ React253.createElement(LocaleReceiver_default, {
        componentName: "DatePicker",
        defaultLocale: en_US_default4
      }, function(contextLocale) {
        var _classNames;
        var locale4 = _extends(_extends({}, contextLocale), props.locale);
        return /* @__PURE__ */ React253.createElement(RangePicker_default, _extends({
          separator: /* @__PURE__ */ React253.createElement("span", {
            "aria-label": "to",
            className: "".concat(prefixCls, "-separator")
          }, /* @__PURE__ */ React253.createElement(SwapRightOutlined_default2, null)),
          disabled: mergedDisabled,
          ref: innerRef,
          dropdownAlign: transPlacement2DropdownAlign(direction, placement),
          placeholder: getRangePlaceholder(picker, locale4, placeholder),
          suffixIcon: suffixNode,
          clearIcon: /* @__PURE__ */ React253.createElement(CloseCircleFilled_default2, null),
          prevIcon: /* @__PURE__ */ React253.createElement("span", {
            className: "".concat(prefixCls, "-prev-icon")
          }),
          nextIcon: /* @__PURE__ */ React253.createElement("span", {
            className: "".concat(prefixCls, "-next-icon")
          }),
          superPrevIcon: /* @__PURE__ */ React253.createElement("span", {
            className: "".concat(prefixCls, "-super-prev-icon")
          }),
          superNextIcon: /* @__PURE__ */ React253.createElement("span", {
            className: "".concat(prefixCls, "-super-next-icon")
          }),
          allowClear: true,
          transitionName: "".concat(rootPrefixCls, "-slide-up")
        }, restProps, additionalOverrideProps, {
          className: (0, import_classnames95.default)((_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-").concat(mergedSize), mergedSize), _defineProperty(_classNames, "".concat(prefixCls, "-borderless"), !bordered), _classNames), getStatusClassNames(prefixCls, getMergedStatus(contextStatus, customStatus), hasFeedback), compactItemClassnames, className),
          locale: locale4.lang,
          prefixCls,
          getPopupContainer: customGetPopupContainer || getPopupContainer,
          generateConfig: generateConfig2,
          components: Components,
          direction,
          dropdownClassName: popupClassName || dropdownClassName
        }));
      });
    });
    return RangePicker3;
  }

  // node_modules/antd/es/date-picker/generatePicker/generateSinglePicker.js
  var import_classnames96 = __toESM(require_classnames());
  var React254 = __toESM(require_react());
  var import_react73 = __toESM(require_react());
  var __rest32 = function(s2, e3) {
    var t4 = {};
    for (var p2 in s2)
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t4[p2] = s2[p2];
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t4[p2[i3]] = s2[p2[i3]];
      }
    return t4;
  };
  function generatePicker(generateConfig2) {
    function getPicker(picker, displayName) {
      var Picker2 = /* @__PURE__ */ (0, import_react73.forwardRef)(function(props, ref) {
        var customizePrefixCls = props.prefixCls, customizeGetPopupContainer = props.getPopupContainer, className = props.className, customizeSize = props.size, _props$bordered = props.bordered, bordered = _props$bordered === void 0 ? true : _props$bordered, placement = props.placement, placeholder = props.placeholder, popupClassName = props.popupClassName, dropdownClassName = props.dropdownClassName, customDisabled = props.disabled, customStatus = props.status, restProps = __rest32(props, ["prefixCls", "getPopupContainer", "className", "size", "bordered", "placement", "placeholder", "popupClassName", "dropdownClassName", "disabled", "status"]);
        var _useContext = (0, import_react73.useContext)(ConfigContext), getPrefixCls = _useContext.getPrefixCls, direction = _useContext.direction, getPopupContainer = _useContext.getPopupContainer;
        var prefixCls = getPrefixCls("picker", customizePrefixCls);
        var _useCompactItemContex = useCompactItemContext(prefixCls, direction), compactSize = _useCompactItemContex.compactSize, compactItemClassnames = _useCompactItemContex.compactItemClassnames;
        var innerRef = React254.useRef(null);
        var format3 = props.format, showTime = props.showTime;
        (0, import_react73.useImperativeHandle)(ref, function() {
          return {
            focus: function focus() {
              var _a;
              return (_a = innerRef.current) === null || _a === void 0 ? void 0 : _a.focus();
            },
            blur: function blur() {
              var _a;
              return (_a = innerRef.current) === null || _a === void 0 ? void 0 : _a.blur();
            }
          };
        });
        var additionalProps = {
          showToday: true
        };
        var additionalOverrideProps = {};
        if (picker) {
          additionalOverrideProps.picker = picker;
        }
        var mergedPicker = picker || props.picker;
        additionalOverrideProps = _extends(_extends(_extends({}, additionalOverrideProps), showTime ? getTimeProps(_extends({
          format: format3,
          picker: mergedPicker
        }, showTime)) : {}), mergedPicker === "time" ? getTimeProps(_extends(_extends({
          format: format3
        }, props), {
          picker: mergedPicker
        })) : {});
        var rootPrefixCls = getPrefixCls();
        true ? warning_default2(picker !== "quarter", displayName, "DatePicker.".concat(displayName, " is legacy usage. Please use DatePicker[picker='").concat(picker, "'] directly.")) : void 0;
        true ? warning_default2(!dropdownClassName, mergedPicker === "time" ? "TimePicker" : "DatePicker", "`dropdownClassName` is deprecated which will be removed in next major version. Please use `popupClassName` instead.") : void 0;
        var size = React254.useContext(SizeContext_default);
        var mergedSize = compactSize || customizeSize || size;
        var disabled = React254.useContext(DisabledContext_default);
        var mergedDisabled = customDisabled !== null && customDisabled !== void 0 ? customDisabled : disabled;
        var formItemContext = (0, import_react73.useContext)(FormItemInputContext);
        var hasFeedback = formItemContext.hasFeedback, contextStatus = formItemContext.status, feedbackIcon = formItemContext.feedbackIcon;
        var suffixNode = /* @__PURE__ */ React254.createElement(React254.Fragment, null, mergedPicker === "time" ? /* @__PURE__ */ React254.createElement(ClockCircleOutlined_default2, null) : /* @__PURE__ */ React254.createElement(CalendarOutlined_default2, null), hasFeedback && feedbackIcon);
        return /* @__PURE__ */ React254.createElement(LocaleReceiver_default, {
          componentName: "DatePicker",
          defaultLocale: en_US_default4
        }, function(contextLocale) {
          var _classNames;
          var locale4 = _extends(_extends({}, contextLocale), props.locale);
          return /* @__PURE__ */ React254.createElement(es_default14, _extends({
            ref: innerRef,
            placeholder: getPlaceholder(mergedPicker, locale4, placeholder),
            suffixIcon: suffixNode,
            dropdownAlign: transPlacement2DropdownAlign(direction, placement),
            clearIcon: /* @__PURE__ */ React254.createElement(CloseCircleFilled_default2, null),
            prevIcon: /* @__PURE__ */ React254.createElement("span", {
              className: "".concat(prefixCls, "-prev-icon")
            }),
            nextIcon: /* @__PURE__ */ React254.createElement("span", {
              className: "".concat(prefixCls, "-next-icon")
            }),
            superPrevIcon: /* @__PURE__ */ React254.createElement("span", {
              className: "".concat(prefixCls, "-super-prev-icon")
            }),
            superNextIcon: /* @__PURE__ */ React254.createElement("span", {
              className: "".concat(prefixCls, "-super-next-icon")
            }),
            allowClear: true,
            transitionName: "".concat(rootPrefixCls, "-slide-up")
          }, additionalProps, restProps, additionalOverrideProps, {
            locale: locale4.lang,
            className: (0, import_classnames96.default)((_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-").concat(mergedSize), mergedSize), _defineProperty(_classNames, "".concat(prefixCls, "-borderless"), !bordered), _classNames), getStatusClassNames(prefixCls, getMergedStatus(contextStatus, customStatus), hasFeedback), compactItemClassnames, className),
            prefixCls,
            getPopupContainer: customizeGetPopupContainer || getPopupContainer,
            generateConfig: generateConfig2,
            components: Components,
            direction,
            disabled: mergedDisabled,
            dropdownClassName: popupClassName || dropdownClassName
          }));
        });
      });
      if (displayName) {
        Picker2.displayName = displayName;
      }
      return Picker2;
    }
    var DatePicker2 = getPicker();
    var WeekPicker = getPicker("week", "WeekPicker");
    var MonthPicker = getPicker("month", "MonthPicker");
    var YearPicker = getPicker("year", "YearPicker");
    var TimePicker = getPicker("time", "TimePicker");
    var QuarterPicker = getPicker("quarter", "QuarterPicker");
    return {
      DatePicker: DatePicker2,
      WeekPicker,
      MonthPicker,
      YearPicker,
      TimePicker,
      QuarterPicker
    };
  }

  // node_modules/antd/es/date-picker/generatePicker/index.js
  var Components = {
    button: PickerButton,
    rangeItem: PickerTag
  };
  function toArray5(list) {
    if (!list) {
      return [];
    }
    return Array.isArray(list) ? list : [list];
  }
  function getTimeProps(props) {
    var format3 = props.format, picker = props.picker, showHour = props.showHour, showMinute = props.showMinute, showSecond = props.showSecond, use12Hours = props.use12Hours;
    var firstFormat = toArray5(format3)[0];
    var showTimeObj = _extends({}, props);
    if (firstFormat && typeof firstFormat === "string") {
      if (!firstFormat.includes("s") && showSecond === void 0) {
        showTimeObj.showSecond = false;
      }
      if (!firstFormat.includes("m") && showMinute === void 0) {
        showTimeObj.showMinute = false;
      }
      if (!firstFormat.includes("H") && !firstFormat.includes("h") && showHour === void 0) {
        showTimeObj.showHour = false;
      }
      if ((firstFormat.includes("a") || firstFormat.includes("A")) && use12Hours === void 0) {
        showTimeObj.use12Hours = true;
      }
    }
    if (picker === "time") {
      return showTimeObj;
    }
    if (typeof firstFormat === "function") {
      delete showTimeObj.format;
    }
    return {
      showTime: showTimeObj
    };
  }
  var DataPickerPlacements = tuple("bottomLeft", "bottomRight", "topLeft", "topRight");
  function generatePicker2(generateConfig2) {
    var _generateSinglePicker = generatePicker(generateConfig2), DatePicker2 = _generateSinglePicker.DatePicker, WeekPicker = _generateSinglePicker.WeekPicker, MonthPicker = _generateSinglePicker.MonthPicker, YearPicker = _generateSinglePicker.YearPicker, TimePicker = _generateSinglePicker.TimePicker, QuarterPicker = _generateSinglePicker.QuarterPicker;
    var RangePicker3 = generateRangePicker(generateConfig2);
    var MergedDatePicker = DatePicker2;
    MergedDatePicker.WeekPicker = WeekPicker;
    MergedDatePicker.MonthPicker = MonthPicker;
    MergedDatePicker.YearPicker = YearPicker;
    MergedDatePicker.RangePicker = RangePicker3;
    MergedDatePicker.TimePicker = TimePicker;
    MergedDatePicker.QuarterPicker = QuarterPicker;
    return MergedDatePicker;
  }
  var generatePicker_default = generatePicker2;

  // node_modules/antd/es/date-picker/index.js
  var DatePicker = generatePicker_default(moment_default);
  var date_picker_default = DatePicker;

  // node_modules/antd/es/divider/index.js
  var import_classnames97 = __toESM(require_classnames());
  var React255 = __toESM(require_react());
  var __rest33 = function(s2, e3) {
    var t4 = {};
    for (var p2 in s2)
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t4[p2] = s2[p2];
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t4[p2[i3]] = s2[p2[i3]];
      }
    return t4;
  };
  var Divider2 = function Divider3(props) {
    var _classNames;
    var _React$useContext = React255.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls, direction = _React$useContext.direction;
    var customizePrefixCls = props.prefixCls, _props$type = props.type, type4 = _props$type === void 0 ? "horizontal" : _props$type, _props$orientation = props.orientation, orientation = _props$orientation === void 0 ? "center" : _props$orientation, orientationMargin = props.orientationMargin, className = props.className, children = props.children, dashed = props.dashed, plain = props.plain, restProps = __rest33(props, ["prefixCls", "type", "orientation", "orientationMargin", "className", "children", "dashed", "plain"]);
    var prefixCls = getPrefixCls("divider", customizePrefixCls);
    var orientationPrefix = orientation.length > 0 ? "-".concat(orientation) : orientation;
    var hasChildren = !!children;
    var hasCustomMarginLeft = orientation === "left" && orientationMargin != null;
    var hasCustomMarginRight = orientation === "right" && orientationMargin != null;
    var classString = (0, import_classnames97.default)(prefixCls, "".concat(prefixCls, "-").concat(type4), (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-with-text"), hasChildren), _defineProperty(_classNames, "".concat(prefixCls, "-with-text").concat(orientationPrefix), hasChildren), _defineProperty(_classNames, "".concat(prefixCls, "-dashed"), !!dashed), _defineProperty(_classNames, "".concat(prefixCls, "-plain"), !!plain), _defineProperty(_classNames, "".concat(prefixCls, "-rtl"), direction === "rtl"), _defineProperty(_classNames, "".concat(prefixCls, "-no-default-orientation-margin-left"), hasCustomMarginLeft), _defineProperty(_classNames, "".concat(prefixCls, "-no-default-orientation-margin-right"), hasCustomMarginRight), _classNames), className);
    var innerStyle = _extends(_extends({}, hasCustomMarginLeft && {
      marginLeft: orientationMargin
    }), hasCustomMarginRight && {
      marginRight: orientationMargin
    });
    if (true) {
      true ? warning_default2(!children || type4 !== "vertical", "Divider", "`children` not working in `vertical` mode.") : void 0;
    }
    return /* @__PURE__ */ React255.createElement("div", _extends({
      className: classString
    }, restProps, {
      role: "separator"
    }), children && type4 !== "vertical" && /* @__PURE__ */ React255.createElement("span", {
      className: "".concat(prefixCls, "-inner-text"),
      style: innerStyle
    }, children));
  };
  var divider_default = Divider2;

  // node_modules/@rc-component/portal/es/Portal.js
  var React259 = __toESM(require_react());
  var import_react_dom10 = __toESM(require_react_dom());

  // node_modules/@rc-component/portal/es/Context.js
  var React256 = __toESM(require_react());
  var OrderContext = /* @__PURE__ */ React256.createContext(null);
  var Context_default2 = OrderContext;

  // node_modules/@rc-component/portal/es/useDom.js
  var React257 = __toESM(require_react());
  var EMPTY_LIST2 = [];
  function useDom(render2, debug) {
    var _React$useState = React257.useState(function() {
      if (!canUseDom()) {
        return null;
      }
      var defaultEle = document.createElement("div");
      if (debug) {
        defaultEle.setAttribute("data-debug", debug);
      }
      return defaultEle;
    }), _React$useState2 = _slicedToArray(_React$useState, 1), ele = _React$useState2[0];
    var appendedRef = React257.useRef(false);
    var queueCreate = React257.useContext(Context_default2);
    var _React$useState3 = React257.useState(EMPTY_LIST2), _React$useState4 = _slicedToArray(_React$useState3, 2), queue = _React$useState4[0], setQueue = _React$useState4[1];
    var mergedQueueCreate = queueCreate || (appendedRef.current ? void 0 : function(appendFn) {
      setQueue(function(origin) {
        var newQueue = [appendFn].concat(_toConsumableArray(origin));
        return newQueue;
      });
    });
    function append2() {
      if (!ele.parentElement) {
        document.body.appendChild(ele);
      }
      appendedRef.current = true;
    }
    function cleanup2() {
      var _ele$parentElement;
      (_ele$parentElement = ele.parentElement) === null || _ele$parentElement === void 0 ? void 0 : _ele$parentElement.removeChild(ele);
      appendedRef.current = false;
    }
    useLayoutEffect_default(function() {
      if (render2) {
        if (queueCreate) {
          queueCreate(append2);
        } else {
          append2();
        }
      } else {
        cleanup2();
      }
      return cleanup2;
    }, [render2]);
    useLayoutEffect_default(function() {
      if (queue.length) {
        queue.forEach(function(appendFn) {
          return appendFn();
        });
        setQueue(EMPTY_LIST2);
      }
    }, [queue]);
    return [ele, mergedQueueCreate];
  }

  // node_modules/@rc-component/portal/es/useScrollLocker.js
  var React258 = __toESM(require_react());

  // node_modules/rc-util/es/getScrollBarSize.js
  var cached;
  function getScrollBarSize(fresh) {
    if (typeof document === "undefined") {
      return 0;
    }
    if (fresh || cached === void 0) {
      var inner = document.createElement("div");
      inner.style.width = "100%";
      inner.style.height = "200px";
      var outer = document.createElement("div");
      var outerStyle = outer.style;
      outerStyle.position = "absolute";
      outerStyle.top = "0";
      outerStyle.left = "0";
      outerStyle.pointerEvents = "none";
      outerStyle.visibility = "hidden";
      outerStyle.width = "200px";
      outerStyle.height = "150px";
      outerStyle.overflow = "hidden";
      outer.appendChild(inner);
      document.body.appendChild(outer);
      var widthContained = inner.offsetWidth;
      outer.style.overflow = "scroll";
      var widthScroll = inner.offsetWidth;
      if (widthContained === widthScroll) {
        widthScroll = outer.clientWidth;
      }
      document.body.removeChild(outer);
      cached = widthContained - widthScroll;
    }
    return cached;
  }
  function ensureSize(str) {
    var match2 = str.match(/^(.*)px$/);
    var value = Number(match2 === null || match2 === void 0 ? void 0 : match2[1]);
    return Number.isNaN(value) ? getScrollBarSize() : value;
  }
  function getTargetScrollBarSize(target) {
    if (typeof document === "undefined" || !target || !(target instanceof Element)) {
      return {
        width: 0,
        height: 0
      };
    }
    var _getComputedStyle2 = getComputedStyle(target, "::-webkit-scrollbar"), width = _getComputedStyle2.width, height = _getComputedStyle2.height;
    return {
      width: ensureSize(width),
      height: ensureSize(height)
    };
  }

  // node_modules/@rc-component/portal/es/util.js
  function isBodyOverflowing() {
    return document.body.scrollHeight > (window.innerHeight || document.documentElement.clientHeight) && window.innerWidth > document.body.offsetWidth;
  }

  // node_modules/@rc-component/portal/es/useScrollLocker.js
  var UNIQUE_ID = "rc-util-locker-".concat(Date.now());
  var uuid3 = 0;
  function useScrollLocker(lock) {
    var mergedLock = !!lock;
    var _React$useState = React258.useState(function() {
      uuid3 += 1;
      return "".concat(UNIQUE_ID, "_").concat(uuid3);
    }), _React$useState2 = _slicedToArray(_React$useState, 1), id2 = _React$useState2[0];
    useLayoutEffect_default(function() {
      if (mergedLock) {
        var scrollbarSize = getTargetScrollBarSize(document.body).width;
        var isOverflow = isBodyOverflowing();
        updateCSS("\nhtml body {\n  overflow-y: hidden;\n  ".concat(isOverflow ? "width: calc(100% - ".concat(scrollbarSize, "px);") : "", "\n}"), id2);
      } else {
        removeCSS(id2);
      }
      return function() {
        removeCSS(id2);
      };
    }, [mergedLock, id2]);
  }

  // node_modules/@rc-component/portal/es/mock.js
  var inline = false;
  function inlineMock(nextInline) {
    if (typeof nextInline === "boolean") {
      inline = nextInline;
    }
    return inline;
  }

  // node_modules/@rc-component/portal/es/Portal.js
  var getPortalContainer = function getPortalContainer2(getContainer3) {
    if (getContainer3 === false) {
      return false;
    }
    if (!canUseDom() || !getContainer3) {
      return null;
    }
    if (typeof getContainer3 === "string") {
      return document.querySelector(getContainer3);
    }
    if (typeof getContainer3 === "function") {
      return getContainer3();
    }
    return getContainer3;
  };
  var Portal2 = /* @__PURE__ */ React259.forwardRef(function(props, ref) {
    var open = props.open, autoLock = props.autoLock, getContainer3 = props.getContainer, debug = props.debug, _props$autoDestroy = props.autoDestroy, autoDestroy = _props$autoDestroy === void 0 ? true : _props$autoDestroy, children = props.children;
    var _React$useState = React259.useState(open), _React$useState2 = _slicedToArray(_React$useState, 2), shouldRender = _React$useState2[0], setShouldRender = _React$useState2[1];
    var mergedRender = shouldRender || open;
    if (true) {
      warning_default(canUseDom() || !open, "Portal only work in client side. Please call 'useEffect' to show Portal instead default render in SSR.");
    }
    React259.useEffect(function() {
      if (autoDestroy || open) {
        setShouldRender(open);
      }
    }, [open, autoDestroy]);
    var _React$useState3 = React259.useState(function() {
      return getPortalContainer(getContainer3);
    }), _React$useState4 = _slicedToArray(_React$useState3, 2), innerContainer = _React$useState4[0], setInnerContainer = _React$useState4[1];
    React259.useEffect(function() {
      var customizeContainer = getPortalContainer(getContainer3);
      setInnerContainer(customizeContainer !== null && customizeContainer !== void 0 ? customizeContainer : null);
    });
    var _useDom = useDom(mergedRender && !innerContainer, debug), _useDom2 = _slicedToArray(_useDom, 2), defaultContainer2 = _useDom2[0], queueCreate = _useDom2[1];
    var mergedContainer = innerContainer !== null && innerContainer !== void 0 ? innerContainer : defaultContainer2;
    useScrollLocker(autoLock && open && canUseDom() && (mergedContainer === defaultContainer2 || mergedContainer === document.body));
    var childRef = null;
    if (children && supportRef(children) && ref) {
      var _ref = children;
      childRef = _ref.ref;
    }
    var mergedRef = useComposeRef(childRef, ref);
    if (!mergedRender || !canUseDom() || innerContainer === void 0) {
      return null;
    }
    var renderInline = mergedContainer === false || inlineMock();
    var reffedChildren = children;
    if (ref) {
      reffedChildren = /* @__PURE__ */ React259.cloneElement(children, {
        ref: mergedRef
      });
    }
    return /* @__PURE__ */ React259.createElement(Context_default2.Provider, {
      value: queueCreate
    }, renderInline ? reffedChildren : /* @__PURE__ */ (0, import_react_dom10.createPortal)(reffedChildren, mergedContainer));
  });
  if (true) {
    Portal2.displayName = "Portal";
  }
  var Portal_default2 = Portal2;

  // node_modules/@rc-component/portal/es/index.js
  var es_default18 = Portal_default2;

  // node_modules/antd/es/dropdown/index.js
  var dropdown_default2 = dropdown_default;

  // node_modules/antd/es/form/ErrorList.js
  var import_classnames98 = __toESM(require_classnames());
  var React261 = __toESM(require_react());

  // node_modules/antd/es/form/hooks/useDebounce.js
  var React260 = __toESM(require_react());
  function useDebounce(value) {
    var _React$useState = React260.useState(value), _React$useState2 = _slicedToArray(_React$useState, 2), cacheValue = _React$useState2[0], setCacheValue = _React$useState2[1];
    React260.useEffect(function() {
      var timeout = setTimeout(function() {
        setCacheValue(value);
      }, value.length ? 0 : 10);
      return function() {
        clearTimeout(timeout);
      };
    }, [value]);
    return cacheValue;
  }

  // node_modules/antd/es/form/ErrorList.js
  var EMPTY_LIST3 = [];
  function toErrorEntity(error2, errorStatus, prefix2) {
    var index2 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0;
    return {
      key: typeof error2 === "string" ? error2 : "".concat(prefix2, "-").concat(index2),
      error: error2,
      errorStatus
    };
  }
  function ErrorList(_ref) {
    var help = _ref.help, helpStatus = _ref.helpStatus, _ref$errors = _ref.errors, errors = _ref$errors === void 0 ? EMPTY_LIST3 : _ref$errors, _ref$warnings = _ref.warnings, warnings = _ref$warnings === void 0 ? EMPTY_LIST3 : _ref$warnings, rootClassName = _ref.className, fieldId = _ref.fieldId, onVisibleChanged = _ref.onVisibleChanged;
    var _React$useContext = React261.useContext(FormItemPrefixContext), prefixCls = _React$useContext.prefixCls;
    var _React$useContext2 = React261.useContext(ConfigContext), getPrefixCls = _React$useContext2.getPrefixCls;
    var baseClassName = "".concat(prefixCls, "-item-explain");
    var rootPrefixCls = getPrefixCls();
    var debounceErrors = useDebounce(errors);
    var debounceWarnings = useDebounce(warnings);
    var fullKeyList = React261.useMemo(function() {
      if (help !== void 0 && help !== null) {
        return [toErrorEntity(help, helpStatus, "help")];
      }
      return [].concat(_toConsumableArray(debounceErrors.map(function(error2, index2) {
        return toErrorEntity(error2, "error", "error", index2);
      })), _toConsumableArray(debounceWarnings.map(function(warning12, index2) {
        return toErrorEntity(warning12, "warning", "warning", index2);
      })));
    }, [help, helpStatus, debounceErrors, debounceWarnings]);
    var helpProps = {};
    if (fieldId) {
      helpProps.id = "".concat(fieldId, "_help");
    }
    return /* @__PURE__ */ React261.createElement(es_default3, {
      motionDeadline: motion_default.motionDeadline,
      motionName: "".concat(rootPrefixCls, "-show-help"),
      visible: !!fullKeyList.length,
      onVisibleChanged
    }, function(holderProps) {
      var holderClassName = holderProps.className, holderStyle = holderProps.style;
      return /* @__PURE__ */ React261.createElement("div", _extends({}, helpProps, {
        className: (0, import_classnames98.default)(baseClassName, holderClassName, rootClassName),
        style: holderStyle,
        role: "alert"
      }), /* @__PURE__ */ React261.createElement(CSSMotionList_default, _extends({
        keys: fullKeyList
      }, motion_default, {
        motionName: "".concat(rootPrefixCls, "-show-help-item"),
        component: false
      }), function(itemProps) {
        var key2 = itemProps.key, error2 = itemProps.error, errorStatus = itemProps.errorStatus, itemClassName = itemProps.className, itemStyle = itemProps.style;
        return /* @__PURE__ */ React261.createElement("div", {
          key: key2,
          className: (0, import_classnames98.default)(itemClassName, _defineProperty({}, "".concat(baseClassName, "-").concat(errorStatus), errorStatus)),
          style: itemStyle
        }, error2);
      }));
    });
  }

  // node_modules/antd/es/form/Form.js
  var import_classnames99 = __toESM(require_classnames());
  var React263 = __toESM(require_react());
  var import_react74 = __toESM(require_react());

  // node_modules/antd/es/form/hooks/useForm.js
  var React262 = __toESM(require_react());

  // node_modules/compute-scroll-into-view/dist/index.mjs
  function t(t4) {
    return "object" == typeof t4 && null != t4 && 1 === t4.nodeType;
  }
  function e(t4, e3) {
    return (!e3 || "hidden" !== t4) && "visible" !== t4 && "clip" !== t4;
  }
  function n(t4, n4) {
    if (t4.clientHeight < t4.scrollHeight || t4.clientWidth < t4.scrollWidth) {
      var r4 = getComputedStyle(t4, null);
      return e(r4.overflowY, n4) || e(r4.overflowX, n4) || function(t5) {
        var e3 = function(t6) {
          if (!t6.ownerDocument || !t6.ownerDocument.defaultView)
            return null;
          try {
            return t6.ownerDocument.defaultView.frameElement;
          } catch (t7) {
            return null;
          }
        }(t5);
        return !!e3 && (e3.clientHeight < t5.scrollHeight || e3.clientWidth < t5.scrollWidth);
      }(t4);
    }
    return false;
  }
  function r(t4, e3, n4, r4, i3, o3, l2, d2) {
    return o3 < t4 && l2 > e3 || o3 > t4 && l2 < e3 ? 0 : o3 <= t4 && d2 <= n4 || l2 >= e3 && d2 >= n4 ? o3 - t4 - r4 : l2 > e3 && d2 < n4 || o3 < t4 && d2 > n4 ? l2 - e3 + i3 : 0;
  }
  var i = function(e3, i3) {
    var o3 = window, l2 = i3.scrollMode, d2 = i3.block, f2 = i3.inline, h2 = i3.boundary, u2 = i3.skipOverflowHiddenElements, s2 = "function" == typeof h2 ? h2 : function(t4) {
      return t4 !== h2;
    };
    if (!t(e3))
      throw new TypeError("Invalid target");
    for (var a2, c2, g2 = document.scrollingElement || document.documentElement, p2 = [], m2 = e3; t(m2) && s2(m2); ) {
      if ((m2 = null == (c2 = (a2 = m2).parentElement) ? a2.getRootNode().host || null : c2) === g2) {
        p2.push(m2);
        break;
      }
      null != m2 && m2 === document.body && n(m2) && !n(document.documentElement) || null != m2 && n(m2, u2) && p2.push(m2);
    }
    for (var w2 = o3.visualViewport ? o3.visualViewport.width : innerWidth, v2 = o3.visualViewport ? o3.visualViewport.height : innerHeight, W2 = window.scrollX || pageXOffset, H2 = window.scrollY || pageYOffset, b2 = e3.getBoundingClientRect(), y2 = b2.height, E2 = b2.width, M2 = b2.top, V = b2.right, x2 = b2.bottom, I2 = b2.left, C = "start" === d2 || "nearest" === d2 ? M2 : "end" === d2 ? x2 : M2 + y2 / 2, R2 = "center" === f2 ? I2 + E2 / 2 : "end" === f2 ? V : I2, T = [], k2 = 0; k2 < p2.length; k2++) {
      var B2 = p2[k2], D2 = B2.getBoundingClientRect(), O2 = D2.height, X2 = D2.width, Y2 = D2.top, L2 = D2.right, S2 = D2.bottom, j2 = D2.left;
      if ("if-needed" === l2 && M2 >= 0 && I2 >= 0 && x2 <= v2 && V <= w2 && M2 >= Y2 && x2 <= S2 && I2 >= j2 && V <= L2)
        return T;
      var N2 = getComputedStyle(B2), q2 = parseInt(N2.borderLeftWidth, 10), z2 = parseInt(N2.borderTopWidth, 10), A2 = parseInt(N2.borderRightWidth, 10), F2 = parseInt(N2.borderBottomWidth, 10), G2 = 0, J = 0, K = "offsetWidth" in B2 ? B2.offsetWidth - B2.clientWidth - q2 - A2 : 0, P2 = "offsetHeight" in B2 ? B2.offsetHeight - B2.clientHeight - z2 - F2 : 0, Q2 = "offsetWidth" in B2 ? 0 === B2.offsetWidth ? 0 : X2 / B2.offsetWidth : 0, U2 = "offsetHeight" in B2 ? 0 === B2.offsetHeight ? 0 : O2 / B2.offsetHeight : 0;
      if (g2 === B2)
        G2 = "start" === d2 ? C : "end" === d2 ? C - v2 : "nearest" === d2 ? r(H2, H2 + v2, v2, z2, F2, H2 + C, H2 + C + y2, y2) : C - v2 / 2, J = "start" === f2 ? R2 : "center" === f2 ? R2 - w2 / 2 : "end" === f2 ? R2 - w2 : r(W2, W2 + w2, w2, q2, A2, W2 + R2, W2 + R2 + E2, E2), G2 = Math.max(0, G2 + H2), J = Math.max(0, J + W2);
      else {
        G2 = "start" === d2 ? C - Y2 - z2 : "end" === d2 ? C - S2 + F2 + P2 : "nearest" === d2 ? r(Y2, S2, O2, z2, F2 + P2, C, C + y2, y2) : C - (Y2 + O2 / 2) + P2 / 2, J = "start" === f2 ? R2 - j2 - q2 : "center" === f2 ? R2 - (j2 + X2 / 2) + K / 2 : "end" === f2 ? R2 - L2 + A2 + K : r(j2, L2, X2, q2, A2 + K, R2, R2 + E2, E2);
        var Z2 = B2.scrollLeft, $ = B2.scrollTop;
        C += $ - (G2 = Math.max(0, Math.min($ + G2 / U2, B2.scrollHeight - O2 / U2 + P2))), R2 += Z2 - (J = Math.max(0, Math.min(Z2 + J / Q2, B2.scrollWidth - X2 / Q2 + K)));
      }
      T.push({ el: B2, top: G2, left: J });
    }
    return T;
  };

  // node_modules/scroll-into-view-if-needed/es/index.js
  function isOptionsObject(options) {
    return options === Object(options) && Object.keys(options).length !== 0;
  }
  function defaultBehavior(actions, behavior) {
    if (behavior === void 0) {
      behavior = "auto";
    }
    var canSmoothScroll = "scrollBehavior" in document.body.style;
    actions.forEach(function(_ref) {
      var el = _ref.el, top = _ref.top, left = _ref.left;
      if (el.scroll && canSmoothScroll) {
        el.scroll({
          top,
          left,
          behavior
        });
      } else {
        el.scrollTop = top;
        el.scrollLeft = left;
      }
    });
  }
  function getOptions(options) {
    if (options === false) {
      return {
        block: "end",
        inline: "nearest"
      };
    }
    if (isOptionsObject(options)) {
      return options;
    }
    return {
      block: "start",
      inline: "nearest"
    };
  }
  function scrollIntoView(target, options) {
    var isTargetAttached = target.isConnected || target.ownerDocument.documentElement.contains(target);
    if (isOptionsObject(options) && typeof options.behavior === "function") {
      return options.behavior(isTargetAttached ? i(target, options) : []);
    }
    if (!isTargetAttached) {
      return;
    }
    var computeOptions = getOptions(options);
    return defaultBehavior(i(target, computeOptions), computeOptions.behavior);
  }
  var es_default19 = scrollIntoView;

  // node_modules/antd/es/form/util.js
  var formItemNameBlackList = ["parentNode"];
  var defaultItemNamePrefixCls = "form_item";
  function toArray6(candidate) {
    if (candidate === void 0 || candidate === false)
      return [];
    return Array.isArray(candidate) ? candidate : [candidate];
  }
  function getFieldId(namePath, formName) {
    if (!namePath.length)
      return void 0;
    var mergedId = namePath.join("_");
    if (formName) {
      return "".concat(formName, "_").concat(mergedId);
    }
    var isIllegalName = formItemNameBlackList.includes(mergedId);
    return isIllegalName ? "".concat(defaultItemNamePrefixCls, "_").concat(mergedId) : mergedId;
  }

  // node_modules/antd/es/form/hooks/useForm.js
  function toNamePathStr(name) {
    var namePath = toArray6(name);
    return namePath.join("_");
  }
  function useForm2(form) {
    var _useRcForm = useForm_default(), _useRcForm2 = _slicedToArray(_useRcForm, 1), rcForm = _useRcForm2[0];
    var itemsRef = React262.useRef({});
    var wrapForm = React262.useMemo(function() {
      return form !== null && form !== void 0 ? form : _extends(_extends({}, rcForm), {
        __INTERNAL__: {
          itemRef: function itemRef2(name) {
            return function(node) {
              var namePathStr = toNamePathStr(name);
              if (node) {
                itemsRef.current[namePathStr] = node;
              } else {
                delete itemsRef.current[namePathStr];
              }
            };
          }
        },
        scrollToField: function scrollToField(name) {
          var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          var namePath = toArray6(name);
          var fieldId = getFieldId(namePath, wrapForm.__INTERNAL__.name);
          var node = fieldId ? document.getElementById(fieldId) : null;
          if (node) {
            es_default19(node, _extends({
              scrollMode: "if-needed",
              block: "nearest"
            }, options));
          }
        },
        getFieldInstance: function getFieldInstance(name) {
          var namePathStr = toNamePathStr(name);
          return itemsRef.current[namePathStr];
        }
      });
    }, [form, rcForm]);
    return [wrapForm];
  }

  // node_modules/antd/es/form/Form.js
  var __rest34 = function(s2, e3) {
    var t4 = {};
    for (var p2 in s2)
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t4[p2] = s2[p2];
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t4[p2[i3]] = s2[p2[i3]];
      }
    return t4;
  };
  var InternalForm2 = function InternalForm3(props, ref) {
    var _classNames;
    var contextSize = React263.useContext(SizeContext_default);
    var contextDisabled = React263.useContext(DisabledContext_default);
    var _React$useContext = React263.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls, direction = _React$useContext.direction, contextForm = _React$useContext.form;
    var customizePrefixCls = props.prefixCls, _props$className = props.className, className = _props$className === void 0 ? "" : _props$className, _props$size = props.size, size = _props$size === void 0 ? contextSize : _props$size, _props$disabled = props.disabled, disabled = _props$disabled === void 0 ? contextDisabled : _props$disabled, form = props.form, colon = props.colon, labelAlign = props.labelAlign, labelWrap = props.labelWrap, labelCol = props.labelCol, wrapperCol = props.wrapperCol, hideRequiredMark = props.hideRequiredMark, _props$layout = props.layout, layout = _props$layout === void 0 ? "horizontal" : _props$layout, scrollToFirstError = props.scrollToFirstError, requiredMark = props.requiredMark, onFinishFailed = props.onFinishFailed, name = props.name, restFormProps = __rest34(props, ["prefixCls", "className", "size", "disabled", "form", "colon", "labelAlign", "labelWrap", "labelCol", "wrapperCol", "hideRequiredMark", "layout", "scrollToFirstError", "requiredMark", "onFinishFailed", "name"]);
    var contextValidateMessages = React263.useContext(validateMessagesContext_default);
    var mergedRequiredMark = (0, import_react74.useMemo)(function() {
      if (requiredMark !== void 0) {
        return requiredMark;
      }
      if (contextForm && contextForm.requiredMark !== void 0) {
        return contextForm.requiredMark;
      }
      if (hideRequiredMark) {
        return false;
      }
      return true;
    }, [hideRequiredMark, requiredMark, contextForm]);
    var mergedColon = colon !== null && colon !== void 0 ? colon : contextForm === null || contextForm === void 0 ? void 0 : contextForm.colon;
    var prefixCls = getPrefixCls("form", customizePrefixCls);
    var formClassName = (0, import_classnames99.default)(prefixCls, (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-").concat(layout), true), _defineProperty(_classNames, "".concat(prefixCls, "-hide-required-mark"), mergedRequiredMark === false), _defineProperty(_classNames, "".concat(prefixCls, "-rtl"), direction === "rtl"), _defineProperty(_classNames, "".concat(prefixCls, "-").concat(size), size), _classNames), className);
    var _useForm = useForm2(form), _useForm2 = _slicedToArray(_useForm, 1), wrapForm = _useForm2[0];
    var __INTERNAL__ = wrapForm.__INTERNAL__;
    __INTERNAL__.name = name;
    var formContextValue = (0, import_react74.useMemo)(function() {
      return {
        name,
        labelAlign,
        labelCol,
        labelWrap,
        wrapperCol,
        vertical: layout === "vertical",
        colon: mergedColon,
        requiredMark: mergedRequiredMark,
        itemRef: __INTERNAL__.itemRef,
        form: wrapForm
      };
    }, [name, labelAlign, labelCol, wrapperCol, layout, mergedColon, mergedRequiredMark, wrapForm]);
    React263.useImperativeHandle(ref, function() {
      return wrapForm;
    });
    var onInternalFinishFailed = function onInternalFinishFailed2(errorInfo) {
      onFinishFailed === null || onFinishFailed === void 0 ? void 0 : onFinishFailed(errorInfo);
      var defaultScrollToFirstError = {
        block: "nearest"
      };
      if (scrollToFirstError && errorInfo.errorFields.length) {
        if (_typeof(scrollToFirstError) === "object") {
          defaultScrollToFirstError = scrollToFirstError;
        }
        wrapForm.scrollToField(errorInfo.errorFields[0].name, defaultScrollToFirstError);
      }
    };
    return /* @__PURE__ */ React263.createElement(DisabledContextProvider, {
      disabled
    }, /* @__PURE__ */ React263.createElement(SizeContextProvider, {
      size
    }, /* @__PURE__ */ React263.createElement(FormProvider3, _extends({}, {
      // This is not list in API, we pass with spread
      validateMessages: contextValidateMessages
    }), /* @__PURE__ */ React263.createElement(FormContext2.Provider, {
      value: formContextValue
    }, /* @__PURE__ */ React263.createElement(es_default10, _extends({
      id: name
    }, restFormProps, {
      name,
      onFinishFailed: onInternalFinishFailed,
      form: wrapForm,
      className: formClassName
    }))))));
  };
  var Form4 = /* @__PURE__ */ React263.forwardRef(InternalForm2);
  var Form_default2 = Form4;

  // node_modules/antd/es/form/FormItem/index.js
  var React270 = __toESM(require_react());
  var import_react77 = __toESM(require_react());

  // node_modules/antd/es/form/hooks/useFormItemStatus.js
  var import_react75 = __toESM(require_react());
  var useFormItemStatus = function useFormItemStatus2() {
    var _useContext = (0, import_react75.useContext)(FormItemInputContext), status = _useContext.status;
    true ? warning_default2(status !== void 0, "Form.Item", "Form.Item.useStatus should be used under Form.Item component. For more information: ".concat(window.location.protocol, "//").concat(window.location.host, "/components/form-cn/#Form.Item.useStatus")) : void 0;
    return {
      status
    };
  };
  var useFormItemStatus_default = useFormItemStatus;

  // node_modules/antd/es/form/hooks/useFrameState.js
  var React264 = __toESM(require_react());
  var import_react76 = __toESM(require_react());
  function useFrameState(defaultValue) {
    var _React$useState = React264.useState(defaultValue), _React$useState2 = _slicedToArray(_React$useState, 2), value = _React$useState2[0], setValue = _React$useState2[1];
    var frameRef = (0, import_react76.useRef)(null);
    var batchRef = (0, import_react76.useRef)([]);
    var destroyRef = (0, import_react76.useRef)(false);
    React264.useEffect(function() {
      destroyRef.current = false;
      return function() {
        destroyRef.current = true;
        raf_default.cancel(frameRef.current);
        frameRef.current = null;
      };
    }, []);
    function setFrameValue(updater) {
      if (destroyRef.current) {
        return;
      }
      if (frameRef.current === null) {
        batchRef.current = [];
        frameRef.current = raf_default(function() {
          frameRef.current = null;
          setValue(function(prevValue) {
            var current = prevValue;
            batchRef.current.forEach(function(func) {
              current = func(current);
            });
            return current;
          });
        });
      }
      batchRef.current.push(updater);
    }
    return [value, setFrameValue];
  }

  // node_modules/antd/es/form/hooks/useItemRef.js
  var React265 = __toESM(require_react());
  function useItemRef() {
    var _React$useContext = React265.useContext(FormContext2), itemRef2 = _React$useContext.itemRef;
    var cacheRef = React265.useRef({});
    function getRef(name, children) {
      var childrenRef = children && _typeof(children) === "object" && children.ref;
      var nameStr = name.join("_");
      if (cacheRef.current.name !== nameStr || cacheRef.current.originRef !== childrenRef) {
        cacheRef.current.name = nameStr;
        cacheRef.current.originRef = childrenRef;
        cacheRef.current.ref = composeRef(itemRef2(name), childrenRef);
      }
      return cacheRef.current.ref;
    }
    return getRef;
  }

  // node_modules/antd/es/form/FormItem/ItemHolder.js
  var import_classnames102 = __toESM(require_classnames());
  var React269 = __toESM(require_react());

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/QuestionCircleOutlined.js
  var React266 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/QuestionCircleOutlined.js
  var QuestionCircleOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z" } }, { "tag": "path", "attrs": { "d": "M623.6 316.7C593.6 290.4 554 276 512 276s-81.6 14.5-111.6 40.7C369.2 344 352 380.7 352 420v7.6c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V420c0-44.1 43.1-80 96-80s96 35.9 96 80c0 31.1-22 59.6-56.1 72.7-21.2 8.1-39.2 22.3-52.1 40.9-13.1 19-19.9 41.8-19.9 64.9V620c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8v-22.7a48.3 48.3 0 0130.9-44.8c59-22.7 97.1-74.7 97.1-132.5.1-39.3-17.1-76-48.3-103.3zM472 732a40 40 0 1080 0 40 40 0 10-80 0z" } }] }, "name": "question-circle", "theme": "outlined" };
  var QuestionCircleOutlined_default = QuestionCircleOutlined;

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/QuestionCircleOutlined.js
  var QuestionCircleOutlined2 = function QuestionCircleOutlined3(props, ref) {
    return /* @__PURE__ */ React266.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: QuestionCircleOutlined_default
    }));
  };
  QuestionCircleOutlined2.displayName = "QuestionCircleOutlined";
  var QuestionCircleOutlined_default2 = /* @__PURE__ */ React266.forwardRef(QuestionCircleOutlined2);

  // node_modules/antd/es/form/FormItemLabel.js
  var import_classnames100 = __toESM(require_classnames());
  var React267 = __toESM(require_react());
  var __rest35 = function(s2, e3) {
    var t4 = {};
    for (var p2 in s2)
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t4[p2] = s2[p2];
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t4[p2[i3]] = s2[p2[i3]];
      }
    return t4;
  };
  function toTooltipProps(tooltip) {
    if (!tooltip) {
      return null;
    }
    if (_typeof(tooltip) === "object" && !/* @__PURE__ */ React267.isValidElement(tooltip)) {
      return tooltip;
    }
    return {
      title: tooltip
    };
  }
  var FormItemLabel = function FormItemLabel2(_ref) {
    var prefixCls = _ref.prefixCls, label = _ref.label, htmlFor = _ref.htmlFor, labelCol = _ref.labelCol, labelAlign = _ref.labelAlign, colon = _ref.colon, required4 = _ref.required, requiredMark = _ref.requiredMark, tooltip = _ref.tooltip;
    var _useLocaleReceiver = useLocaleReceiver("Form"), _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 1), formLocale = _useLocaleReceiver2[0];
    if (!label)
      return null;
    return /* @__PURE__ */ React267.createElement(FormContext2.Consumer, {
      key: "label"
    }, function(_ref2) {
      var _classNames2;
      var vertical = _ref2.vertical, contextLabelAlign = _ref2.labelAlign, contextLabelCol = _ref2.labelCol, labelWrap = _ref2.labelWrap, contextColon = _ref2.colon;
      var _a;
      var mergedLabelCol = labelCol || contextLabelCol || {};
      var mergedLabelAlign = labelAlign || contextLabelAlign;
      var labelClsBasic = "".concat(prefixCls, "-item-label");
      var labelColClassName = (0, import_classnames100.default)(labelClsBasic, mergedLabelAlign === "left" && "".concat(labelClsBasic, "-left"), mergedLabelCol.className, _defineProperty({}, "".concat(labelClsBasic, "-wrap"), !!labelWrap));
      var labelChildren = label;
      var computedColon = colon === true || contextColon !== false && colon !== false;
      var haveColon = computedColon && !vertical;
      if (haveColon && typeof label === "string" && label.trim() !== "") {
        labelChildren = label.replace(/[:|：]\s*$/, "");
      }
      var tooltipProps = toTooltipProps(tooltip);
      if (tooltipProps) {
        var _tooltipProps$icon = tooltipProps.icon, icon = _tooltipProps$icon === void 0 ? /* @__PURE__ */ React267.createElement(QuestionCircleOutlined_default2, null) : _tooltipProps$icon, restTooltipProps = __rest35(tooltipProps, ["icon"]);
        var tooltipNode = /* @__PURE__ */ React267.createElement(tooltip_default, _extends({}, restTooltipProps), /* @__PURE__ */ React267.cloneElement(icon, {
          className: "".concat(prefixCls, "-item-tooltip"),
          title: ""
        }));
        labelChildren = /* @__PURE__ */ React267.createElement(React267.Fragment, null, labelChildren, tooltipNode);
      }
      if (requiredMark === "optional" && !required4) {
        labelChildren = /* @__PURE__ */ React267.createElement(React267.Fragment, null, labelChildren, /* @__PURE__ */ React267.createElement("span", {
          className: "".concat(prefixCls, "-item-optional"),
          title: ""
        }, (formLocale === null || formLocale === void 0 ? void 0 : formLocale.optional) || ((_a = default_default.Form) === null || _a === void 0 ? void 0 : _a.optional)));
      }
      var labelClassName = (0, import_classnames100.default)((_classNames2 = {}, _defineProperty(_classNames2, "".concat(prefixCls, "-item-required"), required4), _defineProperty(_classNames2, "".concat(prefixCls, "-item-required-mark-optional"), requiredMark === "optional"), _defineProperty(_classNames2, "".concat(prefixCls, "-item-no-colon"), !computedColon), _classNames2));
      return /* @__PURE__ */ React267.createElement(col_default, _extends({}, mergedLabelCol, {
        className: labelColClassName
      }), /* @__PURE__ */ React267.createElement("label", {
        htmlFor,
        className: labelClassName,
        title: typeof label === "string" ? label : ""
      }, labelChildren));
    });
  };
  var FormItemLabel_default = FormItemLabel;

  // node_modules/antd/es/form/FormItemInput.js
  var import_classnames101 = __toESM(require_classnames());
  var React268 = __toESM(require_react());
  var FormItemInput = function FormItemInput2(props) {
    var prefixCls = props.prefixCls, status = props.status, wrapperCol = props.wrapperCol, children = props.children, errors = props.errors, warnings = props.warnings, formItemRender = props._internalItemRender, extra = props.extra, help = props.help, fieldId = props.fieldId, marginBottom = props.marginBottom, onErrorVisibleChanged = props.onErrorVisibleChanged;
    var baseClassName = "".concat(prefixCls, "-item");
    var formContext = React268.useContext(FormContext2);
    var mergedWrapperCol = wrapperCol || formContext.wrapperCol || {};
    var className = (0, import_classnames101.default)("".concat(baseClassName, "-control"), mergedWrapperCol.className);
    var subFormContext = React268.useMemo(function() {
      return _extends({}, formContext);
    }, [formContext]);
    delete subFormContext.labelCol;
    delete subFormContext.wrapperCol;
    var inputDom = /* @__PURE__ */ React268.createElement("div", {
      className: "".concat(baseClassName, "-control-input")
    }, /* @__PURE__ */ React268.createElement("div", {
      className: "".concat(baseClassName, "-control-input-content")
    }, children));
    var formItemContext = React268.useMemo(function() {
      return {
        prefixCls,
        status
      };
    }, [prefixCls, status]);
    var errorListDom = marginBottom !== null || errors.length || warnings.length ? /* @__PURE__ */ React268.createElement("div", {
      style: {
        display: "flex",
        flexWrap: "nowrap"
      }
    }, /* @__PURE__ */ React268.createElement(FormItemPrefixContext.Provider, {
      value: formItemContext
    }, /* @__PURE__ */ React268.createElement(ErrorList, {
      fieldId,
      errors,
      warnings,
      help,
      helpStatus: status,
      className: "".concat(baseClassName, "-explain-connected"),
      onVisibleChanged: onErrorVisibleChanged
    })), !!marginBottom && /* @__PURE__ */ React268.createElement("div", {
      style: {
        width: 0,
        height: marginBottom
      }
    })) : null;
    var extraProps = {};
    if (fieldId) {
      extraProps.id = "".concat(fieldId, "_extra");
    }
    var extraDom = extra ? /* @__PURE__ */ React268.createElement("div", _extends({}, extraProps, {
      className: "".concat(baseClassName, "-extra")
    }), extra) : null;
    var dom = formItemRender && formItemRender.mark === "pro_table_render" && formItemRender.render ? formItemRender.render(props, {
      input: inputDom,
      errorList: errorListDom,
      extra: extraDom
    }) : /* @__PURE__ */ React268.createElement(React268.Fragment, null, inputDom, errorListDom, extraDom);
    return /* @__PURE__ */ React268.createElement(FormContext2.Provider, {
      value: subFormContext
    }, /* @__PURE__ */ React268.createElement(col_default, _extends({}, mergedWrapperCol, {
      className
    }), dom));
  };
  var FormItemInput_default = FormItemInput;

  // node_modules/antd/es/form/FormItem/ItemHolder.js
  var __rest36 = function(s2, e3) {
    var t4 = {};
    for (var p2 in s2)
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t4[p2] = s2[p2];
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t4[p2[i3]] = s2[p2[i3]];
      }
    return t4;
  };
  var iconMap = {
    success: CheckCircleFilled_default2,
    warning: ExclamationCircleFilled_default2,
    error: CloseCircleFilled_default2,
    validating: LoadingOutlined_default2
  };
  function ItemHolder(props) {
    var _itemClassName;
    var prefixCls = props.prefixCls, className = props.className, style3 = props.style, help = props.help, errors = props.errors, warnings = props.warnings, validateStatus2 = props.validateStatus, meta = props.meta, hasFeedback = props.hasFeedback, hidden = props.hidden, children = props.children, fieldId = props.fieldId, isRequired = props.isRequired, onSubItemMetaChange = props.onSubItemMetaChange, restProps = __rest36(props, ["prefixCls", "className", "style", "help", "errors", "warnings", "validateStatus", "meta", "hasFeedback", "hidden", "children", "fieldId", "isRequired", "onSubItemMetaChange"]);
    var itemPrefixCls = "".concat(prefixCls, "-item");
    var _React$useContext = React269.useContext(FormContext2), requiredMark = _React$useContext.requiredMark;
    var itemRef2 = React269.useRef(null);
    var debounceErrors = useDebounce(errors);
    var debounceWarnings = useDebounce(warnings);
    var hasHelp = help !== void 0 && help !== null;
    var hasError = !!(hasHelp || errors.length || warnings.length);
    var _React$useState = React269.useState(null), _React$useState2 = _slicedToArray(_React$useState, 2), marginBottom = _React$useState2[0], setMarginBottom = _React$useState2[1];
    useLayoutEffect_default(function() {
      if (hasError && itemRef2.current) {
        var itemStyle = getComputedStyle(itemRef2.current);
        setMarginBottom(parseInt(itemStyle.marginBottom, 10));
      }
    }, [hasError]);
    var onErrorVisibleChanged = function onErrorVisibleChanged2(nextVisible) {
      if (!nextVisible) {
        setMarginBottom(null);
      }
    };
    var mergedValidateStatus = "";
    if (validateStatus2 !== void 0) {
      mergedValidateStatus = validateStatus2;
    } else if (meta.validating) {
      mergedValidateStatus = "validating";
    } else if (debounceErrors.length) {
      mergedValidateStatus = "error";
    } else if (debounceWarnings.length) {
      mergedValidateStatus = "warning";
    } else if (meta.touched) {
      mergedValidateStatus = "success";
    }
    var formItemStatusContext = React269.useMemo(function() {
      var feedbackIcon;
      if (hasFeedback) {
        var IconNode = mergedValidateStatus && iconMap[mergedValidateStatus];
        feedbackIcon = IconNode ? /* @__PURE__ */ React269.createElement("span", {
          className: (0, import_classnames102.default)("".concat(itemPrefixCls, "-feedback-icon"), "".concat(itemPrefixCls, "-feedback-icon-").concat(mergedValidateStatus))
        }, /* @__PURE__ */ React269.createElement(IconNode, null)) : null;
      }
      return {
        status: mergedValidateStatus,
        hasFeedback,
        feedbackIcon,
        isFormItemInput: true
      };
    }, [mergedValidateStatus, hasFeedback]);
    var itemClassName = (_itemClassName = {}, _defineProperty(_itemClassName, itemPrefixCls, true), _defineProperty(_itemClassName, "".concat(itemPrefixCls, "-with-help"), hasHelp || debounceErrors.length || debounceWarnings.length), _defineProperty(_itemClassName, "".concat(className), !!className), _defineProperty(_itemClassName, "".concat(itemPrefixCls, "-has-feedback"), mergedValidateStatus && hasFeedback), _defineProperty(_itemClassName, "".concat(itemPrefixCls, "-has-success"), mergedValidateStatus === "success"), _defineProperty(_itemClassName, "".concat(itemPrefixCls, "-has-warning"), mergedValidateStatus === "warning"), _defineProperty(_itemClassName, "".concat(itemPrefixCls, "-has-error"), mergedValidateStatus === "error"), _defineProperty(_itemClassName, "".concat(itemPrefixCls, "-is-validating"), mergedValidateStatus === "validating"), _defineProperty(_itemClassName, "".concat(itemPrefixCls, "-hidden"), hidden), _itemClassName);
    return /* @__PURE__ */ React269.createElement("div", {
      className: (0, import_classnames102.default)(itemClassName),
      style: style3,
      ref: itemRef2
    }, /* @__PURE__ */ React269.createElement(row_default, _extends({
      className: "".concat(itemPrefixCls, "-row")
    }, omit(restProps, ["_internalItemRender", "colon", "dependencies", "extra", "fieldKey", "getValueFromEvent", "getValueProps", "htmlFor", "id", "initialValue", "isListField", "label", "labelAlign", "labelCol", "labelWrap", "messageVariables", "name", "normalize", "noStyle", "preserve", "required", "requiredMark", "rules", "shouldUpdate", "trigger", "tooltip", "validateFirst", "validateTrigger", "valuePropName", "wrapperCol"])), /* @__PURE__ */ React269.createElement(FormItemLabel_default, _extends({
      htmlFor: fieldId,
      required: isRequired,
      requiredMark
    }, props, {
      prefixCls
    })), /* @__PURE__ */ React269.createElement(FormItemInput_default, _extends({}, props, meta, {
      errors: debounceErrors,
      warnings: debounceWarnings,
      prefixCls,
      status: mergedValidateStatus,
      help,
      marginBottom,
      onErrorVisibleChanged
    }), /* @__PURE__ */ React269.createElement(NoStyleItemContext.Provider, {
      value: onSubItemMetaChange
    }, /* @__PURE__ */ React269.createElement(FormItemInputContext.Provider, {
      value: formItemStatusContext
    }, children)))), !!marginBottom && /* @__PURE__ */ React269.createElement("div", {
      className: "".concat(itemPrefixCls, "-margin-offset"),
      style: {
        marginBottom: -marginBottom
      }
    }));
  }

  // node_modules/antd/es/form/FormItem/index.js
  var NAME_SPLIT = "__SPLIT__";
  var ValidateStatuses = tuple("success", "warning", "error", "validating", "");
  var MemoInput = /* @__PURE__ */ React270.memo(function(_ref) {
    var children = _ref.children;
    return children;
  }, function(prev, next) {
    return prev.value === next.value && prev.update === next.update && prev.childProps.length === next.childProps.length && prev.childProps.every(function(value, index2) {
      return value === next.childProps[index2];
    });
  });
  function hasValidName(name) {
    if (name === null) {
      true ? warning_default2(false, "Form.Item", "`null` is passed as `name` property") : void 0;
    }
    return !(name === void 0 || name === null);
  }
  function genEmptyMeta() {
    return {
      errors: [],
      warnings: [],
      touched: false,
      validating: false,
      validated: false,
      name: []
    };
  }
  function InternalFormItem(props) {
    var name = props.name, noStyle = props.noStyle, dependencies = props.dependencies, customizePrefixCls = props.prefixCls, shouldUpdate = props.shouldUpdate, rules2 = props.rules, children = props.children, required4 = props.required, label = props.label, messageVariables = props.messageVariables, _props$trigger = props.trigger, trigger = _props$trigger === void 0 ? "onChange" : _props$trigger, validateTrigger = props.validateTrigger, hidden = props.hidden;
    var _useContext = (0, import_react77.useContext)(ConfigContext), getPrefixCls = _useContext.getPrefixCls;
    var _useContext2 = (0, import_react77.useContext)(FormContext2), formName = _useContext2.name;
    var isRenderProps = typeof children === "function";
    var notifyParentMetaChange = (0, import_react77.useContext)(NoStyleItemContext);
    var _useContext3 = (0, import_react77.useContext)(FieldContext_default), contextValidateTrigger = _useContext3.validateTrigger;
    var mergedValidateTrigger = validateTrigger !== void 0 ? validateTrigger : contextValidateTrigger;
    var hasName = hasValidName(name);
    var prefixCls = getPrefixCls("form", customizePrefixCls);
    var listContext = React270.useContext(ListContext_default);
    var fieldKeyPathRef = React270.useRef();
    var _useFrameState = useFrameState({}), _useFrameState2 = _slicedToArray(_useFrameState, 2), subFieldErrors = _useFrameState2[0], setSubFieldErrors = _useFrameState2[1];
    var _useState = useSafeState(function() {
      return genEmptyMeta();
    }), _useState2 = _slicedToArray(_useState, 2), meta = _useState2[0], setMeta = _useState2[1];
    var onMetaChange = function onMetaChange2(nextMeta) {
      var keyInfo = listContext === null || listContext === void 0 ? void 0 : listContext.getKey(nextMeta.name);
      setMeta(nextMeta.destroy ? genEmptyMeta() : nextMeta, true);
      if (noStyle && notifyParentMetaChange) {
        var namePath = nextMeta.name;
        if (!nextMeta.destroy) {
          if (keyInfo !== void 0) {
            var _keyInfo = _slicedToArray(keyInfo, 2), fieldKey = _keyInfo[0], restPath = _keyInfo[1];
            namePath = [fieldKey].concat(_toConsumableArray(restPath));
            fieldKeyPathRef.current = namePath;
          }
        } else {
          namePath = fieldKeyPathRef.current || namePath;
        }
        notifyParentMetaChange(nextMeta, namePath);
      }
    };
    var onSubItemMetaChange = function onSubItemMetaChange2(subMeta, uniqueKeys) {
      setSubFieldErrors(function(prevSubFieldErrors) {
        var clone2 = _extends({}, prevSubFieldErrors);
        var mergedNamePath = [].concat(_toConsumableArray(subMeta.name.slice(0, -1)), _toConsumableArray(uniqueKeys));
        var mergedNameKey = mergedNamePath.join(NAME_SPLIT);
        if (subMeta.destroy) {
          delete clone2[mergedNameKey];
        } else {
          clone2[mergedNameKey] = subMeta;
        }
        return clone2;
      });
    };
    var _React$useMemo = React270.useMemo(function() {
      var errorList = _toConsumableArray(meta.errors);
      var warningList = _toConsumableArray(meta.warnings);
      Object.values(subFieldErrors).forEach(function(subFieldError) {
        errorList.push.apply(errorList, _toConsumableArray(subFieldError.errors || []));
        warningList.push.apply(warningList, _toConsumableArray(subFieldError.warnings || []));
      });
      return [errorList, warningList];
    }, [subFieldErrors, meta.errors, meta.warnings]), _React$useMemo2 = _slicedToArray(_React$useMemo, 2), mergedErrors = _React$useMemo2[0], mergedWarnings = _React$useMemo2[1];
    var getItemRef = useItemRef();
    function renderLayout(baseChildren, fieldId, isRequired) {
      if (noStyle && !hidden) {
        return baseChildren;
      }
      return /* @__PURE__ */ React270.createElement(ItemHolder, _extends({
        key: "row"
      }, props, {
        prefixCls,
        fieldId,
        isRequired,
        errors: mergedErrors,
        warnings: mergedWarnings,
        meta,
        onSubItemMetaChange
      }), baseChildren);
    }
    if (!hasName && !isRenderProps && !dependencies) {
      return renderLayout(children);
    }
    var variables = {};
    if (typeof label === "string") {
      variables.label = label;
    } else if (name) {
      variables.label = String(name);
    }
    if (messageVariables) {
      variables = _extends(_extends({}, variables), messageVariables);
    }
    return /* @__PURE__ */ React270.createElement(Field_default, _extends({}, props, {
      messageVariables: variables,
      trigger,
      validateTrigger: mergedValidateTrigger,
      onMetaChange
    }), function(control, renderMeta, context2) {
      var mergedName = toArray6(name).length && renderMeta ? renderMeta.name : [];
      var fieldId = getFieldId(mergedName, formName);
      var isRequired = required4 !== void 0 ? required4 : !!(rules2 && rules2.some(function(rule) {
        if (rule && _typeof(rule) === "object" && rule.required && !rule.warningOnly) {
          return true;
        }
        if (typeof rule === "function") {
          var ruleEntity = rule(context2);
          return ruleEntity && ruleEntity.required && !ruleEntity.warningOnly;
        }
        return false;
      }));
      var mergedControl = _extends({}, control);
      var childNode = null;
      true ? warning_default2(!(shouldUpdate && dependencies), "Form.Item", "`shouldUpdate` and `dependencies` shouldn't be used together. See https://u.ant.design/form-deps.") : void 0;
      if (Array.isArray(children) && hasName) {
        true ? warning_default2(false, "Form.Item", "A `Form.Item` with a `name` prop must have a single child element. For information on how to render more complex form items, see https://u.ant.design/complex-form-item.") : void 0;
        childNode = children;
      } else if (isRenderProps && (!(shouldUpdate || dependencies) || hasName)) {
        true ? warning_default2(!!(shouldUpdate || dependencies), "Form.Item", "A `Form.Item` with a render function must have either `shouldUpdate` or `dependencies`.") : void 0;
        true ? warning_default2(!hasName, "Form.Item", "A `Form.Item` with a render function cannot be a field, and thus cannot have a `name` prop.") : void 0;
      } else if (dependencies && !isRenderProps && !hasName) {
        true ? warning_default2(false, "Form.Item", "Must set `name` or use a render function when `dependencies` is set.") : void 0;
      } else if (isValidElement6(children)) {
        true ? warning_default2(children.props.defaultValue === void 0, "Form.Item", "`defaultValue` will not work on controlled Field. You should use `initialValues` of Form instead.") : void 0;
        var childProps = _extends(_extends({}, children.props), mergedControl);
        if (!childProps.id) {
          childProps.id = fieldId;
        }
        if (props.help || mergedErrors.length > 0 || mergedWarnings.length > 0 || props.extra) {
          var describedbyArr = [];
          if (props.help || mergedErrors.length > 0) {
            describedbyArr.push("".concat(fieldId, "_help"));
          }
          if (props.extra) {
            describedbyArr.push("".concat(fieldId, "_extra"));
          }
          childProps["aria-describedby"] = describedbyArr.join(" ");
        }
        if (mergedErrors.length > 0) {
          childProps["aria-invalid"] = "true";
        }
        if (isRequired) {
          childProps["aria-required"] = "true";
        }
        if (supportRef(children)) {
          childProps.ref = getItemRef(mergedName, children);
        }
        var triggers = new Set([].concat(_toConsumableArray(toArray6(trigger)), _toConsumableArray(toArray6(mergedValidateTrigger))));
        triggers.forEach(function(eventName) {
          childProps[eventName] = function() {
            var _a2, _c2;
            var _a, _b, _c;
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }
            (_a = mergedControl[eventName]) === null || _a === void 0 ? void 0 : (_a2 = _a).call.apply(_a2, [mergedControl].concat(args));
            (_c = (_b = children.props)[eventName]) === null || _c === void 0 ? void 0 : (_c2 = _c).call.apply(_c2, [_b].concat(args));
          };
        });
        var watchingChildProps = [childProps["aria-required"], childProps["aria-invalid"], childProps["aria-describedby"]];
        childNode = /* @__PURE__ */ React270.createElement(MemoInput, {
          value: mergedControl[props.valuePropName || "value"],
          update: children,
          childProps: watchingChildProps
        }, cloneElement4(children, childProps));
      } else if (isRenderProps && (shouldUpdate || dependencies) && !hasName) {
        childNode = children(context2);
      } else {
        true ? warning_default2(!mergedName.length, "Form.Item", "`name` is only used for validate React element. If you are using Form.Item as layout display, please remove `name` instead.") : void 0;
        childNode = children;
      }
      return renderLayout(childNode, fieldId, isRequired);
    });
  }
  var FormItem = InternalFormItem;
  FormItem.useStatus = useFormItemStatus_default;
  var FormItem_default = FormItem;

  // node_modules/antd/es/form/FormList.js
  var React271 = __toESM(require_react());
  var __rest37 = function(s2, e3) {
    var t4 = {};
    for (var p2 in s2)
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t4[p2] = s2[p2];
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t4[p2[i3]] = s2[p2[i3]];
      }
    return t4;
  };
  var FormList = function FormList2(_a) {
    var customizePrefixCls = _a.prefixCls, children = _a.children, props = __rest37(_a, ["prefixCls", "children"]);
    true ? warning_default2(!!props.name, "Form.List", "Miss `name` prop.") : void 0;
    var _React$useContext = React271.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls;
    var prefixCls = getPrefixCls("form", customizePrefixCls);
    var contextValue = React271.useMemo(function() {
      return {
        prefixCls,
        status: "error"
      };
    }, [prefixCls]);
    return /* @__PURE__ */ React271.createElement(List_default2, _extends({}, props), function(fields, operation, meta) {
      return /* @__PURE__ */ React271.createElement(FormItemPrefixContext.Provider, {
        value: contextValue
      }, children(fields.map(function(field) {
        return _extends(_extends({}, field), {
          fieldKey: field.key
        });
      }), operation, {
        errors: meta.errors,
        warnings: meta.warnings
      }));
    });
  };
  var FormList_default = FormList;

  // node_modules/antd/es/form/hooks/useFormInstance.js
  var import_react78 = __toESM(require_react());
  function useFormInstance() {
    var _useContext = (0, import_react78.useContext)(FormContext2), form = _useContext.form;
    return form;
  }

  // node_modules/antd/es/form/index.js
  var Form5 = Form_default2;
  Form5.Item = FormItem_default;
  Form5.List = FormList_default;
  Form5.ErrorList = ErrorList;
  Form5.useForm = useForm2;
  Form5.useFormInstance = useFormInstance;
  Form5.useWatch = useWatch_default;
  Form5.Provider = FormProvider3;
  Form5.create = function() {
    true ? warning_default2(false, "Form", "antd v4 removed `Form.create`. Please remove or use `@ant-design/compatible` instead.") : void 0;
  };
  var form_default = Form5;

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/EyeOutlined.js
  var React272 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/EyeOutlined.js
  var EyeOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M942.2 486.2C847.4 286.5 704.1 186 512 186c-192.2 0-335.4 100.5-430.2 300.3a60.3 60.3 0 000 51.5C176.6 737.5 319.9 838 512 838c192.2 0 335.4-100.5 430.2-300.3 7.7-16.2 7.7-35 0-51.5zM512 766c-161.3 0-279.4-81.8-362.7-254C232.6 339.8 350.7 258 512 258c161.3 0 279.4 81.8 362.7 254C791.5 684.2 673.4 766 512 766zm-4-430c-97.2 0-176 78.8-176 176s78.8 176 176 176 176-78.8 176-176-78.8-176-176-176zm0 288c-61.9 0-112-50.1-112-112s50.1-112 112-112 112 50.1 112 112-50.1 112-112 112z" } }] }, "name": "eye", "theme": "outlined" };
  var EyeOutlined_default = EyeOutlined;

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/EyeOutlined.js
  var EyeOutlined2 = function EyeOutlined3(props, ref) {
    return /* @__PURE__ */ React272.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: EyeOutlined_default
    }));
  };
  EyeOutlined2.displayName = "EyeOutlined";
  var EyeOutlined_default2 = /* @__PURE__ */ React272.forwardRef(EyeOutlined2);

  // node_modules/rc-image/es/Image.js
  var React283 = __toESM(require_react());
  var import_react85 = __toESM(require_react());
  var import_classnames109 = __toESM(require_classnames());

  // node_modules/rc-util/es/Dom/css.js
  function getClientSize() {
    var width = document.documentElement.clientWidth;
    var height = window.innerHeight || document.documentElement.clientHeight;
    return {
      width,
      height
    };
  }
  function getOffset3(node) {
    var box = node.getBoundingClientRect();
    var docElem = document.documentElement;
    return {
      left: box.left + (window.pageXOffset || docElem.scrollLeft) - (docElem.clientLeft || document.body.clientLeft || 0),
      top: box.top + (window.pageYOffset || docElem.scrollTop) - (docElem.clientTop || document.body.clientTop || 0)
    };
  }

  // node_modules/rc-image/es/Preview.js
  var import_react84 = __toESM(require_react());

  // node_modules/rc-dialog/es/DialogWrap.js
  var React279 = __toESM(require_react());

  // node_modules/rc-dialog/es/Dialog/index.js
  var React278 = __toESM(require_react());
  var import_react81 = __toESM(require_react());
  var import_classnames106 = __toESM(require_classnames());

  // node_modules/rc-util/es/hooks/useId.js
  var React273 = __toESM(require_react());
  function getUseId() {
    var fullClone2 = _objectSpread2({}, React273);
    return fullClone2.useId;
  }
  var uuid4 = 0;
  function useId2(id2) {
    var _React$useState = React273.useState("ssr-id"), _React$useState2 = _slicedToArray(_React$useState, 2), innerId = _React$useState2[0], setInnerId = _React$useState2[1];
    var useOriginId = getUseId();
    var reactNativeId = useOriginId === null || useOriginId === void 0 ? void 0 : useOriginId();
    React273.useEffect(function() {
      if (!useOriginId) {
        var nextId = uuid4;
        uuid4 += 1;
        setInnerId("rc_unique_".concat(nextId));
      }
    }, []);
    if (id2) {
      return id2;
    }
    if (false) {
      return "test-id";
    }
    return reactNativeId || innerId;
  }

  // node_modules/rc-dialog/es/Dialog/Mask.js
  var React274 = __toESM(require_react());
  var import_classnames103 = __toESM(require_classnames());
  function Mask2(props) {
    var prefixCls = props.prefixCls, style3 = props.style, visible = props.visible, maskProps = props.maskProps, motionName = props.motionName;
    return /* @__PURE__ */ React274.createElement(es_default3, {
      key: "mask",
      visible,
      motionName,
      leavedClassName: "".concat(prefixCls, "-mask-hidden")
    }, function(_ref, ref) {
      var motionClassName = _ref.className, motionStyle = _ref.style;
      return /* @__PURE__ */ React274.createElement("div", _extends({
        ref,
        style: _objectSpread2(_objectSpread2({}, motionStyle), style3),
        className: (0, import_classnames103.default)("".concat(prefixCls, "-mask"), motionClassName)
      }, maskProps));
    });
  }

  // node_modules/rc-dialog/es/util.js
  function getMotionName(prefixCls, transitionName2, animationName) {
    var motionName = transitionName2;
    if (!motionName && animationName) {
      motionName = "".concat(prefixCls, "-").concat(animationName);
    }
    return motionName;
  }
  function getScroll3(w2, top) {
    var ret = w2["page".concat(top ? "Y" : "X", "Offset")];
    var method4 = "scroll".concat(top ? "Top" : "Left");
    if (typeof ret !== "number") {
      var d2 = w2.document;
      ret = d2.documentElement[method4];
      if (typeof ret !== "number") {
        ret = d2.body[method4];
      }
    }
    return ret;
  }
  function offset2(el) {
    var rect = el.getBoundingClientRect();
    var pos = {
      left: rect.left,
      top: rect.top
    };
    var doc = el.ownerDocument;
    var w2 = doc.defaultView || doc.parentWindow;
    pos.left += getScroll3(w2);
    pos.top += getScroll3(w2, true);
    return pos;
  }

  // node_modules/rc-dialog/es/Dialog/Content/index.js
  var React277 = __toESM(require_react());
  var import_react80 = __toESM(require_react());
  var import_classnames105 = __toESM(require_classnames());

  // node_modules/rc-dialog/es/Dialog/Content/Panel.js
  var import_react79 = __toESM(require_react());
  var import_classnames104 = __toESM(require_classnames());

  // node_modules/rc-dialog/es/Dialog/Content/MemoChildren.js
  var React275 = __toESM(require_react());
  var MemoChildren_default = /* @__PURE__ */ React275.memo(function(_ref) {
    var children = _ref.children;
    return children;
  }, function(_24, _ref2) {
    var shouldUpdate = _ref2.shouldUpdate;
    return !shouldUpdate;
  });

  // node_modules/rc-dialog/es/Dialog/Content/Panel.js
  var sentinelStyle = {
    width: 0,
    height: 0,
    overflow: "hidden",
    outline: "none"
  };
  var Panel = /* @__PURE__ */ import_react79.default.forwardRef(function(props, ref) {
    var prefixCls = props.prefixCls, className = props.className, style3 = props.style, title = props.title, ariaId = props.ariaId, footer = props.footer, closable = props.closable, closeIcon = props.closeIcon, onClose2 = props.onClose, children = props.children, bodyStyle = props.bodyStyle, bodyProps = props.bodyProps, modalRender = props.modalRender, onMouseDown = props.onMouseDown, onMouseUp = props.onMouseUp, holderRef = props.holderRef, visible = props.visible, forceRender = props.forceRender, width = props.width, height = props.height;
    var sentinelStartRef = (0, import_react79.useRef)();
    var sentinelEndRef = (0, import_react79.useRef)();
    import_react79.default.useImperativeHandle(ref, function() {
      return {
        focus: function focus() {
          var _sentinelStartRef$cur;
          (_sentinelStartRef$cur = sentinelStartRef.current) === null || _sentinelStartRef$cur === void 0 ? void 0 : _sentinelStartRef$cur.focus();
        },
        changeActive: function changeActive(next) {
          var _document = document, activeElement = _document.activeElement;
          if (next && activeElement === sentinelEndRef.current) {
            sentinelStartRef.current.focus();
          } else if (!next && activeElement === sentinelStartRef.current) {
            sentinelEndRef.current.focus();
          }
        }
      };
    });
    var contentStyle = {};
    if (width !== void 0) {
      contentStyle.width = width;
    }
    if (height !== void 0) {
      contentStyle.height = height;
    }
    var footerNode;
    if (footer) {
      footerNode = /* @__PURE__ */ import_react79.default.createElement("div", {
        className: "".concat(prefixCls, "-footer")
      }, footer);
    }
    var headerNode;
    if (title) {
      headerNode = /* @__PURE__ */ import_react79.default.createElement("div", {
        className: "".concat(prefixCls, "-header")
      }, /* @__PURE__ */ import_react79.default.createElement("div", {
        className: "".concat(prefixCls, "-title"),
        id: ariaId
      }, title));
    }
    var closer;
    if (closable) {
      closer = /* @__PURE__ */ import_react79.default.createElement("button", {
        type: "button",
        onClick: onClose2,
        "aria-label": "Close",
        className: "".concat(prefixCls, "-close")
      }, closeIcon || /* @__PURE__ */ import_react79.default.createElement("span", {
        className: "".concat(prefixCls, "-close-x")
      }));
    }
    var content = /* @__PURE__ */ import_react79.default.createElement("div", {
      className: "".concat(prefixCls, "-content")
    }, closer, headerNode, /* @__PURE__ */ import_react79.default.createElement("div", _extends({
      className: "".concat(prefixCls, "-body"),
      style: bodyStyle
    }, bodyProps), children), footerNode);
    return /* @__PURE__ */ import_react79.default.createElement("div", {
      key: "dialog-element",
      role: "dialog",
      "aria-labelledby": title ? ariaId : null,
      "aria-modal": "true",
      ref: holderRef,
      style: _objectSpread2(_objectSpread2({}, style3), contentStyle),
      className: (0, import_classnames104.default)(prefixCls, className),
      onMouseDown,
      onMouseUp
    }, /* @__PURE__ */ import_react79.default.createElement("div", {
      tabIndex: 0,
      ref: sentinelStartRef,
      style: sentinelStyle,
      "aria-hidden": "true"
    }), /* @__PURE__ */ import_react79.default.createElement(MemoChildren_default, {
      shouldUpdate: visible || forceRender
    }, modalRender ? modalRender(content) : content), /* @__PURE__ */ import_react79.default.createElement("div", {
      tabIndex: 0,
      ref: sentinelEndRef,
      style: sentinelStyle,
      "aria-hidden": "true"
    }));
  });
  if (true) {
    Panel.displayName = "Panel";
  }
  var Panel_default = Panel;

  // node_modules/rc-dialog/es/Dialog/Content/index.js
  var Content2 = /* @__PURE__ */ React277.forwardRef(function(props, ref) {
    var prefixCls = props.prefixCls, title = props.title, style3 = props.style, className = props.className, visible = props.visible, forceRender = props.forceRender, destroyOnClose = props.destroyOnClose, motionName = props.motionName, ariaId = props.ariaId, onVisibleChanged = props.onVisibleChanged, mousePosition = props.mousePosition;
    var dialogRef = (0, import_react80.useRef)();
    var _React$useState = React277.useState(), _React$useState2 = _slicedToArray(_React$useState, 2), transformOrigin = _React$useState2[0], setTransformOrigin = _React$useState2[1];
    var contentStyle = {};
    if (transformOrigin) {
      contentStyle.transformOrigin = transformOrigin;
    }
    function onPrepare() {
      var elementOffset = offset2(dialogRef.current);
      setTransformOrigin(mousePosition ? "".concat(mousePosition.x - elementOffset.left, "px ").concat(mousePosition.y - elementOffset.top, "px") : "");
    }
    return /* @__PURE__ */ React277.createElement(es_default3, {
      visible,
      onVisibleChanged,
      onAppearPrepare: onPrepare,
      onEnterPrepare: onPrepare,
      forceRender,
      motionName,
      removeOnLeave: destroyOnClose,
      ref: dialogRef
    }, function(_ref, motionRef) {
      var motionClassName = _ref.className, motionStyle = _ref.style;
      return /* @__PURE__ */ React277.createElement(Panel_default, _extends({}, props, {
        ref,
        title,
        ariaId,
        prefixCls,
        holderRef: motionRef,
        style: _objectSpread2(_objectSpread2(_objectSpread2({}, motionStyle), style3), contentStyle),
        className: (0, import_classnames105.default)(className, motionClassName)
      }));
    });
  });
  Content2.displayName = "Content";
  var Content_default = Content2;

  // node_modules/rc-dialog/es/Dialog/index.js
  function Dialog(props) {
    var _props$prefixCls = props.prefixCls, prefixCls = _props$prefixCls === void 0 ? "rc-dialog" : _props$prefixCls, zIndex = props.zIndex, _props$visible = props.visible, visible = _props$visible === void 0 ? false : _props$visible, _props$keyboard = props.keyboard, keyboard = _props$keyboard === void 0 ? true : _props$keyboard, _props$focusTriggerAf = props.focusTriggerAfterClose, focusTriggerAfterClose = _props$focusTriggerAf === void 0 ? true : _props$focusTriggerAf, wrapStyle = props.wrapStyle, wrapClassName = props.wrapClassName, wrapProps = props.wrapProps, onClose2 = props.onClose, afterClose = props.afterClose, transitionName2 = props.transitionName, animation = props.animation, _props$closable = props.closable, closable = _props$closable === void 0 ? true : _props$closable, _props$mask = props.mask, mask = _props$mask === void 0 ? true : _props$mask, maskTransitionName = props.maskTransitionName, maskAnimation = props.maskAnimation, _props$maskClosable = props.maskClosable, maskClosable = _props$maskClosable === void 0 ? true : _props$maskClosable, maskStyle = props.maskStyle, maskProps = props.maskProps, rootClassName = props.rootClassName;
    var lastOutSideActiveElementRef = (0, import_react81.useRef)();
    var wrapperRef = (0, import_react81.useRef)();
    var contentRef = (0, import_react81.useRef)();
    var _React$useState = React278.useState(visible), _React$useState2 = _slicedToArray(_React$useState, 2), animatedVisible = _React$useState2[0], setAnimatedVisible = _React$useState2[1];
    var ariaId = useId2();
    function saveLastOutSideActiveElementRef() {
      if (!contains(wrapperRef.current, document.activeElement)) {
        lastOutSideActiveElementRef.current = document.activeElement;
      }
    }
    function focusDialogContent() {
      if (!contains(wrapperRef.current, document.activeElement)) {
        var _contentRef$current;
        (_contentRef$current = contentRef.current) === null || _contentRef$current === void 0 ? void 0 : _contentRef$current.focus();
      }
    }
    function onDialogVisibleChanged(newVisible) {
      if (newVisible) {
        focusDialogContent();
      } else {
        setAnimatedVisible(false);
        if (mask && lastOutSideActiveElementRef.current && focusTriggerAfterClose) {
          try {
            lastOutSideActiveElementRef.current.focus({
              preventScroll: true
            });
          } catch (e3) {
          }
          lastOutSideActiveElementRef.current = null;
        }
        if (animatedVisible) {
          afterClose === null || afterClose === void 0 ? void 0 : afterClose();
        }
      }
    }
    function onInternalClose(e3) {
      onClose2 === null || onClose2 === void 0 ? void 0 : onClose2(e3);
    }
    var contentClickRef = (0, import_react81.useRef)(false);
    var contentTimeoutRef = (0, import_react81.useRef)();
    var onContentMouseDown = function onContentMouseDown2() {
      clearTimeout(contentTimeoutRef.current);
      contentClickRef.current = true;
    };
    var onContentMouseUp = function onContentMouseUp2() {
      contentTimeoutRef.current = setTimeout(function() {
        contentClickRef.current = false;
      });
    };
    var onWrapperClick = null;
    if (maskClosable) {
      onWrapperClick = function onWrapperClick2(e3) {
        if (contentClickRef.current) {
          contentClickRef.current = false;
        } else if (wrapperRef.current === e3.target) {
          onInternalClose(e3);
        }
      };
    }
    function onWrapperKeyDown(e3) {
      if (keyboard && e3.keyCode === KeyCode_default.ESC) {
        e3.stopPropagation();
        onInternalClose(e3);
        return;
      }
      if (visible) {
        if (e3.keyCode === KeyCode_default.TAB) {
          contentRef.current.changeActive(!e3.shiftKey);
        }
      }
    }
    (0, import_react81.useEffect)(function() {
      if (visible) {
        setAnimatedVisible(true);
        saveLastOutSideActiveElementRef();
      }
    }, [visible]);
    (0, import_react81.useEffect)(function() {
      return function() {
        clearTimeout(contentTimeoutRef.current);
      };
    }, []);
    return /* @__PURE__ */ React278.createElement("div", _extends({
      className: (0, import_classnames106.default)("".concat(prefixCls, "-root"), rootClassName)
    }, pickAttrs(props, {
      data: true
    })), /* @__PURE__ */ React278.createElement(Mask2, {
      prefixCls,
      visible: mask && visible,
      motionName: getMotionName(prefixCls, maskTransitionName, maskAnimation),
      style: _objectSpread2({
        zIndex
      }, maskStyle),
      maskProps
    }), /* @__PURE__ */ React278.createElement("div", _extends({
      tabIndex: -1,
      onKeyDown: onWrapperKeyDown,
      className: (0, import_classnames106.default)("".concat(prefixCls, "-wrap"), wrapClassName),
      ref: wrapperRef,
      onClick: onWrapperClick,
      style: _objectSpread2(_objectSpread2({
        zIndex
      }, wrapStyle), {}, {
        display: !animatedVisible ? "none" : null
      })
    }, wrapProps), /* @__PURE__ */ React278.createElement(Content_default, _extends({}, props, {
      onMouseDown: onContentMouseDown,
      onMouseUp: onContentMouseUp,
      ref: contentRef,
      closable,
      ariaId,
      prefixCls,
      visible: visible && animatedVisible,
      onClose: onInternalClose,
      onVisibleChanged: onDialogVisibleChanged,
      motionName: getMotionName(prefixCls, transitionName2, animation)
    }))));
  }

  // node_modules/rc-dialog/es/DialogWrap.js
  var DialogWrap = function DialogWrap2(props) {
    var visible = props.visible, getContainer3 = props.getContainer, forceRender = props.forceRender, _props$destroyOnClose = props.destroyOnClose, destroyOnClose = _props$destroyOnClose === void 0 ? false : _props$destroyOnClose, _afterClose = props.afterClose;
    var _React$useState = React279.useState(visible), _React$useState2 = _slicedToArray(_React$useState, 2), animatedVisible = _React$useState2[0], setAnimatedVisible = _React$useState2[1];
    React279.useEffect(function() {
      if (visible) {
        setAnimatedVisible(true);
      }
    }, [visible]);
    if (!forceRender && destroyOnClose && !animatedVisible) {
      return null;
    }
    return /* @__PURE__ */ React279.createElement(es_default18, {
      open: visible || forceRender || animatedVisible,
      autoDestroy: false,
      getContainer: getContainer3,
      autoLock: visible || animatedVisible
    }, /* @__PURE__ */ React279.createElement(Dialog, _extends({}, props, {
      destroyOnClose,
      afterClose: function afterClose() {
        _afterClose === null || _afterClose === void 0 ? void 0 : _afterClose();
        setAnimatedVisible(false);
      }
    })));
  };
  DialogWrap.displayName = "Dialog";
  var DialogWrap_default = DialogWrap;

  // node_modules/rc-dialog/es/index.js
  var es_default20 = DialogWrap_default;

  // node_modules/rc-image/es/Preview.js
  var import_classnames108 = __toESM(require_classnames());

  // node_modules/rc-image/es/PreviewGroup.js
  var React280 = __toESM(require_react());
  var import_react82 = __toESM(require_react());
  var _excluded42 = ["visible", "onVisibleChange", "getContainer", "current", "countRender"];
  var context = /* @__PURE__ */ React280.createContext({
    previewUrls: /* @__PURE__ */ new Map(),
    setPreviewUrls: function setPreviewUrls() {
      return null;
    },
    current: null,
    setCurrent: function setCurrent() {
      return null;
    },
    setShowPreview: function setShowPreview() {
      return null;
    },
    setMousePosition: function setMousePosition() {
      return null;
    },
    registerImage: function registerImage() {
      return function() {
        return null;
      };
    },
    rootClassName: ""
  });
  var Provider2 = context.Provider;
  var Group = function Group2(_ref) {
    var _ref$previewPrefixCls = _ref.previewPrefixCls, previewPrefixCls = _ref$previewPrefixCls === void 0 ? "rc-image-preview" : _ref$previewPrefixCls, children = _ref.children, _ref$icons = _ref.icons, icons2 = _ref$icons === void 0 ? {} : _ref$icons, preview = _ref.preview;
    var _ref2 = _typeof(preview) === "object" ? preview : {}, _ref2$visible = _ref2.visible, previewVisible = _ref2$visible === void 0 ? void 0 : _ref2$visible, _ref2$onVisibleChange = _ref2.onVisibleChange, onPreviewVisibleChange = _ref2$onVisibleChange === void 0 ? void 0 : _ref2$onVisibleChange, _ref2$getContainer = _ref2.getContainer, getContainer3 = _ref2$getContainer === void 0 ? void 0 : _ref2$getContainer, _ref2$current = _ref2.current, currentIndex = _ref2$current === void 0 ? 0 : _ref2$current, _ref2$countRender = _ref2.countRender, countRender = _ref2$countRender === void 0 ? void 0 : _ref2$countRender, dialogProps = _objectWithoutProperties(_ref2, _excluded42);
    var _useState = (0, import_react82.useState)(/* @__PURE__ */ new Map()), _useState2 = _slicedToArray(_useState, 2), previewUrls = _useState2[0], setPreviewUrls2 = _useState2[1];
    var _useState3 = (0, import_react82.useState)(), _useState4 = _slicedToArray(_useState3, 2), current = _useState4[0], setCurrent2 = _useState4[1];
    var _useMergedState = useMergedState(!!previewVisible, {
      value: previewVisible,
      onChange: onPreviewVisibleChange
    }), _useMergedState2 = _slicedToArray(_useMergedState, 2), isShowPreview = _useMergedState2[0], setShowPreview2 = _useMergedState2[1];
    var _useState5 = (0, import_react82.useState)(null), _useState6 = _slicedToArray(_useState5, 2), mousePosition = _useState6[0], setMousePosition2 = _useState6[1];
    var isControlled = previewVisible !== void 0;
    var previewUrlsKeys = Array.from(previewUrls.keys());
    var currentControlledKey = previewUrlsKeys[currentIndex];
    var canPreviewUrls = new Map(Array.from(previewUrls).filter(function(_ref3) {
      var _ref4 = _slicedToArray(_ref3, 2), canPreview = _ref4[1].canPreview;
      return !!canPreview;
    }).map(function(_ref5) {
      var _ref6 = _slicedToArray(_ref5, 2), id2 = _ref6[0], url2 = _ref6[1].url;
      return [id2, url2];
    }));
    var registerImage2 = function registerImage3(id2, url2) {
      var canPreview = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
      var unRegister = function unRegister2() {
        setPreviewUrls2(function(oldPreviewUrls) {
          var clonePreviewUrls = new Map(oldPreviewUrls);
          var deleteResult = clonePreviewUrls.delete(id2);
          return deleteResult ? clonePreviewUrls : oldPreviewUrls;
        });
      };
      setPreviewUrls2(function(oldPreviewUrls) {
        return new Map(oldPreviewUrls).set(id2, {
          url: url2,
          canPreview
        });
      });
      return unRegister;
    };
    var onPreviewClose = function onPreviewClose2(e3) {
      e3.stopPropagation();
      setShowPreview2(false);
      setMousePosition2(null);
    };
    React280.useEffect(function() {
      setCurrent2(currentControlledKey);
    }, [currentControlledKey]);
    React280.useEffect(function() {
      if (!isShowPreview && isControlled) {
        setCurrent2(currentControlledKey);
      }
    }, [currentControlledKey, isControlled, isShowPreview]);
    return /* @__PURE__ */ React280.createElement(Provider2, {
      value: {
        isPreviewGroup: true,
        previewUrls: canPreviewUrls,
        setPreviewUrls: setPreviewUrls2,
        current,
        setCurrent: setCurrent2,
        setShowPreview: setShowPreview2,
        setMousePosition: setMousePosition2,
        registerImage: registerImage2
      }
    }, children, /* @__PURE__ */ React280.createElement(Preview_default, _extends({
      "aria-hidden": !isShowPreview,
      visible: isShowPreview,
      prefixCls: previewPrefixCls,
      onClose: onPreviewClose,
      mousePosition,
      src: canPreviewUrls.get(current),
      icons: icons2,
      getContainer: getContainer3,
      countRender
    }, dialogProps)));
  };
  var PreviewGroup_default = Group;

  // node_modules/rc-image/es/Operations.js
  var React281 = __toESM(require_react());
  var import_classnames107 = __toESM(require_classnames());

  // node_modules/rc-image/es/previewConfig.js
  var MIN_SCALE = 1;
  var MAX_SCALE = 50;
  var BASE_SCALE_RATIO = 1;
  var WHEEL_MAX_SCALE_RATIO = 0.2;

  // node_modules/rc-image/es/Operations.js
  var Operations = function Operations2(props) {
    var _countRender;
    var visible = props.visible, maskTransitionName = props.maskTransitionName, getContainer3 = props.getContainer, prefixCls = props.prefixCls, rootClassName = props.rootClassName, icons2 = props.icons, countRender = props.countRender, showSwitch = props.showSwitch, showProgress = props.showProgress, current = props.current, count = props.count, scale = props.scale, onSwitchLeft = props.onSwitchLeft, onSwitchRight = props.onSwitchRight, onClose2 = props.onClose, onZoomIn = props.onZoomIn, onZoomOut = props.onZoomOut, onRotateRight = props.onRotateRight, onRotateLeft = props.onRotateLeft;
    var rotateLeft = icons2.rotateLeft, rotateRight = icons2.rotateRight, zoomIn = icons2.zoomIn, zoomOut = icons2.zoomOut, close2 = icons2.close, left = icons2.left, right = icons2.right;
    var toolClassName = "".concat(prefixCls, "-operations-operation");
    var iconClassName = "".concat(prefixCls, "-operations-icon");
    var tools = [{
      icon: close2,
      onClick: onClose2,
      type: "close"
    }, {
      icon: zoomIn,
      onClick: onZoomIn,
      type: "zoomIn",
      disabled: scale === MAX_SCALE
    }, {
      icon: zoomOut,
      onClick: onZoomOut,
      type: "zoomOut",
      disabled: scale === MIN_SCALE
    }, {
      icon: rotateRight,
      onClick: onRotateRight,
      type: "rotateRight"
    }, {
      icon: rotateLeft,
      onClick: onRotateLeft,
      type: "rotateLeft"
    }];
    var operations = /* @__PURE__ */ React281.createElement(React281.Fragment, null, showSwitch && /* @__PURE__ */ React281.createElement(React281.Fragment, null, /* @__PURE__ */ React281.createElement("div", {
      className: (0, import_classnames107.default)("".concat(prefixCls, "-switch-left"), _defineProperty({}, "".concat(prefixCls, "-switch-left-disabled"), current === 0)),
      onClick: onSwitchLeft
    }, left), /* @__PURE__ */ React281.createElement("div", {
      className: (0, import_classnames107.default)("".concat(prefixCls, "-switch-right"), _defineProperty({}, "".concat(prefixCls, "-switch-right-disabled"), current === count - 1)),
      onClick: onSwitchRight
    }, right)), /* @__PURE__ */ React281.createElement("ul", {
      className: "".concat(prefixCls, "-operations")
    }, showProgress && /* @__PURE__ */ React281.createElement("li", {
      className: "".concat(prefixCls, "-operations-progress")
    }, (_countRender = countRender === null || countRender === void 0 ? void 0 : countRender(current + 1, count)) !== null && _countRender !== void 0 ? _countRender : "".concat(current + 1, " / ").concat(count)), tools.map(function(_ref) {
      var _classnames3;
      var icon = _ref.icon, onClick = _ref.onClick, type4 = _ref.type, disabled = _ref.disabled;
      return /* @__PURE__ */ React281.createElement("li", {
        className: (0, import_classnames107.default)(toolClassName, (_classnames3 = {}, _defineProperty(_classnames3, "".concat(prefixCls, "-operations-operation-").concat(type4), true), _defineProperty(_classnames3, "".concat(prefixCls, "-operations-operation-disabled"), !!disabled), _classnames3)),
        onClick,
        key: type4
      }, /* @__PURE__ */ React281.isValidElement(icon) ? /* @__PURE__ */ React281.cloneElement(icon, {
        className: iconClassName
      }) : icon);
    })));
    return /* @__PURE__ */ React281.createElement(es_default3, {
      visible,
      motionName: maskTransitionName
    }, function(_ref2) {
      var className = _ref2.className, style3 = _ref2.style;
      return /* @__PURE__ */ React281.createElement(es_default18, {
        open: true,
        getContainer: getContainer3 !== null && getContainer3 !== void 0 ? getContainer3 : document.body
      }, /* @__PURE__ */ React281.createElement("div", {
        className: (0, import_classnames107.default)("".concat(prefixCls, "-operations-wrapper"), className, rootClassName),
        style: style3
      }, operations));
    });
  };
  var Operations_default = Operations;

  // node_modules/rc-image/es/hooks/useImageTransform.js
  var import_react83 = __toESM(require_react());
  var initialTransform = {
    x: 0,
    y: 0,
    rotate: 0,
    scale: 1
  };
  function useImageTransform(imgRef) {
    var frame = (0, import_react83.useRef)(null);
    var queue = (0, import_react83.useRef)([]);
    var _useState = (0, import_react83.useState)(initialTransform), _useState2 = _slicedToArray(_useState, 2), transform = _useState2[0], setTransform2 = _useState2[1];
    var resetTransform = function resetTransform2() {
      setTransform2(initialTransform);
    };
    var updateTransform = function updateTransform2(newTransform) {
      if (frame.current === null) {
        queue.current = [];
        frame.current = raf_default(function() {
          setTransform2(function(preState) {
            var memoState = preState;
            queue.current.forEach(function(queueState) {
              memoState = _objectSpread2(_objectSpread2({}, memoState), queueState);
            });
            frame.current = null;
            return memoState;
          });
        });
      }
      queue.current.push(_objectSpread2(_objectSpread2({}, transform), newTransform));
    };
    var dispatchZoonChange = function dispatchZoonChange2(ratio, clientX, clientY) {
      var _imgRef$current = imgRef.current, width = _imgRef$current.width, height = _imgRef$current.height, offsetWidth = _imgRef$current.offsetWidth, offsetHeight = _imgRef$current.offsetHeight, offsetLeft = _imgRef$current.offsetLeft, offsetTop = _imgRef$current.offsetTop;
      var newRatio = ratio;
      var newScale = transform.scale * ratio;
      if (newScale > MAX_SCALE) {
        newRatio = MAX_SCALE / transform.scale;
        newScale = MAX_SCALE;
      } else if (newScale < MIN_SCALE) {
        newRatio = MIN_SCALE / transform.scale;
        newScale = MIN_SCALE;
      }
      var mergedClientX = clientX !== null && clientX !== void 0 ? clientX : innerWidth / 2;
      var mergedClientY = clientY !== null && clientY !== void 0 ? clientY : innerHeight / 2;
      var diffRatio = newRatio - 1;
      var diffImgX = diffRatio * width * 0.5;
      var diffImgY = diffRatio * height * 0.5;
      var diffOffsetLeft = diffRatio * (mergedClientX - transform.x - offsetLeft);
      var diffOffsetTop = diffRatio * (mergedClientY - transform.y - offsetTop);
      var newX = transform.x - (diffOffsetLeft - diffImgX);
      var newY = transform.y - (diffOffsetTop - diffImgY);
      if (ratio < 1 && newScale === 1) {
        var mergedWidth = offsetWidth * newScale;
        var mergedHeight = offsetHeight * newScale;
        var _getClientSize = getClientSize(), clientWidth = _getClientSize.width, clientHeight = _getClientSize.height;
        if (mergedWidth <= clientWidth && mergedHeight <= clientHeight) {
          newX = 0;
          newY = 0;
        }
      }
      updateTransform({
        x: newX,
        y: newY,
        scale: newScale
      });
    };
    return {
      transform,
      resetTransform,
      updateTransform,
      dispatchZoonChange
    };
  }

  // node_modules/rc-image/es/getFixScaleEleTransPosition.js
  function fixPoint(key2, start, width, clientWidth) {
    var startAddWidth = start + width;
    var offsetStart = (width - clientWidth) / 2;
    if (width > clientWidth) {
      if (start > 0) {
        return _defineProperty({}, key2, offsetStart);
      }
      if (start < 0 && startAddWidth < clientWidth) {
        return _defineProperty({}, key2, -offsetStart);
      }
    } else if (start < 0 || startAddWidth > clientWidth) {
      return _defineProperty({}, key2, start < 0 ? offsetStart : -offsetStart);
    }
    return {};
  }
  function getFixScaleEleTransPosition(width, height, left, top) {
    var _getClientSize = getClientSize(), clientWidth = _getClientSize.width, clientHeight = _getClientSize.height;
    var fixPos = null;
    if (width <= clientWidth && height <= clientHeight) {
      fixPos = {
        x: 0,
        y: 0
      };
    } else if (width > clientWidth || height > clientHeight) {
      fixPos = _objectSpread2(_objectSpread2({}, fixPoint("x", left, width, clientWidth)), fixPoint("y", top, height, clientHeight));
    }
    return fixPos;
  }

  // node_modules/rc-image/es/Preview.js
  var _excluded43 = ["prefixCls", "src", "alt", "onClose", "afterClose", "visible", "icons", "rootClassName", "getContainer", "countRender", "scaleStep", "transitionName", "maskTransitionName"];
  var Preview = function Preview2(props) {
    var prefixCls = props.prefixCls, src = props.src, alt = props.alt, onClose2 = props.onClose, afterClose = props.afterClose, visible = props.visible, _props$icons = props.icons, icons2 = _props$icons === void 0 ? {} : _props$icons, rootClassName = props.rootClassName, getContainer3 = props.getContainer, countRender = props.countRender, _props$scaleStep = props.scaleStep, scaleStep = _props$scaleStep === void 0 ? 0.5 : _props$scaleStep, _props$transitionName = props.transitionName, transitionName2 = _props$transitionName === void 0 ? "zoom" : _props$transitionName, _props$maskTransition = props.maskTransitionName, maskTransitionName = _props$maskTransition === void 0 ? "fade" : _props$maskTransition, restProps = _objectWithoutProperties(props, _excluded43);
    var imgRef = (0, import_react84.useRef)();
    var downPositionRef = (0, import_react84.useRef)({
      deltaX: 0,
      deltaY: 0,
      transformX: 0,
      transformY: 0
    });
    var _useState = (0, import_react84.useState)(false), _useState2 = _slicedToArray(_useState, 2), isMoving = _useState2[0], setMoving = _useState2[1];
    var _useContext = (0, import_react84.useContext)(context), previewUrls = _useContext.previewUrls, current = _useContext.current, isPreviewGroup = _useContext.isPreviewGroup, setCurrent2 = _useContext.setCurrent;
    var previewGroupCount = previewUrls.size;
    var previewUrlsKeys = Array.from(previewUrls.keys());
    var currentPreviewIndex = previewUrlsKeys.indexOf(current);
    var combinationSrc = isPreviewGroup ? previewUrls.get(current) : src;
    var showLeftOrRightSwitches = isPreviewGroup && previewGroupCount > 1;
    var showOperationsProgress = isPreviewGroup && previewGroupCount >= 1;
    var _useImageTransform = useImageTransform(imgRef), transform = _useImageTransform.transform, resetTransform = _useImageTransform.resetTransform, updateTransform = _useImageTransform.updateTransform, dispatchZoonChange = _useImageTransform.dispatchZoonChange;
    var rotate = transform.rotate, scale = transform.scale;
    var wrapClassName = (0, import_classnames108.default)(_defineProperty({}, "".concat(prefixCls, "-moving"), isMoving));
    var onAfterClose = function onAfterClose2() {
      resetTransform();
    };
    var onZoomIn = function onZoomIn2() {
      dispatchZoonChange(BASE_SCALE_RATIO + scaleStep);
    };
    var onZoomOut = function onZoomOut2() {
      dispatchZoonChange(BASE_SCALE_RATIO - scaleStep);
    };
    var onRotateRight = function onRotateRight2() {
      updateTransform({
        rotate: rotate + 90
      });
    };
    var onRotateLeft = function onRotateLeft2() {
      updateTransform({
        rotate: rotate - 90
      });
    };
    var onSwitchLeft = function onSwitchLeft2(event) {
      event.preventDefault();
      event.stopPropagation();
      if (currentPreviewIndex > 0) {
        setCurrent2(previewUrlsKeys[currentPreviewIndex - 1]);
      }
    };
    var onSwitchRight = function onSwitchRight2(event) {
      event.preventDefault();
      event.stopPropagation();
      if (currentPreviewIndex < previewGroupCount - 1) {
        setCurrent2(previewUrlsKeys[currentPreviewIndex + 1]);
      }
    };
    var onMouseUp = function onMouseUp2() {
      if (visible && isMoving) {
        setMoving(false);
        var _downPositionRef$curr = downPositionRef.current, transformX = _downPositionRef$curr.transformX, transformY = _downPositionRef$curr.transformY;
        var hasChangedPosition = transform.x !== transformX && transform.y !== transformY;
        if (!hasChangedPosition) {
          return;
        }
        var width = imgRef.current.offsetWidth * scale;
        var height = imgRef.current.offsetHeight * scale;
        var _imgRef$current$getBo = imgRef.current.getBoundingClientRect(), left = _imgRef$current$getBo.left, top = _imgRef$current$getBo.top;
        var isRotate = rotate % 180 !== 0;
        var fixState = getFixScaleEleTransPosition(isRotate ? height : width, isRotate ? width : height, left, top);
        if (fixState) {
          updateTransform(_objectSpread2({}, fixState));
        }
      }
    };
    var onMouseDown = function onMouseDown2(event) {
      if (event.button !== 0)
        return;
      event.preventDefault();
      event.stopPropagation();
      downPositionRef.current = {
        deltaX: event.pageX - transform.x,
        deltaY: event.pageY - transform.y,
        transformX: transform.x,
        transformY: transform.y
      };
      setMoving(true);
    };
    var onMouseMove = function onMouseMove2(event) {
      if (visible && isMoving) {
        updateTransform({
          x: event.pageX - downPositionRef.current.deltaX,
          y: event.pageY - downPositionRef.current.deltaY
        });
      }
    };
    var onWheel = function onWheel2(event) {
      if (!visible || event.deltaY == 0)
        return;
      var scaleRatio = Math.abs(event.deltaY / 100);
      var mergedScaleRatio = Math.min(scaleRatio, WHEEL_MAX_SCALE_RATIO);
      var ratio = BASE_SCALE_RATIO + mergedScaleRatio * scaleStep;
      if (event.deltaY > 0) {
        ratio = BASE_SCALE_RATIO / ratio;
      }
      dispatchZoonChange(ratio, event.clientX, event.clientY);
    };
    var onKeyDown3 = (0, import_react84.useCallback)(function(event) {
      if (!visible || !showLeftOrRightSwitches)
        return;
      if (event.keyCode === KeyCode_default.LEFT) {
        if (currentPreviewIndex > 0) {
          setCurrent2(previewUrlsKeys[currentPreviewIndex - 1]);
        }
      } else if (event.keyCode === KeyCode_default.RIGHT) {
        if (currentPreviewIndex < previewGroupCount - 1) {
          setCurrent2(previewUrlsKeys[currentPreviewIndex + 1]);
        }
      }
    }, [currentPreviewIndex, previewGroupCount, previewUrlsKeys, setCurrent2, showLeftOrRightSwitches, visible]);
    var onDoubleClick = function onDoubleClick2(event) {
      if (visible) {
        if (scale !== 1) {
          updateTransform({
            x: 0,
            y: 0,
            scale: 1
          });
        } else {
          dispatchZoonChange(BASE_SCALE_RATIO + scaleStep, event.clientX, event.clientY);
        }
      }
    };
    (0, import_react84.useEffect)(function() {
      var onTopMouseUpListener;
      var onTopMouseMoveListener;
      var onMouseUpListener = addEventListenerWrap(window, "mouseup", onMouseUp, false);
      var onMouseMoveListener = addEventListenerWrap(window, "mousemove", onMouseMove, false);
      var onKeyDownListener = addEventListenerWrap(window, "keydown", onKeyDown3, false);
      try {
        if (window.top !== window.self) {
          onTopMouseUpListener = addEventListenerWrap(window.top, "mouseup", onMouseUp, false);
          onTopMouseMoveListener = addEventListenerWrap(window.top, "mousemove", onMouseMove, false);
        }
      } catch (error2) {
        warning5(false, "[rc-image] ".concat(error2));
      }
      return function() {
        var _onTopMouseUpListener, _onTopMouseMoveListen;
        onMouseUpListener.remove();
        onMouseMoveListener.remove();
        onKeyDownListener.remove();
        (_onTopMouseUpListener = onTopMouseUpListener) === null || _onTopMouseUpListener === void 0 ? void 0 : _onTopMouseUpListener.remove();
        (_onTopMouseMoveListen = onTopMouseMoveListener) === null || _onTopMouseMoveListen === void 0 ? void 0 : _onTopMouseMoveListen.remove();
      };
    }, [visible, isMoving, onKeyDown3]);
    return /* @__PURE__ */ import_react84.default.createElement(import_react84.default.Fragment, null, /* @__PURE__ */ import_react84.default.createElement(es_default20, _extends({
      transitionName: transitionName2,
      maskTransitionName,
      closable: false,
      keyboard: true,
      prefixCls,
      onClose: onClose2,
      afterClose: onAfterClose,
      visible,
      wrapClassName,
      rootClassName,
      getContainer: getContainer3
    }, restProps), /* @__PURE__ */ import_react84.default.createElement("div", {
      className: "".concat(prefixCls, "-img-wrapper")
    }, /* @__PURE__ */ import_react84.default.createElement("img", {
      width: props.width,
      height: props.height,
      onWheel,
      onMouseDown,
      onDoubleClick,
      ref: imgRef,
      className: "".concat(prefixCls, "-img"),
      src: combinationSrc,
      alt,
      style: {
        transform: "translate3d(".concat(transform.x, "px, ").concat(transform.y, "px, 0) scale3d(").concat(scale, ", ").concat(scale, ", 1) rotate(").concat(rotate, "deg)")
      }
    }))), /* @__PURE__ */ import_react84.default.createElement(Operations_default, {
      visible,
      maskTransitionName,
      getContainer: getContainer3,
      prefixCls,
      rootClassName,
      icons: icons2,
      countRender,
      showSwitch: showLeftOrRightSwitches,
      showProgress: showOperationsProgress,
      current: currentPreviewIndex,
      count: previewGroupCount,
      scale,
      onSwitchLeft,
      onSwitchRight,
      onZoomIn,
      onZoomOut,
      onRotateRight,
      onRotateLeft,
      onClose: onClose2
    }));
  };
  var Preview_default = Preview;

  // node_modules/rc-image/es/Image.js
  var _excluded44 = ["src", "alt", "onPreviewClose", "prefixCls", "previewPrefixCls", "placeholder", "fallback", "width", "height", "style", "preview", "className", "onClick", "onError", "wrapperClassName", "wrapperStyle", "rootClassName", "crossOrigin", "decoding", "loading", "referrerPolicy", "sizes", "srcSet", "useMap", "draggable"];
  var _excluded213 = ["src", "visible", "onVisibleChange", "getContainer", "mask", "maskClassName", "icons", "scaleStep"];
  var uuid5 = 0;
  var ImageInternal = function ImageInternal2(_ref) {
    var _imgCommonProps$style;
    var imgSrc = _ref.src, alt = _ref.alt, onInitialPreviewClose = _ref.onPreviewClose, _ref$prefixCls = _ref.prefixCls, prefixCls = _ref$prefixCls === void 0 ? "rc-image" : _ref$prefixCls, _ref$previewPrefixCls = _ref.previewPrefixCls, previewPrefixCls = _ref$previewPrefixCls === void 0 ? "".concat(prefixCls, "-preview") : _ref$previewPrefixCls, placeholder = _ref.placeholder, fallback = _ref.fallback, width = _ref.width, height = _ref.height, style3 = _ref.style, _ref$preview = _ref.preview, preview = _ref$preview === void 0 ? true : _ref$preview, className = _ref.className, onClick = _ref.onClick, onImageError = _ref.onError, wrapperClassName = _ref.wrapperClassName, wrapperStyle = _ref.wrapperStyle, rootClassName = _ref.rootClassName, crossOrigin = _ref.crossOrigin, decoding = _ref.decoding, loading = _ref.loading, referrerPolicy = _ref.referrerPolicy, sizes2 = _ref.sizes, srcSet = _ref.srcSet, useMap = _ref.useMap, draggable = _ref.draggable, otherProps = _objectWithoutProperties(_ref, _excluded44);
    var isCustomPlaceholder = placeholder && placeholder !== true;
    var _ref2 = _typeof(preview) === "object" ? preview : {}, previewSrc = _ref2.src, _ref2$visible = _ref2.visible, previewVisible = _ref2$visible === void 0 ? void 0 : _ref2$visible, _ref2$onVisibleChange = _ref2.onVisibleChange, onPreviewVisibleChange = _ref2$onVisibleChange === void 0 ? onInitialPreviewClose : _ref2$onVisibleChange, _ref2$getContainer = _ref2.getContainer, getPreviewContainer = _ref2$getContainer === void 0 ? void 0 : _ref2$getContainer, previewMask = _ref2.mask, maskClassName = _ref2.maskClassName, icons2 = _ref2.icons, scaleStep = _ref2.scaleStep, dialogProps = _objectWithoutProperties(_ref2, _excluded213);
    var src = previewSrc !== null && previewSrc !== void 0 ? previewSrc : imgSrc;
    var isControlled = previewVisible !== void 0;
    var _useMergedState = useMergedState(!!previewVisible, {
      value: previewVisible,
      onChange: onPreviewVisibleChange
    }), _useMergedState2 = _slicedToArray(_useMergedState, 2), isShowPreview = _useMergedState2[0], setShowPreview2 = _useMergedState2[1];
    var _useState = (0, import_react85.useState)(isCustomPlaceholder ? "loading" : "normal"), _useState2 = _slicedToArray(_useState, 2), status = _useState2[0], setStatus = _useState2[1];
    var _useState3 = (0, import_react85.useState)(null), _useState4 = _slicedToArray(_useState3, 2), mousePosition = _useState4[0], setMousePosition2 = _useState4[1];
    var isError2 = status === "error";
    var _React$useContext = React283.useContext(context), isPreviewGroup = _React$useContext.isPreviewGroup, setCurrent2 = _React$useContext.setCurrent, setGroupShowPreview = _React$useContext.setShowPreview, setGroupMousePosition = _React$useContext.setMousePosition, registerImage2 = _React$useContext.registerImage;
    var _React$useState = React283.useState(function() {
      uuid5 += 1;
      return uuid5;
    }), _React$useState2 = _slicedToArray(_React$useState, 1), currentId = _React$useState2[0];
    var canPreview = !!preview;
    var isLoaded = React283.useRef(false);
    var onLoad = function onLoad2() {
      setStatus("normal");
    };
    var onError = function onError2(e3) {
      if (onImageError) {
        onImageError(e3);
      }
      setStatus("error");
    };
    var onPreview = function onPreview2(e3) {
      if (!isControlled) {
        var _getOffset = getOffset3(e3.target), left = _getOffset.left, top = _getOffset.top;
        if (isPreviewGroup) {
          setCurrent2(currentId);
          setGroupMousePosition({
            x: left,
            y: top
          });
        } else {
          setMousePosition2({
            x: left,
            y: top
          });
        }
      }
      if (isPreviewGroup) {
        setGroupShowPreview(true);
      } else {
        setShowPreview2(true);
      }
      if (onClick)
        onClick(e3);
    };
    var onPreviewClose = function onPreviewClose2(e3) {
      e3.stopPropagation();
      setShowPreview2(false);
      if (!isControlled) {
        setMousePosition2(null);
      }
    };
    var getImgRef = function getImgRef2(img) {
      isLoaded.current = false;
      if (status !== "loading")
        return;
      if (img !== null && img !== void 0 && img.complete && (img.naturalWidth || img.naturalHeight)) {
        isLoaded.current = true;
        onLoad();
      }
    };
    React283.useEffect(function() {
      var unRegister = registerImage2(currentId, src);
      return unRegister;
    }, []);
    React283.useEffect(function() {
      registerImage2(currentId, src, canPreview);
    }, [src, canPreview]);
    React283.useEffect(function() {
      if (isError2) {
        setStatus("normal");
      }
      if (isCustomPlaceholder && !isLoaded.current) {
        setStatus("loading");
      }
    }, [imgSrc]);
    var wrapperClass = (0, import_classnames109.default)(prefixCls, wrapperClassName, rootClassName, _defineProperty({}, "".concat(prefixCls, "-error"), isError2));
    var mergedSrc = isError2 && fallback ? fallback : src;
    var imgCommonProps = {
      crossOrigin,
      decoding,
      draggable,
      loading,
      referrerPolicy,
      sizes: sizes2,
      srcSet,
      useMap,
      alt,
      className: (0, import_classnames109.default)("".concat(prefixCls, "-img"), _defineProperty({}, "".concat(prefixCls, "-img-placeholder"), placeholder === true), className),
      style: _objectSpread2({
        height
      }, style3)
    };
    return /* @__PURE__ */ React283.createElement(React283.Fragment, null, /* @__PURE__ */ React283.createElement("div", _extends({}, otherProps, {
      className: wrapperClass,
      onClick: canPreview ? onPreview : onClick,
      style: _objectSpread2({
        width,
        height
      }, wrapperStyle)
    }), /* @__PURE__ */ React283.createElement("img", _extends({}, imgCommonProps, {
      ref: getImgRef
    }, isError2 && fallback ? {
      src: fallback
    } : {
      onLoad,
      onError,
      src: imgSrc
    }, {
      width,
      height
    })), status === "loading" && /* @__PURE__ */ React283.createElement("div", {
      "aria-hidden": "true",
      className: "".concat(prefixCls, "-placeholder")
    }, placeholder), previewMask && canPreview && /* @__PURE__ */ React283.createElement("div", {
      className: (0, import_classnames109.default)("".concat(prefixCls, "-mask"), maskClassName),
      style: {
        display: ((_imgCommonProps$style = imgCommonProps.style) === null || _imgCommonProps$style === void 0 ? void 0 : _imgCommonProps$style.display) === "none" ? "none" : void 0
      }
    }, previewMask)), !isPreviewGroup && canPreview && /* @__PURE__ */ React283.createElement(Preview_default, _extends({
      "aria-hidden": !isShowPreview,
      visible: isShowPreview,
      prefixCls: previewPrefixCls,
      onClose: onPreviewClose,
      mousePosition,
      src: mergedSrc,
      alt,
      getContainer: getPreviewContainer,
      icons: icons2,
      scaleStep,
      rootClassName
    }, dialogProps)));
  };
  ImageInternal.PreviewGroup = PreviewGroup_default;
  ImageInternal.displayName = "Image";
  var Image_default2 = ImageInternal;

  // node_modules/rc-image/es/index.js
  var es_default21 = Image_default2;

  // node_modules/antd/es/image/index.js
  var React289 = __toESM(require_react());
  var import_react86 = __toESM(require_react());

  // node_modules/antd/es/locale/en_US.js
  var en_US_default6 = default_default;

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/RotateLeftOutlined.js
  var React284 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/RotateLeftOutlined.js
  var RotateLeftOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "defs", "attrs": {}, "children": [{ "tag": "style", "attrs": {} }] }, { "tag": "path", "attrs": { "d": "M672 418H144c-17.7 0-32 14.3-32 32v414c0 17.7 14.3 32 32 32h528c17.7 0 32-14.3 32-32V450c0-17.7-14.3-32-32-32zm-44 402H188V494h440v326z" } }, { "tag": "path", "attrs": { "d": "M819.3 328.5c-78.8-100.7-196-153.6-314.6-154.2l-.2-64c0-6.5-7.6-10.1-12.6-6.1l-128 101c-4 3.1-3.9 9.1 0 12.3L492 318.6c5.1 4 12.7.4 12.6-6.1v-63.9c12.9.1 25.9.9 38.8 2.5 42.1 5.2 82.1 18.2 119 38.7 38.1 21.2 71.2 49.7 98.4 84.3 27.1 34.7 46.7 73.7 58.1 115.8a325.95 325.95 0 016.5 140.9h74.9c14.8-103.6-11.3-213-81-302.3z" } }] }, "name": "rotate-left", "theme": "outlined" };
  var RotateLeftOutlined_default = RotateLeftOutlined;

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/RotateLeftOutlined.js
  var RotateLeftOutlined2 = function RotateLeftOutlined3(props, ref) {
    return /* @__PURE__ */ React284.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: RotateLeftOutlined_default
    }));
  };
  RotateLeftOutlined2.displayName = "RotateLeftOutlined";
  var RotateLeftOutlined_default2 = /* @__PURE__ */ React284.forwardRef(RotateLeftOutlined2);

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/RotateRightOutlined.js
  var React285 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/RotateRightOutlined.js
  var RotateRightOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "defs", "attrs": {}, "children": [{ "tag": "style", "attrs": {} }] }, { "tag": "path", "attrs": { "d": "M480.5 251.2c13-1.6 25.9-2.4 38.8-2.5v63.9c0 6.5 7.5 10.1 12.6 6.1L660 217.6c4-3.2 4-9.2 0-12.3l-128-101c-5.1-4-12.6-.4-12.6 6.1l-.2 64c-118.6.5-235.8 53.4-314.6 154.2A399.75 399.75 0 00123.5 631h74.9c-.9-5.3-1.7-10.7-2.4-16.1-5.1-42.1-2.1-84.1 8.9-124.8 11.4-42.2 31-81.1 58.1-115.8 27.2-34.7 60.3-63.2 98.4-84.3 37-20.6 76.9-33.6 119.1-38.8z" } }, { "tag": "path", "attrs": { "d": "M880 418H352c-17.7 0-32 14.3-32 32v414c0 17.7 14.3 32 32 32h528c17.7 0 32-14.3 32-32V450c0-17.7-14.3-32-32-32zm-44 402H396V494h440v326z" } }] }, "name": "rotate-right", "theme": "outlined" };
  var RotateRightOutlined_default = RotateRightOutlined;

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/RotateRightOutlined.js
  var RotateRightOutlined2 = function RotateRightOutlined3(props, ref) {
    return /* @__PURE__ */ React285.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: RotateRightOutlined_default
    }));
  };
  RotateRightOutlined2.displayName = "RotateRightOutlined";
  var RotateRightOutlined_default2 = /* @__PURE__ */ React285.forwardRef(RotateRightOutlined2);

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/ZoomInOutlined.js
  var React286 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/ZoomInOutlined.js
  var ZoomInOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M637 443H519V309c0-4.4-3.6-8-8-8h-60c-4.4 0-8 3.6-8 8v134H325c-4.4 0-8 3.6-8 8v60c0 4.4 3.6 8 8 8h118v134c0 4.4 3.6 8 8 8h60c4.4 0 8-3.6 8-8V519h118c4.4 0 8-3.6 8-8v-60c0-4.4-3.6-8-8-8zm284 424L775 721c122.1-148.9 113.6-369.5-26-509-148-148.1-388.4-148.1-537 0-148.1 148.6-148.1 389 0 537 139.5 139.6 360.1 148.1 509 26l146 146c3.2 2.8 8.3 2.8 11 0l43-43c2.8-2.7 2.8-7.8 0-11zM696 696c-118.8 118.7-311.2 118.7-430 0-118.7-118.8-118.7-311.2 0-430 118.8-118.7 311.2-118.7 430 0 118.7 118.8 118.7 311.2 0 430z" } }] }, "name": "zoom-in", "theme": "outlined" };
  var ZoomInOutlined_default = ZoomInOutlined;

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/ZoomInOutlined.js
  var ZoomInOutlined2 = function ZoomInOutlined3(props, ref) {
    return /* @__PURE__ */ React286.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: ZoomInOutlined_default
    }));
  };
  ZoomInOutlined2.displayName = "ZoomInOutlined";
  var ZoomInOutlined_default2 = /* @__PURE__ */ React286.forwardRef(ZoomInOutlined2);

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/ZoomOutOutlined.js
  var React287 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/ZoomOutOutlined.js
  var ZoomOutOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M637 443H325c-4.4 0-8 3.6-8 8v60c0 4.4 3.6 8 8 8h312c4.4 0 8-3.6 8-8v-60c0-4.4-3.6-8-8-8zm284 424L775 721c122.1-148.9 113.6-369.5-26-509-148-148.1-388.4-148.1-537 0-148.1 148.6-148.1 389 0 537 139.5 139.6 360.1 148.1 509 26l146 146c3.2 2.8 8.3 2.8 11 0l43-43c2.8-2.7 2.8-7.8 0-11zM696 696c-118.8 118.7-311.2 118.7-430 0-118.7-118.8-118.7-311.2 0-430 118.8-118.7 311.2-118.7 430 0 118.7 118.8 118.7 311.2 0 430z" } }] }, "name": "zoom-out", "theme": "outlined" };
  var ZoomOutOutlined_default = ZoomOutOutlined;

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/ZoomOutOutlined.js
  var ZoomOutOutlined2 = function ZoomOutOutlined3(props, ref) {
    return /* @__PURE__ */ React287.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: ZoomOutOutlined_default
    }));
  };
  ZoomOutOutlined2.displayName = "ZoomOutOutlined";
  var ZoomOutOutlined_default2 = /* @__PURE__ */ React287.forwardRef(ZoomOutOutlined2);

  // node_modules/antd/es/image/PreviewGroup.js
  var React288 = __toESM(require_react());
  var __rest38 = function(s2, e3) {
    var t4 = {};
    for (var p2 in s2)
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t4[p2] = s2[p2];
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t4[p2[i3]] = s2[p2[i3]];
      }
    return t4;
  };
  var icons = {
    rotateLeft: /* @__PURE__ */ React288.createElement(RotateLeftOutlined_default2, null),
    rotateRight: /* @__PURE__ */ React288.createElement(RotateRightOutlined_default2, null),
    zoomIn: /* @__PURE__ */ React288.createElement(ZoomInOutlined_default2, null),
    zoomOut: /* @__PURE__ */ React288.createElement(ZoomOutOutlined_default2, null),
    close: /* @__PURE__ */ React288.createElement(CloseOutlined_default2, null),
    left: /* @__PURE__ */ React288.createElement(LeftOutlined_default2, null),
    right: /* @__PURE__ */ React288.createElement(RightOutlined_default2, null)
  };
  var InternalPreviewGroup = function InternalPreviewGroup2(_a) {
    var customizePrefixCls = _a.previewPrefixCls, preview = _a.preview, props = __rest38(_a, ["previewPrefixCls", "preview"]);
    var _React$useContext = React288.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls;
    var prefixCls = getPrefixCls("image-preview", customizePrefixCls);
    var rootPrefixCls = getPrefixCls();
    var mergedPreview = React288.useMemo(function() {
      if (preview === false) {
        return preview;
      }
      var _preview = _typeof(preview) === "object" ? preview : {};
      return _extends(_extends({}, _preview), {
        transitionName: getTransitionName3(rootPrefixCls, "zoom", _preview.transitionName),
        maskTransitionName: getTransitionName3(rootPrefixCls, "fade", _preview.maskTransitionName)
      });
    }, [preview]);
    return /* @__PURE__ */ React288.createElement(es_default21.PreviewGroup, _extends({
      preview: mergedPreview,
      previewPrefixCls: prefixCls,
      icons
    }, props));
  };
  var PreviewGroup_default2 = InternalPreviewGroup;

  // node_modules/antd/es/image/index.js
  var __rest39 = function(s2, e3) {
    var t4 = {};
    for (var p2 in s2)
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t4[p2] = s2[p2];
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t4[p2[i3]] = s2[p2[i3]];
      }
    return t4;
  };
  var Image = function Image2(_a) {
    var customizePrefixCls = _a.prefixCls, preview = _a.preview, otherProps = __rest39(_a, ["prefixCls", "preview"]);
    var _useContext = (0, import_react86.useContext)(ConfigContext), getPrefixCls = _useContext.getPrefixCls, _useContext$locale = _useContext.locale, contextLocale = _useContext$locale === void 0 ? en_US_default6 : _useContext$locale, getContextPopupContainer = _useContext.getPopupContainer;
    var prefixCls = getPrefixCls("image", customizePrefixCls);
    var rootPrefixCls = getPrefixCls();
    var imageLocale = contextLocale.Image || en_US_default6.Image;
    var mergedPreview = React289.useMemo(function() {
      if (preview === false) {
        return preview;
      }
      var _preview = _typeof(preview) === "object" ? preview : {};
      var getContainer3 = _preview.getContainer, restPreviewProps = __rest39(_preview, ["getContainer"]);
      return _extends(_extends({
        mask: /* @__PURE__ */ React289.createElement("div", {
          className: "".concat(prefixCls, "-mask-info")
        }, /* @__PURE__ */ React289.createElement(EyeOutlined_default2, null), imageLocale === null || imageLocale === void 0 ? void 0 : imageLocale.preview),
        icons
      }, restPreviewProps), {
        getContainer: getContainer3 || getContextPopupContainer,
        transitionName: getTransitionName3(rootPrefixCls, "zoom", _preview.transitionName),
        maskTransitionName: getTransitionName3(rootPrefixCls, "fade", _preview.maskTransitionName)
      });
    }, [preview, imageLocale]);
    return /* @__PURE__ */ React289.createElement(es_default21, _extends({
      prefixCls,
      preview: mergedPreview
    }, otherProps));
  };
  Image.PreviewGroup = PreviewGroup_default2;
  var image_default = Image;

  // node_modules/antd/es/input/Group.js
  var import_classnames110 = __toESM(require_classnames());
  var React290 = __toESM(require_react());
  var import_react87 = __toESM(require_react());
  var Group3 = function Group4(props) {
    var _classNames;
    var _useContext = (0, import_react87.useContext)(ConfigContext), getPrefixCls = _useContext.getPrefixCls, direction = _useContext.direction;
    var customizePrefixCls = props.prefixCls, _props$className = props.className, className = _props$className === void 0 ? "" : _props$className;
    var prefixCls = getPrefixCls("input-group", customizePrefixCls);
    var cls = (0, import_classnames110.default)(prefixCls, (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-lg"), props.size === "large"), _defineProperty(_classNames, "".concat(prefixCls, "-sm"), props.size === "small"), _defineProperty(_classNames, "".concat(prefixCls, "-compact"), props.compact), _defineProperty(_classNames, "".concat(prefixCls, "-rtl"), direction === "rtl"), _classNames), className);
    var formItemContext = (0, import_react87.useContext)(FormItemInputContext);
    var groupFormItemContext = (0, import_react87.useMemo)(function() {
      return _extends(_extends({}, formItemContext), {
        isFormItemInput: false
      });
    }, [formItemContext]);
    return /* @__PURE__ */ React290.createElement("span", {
      className: cls,
      style: props.style,
      onMouseEnter: props.onMouseEnter,
      onMouseLeave: props.onMouseLeave,
      onFocus: props.onFocus,
      onBlur: props.onBlur
    }, /* @__PURE__ */ React290.createElement(FormItemInputContext.Provider, {
      value: groupFormItemContext
    }, props.children));
  };
  var Group_default2 = Group3;

  // node_modules/antd/es/input/Input.js
  var import_classnames113 = __toESM(require_classnames());

  // node_modules/rc-input/es/BaseInput.js
  var import_react88 = __toESM(require_react());
  var import_classnames111 = __toESM(require_classnames());

  // node_modules/rc-input/es/utils/commonUtils.js
  function hasAddon(props) {
    return !!(props.addonBefore || props.addonAfter);
  }
  function hasPrefixSuffix(props) {
    return !!(props.prefix || props.suffix || props.allowClear);
  }
  function resolveOnChange(target, e3, onChange, targetValue) {
    if (!onChange) {
      return;
    }
    var event = e3;
    if (e3.type === "click") {
      var currentTarget = target.cloneNode(true);
      event = Object.create(e3, {
        target: {
          value: currentTarget
        },
        currentTarget: {
          value: currentTarget
        }
      });
      currentTarget.value = "";
      onChange(event);
      return;
    }
    if (targetValue !== void 0) {
      event = Object.create(e3, {
        target: {
          value: target
        },
        currentTarget: {
          value: target
        }
      });
      target.value = targetValue;
      onChange(event);
      return;
    }
    onChange(event);
  }
  function triggerFocus(element, option) {
    if (!element)
      return;
    element.focus(option);
    var _ref = option || {}, cursor = _ref.cursor;
    if (cursor) {
      var len = element.value.length;
      switch (cursor) {
        case "start":
          element.setSelectionRange(0, 0);
          break;
        case "end":
          element.setSelectionRange(len, len);
          break;
        default:
          element.setSelectionRange(0, len);
      }
    }
  }
  function fixControlledValue(value) {
    if (typeof value === "undefined" || value === null) {
      return "";
    }
    return String(value);
  }

  // node_modules/rc-input/es/BaseInput.js
  var BaseInput = function BaseInput2(props) {
    var inputElement = props.inputElement, prefixCls = props.prefixCls, prefix2 = props.prefix, suffix = props.suffix, addonBefore = props.addonBefore, addonAfter = props.addonAfter, className = props.className, style3 = props.style, affixWrapperClassName = props.affixWrapperClassName, groupClassName = props.groupClassName, wrapperClassName = props.wrapperClassName, disabled = props.disabled, readOnly2 = props.readOnly, focused = props.focused, triggerFocus3 = props.triggerFocus, allowClear = props.allowClear, value = props.value, handleReset = props.handleReset, hidden = props.hidden;
    var containerRef = (0, import_react88.useRef)(null);
    var onInputClick = function onInputClick2(e3) {
      var _containerRef$current;
      if ((_containerRef$current = containerRef.current) !== null && _containerRef$current !== void 0 && _containerRef$current.contains(e3.target)) {
        triggerFocus3 === null || triggerFocus3 === void 0 ? void 0 : triggerFocus3();
      }
    };
    var getClearIcon = function getClearIcon2() {
      var _classNames;
      if (!allowClear) {
        return null;
      }
      var needClear = !disabled && !readOnly2 && value;
      var clearIconCls = "".concat(prefixCls, "-clear-icon");
      var iconNode = _typeof(allowClear) === "object" && allowClear !== null && allowClear !== void 0 && allowClear.clearIcon ? allowClear.clearIcon : "\u2716";
      return /* @__PURE__ */ import_react88.default.createElement("span", {
        onClick: handleReset,
        onMouseDown: function onMouseDown(e3) {
          return e3.preventDefault();
        },
        className: (0, import_classnames111.default)(clearIconCls, (_classNames = {}, _defineProperty(_classNames, "".concat(clearIconCls, "-hidden"), !needClear), _defineProperty(_classNames, "".concat(clearIconCls, "-has-suffix"), !!suffix), _classNames)),
        role: "button",
        tabIndex: -1
      }, iconNode);
    };
    var element = /* @__PURE__ */ (0, import_react88.cloneElement)(inputElement, {
      value,
      hidden
    });
    if (hasPrefixSuffix(props)) {
      var _classNames2;
      var affixWrapperPrefixCls = "".concat(prefixCls, "-affix-wrapper");
      var affixWrapperCls = (0, import_classnames111.default)(affixWrapperPrefixCls, (_classNames2 = {}, _defineProperty(_classNames2, "".concat(affixWrapperPrefixCls, "-disabled"), disabled), _defineProperty(_classNames2, "".concat(affixWrapperPrefixCls, "-focused"), focused), _defineProperty(_classNames2, "".concat(affixWrapperPrefixCls, "-readonly"), readOnly2), _defineProperty(_classNames2, "".concat(affixWrapperPrefixCls, "-input-with-clear-btn"), suffix && allowClear && value), _classNames2), !hasAddon(props) && className, affixWrapperClassName);
      var suffixNode = (suffix || allowClear) && /* @__PURE__ */ import_react88.default.createElement("span", {
        className: "".concat(prefixCls, "-suffix")
      }, getClearIcon(), suffix);
      element = /* @__PURE__ */ import_react88.default.createElement("span", {
        className: affixWrapperCls,
        style: style3,
        hidden: !hasAddon(props) && hidden,
        onClick: onInputClick,
        ref: containerRef
      }, prefix2 && /* @__PURE__ */ import_react88.default.createElement("span", {
        className: "".concat(prefixCls, "-prefix")
      }, prefix2), /* @__PURE__ */ (0, import_react88.cloneElement)(inputElement, {
        style: null,
        value,
        hidden: null
      }), suffixNode);
    }
    if (hasAddon(props)) {
      var wrapperCls = "".concat(prefixCls, "-group");
      var addonCls = "".concat(wrapperCls, "-addon");
      var mergedWrapperClassName = (0, import_classnames111.default)("".concat(prefixCls, "-wrapper"), wrapperCls, wrapperClassName);
      var mergedGroupClassName = (0, import_classnames111.default)("".concat(prefixCls, "-group-wrapper"), className, groupClassName);
      return /* @__PURE__ */ import_react88.default.createElement("span", {
        className: mergedGroupClassName,
        style: style3,
        hidden
      }, /* @__PURE__ */ import_react88.default.createElement("span", {
        className: mergedWrapperClassName
      }, addonBefore && /* @__PURE__ */ import_react88.default.createElement("span", {
        className: addonCls
      }, addonBefore), /* @__PURE__ */ (0, import_react88.cloneElement)(element, {
        style: null,
        hidden: null
      }), addonAfter && /* @__PURE__ */ import_react88.default.createElement("span", {
        className: addonCls
      }, addonAfter)));
    }
    return element;
  };
  var BaseInput_default = BaseInput;

  // node_modules/rc-input/es/Input.js
  var import_react89 = __toESM(require_react());
  var import_classnames112 = __toESM(require_classnames());
  var _excluded45 = ["autoComplete", "onChange", "onFocus", "onBlur", "onPressEnter", "onKeyDown", "prefixCls", "disabled", "htmlSize", "className", "maxLength", "suffix", "showCount", "type", "inputClassName"];
  var Input3 = /* @__PURE__ */ (0, import_react89.forwardRef)(function(props, ref) {
    var autoComplete = props.autoComplete, onChange = props.onChange, onFocus = props.onFocus, onBlur = props.onBlur, onPressEnter = props.onPressEnter, onKeyDown3 = props.onKeyDown, _props$prefixCls = props.prefixCls, prefixCls = _props$prefixCls === void 0 ? "rc-input" : _props$prefixCls, disabled = props.disabled, htmlSize = props.htmlSize, className = props.className, maxLength = props.maxLength, suffix = props.suffix, showCount = props.showCount, _props$type = props.type, type4 = _props$type === void 0 ? "text" : _props$type, inputClassName = props.inputClassName, rest = _objectWithoutProperties(props, _excluded45);
    var _useMergedState = useMergedState(props.defaultValue, {
      value: props.value
    }), _useMergedState2 = _slicedToArray(_useMergedState, 2), value = _useMergedState2[0], setValue = _useMergedState2[1];
    var _useState = (0, import_react89.useState)(false), _useState2 = _slicedToArray(_useState, 2), focused = _useState2[0], setFocused = _useState2[1];
    var inputRef = (0, import_react89.useRef)(null);
    var focus = function focus2(option) {
      if (inputRef.current) {
        triggerFocus(inputRef.current, option);
      }
    };
    (0, import_react89.useImperativeHandle)(ref, function() {
      return {
        focus,
        blur: function blur() {
          var _inputRef$current;
          (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.blur();
        },
        setSelectionRange: function setSelectionRange(start, end, direction) {
          var _inputRef$current2;
          (_inputRef$current2 = inputRef.current) === null || _inputRef$current2 === void 0 ? void 0 : _inputRef$current2.setSelectionRange(start, end, direction);
        },
        select: function select() {
          var _inputRef$current3;
          (_inputRef$current3 = inputRef.current) === null || _inputRef$current3 === void 0 ? void 0 : _inputRef$current3.select();
        },
        input: inputRef.current
      };
    });
    (0, import_react89.useEffect)(function() {
      setFocused(function(prev) {
        return prev && disabled ? false : prev;
      });
    }, [disabled]);
    var handleChange = function handleChange2(e3) {
      if (props.value === void 0) {
        setValue(e3.target.value);
      }
      if (inputRef.current) {
        resolveOnChange(inputRef.current, e3, onChange);
      }
    };
    var handleKeyDown = function handleKeyDown2(e3) {
      if (onPressEnter && e3.key === "Enter") {
        onPressEnter(e3);
      }
      onKeyDown3 === null || onKeyDown3 === void 0 ? void 0 : onKeyDown3(e3);
    };
    var handleFocus = function handleFocus2(e3) {
      setFocused(true);
      onFocus === null || onFocus === void 0 ? void 0 : onFocus(e3);
    };
    var handleBlur = function handleBlur2(e3) {
      setFocused(false);
      onBlur === null || onBlur === void 0 ? void 0 : onBlur(e3);
    };
    var handleReset = function handleReset2(e3) {
      setValue("");
      focus();
      if (inputRef.current) {
        resolveOnChange(inputRef.current, e3, onChange);
      }
    };
    var getInputElement = function getInputElement2() {
      var otherProps = omit(props, [
        "prefixCls",
        "onPressEnter",
        "addonBefore",
        "addonAfter",
        "prefix",
        "suffix",
        "allowClear",
        // Input elements must be either controlled or uncontrolled,
        // specify either the value prop, or the defaultValue prop, but not both.
        "defaultValue",
        "showCount",
        "affixWrapperClassName",
        "groupClassName",
        "inputClassName",
        "wrapperClassName",
        "htmlSize"
      ]);
      return /* @__PURE__ */ import_react89.default.createElement("input", _extends({
        autoComplete
      }, otherProps, {
        onChange: handleChange,
        onFocus: handleFocus,
        onBlur: handleBlur,
        onKeyDown: handleKeyDown,
        className: (0, import_classnames112.default)(prefixCls, _defineProperty({}, "".concat(prefixCls, "-disabled"), disabled), inputClassName, !hasAddon(props) && !hasPrefixSuffix(props) && className),
        ref: inputRef,
        size: htmlSize,
        type: type4
      }));
    };
    var getSuffix = function getSuffix2() {
      var hasMaxLength = Number(maxLength) > 0;
      if (suffix || showCount) {
        var val = fixControlledValue(value);
        var valueLength = _toConsumableArray(val).length;
        var dataCount = _typeof(showCount) === "object" ? showCount.formatter({
          value: val,
          count: valueLength,
          maxLength
        }) : "".concat(valueLength).concat(hasMaxLength ? " / ".concat(maxLength) : "");
        return /* @__PURE__ */ import_react89.default.createElement(import_react89.default.Fragment, null, !!showCount && /* @__PURE__ */ import_react89.default.createElement("span", {
          className: (0, import_classnames112.default)("".concat(prefixCls, "-show-count-suffix"), _defineProperty({}, "".concat(prefixCls, "-show-count-has-suffix"), !!suffix))
        }, dataCount), suffix);
      }
      return null;
    };
    return /* @__PURE__ */ import_react89.default.createElement(BaseInput_default, _extends({}, rest, {
      prefixCls,
      className,
      inputElement: getInputElement(),
      handleReset,
      value: fixControlledValue(value),
      focused,
      triggerFocus: focus,
      suffix: getSuffix(),
      disabled
    }));
  });
  var Input_default3 = Input3;

  // node_modules/rc-input/es/index.js
  var es_default22 = Input_default3;

  // node_modules/antd/es/input/Input.js
  var import_react91 = __toESM(require_react());

  // node_modules/antd/es/input/hooks/useRemovePasswordTimeout.js
  var import_react90 = __toESM(require_react());
  function useRemovePasswordTimeout(inputRef, triggerOnMount) {
    var removePasswordTimeoutRef = (0, import_react90.useRef)([]);
    var removePasswordTimeout = function removePasswordTimeout2() {
      removePasswordTimeoutRef.current.push(setTimeout(function() {
        var _a, _b, _c, _d;
        if (((_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.input) && ((_b = inputRef.current) === null || _b === void 0 ? void 0 : _b.input.getAttribute("type")) === "password" && ((_c = inputRef.current) === null || _c === void 0 ? void 0 : _c.input.hasAttribute("value"))) {
          (_d = inputRef.current) === null || _d === void 0 ? void 0 : _d.input.removeAttribute("value");
        }
      }));
    };
    (0, import_react90.useEffect)(function() {
      if (triggerOnMount) {
        removePasswordTimeout();
      }
      return function() {
        return removePasswordTimeoutRef.current.forEach(function(timer) {
          if (timer) {
            clearTimeout(timer);
          }
        });
      };
    }, []);
    return removePasswordTimeout;
  }

  // node_modules/antd/es/input/utils.js
  function hasPrefixSuffix2(props) {
    return !!(props.prefix || props.suffix || props.allowClear);
  }

  // node_modules/antd/es/input/Input.js
  var __rest40 = function(s2, e3) {
    var t4 = {};
    for (var p2 in s2)
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t4[p2] = s2[p2];
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t4[p2[i3]] = s2[p2[i3]];
      }
    return t4;
  };
  function fixControlledValue2(value) {
    if (typeof value === "undefined" || value === null) {
      return "";
    }
    return String(value);
  }
  function resolveOnChange2(target, e3, onChange, targetValue) {
    if (!onChange) {
      return;
    }
    var event = e3;
    if (e3.type === "click") {
      var currentTarget = target.cloneNode(true);
      event = Object.create(e3, {
        target: {
          value: currentTarget
        },
        currentTarget: {
          value: currentTarget
        }
      });
      currentTarget.value = "";
      onChange(event);
      return;
    }
    if (targetValue !== void 0) {
      event = Object.create(e3, {
        target: {
          value: target
        },
        currentTarget: {
          value: target
        }
      });
      target.value = targetValue;
      onChange(event);
      return;
    }
    onChange(event);
  }
  function triggerFocus2(element, option) {
    if (!element) {
      return;
    }
    element.focus(option);
    var _ref = option || {}, cursor = _ref.cursor;
    if (cursor) {
      var len = element.value.length;
      switch (cursor) {
        case "start":
          element.setSelectionRange(0, 0);
          break;
        case "end":
          element.setSelectionRange(len, len);
          break;
        default:
          element.setSelectionRange(0, len);
          break;
      }
    }
  }
  var Input4 = /* @__PURE__ */ (0, import_react91.forwardRef)(function(props, ref) {
    var _classNames, _classNames2, _classNames4;
    var customizePrefixCls = props.prefixCls, _props$bordered = props.bordered, bordered = _props$bordered === void 0 ? true : _props$bordered, customStatus = props.status, customSize = props.size, customDisabled = props.disabled, onBlur = props.onBlur, onFocus = props.onFocus, suffix = props.suffix, allowClear = props.allowClear, addonAfter = props.addonAfter, addonBefore = props.addonBefore, className = props.className, onChange = props.onChange, rest = __rest40(props, ["prefixCls", "bordered", "status", "size", "disabled", "onBlur", "onFocus", "suffix", "allowClear", "addonAfter", "addonBefore", "className", "onChange"]);
    var _React$useContext = import_react91.default.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls, direction = _React$useContext.direction, input = _React$useContext.input;
    var prefixCls = getPrefixCls("input", customizePrefixCls);
    var inputRef = (0, import_react91.useRef)(null);
    var _useCompactItemContex = useCompactItemContext(prefixCls, direction), compactSize = _useCompactItemContex.compactSize, compactItemClassnames = _useCompactItemContex.compactItemClassnames;
    var size = import_react91.default.useContext(SizeContext_default);
    var mergedSize = compactSize || customSize || size;
    var disabled = import_react91.default.useContext(DisabledContext_default);
    var mergedDisabled = customDisabled !== null && customDisabled !== void 0 ? customDisabled : disabled;
    var _useContext = (0, import_react91.useContext)(FormItemInputContext), contextStatus = _useContext.status, hasFeedback = _useContext.hasFeedback, feedbackIcon = _useContext.feedbackIcon;
    var mergedStatus = getMergedStatus(contextStatus, customStatus);
    var inputHasPrefixSuffix = hasPrefixSuffix2(props) || !!hasFeedback;
    var prevHasPrefixSuffix = (0, import_react91.useRef)(inputHasPrefixSuffix);
    (0, import_react91.useEffect)(function() {
      var _a;
      if (inputHasPrefixSuffix && !prevHasPrefixSuffix.current) {
        true ? warning_default2(document.activeElement === ((_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.input), "Input", "When Input is focused, dynamic add or remove prefix / suffix will make it lose focus caused by dom structure change. Read more: https://ant.design/components/input/#FAQ") : void 0;
      }
      prevHasPrefixSuffix.current = inputHasPrefixSuffix;
    }, [inputHasPrefixSuffix]);
    var removePasswordTimeout = useRemovePasswordTimeout(inputRef, true);
    var handleBlur = function handleBlur2(e3) {
      removePasswordTimeout();
      onBlur === null || onBlur === void 0 ? void 0 : onBlur(e3);
    };
    var handleFocus = function handleFocus2(e3) {
      removePasswordTimeout();
      onFocus === null || onFocus === void 0 ? void 0 : onFocus(e3);
    };
    var handleChange = function handleChange2(e3) {
      removePasswordTimeout();
      onChange === null || onChange === void 0 ? void 0 : onChange(e3);
    };
    var suffixNode = (hasFeedback || suffix) && /* @__PURE__ */ import_react91.default.createElement(import_react91.default.Fragment, null, suffix, hasFeedback && feedbackIcon);
    var mergedAllowClear;
    if (_typeof(allowClear) === "object" && (allowClear === null || allowClear === void 0 ? void 0 : allowClear.clearIcon)) {
      mergedAllowClear = allowClear;
    } else if (allowClear) {
      mergedAllowClear = {
        clearIcon: /* @__PURE__ */ import_react91.default.createElement(CloseCircleFilled_default2, null)
      };
    }
    return /* @__PURE__ */ import_react91.default.createElement(es_default22, _extends({
      ref: composeRef(ref, inputRef),
      prefixCls,
      autoComplete: input === null || input === void 0 ? void 0 : input.autoComplete
    }, rest, {
      disabled: mergedDisabled || void 0,
      onBlur: handleBlur,
      onFocus: handleFocus,
      suffix: suffixNode,
      allowClear: mergedAllowClear,
      className: (0, import_classnames113.default)(className, compactItemClassnames),
      onChange: handleChange,
      addonAfter: addonAfter && /* @__PURE__ */ import_react91.default.createElement(NoCompactStyle, null, /* @__PURE__ */ import_react91.default.createElement(NoFormStyle, {
        override: true,
        status: true
      }, addonAfter)),
      addonBefore: addonBefore && /* @__PURE__ */ import_react91.default.createElement(NoCompactStyle, null, /* @__PURE__ */ import_react91.default.createElement(NoFormStyle, {
        override: true,
        status: true
      }, addonBefore)),
      inputClassName: (0, import_classnames113.default)((_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-sm"), mergedSize === "small"), _defineProperty(_classNames, "".concat(prefixCls, "-lg"), mergedSize === "large"), _defineProperty(_classNames, "".concat(prefixCls, "-rtl"), direction === "rtl"), _defineProperty(_classNames, "".concat(prefixCls, "-borderless"), !bordered), _classNames), !inputHasPrefixSuffix && getStatusClassNames(prefixCls, mergedStatus)),
      affixWrapperClassName: (0, import_classnames113.default)((_classNames2 = {}, _defineProperty(_classNames2, "".concat(prefixCls, "-affix-wrapper-sm"), mergedSize === "small"), _defineProperty(_classNames2, "".concat(prefixCls, "-affix-wrapper-lg"), mergedSize === "large"), _defineProperty(_classNames2, "".concat(prefixCls, "-affix-wrapper-rtl"), direction === "rtl"), _defineProperty(_classNames2, "".concat(prefixCls, "-affix-wrapper-borderless"), !bordered), _classNames2), getStatusClassNames("".concat(prefixCls, "-affix-wrapper"), mergedStatus, hasFeedback)),
      wrapperClassName: (0, import_classnames113.default)(_defineProperty({}, "".concat(prefixCls, "-group-rtl"), direction === "rtl")),
      groupClassName: (0, import_classnames113.default)((_classNames4 = {}, _defineProperty(_classNames4, "".concat(prefixCls, "-group-wrapper-sm"), mergedSize === "small"), _defineProperty(_classNames4, "".concat(prefixCls, "-group-wrapper-lg"), mergedSize === "large"), _defineProperty(_classNames4, "".concat(prefixCls, "-group-wrapper-rtl"), direction === "rtl"), _classNames4), getStatusClassNames("".concat(prefixCls, "-group-wrapper"), mergedStatus, hasFeedback))
    }));
  });
  var Input_default4 = Input4;

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/EyeInvisibleOutlined.js
  var React294 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/EyeInvisibleOutlined.js
  var EyeInvisibleOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M942.2 486.2Q889.47 375.11 816.7 305l-50.88 50.88C807.31 395.53 843.45 447.4 874.7 512 791.5 684.2 673.4 766 512 766q-72.67 0-133.87-22.38L323 798.75Q408 838 512 838q288.3 0 430.2-300.3a60.29 60.29 0 000-51.5zm-63.57-320.64L836 122.88a8 8 0 00-11.32 0L715.31 232.2Q624.86 186 512 186q-288.3 0-430.2 300.3a60.3 60.3 0 000 51.5q56.69 119.4 136.5 191.41L112.48 835a8 8 0 000 11.31L155.17 889a8 8 0 0011.31 0l712.15-712.12a8 8 0 000-11.32zM149.3 512C232.6 339.8 350.7 258 512 258c54.54 0 104.13 9.36 149.12 28.39l-70.3 70.3a176 176 0 00-238.13 238.13l-83.42 83.42C223.1 637.49 183.3 582.28 149.3 512zm246.7 0a112.11 112.11 0 01146.2-106.69L401.31 546.2A112 112 0 01396 512z" } }, { "tag": "path", "attrs": { "d": "M508 624c-3.46 0-6.87-.16-10.25-.47l-52.82 52.82a176.09 176.09 0 00227.42-227.42l-52.82 52.82c.31 3.38.47 6.79.47 10.25a111.94 111.94 0 01-112 112z" } }] }, "name": "eye-invisible", "theme": "outlined" };
  var EyeInvisibleOutlined_default = EyeInvisibleOutlined;

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/EyeInvisibleOutlined.js
  var EyeInvisibleOutlined2 = function EyeInvisibleOutlined3(props, ref) {
    return /* @__PURE__ */ React294.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: EyeInvisibleOutlined_default
    }));
  };
  EyeInvisibleOutlined2.displayName = "EyeInvisibleOutlined";
  var EyeInvisibleOutlined_default2 = /* @__PURE__ */ React294.forwardRef(EyeInvisibleOutlined2);

  // node_modules/antd/es/input/Password.js
  var import_classnames114 = __toESM(require_classnames());
  var React295 = __toESM(require_react());
  var import_react92 = __toESM(require_react());
  var __rest41 = function(s2, e3) {
    var t4 = {};
    for (var p2 in s2)
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t4[p2] = s2[p2];
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t4[p2[i3]] = s2[p2[i3]];
      }
    return t4;
  };
  var defaultIconRender = function defaultIconRender2(visible) {
    return visible ? /* @__PURE__ */ React295.createElement(EyeOutlined_default2, null) : /* @__PURE__ */ React295.createElement(EyeInvisibleOutlined_default2, null);
  };
  var ActionMap = {
    click: "onClick",
    hover: "onMouseOver"
  };
  var Password = /* @__PURE__ */ React295.forwardRef(function(props, ref) {
    var _props$visibilityTogg = props.visibilityToggle, visibilityToggle = _props$visibilityTogg === void 0 ? true : _props$visibilityTogg;
    var visibilityControlled = _typeof(visibilityToggle) === "object" && visibilityToggle.visible !== void 0;
    var _useState = (0, import_react92.useState)(function() {
      return visibilityControlled ? visibilityToggle.visible : false;
    }), _useState2 = _slicedToArray(_useState, 2), visible = _useState2[0], setVisible = _useState2[1];
    var inputRef = (0, import_react92.useRef)(null);
    React295.useEffect(function() {
      if (visibilityControlled) {
        setVisible(visibilityToggle.visible);
      }
    }, [visibilityControlled, visibilityToggle]);
    var removePasswordTimeout = useRemovePasswordTimeout(inputRef);
    var onVisibleChange = function onVisibleChange2() {
      var disabled = props.disabled;
      if (disabled) {
        return;
      }
      if (visible) {
        removePasswordTimeout();
      }
      setVisible(function(prevState) {
        var _a;
        var newState = !prevState;
        if (_typeof(visibilityToggle) === "object") {
          (_a = visibilityToggle.onVisibleChange) === null || _a === void 0 ? void 0 : _a.call(visibilityToggle, newState);
        }
        return newState;
      });
    };
    var getIcon2 = function getIcon3(prefixCls) {
      var _iconProps;
      var _props$action = props.action, action = _props$action === void 0 ? "click" : _props$action, _props$iconRender = props.iconRender, iconRender = _props$iconRender === void 0 ? defaultIconRender : _props$iconRender;
      var iconTrigger = ActionMap[action] || "";
      var icon = iconRender(visible);
      var iconProps = (_iconProps = {}, _defineProperty(_iconProps, iconTrigger, onVisibleChange), _defineProperty(_iconProps, "className", "".concat(prefixCls, "-icon")), _defineProperty(_iconProps, "key", "passwordIcon"), _defineProperty(_iconProps, "onMouseDown", function onMouseDown(e3) {
        e3.preventDefault();
      }), _defineProperty(_iconProps, "onMouseUp", function onMouseUp(e3) {
        e3.preventDefault();
      }), _iconProps);
      return /* @__PURE__ */ React295.cloneElement(/* @__PURE__ */ React295.isValidElement(icon) ? icon : /* @__PURE__ */ React295.createElement("span", null, icon), iconProps);
    };
    var renderPassword = function renderPassword2(_ref) {
      var getPrefixCls = _ref.getPrefixCls;
      var className = props.className, customizePrefixCls = props.prefixCls, customizeInputPrefixCls = props.inputPrefixCls, size = props.size, restProps = __rest41(props, ["className", "prefixCls", "inputPrefixCls", "size"]);
      var inputPrefixCls = getPrefixCls("input", customizeInputPrefixCls);
      var prefixCls = getPrefixCls("input-password", customizePrefixCls);
      var suffixIcon = visibilityToggle && getIcon2(prefixCls);
      var inputClassName = (0, import_classnames114.default)(prefixCls, className, _defineProperty({}, "".concat(prefixCls, "-").concat(size), !!size));
      var omittedProps = _extends(_extends({}, omit(restProps, ["suffix", "iconRender", "visibilityToggle"])), {
        type: visible ? "text" : "password",
        className: inputClassName,
        prefixCls: inputPrefixCls,
        suffix: suffixIcon
      });
      if (size) {
        omittedProps.size = size;
      }
      return /* @__PURE__ */ React295.createElement(Input_default4, _extends({
        ref: composeRef(ref, inputRef)
      }, omittedProps));
    };
    return /* @__PURE__ */ React295.createElement(ConfigConsumer, null, renderPassword);
  });
  if (true) {
    Password.displayName = "Password";
  }
  var Password_default = Password;

  // node_modules/antd/es/input/Search.js
  var import_classnames115 = __toESM(require_classnames());
  var React296 = __toESM(require_react());
  var __rest42 = function(s2, e3) {
    var t4 = {};
    for (var p2 in s2)
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t4[p2] = s2[p2];
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t4[p2[i3]] = s2[p2[i3]];
      }
    return t4;
  };
  var Search = /* @__PURE__ */ React296.forwardRef(function(props, ref) {
    var _classNames;
    var customizePrefixCls = props.prefixCls, customizeInputPrefixCls = props.inputPrefixCls, className = props.className, customizeSize = props.size, suffix = props.suffix, _props$enterButton = props.enterButton, enterButton = _props$enterButton === void 0 ? false : _props$enterButton, addonAfter = props.addonAfter, loading = props.loading, disabled = props.disabled, customOnSearch = props.onSearch, customOnChange = props.onChange, onCompositionStart = props.onCompositionStart, onCompositionEnd = props.onCompositionEnd, restProps = __rest42(props, ["prefixCls", "inputPrefixCls", "className", "size", "suffix", "enterButton", "addonAfter", "loading", "disabled", "onSearch", "onChange", "onCompositionStart", "onCompositionEnd"]);
    var _React$useContext = React296.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls, direction = _React$useContext.direction;
    var contextSize = React296.useContext(SizeContext_default);
    var composedRef = React296.useRef(false);
    var prefixCls = getPrefixCls("input-search", customizePrefixCls);
    var inputPrefixCls = getPrefixCls("input", customizeInputPrefixCls);
    var _useCompactItemContex = useCompactItemContext(prefixCls, direction), compactSize = _useCompactItemContex.compactSize;
    var size = compactSize || customizeSize || contextSize;
    var inputRef = React296.useRef(null);
    var onChange = function onChange2(e3) {
      if (e3 && e3.target && e3.type === "click" && customOnSearch) {
        customOnSearch(e3.target.value, e3);
      }
      if (customOnChange) {
        customOnChange(e3);
      }
    };
    var onMouseDown = function onMouseDown2(e3) {
      var _a;
      if (document.activeElement === ((_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.input)) {
        e3.preventDefault();
      }
    };
    var onSearch = function onSearch2(e3) {
      var _a, _b;
      if (customOnSearch) {
        customOnSearch((_b = (_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.input) === null || _b === void 0 ? void 0 : _b.value, e3);
      }
    };
    var onPressEnter = function onPressEnter2(e3) {
      if (composedRef.current || loading) {
        return;
      }
      onSearch(e3);
    };
    var searchIcon = typeof enterButton === "boolean" ? /* @__PURE__ */ React296.createElement(SearchOutlined_default2, null) : null;
    var btnClassName = "".concat(prefixCls, "-button");
    var button;
    var enterButtonAsElement = enterButton || {};
    var isAntdButton = enterButtonAsElement.type && enterButtonAsElement.type.__ANT_BUTTON === true;
    if (isAntdButton || enterButtonAsElement.type === "button") {
      button = cloneElement4(enterButtonAsElement, _extends({
        onMouseDown,
        onClick: function onClick(e3) {
          var _a, _b;
          (_b = (_a = enterButtonAsElement === null || enterButtonAsElement === void 0 ? void 0 : enterButtonAsElement.props) === null || _a === void 0 ? void 0 : _a.onClick) === null || _b === void 0 ? void 0 : _b.call(_a, e3);
          onSearch(e3);
        },
        key: "enterButton"
      }, isAntdButton ? {
        className: btnClassName,
        size
      } : {}));
    } else {
      button = /* @__PURE__ */ React296.createElement(button_default2, {
        className: btnClassName,
        type: enterButton ? "primary" : void 0,
        size,
        disabled,
        key: "enterButton",
        onMouseDown,
        onClick: onSearch,
        loading,
        icon: searchIcon
      }, enterButton);
    }
    if (addonAfter) {
      button = [button, cloneElement4(addonAfter, {
        key: "addonAfter"
      })];
    }
    var cls = (0, import_classnames115.default)(prefixCls, (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-rtl"), direction === "rtl"), _defineProperty(_classNames, "".concat(prefixCls, "-").concat(size), !!size), _defineProperty(_classNames, "".concat(prefixCls, "-with-button"), !!enterButton), _classNames), className);
    var handleOnCompositionStart = function handleOnCompositionStart2(e3) {
      composedRef.current = true;
      onCompositionStart === null || onCompositionStart === void 0 ? void 0 : onCompositionStart(e3);
    };
    var handleOnCompositionEnd = function handleOnCompositionEnd2(e3) {
      composedRef.current = false;
      onCompositionEnd === null || onCompositionEnd === void 0 ? void 0 : onCompositionEnd(e3);
    };
    return /* @__PURE__ */ React296.createElement(Input_default4, _extends({
      ref: composeRef(inputRef, ref),
      onPressEnter
    }, restProps, {
      size,
      onCompositionStart: handleOnCompositionStart,
      onCompositionEnd: handleOnCompositionEnd,
      prefixCls: inputPrefixCls,
      addonAfter: button,
      suffix,
      onChange,
      className: cls,
      disabled
    }));
  });
  if (true) {
    Search.displayName = "Search";
  }
  var Search_default = Search;

  // node_modules/antd/es/input/TextArea.js
  var import_classnames118 = __toESM(require_classnames());

  // node_modules/rc-textarea/es/index.js
  var React298 = __toESM(require_react());

  // node_modules/rc-textarea/es/ResizableTextArea.js
  var React297 = __toESM(require_react());
  var import_classnames116 = __toESM(require_classnames());

  // node_modules/rc-textarea/es/calculateNodeHeight.js
  var HIDDEN_TEXTAREA_STYLE = "\n  min-height:0 !important;\n  max-height:none !important;\n  height:0 !important;\n  visibility:hidden !important;\n  overflow:hidden !important;\n  position:absolute !important;\n  z-index:-1000 !important;\n  top:0 !important;\n  right:0 !important;\n  pointer-events: none !important;\n";
  var SIZING_STYLE = ["letter-spacing", "line-height", "padding-top", "padding-bottom", "font-family", "font-weight", "font-size", "font-variant", "text-rendering", "text-transform", "width", "text-indent", "padding-left", "padding-right", "border-width", "box-sizing", "word-break"];
  var computedStyleCache = {};
  var hiddenTextarea;
  function calculateNodeStyling(node) {
    var useCache = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    var nodeRef = node.getAttribute("id") || node.getAttribute("data-reactid") || node.getAttribute("name");
    if (useCache && computedStyleCache[nodeRef]) {
      return computedStyleCache[nodeRef];
    }
    var style3 = window.getComputedStyle(node);
    var boxSizing = style3.getPropertyValue("box-sizing") || style3.getPropertyValue("-moz-box-sizing") || style3.getPropertyValue("-webkit-box-sizing");
    var paddingSize = parseFloat(style3.getPropertyValue("padding-bottom")) + parseFloat(style3.getPropertyValue("padding-top"));
    var borderSize = parseFloat(style3.getPropertyValue("border-bottom-width")) + parseFloat(style3.getPropertyValue("border-top-width"));
    var sizingStyle = SIZING_STYLE.map(function(name) {
      return "".concat(name, ":").concat(style3.getPropertyValue(name));
    }).join(";");
    var nodeInfo = {
      sizingStyle,
      paddingSize,
      borderSize,
      boxSizing
    };
    if (useCache && nodeRef) {
      computedStyleCache[nodeRef] = nodeInfo;
    }
    return nodeInfo;
  }
  function calculateAutoSizeStyle(uiTextNode) {
    var useCache = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    var minRows = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
    var maxRows = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
    if (!hiddenTextarea) {
      hiddenTextarea = document.createElement("textarea");
      hiddenTextarea.setAttribute("tab-index", "-1");
      hiddenTextarea.setAttribute("aria-hidden", "true");
      document.body.appendChild(hiddenTextarea);
    }
    if (uiTextNode.getAttribute("wrap")) {
      hiddenTextarea.setAttribute("wrap", uiTextNode.getAttribute("wrap"));
    } else {
      hiddenTextarea.removeAttribute("wrap");
    }
    var _calculateNodeStyling = calculateNodeStyling(uiTextNode, useCache), paddingSize = _calculateNodeStyling.paddingSize, borderSize = _calculateNodeStyling.borderSize, boxSizing = _calculateNodeStyling.boxSizing, sizingStyle = _calculateNodeStyling.sizingStyle;
    hiddenTextarea.setAttribute("style", "".concat(sizingStyle, ";").concat(HIDDEN_TEXTAREA_STYLE));
    hiddenTextarea.value = uiTextNode.value || uiTextNode.placeholder || "";
    var minHeight = void 0;
    var maxHeight = void 0;
    var overflowY;
    var height = hiddenTextarea.scrollHeight;
    if (boxSizing === "border-box") {
      height += borderSize;
    } else if (boxSizing === "content-box") {
      height -= paddingSize;
    }
    if (minRows !== null || maxRows !== null) {
      hiddenTextarea.value = " ";
      var singleRowHeight = hiddenTextarea.scrollHeight - paddingSize;
      if (minRows !== null) {
        minHeight = singleRowHeight * minRows;
        if (boxSizing === "border-box") {
          minHeight = minHeight + paddingSize + borderSize;
        }
        height = Math.max(minHeight, height);
      }
      if (maxRows !== null) {
        maxHeight = singleRowHeight * maxRows;
        if (boxSizing === "border-box") {
          maxHeight = maxHeight + paddingSize + borderSize;
        }
        overflowY = height > maxHeight ? "" : "hidden";
        height = Math.min(maxHeight, height);
      }
    }
    var style3 = {
      height,
      overflowY,
      resize: "none"
    };
    if (minHeight) {
      style3.minHeight = minHeight;
    }
    if (maxHeight) {
      style3.maxHeight = maxHeight;
    }
    return style3;
  }

  // node_modules/rc-textarea/es/ResizableTextArea.js
  var _excluded46 = ["prefixCls", "onPressEnter", "defaultValue", "value", "autoSize", "onResize", "className", "style", "disabled", "onChange", "onInternalAutoSize"];
  var RESIZE_START = 0;
  var RESIZE_MEASURING = 1;
  var RESIZE_STABLE = 2;
  var ResizableTextArea = /* @__PURE__ */ React297.forwardRef(function(props, ref) {
    var _props$prefixCls = props.prefixCls, prefixCls = _props$prefixCls === void 0 ? "rc-textarea" : _props$prefixCls, onPressEnter = props.onPressEnter, defaultValue = props.defaultValue, value = props.value, autoSize = props.autoSize, onResize2 = props.onResize, className = props.className, style3 = props.style, disabled = props.disabled, onChange = props.onChange, onInternalAutoSize = props.onInternalAutoSize, restProps = _objectWithoutProperties(props, _excluded46);
    var _useMergedState = useMergedState(defaultValue, {
      value,
      postState: function postState(val) {
        return val !== null && val !== void 0 ? val : "";
      }
    }), _useMergedState2 = _slicedToArray(_useMergedState, 2), mergedValue = _useMergedState2[0], setMergedValue = _useMergedState2[1];
    var onInternalChange = function onInternalChange2(event) {
      setMergedValue(event.target.value);
      onChange === null || onChange === void 0 ? void 0 : onChange(event);
    };
    var textareaRef = React297.useRef();
    React297.useImperativeHandle(ref, function() {
      return {
        textArea: textareaRef.current
      };
    });
    var _React$useMemo = React297.useMemo(function() {
      if (autoSize && _typeof(autoSize) === "object") {
        return [autoSize.minRows, autoSize.maxRows];
      }
      return [];
    }, [autoSize]), _React$useMemo2 = _slicedToArray(_React$useMemo, 2), minRows = _React$useMemo2[0], maxRows = _React$useMemo2[1];
    var needAutoSize = !!autoSize;
    var fixFirefoxAutoScroll = function fixFirefoxAutoScroll2() {
      try {
        if (document.activeElement === textareaRef.current) {
          var _textareaRef$current = textareaRef.current, selectionStart = _textareaRef$current.selectionStart, selectionEnd = _textareaRef$current.selectionEnd, scrollTop = _textareaRef$current.scrollTop;
          textareaRef.current.setSelectionRange(selectionStart, selectionEnd);
          textareaRef.current.scrollTop = scrollTop;
        }
      } catch (e3) {
      }
    };
    var _React$useState = React297.useState(RESIZE_STABLE), _React$useState2 = _slicedToArray(_React$useState, 2), resizeState = _React$useState2[0], setResizeState = _React$useState2[1];
    var _React$useState3 = React297.useState(), _React$useState4 = _slicedToArray(_React$useState3, 2), autoSizeStyle = _React$useState4[0], setAutoSizeStyle = _React$useState4[1];
    var startResize = function startResize2() {
      setResizeState(RESIZE_START);
      if (false) {
        onInternalAutoSize === null || onInternalAutoSize === void 0 ? void 0 : onInternalAutoSize();
      }
    };
    useLayoutEffect_default(function() {
      if (needAutoSize) {
        startResize();
      }
    }, [value, minRows, maxRows, needAutoSize]);
    useLayoutEffect_default(function() {
      if (resizeState === RESIZE_START) {
        setResizeState(RESIZE_MEASURING);
      } else if (resizeState === RESIZE_MEASURING) {
        var textareaStyles = calculateAutoSizeStyle(textareaRef.current, false, minRows, maxRows);
        setResizeState(RESIZE_STABLE);
        setAutoSizeStyle(textareaStyles);
      } else {
        fixFirefoxAutoScroll();
      }
    }, [resizeState]);
    var resizeRafRef = React297.useRef();
    var cleanRaf = function cleanRaf2() {
      raf_default.cancel(resizeRafRef.current);
    };
    var onInternalResize = function onInternalResize2(size) {
      if (resizeState === RESIZE_STABLE) {
        onResize2 === null || onResize2 === void 0 ? void 0 : onResize2(size);
        if (autoSize) {
          cleanRaf();
          resizeRafRef.current = raf_default(function() {
            startResize();
          });
        }
      }
    };
    React297.useEffect(function() {
      return cleanRaf;
    }, []);
    var mergedAutoSizeStyle = needAutoSize ? autoSizeStyle : null;
    var mergedStyle = _objectSpread2(_objectSpread2({}, style3), mergedAutoSizeStyle);
    if (resizeState === RESIZE_START || resizeState === RESIZE_MEASURING) {
      mergedStyle.overflowY = "hidden";
      mergedStyle.overflowX = "hidden";
    }
    return /* @__PURE__ */ React297.createElement(es_default2, {
      onResize: onInternalResize,
      disabled: !(autoSize || onResize2)
    }, /* @__PURE__ */ React297.createElement("textarea", _extends({}, restProps, {
      ref: textareaRef,
      style: mergedStyle,
      className: (0, import_classnames116.default)(prefixCls, className, _defineProperty({}, "".concat(prefixCls, "-disabled"), disabled)),
      disabled,
      value: mergedValue,
      onChange: onInternalChange
    })));
  });
  var ResizableTextArea_default = ResizableTextArea;

  // node_modules/rc-textarea/es/index.js
  var TextArea = /* @__PURE__ */ function(_React$Component) {
    _inherits(TextArea3, _React$Component);
    var _super = _createSuper(TextArea3);
    function TextArea3(props) {
      var _this;
      _classCallCheck(this, TextArea3);
      _this = _super.call(this, props);
      _this.resizableTextArea = void 0;
      _this.focus = function() {
        _this.resizableTextArea.textArea.focus();
      };
      _this.saveTextArea = function(resizableTextArea) {
        _this.resizableTextArea = resizableTextArea;
      };
      _this.handleChange = function(e3) {
        var onChange = _this.props.onChange;
        _this.setValue(e3.target.value);
        if (onChange) {
          onChange(e3);
        }
      };
      _this.handleKeyDown = function(e3) {
        var _this$props = _this.props, onPressEnter = _this$props.onPressEnter, onKeyDown3 = _this$props.onKeyDown;
        if (e3.keyCode === 13 && onPressEnter) {
          onPressEnter(e3);
        }
        if (onKeyDown3) {
          onKeyDown3(e3);
        }
      };
      var value = typeof props.value === "undefined" || props.value === null ? props.defaultValue : props.value;
      _this.state = {
        value
      };
      return _this;
    }
    _createClass(TextArea3, [{
      key: "setValue",
      value: function setValue(value, callback) {
        if (!("value" in this.props)) {
          this.setState({
            value
          }, callback);
        }
      }
    }, {
      key: "blur",
      value: function blur() {
        this.resizableTextArea.textArea.blur();
      }
    }, {
      key: "render",
      value: function render2() {
        return /* @__PURE__ */ React298.createElement(ResizableTextArea_default, _extends({}, this.props, {
          value: this.state.value,
          onKeyDown: this.handleKeyDown,
          onChange: this.handleChange,
          ref: this.saveTextArea
        }));
      }
    }], [{
      key: "getDerivedStateFromProps",
      value: function getDerivedStateFromProps(nextProps) {
        if ("value" in nextProps) {
          return {
            value: nextProps.value
          };
        }
        return null;
      }
    }]);
    return TextArea3;
  }(React298.Component);
  var es_default23 = TextArea;

  // node_modules/antd/es/input/TextArea.js
  var React300 = __toESM(require_react());

  // node_modules/antd/es/input/ClearableLabeledInput.js
  var import_classnames117 = __toESM(require_classnames());
  var React299 = __toESM(require_react());
  var ClearableInputType = tuple("text", "input");
  function hasAddon2(props) {
    return !!(props.addonBefore || props.addonAfter);
  }
  var ClearableLabeledInput = /* @__PURE__ */ function(_React$Component) {
    _inherits(ClearableLabeledInput2, _React$Component);
    var _super = _createSuper(ClearableLabeledInput2);
    function ClearableLabeledInput2() {
      _classCallCheck(this, ClearableLabeledInput2);
      return _super.apply(this, arguments);
    }
    _createClass(ClearableLabeledInput2, [{
      key: "renderClearIcon",
      value: function renderClearIcon(prefixCls) {
        var _classNames;
        var _this$props = this.props, value = _this$props.value, disabled = _this$props.disabled, readOnly2 = _this$props.readOnly, handleReset = _this$props.handleReset, suffix = _this$props.suffix;
        var needClear = !disabled && !readOnly2 && value;
        var className = "".concat(prefixCls, "-clear-icon");
        return /* @__PURE__ */ React299.createElement(CloseCircleFilled_default2, {
          onClick: handleReset,
          // Do not trigger onBlur when clear input
          // https://github.com/ant-design/ant-design/issues/31200
          onMouseDown: function onMouseDown(e3) {
            return e3.preventDefault();
          },
          className: (0, import_classnames117.default)((_classNames = {}, _defineProperty(_classNames, "".concat(className, "-hidden"), !needClear), _defineProperty(_classNames, "".concat(className, "-has-suffix"), !!suffix), _classNames), className),
          role: "button"
        });
      }
    }, {
      key: "renderTextAreaWithClearIcon",
      value: function renderTextAreaWithClearIcon(prefixCls, element, statusContext) {
        var _classNames2;
        var _this$props2 = this.props, value = _this$props2.value, allowClear = _this$props2.allowClear, className = _this$props2.className, focused = _this$props2.focused, style3 = _this$props2.style, direction = _this$props2.direction, bordered = _this$props2.bordered, hidden = _this$props2.hidden, customStatus = _this$props2.status;
        var contextStatus = statusContext.status, hasFeedback = statusContext.hasFeedback;
        if (!allowClear) {
          return cloneElement4(element, {
            value
          });
        }
        var affixWrapperCls = (0, import_classnames117.default)("".concat(prefixCls, "-affix-wrapper"), "".concat(prefixCls, "-affix-wrapper-textarea-with-clear-btn"), getStatusClassNames("".concat(prefixCls, "-affix-wrapper"), getMergedStatus(contextStatus, customStatus), hasFeedback), (_classNames2 = {}, _defineProperty(_classNames2, "".concat(prefixCls, "-affix-wrapper-focused"), focused), _defineProperty(_classNames2, "".concat(prefixCls, "-affix-wrapper-rtl"), direction === "rtl"), _defineProperty(_classNames2, "".concat(prefixCls, "-affix-wrapper-borderless"), !bordered), _defineProperty(_classNames2, "".concat(className), !hasAddon2(this.props) && className), _classNames2));
        return /* @__PURE__ */ React299.createElement("span", {
          className: affixWrapperCls,
          style: style3,
          hidden
        }, cloneElement4(element, {
          style: null,
          value
        }), this.renderClearIcon(prefixCls));
      }
    }, {
      key: "render",
      value: function render2() {
        var _this = this;
        return /* @__PURE__ */ React299.createElement(FormItemInputContext.Consumer, null, function(statusContext) {
          var _this$props3 = _this.props, prefixCls = _this$props3.prefixCls, inputType = _this$props3.inputType, element = _this$props3.element;
          if (inputType === ClearableInputType[0]) {
            return _this.renderTextAreaWithClearIcon(prefixCls, element, statusContext);
          }
        });
      }
    }]);
    return ClearableLabeledInput2;
  }(React299.Component);
  var ClearableLabeledInput_default = ClearableLabeledInput;

  // node_modules/antd/es/input/TextArea.js
  var __rest43 = function(s2, e3) {
    var t4 = {};
    for (var p2 in s2)
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t4[p2] = s2[p2];
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t4[p2[i3]] = s2[p2[i3]];
      }
    return t4;
  };
  function fixEmojiLength(value, maxLength) {
    return _toConsumableArray(value || "").slice(0, maxLength).join("");
  }
  function setTriggerValue(isCursorInEnd, preValue, triggerValue, maxLength) {
    var newTriggerValue = triggerValue;
    if (isCursorInEnd) {
      newTriggerValue = fixEmojiLength(triggerValue, maxLength);
    } else if (_toConsumableArray(preValue || "").length < triggerValue.length && _toConsumableArray(triggerValue || "").length > maxLength) {
      newTriggerValue = preValue;
    }
    return newTriggerValue;
  }
  var TextArea2 = /* @__PURE__ */ React300.forwardRef(function(_a, ref) {
    var _classNames;
    var customizePrefixCls = _a.prefixCls, _a$bordered = _a.bordered, bordered = _a$bordered === void 0 ? true : _a$bordered, _a$showCount = _a.showCount, showCount = _a$showCount === void 0 ? false : _a$showCount, maxLength = _a.maxLength, className = _a.className, style3 = _a.style, customizeSize = _a.size, customDisabled = _a.disabled, onCompositionStart = _a.onCompositionStart, onCompositionEnd = _a.onCompositionEnd, onChange = _a.onChange, onFocus = _a.onFocus, onBlur = _a.onBlur, customStatus = _a.status, props = __rest43(_a, ["prefixCls", "bordered", "showCount", "maxLength", "className", "style", "size", "disabled", "onCompositionStart", "onCompositionEnd", "onChange", "onFocus", "onBlur", "status"]);
    var _React$useContext = React300.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls, direction = _React$useContext.direction;
    var size = React300.useContext(SizeContext_default);
    var disabled = React300.useContext(DisabledContext_default);
    var mergedDisabled = customDisabled !== null && customDisabled !== void 0 ? customDisabled : disabled;
    var _React$useContext2 = React300.useContext(FormItemInputContext), contextStatus = _React$useContext2.status, hasFeedback = _React$useContext2.hasFeedback, isFormItemInput = _React$useContext2.isFormItemInput, feedbackIcon = _React$useContext2.feedbackIcon;
    var mergedStatus = getMergedStatus(contextStatus, customStatus);
    var innerRef = React300.useRef(null);
    var clearableInputRef = React300.useRef(null);
    var _React$useState = React300.useState(false), _React$useState2 = _slicedToArray(_React$useState, 2), compositing = _React$useState2[0], setCompositing = _React$useState2[1];
    var _React$useState3 = React300.useState(false), _React$useState4 = _slicedToArray(_React$useState3, 2), focused = _React$useState4[0], setFocused = _React$useState4[1];
    var oldCompositionValueRef = React300.useRef();
    var oldSelectionStartRef = React300.useRef(0);
    var _useMergedState = useMergedState(props.defaultValue, {
      value: props.value
    }), _useMergedState2 = _slicedToArray(_useMergedState, 2), value = _useMergedState2[0], setValue = _useMergedState2[1];
    var hidden = props.hidden;
    var handleSetValue = function handleSetValue2(val2, callback) {
      if (props.value === void 0) {
        setValue(val2);
        callback === null || callback === void 0 ? void 0 : callback();
      }
    };
    var hasMaxLength = Number(maxLength) > 0;
    var onInternalCompositionStart = function onInternalCompositionStart2(e3) {
      setCompositing(true);
      oldCompositionValueRef.current = value;
      oldSelectionStartRef.current = e3.currentTarget.selectionStart;
      onCompositionStart === null || onCompositionStart === void 0 ? void 0 : onCompositionStart(e3);
    };
    var onInternalCompositionEnd = function onInternalCompositionEnd2(e3) {
      var _a2;
      setCompositing(false);
      var triggerValue = e3.currentTarget.value;
      if (hasMaxLength) {
        var isCursorInEnd = oldSelectionStartRef.current >= maxLength + 1 || oldSelectionStartRef.current === ((_a2 = oldCompositionValueRef.current) === null || _a2 === void 0 ? void 0 : _a2.length);
        triggerValue = setTriggerValue(isCursorInEnd, oldCompositionValueRef.current, triggerValue, maxLength);
      }
      if (triggerValue !== value) {
        handleSetValue(triggerValue);
        resolveOnChange2(e3.currentTarget, e3, onChange, triggerValue);
      }
      onCompositionEnd === null || onCompositionEnd === void 0 ? void 0 : onCompositionEnd(e3);
    };
    var handleChange = function handleChange2(e3) {
      var triggerValue = e3.target.value;
      if (!compositing && hasMaxLength) {
        var isCursorInEnd = e3.target.selectionStart >= maxLength + 1 || e3.target.selectionStart === triggerValue.length || !e3.target.selectionStart;
        triggerValue = setTriggerValue(isCursorInEnd, value, triggerValue, maxLength);
      }
      handleSetValue(triggerValue);
      resolveOnChange2(e3.currentTarget, e3, onChange, triggerValue);
    };
    var handleBlur = function handleBlur2(e3) {
      setFocused(false);
      onBlur === null || onBlur === void 0 ? void 0 : onBlur(e3);
    };
    var handleFocus = function handleFocus2(e3) {
      setFocused(true);
      onFocus === null || onFocus === void 0 ? void 0 : onFocus(e3);
    };
    React300.useEffect(function() {
      setFocused(function(prev) {
        return !mergedDisabled && prev;
      });
    }, [mergedDisabled]);
    var handleReset = function handleReset2(e3) {
      var _a2, _b, _c;
      handleSetValue("");
      (_a2 = innerRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
      resolveOnChange2((_c = (_b = innerRef.current) === null || _b === void 0 ? void 0 : _b.resizableTextArea) === null || _c === void 0 ? void 0 : _c.textArea, e3, onChange);
    };
    var prefixCls = getPrefixCls("input", customizePrefixCls);
    React300.useImperativeHandle(ref, function() {
      var _a2;
      return {
        resizableTextArea: (_a2 = innerRef.current) === null || _a2 === void 0 ? void 0 : _a2.resizableTextArea,
        focus: function focus(option) {
          var _a3, _b;
          triggerFocus2((_b = (_a3 = innerRef.current) === null || _a3 === void 0 ? void 0 : _a3.resizableTextArea) === null || _b === void 0 ? void 0 : _b.textArea, option);
        },
        blur: function blur() {
          var _a3;
          return (_a3 = innerRef.current) === null || _a3 === void 0 ? void 0 : _a3.blur();
        }
      };
    });
    var textArea = /* @__PURE__ */ React300.createElement(es_default23, _extends({}, omit(props, ["allowClear"]), {
      disabled: mergedDisabled,
      className: (0, import_classnames118.default)((_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-borderless"), !bordered), _defineProperty(_classNames, className, className && !showCount), _defineProperty(_classNames, "".concat(prefixCls, "-sm"), size === "small" || customizeSize === "small"), _defineProperty(_classNames, "".concat(prefixCls, "-lg"), size === "large" || customizeSize === "large"), _classNames), getStatusClassNames(prefixCls, mergedStatus)),
      style: showCount ? {
        resize: style3 === null || style3 === void 0 ? void 0 : style3.resize
      } : style3,
      prefixCls,
      onCompositionStart: onInternalCompositionStart,
      onChange: handleChange,
      onBlur: handleBlur,
      onFocus: handleFocus,
      onCompositionEnd: onInternalCompositionEnd,
      ref: innerRef
    }));
    var val = fixControlledValue2(value);
    if (!compositing && hasMaxLength && (props.value === null || props.value === void 0)) {
      val = fixEmojiLength(val, maxLength);
    }
    var textareaNode = /* @__PURE__ */ React300.createElement(ClearableLabeledInput_default, _extends({
      disabled: mergedDisabled,
      focused
    }, props, {
      prefixCls,
      direction,
      inputType: "text",
      value: val,
      element: textArea,
      handleReset,
      ref: clearableInputRef,
      bordered,
      status: customStatus,
      style: showCount ? void 0 : style3
    }));
    if (showCount || hasFeedback) {
      var _classNames2;
      var valueLength = _toConsumableArray(val).length;
      var dataCount = "";
      if (_typeof(showCount) === "object") {
        dataCount = showCount.formatter({
          value: val,
          count: valueLength,
          maxLength
        });
      } else {
        dataCount = "".concat(valueLength).concat(hasMaxLength ? " / ".concat(maxLength) : "");
      }
      return /* @__PURE__ */ React300.createElement("div", {
        hidden,
        className: (0, import_classnames118.default)("".concat(prefixCls, "-textarea"), (_classNames2 = {}, _defineProperty(_classNames2, "".concat(prefixCls, "-textarea-rtl"), direction === "rtl"), _defineProperty(_classNames2, "".concat(prefixCls, "-textarea-show-count"), showCount), _defineProperty(_classNames2, "".concat(prefixCls, "-textarea-in-form-item"), isFormItemInput), _classNames2), getStatusClassNames("".concat(prefixCls, "-textarea"), mergedStatus, hasFeedback), className),
        style: style3,
        "data-count": dataCount
      }, textareaNode, hasFeedback && /* @__PURE__ */ React300.createElement("span", {
        className: "".concat(prefixCls, "-textarea-suffix")
      }, feedbackIcon));
    }
    return textareaNode;
  });
  var TextArea_default = TextArea2;

  // node_modules/antd/es/input/index.js
  var Input5 = Input_default4;
  Input5.Group = Group_default2;
  Input5.Search = Search_default;
  Input5.TextArea = TextArea_default;
  Input5.Password = Password_default;
  var input_default = Input5;

  // node_modules/antd/es/layout/index.js
  var Layout2 = layout_default;
  Layout2.Header = Header;
  Layout2.Footer = Footer;
  Layout2.Content = Content;
  Layout2.Sider = Sider_default;
  var layout_default2 = Layout2;

  // node_modules/antd/es/list/index.js
  var import_classnames124 = __toESM(require_classnames());
  var React310 = __toESM(require_react());

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/DoubleLeftOutlined.js
  var React301 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/DoubleLeftOutlined.js
  var DoubleLeftOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M272.9 512l265.4-339.1c4.1-5.2.4-12.9-6.3-12.9h-77.3c-4.9 0-9.6 2.3-12.6 6.1L186.8 492.3a31.99 31.99 0 000 39.5l255.3 326.1c3 3.9 7.7 6.1 12.6 6.1H532c6.7 0 10.4-7.7 6.3-12.9L272.9 512zm304 0l265.4-339.1c4.1-5.2.4-12.9-6.3-12.9h-77.3c-4.9 0-9.6 2.3-12.6 6.1L490.8 492.3a31.99 31.99 0 000 39.5l255.3 326.1c3 3.9 7.7 6.1 12.6 6.1H836c6.7 0 10.4-7.7 6.3-12.9L576.9 512z" } }] }, "name": "double-left", "theme": "outlined" };
  var DoubleLeftOutlined_default = DoubleLeftOutlined;

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/DoubleLeftOutlined.js
  var DoubleLeftOutlined2 = function DoubleLeftOutlined3(props, ref) {
    return /* @__PURE__ */ React301.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: DoubleLeftOutlined_default
    }));
  };
  DoubleLeftOutlined2.displayName = "DoubleLeftOutlined";
  var DoubleLeftOutlined_default2 = /* @__PURE__ */ React301.forwardRef(DoubleLeftOutlined2);

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/DoubleRightOutlined.js
  var React302 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/DoubleRightOutlined.js
  var DoubleRightOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M533.2 492.3L277.9 166.1c-3-3.9-7.7-6.1-12.6-6.1H188c-6.7 0-10.4 7.7-6.3 12.9L447.1 512 181.7 851.1A7.98 7.98 0 00188 864h77.3c4.9 0 9.6-2.3 12.6-6.1l255.3-326.1c9.1-11.7 9.1-27.9 0-39.5zm304 0L581.9 166.1c-3-3.9-7.7-6.1-12.6-6.1H492c-6.7 0-10.4 7.7-6.3 12.9L751.1 512 485.7 851.1A7.98 7.98 0 00492 864h77.3c4.9 0 9.6-2.3 12.6-6.1l255.3-326.1c9.1-11.7 9.1-27.9 0-39.5z" } }] }, "name": "double-right", "theme": "outlined" };
  var DoubleRightOutlined_default = DoubleRightOutlined;

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/DoubleRightOutlined.js
  var DoubleRightOutlined2 = function DoubleRightOutlined3(props, ref) {
    return /* @__PURE__ */ React302.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: DoubleRightOutlined_default
    }));
  };
  DoubleRightOutlined2.displayName = "DoubleRightOutlined";
  var DoubleRightOutlined_default2 = /* @__PURE__ */ React302.forwardRef(DoubleRightOutlined2);

  // node_modules/antd/es/pagination/Pagination.js
  var import_classnames121 = __toESM(require_classnames());

  // node_modules/rc-pagination/es/Pagination.js
  var import_react95 = __toESM(require_react());
  var import_classnames120 = __toESM(require_classnames());

  // node_modules/rc-pagination/es/Pager.js
  var import_react93 = __toESM(require_react());
  var import_classnames119 = __toESM(require_classnames());
  var Pager = function Pager2(props) {
    var _classNames;
    var prefixCls = "".concat(props.rootPrefixCls, "-item");
    var cls = (0, import_classnames119.default)(prefixCls, "".concat(prefixCls, "-").concat(props.page), (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-active"), props.active), _defineProperty(_classNames, "".concat(prefixCls, "-disabled"), !props.page), _defineProperty(_classNames, props.className, !!props.className), _classNames));
    var handleClick = function handleClick2() {
      props.onClick(props.page);
    };
    var handleKeyPress = function handleKeyPress2(e3) {
      props.onKeyPress(e3, props.onClick, props.page);
    };
    return /* @__PURE__ */ import_react93.default.createElement("li", {
      title: props.showTitle ? props.page : null,
      className: cls,
      onClick: handleClick,
      onKeyPress: handleKeyPress,
      tabIndex: "0"
    }, props.itemRender(props.page, "page", /* @__PURE__ */ import_react93.default.createElement("a", {
      rel: "nofollow"
    }, props.page)));
  };
  var Pager_default = Pager;

  // node_modules/rc-pagination/es/Options.js
  var import_react94 = __toESM(require_react());

  // node_modules/rc-pagination/es/KeyCode.js
  var KeyCode_default2 = {
    ZERO: 48,
    NINE: 57,
    NUMPAD_ZERO: 96,
    NUMPAD_NINE: 105,
    BACKSPACE: 8,
    DELETE: 46,
    ENTER: 13,
    ARROW_UP: 38,
    ARROW_DOWN: 40
  };

  // node_modules/rc-pagination/es/Options.js
  var Options = /* @__PURE__ */ function(_React$Component) {
    _inherits(Options2, _React$Component);
    var _super = _createSuper(Options2);
    function Options2() {
      var _this;
      _classCallCheck(this, Options2);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _super.call.apply(_super, [this].concat(args));
      _this.state = {
        goInputText: ""
      };
      _this.buildOptionText = function(value) {
        return "".concat(value, " ").concat(_this.props.locale.items_per_page);
      };
      _this.changeSize = function(value) {
        _this.props.changeSize(Number(value));
      };
      _this.handleChange = function(e3) {
        _this.setState({
          goInputText: e3.target.value
        });
      };
      _this.handleBlur = function(e3) {
        var _this$props = _this.props, goButton = _this$props.goButton, quickGo = _this$props.quickGo, rootPrefixCls = _this$props.rootPrefixCls;
        var goInputText = _this.state.goInputText;
        if (goButton || goInputText === "") {
          return;
        }
        _this.setState({
          goInputText: ""
        });
        if (e3.relatedTarget && (e3.relatedTarget.className.indexOf("".concat(rootPrefixCls, "-item-link")) >= 0 || e3.relatedTarget.className.indexOf("".concat(rootPrefixCls, "-item")) >= 0)) {
          return;
        }
        quickGo(_this.getValidValue());
      };
      _this.go = function(e3) {
        var goInputText = _this.state.goInputText;
        if (goInputText === "") {
          return;
        }
        if (e3.keyCode === KeyCode_default2.ENTER || e3.type === "click") {
          _this.setState({
            goInputText: ""
          });
          _this.props.quickGo(_this.getValidValue());
        }
      };
      return _this;
    }
    _createClass(Options2, [{
      key: "getValidValue",
      value: function getValidValue() {
        var goInputText = this.state.goInputText;
        return !goInputText || isNaN(goInputText) ? void 0 : Number(goInputText);
      }
    }, {
      key: "getPageSizeOptions",
      value: function getPageSizeOptions() {
        var _this$props2 = this.props, pageSize = _this$props2.pageSize, pageSizeOptions = _this$props2.pageSizeOptions;
        if (pageSizeOptions.some(function(option) {
          return option.toString() === pageSize.toString();
        })) {
          return pageSizeOptions;
        }
        return pageSizeOptions.concat([pageSize.toString()]).sort(function(a2, b2) {
          var numberA = isNaN(Number(a2)) ? 0 : Number(a2);
          var numberB = isNaN(Number(b2)) ? 0 : Number(b2);
          return numberA - numberB;
        });
      }
    }, {
      key: "render",
      value: function render2() {
        var _this2 = this;
        var _this$props3 = this.props, pageSize = _this$props3.pageSize, locale4 = _this$props3.locale, rootPrefixCls = _this$props3.rootPrefixCls, changeSize = _this$props3.changeSize, quickGo = _this$props3.quickGo, goButton = _this$props3.goButton, selectComponentClass = _this$props3.selectComponentClass, buildOptionText = _this$props3.buildOptionText, selectPrefixCls = _this$props3.selectPrefixCls, disabled = _this$props3.disabled;
        var goInputText = this.state.goInputText;
        var prefixCls = "".concat(rootPrefixCls, "-options");
        var Select3 = selectComponentClass;
        var changeSelect = null;
        var goInput = null;
        var gotoButton = null;
        if (!changeSize && !quickGo) {
          return null;
        }
        var pageSizeOptions = this.getPageSizeOptions();
        if (changeSize && Select3) {
          var options = pageSizeOptions.map(function(opt, i3) {
            return /* @__PURE__ */ import_react94.default.createElement(Select3.Option, {
              key: i3,
              value: opt.toString()
            }, (buildOptionText || _this2.buildOptionText)(opt));
          });
          changeSelect = /* @__PURE__ */ import_react94.default.createElement(Select3, {
            disabled,
            prefixCls: selectPrefixCls,
            showSearch: false,
            className: "".concat(prefixCls, "-size-changer"),
            optionLabelProp: "children",
            dropdownMatchSelectWidth: false,
            value: (pageSize || pageSizeOptions[0]).toString(),
            onChange: this.changeSize,
            getPopupContainer: function getPopupContainer(triggerNode) {
              return triggerNode.parentNode;
            },
            "aria-label": locale4.page_size,
            defaultOpen: false
          }, options);
        }
        if (quickGo) {
          if (goButton) {
            gotoButton = typeof goButton === "boolean" ? /* @__PURE__ */ import_react94.default.createElement("button", {
              type: "button",
              onClick: this.go,
              onKeyUp: this.go,
              disabled,
              className: "".concat(prefixCls, "-quick-jumper-button")
            }, locale4.jump_to_confirm) : /* @__PURE__ */ import_react94.default.createElement("span", {
              onClick: this.go,
              onKeyUp: this.go
            }, goButton);
          }
          goInput = /* @__PURE__ */ import_react94.default.createElement("div", {
            className: "".concat(prefixCls, "-quick-jumper")
          }, locale4.jump_to, /* @__PURE__ */ import_react94.default.createElement("input", {
            disabled,
            type: "text",
            value: goInputText,
            onChange: this.handleChange,
            onKeyUp: this.go,
            onBlur: this.handleBlur,
            "aria-label": locale4.page
          }), locale4.page, gotoButton);
        }
        return /* @__PURE__ */ import_react94.default.createElement("li", {
          className: "".concat(prefixCls)
        }, changeSelect, goInput);
      }
    }]);
    return Options2;
  }(import_react94.default.Component);
  Options.defaultProps = {
    pageSizeOptions: ["10", "20", "50", "100"]
  };
  var Options_default = Options;

  // node_modules/rc-pagination/es/locale/zh_CN.js
  var zh_CN_default = {
    // Options.jsx
    items_per_page: "\u6761/\u9875",
    jump_to: "\u8DF3\u81F3",
    jump_to_confirm: "\u786E\u5B9A",
    page: "\u9875",
    // Pagination.jsx
    prev_page: "\u4E0A\u4E00\u9875",
    next_page: "\u4E0B\u4E00\u9875",
    prev_5: "\u5411\u524D 5 \u9875",
    next_5: "\u5411\u540E 5 \u9875",
    prev_3: "\u5411\u524D 3 \u9875",
    next_3: "\u5411\u540E 3 \u9875",
    page_size: "\u9875\u7801"
  };

  // node_modules/rc-pagination/es/Pagination.js
  function noop3() {
  }
  function isInteger(v2) {
    var value = Number(v2);
    return (
      // eslint-disable-next-line no-restricted-globals
      typeof value === "number" && !isNaN(value) && isFinite(value) && Math.floor(value) === value
    );
  }
  function defaultItemRender(page, type4, element) {
    return element;
  }
  function calculatePage(p2, state, props) {
    var pageSize = typeof p2 === "undefined" ? state.pageSize : p2;
    return Math.floor((props.total - 1) / pageSize) + 1;
  }
  var Pagination = /* @__PURE__ */ function(_React$Component) {
    _inherits(Pagination4, _React$Component);
    var _super = _createSuper(Pagination4);
    function Pagination4(props) {
      var _this;
      _classCallCheck(this, Pagination4);
      _this = _super.call(this, props);
      _this.getJumpPrevPage = function() {
        return Math.max(1, _this.state.current - (_this.props.showLessItems ? 3 : 5));
      };
      _this.getJumpNextPage = function() {
        return Math.min(calculatePage(void 0, _this.state, _this.props), _this.state.current + (_this.props.showLessItems ? 3 : 5));
      };
      _this.getItemIcon = function(icon, label) {
        var prefixCls = _this.props.prefixCls;
        var iconNode = icon || /* @__PURE__ */ import_react95.default.createElement("button", {
          type: "button",
          "aria-label": label,
          className: "".concat(prefixCls, "-item-link")
        });
        if (typeof icon === "function") {
          iconNode = /* @__PURE__ */ import_react95.default.createElement(icon, _objectSpread2({}, _this.props));
        }
        return iconNode;
      };
      _this.savePaginationNode = function(node) {
        _this.paginationNode = node;
      };
      _this.isValid = function(page) {
        var total = _this.props.total;
        return isInteger(page) && page !== _this.state.current && isInteger(total) && total > 0;
      };
      _this.shouldDisplayQuickJumper = function() {
        var _this$props = _this.props, showQuickJumper = _this$props.showQuickJumper, total = _this$props.total;
        var pageSize = _this.state.pageSize;
        if (total <= pageSize) {
          return false;
        }
        return showQuickJumper;
      };
      _this.handleKeyDown = function(e3) {
        if (e3.keyCode === KeyCode_default2.ARROW_UP || e3.keyCode === KeyCode_default2.ARROW_DOWN) {
          e3.preventDefault();
        }
      };
      _this.handleKeyUp = function(e3) {
        var value = _this.getValidValue(e3);
        var currentInputValue = _this.state.currentInputValue;
        if (value !== currentInputValue) {
          _this.setState({
            currentInputValue: value
          });
        }
        if (e3.keyCode === KeyCode_default2.ENTER) {
          _this.handleChange(value);
        } else if (e3.keyCode === KeyCode_default2.ARROW_UP) {
          _this.handleChange(value - 1);
        } else if (e3.keyCode === KeyCode_default2.ARROW_DOWN) {
          _this.handleChange(value + 1);
        }
      };
      _this.handleBlur = function(e3) {
        var value = _this.getValidValue(e3);
        _this.handleChange(value);
      };
      _this.changePageSize = function(size) {
        var current = _this.state.current;
        var newCurrent = calculatePage(size, _this.state, _this.props);
        current = current > newCurrent ? newCurrent : current;
        if (newCurrent === 0) {
          current = _this.state.current;
        }
        if (typeof size === "number") {
          if (!("pageSize" in _this.props)) {
            _this.setState({
              pageSize: size
            });
          }
          if (!("current" in _this.props)) {
            _this.setState({
              current,
              currentInputValue: current
            });
          }
        }
        _this.props.onShowSizeChange(current, size);
        if ("onChange" in _this.props && _this.props.onChange) {
          _this.props.onChange(current, size);
        }
      };
      _this.handleChange = function(page) {
        var _this$props2 = _this.props, disabled = _this$props2.disabled, onChange = _this$props2.onChange;
        var _this$state = _this.state, pageSize = _this$state.pageSize, current = _this$state.current, currentInputValue = _this$state.currentInputValue;
        if (_this.isValid(page) && !disabled) {
          var currentPage = calculatePage(void 0, _this.state, _this.props);
          var newPage = page;
          if (page > currentPage) {
            newPage = currentPage;
          } else if (page < 1) {
            newPage = 1;
          }
          if (!("current" in _this.props)) {
            _this.setState({
              current: newPage
            });
          }
          if (newPage !== currentInputValue) {
            _this.setState({
              currentInputValue: newPage
            });
          }
          onChange(newPage, pageSize);
          return newPage;
        }
        return current;
      };
      _this.prev = function() {
        if (_this.hasPrev()) {
          _this.handleChange(_this.state.current - 1);
        }
      };
      _this.next = function() {
        if (_this.hasNext()) {
          _this.handleChange(_this.state.current + 1);
        }
      };
      _this.jumpPrev = function() {
        _this.handleChange(_this.getJumpPrevPage());
      };
      _this.jumpNext = function() {
        _this.handleChange(_this.getJumpNextPage());
      };
      _this.hasPrev = function() {
        return _this.state.current > 1;
      };
      _this.hasNext = function() {
        return _this.state.current < calculatePage(void 0, _this.state, _this.props);
      };
      _this.runIfEnter = function(event, callback) {
        if (event.key === "Enter" || event.charCode === 13) {
          for (var _len = arguments.length, restParams = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
            restParams[_key - 2] = arguments[_key];
          }
          callback.apply(void 0, restParams);
        }
      };
      _this.runIfEnterPrev = function(e3) {
        _this.runIfEnter(e3, _this.prev);
      };
      _this.runIfEnterNext = function(e3) {
        _this.runIfEnter(e3, _this.next);
      };
      _this.runIfEnterJumpPrev = function(e3) {
        _this.runIfEnter(e3, _this.jumpPrev);
      };
      _this.runIfEnterJumpNext = function(e3) {
        _this.runIfEnter(e3, _this.jumpNext);
      };
      _this.handleGoTO = function(e3) {
        if (e3.keyCode === KeyCode_default2.ENTER || e3.type === "click") {
          _this.handleChange(_this.state.currentInputValue);
        }
      };
      var hasOnChange = props.onChange !== noop3;
      var hasCurrent = "current" in props;
      if (hasCurrent && !hasOnChange) {
        console.warn("Warning: You provided a `current` prop to a Pagination component without an `onChange` handler. This will render a read-only component.");
      }
      var _current = props.defaultCurrent;
      if ("current" in props) {
        _current = props.current;
      }
      var _pageSize = props.defaultPageSize;
      if ("pageSize" in props) {
        _pageSize = props.pageSize;
      }
      _current = Math.min(_current, calculatePage(_pageSize, void 0, props));
      _this.state = {
        current: _current,
        currentInputValue: _current,
        pageSize: _pageSize
      };
      return _this;
    }
    _createClass(Pagination4, [{
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps, prevState) {
        var prefixCls = this.props.prefixCls;
        if (prevState.current !== this.state.current && this.paginationNode) {
          var lastCurrentNode = this.paginationNode.querySelector(".".concat(prefixCls, "-item-").concat(prevState.current));
          if (lastCurrentNode && document.activeElement === lastCurrentNode) {
            lastCurrentNode.blur();
          }
        }
      }
    }, {
      key: "getValidValue",
      value: function getValidValue(e3) {
        var inputValue = e3.target.value;
        var allPages = calculatePage(void 0, this.state, this.props);
        var currentInputValue = this.state.currentInputValue;
        var value;
        if (inputValue === "") {
          value = inputValue;
        } else if (isNaN(Number(inputValue))) {
          value = currentInputValue;
        } else if (inputValue >= allPages) {
          value = allPages;
        } else {
          value = Number(inputValue);
        }
        return value;
      }
    }, {
      key: "getShowSizeChanger",
      value: function getShowSizeChanger() {
        var _this$props3 = this.props, showSizeChanger = _this$props3.showSizeChanger, total = _this$props3.total, totalBoundaryShowSizeChanger = _this$props3.totalBoundaryShowSizeChanger;
        if (typeof showSizeChanger !== "undefined") {
          return showSizeChanger;
        }
        return total > totalBoundaryShowSizeChanger;
      }
    }, {
      key: "renderPrev",
      value: function renderPrev(prevPage) {
        var _this$props4 = this.props, prevIcon = _this$props4.prevIcon, itemRender = _this$props4.itemRender;
        var prevButton = itemRender(prevPage, "prev", this.getItemIcon(prevIcon, "prev page"));
        var disabled = !this.hasPrev();
        return /* @__PURE__ */ (0, import_react95.isValidElement)(prevButton) ? /* @__PURE__ */ (0, import_react95.cloneElement)(prevButton, {
          disabled
        }) : prevButton;
      }
    }, {
      key: "renderNext",
      value: function renderNext(nextPage) {
        var _this$props5 = this.props, nextIcon = _this$props5.nextIcon, itemRender = _this$props5.itemRender;
        var nextButton = itemRender(nextPage, "next", this.getItemIcon(nextIcon, "next page"));
        var disabled = !this.hasNext();
        return /* @__PURE__ */ (0, import_react95.isValidElement)(nextButton) ? /* @__PURE__ */ (0, import_react95.cloneElement)(nextButton, {
          disabled
        }) : nextButton;
      }
    }, {
      key: "render",
      value: function render2() {
        var _this2 = this;
        var _this$props6 = this.props, prefixCls = _this$props6.prefixCls, className = _this$props6.className, style3 = _this$props6.style, disabled = _this$props6.disabled, hideOnSinglePage = _this$props6.hideOnSinglePage, total = _this$props6.total, locale4 = _this$props6.locale, showQuickJumper = _this$props6.showQuickJumper, showLessItems = _this$props6.showLessItems, showTitle = _this$props6.showTitle, showTotal = _this$props6.showTotal, simple = _this$props6.simple, itemRender = _this$props6.itemRender, showPrevNextJumpers = _this$props6.showPrevNextJumpers, jumpPrevIcon = _this$props6.jumpPrevIcon, jumpNextIcon = _this$props6.jumpNextIcon, selectComponentClass = _this$props6.selectComponentClass, selectPrefixCls = _this$props6.selectPrefixCls, pageSizeOptions = _this$props6.pageSizeOptions;
        var _this$state2 = this.state, current = _this$state2.current, pageSize = _this$state2.pageSize, currentInputValue = _this$state2.currentInputValue;
        if (hideOnSinglePage === true && total <= pageSize) {
          return null;
        }
        var allPages = calculatePage(void 0, this.state, this.props);
        var pagerList = [];
        var jumpPrev = null;
        var jumpNext = null;
        var firstPager = null;
        var lastPager = null;
        var gotoButton = null;
        var goButton = showQuickJumper && showQuickJumper.goButton;
        var pageBufferSize = showLessItems ? 1 : 2;
        var prevPage = current - 1 > 0 ? current - 1 : 0;
        var nextPage = current + 1 < allPages ? current + 1 : allPages;
        var dataOrAriaAttributeProps = Object.keys(this.props).reduce(function(prev, key2) {
          if (key2.substr(0, 5) === "data-" || key2.substr(0, 5) === "aria-" || key2 === "role") {
            prev[key2] = _this2.props[key2];
          }
          return prev;
        }, {});
        var totalText = showTotal && /* @__PURE__ */ import_react95.default.createElement("li", {
          className: "".concat(prefixCls, "-total-text")
        }, showTotal(total, [total === 0 ? 0 : (current - 1) * pageSize + 1, current * pageSize > total ? total : current * pageSize]));
        if (simple) {
          if (goButton) {
            if (typeof goButton === "boolean") {
              gotoButton = /* @__PURE__ */ import_react95.default.createElement("button", {
                type: "button",
                onClick: this.handleGoTO,
                onKeyUp: this.handleGoTO
              }, locale4.jump_to_confirm);
            } else {
              gotoButton = /* @__PURE__ */ import_react95.default.createElement("span", {
                onClick: this.handleGoTO,
                onKeyUp: this.handleGoTO
              }, goButton);
            }
            gotoButton = /* @__PURE__ */ import_react95.default.createElement("li", {
              title: showTitle ? "".concat(locale4.jump_to).concat(current, "/").concat(allPages) : null,
              className: "".concat(prefixCls, "-simple-pager")
            }, gotoButton);
          }
          return /* @__PURE__ */ import_react95.default.createElement("ul", _extends({
            className: (0, import_classnames120.default)(prefixCls, "".concat(prefixCls, "-simple"), _defineProperty({}, "".concat(prefixCls, "-disabled"), disabled), className),
            style: style3,
            ref: this.savePaginationNode
          }, dataOrAriaAttributeProps), totalText, /* @__PURE__ */ import_react95.default.createElement("li", {
            title: showTitle ? locale4.prev_page : null,
            onClick: this.prev,
            tabIndex: this.hasPrev() ? 0 : null,
            onKeyPress: this.runIfEnterPrev,
            className: (0, import_classnames120.default)("".concat(prefixCls, "-prev"), _defineProperty({}, "".concat(prefixCls, "-disabled"), !this.hasPrev())),
            "aria-disabled": !this.hasPrev()
          }, this.renderPrev(prevPage)), /* @__PURE__ */ import_react95.default.createElement("li", {
            title: showTitle ? "".concat(current, "/").concat(allPages) : null,
            className: "".concat(prefixCls, "-simple-pager")
          }, /* @__PURE__ */ import_react95.default.createElement("input", {
            type: "text",
            value: currentInputValue,
            disabled,
            onKeyDown: this.handleKeyDown,
            onKeyUp: this.handleKeyUp,
            onChange: this.handleKeyUp,
            onBlur: this.handleBlur,
            size: "3"
          }), /* @__PURE__ */ import_react95.default.createElement("span", {
            className: "".concat(prefixCls, "-slash")
          }, "/"), allPages), /* @__PURE__ */ import_react95.default.createElement("li", {
            title: showTitle ? locale4.next_page : null,
            onClick: this.next,
            tabIndex: this.hasPrev() ? 0 : null,
            onKeyPress: this.runIfEnterNext,
            className: (0, import_classnames120.default)("".concat(prefixCls, "-next"), _defineProperty({}, "".concat(prefixCls, "-disabled"), !this.hasNext())),
            "aria-disabled": !this.hasNext()
          }, this.renderNext(nextPage)), gotoButton);
        }
        if (allPages <= 3 + pageBufferSize * 2) {
          var pagerProps = {
            locale: locale4,
            rootPrefixCls: prefixCls,
            onClick: this.handleChange,
            onKeyPress: this.runIfEnter,
            showTitle,
            itemRender
          };
          if (!allPages) {
            pagerList.push(/* @__PURE__ */ import_react95.default.createElement(Pager_default, _extends({}, pagerProps, {
              key: "noPager",
              page: 1,
              className: "".concat(prefixCls, "-item-disabled")
            })));
          }
          for (var i3 = 1; i3 <= allPages; i3 += 1) {
            var active = current === i3;
            pagerList.push(/* @__PURE__ */ import_react95.default.createElement(Pager_default, _extends({}, pagerProps, {
              key: i3,
              page: i3,
              active
            })));
          }
        } else {
          var prevItemTitle = showLessItems ? locale4.prev_3 : locale4.prev_5;
          var nextItemTitle = showLessItems ? locale4.next_3 : locale4.next_5;
          if (showPrevNextJumpers) {
            jumpPrev = /* @__PURE__ */ import_react95.default.createElement("li", {
              title: showTitle ? prevItemTitle : null,
              key: "prev",
              onClick: this.jumpPrev,
              tabIndex: "0",
              onKeyPress: this.runIfEnterJumpPrev,
              className: (0, import_classnames120.default)("".concat(prefixCls, "-jump-prev"), _defineProperty({}, "".concat(prefixCls, "-jump-prev-custom-icon"), !!jumpPrevIcon))
            }, itemRender(this.getJumpPrevPage(), "jump-prev", this.getItemIcon(jumpPrevIcon, "prev page")));
            jumpNext = /* @__PURE__ */ import_react95.default.createElement("li", {
              title: showTitle ? nextItemTitle : null,
              key: "next",
              tabIndex: "0",
              onClick: this.jumpNext,
              onKeyPress: this.runIfEnterJumpNext,
              className: (0, import_classnames120.default)("".concat(prefixCls, "-jump-next"), _defineProperty({}, "".concat(prefixCls, "-jump-next-custom-icon"), !!jumpNextIcon))
            }, itemRender(this.getJumpNextPage(), "jump-next", this.getItemIcon(jumpNextIcon, "next page")));
          }
          lastPager = /* @__PURE__ */ import_react95.default.createElement(Pager_default, {
            locale: locale4,
            last: true,
            rootPrefixCls: prefixCls,
            onClick: this.handleChange,
            onKeyPress: this.runIfEnter,
            key: allPages,
            page: allPages,
            active: false,
            showTitle,
            itemRender
          });
          firstPager = /* @__PURE__ */ import_react95.default.createElement(Pager_default, {
            locale: locale4,
            rootPrefixCls: prefixCls,
            onClick: this.handleChange,
            onKeyPress: this.runIfEnter,
            key: 1,
            page: 1,
            active: false,
            showTitle,
            itemRender
          });
          var left = Math.max(1, current - pageBufferSize);
          var right = Math.min(current + pageBufferSize, allPages);
          if (current - 1 <= pageBufferSize) {
            right = 1 + pageBufferSize * 2;
          }
          if (allPages - current <= pageBufferSize) {
            left = allPages - pageBufferSize * 2;
          }
          for (var _i = left; _i <= right; _i += 1) {
            var _active = current === _i;
            pagerList.push(/* @__PURE__ */ import_react95.default.createElement(Pager_default, {
              locale: locale4,
              rootPrefixCls: prefixCls,
              onClick: this.handleChange,
              onKeyPress: this.runIfEnter,
              key: _i,
              page: _i,
              active: _active,
              showTitle,
              itemRender
            }));
          }
          if (current - 1 >= pageBufferSize * 2 && current !== 1 + 2) {
            pagerList[0] = /* @__PURE__ */ (0, import_react95.cloneElement)(pagerList[0], {
              className: "".concat(prefixCls, "-item-after-jump-prev")
            });
            pagerList.unshift(jumpPrev);
          }
          if (allPages - current >= pageBufferSize * 2 && current !== allPages - 2) {
            pagerList[pagerList.length - 1] = /* @__PURE__ */ (0, import_react95.cloneElement)(pagerList[pagerList.length - 1], {
              className: "".concat(prefixCls, "-item-before-jump-next")
            });
            pagerList.push(jumpNext);
          }
          if (left !== 1) {
            pagerList.unshift(firstPager);
          }
          if (right !== allPages) {
            pagerList.push(lastPager);
          }
        }
        var prevDisabled = !this.hasPrev() || !allPages;
        var nextDisabled = !this.hasNext() || !allPages;
        return /* @__PURE__ */ import_react95.default.createElement("ul", _extends({
          className: (0, import_classnames120.default)(prefixCls, className, _defineProperty({}, "".concat(prefixCls, "-disabled"), disabled)),
          style: style3,
          ref: this.savePaginationNode
        }, dataOrAriaAttributeProps), totalText, /* @__PURE__ */ import_react95.default.createElement("li", {
          title: showTitle ? locale4.prev_page : null,
          onClick: this.prev,
          tabIndex: prevDisabled ? null : 0,
          onKeyPress: this.runIfEnterPrev,
          className: (0, import_classnames120.default)("".concat(prefixCls, "-prev"), _defineProperty({}, "".concat(prefixCls, "-disabled"), prevDisabled)),
          "aria-disabled": prevDisabled
        }, this.renderPrev(prevPage)), pagerList, /* @__PURE__ */ import_react95.default.createElement("li", {
          title: showTitle ? locale4.next_page : null,
          onClick: this.next,
          tabIndex: nextDisabled ? null : 0,
          onKeyPress: this.runIfEnterNext,
          className: (0, import_classnames120.default)("".concat(prefixCls, "-next"), _defineProperty({}, "".concat(prefixCls, "-disabled"), nextDisabled)),
          "aria-disabled": nextDisabled
        }, this.renderNext(nextPage)), /* @__PURE__ */ import_react95.default.createElement(Options_default, {
          disabled,
          locale: locale4,
          rootPrefixCls: prefixCls,
          selectComponentClass,
          selectPrefixCls,
          changeSize: this.getShowSizeChanger() ? this.changePageSize : null,
          current,
          pageSize,
          pageSizeOptions,
          quickGo: this.shouldDisplayQuickJumper() ? this.handleChange : null,
          goButton
        }));
      }
    }], [{
      key: "getDerivedStateFromProps",
      value: function getDerivedStateFromProps(props, prevState) {
        var newState = {};
        if ("current" in props) {
          newState.current = props.current;
          if (props.current !== prevState.current) {
            newState.currentInputValue = newState.current;
          }
        }
        if ("pageSize" in props && props.pageSize !== prevState.pageSize) {
          var current = prevState.current;
          var newCurrent = calculatePage(props.pageSize, prevState, props);
          current = current > newCurrent ? newCurrent : current;
          if (!("current" in props)) {
            newState.current = current;
            newState.currentInputValue = current;
          }
          newState.pageSize = props.pageSize;
        }
        return newState;
      }
    }]);
    return Pagination4;
  }(import_react95.default.Component);
  Pagination.defaultProps = {
    defaultCurrent: 1,
    total: 0,
    defaultPageSize: 10,
    onChange: noop3,
    className: "",
    selectPrefixCls: "rc-select",
    prefixCls: "rc-pagination",
    selectComponentClass: null,
    hideOnSinglePage: false,
    showPrevNextJumpers: true,
    showQuickJumper: false,
    showLessItems: false,
    showTitle: true,
    onShowSizeChange: noop3,
    locale: zh_CN_default,
    style: {},
    itemRender: defaultItemRender,
    totalBoundaryShowSizeChanger: 50
  };
  var Pagination_default = Pagination;

  // node_modules/antd/es/pagination/Pagination.js
  var React307 = __toESM(require_react());

  // node_modules/antd/es/pagination/Select.js
  var React306 = __toESM(require_react());
  var MiniSelect = function MiniSelect2(props) {
    return /* @__PURE__ */ React306.createElement(select_default, _extends({}, props, {
      size: "small"
    }));
  };
  var MiddleSelect = function MiddleSelect2(props) {
    return /* @__PURE__ */ React306.createElement(select_default, _extends({}, props, {
      size: "middle"
    }));
  };
  MiniSelect.Option = select_default.Option;
  MiddleSelect.Option = select_default.Option;

  // node_modules/antd/es/pagination/Pagination.js
  var __rest44 = function(s2, e3) {
    var t4 = {};
    for (var p2 in s2)
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t4[p2] = s2[p2];
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t4[p2[i3]] = s2[p2[i3]];
      }
    return t4;
  };
  var Pagination2 = function Pagination3(_a) {
    var customizePrefixCls = _a.prefixCls, customizeSelectPrefixCls = _a.selectPrefixCls, className = _a.className, size = _a.size, customLocale = _a.locale, selectComponentClass = _a.selectComponentClass, responsive = _a.responsive, showSizeChanger = _a.showSizeChanger, restProps = __rest44(_a, ["prefixCls", "selectPrefixCls", "className", "size", "locale", "selectComponentClass", "responsive", "showSizeChanger"]);
    var _useBreakpoint = useBreakpoint_default(responsive), xs = _useBreakpoint.xs;
    var _React$useContext = React307.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls, direction = _React$useContext.direction, _React$useContext$pag = _React$useContext.pagination, pagination = _React$useContext$pag === void 0 ? {} : _React$useContext$pag;
    var prefixCls = getPrefixCls("pagination", customizePrefixCls);
    var mergedShowSizeChanger = showSizeChanger !== null && showSizeChanger !== void 0 ? showSizeChanger : pagination.showSizeChanger;
    var getIconsProps = function getIconsProps2() {
      var ellipsis = /* @__PURE__ */ React307.createElement("span", {
        className: "".concat(prefixCls, "-item-ellipsis")
      }, "\u2022\u2022\u2022");
      var prevIcon = /* @__PURE__ */ React307.createElement("button", {
        className: "".concat(prefixCls, "-item-link"),
        type: "button",
        tabIndex: -1
      }, /* @__PURE__ */ React307.createElement(LeftOutlined_default2, null));
      var nextIcon = /* @__PURE__ */ React307.createElement("button", {
        className: "".concat(prefixCls, "-item-link"),
        type: "button",
        tabIndex: -1
      }, /* @__PURE__ */ React307.createElement(RightOutlined_default2, null));
      var jumpPrevIcon = /* @__PURE__ */ React307.createElement("a", {
        className: "".concat(prefixCls, "-item-link")
      }, /* @__PURE__ */ React307.createElement("div", {
        className: "".concat(prefixCls, "-item-container")
      }, /* @__PURE__ */ React307.createElement(DoubleLeftOutlined_default2, {
        className: "".concat(prefixCls, "-item-link-icon")
      }), ellipsis));
      var jumpNextIcon = /* @__PURE__ */ React307.createElement("a", {
        className: "".concat(prefixCls, "-item-link")
      }, /* @__PURE__ */ React307.createElement("div", {
        className: "".concat(prefixCls, "-item-container")
      }, /* @__PURE__ */ React307.createElement(DoubleRightOutlined_default2, {
        className: "".concat(prefixCls, "-item-link-icon")
      }), ellipsis));
      if (direction === "rtl") {
        var _ref = [nextIcon, prevIcon];
        prevIcon = _ref[0];
        nextIcon = _ref[1];
        var _ref2 = [jumpNextIcon, jumpPrevIcon];
        jumpPrevIcon = _ref2[0];
        jumpNextIcon = _ref2[1];
      }
      return {
        prevIcon,
        nextIcon,
        jumpPrevIcon,
        jumpNextIcon
      };
    };
    return /* @__PURE__ */ React307.createElement(LocaleReceiver_default, {
      componentName: "Pagination",
      defaultLocale: en_US_default
    }, function(contextLocale) {
      var _classNames;
      var locale4 = _extends(_extends({}, contextLocale), customLocale);
      var isSmall = size === "small" || !!(xs && !size && responsive);
      var selectPrefixCls = getPrefixCls("select", customizeSelectPrefixCls);
      var extendedClassName = (0, import_classnames121.default)((_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-mini"), isSmall), _defineProperty(_classNames, "".concat(prefixCls, "-rtl"), direction === "rtl"), _classNames), className);
      return /* @__PURE__ */ React307.createElement(Pagination_default, _extends({}, getIconsProps(), restProps, {
        prefixCls,
        selectPrefixCls,
        className: extendedClassName,
        selectComponentClass: selectComponentClass || (isSmall ? MiniSelect : MiddleSelect),
        locale: locale4,
        showSizeChanger: mergedShowSizeChanger
      }));
    });
  };
  var Pagination_default2 = Pagination2;

  // node_modules/antd/es/pagination/index.js
  var pagination_default = Pagination_default2;

  // node_modules/antd/es/spin/index.js
  var import_classnames122 = __toESM(require_classnames());
  var import_debounce = __toESM(require_debounce());
  var React308 = __toESM(require_react());
  var __rest45 = function(s2, e3) {
    var t4 = {};
    for (var p2 in s2)
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t4[p2] = s2[p2];
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t4[p2[i3]] = s2[p2[i3]];
      }
    return t4;
  };
  var SpinSizes = tuple("small", "default", "large");
  var defaultIndicator = null;
  function renderIndicator(prefixCls, props) {
    var indicator = props.indicator;
    var dotClassName = "".concat(prefixCls, "-dot");
    if (indicator === null) {
      return null;
    }
    if (isValidElement6(indicator)) {
      return cloneElement4(indicator, {
        className: (0, import_classnames122.default)(indicator.props.className, dotClassName)
      });
    }
    if (isValidElement6(defaultIndicator)) {
      return cloneElement4(defaultIndicator, {
        className: (0, import_classnames122.default)(defaultIndicator.props.className, dotClassName)
      });
    }
    return /* @__PURE__ */ React308.createElement("span", {
      className: (0, import_classnames122.default)(dotClassName, "".concat(prefixCls, "-dot-spin"))
    }, /* @__PURE__ */ React308.createElement("i", {
      className: "".concat(prefixCls, "-dot-item")
    }), /* @__PURE__ */ React308.createElement("i", {
      className: "".concat(prefixCls, "-dot-item")
    }), /* @__PURE__ */ React308.createElement("i", {
      className: "".concat(prefixCls, "-dot-item")
    }), /* @__PURE__ */ React308.createElement("i", {
      className: "".concat(prefixCls, "-dot-item")
    }));
  }
  function shouldDelay(spinning, delay) {
    return !!spinning && !!delay && !isNaN(Number(delay));
  }
  var Spin = function Spin2(props) {
    var prefixCls = props.spinPrefixCls, _props$spinning = props.spinning, customSpinning = _props$spinning === void 0 ? true : _props$spinning, delay = props.delay, className = props.className, _props$size = props.size, size = _props$size === void 0 ? "default" : _props$size, tip = props.tip, wrapperClassName = props.wrapperClassName, style3 = props.style, children = props.children, restProps = __rest45(props, ["spinPrefixCls", "spinning", "delay", "className", "size", "tip", "wrapperClassName", "style", "children"]);
    var _React$useState = React308.useState(function() {
      return customSpinning && !shouldDelay(customSpinning, delay);
    }), _React$useState2 = _slicedToArray(_React$useState, 2), spinning = _React$useState2[0], setSpinning = _React$useState2[1];
    React308.useEffect(function() {
      var updateSpinning = (0, import_debounce.default)(function() {
        setSpinning(customSpinning);
      }, delay);
      updateSpinning();
      return function() {
        var _a;
        (_a = updateSpinning === null || updateSpinning === void 0 ? void 0 : updateSpinning.cancel) === null || _a === void 0 ? void 0 : _a.call(updateSpinning);
      };
    }, [delay, customSpinning]);
    var isNestedPattern = function isNestedPattern2() {
      return typeof children !== "undefined";
    };
    var renderSpin = function renderSpin2(_ref) {
      var _classNames;
      var direction = _ref.direction;
      var spinClassName = (0, import_classnames122.default)(prefixCls, (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-sm"), size === "small"), _defineProperty(_classNames, "".concat(prefixCls, "-lg"), size === "large"), _defineProperty(_classNames, "".concat(prefixCls, "-spinning"), spinning), _defineProperty(_classNames, "".concat(prefixCls, "-show-text"), !!tip), _defineProperty(_classNames, "".concat(prefixCls, "-rtl"), direction === "rtl"), _classNames), className);
      var divProps = omit(restProps, ["indicator", "prefixCls"]);
      var spinElement = /* @__PURE__ */ React308.createElement("div", _extends({}, divProps, {
        style: style3,
        className: spinClassName,
        "aria-live": "polite",
        "aria-busy": spinning
      }), renderIndicator(prefixCls, props), tip ? /* @__PURE__ */ React308.createElement("div", {
        className: "".concat(prefixCls, "-text")
      }, tip) : null);
      if (isNestedPattern()) {
        var containerClassName = (0, import_classnames122.default)("".concat(prefixCls, "-container"), _defineProperty({}, "".concat(prefixCls, "-blur"), spinning));
        return /* @__PURE__ */ React308.createElement("div", _extends({}, divProps, {
          className: (0, import_classnames122.default)("".concat(prefixCls, "-nested-loading"), wrapperClassName)
        }), spinning && /* @__PURE__ */ React308.createElement("div", {
          key: "loading"
        }, spinElement), /* @__PURE__ */ React308.createElement("div", {
          className: containerClassName,
          key: "container"
        }, children));
      }
      return spinElement;
    };
    return /* @__PURE__ */ React308.createElement(ConfigConsumer, null, renderSpin);
  };
  var SpinFC = function SpinFC2(props) {
    var customizePrefixCls = props.prefixCls;
    var _React$useContext = React308.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls;
    var spinPrefixCls = getPrefixCls("spin", customizePrefixCls);
    var spinClassProps = _extends(_extends({}, props), {
      spinPrefixCls
    });
    return /* @__PURE__ */ React308.createElement(Spin, _extends({}, spinClassProps));
  };
  SpinFC.setDefaultIndicator = function(indicator) {
    defaultIndicator = indicator;
  };
  if (true) {
    SpinFC.displayName = "Spin";
  }
  var spin_default = SpinFC;

  // node_modules/antd/es/list/Item.js
  var import_classnames123 = __toESM(require_classnames());
  var import_react96 = __toESM(require_react());
  var __rest46 = function(s2, e3) {
    var t4 = {};
    for (var p2 in s2)
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t4[p2] = s2[p2];
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t4[p2[i3]] = s2[p2[i3]];
      }
    return t4;
  };
  var Meta3 = function Meta4(_a) {
    var customizePrefixCls = _a.prefixCls, className = _a.className, avatar = _a.avatar, title = _a.title, description = _a.description, others = __rest46(_a, ["prefixCls", "className", "avatar", "title", "description"]);
    var _useContext = (0, import_react96.useContext)(ConfigContext), getPrefixCls = _useContext.getPrefixCls;
    var prefixCls = getPrefixCls("list", customizePrefixCls);
    var classString = (0, import_classnames123.default)("".concat(prefixCls, "-item-meta"), className);
    var content = /* @__PURE__ */ import_react96.default.createElement("div", {
      className: "".concat(prefixCls, "-item-meta-content")
    }, title && /* @__PURE__ */ import_react96.default.createElement("h4", {
      className: "".concat(prefixCls, "-item-meta-title")
    }, title), description && /* @__PURE__ */ import_react96.default.createElement("div", {
      className: "".concat(prefixCls, "-item-meta-description")
    }, description));
    return /* @__PURE__ */ import_react96.default.createElement("div", _extends({}, others, {
      className: classString
    }), avatar && /* @__PURE__ */ import_react96.default.createElement("div", {
      className: "".concat(prefixCls, "-item-meta-avatar")
    }, avatar), (title || description) && content);
  };
  var InternalItem2 = function InternalItem3(_a, ref) {
    var customizePrefixCls = _a.prefixCls, children = _a.children, actions = _a.actions, extra = _a.extra, className = _a.className, colStyle = _a.colStyle, others = __rest46(_a, ["prefixCls", "children", "actions", "extra", "className", "colStyle"]);
    var _useContext2 = (0, import_react96.useContext)(ListContext2), grid = _useContext2.grid, itemLayout = _useContext2.itemLayout;
    var _useContext3 = (0, import_react96.useContext)(ConfigContext), getPrefixCls = _useContext3.getPrefixCls;
    var isItemContainsTextNodeAndNotSingular = function isItemContainsTextNodeAndNotSingular2() {
      var result2;
      import_react96.Children.forEach(children, function(element) {
        if (typeof element === "string") {
          result2 = true;
        }
      });
      return result2 && import_react96.Children.count(children) > 1;
    };
    var isFlexMode = function isFlexMode2() {
      if (itemLayout === "vertical") {
        return !!extra;
      }
      return !isItemContainsTextNodeAndNotSingular();
    };
    var prefixCls = getPrefixCls("list", customizePrefixCls);
    var actionsContent = actions && actions.length > 0 && /* @__PURE__ */ import_react96.default.createElement("ul", {
      className: "".concat(prefixCls, "-item-action"),
      key: "actions"
    }, actions.map(function(action, i3) {
      return (
        // eslint-disable-next-line react/no-array-index-key
        /* @__PURE__ */ import_react96.default.createElement("li", {
          key: "".concat(prefixCls, "-item-action-").concat(i3)
        }, action, i3 !== actions.length - 1 && /* @__PURE__ */ import_react96.default.createElement("em", {
          className: "".concat(prefixCls, "-item-action-split")
        }))
      );
    }));
    var Element4 = grid ? "div" : "li";
    var itemChildren = /* @__PURE__ */ import_react96.default.createElement(Element4, _extends({}, others, !grid ? {
      ref
    } : {}, {
      className: (0, import_classnames123.default)("".concat(prefixCls, "-item"), _defineProperty({}, "".concat(prefixCls, "-item-no-flex"), !isFlexMode()), className)
    }), itemLayout === "vertical" && extra ? [/* @__PURE__ */ import_react96.default.createElement("div", {
      className: "".concat(prefixCls, "-item-main"),
      key: "content"
    }, children, actionsContent), /* @__PURE__ */ import_react96.default.createElement("div", {
      className: "".concat(prefixCls, "-item-extra"),
      key: "extra"
    }, extra)] : [children, actionsContent, cloneElement4(extra, {
      key: "extra"
    })]);
    return grid ? /* @__PURE__ */ import_react96.default.createElement(col_default, {
      ref,
      flex: 1,
      style: colStyle
    }, itemChildren) : itemChildren;
  };
  var Item4 = /* @__PURE__ */ (0, import_react96.forwardRef)(InternalItem2);
  Item4.Meta = Meta3;
  var Item_default2 = Item4;

  // node_modules/antd/es/list/index.js
  var __rest47 = function(s2, e3) {
    var t4 = {};
    for (var p2 in s2)
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t4[p2] = s2[p2];
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t4[p2[i3]] = s2[p2[i3]];
      }
    return t4;
  };
  var ListContext2 = /* @__PURE__ */ React310.createContext({});
  var ListConsumer = ListContext2.Consumer;
  function List4(_a) {
    var _classNames;
    var _a$pagination = _a.pagination, pagination = _a$pagination === void 0 ? false : _a$pagination, customizePrefixCls = _a.prefixCls, _a$bordered = _a.bordered, bordered = _a$bordered === void 0 ? false : _a$bordered, _a$split = _a.split, split = _a$split === void 0 ? true : _a$split, className = _a.className, children = _a.children, itemLayout = _a.itemLayout, loadMore = _a.loadMore, grid = _a.grid, _a$dataSource = _a.dataSource, dataSource = _a$dataSource === void 0 ? [] : _a$dataSource, size = _a.size, header = _a.header, footer = _a.footer, _a$loading = _a.loading, loading = _a$loading === void 0 ? false : _a$loading, rowKey = _a.rowKey, renderItem = _a.renderItem, locale4 = _a.locale, rest = __rest47(_a, ["pagination", "prefixCls", "bordered", "split", "className", "children", "itemLayout", "loadMore", "grid", "dataSource", "size", "header", "footer", "loading", "rowKey", "renderItem", "locale"]);
    var paginationObj = pagination && _typeof(pagination) === "object" ? pagination : {};
    var _React$useState = React310.useState(paginationObj.defaultCurrent || 1), _React$useState2 = _slicedToArray(_React$useState, 2), paginationCurrent = _React$useState2[0], setPaginationCurrent = _React$useState2[1];
    var _React$useState3 = React310.useState(paginationObj.defaultPageSize || 10), _React$useState4 = _slicedToArray(_React$useState3, 2), paginationSize = _React$useState4[0], setPaginationSize = _React$useState4[1];
    var _React$useContext = React310.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls, renderEmpty = _React$useContext.renderEmpty, direction = _React$useContext.direction;
    var defaultPaginationProps = {
      current: 1,
      total: 0
    };
    var triggerPaginationEvent = function triggerPaginationEvent2(eventName) {
      return function(page, pageSize) {
        setPaginationCurrent(page);
        setPaginationSize(pageSize);
        if (pagination && pagination[eventName]) {
          pagination[eventName](page, pageSize);
        }
      };
    };
    var onPaginationChange = triggerPaginationEvent("onChange");
    var onPaginationShowSizeChange = triggerPaginationEvent("onShowSizeChange");
    var renderInnerItem = function renderInnerItem2(item, index2) {
      if (!renderItem)
        return null;
      var key2;
      if (typeof rowKey === "function") {
        key2 = rowKey(item);
      } else if (rowKey) {
        key2 = item[rowKey];
      } else {
        key2 = item.key;
      }
      if (!key2) {
        key2 = "list-item-".concat(index2);
      }
      return /* @__PURE__ */ React310.createElement(React310.Fragment, {
        key: key2
      }, renderItem(item, index2));
    };
    var isSomethingAfterLastItem = function isSomethingAfterLastItem2() {
      return !!(loadMore || pagination || footer);
    };
    var renderEmptyFunc = function renderEmptyFunc2(prefixCls2, renderEmptyHandler) {
      return /* @__PURE__ */ React310.createElement("div", {
        className: "".concat(prefixCls2, "-empty-text")
      }, locale4 && locale4.emptyText || renderEmptyHandler("List"));
    };
    var prefixCls = getPrefixCls("list", customizePrefixCls);
    var loadingProp = loading;
    if (typeof loadingProp === "boolean") {
      loadingProp = {
        spinning: loadingProp
      };
    }
    var isLoading = loadingProp && loadingProp.spinning;
    var sizeCls = "";
    switch (size) {
      case "large":
        sizeCls = "lg";
        break;
      case "small":
        sizeCls = "sm";
        break;
      default:
        break;
    }
    var classString = (0, import_classnames124.default)(prefixCls, (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-vertical"), itemLayout === "vertical"), _defineProperty(_classNames, "".concat(prefixCls, "-").concat(sizeCls), sizeCls), _defineProperty(_classNames, "".concat(prefixCls, "-split"), split), _defineProperty(_classNames, "".concat(prefixCls, "-bordered"), bordered), _defineProperty(_classNames, "".concat(prefixCls, "-loading"), isLoading), _defineProperty(_classNames, "".concat(prefixCls, "-grid"), !!grid), _defineProperty(_classNames, "".concat(prefixCls, "-something-after-last-item"), isSomethingAfterLastItem()), _defineProperty(_classNames, "".concat(prefixCls, "-rtl"), direction === "rtl"), _classNames), className);
    var paginationProps = _extends(_extends(_extends({}, defaultPaginationProps), {
      total: dataSource.length,
      current: paginationCurrent,
      pageSize: paginationSize
    }), pagination || {});
    var largestPage = Math.ceil(paginationProps.total / paginationProps.pageSize);
    if (paginationProps.current > largestPage) {
      paginationProps.current = largestPage;
    }
    var paginationContent = pagination ? /* @__PURE__ */ React310.createElement("div", {
      className: "".concat(prefixCls, "-pagination")
    }, /* @__PURE__ */ React310.createElement(pagination_default, _extends({}, paginationProps, {
      onChange: onPaginationChange,
      onShowSizeChange: onPaginationShowSizeChange
    }))) : null;
    var splitDataSource = _toConsumableArray(dataSource);
    if (pagination) {
      if (dataSource.length > (paginationProps.current - 1) * paginationProps.pageSize) {
        splitDataSource = _toConsumableArray(dataSource).splice((paginationProps.current - 1) * paginationProps.pageSize, paginationProps.pageSize);
      }
    }
    var needResponsive = Object.keys(grid || {}).some(function(key2) {
      return ["xs", "sm", "md", "lg", "xl", "xxl"].includes(key2);
    });
    var screens2 = useBreakpoint_default(needResponsive);
    var currentBreakpoint = React310.useMemo(function() {
      for (var i3 = 0; i3 < responsiveArray.length; i3 += 1) {
        var breakpoint = responsiveArray[i3];
        if (screens2[breakpoint]) {
          return breakpoint;
        }
      }
      return void 0;
    }, [screens2]);
    var colStyle = React310.useMemo(function() {
      if (!grid) {
        return void 0;
      }
      var columnCount = currentBreakpoint && grid[currentBreakpoint] ? grid[currentBreakpoint] : grid.column;
      if (columnCount) {
        return {
          width: "".concat(100 / columnCount, "%"),
          maxWidth: "".concat(100 / columnCount, "%")
        };
      }
    }, [grid === null || grid === void 0 ? void 0 : grid.column, currentBreakpoint]);
    var childrenContent = isLoading && /* @__PURE__ */ React310.createElement("div", {
      style: {
        minHeight: 53
      }
    });
    if (splitDataSource.length > 0) {
      var items = splitDataSource.map(function(item, index2) {
        return renderInnerItem(item, index2);
      });
      childrenContent = grid ? /* @__PURE__ */ React310.createElement(row_default, {
        gutter: grid.gutter
      }, React310.Children.map(items, function(child) {
        return /* @__PURE__ */ React310.createElement("div", {
          key: child === null || child === void 0 ? void 0 : child.key,
          style: colStyle
        }, child);
      })) : /* @__PURE__ */ React310.createElement("ul", {
        className: "".concat(prefixCls, "-items")
      }, items);
    } else if (!children && !isLoading) {
      childrenContent = renderEmptyFunc(prefixCls, renderEmpty || defaultRenderEmpty_default);
    }
    var paginationPosition = paginationProps.position || "bottom";
    var contextValue = React310.useMemo(function() {
      return {
        grid,
        itemLayout
      };
    }, [JSON.stringify(grid), itemLayout]);
    return /* @__PURE__ */ React310.createElement(ListContext2.Provider, {
      value: contextValue
    }, /* @__PURE__ */ React310.createElement("div", _extends({
      className: classString
    }, rest), (paginationPosition === "top" || paginationPosition === "both") && paginationContent, header && /* @__PURE__ */ React310.createElement("div", {
      className: "".concat(prefixCls, "-header")
    }, header), /* @__PURE__ */ React310.createElement(spin_default, _extends({}, loadingProp), childrenContent, children), footer && /* @__PURE__ */ React310.createElement("div", {
      className: "".concat(prefixCls, "-footer")
    }, footer), loadMore || (paginationPosition === "bottom" || paginationPosition === "both") && paginationContent));
  }
  List4.Item = Item_default2;
  var list_default = List4;

  // node_modules/antd/es/_util/transButton.js
  var React311 = __toESM(require_react());
  var __rest48 = function(s2, e3) {
    var t4 = {};
    for (var p2 in s2)
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t4[p2] = s2[p2];
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t4[p2[i3]] = s2[p2[i3]];
      }
    return t4;
  };
  var inlineStyle = {
    border: 0,
    background: "transparent",
    padding: 0,
    lineHeight: "inherit",
    display: "inline-block"
  };
  var TransButton = /* @__PURE__ */ React311.forwardRef(function(props, ref) {
    var onKeyDown3 = function onKeyDown4(event) {
      var keyCode = event.keyCode;
      if (keyCode === KeyCode_default.ENTER) {
        event.preventDefault();
      }
    };
    var onKeyUp = function onKeyUp2(event) {
      var keyCode = event.keyCode;
      var onClick = props.onClick;
      if (keyCode === KeyCode_default.ENTER && onClick) {
        onClick();
      }
    };
    var style3 = props.style, noStyle = props.noStyle, disabled = props.disabled, restProps = __rest48(props, ["style", "noStyle", "disabled"]);
    var mergedStyle = {};
    if (!noStyle) {
      mergedStyle = _extends({}, inlineStyle);
    }
    if (disabled) {
      mergedStyle.pointerEvents = "none";
    }
    mergedStyle = _extends(_extends({}, mergedStyle), style3);
    return /* @__PURE__ */ React311.createElement("div", _extends({
      role: "button",
      tabIndex: 0,
      ref
    }, restProps, {
      onKeyDown: onKeyDown3,
      onKeyUp,
      style: mergedStyle
    }));
  });
  var transButton_default = TransButton;

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/StarFilled.js
  var React312 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/StarFilled.js
  var StarFilled = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M908.1 353.1l-253.9-36.9L540.7 86.1c-3.1-6.3-8.2-11.4-14.5-14.5-15.8-7.8-35-1.3-42.9 14.5L369.8 316.2l-253.9 36.9c-7 1-13.4 4.3-18.3 9.3a32.05 32.05 0 00.6 45.3l183.7 179.1-43.4 252.9a31.95 31.95 0 0046.4 33.7L512 754l227.1 119.4c6.2 3.3 13.4 4.4 20.3 3.2 17.4-3 29.1-19.5 26.1-36.9l-43.4-252.9 183.7-179.1c5-4.9 8.3-11.3 9.3-18.3 2.7-17.5-9.5-33.7-27-36.3z" } }] }, "name": "star", "theme": "filled" };
  var StarFilled_default = StarFilled;

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/StarFilled.js
  var StarFilled2 = function StarFilled3(props, ref) {
    return /* @__PURE__ */ React312.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: StarFilled_default
    }));
  };
  StarFilled2.displayName = "StarFilled";
  var StarFilled_default2 = /* @__PURE__ */ React312.forwardRef(StarFilled2);

  // node_modules/rc-rate/es/Rate.js
  var import_react98 = __toESM(require_react());
  var import_classnames125 = __toESM(require_classnames());

  // node_modules/rc-rate/es/util.js
  function getScroll4(w2) {
    var ret = w2.pageXOffset;
    var method4 = "scrollLeft";
    if (typeof ret !== "number") {
      var d2 = w2.document;
      ret = d2.documentElement[method4];
      if (typeof ret !== "number") {
        ret = d2.body[method4];
      }
    }
    return ret;
  }
  function getClientPosition2(elem) {
    var x2;
    var y2;
    var doc = elem.ownerDocument;
    var body = doc.body;
    var docElem = doc && doc.documentElement;
    var box = elem.getBoundingClientRect();
    x2 = box.left;
    y2 = box.top;
    x2 -= docElem.clientLeft || body.clientLeft || 0;
    y2 -= docElem.clientTop || body.clientTop || 0;
    return {
      left: x2,
      top: y2
    };
  }
  function getOffsetLeft(el) {
    var pos = getClientPosition2(el);
    var doc = el.ownerDocument;
    var w2 = doc.defaultView || doc.parentWindow;
    pos.left += getScroll4(w2);
    return pos.left;
  }

  // node_modules/rc-rate/es/Star.js
  var import_react97 = __toESM(require_react());
  var Star = /* @__PURE__ */ function(_React$Component) {
    _inherits(Star2, _React$Component);
    var _super = _createSuper(Star2);
    function Star2() {
      var _this;
      _classCallCheck(this, Star2);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _super.call.apply(_super, [this].concat(args));
      _this.onHover = function(e3) {
        var _this$props = _this.props, onHover = _this$props.onHover, index2 = _this$props.index;
        onHover(e3, index2);
      };
      _this.onClick = function(e3) {
        var _this$props2 = _this.props, onClick = _this$props2.onClick, index2 = _this$props2.index;
        onClick(e3, index2);
      };
      _this.onKeyDown = function(e3) {
        var _this$props3 = _this.props, onClick = _this$props3.onClick, index2 = _this$props3.index;
        if (e3.keyCode === 13) {
          onClick(e3, index2);
        }
      };
      return _this;
    }
    _createClass(Star2, [{
      key: "getClassName",
      value: function getClassName() {
        var _this$props4 = this.props, prefixCls = _this$props4.prefixCls, index2 = _this$props4.index, value = _this$props4.value, allowHalf = _this$props4.allowHalf, focused = _this$props4.focused;
        var starValue = index2 + 1;
        var className = prefixCls;
        if (value === 0 && index2 === 0 && focused) {
          className += " ".concat(prefixCls, "-focused");
        } else if (allowHalf && value + 0.5 >= starValue && value < starValue) {
          className += " ".concat(prefixCls, "-half ").concat(prefixCls, "-active");
          if (focused) {
            className += " ".concat(prefixCls, "-focused");
          }
        } else {
          className += starValue <= value ? " ".concat(prefixCls, "-full") : " ".concat(prefixCls, "-zero");
          if (starValue === value && focused) {
            className += " ".concat(prefixCls, "-focused");
          }
        }
        return className;
      }
    }, {
      key: "render",
      value: function render2() {
        var onHover = this.onHover, onClick = this.onClick, onKeyDown3 = this.onKeyDown;
        var _this$props5 = this.props, disabled = _this$props5.disabled, prefixCls = _this$props5.prefixCls, character = _this$props5.character, characterRender = _this$props5.characterRender, index2 = _this$props5.index, count = _this$props5.count, value = _this$props5.value;
        var characterNode = typeof character === "function" ? character(this.props) : character;
        var start = /* @__PURE__ */ import_react97.default.createElement("li", {
          className: this.getClassName()
        }, /* @__PURE__ */ import_react97.default.createElement("div", {
          onClick: disabled ? null : onClick,
          onKeyDown: disabled ? null : onKeyDown3,
          onMouseMove: disabled ? null : onHover,
          role: "radio",
          "aria-checked": value > index2 ? "true" : "false",
          "aria-posinset": index2 + 1,
          "aria-setsize": count,
          tabIndex: disabled ? -1 : 0
        }, /* @__PURE__ */ import_react97.default.createElement("div", {
          className: "".concat(prefixCls, "-first")
        }, characterNode), /* @__PURE__ */ import_react97.default.createElement("div", {
          className: "".concat(prefixCls, "-second")
        }, characterNode)));
        if (characterRender) {
          start = characterRender(start, this.props);
        }
        return start;
      }
    }]);
    return Star2;
  }(import_react97.default.Component);

  // node_modules/rc-rate/es/Rate.js
  function noop4() {
  }
  var Rate = /* @__PURE__ */ function(_React$Component) {
    _inherits(Rate3, _React$Component);
    var _super = _createSuper(Rate3);
    function Rate3(props) {
      var _this;
      _classCallCheck(this, Rate3);
      _this = _super.call(this, props);
      _this.stars = void 0;
      _this.rate = void 0;
      _this.onHover = function(event, index2) {
        var onHoverChange = _this.props.onHoverChange;
        var hoverValue = _this.getStarValue(index2, event.pageX);
        var cleanedValue = _this.state.cleanedValue;
        if (hoverValue !== cleanedValue) {
          _this.setState({
            hoverValue,
            cleanedValue: null
          });
        }
        onHoverChange(hoverValue);
      };
      _this.onMouseLeave = function() {
        var onHoverChange = _this.props.onHoverChange;
        _this.setState({
          hoverValue: void 0,
          cleanedValue: null
        });
        onHoverChange(void 0);
      };
      _this.onClick = function(event, index2) {
        var allowClear = _this.props.allowClear;
        var value = _this.state.value;
        var newValue = _this.getStarValue(index2, event.pageX);
        var isReset = false;
        if (allowClear) {
          isReset = newValue === value;
        }
        _this.onMouseLeave();
        _this.changeValue(isReset ? 0 : newValue);
        _this.setState({
          cleanedValue: isReset ? newValue : null
        });
      };
      _this.onFocus = function() {
        var onFocus = _this.props.onFocus;
        _this.setState({
          focused: true
        });
        if (onFocus) {
          onFocus();
        }
      };
      _this.onBlur = function() {
        var onBlur = _this.props.onBlur;
        _this.setState({
          focused: false
        });
        if (onBlur) {
          onBlur();
        }
      };
      _this.onKeyDown = function(event) {
        var keyCode = event.keyCode;
        var _this$props = _this.props, count = _this$props.count, allowHalf = _this$props.allowHalf, onKeyDown3 = _this$props.onKeyDown, direction = _this$props.direction;
        var reverse = direction === "rtl";
        var value = _this.state.value;
        if (keyCode === KeyCode_default.RIGHT && value < count && !reverse) {
          if (allowHalf) {
            value += 0.5;
          } else {
            value += 1;
          }
          _this.changeValue(value);
          event.preventDefault();
        } else if (keyCode === KeyCode_default.LEFT && value > 0 && !reverse) {
          if (allowHalf) {
            value -= 0.5;
          } else {
            value -= 1;
          }
          _this.changeValue(value);
          event.preventDefault();
        } else if (keyCode === KeyCode_default.RIGHT && value > 0 && reverse) {
          if (allowHalf) {
            value -= 0.5;
          } else {
            value -= 1;
          }
          _this.changeValue(value);
          event.preventDefault();
        } else if (keyCode === KeyCode_default.LEFT && value < count && reverse) {
          if (allowHalf) {
            value += 0.5;
          } else {
            value += 1;
          }
          _this.changeValue(value);
          event.preventDefault();
        }
        if (onKeyDown3) {
          onKeyDown3(event);
        }
      };
      _this.saveRef = function(index2) {
        return function(node) {
          _this.stars[index2] = node;
        };
      };
      _this.saveRate = function(node) {
        _this.rate = node;
      };
      var _value = props.value;
      if (_value === void 0) {
        _value = props.defaultValue;
      }
      _this.stars = {};
      _this.state = {
        value: _value,
        focused: false,
        cleanedValue: null
      };
      return _this;
    }
    _createClass(Rate3, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this$props2 = this.props, autoFocus = _this$props2.autoFocus, disabled = _this$props2.disabled;
        if (autoFocus && !disabled) {
          this.focus();
        }
      }
    }, {
      key: "getStarDOM",
      value: function getStarDOM(index2) {
        return findDOMNode(this.stars[index2]);
      }
    }, {
      key: "getStarValue",
      value: function getStarValue(index2, x2) {
        var _this$props3 = this.props, allowHalf = _this$props3.allowHalf, direction = _this$props3.direction;
        var reverse = direction === "rtl";
        var value = index2 + 1;
        if (allowHalf) {
          var starEle = this.getStarDOM(index2);
          var leftDis = getOffsetLeft(starEle);
          var width = starEle.clientWidth;
          if (reverse && x2 - leftDis > width / 2) {
            value -= 0.5;
          } else if (!reverse && x2 - leftDis < width / 2) {
            value -= 0.5;
          }
        }
        return value;
      }
    }, {
      key: "focus",
      value: function focus() {
        var disabled = this.props.disabled;
        if (!disabled) {
          this.rate.focus();
        }
      }
    }, {
      key: "blur",
      value: function blur() {
        var disabled = this.props.disabled;
        if (!disabled) {
          this.rate.blur();
        }
      }
    }, {
      key: "changeValue",
      value: function changeValue(value) {
        var onChange = this.props.onChange;
        if (!("value" in this.props)) {
          this.setState({
            value
          });
        }
        onChange(value);
      }
    }, {
      key: "render",
      value: function render2() {
        var _this$props4 = this.props, count = _this$props4.count, allowHalf = _this$props4.allowHalf, style3 = _this$props4.style, id2 = _this$props4.id, prefixCls = _this$props4.prefixCls, disabled = _this$props4.disabled, className = _this$props4.className, character = _this$props4.character, characterRender = _this$props4.characterRender, tabIndex = _this$props4.tabIndex, direction = _this$props4.direction;
        var _this$state = this.state, value = _this$state.value, hoverValue = _this$state.hoverValue, focused = _this$state.focused;
        var stars = [];
        var disabledClass = disabled ? "".concat(prefixCls, "-disabled") : "";
        for (var index2 = 0; index2 < count; index2 += 1) {
          stars.push(/* @__PURE__ */ import_react98.default.createElement(Star, {
            ref: this.saveRef(index2),
            index: index2,
            count,
            disabled,
            prefixCls: "".concat(prefixCls, "-star"),
            allowHalf,
            value: hoverValue === void 0 ? value : hoverValue,
            onClick: this.onClick,
            onHover: this.onHover,
            key: index2,
            character,
            characterRender,
            focused
          }));
        }
        var rateClassName = (0, import_classnames125.default)(prefixCls, disabledClass, className, _defineProperty({}, "".concat(prefixCls, "-rtl"), direction === "rtl"));
        return /* @__PURE__ */ import_react98.default.createElement("ul", {
          className: rateClassName,
          style: style3,
          id: id2,
          onMouseLeave: disabled ? null : this.onMouseLeave,
          tabIndex: disabled ? -1 : tabIndex,
          onFocus: disabled ? null : this.onFocus,
          onBlur: disabled ? null : this.onBlur,
          onKeyDown: disabled ? null : this.onKeyDown,
          ref: this.saveRate,
          role: "radiogroup"
        }, stars);
      }
    }], [{
      key: "getDerivedStateFromProps",
      value: function getDerivedStateFromProps(nextProps, state) {
        if ("value" in nextProps && nextProps.value !== void 0) {
          return _objectSpread2(_objectSpread2({}, state), {}, {
            value: nextProps.value
          });
        }
        return state;
      }
    }]);
    return Rate3;
  }(import_react98.default.Component);
  Rate.defaultProps = {
    defaultValue: 0,
    count: 5,
    allowHalf: false,
    allowClear: true,
    style: {},
    prefixCls: "rc-rate",
    onChange: noop4,
    character: "\u2605",
    onHoverChange: noop4,
    tabIndex: 0,
    direction: "ltr"
  };
  var Rate_default = Rate;

  // node_modules/rc-rate/es/index.js
  var es_default24 = Rate_default;

  // node_modules/antd/es/rate/index.js
  var React315 = __toESM(require_react());
  var __rest49 = function(s2, e3) {
    var t4 = {};
    for (var p2 in s2)
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t4[p2] = s2[p2];
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t4[p2[i3]] = s2[p2[i3]];
      }
    return t4;
  };
  var Rate2 = /* @__PURE__ */ React315.forwardRef(function(props, ref) {
    var prefixCls = props.prefixCls, tooltips = props.tooltips, _props$character = props.character, character = _props$character === void 0 ? /* @__PURE__ */ React315.createElement(StarFilled_default2, null) : _props$character, rest = __rest49(props, ["prefixCls", "tooltips", "character"]);
    var characterRender = function characterRender2(node, _ref) {
      var index2 = _ref.index;
      if (!tooltips) {
        return node;
      }
      return /* @__PURE__ */ React315.createElement(tooltip_default, {
        title: tooltips[index2]
      }, node);
    };
    var _React$useContext = React315.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls, direction = _React$useContext.direction;
    var ratePrefixCls = getPrefixCls("rate", prefixCls);
    return /* @__PURE__ */ React315.createElement(es_default24, _extends({
      ref,
      character,
      characterRender
    }, rest, {
      prefixCls: ratePrefixCls,
      direction
    }));
  });
  if (true) {
    Rate2.displayName = "Rate";
  }
  var rate_default = Rate2;

  // node_modules/antd/es/row/index.js
  var row_default2 = row_default;

  // node_modules/antd/es/table/Table.js
  var import_classnames142 = __toESM(require_classnames());

  // node_modules/rc-table/es/Table.js
  var React343 = __toESM(require_react());
  var import_classnames131 = __toESM(require_classnames());
  var import_shallowequal3 = __toESM(require_shallowequal());

  // node_modules/rc-table/es/sugar/ColumnGroup.js
  function ColumnGroup(_24) {
    return null;
  }
  var ColumnGroup_default = ColumnGroup;

  // node_modules/rc-table/es/sugar/Column.js
  function Column(_24) {
    return null;
  }
  var Column_default = Column;

  // node_modules/rc-table/es/Header/Header.js
  var React323 = __toESM(require_react());

  // node_modules/rc-table/es/Header/HeaderRow.js
  var React322 = __toESM(require_react());

  // node_modules/rc-table/es/Cell/index.js
  var React320 = __toESM(require_react());
  var import_classnames126 = __toESM(require_classnames());
  var import_shallowequal2 = __toESM(require_shallowequal());

  // node_modules/rc-table/es/utils/valueUtil.js
  var INTERNAL_KEY_PREFIX = "RC_TABLE_KEY";
  function toArray7(arr) {
    if (arr === void 0 || arr === null) {
      return [];
    }
    return Array.isArray(arr) ? arr : [arr];
  }
  function getPathValue(record, path2) {
    if (!path2 && typeof path2 !== "number") {
      return record;
    }
    var pathList = toArray7(path2);
    var current = record;
    for (var i3 = 0; i3 < pathList.length; i3 += 1) {
      if (!current) {
        return null;
      }
      var prop = pathList[i3];
      current = current[prop];
    }
    return current;
  }
  function getColumnsKey(columns4) {
    var columnKeys = [];
    var keys2 = {};
    columns4.forEach(function(column) {
      var _ref = column || {}, key2 = _ref.key, dataIndex = _ref.dataIndex;
      var mergedKey = key2 || toArray7(dataIndex).join("-") || INTERNAL_KEY_PREFIX;
      while (keys2[mergedKey]) {
        mergedKey = "".concat(mergedKey, "_next");
      }
      keys2[mergedKey] = true;
      columnKeys.push(mergedKey);
    });
    return columnKeys;
  }
  function validateValue(val) {
    return val !== null && val !== void 0;
  }

  // node_modules/rc-table/es/context/StickyContext.js
  var React316 = __toESM(require_react());
  var StickyContext = /* @__PURE__ */ React316.createContext(false);
  var StickyContext_default = StickyContext;

  // node_modules/rc-table/es/ContextSelector/index.js
  var React317 = __toESM(require_react());
  var import_shallowequal = __toESM(require_shallowequal());
  function createContext40() {
    var Context3 = /* @__PURE__ */ React317.createContext(null);
    var Provider3 = function Provider4(_ref) {
      var value = _ref.value, children = _ref.children;
      var valueRef = React317.useRef(value);
      valueRef.current = value;
      var _React$useState = React317.useState(function() {
        return {
          getValue: function getValue5() {
            return valueRef.current;
          },
          listeners: /* @__PURE__ */ new Set()
        };
      }), _React$useState2 = _slicedToArray(_React$useState, 1), context2 = _React$useState2[0];
      useLayoutEffect_default(function() {
        context2.listeners.forEach(function(listener2) {
          listener2(value);
        });
      }, [value]);
      return /* @__PURE__ */ React317.createElement(Context3.Provider, {
        value: context2
      }, children);
    };
    return {
      Context: Context3,
      Provider: Provider3
    };
  }
  function useContextSelector(holder, selector) {
    var eventSelector = useEvent(selector);
    var context2 = React317.useContext(holder === null || holder === void 0 ? void 0 : holder.Context);
    var _ref2 = context2 || {}, listeners = _ref2.listeners, getValue5 = _ref2.getValue;
    var _React$useState3 = React317.useState(function() {
      return eventSelector(context2 ? getValue5() : null);
    }), _React$useState4 = _slicedToArray(_React$useState3, 2), value = _React$useState4[0], setValue = _React$useState4[1];
    useLayoutEffect_default(function() {
      if (!context2) {
        return;
      }
      function trigger(nextValue) {
        setValue(function(prev) {
          var selectedValue = eventSelector(nextValue);
          return (0, import_shallowequal.default)(prev, selectedValue) ? prev : selectedValue;
        });
      }
      listeners.add(trigger);
      return function() {
        listeners.delete(trigger);
      };
    }, [context2]);
    return value;
  }

  // node_modules/rc-table/es/context/HoverContext.js
  var HoverContext = createContext40();
  var HoverContext_default = HoverContext;

  // node_modules/rc-table/es/context/BodyContext.js
  var React318 = __toESM(require_react());
  var BodyContext = /* @__PURE__ */ React318.createContext(null);
  var BodyContext_default = BodyContext;

  // node_modules/rc-table/es/context/PerfContext.js
  var React319 = __toESM(require_react());
  var PerfContext = /* @__PURE__ */ React319.createContext({
    renderWithProps: false
  });
  var PerfContext_default = PerfContext;

  // node_modules/rc-table/es/Cell/index.js
  var _excluded47 = ["colSpan", "rowSpan", "style", "className"];
  function inHoverRange(cellStartRow, cellRowSpan, startRow, endRow) {
    var cellEndRow = cellStartRow + cellRowSpan - 1;
    return cellStartRow <= endRow && cellEndRow >= startRow;
  }
  function isRenderCell(data) {
    return data && _typeof(data) === "object" && !Array.isArray(data) && !/* @__PURE__ */ React320.isValidElement(data);
  }
  function isRefComponent(component) {
    if (typeof component === "string") {
      return true;
    }
    return supportRef(component);
  }
  var getTitleFromCellRenderChildren = function getTitleFromCellRenderChildren2(_ref) {
    var ellipsis = _ref.ellipsis, rowType = _ref.rowType, children = _ref.children;
    var title;
    var ellipsisConfig = ellipsis === true ? {
      showTitle: true
    } : ellipsis;
    if (ellipsisConfig && (ellipsisConfig.showTitle || rowType === "header")) {
      if (typeof children === "string" || typeof children === "number") {
        title = children.toString();
      } else if (/* @__PURE__ */ React320.isValidElement(children) && typeof children.props.children === "string") {
        title = children.props.children;
      }
    }
    return title;
  };
  function Cell(_ref2, ref) {
    var _ref4, _ref5, _classNames;
    var prefixCls = _ref2.prefixCls, className = _ref2.className, record = _ref2.record, index2 = _ref2.index, renderIndex = _ref2.renderIndex, dataIndex = _ref2.dataIndex, render2 = _ref2.render, children = _ref2.children, _ref2$component = _ref2.component, Component20 = _ref2$component === void 0 ? "td" : _ref2$component, colSpan = _ref2.colSpan, rowSpan = _ref2.rowSpan, fixLeft = _ref2.fixLeft, fixRight = _ref2.fixRight, firstFixLeft = _ref2.firstFixLeft, lastFixLeft = _ref2.lastFixLeft, firstFixRight = _ref2.firstFixRight, lastFixRight = _ref2.lastFixRight, appendNode = _ref2.appendNode, _ref2$additionalProps = _ref2.additionalProps, additionalProps = _ref2$additionalProps === void 0 ? {} : _ref2$additionalProps, ellipsis = _ref2.ellipsis, align = _ref2.align, rowType = _ref2.rowType, isSticky = _ref2.isSticky, hovering = _ref2.hovering, onHover = _ref2.onHover;
    var cellPrefixCls = "".concat(prefixCls, "-cell");
    var perfRecord = React320.useContext(PerfContext_default);
    var supportSticky = React320.useContext(StickyContext_default);
    var _React$useContext = React320.useContext(BodyContext_default), allColumnsFixedLeft = _React$useContext.allColumnsFixedLeft;
    var _React$useMemo = React320.useMemo(function() {
      if (validateValue(children)) {
        return [children];
      }
      var value = getPathValue(record, dataIndex);
      var returnChildNode = value;
      var returnCellProps = void 0;
      if (render2) {
        var renderData = render2(value, record, renderIndex);
        if (isRenderCell(renderData)) {
          if (true) {
            warning_default(false, "`columns.render` return cell props is deprecated with perf issue, please use `onCell` instead.");
          }
          returnChildNode = renderData.children;
          returnCellProps = renderData.props;
          perfRecord.renderWithProps = true;
        } else {
          returnChildNode = renderData;
        }
      }
      return [returnChildNode, returnCellProps];
    }, [
      /* eslint-disable react-hooks/exhaustive-deps */
      // Always re-render if `renderWithProps`
      perfRecord.renderWithProps ? Math.random() : 0,
      /* eslint-enable */
      children,
      dataIndex,
      perfRecord,
      record,
      render2,
      renderIndex
    ]), _React$useMemo2 = _slicedToArray(_React$useMemo, 2), childNode = _React$useMemo2[0], legacyCellProps = _React$useMemo2[1];
    var mergedChildNode = childNode;
    if (_typeof(mergedChildNode) === "object" && !Array.isArray(mergedChildNode) && !/* @__PURE__ */ React320.isValidElement(mergedChildNode)) {
      mergedChildNode = null;
    }
    if (ellipsis && (lastFixLeft || firstFixRight)) {
      mergedChildNode = /* @__PURE__ */ React320.createElement("span", {
        className: "".concat(cellPrefixCls, "-content")
      }, mergedChildNode);
    }
    var _ref3 = legacyCellProps || {}, cellColSpan = _ref3.colSpan, cellRowSpan = _ref3.rowSpan, cellStyle = _ref3.style, cellClassName = _ref3.className, restCellProps = _objectWithoutProperties(_ref3, _excluded47);
    var mergedColSpan = (_ref4 = cellColSpan !== void 0 ? cellColSpan : colSpan) !== null && _ref4 !== void 0 ? _ref4 : 1;
    var mergedRowSpan = (_ref5 = cellRowSpan !== void 0 ? cellRowSpan : rowSpan) !== null && _ref5 !== void 0 ? _ref5 : 1;
    if (mergedColSpan === 0 || mergedRowSpan === 0) {
      return null;
    }
    var fixedStyle = {};
    var isFixLeft = typeof fixLeft === "number" && supportSticky;
    var isFixRight = typeof fixRight === "number" && supportSticky;
    if (isFixLeft) {
      fixedStyle.position = "sticky";
      fixedStyle.left = fixLeft;
    }
    if (isFixRight) {
      fixedStyle.position = "sticky";
      fixedStyle.right = fixRight;
    }
    var alignStyle = {};
    if (align) {
      alignStyle.textAlign = align;
    }
    var onMouseEnter = function onMouseEnter2(event) {
      var _additionalProps$onMo;
      if (record) {
        onHover(index2, index2 + mergedRowSpan - 1);
      }
      additionalProps === null || additionalProps === void 0 ? void 0 : (_additionalProps$onMo = additionalProps.onMouseEnter) === null || _additionalProps$onMo === void 0 ? void 0 : _additionalProps$onMo.call(additionalProps, event);
    };
    var onMouseLeave = function onMouseLeave2(event) {
      var _additionalProps$onMo2;
      if (record) {
        onHover(-1, -1);
      }
      additionalProps === null || additionalProps === void 0 ? void 0 : (_additionalProps$onMo2 = additionalProps.onMouseLeave) === null || _additionalProps$onMo2 === void 0 ? void 0 : _additionalProps$onMo2.call(additionalProps, event);
    };
    var title = getTitleFromCellRenderChildren({
      rowType,
      ellipsis,
      children: childNode
    });
    var componentProps = _objectSpread2(_objectSpread2(_objectSpread2({
      title
    }, restCellProps), additionalProps), {}, {
      colSpan: mergedColSpan !== 1 ? mergedColSpan : null,
      rowSpan: mergedRowSpan !== 1 ? mergedRowSpan : null,
      className: (0, import_classnames126.default)(cellPrefixCls, className, (_classNames = {}, _defineProperty(_classNames, "".concat(cellPrefixCls, "-fix-left"), isFixLeft && supportSticky), _defineProperty(_classNames, "".concat(cellPrefixCls, "-fix-left-first"), firstFixLeft && supportSticky), _defineProperty(_classNames, "".concat(cellPrefixCls, "-fix-left-last"), lastFixLeft && supportSticky), _defineProperty(_classNames, "".concat(cellPrefixCls, "-fix-left-all"), lastFixLeft && allColumnsFixedLeft && supportSticky), _defineProperty(_classNames, "".concat(cellPrefixCls, "-fix-right"), isFixRight && supportSticky), _defineProperty(_classNames, "".concat(cellPrefixCls, "-fix-right-first"), firstFixRight && supportSticky), _defineProperty(_classNames, "".concat(cellPrefixCls, "-fix-right-last"), lastFixRight && supportSticky), _defineProperty(_classNames, "".concat(cellPrefixCls, "-ellipsis"), ellipsis), _defineProperty(_classNames, "".concat(cellPrefixCls, "-with-append"), appendNode), _defineProperty(_classNames, "".concat(cellPrefixCls, "-fix-sticky"), (isFixLeft || isFixRight) && isSticky && supportSticky), _defineProperty(_classNames, "".concat(cellPrefixCls, "-row-hover"), !legacyCellProps && hovering), _classNames), additionalProps.className, cellClassName),
      style: _objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2({}, additionalProps.style), alignStyle), fixedStyle), cellStyle),
      onMouseEnter,
      onMouseLeave,
      ref: isRefComponent(Component20) ? ref : null
    });
    return /* @__PURE__ */ React320.createElement(Component20, componentProps, appendNode, mergedChildNode);
  }
  var RefCell = /* @__PURE__ */ React320.forwardRef(Cell);
  RefCell.displayName = "Cell";
  var comparePropList = ["expanded", "className", "hovering"];
  var MemoCell = /* @__PURE__ */ React320.memo(RefCell, function(prev, next) {
    if (next.shouldCellUpdate) {
      return (
        // Additional handle of expanded logic
        comparePropList.every(function(propName) {
          return prev[propName] === next[propName];
        }) && // User control update logic
        !next.shouldCellUpdate(next.record, prev.record)
      );
    }
    return (0, import_shallowequal2.default)(prev, next);
  });
  var WrappedCell = /* @__PURE__ */ React320.forwardRef(function(props, ref) {
    var index2 = props.index, _props$additionalProp = props.additionalProps, additionalProps = _props$additionalProp === void 0 ? {} : _props$additionalProp, colSpan = props.colSpan, rowSpan = props.rowSpan;
    var cellColSpan = additionalProps.colSpan, cellRowSpan = additionalProps.rowSpan;
    var mergedColSpan = colSpan !== null && colSpan !== void 0 ? colSpan : cellColSpan;
    var mergedRowSpan = rowSpan !== null && rowSpan !== void 0 ? rowSpan : cellRowSpan;
    var _useContextSelector = useContextSelector(HoverContext_default, function(cxt) {
      var isHovering = inHoverRange(index2, mergedRowSpan || 1, cxt === null || cxt === void 0 ? void 0 : cxt.startRow, cxt === null || cxt === void 0 ? void 0 : cxt.endRow);
      return {
        onHover: cxt === null || cxt === void 0 ? void 0 : cxt.onHover,
        hovering: isHovering
      };
    }), onHover = _useContextSelector.onHover, hovering = _useContextSelector.hovering;
    return /* @__PURE__ */ React320.createElement(MemoCell, _extends({}, props, {
      colSpan: mergedColSpan,
      rowSpan: mergedRowSpan,
      hovering,
      ref,
      onHover
    }));
  });
  WrappedCell.displayName = "WrappedCell";
  var Cell_default = WrappedCell;

  // node_modules/rc-table/es/context/TableContext.js
  var React321 = __toESM(require_react());
  var TableContext = /* @__PURE__ */ React321.createContext(null);
  var TableContext_default = TableContext;

  // node_modules/rc-table/es/utils/fixUtil.js
  function getCellFixedInfo(colStart, colEnd, columns4, stickyOffsets, direction) {
    var startColumn = columns4[colStart] || {};
    var endColumn = columns4[colEnd] || {};
    var fixLeft;
    var fixRight;
    if (startColumn.fixed === "left") {
      fixLeft = stickyOffsets.left[colStart];
    } else if (endColumn.fixed === "right") {
      fixRight = stickyOffsets.right[colEnd];
    }
    var lastFixLeft = false;
    var firstFixRight = false;
    var lastFixRight = false;
    var firstFixLeft = false;
    var nextColumn = columns4[colEnd + 1];
    var prevColumn = columns4[colStart - 1];
    if (direction === "rtl") {
      if (fixLeft !== void 0) {
        var prevFixLeft = prevColumn && prevColumn.fixed === "left";
        firstFixLeft = !prevFixLeft;
      } else if (fixRight !== void 0) {
        var nextFixRight = nextColumn && nextColumn.fixed === "right";
        lastFixRight = !nextFixRight;
      }
    } else if (fixLeft !== void 0) {
      var nextFixLeft = nextColumn && nextColumn.fixed === "left";
      lastFixLeft = !nextFixLeft;
    } else if (fixRight !== void 0) {
      var prevFixRight = prevColumn && prevColumn.fixed === "right";
      firstFixRight = !prevFixRight;
    }
    return {
      fixLeft,
      fixRight,
      lastFixLeft,
      firstFixRight,
      lastFixRight,
      firstFixLeft,
      isSticky: stickyOffsets.isSticky
    };
  }

  // node_modules/rc-table/es/Header/HeaderRow.js
  function HeaderRow(_ref) {
    var cells = _ref.cells, stickyOffsets = _ref.stickyOffsets, flattenColumns = _ref.flattenColumns, RowComponent = _ref.rowComponent, CellComponent = _ref.cellComponent, onHeaderRow = _ref.onHeaderRow, index2 = _ref.index;
    var _React$useContext = React322.useContext(TableContext_default), prefixCls = _React$useContext.prefixCls, direction = _React$useContext.direction;
    var rowProps;
    if (onHeaderRow) {
      rowProps = onHeaderRow(cells.map(function(cell) {
        return cell.column;
      }), index2);
    }
    var columnsKey = getColumnsKey(cells.map(function(cell) {
      return cell.column;
    }));
    return /* @__PURE__ */ React322.createElement(RowComponent, rowProps, cells.map(function(cell, cellIndex) {
      var column = cell.column;
      var fixedInfo = getCellFixedInfo(cell.colStart, cell.colEnd, flattenColumns, stickyOffsets, direction);
      var additionalProps;
      if (column && column.onHeaderCell) {
        additionalProps = cell.column.onHeaderCell(column);
      }
      return /* @__PURE__ */ React322.createElement(Cell_default, _extends({}, cell, {
        ellipsis: column.ellipsis,
        align: column.align,
        component: CellComponent,
        prefixCls,
        key: columnsKey[cellIndex]
      }, fixedInfo, {
        additionalProps,
        rowType: "header"
      }));
    }));
  }
  HeaderRow.displayName = "HeaderRow";
  var HeaderRow_default = HeaderRow;

  // node_modules/rc-table/es/Header/Header.js
  function parseHeaderRows(rootColumns) {
    var rows = [];
    function fillRowCells(columns4, colIndex) {
      var rowIndex2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
      rows[rowIndex2] = rows[rowIndex2] || [];
      var currentColIndex = colIndex;
      var colSpans = columns4.filter(Boolean).map(function(column) {
        var cell = {
          key: column.key,
          className: column.className || "",
          children: column.title,
          column,
          colStart: currentColIndex
        };
        var colSpan = 1;
        var subColumns = column.children;
        if (subColumns && subColumns.length > 0) {
          colSpan = fillRowCells(subColumns, currentColIndex, rowIndex2 + 1).reduce(function(total, count) {
            return total + count;
          }, 0);
          cell.hasSubColumns = true;
        }
        if ("colSpan" in column) {
          colSpan = column.colSpan;
        }
        if ("rowSpan" in column) {
          cell.rowSpan = column.rowSpan;
        }
        cell.colSpan = colSpan;
        cell.colEnd = cell.colStart + colSpan - 1;
        rows[rowIndex2].push(cell);
        currentColIndex += colSpan;
        return colSpan;
      });
      return colSpans;
    }
    fillRowCells(rootColumns, 0);
    var rowCount = rows.length;
    var _loop = function _loop2(rowIndex2) {
      rows[rowIndex2].forEach(function(cell) {
        if (!("rowSpan" in cell) && !cell.hasSubColumns) {
          cell.rowSpan = rowCount - rowIndex2;
        }
      });
    };
    for (var rowIndex = 0; rowIndex < rowCount; rowIndex += 1) {
      _loop(rowIndex);
    }
    return rows;
  }
  function Header3(_ref) {
    var stickyOffsets = _ref.stickyOffsets, columns4 = _ref.columns, flattenColumns = _ref.flattenColumns, onHeaderRow = _ref.onHeaderRow;
    var _React$useContext = React323.useContext(TableContext_default), prefixCls = _React$useContext.prefixCls, getComponent = _React$useContext.getComponent;
    var rows = React323.useMemo(function() {
      return parseHeaderRows(columns4);
    }, [columns4]);
    var WrapperComponent = getComponent(["header", "wrapper"], "thead");
    var trComponent = getComponent(["header", "row"], "tr");
    var thComponent = getComponent(["header", "cell"], "th");
    return /* @__PURE__ */ React323.createElement(WrapperComponent, {
      className: "".concat(prefixCls, "-thead")
    }, rows.map(function(row, rowIndex) {
      var rowNode = /* @__PURE__ */ React323.createElement(HeaderRow_default, {
        key: rowIndex,
        flattenColumns,
        cells: row,
        stickyOffsets,
        rowComponent: trComponent,
        cellComponent: thComponent,
        onHeaderRow,
        index: rowIndex
      });
      return rowNode;
    }));
  }
  var Header_default2 = Header3;

  // node_modules/rc-table/es/Body/index.js
  var React331 = __toESM(require_react());

  // node_modules/rc-table/es/Body/ExpandedRow.js
  var React325 = __toESM(require_react());

  // node_modules/rc-table/es/context/ExpandedRowContext.js
  var React324 = __toESM(require_react());
  var ExpandedRowContext = /* @__PURE__ */ React324.createContext(null);
  var ExpandedRowContext_default = ExpandedRowContext;

  // node_modules/rc-table/es/Body/ExpandedRow.js
  function ExpandedRow(_ref) {
    var prefixCls = _ref.prefixCls, children = _ref.children, Component20 = _ref.component, cellComponent = _ref.cellComponent, className = _ref.className, expanded = _ref.expanded, colSpan = _ref.colSpan, isEmpty = _ref.isEmpty;
    var _React$useContext = React325.useContext(TableContext_default), scrollbarSize = _React$useContext.scrollbarSize;
    var _React$useContext2 = React325.useContext(ExpandedRowContext_default), fixHeader = _React$useContext2.fixHeader, fixColumn = _React$useContext2.fixColumn, componentWidth = _React$useContext2.componentWidth, horizonScroll = _React$useContext2.horizonScroll;
    return React325.useMemo(function() {
      var contentNode = children;
      if (isEmpty ? horizonScroll : fixColumn) {
        contentNode = /* @__PURE__ */ React325.createElement("div", {
          style: {
            width: componentWidth - (fixHeader ? scrollbarSize : 0),
            position: "sticky",
            left: 0,
            overflow: "hidden"
          },
          className: "".concat(prefixCls, "-expanded-row-fixed")
        }, componentWidth !== 0 && contentNode);
      }
      return /* @__PURE__ */ React325.createElement(Component20, {
        className,
        style: {
          display: expanded ? null : "none"
        }
      }, /* @__PURE__ */ React325.createElement(Cell_default, {
        component: cellComponent,
        prefixCls,
        colSpan
      }, contentNode));
    }, [children, Component20, className, expanded, colSpan, isEmpty, scrollbarSize, componentWidth, fixColumn, fixHeader, horizonScroll]);
  }
  var ExpandedRow_default = ExpandedRow;

  // node_modules/rc-table/es/context/ResizeContext.js
  var React326 = __toESM(require_react());
  var ResizeContext = /* @__PURE__ */ React326.createContext(null);
  var ResizeContext_default = ResizeContext;

  // node_modules/rc-table/es/Body/BodyRow.js
  var React327 = __toESM(require_react());
  var import_classnames127 = __toESM(require_classnames());
  function BodyRow(props) {
    var className = props.className, style3 = props.style, record = props.record, index2 = props.index, renderIndex = props.renderIndex, rowKey = props.rowKey, rowExpandable = props.rowExpandable, expandedKeys = props.expandedKeys, onRow = props.onRow, _props$indent = props.indent, indent = _props$indent === void 0 ? 0 : _props$indent, RowComponent = props.rowComponent, cellComponent = props.cellComponent, childrenColumnName = props.childrenColumnName;
    var _React$useContext = React327.useContext(TableContext_default), prefixCls = _React$useContext.prefixCls, fixedInfoList = _React$useContext.fixedInfoList;
    var _React$useContext2 = React327.useContext(BodyContext_default), flattenColumns = _React$useContext2.flattenColumns, expandableType = _React$useContext2.expandableType, expandRowByClick = _React$useContext2.expandRowByClick, onTriggerExpand = _React$useContext2.onTriggerExpand, rowClassName = _React$useContext2.rowClassName, expandedRowClassName = _React$useContext2.expandedRowClassName, indentSize = _React$useContext2.indentSize, expandIcon = _React$useContext2.expandIcon, expandedRowRender = _React$useContext2.expandedRowRender, expandIconColumnIndex = _React$useContext2.expandIconColumnIndex;
    var _React$useState = React327.useState(false), _React$useState2 = _slicedToArray(_React$useState, 2), expandRended = _React$useState2[0], setExpandRended = _React$useState2[1];
    var expanded = expandedKeys && expandedKeys.has(props.recordKey);
    React327.useEffect(function() {
      if (expanded) {
        setExpandRended(true);
      }
    }, [expanded]);
    var rowSupportExpand = expandableType === "row" && (!rowExpandable || rowExpandable(record));
    var nestExpandable = expandableType === "nest";
    var hasNestChildren = childrenColumnName && record && record[childrenColumnName];
    var mergedExpandable = rowSupportExpand || nestExpandable;
    var onExpandRef = React327.useRef(onTriggerExpand);
    onExpandRef.current = onTriggerExpand;
    var onInternalTriggerExpand = function onInternalTriggerExpand2() {
      onExpandRef.current.apply(onExpandRef, arguments);
    };
    var additionalProps = onRow === null || onRow === void 0 ? void 0 : onRow(record, index2);
    var onClick = function onClick2(event) {
      var _additionalProps$onCl;
      if (expandRowByClick && mergedExpandable) {
        onInternalTriggerExpand(record, event);
      }
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      additionalProps === null || additionalProps === void 0 ? void 0 : (_additionalProps$onCl = additionalProps.onClick) === null || _additionalProps$onCl === void 0 ? void 0 : _additionalProps$onCl.call.apply(_additionalProps$onCl, [additionalProps, event].concat(args));
    };
    var computeRowClassName;
    if (typeof rowClassName === "string") {
      computeRowClassName = rowClassName;
    } else if (typeof rowClassName === "function") {
      computeRowClassName = rowClassName(record, index2, indent);
    }
    var columnsKey = getColumnsKey(flattenColumns);
    var baseRowNode = /* @__PURE__ */ React327.createElement(RowComponent, _extends({}, additionalProps, {
      "data-row-key": rowKey,
      className: (0, import_classnames127.default)(className, "".concat(prefixCls, "-row"), "".concat(prefixCls, "-row-level-").concat(indent), computeRowClassName, additionalProps && additionalProps.className),
      style: _objectSpread2(_objectSpread2({}, style3), additionalProps ? additionalProps.style : null),
      onClick
    }), flattenColumns.map(function(column, colIndex) {
      var render2 = column.render, dataIndex = column.dataIndex, columnClassName = column.className;
      var key2 = columnsKey[colIndex];
      var fixedInfo = fixedInfoList[colIndex];
      var appendCellNode;
      if (colIndex === (expandIconColumnIndex || 0) && nestExpandable) {
        appendCellNode = /* @__PURE__ */ React327.createElement(React327.Fragment, null, /* @__PURE__ */ React327.createElement("span", {
          style: {
            paddingLeft: "".concat(indentSize * indent, "px")
          },
          className: "".concat(prefixCls, "-row-indent indent-level-").concat(indent)
        }), expandIcon({
          prefixCls,
          expanded,
          expandable: hasNestChildren,
          record,
          onExpand: onInternalTriggerExpand
        }));
      }
      var additionalCellProps;
      if (column.onCell) {
        additionalCellProps = column.onCell(record, index2);
      }
      return /* @__PURE__ */ React327.createElement(Cell_default, _extends({
        className: columnClassName,
        ellipsis: column.ellipsis,
        align: column.align,
        component: cellComponent,
        prefixCls,
        key: key2,
        record,
        index: index2,
        renderIndex,
        dataIndex,
        render: render2,
        shouldCellUpdate: column.shouldCellUpdate,
        expanded: appendCellNode && expanded
      }, fixedInfo, {
        appendNode: appendCellNode,
        additionalProps: additionalCellProps
      }));
    }));
    var expandRowNode;
    if (rowSupportExpand && (expandRended || expanded)) {
      var expandContent = expandedRowRender(record, index2, indent + 1, expanded);
      var computedExpandedRowClassName = expandedRowClassName && expandedRowClassName(record, index2, indent);
      expandRowNode = /* @__PURE__ */ React327.createElement(ExpandedRow_default, {
        expanded,
        className: (0, import_classnames127.default)("".concat(prefixCls, "-expanded-row"), "".concat(prefixCls, "-expanded-row-level-").concat(indent + 1), computedExpandedRowClassName),
        prefixCls,
        component: RowComponent,
        cellComponent,
        colSpan: flattenColumns.length,
        isEmpty: false
      }, expandContent);
    }
    return /* @__PURE__ */ React327.createElement(React327.Fragment, null, baseRowNode, expandRowNode);
  }
  BodyRow.displayName = "BodyRow";
  var BodyRow_default = BodyRow;

  // node_modules/rc-table/es/hooks/useFlattenRecords.js
  var React328 = __toESM(require_react());
  function flatRecord(record, indent, childrenColumnName, expandedKeys, getRowKey, index2) {
    var arr = [];
    arr.push({
      record,
      indent,
      index: index2
    });
    var key2 = getRowKey(record);
    var expanded = expandedKeys === null || expandedKeys === void 0 ? void 0 : expandedKeys.has(key2);
    if (record && Array.isArray(record[childrenColumnName]) && expanded) {
      for (var i3 = 0; i3 < record[childrenColumnName].length; i3 += 1) {
        var tempArr = flatRecord(record[childrenColumnName][i3], indent + 1, childrenColumnName, expandedKeys, getRowKey, i3);
        arr.push.apply(arr, _toConsumableArray(tempArr));
      }
    }
    return arr;
  }
  function useFlattenRecords(data, childrenColumnName, expandedKeys, getRowKey) {
    var arr = React328.useMemo(function() {
      if (expandedKeys === null || expandedKeys === void 0 ? void 0 : expandedKeys.size) {
        var temp = [];
        for (var i3 = 0; i3 < (data === null || data === void 0 ? void 0 : data.length); i3 += 1) {
          var record = data[i3];
          temp.push.apply(temp, _toConsumableArray(flatRecord(record, 0, childrenColumnName, expandedKeys, getRowKey, i3)));
        }
        return temp;
      }
      return data === null || data === void 0 ? void 0 : data.map(function(item, index2) {
        return {
          record: item,
          indent: 0,
          index: index2
        };
      });
    }, [data, childrenColumnName, expandedKeys, getRowKey]);
    return arr;
  }

  // node_modules/rc-table/es/Body/MeasureRow.js
  var React330 = __toESM(require_react());

  // node_modules/rc-table/es/Body/MeasureCell.js
  var React329 = __toESM(require_react());
  function MeasureCell(_ref) {
    var columnKey = _ref.columnKey, onColumnResize = _ref.onColumnResize;
    var cellRef = React329.useRef();
    React329.useEffect(function() {
      if (cellRef.current) {
        onColumnResize(columnKey, cellRef.current.offsetWidth);
      }
    }, []);
    return /* @__PURE__ */ React329.createElement(es_default2, {
      data: columnKey
    }, /* @__PURE__ */ React329.createElement("td", {
      ref: cellRef,
      style: {
        padding: 0,
        border: 0,
        height: 0
      }
    }, /* @__PURE__ */ React329.createElement("div", {
      style: {
        height: 0,
        overflow: "hidden"
      }
    }, "\xA0")));
  }

  // node_modules/rc-table/es/Body/MeasureRow.js
  function MeasureRow(_ref) {
    var prefixCls = _ref.prefixCls, columnsKey = _ref.columnsKey, onColumnResize = _ref.onColumnResize;
    return /* @__PURE__ */ React330.createElement("tr", {
      "aria-hidden": "true",
      className: "".concat(prefixCls, "-measure-row"),
      style: {
        height: 0,
        fontSize: 0
      }
    }, /* @__PURE__ */ React330.createElement(es_default2.Collection, {
      onBatchResize: function onBatchResize(infoList) {
        infoList.forEach(function(_ref2) {
          var columnKey = _ref2.data, size = _ref2.size;
          onColumnResize(columnKey, size.offsetWidth);
        });
      }
    }, columnsKey.map(function(columnKey) {
      return /* @__PURE__ */ React330.createElement(MeasureCell, {
        key: columnKey,
        columnKey,
        onColumnResize
      });
    })));
  }

  // node_modules/rc-table/es/Body/index.js
  function Body(_ref) {
    var data = _ref.data, getRowKey = _ref.getRowKey, measureColumnWidth = _ref.measureColumnWidth, expandedKeys = _ref.expandedKeys, onRow = _ref.onRow, rowExpandable = _ref.rowExpandable, emptyNode = _ref.emptyNode, childrenColumnName = _ref.childrenColumnName;
    var _React$useContext = React331.useContext(ResizeContext_default), onColumnResize = _React$useContext.onColumnResize;
    var _React$useContext2 = React331.useContext(TableContext_default), prefixCls = _React$useContext2.prefixCls, getComponent = _React$useContext2.getComponent;
    var _React$useContext3 = React331.useContext(BodyContext_default), flattenColumns = _React$useContext3.flattenColumns;
    var flattenData2 = useFlattenRecords(data, childrenColumnName, expandedKeys, getRowKey);
    var perfRef = React331.useRef({
      renderWithProps: false
    });
    var _React$useState = React331.useState(-1), _React$useState2 = _slicedToArray(_React$useState, 2), startRow = _React$useState2[0], setStartRow = _React$useState2[1];
    var _React$useState3 = React331.useState(-1), _React$useState4 = _slicedToArray(_React$useState3, 2), endRow = _React$useState4[0], setEndRow = _React$useState4[1];
    var onHover = React331.useCallback(function(start, end) {
      setStartRow(start);
      setEndRow(end);
    }, []);
    var bodyNode = React331.useMemo(function() {
      var WrapperComponent = getComponent(["body", "wrapper"], "tbody");
      var trComponent = getComponent(["body", "row"], "tr");
      var tdComponent = getComponent(["body", "cell"], "td");
      var rows;
      if (data.length) {
        rows = flattenData2.map(function(item, idx) {
          var record = item.record, indent = item.indent, renderIndex = item.index;
          var key2 = getRowKey(record, idx);
          return /* @__PURE__ */ React331.createElement(BodyRow_default, {
            key: key2,
            rowKey: key2,
            record,
            recordKey: key2,
            index: idx,
            renderIndex,
            rowComponent: trComponent,
            cellComponent: tdComponent,
            expandedKeys,
            onRow,
            getRowKey,
            rowExpandable,
            childrenColumnName,
            indent
          });
        });
      } else {
        rows = /* @__PURE__ */ React331.createElement(ExpandedRow_default, {
          expanded: true,
          className: "".concat(prefixCls, "-placeholder"),
          prefixCls,
          component: trComponent,
          cellComponent: tdComponent,
          colSpan: flattenColumns.length,
          isEmpty: true
        }, emptyNode);
      }
      var columnsKey = getColumnsKey(flattenColumns);
      return /* @__PURE__ */ React331.createElement(WrapperComponent, {
        className: "".concat(prefixCls, "-tbody")
      }, measureColumnWidth && /* @__PURE__ */ React331.createElement(MeasureRow, {
        prefixCls,
        columnsKey,
        onColumnResize
      }), rows);
    }, [data, prefixCls, onRow, measureColumnWidth, expandedKeys, getRowKey, getComponent, emptyNode, flattenColumns, childrenColumnName, onColumnResize, rowExpandable, flattenData2]);
    return /* @__PURE__ */ React331.createElement(PerfContext_default.Provider, {
      value: perfRef.current
    }, /* @__PURE__ */ React331.createElement(HoverContext_default.Provider, {
      value: {
        startRow,
        endRow,
        onHover
      }
    }, bodyNode));
  }
  var MemoBody = /* @__PURE__ */ React331.memo(Body);
  MemoBody.displayName = "Body";
  var Body_default = MemoBody;

  // node_modules/rc-table/es/hooks/useColumns.js
  var React332 = __toESM(require_react());

  // node_modules/rc-table/es/utils/legacyUtil.js
  var _excluded48 = ["expandable"];
  var INTERNAL_COL_DEFINE = "RC_TABLE_INTERNAL_COL_DEFINE";
  function getExpandableProps(props) {
    var expandable = props.expandable, legacyExpandableConfig = _objectWithoutProperties(props, _excluded48);
    var config;
    if ("expandable" in props) {
      config = _objectSpread2(_objectSpread2({}, legacyExpandableConfig), expandable);
    } else {
      if (["indentSize", "expandedRowKeys", "defaultExpandedRowKeys", "defaultExpandAllRows", "expandedRowRender", "expandRowByClick", "expandIcon", "onExpand", "onExpandedRowsChange", "expandedRowClassName", "expandIconColumnIndex", "showExpandColumn"].some(function(prop) {
        return prop in props;
      })) {
        warning_default(false, "expanded related props have been moved into `expandable`.");
      }
      config = legacyExpandableConfig;
    }
    if (config.showExpandColumn === false) {
      config.expandIconColumnIndex = -1;
    }
    return config;
  }

  // node_modules/rc-table/es/constant.js
  var EXPAND_COLUMN = {};

  // node_modules/rc-table/es/hooks/useColumns.js
  var _excluded49 = ["children"];
  var _excluded214 = ["fixed"];
  function convertChildrenToColumns(children) {
    return toArray(children).filter(function(node) {
      return /* @__PURE__ */ React332.isValidElement(node);
    }).map(function(_ref) {
      var key2 = _ref.key, props = _ref.props;
      var nodeChildren = props.children, restProps = _objectWithoutProperties(props, _excluded49);
      var column = _objectSpread2({
        key: key2
      }, restProps);
      if (nodeChildren) {
        column.children = convertChildrenToColumns(nodeChildren);
      }
      return column;
    });
  }
  function flatColumns(columns4) {
    return columns4.reduce(function(list, column) {
      var fixed = column.fixed;
      var parsedFixed = fixed === true ? "left" : fixed;
      var subColumns = column.children;
      if (subColumns && subColumns.length > 0) {
        return [].concat(_toConsumableArray(list), _toConsumableArray(flatColumns(subColumns).map(function(subColum) {
          return _objectSpread2({
            fixed: parsedFixed
          }, subColum);
        })));
      }
      return [].concat(_toConsumableArray(list), [_objectSpread2(_objectSpread2({}, column), {}, {
        fixed: parsedFixed
      })]);
    }, []);
  }
  function warningFixed(flattenColumns) {
    var allFixLeft = true;
    for (var i3 = 0; i3 < flattenColumns.length; i3 += 1) {
      var col = flattenColumns[i3];
      if (allFixLeft && col.fixed !== "left") {
        allFixLeft = false;
      } else if (!allFixLeft && col.fixed === "left") {
        warning_default(false, "Index ".concat(i3 - 1, " of `columns` missing `fixed='left'` prop."));
        break;
      }
    }
    var allFixRight = true;
    for (var _i = flattenColumns.length - 1; _i >= 0; _i -= 1) {
      var _col = flattenColumns[_i];
      if (allFixRight && _col.fixed !== "right") {
        allFixRight = false;
      } else if (!allFixRight && _col.fixed === "right") {
        warning_default(false, "Index ".concat(_i + 1, " of `columns` missing `fixed='right'` prop."));
        break;
      }
    }
  }
  function revertForRtl(columns4) {
    return columns4.map(function(column) {
      var fixed = column.fixed, restProps = _objectWithoutProperties(column, _excluded214);
      var parsedFixed = fixed;
      if (fixed === "left") {
        parsedFixed = "right";
      } else if (fixed === "right") {
        parsedFixed = "left";
      }
      return _objectSpread2({
        fixed: parsedFixed
      }, restProps);
    });
  }
  function useColumns(_ref2, transformColumns) {
    var prefixCls = _ref2.prefixCls, columns4 = _ref2.columns, children = _ref2.children, expandable = _ref2.expandable, expandedKeys = _ref2.expandedKeys, columnTitle = _ref2.columnTitle, getRowKey = _ref2.getRowKey, onTriggerExpand = _ref2.onTriggerExpand, expandIcon = _ref2.expandIcon, rowExpandable = _ref2.rowExpandable, expandIconColumnIndex = _ref2.expandIconColumnIndex, direction = _ref2.direction, expandRowByClick = _ref2.expandRowByClick, columnWidth = _ref2.columnWidth, fixed = _ref2.fixed;
    var baseColumns = React332.useMemo(function() {
      return columns4 || convertChildrenToColumns(children);
    }, [columns4, children]);
    var withExpandColumns = React332.useMemo(function() {
      if (expandable) {
        var _expandColumn;
        var cloneColumns = baseColumns.slice();
        if (expandIconColumnIndex >= 0) {
          warning_default(false, "`expandIconColumnIndex` is deprecated. Please use `Table.EXPAND_COLUMN` in `columns` instead.");
        }
        if (!cloneColumns.includes(EXPAND_COLUMN)) {
          var expandColIndex = expandIconColumnIndex || 0;
          if (expandColIndex >= 0) {
            cloneColumns.splice(expandColIndex, 0, EXPAND_COLUMN);
          }
        }
        if (cloneColumns.filter(function(c2) {
          return c2 === EXPAND_COLUMN;
        }).length > 1) {
          warning_default(false, "There exist more than one `EXPAND_COLUMN` in `columns`.");
        }
        var expandColumnIndex = cloneColumns.indexOf(EXPAND_COLUMN);
        cloneColumns = cloneColumns.filter(function(column, index2) {
          return column !== EXPAND_COLUMN || index2 === expandColumnIndex;
        });
        var prevColumn = baseColumns[expandColumnIndex];
        var fixedColumn;
        if ((fixed === "left" || fixed) && !expandIconColumnIndex) {
          fixedColumn = "left";
        } else if ((fixed === "right" || fixed) && expandIconColumnIndex === baseColumns.length) {
          fixedColumn = "right";
        } else {
          fixedColumn = prevColumn ? prevColumn.fixed : null;
        }
        var expandColumn = (_expandColumn = {}, _defineProperty(_expandColumn, INTERNAL_COL_DEFINE, {
          className: "".concat(prefixCls, "-expand-icon-col"),
          columnType: "EXPAND_COLUMN"
        }), _defineProperty(_expandColumn, "title", columnTitle), _defineProperty(_expandColumn, "fixed", fixedColumn), _defineProperty(_expandColumn, "className", "".concat(prefixCls, "-row-expand-icon-cell")), _defineProperty(_expandColumn, "width", columnWidth), _defineProperty(_expandColumn, "render", function render2(_24, record, index2) {
          var rowKey = getRowKey(record, index2);
          var expanded = expandedKeys.has(rowKey);
          var recordExpandable = rowExpandable ? rowExpandable(record) : true;
          var icon = expandIcon({
            prefixCls,
            expanded,
            expandable: recordExpandable,
            record,
            onExpand: onTriggerExpand
          });
          if (expandRowByClick) {
            return /* @__PURE__ */ React332.createElement("span", {
              onClick: function onClick(e3) {
                return e3.stopPropagation();
              }
            }, icon);
          }
          return icon;
        }), _expandColumn);
        return cloneColumns.map(function(col) {
          return col === EXPAND_COLUMN ? expandColumn : col;
        });
      }
      if (baseColumns.includes(EXPAND_COLUMN)) {
        warning_default(false, "`expandable` is not config but there exist `EXPAND_COLUMN` in `columns`.");
      }
      return baseColumns.filter(function(col) {
        return col !== EXPAND_COLUMN;
      });
    }, [expandable, baseColumns, getRowKey, expandedKeys, expandIcon, direction]);
    var mergedColumns = React332.useMemo(function() {
      var finalColumns = withExpandColumns;
      if (transformColumns) {
        finalColumns = transformColumns(finalColumns);
      }
      if (!finalColumns.length) {
        finalColumns = [{
          render: function render2() {
            return null;
          }
        }];
      }
      return finalColumns;
    }, [transformColumns, withExpandColumns, direction]);
    var flattenColumns = React332.useMemo(function() {
      if (direction === "rtl") {
        return revertForRtl(flatColumns(mergedColumns));
      }
      return flatColumns(mergedColumns);
    }, [mergedColumns, direction]);
    if (true) {
      warningFixed(direction === "rtl" ? flattenColumns.slice().reverse() : flattenColumns);
    }
    return [mergedColumns, flattenColumns];
  }
  var useColumns_default = useColumns;

  // node_modules/rc-table/es/hooks/useFrame.js
  var import_react99 = __toESM(require_react());
  function useLayoutState(defaultState) {
    var stateRef = (0, import_react99.useRef)(defaultState);
    var _useState = (0, import_react99.useState)({}), _useState2 = _slicedToArray(_useState, 2), forceUpdate = _useState2[1];
    var lastPromiseRef = (0, import_react99.useRef)(null);
    var updateBatchRef = (0, import_react99.useRef)([]);
    function setFrameState(updater) {
      updateBatchRef.current.push(updater);
      var promise2 = Promise.resolve();
      lastPromiseRef.current = promise2;
      promise2.then(function() {
        if (lastPromiseRef.current === promise2) {
          var prevBatch = updateBatchRef.current;
          var prevState = stateRef.current;
          updateBatchRef.current = [];
          prevBatch.forEach(function(batchUpdater) {
            stateRef.current = batchUpdater(stateRef.current);
          });
          lastPromiseRef.current = null;
          if (prevState !== stateRef.current) {
            forceUpdate({});
          }
        }
      });
    }
    (0, import_react99.useEffect)(function() {
      return function() {
        lastPromiseRef.current = null;
      };
    }, []);
    return [stateRef.current, setFrameState];
  }
  function useTimeoutLock(defaultState) {
    var frameRef = (0, import_react99.useRef)(defaultState || null);
    var timeoutRef = (0, import_react99.useRef)();
    function cleanUp() {
      window.clearTimeout(timeoutRef.current);
    }
    function setState(newState) {
      frameRef.current = newState;
      cleanUp();
      timeoutRef.current = window.setTimeout(function() {
        frameRef.current = null;
        timeoutRef.current = void 0;
      }, 100);
    }
    function getState() {
      return frameRef.current;
    }
    (0, import_react99.useEffect)(function() {
      return cleanUp;
    }, []);
    return [setState, getState];
  }

  // node_modules/rc-table/es/hooks/useStickyOffsets.js
  var import_react100 = __toESM(require_react());
  function useStickyOffsets(colWidths, columnCount, direction) {
    var stickyOffsets = (0, import_react100.useMemo)(function() {
      var leftOffsets = [];
      var rightOffsets = [];
      var left = 0;
      var right = 0;
      for (var start = 0; start < columnCount; start += 1) {
        if (direction === "rtl") {
          rightOffsets[start] = right;
          right += colWidths[start] || 0;
          var end = columnCount - start - 1;
          leftOffsets[end] = left;
          left += colWidths[end] || 0;
        } else {
          leftOffsets[start] = left;
          left += colWidths[start] || 0;
          var _end = columnCount - start - 1;
          rightOffsets[_end] = right;
          right += colWidths[_end] || 0;
        }
      }
      return {
        left: leftOffsets,
        right: rightOffsets
      };
    }, [colWidths, columnCount, direction]);
    return stickyOffsets;
  }
  var useStickyOffsets_default = useStickyOffsets;

  // node_modules/rc-table/es/ColGroup.js
  var React333 = __toESM(require_react());
  var _excluded50 = ["columnType"];
  function ColGroup(_ref) {
    var colWidths = _ref.colWidths, columns4 = _ref.columns, columCount = _ref.columCount;
    var cols = [];
    var len = columCount || columns4.length;
    var mustInsert = false;
    for (var i3 = len - 1; i3 >= 0; i3 -= 1) {
      var width = colWidths[i3];
      var column = columns4 && columns4[i3];
      var additionalProps = column && column[INTERNAL_COL_DEFINE];
      if (width || additionalProps || mustInsert) {
        var _ref2 = additionalProps || {}, columnType = _ref2.columnType, restAdditionalProps = _objectWithoutProperties(_ref2, _excluded50);
        cols.unshift(/* @__PURE__ */ React333.createElement("col", _extends({
          key: i3,
          style: {
            width
          }
        }, restAdditionalProps)));
        mustInsert = true;
      }
    }
    return /* @__PURE__ */ React333.createElement("colgroup", null, cols);
  }
  var ColGroup_default = ColGroup;

  // node_modules/rc-table/es/Panel/index.js
  var React334 = __toESM(require_react());
  function Panel2(_ref) {
    var className = _ref.className, children = _ref.children;
    return /* @__PURE__ */ React334.createElement("div", {
      className
    }, children);
  }
  var Panel_default2 = Panel2;

  // node_modules/rc-table/es/Footer/index.js
  var React338 = __toESM(require_react());

  // node_modules/rc-table/es/Footer/Cell.js
  var React336 = __toESM(require_react());

  // node_modules/rc-table/es/Footer/SummaryContext.js
  var React335 = __toESM(require_react());
  var SummaryContext = /* @__PURE__ */ React335.createContext({});
  var SummaryContext_default = SummaryContext;

  // node_modules/rc-table/es/Footer/Cell.js
  function SummaryCell(_ref) {
    var className = _ref.className, index2 = _ref.index, children = _ref.children, _ref$colSpan = _ref.colSpan, colSpan = _ref$colSpan === void 0 ? 1 : _ref$colSpan, rowSpan = _ref.rowSpan, align = _ref.align;
    var _React$useContext = React336.useContext(TableContext_default), prefixCls = _React$useContext.prefixCls, direction = _React$useContext.direction;
    var _React$useContext2 = React336.useContext(SummaryContext_default), scrollColumnIndex = _React$useContext2.scrollColumnIndex, stickyOffsets = _React$useContext2.stickyOffsets, flattenColumns = _React$useContext2.flattenColumns;
    var lastIndex = index2 + colSpan - 1;
    var mergedColSpan = lastIndex + 1 === scrollColumnIndex ? colSpan + 1 : colSpan;
    var fixedInfo = getCellFixedInfo(index2, index2 + mergedColSpan - 1, flattenColumns, stickyOffsets, direction);
    return /* @__PURE__ */ React336.createElement(Cell_default, _extends({
      className,
      index: index2,
      component: "td",
      prefixCls,
      record: null,
      dataIndex: null,
      align,
      colSpan: mergedColSpan,
      rowSpan,
      render: function render2() {
        return children;
      }
    }, fixedInfo));
  }

  // node_modules/rc-table/es/Footer/Row.js
  var React337 = __toESM(require_react());
  var _excluded51 = ["children"];
  function FooterRow(_ref) {
    var children = _ref.children, props = _objectWithoutProperties(_ref, _excluded51);
    return /* @__PURE__ */ React337.createElement("tr", props, children);
  }

  // node_modules/rc-table/es/Footer/Summary.js
  function Summary(_ref) {
    var children = _ref.children;
    return children;
  }
  Summary.Row = FooterRow;
  Summary.Cell = SummaryCell;
  var Summary_default = Summary;

  // node_modules/rc-table/es/Footer/index.js
  function Footer2(_ref) {
    var children = _ref.children, stickyOffsets = _ref.stickyOffsets, flattenColumns = _ref.flattenColumns;
    var tableContext = React338.useContext(TableContext_default);
    var prefixCls = tableContext.prefixCls;
    var lastColumnIndex = flattenColumns.length - 1;
    var scrollColumn = flattenColumns[lastColumnIndex];
    var summaryContext = React338.useMemo(function() {
      return {
        stickyOffsets,
        flattenColumns,
        scrollColumnIndex: (scrollColumn === null || scrollColumn === void 0 ? void 0 : scrollColumn.scrollbar) ? lastColumnIndex : null
      };
    }, [scrollColumn, flattenColumns, lastColumnIndex, stickyOffsets]);
    return /* @__PURE__ */ React338.createElement(SummaryContext_default.Provider, {
      value: summaryContext
    }, /* @__PURE__ */ React338.createElement("tfoot", {
      className: "".concat(prefixCls, "-summary")
    }, children));
  }
  var Footer_default = Footer2;
  var FooterComponents = Summary_default;

  // node_modules/rc-table/es/utils/expandUtil.js
  var React339 = __toESM(require_react());
  var import_classnames128 = __toESM(require_classnames());
  function renderExpandIcon(_ref) {
    var _classNames;
    var prefixCls = _ref.prefixCls, record = _ref.record, onExpand = _ref.onExpand, expanded = _ref.expanded, expandable = _ref.expandable;
    var expandClassName = "".concat(prefixCls, "-row-expand-icon");
    if (!expandable) {
      return /* @__PURE__ */ React339.createElement("span", {
        className: (0, import_classnames128.default)(expandClassName, "".concat(prefixCls, "-row-spaced"))
      });
    }
    var onClick = function onClick2(event) {
      onExpand(record, event);
      event.stopPropagation();
    };
    return /* @__PURE__ */ React339.createElement("span", {
      className: (0, import_classnames128.default)(expandClassName, (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-row-expanded"), expanded), _defineProperty(_classNames, "".concat(prefixCls, "-row-collapsed"), !expanded), _classNames)),
      onClick
    });
  }
  function findAllChildrenKeys(data, getRowKey, childrenColumnName) {
    var keys2 = [];
    function dig(list) {
      (list || []).forEach(function(item, index2) {
        keys2.push(getRowKey(item, index2));
        dig(item[childrenColumnName]);
      });
    }
    dig(data);
    return keys2;
  }

  // node_modules/rc-table/es/stickyScrollBar.js
  var React340 = __toESM(require_react());
  var import_classnames129 = __toESM(require_classnames());
  var StickyScrollBar = function StickyScrollBar2(_ref, ref) {
    var _scrollBodyRef$curren, _scrollBodyRef$curren2;
    var scrollBodyRef = _ref.scrollBodyRef, onScroll = _ref.onScroll, offsetScroll = _ref.offsetScroll, container = _ref.container;
    var _React$useContext = React340.useContext(TableContext_default), prefixCls = _React$useContext.prefixCls;
    var bodyScrollWidth = ((_scrollBodyRef$curren = scrollBodyRef.current) === null || _scrollBodyRef$curren === void 0 ? void 0 : _scrollBodyRef$curren.scrollWidth) || 0;
    var bodyWidth = ((_scrollBodyRef$curren2 = scrollBodyRef.current) === null || _scrollBodyRef$curren2 === void 0 ? void 0 : _scrollBodyRef$curren2.clientWidth) || 0;
    var scrollBarWidth = bodyScrollWidth && bodyWidth * (bodyWidth / bodyScrollWidth);
    var scrollBarRef = React340.useRef();
    var _useLayoutState = useLayoutState({
      scrollLeft: 0,
      isHiddenScrollBar: false
    }), _useLayoutState2 = _slicedToArray(_useLayoutState, 2), scrollState = _useLayoutState2[0], setScrollState = _useLayoutState2[1];
    var refState = React340.useRef({
      delta: 0,
      x: 0
    });
    var _React$useState = React340.useState(false), _React$useState2 = _slicedToArray(_React$useState, 2), isActive2 = _React$useState2[0], setActive = _React$useState2[1];
    var onMouseUp = function onMouseUp2() {
      setActive(false);
    };
    var onMouseDown = function onMouseDown2(event) {
      event.persist();
      refState.current.delta = event.pageX - scrollState.scrollLeft;
      refState.current.x = 0;
      setActive(true);
      event.preventDefault();
    };
    var onMouseMove = function onMouseMove2(event) {
      var _window;
      var _ref2 = event || ((_window = window) === null || _window === void 0 ? void 0 : _window.event), buttons = _ref2.buttons;
      if (!isActive2 || buttons === 0) {
        if (isActive2) {
          setActive(false);
        }
        return;
      }
      var left = refState.current.x + event.pageX - refState.current.x - refState.current.delta;
      if (left <= 0) {
        left = 0;
      }
      if (left + scrollBarWidth >= bodyWidth) {
        left = bodyWidth - scrollBarWidth;
      }
      onScroll({
        scrollLeft: left / bodyWidth * (bodyScrollWidth + 2)
      });
      refState.current.x = event.pageX;
    };
    var onContainerScroll = function onContainerScroll2() {
      if (!scrollBodyRef.current) {
        return;
      }
      var tableOffsetTop = getOffset3(scrollBodyRef.current).top;
      var tableBottomOffset = tableOffsetTop + scrollBodyRef.current.offsetHeight;
      var currentClientOffset = container === window ? document.documentElement.scrollTop + window.innerHeight : getOffset3(container).top + container.clientHeight;
      if (tableBottomOffset - getScrollBarSize() <= currentClientOffset || tableOffsetTop >= currentClientOffset - offsetScroll) {
        setScrollState(function(state) {
          return _objectSpread2(_objectSpread2({}, state), {}, {
            isHiddenScrollBar: true
          });
        });
      } else {
        setScrollState(function(state) {
          return _objectSpread2(_objectSpread2({}, state), {}, {
            isHiddenScrollBar: false
          });
        });
      }
    };
    var setScrollLeft = function setScrollLeft2(left) {
      setScrollState(function(state) {
        return _objectSpread2(_objectSpread2({}, state), {}, {
          scrollLeft: left / bodyScrollWidth * bodyWidth || 0
        });
      });
    };
    React340.useImperativeHandle(ref, function() {
      return {
        setScrollLeft
      };
    });
    React340.useEffect(function() {
      var onMouseUpListener = addEventListenerWrap(document.body, "mouseup", onMouseUp, false);
      var onMouseMoveListener = addEventListenerWrap(document.body, "mousemove", onMouseMove, false);
      onContainerScroll();
      return function() {
        onMouseUpListener.remove();
        onMouseMoveListener.remove();
      };
    }, [scrollBarWidth, isActive2]);
    React340.useEffect(function() {
      var onScrollListener = addEventListenerWrap(container, "scroll", onContainerScroll, false);
      var onResizeListener = addEventListenerWrap(window, "resize", onContainerScroll, false);
      return function() {
        onScrollListener.remove();
        onResizeListener.remove();
      };
    }, [container]);
    React340.useEffect(function() {
      if (!scrollState.isHiddenScrollBar) {
        setScrollState(function(state) {
          var bodyNode = scrollBodyRef.current;
          if (!bodyNode) {
            return state;
          }
          return _objectSpread2(_objectSpread2({}, state), {}, {
            scrollLeft: bodyNode.scrollLeft / bodyNode.scrollWidth * bodyNode.clientWidth
          });
        });
      }
    }, [scrollState.isHiddenScrollBar]);
    if (bodyScrollWidth <= bodyWidth || !scrollBarWidth || scrollState.isHiddenScrollBar) {
      return null;
    }
    return /* @__PURE__ */ React340.createElement("div", {
      style: {
        height: getScrollBarSize(),
        width: bodyWidth,
        bottom: offsetScroll
      },
      className: "".concat(prefixCls, "-sticky-scroll")
    }, /* @__PURE__ */ React340.createElement("div", {
      onMouseDown,
      ref: scrollBarRef,
      className: (0, import_classnames129.default)("".concat(prefixCls, "-sticky-scroll-bar"), _defineProperty({}, "".concat(prefixCls, "-sticky-scroll-bar-active"), isActive2)),
      style: {
        width: "".concat(scrollBarWidth, "px"),
        transform: "translate3d(".concat(scrollState.scrollLeft, "px, 0, 0)")
      }
    }));
  };
  var stickyScrollBar_default = /* @__PURE__ */ React340.forwardRef(StickyScrollBar);

  // node_modules/rc-table/es/hooks/useSticky.js
  var React341 = __toESM(require_react());
  var defaultContainer = canUseDom() ? window : null;
  function useSticky(sticky, prefixCls) {
    var _ref = _typeof(sticky) === "object" ? sticky : {}, _ref$offsetHeader = _ref.offsetHeader, offsetHeader = _ref$offsetHeader === void 0 ? 0 : _ref$offsetHeader, _ref$offsetSummary = _ref.offsetSummary, offsetSummary = _ref$offsetSummary === void 0 ? 0 : _ref$offsetSummary, _ref$offsetScroll = _ref.offsetScroll, offsetScroll = _ref$offsetScroll === void 0 ? 0 : _ref$offsetScroll, _ref$getContainer = _ref.getContainer, getContainer3 = _ref$getContainer === void 0 ? function() {
      return defaultContainer;
    } : _ref$getContainer;
    var container = getContainer3() || defaultContainer;
    return React341.useMemo(function() {
      var isSticky = !!sticky;
      return {
        isSticky,
        stickyClassName: isSticky ? "".concat(prefixCls, "-sticky-holder") : "",
        offsetHeader,
        offsetSummary,
        offsetScroll,
        container
      };
    }, [offsetScroll, offsetHeader, offsetSummary, prefixCls, container]);
  }

  // node_modules/rc-table/es/FixedHolder/index.js
  var React342 = __toESM(require_react());
  var import_react101 = __toESM(require_react());
  var import_classnames130 = __toESM(require_classnames());
  var _excluded52 = ["className", "noData", "columns", "flattenColumns", "colWidths", "columCount", "stickyOffsets", "direction", "fixHeader", "stickyTopOffset", "stickyBottomOffset", "stickyClassName", "onScroll", "maxContentScroll", "children"];
  function useColumnWidth(colWidths, columCount) {
    return (0, import_react101.useMemo)(function() {
      var cloneColumns = [];
      for (var i3 = 0; i3 < columCount; i3 += 1) {
        var val = colWidths[i3];
        if (val !== void 0) {
          cloneColumns[i3] = val;
        } else {
          return null;
        }
      }
      return cloneColumns;
    }, [colWidths.join("_"), columCount]);
  }
  var FixedHolder = /* @__PURE__ */ React342.forwardRef(function(_ref, ref) {
    var className = _ref.className, noData = _ref.noData, columns4 = _ref.columns, flattenColumns = _ref.flattenColumns, colWidths = _ref.colWidths, columCount = _ref.columCount, stickyOffsets = _ref.stickyOffsets, direction = _ref.direction, fixHeader = _ref.fixHeader, stickyTopOffset = _ref.stickyTopOffset, stickyBottomOffset = _ref.stickyBottomOffset, stickyClassName = _ref.stickyClassName, onScroll = _ref.onScroll, maxContentScroll = _ref.maxContentScroll, children = _ref.children, props = _objectWithoutProperties(_ref, _excluded52);
    var _React$useContext = React342.useContext(TableContext_default), prefixCls = _React$useContext.prefixCls, scrollbarSize = _React$useContext.scrollbarSize, isSticky = _React$useContext.isSticky;
    var combinationScrollBarSize = isSticky && !fixHeader ? 0 : scrollbarSize;
    var scrollRef = React342.useRef(null);
    var setScrollRef = React342.useCallback(function(element) {
      fillRef(ref, element);
      fillRef(scrollRef, element);
    }, []);
    React342.useEffect(function() {
      var _scrollRef$current;
      function onWheel(e3) {
        var currentTarget = e3.currentTarget, deltaX = e3.deltaX;
        if (deltaX) {
          onScroll({
            currentTarget,
            scrollLeft: currentTarget.scrollLeft + deltaX
          });
          e3.preventDefault();
        }
      }
      (_scrollRef$current = scrollRef.current) === null || _scrollRef$current === void 0 ? void 0 : _scrollRef$current.addEventListener("wheel", onWheel);
      return function() {
        var _scrollRef$current2;
        (_scrollRef$current2 = scrollRef.current) === null || _scrollRef$current2 === void 0 ? void 0 : _scrollRef$current2.removeEventListener("wheel", onWheel);
      };
    }, []);
    var allFlattenColumnsWithWidth = React342.useMemo(function() {
      return flattenColumns.every(function(column) {
        return column.width >= 0;
      });
    }, [flattenColumns]);
    var lastColumn = flattenColumns[flattenColumns.length - 1];
    var ScrollBarColumn = {
      fixed: lastColumn ? lastColumn.fixed : null,
      scrollbar: true,
      onHeaderCell: function onHeaderCell() {
        return {
          className: "".concat(prefixCls, "-cell-scrollbar")
        };
      }
    };
    var columnsWithScrollbar = (0, import_react101.useMemo)(function() {
      return combinationScrollBarSize ? [].concat(_toConsumableArray(columns4), [ScrollBarColumn]) : columns4;
    }, [combinationScrollBarSize, columns4]);
    var flattenColumnsWithScrollbar = (0, import_react101.useMemo)(function() {
      return combinationScrollBarSize ? [].concat(_toConsumableArray(flattenColumns), [ScrollBarColumn]) : flattenColumns;
    }, [combinationScrollBarSize, flattenColumns]);
    var headerStickyOffsets = (0, import_react101.useMemo)(function() {
      var right = stickyOffsets.right, left = stickyOffsets.left;
      return _objectSpread2(_objectSpread2({}, stickyOffsets), {}, {
        left: direction === "rtl" ? [].concat(_toConsumableArray(left.map(function(width) {
          return width + combinationScrollBarSize;
        })), [0]) : left,
        right: direction === "rtl" ? right : [].concat(_toConsumableArray(right.map(function(width) {
          return width + combinationScrollBarSize;
        })), [0]),
        isSticky
      });
    }, [combinationScrollBarSize, stickyOffsets, isSticky]);
    var mergedColumnWidth = useColumnWidth(colWidths, columCount);
    return /* @__PURE__ */ React342.createElement("div", {
      style: _objectSpread2({
        overflow: "hidden"
      }, isSticky ? {
        top: stickyTopOffset,
        bottom: stickyBottomOffset
      } : {}),
      ref: setScrollRef,
      className: (0, import_classnames130.default)(className, _defineProperty({}, stickyClassName, !!stickyClassName))
    }, /* @__PURE__ */ React342.createElement("table", {
      style: {
        tableLayout: "fixed",
        visibility: noData || mergedColumnWidth ? null : "hidden"
      }
    }, (!noData || !maxContentScroll || allFlattenColumnsWithWidth) && /* @__PURE__ */ React342.createElement(ColGroup_default, {
      colWidths: mergedColumnWidth ? [].concat(_toConsumableArray(mergedColumnWidth), [combinationScrollBarSize]) : [],
      columCount: columCount + 1,
      columns: flattenColumnsWithScrollbar
    }), children(_objectSpread2(_objectSpread2({}, props), {}, {
      stickyOffsets: headerStickyOffsets,
      columns: columnsWithScrollbar,
      flattenColumns: flattenColumnsWithScrollbar
    }))));
  });
  FixedHolder.displayName = "FixedHolder";
  var FixedHolder_default = FixedHolder;

  // node_modules/rc-table/es/Table.js
  var EMPTY_DATA2 = [];
  var EMPTY_SCROLL_TARGET = {};
  var INTERNAL_HOOKS = "rc-table-internal-hook";
  var MemoTableContent = /* @__PURE__ */ React343.memo(function(_ref) {
    var children = _ref.children;
    return children;
  }, function(prev, next) {
    if (!(0, import_shallowequal3.default)(prev.props, next.props)) {
      return false;
    }
    return prev.pingLeft !== next.pingLeft || prev.pingRight !== next.pingRight;
  });
  function Table(props) {
    var _classNames;
    var prefixCls = props.prefixCls, className = props.className, rowClassName = props.rowClassName, style3 = props.style, data = props.data, rowKey = props.rowKey, scroll = props.scroll, tableLayout = props.tableLayout, direction = props.direction, title = props.title, footer = props.footer, summary = props.summary, id2 = props.id, showHeader = props.showHeader, components = props.components, emptyText2 = props.emptyText, onRow = props.onRow, onHeaderRow = props.onHeaderRow, internalHooks = props.internalHooks, transformColumns = props.transformColumns, internalRefs = props.internalRefs, sticky = props.sticky;
    var mergedData = data || EMPTY_DATA2;
    var hasData = !!mergedData.length;
    if (true) {
      ["onRowClick", "onRowDoubleClick", "onRowContextMenu", "onRowMouseEnter", "onRowMouseLeave"].forEach(function(name) {
        warning_default(props[name] === void 0, "`".concat(name, "` is removed, please use `onRow` instead."));
      });
      warning_default(!("getBodyWrapper" in props), "`getBodyWrapper` is deprecated, please use custom `components` instead.");
    }
    var getComponent = React343.useCallback(function(path2, defaultComponent) {
      return getPathValue(components || {}, path2) || defaultComponent;
    }, [components]);
    var getRowKey = React343.useMemo(function() {
      if (typeof rowKey === "function") {
        return rowKey;
      }
      return function(record) {
        var key2 = record && record[rowKey];
        if (true) {
          warning_default(key2 !== void 0, "Each record in table should have a unique `key` prop, or set `rowKey` to an unique primary key.");
        }
        return key2;
      };
    }, [rowKey]);
    var expandableConfig = getExpandableProps(props);
    var expandIcon = expandableConfig.expandIcon, expandedRowKeys = expandableConfig.expandedRowKeys, defaultExpandedRowKeys = expandableConfig.defaultExpandedRowKeys, defaultExpandAllRows = expandableConfig.defaultExpandAllRows, expandedRowRender = expandableConfig.expandedRowRender, columnTitle = expandableConfig.columnTitle, onExpand = expandableConfig.onExpand, onExpandedRowsChange = expandableConfig.onExpandedRowsChange, expandRowByClick = expandableConfig.expandRowByClick, rowExpandable = expandableConfig.rowExpandable, expandIconColumnIndex = expandableConfig.expandIconColumnIndex, expandedRowClassName = expandableConfig.expandedRowClassName, childrenColumnName = expandableConfig.childrenColumnName, indentSize = expandableConfig.indentSize;
    var mergedExpandIcon = expandIcon || renderExpandIcon;
    var mergedChildrenColumnName = childrenColumnName || "children";
    var expandableType = React343.useMemo(function() {
      if (expandedRowRender) {
        return "row";
      }
      if (props.expandable && internalHooks === INTERNAL_HOOKS && props.expandable.__PARENT_RENDER_ICON__ || mergedData.some(function(record) {
        return record && _typeof(record) === "object" && record[mergedChildrenColumnName];
      })) {
        return "nest";
      }
      return false;
    }, [!!expandedRowRender, mergedData]);
    var _React$useState = React343.useState(function() {
      if (defaultExpandedRowKeys) {
        return defaultExpandedRowKeys;
      }
      if (defaultExpandAllRows) {
        return findAllChildrenKeys(mergedData, getRowKey, mergedChildrenColumnName);
      }
      return [];
    }), _React$useState2 = _slicedToArray(_React$useState, 2), innerExpandedKeys = _React$useState2[0], setInnerExpandedKeys = _React$useState2[1];
    var mergedExpandedKeys = React343.useMemo(function() {
      return new Set(expandedRowKeys || innerExpandedKeys || []);
    }, [expandedRowKeys, innerExpandedKeys]);
    var onTriggerExpand = React343.useCallback(function(record) {
      var key2 = getRowKey(record, mergedData.indexOf(record));
      var newExpandedKeys;
      var hasKey = mergedExpandedKeys.has(key2);
      if (hasKey) {
        mergedExpandedKeys.delete(key2);
        newExpandedKeys = _toConsumableArray(mergedExpandedKeys);
      } else {
        newExpandedKeys = [].concat(_toConsumableArray(mergedExpandedKeys), [key2]);
      }
      setInnerExpandedKeys(newExpandedKeys);
      if (onExpand) {
        onExpand(!hasKey, record);
      }
      if (onExpandedRowsChange) {
        onExpandedRowsChange(newExpandedKeys);
      }
    }, [getRowKey, mergedExpandedKeys, mergedData, onExpand, onExpandedRowsChange]);
    if (expandedRowRender && mergedData.some(function(record) {
      return Array.isArray(record === null || record === void 0 ? void 0 : record[mergedChildrenColumnName]);
    })) {
      warning_default(false, "`expandedRowRender` should not use with nested Table");
    }
    var _React$useState3 = React343.useState(0), _React$useState4 = _slicedToArray(_React$useState3, 2), componentWidth = _React$useState4[0], setComponentWidth = _React$useState4[1];
    var _useColumns = useColumns_default(_objectSpread2(_objectSpread2(_objectSpread2({}, props), expandableConfig), {}, {
      expandable: !!expandedRowRender,
      columnTitle,
      expandedKeys: mergedExpandedKeys,
      getRowKey,
      // https://github.com/ant-design/ant-design/issues/23894
      onTriggerExpand,
      expandIcon: mergedExpandIcon,
      expandIconColumnIndex,
      direction
    }), internalHooks === INTERNAL_HOOKS ? transformColumns : null), _useColumns2 = _slicedToArray(_useColumns, 2), columns4 = _useColumns2[0], flattenColumns = _useColumns2[1];
    var columnContext = React343.useMemo(function() {
      return {
        columns: columns4,
        flattenColumns
      };
    }, [columns4, flattenColumns]);
    var fullTableRef = React343.useRef();
    var scrollHeaderRef = React343.useRef();
    var scrollBodyRef = React343.useRef();
    var scrollBodyContainerRef = React343.useRef();
    var scrollSummaryRef = React343.useRef();
    var _React$useState5 = React343.useState(false), _React$useState6 = _slicedToArray(_React$useState5, 2), pingedLeft = _React$useState6[0], setPingedLeft = _React$useState6[1];
    var _React$useState7 = React343.useState(false), _React$useState8 = _slicedToArray(_React$useState7, 2), pingedRight = _React$useState8[0], setPingedRight = _React$useState8[1];
    var _useLayoutState = useLayoutState(/* @__PURE__ */ new Map()), _useLayoutState2 = _slicedToArray(_useLayoutState, 2), colsWidths = _useLayoutState2[0], updateColsWidths = _useLayoutState2[1];
    var colsKeys = getColumnsKey(flattenColumns);
    var pureColWidths = colsKeys.map(function(columnKey) {
      return colsWidths.get(columnKey);
    });
    var colWidths = React343.useMemo(function() {
      return pureColWidths;
    }, [pureColWidths.join("_")]);
    var stickyOffsets = useStickyOffsets_default(colWidths, flattenColumns.length, direction);
    var fixHeader = scroll && validateValue(scroll.y);
    var horizonScroll = scroll && validateValue(scroll.x) || Boolean(expandableConfig.fixed);
    var fixColumn = horizonScroll && flattenColumns.some(function(_ref2) {
      var fixed = _ref2.fixed;
      return fixed;
    });
    var stickyRef = React343.useRef();
    var _useSticky = useSticky(sticky, prefixCls), isSticky = _useSticky.isSticky, offsetHeader = _useSticky.offsetHeader, offsetSummary = _useSticky.offsetSummary, offsetScroll = _useSticky.offsetScroll, stickyClassName = _useSticky.stickyClassName, container = _useSticky.container;
    var summaryNode = summary === null || summary === void 0 ? void 0 : summary(mergedData);
    var fixFooter = (fixHeader || isSticky) && /* @__PURE__ */ React343.isValidElement(summaryNode) && summaryNode.type === Summary_default && summaryNode.props.fixed;
    var scrollXStyle;
    var scrollYStyle;
    var scrollTableStyle;
    if (fixHeader) {
      scrollYStyle = {
        overflowY: "scroll",
        maxHeight: scroll.y
      };
    }
    if (horizonScroll) {
      scrollXStyle = {
        overflowX: "auto"
      };
      if (!fixHeader) {
        scrollYStyle = {
          overflowY: "hidden"
        };
      }
      scrollTableStyle = {
        width: (scroll === null || scroll === void 0 ? void 0 : scroll.x) === true ? "auto" : scroll === null || scroll === void 0 ? void 0 : scroll.x,
        minWidth: "100%"
      };
    }
    var onColumnResize = React343.useCallback(function(columnKey, width) {
      if (isVisible_default(fullTableRef.current)) {
        updateColsWidths(function(widths) {
          if (widths.get(columnKey) !== width) {
            var newWidths = new Map(widths);
            newWidths.set(columnKey, width);
            return newWidths;
          }
          return widths;
        });
      }
    }, []);
    var _useTimeoutLock = useTimeoutLock(null), _useTimeoutLock2 = _slicedToArray(_useTimeoutLock, 2), setScrollTarget = _useTimeoutLock2[0], getScrollTarget = _useTimeoutLock2[1];
    function forceScroll(scrollLeft, target) {
      if (!target) {
        return;
      }
      if (typeof target === "function") {
        target(scrollLeft);
      } else if (target.scrollLeft !== scrollLeft) {
        target.scrollLeft = scrollLeft;
      }
    }
    var onScroll = function onScroll2(_ref3) {
      var currentTarget = _ref3.currentTarget, scrollLeft = _ref3.scrollLeft;
      var isRTL = direction === "rtl";
      var mergedScrollLeft = typeof scrollLeft === "number" ? scrollLeft : currentTarget.scrollLeft;
      var compareTarget = currentTarget || EMPTY_SCROLL_TARGET;
      if (!getScrollTarget() || getScrollTarget() === compareTarget) {
        var _stickyRef$current;
        setScrollTarget(compareTarget);
        forceScroll(mergedScrollLeft, scrollHeaderRef.current);
        forceScroll(mergedScrollLeft, scrollBodyRef.current);
        forceScroll(mergedScrollLeft, scrollSummaryRef.current);
        forceScroll(mergedScrollLeft, (_stickyRef$current = stickyRef.current) === null || _stickyRef$current === void 0 ? void 0 : _stickyRef$current.setScrollLeft);
      }
      if (currentTarget) {
        var scrollWidth = currentTarget.scrollWidth, clientWidth = currentTarget.clientWidth;
        if (scrollWidth === clientWidth) {
          setPingedLeft(false);
          setPingedRight(false);
          return;
        }
        if (isRTL) {
          setPingedLeft(-mergedScrollLeft < scrollWidth - clientWidth);
          setPingedRight(-mergedScrollLeft > 0);
        } else {
          setPingedLeft(mergedScrollLeft > 0);
          setPingedRight(mergedScrollLeft < scrollWidth - clientWidth);
        }
      }
    };
    var triggerOnScroll = function triggerOnScroll2() {
      if (horizonScroll && scrollBodyRef.current) {
        onScroll({
          currentTarget: scrollBodyRef.current
        });
      } else {
        setPingedLeft(false);
        setPingedRight(false);
      }
    };
    var onFullTableResize = function onFullTableResize2(_ref4) {
      var width = _ref4.width;
      if (width !== componentWidth) {
        triggerOnScroll();
        setComponentWidth(fullTableRef.current ? fullTableRef.current.offsetWidth : width);
      }
    };
    var mounted = React343.useRef(false);
    React343.useEffect(function() {
      if (mounted.current) {
        triggerOnScroll();
      }
    }, [horizonScroll, data, columns4.length]);
    React343.useEffect(function() {
      mounted.current = true;
    }, []);
    var _React$useState9 = React343.useState(0), _React$useState10 = _slicedToArray(_React$useState9, 2), scrollbarSize = _React$useState10[0], setScrollbarSize = _React$useState10[1];
    var _React$useState11 = React343.useState(true), _React$useState12 = _slicedToArray(_React$useState11, 2), supportSticky = _React$useState12[0], setSupportSticky = _React$useState12[1];
    React343.useEffect(function() {
      if (scrollBodyRef.current instanceof Element) {
        setScrollbarSize(getTargetScrollBarSize(scrollBodyRef.current).width);
      } else {
        setScrollbarSize(getTargetScrollBarSize(scrollBodyContainerRef.current).width);
      }
      setSupportSticky(isStyleSupport("position", "sticky"));
    }, []);
    React343.useEffect(function() {
      if (internalHooks === INTERNAL_HOOKS && internalRefs) {
        internalRefs.body.current = scrollBodyRef.current;
      }
    });
    var TableComponent = getComponent(["table"], "table");
    var mergedTableLayout = React343.useMemo(function() {
      if (tableLayout) {
        return tableLayout;
      }
      if (fixColumn) {
        return (scroll === null || scroll === void 0 ? void 0 : scroll.x) === "max-content" ? "auto" : "fixed";
      }
      if (fixHeader || isSticky || flattenColumns.some(function(_ref5) {
        var ellipsis = _ref5.ellipsis;
        return ellipsis;
      })) {
        return "fixed";
      }
      return "auto";
    }, [fixHeader, fixColumn, flattenColumns, tableLayout, isSticky]);
    var groupTableNode;
    var headerProps = {
      colWidths,
      columCount: flattenColumns.length,
      stickyOffsets,
      onHeaderRow,
      fixHeader,
      scroll
    };
    var emptyNode = React343.useMemo(function() {
      if (hasData) {
        return null;
      }
      if (typeof emptyText2 === "function") {
        return emptyText2();
      }
      return emptyText2;
    }, [hasData, emptyText2]);
    var bodyTable = /* @__PURE__ */ React343.createElement(Body_default, {
      data: mergedData,
      measureColumnWidth: fixHeader || horizonScroll || isSticky,
      expandedKeys: mergedExpandedKeys,
      rowExpandable,
      getRowKey,
      onRow,
      emptyNode,
      childrenColumnName: mergedChildrenColumnName
    });
    var bodyColGroup = /* @__PURE__ */ React343.createElement(ColGroup_default, {
      colWidths: flattenColumns.map(function(_ref6) {
        var width = _ref6.width;
        return width;
      }),
      columns: flattenColumns
    });
    var customizeScrollBody = getComponent(["body"]);
    if (typeof customizeScrollBody === "function" && hasData && !fixHeader) {
      warning_default(false, "`components.body` with render props is only work on `scroll.y`.");
    }
    if (fixHeader || isSticky) {
      var bodyContent;
      if (typeof customizeScrollBody === "function") {
        bodyContent = customizeScrollBody(mergedData, {
          scrollbarSize,
          ref: scrollBodyRef,
          onScroll
        });
        headerProps.colWidths = flattenColumns.map(function(_ref7, index2) {
          var width = _ref7.width;
          var colWidth = index2 === columns4.length - 1 ? width - scrollbarSize : width;
          if (typeof colWidth === "number" && !Number.isNaN(colWidth)) {
            return colWidth;
          }
          warning_default(false, "When use `components.body` with render props. Each column should have a fixed `width` value.");
          return 0;
        });
      } else {
        bodyContent = /* @__PURE__ */ React343.createElement("div", {
          style: _objectSpread2(_objectSpread2({}, scrollXStyle), scrollYStyle),
          onScroll,
          ref: scrollBodyRef,
          className: (0, import_classnames131.default)("".concat(prefixCls, "-body"))
        }, /* @__PURE__ */ React343.createElement(TableComponent, {
          style: _objectSpread2(_objectSpread2({}, scrollTableStyle), {}, {
            tableLayout: mergedTableLayout
          })
        }, bodyColGroup, bodyTable, !fixFooter && summaryNode && /* @__PURE__ */ React343.createElement(Footer_default, {
          stickyOffsets,
          flattenColumns
        }, summaryNode)));
      }
      var fixedHolderProps = _objectSpread2(_objectSpread2(_objectSpread2({
        noData: !mergedData.length,
        maxContentScroll: horizonScroll && scroll.x === "max-content"
      }, headerProps), columnContext), {}, {
        direction,
        stickyClassName,
        onScroll
      });
      groupTableNode = /* @__PURE__ */ React343.createElement(React343.Fragment, null, showHeader !== false && /* @__PURE__ */ React343.createElement(FixedHolder_default, _extends({}, fixedHolderProps, {
        stickyTopOffset: offsetHeader,
        className: "".concat(prefixCls, "-header"),
        ref: scrollHeaderRef
      }), function(fixedHolderPassProps) {
        return /* @__PURE__ */ React343.createElement(React343.Fragment, null, /* @__PURE__ */ React343.createElement(Header_default2, fixedHolderPassProps), fixFooter === "top" && /* @__PURE__ */ React343.createElement(Footer_default, fixedHolderPassProps, summaryNode));
      }), bodyContent, fixFooter && fixFooter !== "top" && /* @__PURE__ */ React343.createElement(FixedHolder_default, _extends({}, fixedHolderProps, {
        stickyBottomOffset: offsetSummary,
        className: "".concat(prefixCls, "-summary"),
        ref: scrollSummaryRef
      }), function(fixedHolderPassProps) {
        return /* @__PURE__ */ React343.createElement(Footer_default, fixedHolderPassProps, summaryNode);
      }), isSticky && /* @__PURE__ */ React343.createElement(stickyScrollBar_default, {
        ref: stickyRef,
        offsetScroll,
        scrollBodyRef,
        onScroll,
        container
      }));
    } else {
      groupTableNode = /* @__PURE__ */ React343.createElement("div", {
        style: _objectSpread2(_objectSpread2({}, scrollXStyle), scrollYStyle),
        className: (0, import_classnames131.default)("".concat(prefixCls, "-content")),
        onScroll,
        ref: scrollBodyRef
      }, /* @__PURE__ */ React343.createElement(TableComponent, {
        style: _objectSpread2(_objectSpread2({}, scrollTableStyle), {}, {
          tableLayout: mergedTableLayout
        })
      }, bodyColGroup, showHeader !== false && /* @__PURE__ */ React343.createElement(Header_default2, _extends({}, headerProps, columnContext)), bodyTable, summaryNode && /* @__PURE__ */ React343.createElement(Footer_default, {
        stickyOffsets,
        flattenColumns
      }, summaryNode)));
    }
    var ariaProps = pickAttrs(props, {
      aria: true,
      data: true
    });
    var fullTable = /* @__PURE__ */ React343.createElement("div", _extends({
      className: (0, import_classnames131.default)(prefixCls, className, (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-rtl"), direction === "rtl"), _defineProperty(_classNames, "".concat(prefixCls, "-ping-left"), pingedLeft), _defineProperty(_classNames, "".concat(prefixCls, "-ping-right"), pingedRight), _defineProperty(_classNames, "".concat(prefixCls, "-layout-fixed"), tableLayout === "fixed"), _defineProperty(_classNames, "".concat(prefixCls, "-fixed-header"), fixHeader), _defineProperty(_classNames, "".concat(prefixCls, "-fixed-column"), fixColumn), _defineProperty(_classNames, "".concat(prefixCls, "-scroll-horizontal"), horizonScroll), _defineProperty(_classNames, "".concat(prefixCls, "-has-fix-left"), flattenColumns[0] && flattenColumns[0].fixed), _defineProperty(_classNames, "".concat(prefixCls, "-has-fix-right"), flattenColumns[flattenColumns.length - 1] && flattenColumns[flattenColumns.length - 1].fixed === "right"), _classNames)),
      style: style3,
      id: id2,
      ref: fullTableRef
    }, ariaProps), /* @__PURE__ */ React343.createElement(MemoTableContent, {
      pingLeft: pingedLeft,
      pingRight: pingedRight,
      props: _objectSpread2(_objectSpread2({}, props), {}, {
        stickyOffsets,
        mergedExpandedKeys
      })
    }, title && /* @__PURE__ */ React343.createElement(Panel_default2, {
      className: "".concat(prefixCls, "-title")
    }, title(mergedData)), /* @__PURE__ */ React343.createElement("div", {
      ref: scrollBodyContainerRef,
      className: "".concat(prefixCls, "-container")
    }, groupTableNode), footer && /* @__PURE__ */ React343.createElement(Panel_default2, {
      className: "".concat(prefixCls, "-footer")
    }, footer(mergedData))));
    if (horizonScroll) {
      fullTable = /* @__PURE__ */ React343.createElement(es_default2, {
        onResize: onFullTableResize
      }, fullTable);
    }
    var TableContextValue = React343.useMemo(function() {
      return {
        prefixCls,
        getComponent,
        scrollbarSize,
        direction,
        fixedInfoList: flattenColumns.map(function(_24, colIndex) {
          return getCellFixedInfo(colIndex, colIndex, flattenColumns, stickyOffsets, direction);
        }),
        isSticky
      };
    }, [prefixCls, getComponent, scrollbarSize, direction, flattenColumns, stickyOffsets, isSticky]);
    var BodyContextValue = React343.useMemo(function() {
      return _objectSpread2(_objectSpread2({}, columnContext), {}, {
        tableLayout: mergedTableLayout,
        rowClassName,
        expandedRowClassName,
        expandIcon: mergedExpandIcon,
        expandableType,
        expandRowByClick,
        expandedRowRender,
        onTriggerExpand,
        expandIconColumnIndex,
        indentSize,
        allColumnsFixedLeft: columnContext.flattenColumns.every(function(col) {
          return col.fixed === "left";
        })
      });
    }, [columnContext, mergedTableLayout, rowClassName, expandedRowClassName, mergedExpandIcon, expandableType, expandRowByClick, expandedRowRender, onTriggerExpand, expandIconColumnIndex, indentSize]);
    var ExpandedRowContextValue = React343.useMemo(function() {
      return {
        componentWidth,
        fixHeader,
        fixColumn,
        horizonScroll
      };
    }, [componentWidth, fixHeader, fixColumn, horizonScroll]);
    var ResizeContextValue = React343.useMemo(function() {
      return {
        onColumnResize
      };
    }, [onColumnResize]);
    return /* @__PURE__ */ React343.createElement(StickyContext_default.Provider, {
      value: supportSticky
    }, /* @__PURE__ */ React343.createElement(TableContext_default.Provider, {
      value: TableContextValue
    }, /* @__PURE__ */ React343.createElement(BodyContext_default.Provider, {
      value: BodyContextValue
    }, /* @__PURE__ */ React343.createElement(ExpandedRowContext_default.Provider, {
      value: ExpandedRowContextValue
    }, /* @__PURE__ */ React343.createElement(ResizeContext_default.Provider, {
      value: ResizeContextValue
    }, fullTable)))));
  }
  Table.EXPAND_COLUMN = EXPAND_COLUMN;
  Table.Column = Column_default;
  Table.ColumnGroup = ColumnGroup_default;
  Table.Summary = FooterComponents;
  Table.defaultProps = {
    rowKey: "key",
    prefixCls: "rc-table",
    emptyText: function emptyText() {
      return "No Data";
    }
  };
  var Table_default = Table;

  // node_modules/rc-table/es/index.js
  var es_default25 = Table_default;

  // node_modules/antd/es/table/Table.js
  var React377 = __toESM(require_react());

  // node_modules/antd/es/table/Column.js
  function Column2(_24) {
    return null;
  }
  var Column_default2 = Column2;

  // node_modules/antd/es/table/ColumnGroup.js
  function ColumnGroup2(_24) {
    return null;
  }
  var ColumnGroup_default2 = ColumnGroup2;

  // node_modules/antd/es/table/ExpandIcon.js
  var import_classnames132 = __toESM(require_classnames());
  var React344 = __toESM(require_react());
  function renderExpandIcon2(locale4) {
    return function expandIcon(_ref) {
      var _classNames;
      var prefixCls = _ref.prefixCls, onExpand = _ref.onExpand, record = _ref.record, expanded = _ref.expanded, expandable = _ref.expandable;
      var iconPrefix = "".concat(prefixCls, "-row-expand-icon");
      return /* @__PURE__ */ React344.createElement("button", {
        type: "button",
        onClick: function onClick(e3) {
          onExpand(record, e3);
          e3.stopPropagation();
        },
        className: (0, import_classnames132.default)(iconPrefix, (_classNames = {}, _defineProperty(_classNames, "".concat(iconPrefix, "-spaced"), !expandable), _defineProperty(_classNames, "".concat(iconPrefix, "-expanded"), expandable && expanded), _defineProperty(_classNames, "".concat(iconPrefix, "-collapsed"), expandable && !expanded), _classNames)),
        "aria-label": expanded ? locale4.collapse : locale4.expand,
        "aria-expanded": expanded
      });
    };
  }
  var ExpandIcon_default = renderExpandIcon2;

  // node_modules/antd/es/table/hooks/useFilter/index.js
  var React370 = __toESM(require_react());

  // node_modules/antd/es/table/util.js
  function getColumnKey(column, defaultKey) {
    if ("key" in column && column.key !== void 0 && column.key !== null) {
      return column.key;
    }
    if (column.dataIndex) {
      return Array.isArray(column.dataIndex) ? column.dataIndex.join(".") : column.dataIndex;
    }
    return defaultKey;
  }
  function getColumnPos(index2, pos) {
    return pos ? "".concat(pos, "-").concat(index2) : "".concat(index2);
  }
  function renderColumnTitle(title, props) {
    if (typeof title === "function") {
      return title(props);
    }
    return title;
  }
  function safeColumnTitle(title, props) {
    var res = renderColumnTitle(title, props);
    if (Object.prototype.toString.call(res) === "[object Object]")
      return "";
    return res;
  }

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/FilterFilled.js
  var React345 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/FilterFilled.js
  var FilterFilled = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M349 838c0 17.7 14.2 32 31.8 32h262.4c17.6 0 31.8-14.3 31.8-32V642H349v196zm531.1-684H143.9c-24.5 0-39.8 26.7-27.5 48l221.3 376h348.8l221.3-376c12.1-21.3-3.2-48-27.7-48z" } }] }, "name": "filter", "theme": "filled" };
  var FilterFilled_default = FilterFilled;

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/FilterFilled.js
  var FilterFilled2 = function FilterFilled3(props, ref) {
    return /* @__PURE__ */ React345.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: FilterFilled_default
    }));
  };
  FilterFilled2.displayName = "FilterFilled";
  var FilterFilled_default2 = /* @__PURE__ */ React345.forwardRef(FilterFilled2);

  // node_modules/antd/es/table/hooks/useFilter/FilterDropdown.js
  var import_classnames140 = __toESM(require_classnames());
  var import_isEqual6 = __toESM(require_isEqual());
  var React369 = __toESM(require_react());

  // node_modules/rc-tree/es/Tree.js
  var import_classnames136 = __toESM(require_classnames());
  var React354 = __toESM(require_react());

  // node_modules/rc-tree/es/contextTypes.js
  var React346 = __toESM(require_react());
  var TreeContext = /* @__PURE__ */ React346.createContext(null);

  // node_modules/rc-tree/es/DropIndicator.js
  var React347 = __toESM(require_react());
  function DropIndicator(_ref) {
    var dropPosition = _ref.dropPosition, dropLevelOffset = _ref.dropLevelOffset, indent = _ref.indent;
    var style3 = {
      pointerEvents: "none",
      position: "absolute",
      right: 0,
      backgroundColor: "red",
      height: 2
    };
    switch (dropPosition) {
      case -1:
        style3.top = 0;
        style3.left = -dropLevelOffset * indent;
        break;
      case 1:
        style3.bottom = 0;
        style3.left = -dropLevelOffset * indent;
        break;
      case 0:
        style3.bottom = 0;
        style3.left = indent;
        break;
    }
    return /* @__PURE__ */ React347.createElement("div", {
      style: style3
    });
  }

  // node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty.js
  function _objectDestructuringEmpty(obj) {
    if (obj == null)
      throw new TypeError("Cannot destructure " + obj);
  }

  // node_modules/rc-tree/es/NodeList.js
  var React352 = __toESM(require_react());

  // node_modules/rc-tree/es/MotionTreeNode.js
  var import_classnames135 = __toESM(require_classnames());
  var React351 = __toESM(require_react());

  // node_modules/rc-tree/es/TreeNode.js
  var import_classnames134 = __toESM(require_classnames());
  var React349 = __toESM(require_react());

  // node_modules/rc-tree/es/Indent.js
  var React348 = __toESM(require_react());
  var import_classnames133 = __toESM(require_classnames());
  var Indent = function Indent2(_ref) {
    var prefixCls = _ref.prefixCls, level = _ref.level, isStart = _ref.isStart, isEnd = _ref.isEnd;
    var baseClassName = "".concat(prefixCls, "-indent-unit");
    var list = [];
    for (var i3 = 0; i3 < level; i3 += 1) {
      var _classNames;
      list.push(/* @__PURE__ */ React348.createElement("span", {
        key: i3,
        className: (0, import_classnames133.default)(baseClassName, (_classNames = {}, _defineProperty(_classNames, "".concat(baseClassName, "-start"), isStart[i3]), _defineProperty(_classNames, "".concat(baseClassName, "-end"), isEnd[i3]), _classNames))
      }));
    }
    return /* @__PURE__ */ React348.createElement("span", {
      "aria-hidden": "true",
      className: "".concat(prefixCls, "-indent")
    }, list);
  };
  var Indent_default = /* @__PURE__ */ React348.memo(Indent);

  // node_modules/rc-tree/es/TreeNode.js
  var _excluded53 = ["eventKey", "className", "style", "dragOver", "dragOverGapTop", "dragOverGapBottom", "isLeaf", "isStart", "isEnd", "expanded", "selected", "checked", "halfChecked", "loading", "domRef", "active", "data", "onMouseMove", "selectable"];
  var ICON_OPEN = "open";
  var ICON_CLOSE = "close";
  var defaultTitle = "---";
  var InternalTreeNode = /* @__PURE__ */ function(_React$Component) {
    _inherits(InternalTreeNode2, _React$Component);
    var _super = _createSuper(InternalTreeNode2);
    function InternalTreeNode2() {
      var _this;
      _classCallCheck(this, InternalTreeNode2);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _super.call.apply(_super, [this].concat(args));
      _this.state = {
        dragNodeHighlight: false
      };
      _this.selectHandle = void 0;
      _this.cacheIndent = void 0;
      _this.onSelectorClick = function(e3) {
        var onNodeClick = _this.props.context.onNodeClick;
        onNodeClick(e3, convertNodePropsToEventData(_this.props));
        if (_this.isSelectable()) {
          _this.onSelect(e3);
        } else {
          _this.onCheck(e3);
        }
      };
      _this.onSelectorDoubleClick = function(e3) {
        var onNodeDoubleClick = _this.props.context.onNodeDoubleClick;
        onNodeDoubleClick(e3, convertNodePropsToEventData(_this.props));
      };
      _this.onSelect = function(e3) {
        if (_this.isDisabled())
          return;
        var onNodeSelect = _this.props.context.onNodeSelect;
        onNodeSelect(e3, convertNodePropsToEventData(_this.props));
      };
      _this.onCheck = function(e3) {
        if (_this.isDisabled())
          return;
        var _this$props = _this.props, disableCheckbox = _this$props.disableCheckbox, checked = _this$props.checked;
        var onNodeCheck = _this.props.context.onNodeCheck;
        if (!_this.isCheckable() || disableCheckbox)
          return;
        var targetChecked = !checked;
        onNodeCheck(e3, convertNodePropsToEventData(_this.props), targetChecked);
      };
      _this.onMouseEnter = function(e3) {
        var onNodeMouseEnter = _this.props.context.onNodeMouseEnter;
        onNodeMouseEnter(e3, convertNodePropsToEventData(_this.props));
      };
      _this.onMouseLeave = function(e3) {
        var onNodeMouseLeave = _this.props.context.onNodeMouseLeave;
        onNodeMouseLeave(e3, convertNodePropsToEventData(_this.props));
      };
      _this.onContextMenu = function(e3) {
        var onNodeContextMenu = _this.props.context.onNodeContextMenu;
        onNodeContextMenu(e3, convertNodePropsToEventData(_this.props));
      };
      _this.onDragStart = function(e3) {
        var onNodeDragStart = _this.props.context.onNodeDragStart;
        e3.stopPropagation();
        _this.setState({
          dragNodeHighlight: true
        });
        onNodeDragStart(e3, _assertThisInitialized(_this));
        try {
          e3.dataTransfer.setData("text/plain", "");
        } catch (error2) {
        }
      };
      _this.onDragEnter = function(e3) {
        var onNodeDragEnter = _this.props.context.onNodeDragEnter;
        e3.preventDefault();
        e3.stopPropagation();
        onNodeDragEnter(e3, _assertThisInitialized(_this));
      };
      _this.onDragOver = function(e3) {
        var onNodeDragOver = _this.props.context.onNodeDragOver;
        e3.preventDefault();
        e3.stopPropagation();
        onNodeDragOver(e3, _assertThisInitialized(_this));
      };
      _this.onDragLeave = function(e3) {
        var onNodeDragLeave = _this.props.context.onNodeDragLeave;
        e3.stopPropagation();
        onNodeDragLeave(e3, _assertThisInitialized(_this));
      };
      _this.onDragEnd = function(e3) {
        var onNodeDragEnd = _this.props.context.onNodeDragEnd;
        e3.stopPropagation();
        _this.setState({
          dragNodeHighlight: false
        });
        onNodeDragEnd(e3, _assertThisInitialized(_this));
      };
      _this.onDrop = function(e3) {
        var onNodeDrop = _this.props.context.onNodeDrop;
        e3.preventDefault();
        e3.stopPropagation();
        _this.setState({
          dragNodeHighlight: false
        });
        onNodeDrop(e3, _assertThisInitialized(_this));
      };
      _this.onExpand = function(e3) {
        var _this$props2 = _this.props, loading = _this$props2.loading, onNodeExpand = _this$props2.context.onNodeExpand;
        if (loading)
          return;
        onNodeExpand(e3, convertNodePropsToEventData(_this.props));
      };
      _this.setSelectHandle = function(node) {
        _this.selectHandle = node;
      };
      _this.getNodeState = function() {
        var expanded = _this.props.expanded;
        if (_this.isLeaf()) {
          return null;
        }
        return expanded ? ICON_OPEN : ICON_CLOSE;
      };
      _this.hasChildren = function() {
        var eventKey = _this.props.eventKey;
        var keyEntities = _this.props.context.keyEntities;
        var _ref = getEntity(keyEntities, eventKey) || {}, children = _ref.children;
        return !!(children || []).length;
      };
      _this.isLeaf = function() {
        var _this$props3 = _this.props, isLeaf = _this$props3.isLeaf, loaded = _this$props3.loaded;
        var loadData = _this.props.context.loadData;
        var hasChildren = _this.hasChildren();
        if (isLeaf === false) {
          return false;
        }
        return isLeaf || !loadData && !hasChildren || loadData && loaded && !hasChildren;
      };
      _this.isDisabled = function() {
        var disabled = _this.props.disabled;
        var treeDisabled = _this.props.context.disabled;
        return !!(treeDisabled || disabled);
      };
      _this.isCheckable = function() {
        var checkable = _this.props.checkable;
        var treeCheckable = _this.props.context.checkable;
        if (!treeCheckable || checkable === false)
          return false;
        return treeCheckable;
      };
      _this.syncLoadData = function(props) {
        var expanded = props.expanded, loading = props.loading, loaded = props.loaded;
        var _this$props$context = _this.props.context, loadData = _this$props$context.loadData, onNodeLoad = _this$props$context.onNodeLoad;
        if (loading) {
          return;
        }
        if (loadData && expanded && !_this.isLeaf()) {
          if (!_this.hasChildren() && !loaded) {
            onNodeLoad(convertNodePropsToEventData(_this.props));
          }
        }
      };
      _this.isDraggable = function() {
        var _this$props4 = _this.props, data = _this$props4.data, draggable = _this$props4.context.draggable;
        return !!(draggable && (!draggable.nodeDraggable || draggable.nodeDraggable(data)));
      };
      _this.renderDragHandler = function() {
        var _this$props$context2 = _this.props.context, draggable = _this$props$context2.draggable, prefixCls = _this$props$context2.prefixCls;
        return (draggable === null || draggable === void 0 ? void 0 : draggable.icon) ? /* @__PURE__ */ React349.createElement("span", {
          className: "".concat(prefixCls, "-draggable-icon")
        }, draggable.icon) : null;
      };
      _this.renderSwitcherIconDom = function(isLeaf) {
        var switcherIconFromProps = _this.props.switcherIcon;
        var switcherIconFromCtx = _this.props.context.switcherIcon;
        var switcherIcon = switcherIconFromProps || switcherIconFromCtx;
        if (typeof switcherIcon === "function") {
          return switcherIcon(_objectSpread2(_objectSpread2({}, _this.props), {}, {
            isLeaf
          }));
        }
        return switcherIcon;
      };
      _this.renderSwitcher = function() {
        var expanded = _this.props.expanded;
        var prefixCls = _this.props.context.prefixCls;
        if (_this.isLeaf()) {
          var _switcherIconDom = _this.renderSwitcherIconDom(true);
          return _switcherIconDom !== false ? /* @__PURE__ */ React349.createElement("span", {
            className: (0, import_classnames134.default)("".concat(prefixCls, "-switcher"), "".concat(prefixCls, "-switcher-noop"))
          }, _switcherIconDom) : null;
        }
        var switcherCls = (0, import_classnames134.default)("".concat(prefixCls, "-switcher"), "".concat(prefixCls, "-switcher_").concat(expanded ? ICON_OPEN : ICON_CLOSE));
        var switcherIconDom = _this.renderSwitcherIconDom(false);
        return switcherIconDom !== false ? /* @__PURE__ */ React349.createElement("span", {
          onClick: _this.onExpand,
          className: switcherCls
        }, switcherIconDom) : null;
      };
      _this.renderCheckbox = function() {
        var _this$props5 = _this.props, checked = _this$props5.checked, halfChecked = _this$props5.halfChecked, disableCheckbox = _this$props5.disableCheckbox;
        var prefixCls = _this.props.context.prefixCls;
        var disabled = _this.isDisabled();
        var checkable = _this.isCheckable();
        if (!checkable)
          return null;
        var $custom = typeof checkable !== "boolean" ? checkable : null;
        return /* @__PURE__ */ React349.createElement("span", {
          className: (0, import_classnames134.default)("".concat(prefixCls, "-checkbox"), checked && "".concat(prefixCls, "-checkbox-checked"), !checked && halfChecked && "".concat(prefixCls, "-checkbox-indeterminate"), (disabled || disableCheckbox) && "".concat(prefixCls, "-checkbox-disabled")),
          onClick: _this.onCheck
        }, $custom);
      };
      _this.renderIcon = function() {
        var loading = _this.props.loading;
        var prefixCls = _this.props.context.prefixCls;
        return /* @__PURE__ */ React349.createElement("span", {
          className: (0, import_classnames134.default)("".concat(prefixCls, "-iconEle"), "".concat(prefixCls, "-icon__").concat(_this.getNodeState() || "docu"), loading && "".concat(prefixCls, "-icon_loading"))
        });
      };
      _this.renderSelector = function() {
        var dragNodeHighlight = _this.state.dragNodeHighlight;
        var _this$props6 = _this.props, _this$props6$title = _this$props6.title, title = _this$props6$title === void 0 ? defaultTitle : _this$props6$title, selected = _this$props6.selected, icon = _this$props6.icon, loading = _this$props6.loading, data = _this$props6.data;
        var _this$props$context3 = _this.props.context, prefixCls = _this$props$context3.prefixCls, showIcon = _this$props$context3.showIcon, treeIcon = _this$props$context3.icon, loadData = _this$props$context3.loadData, titleRender = _this$props$context3.titleRender;
        var disabled = _this.isDisabled();
        var wrapClass = "".concat(prefixCls, "-node-content-wrapper");
        var $icon;
        if (showIcon) {
          var currentIcon = icon || treeIcon;
          $icon = currentIcon ? /* @__PURE__ */ React349.createElement("span", {
            className: (0, import_classnames134.default)("".concat(prefixCls, "-iconEle"), "".concat(prefixCls, "-icon__customize"))
          }, typeof currentIcon === "function" ? currentIcon(_this.props) : currentIcon) : _this.renderIcon();
        } else if (loadData && loading) {
          $icon = _this.renderIcon();
        }
        var titleNode;
        if (typeof title === "function") {
          titleNode = title(data);
        } else if (titleRender) {
          titleNode = titleRender(data);
        } else {
          titleNode = title;
        }
        var $title = /* @__PURE__ */ React349.createElement("span", {
          className: "".concat(prefixCls, "-title")
        }, titleNode);
        return /* @__PURE__ */ React349.createElement("span", {
          ref: _this.setSelectHandle,
          title: typeof title === "string" ? title : "",
          className: (0, import_classnames134.default)("".concat(wrapClass), "".concat(wrapClass, "-").concat(_this.getNodeState() || "normal"), !disabled && (selected || dragNodeHighlight) && "".concat(prefixCls, "-node-selected")),
          onMouseEnter: _this.onMouseEnter,
          onMouseLeave: _this.onMouseLeave,
          onContextMenu: _this.onContextMenu,
          onClick: _this.onSelectorClick,
          onDoubleClick: _this.onSelectorDoubleClick
        }, $icon, $title, _this.renderDropIndicator());
      };
      _this.renderDropIndicator = function() {
        var _this$props7 = _this.props, disabled = _this$props7.disabled, eventKey = _this$props7.eventKey;
        var _this$props$context4 = _this.props.context, draggable = _this$props$context4.draggable, dropLevelOffset = _this$props$context4.dropLevelOffset, dropPosition = _this$props$context4.dropPosition, prefixCls = _this$props$context4.prefixCls, indent = _this$props$context4.indent, dropIndicatorRender2 = _this$props$context4.dropIndicatorRender, dragOverNodeKey = _this$props$context4.dragOverNodeKey, direction = _this$props$context4.direction;
        var rootDraggable = !!draggable;
        var showIndicator = !disabled && rootDraggable && dragOverNodeKey === eventKey;
        var mergedIndent = indent !== null && indent !== void 0 ? indent : _this.cacheIndent;
        _this.cacheIndent = indent;
        return showIndicator ? dropIndicatorRender2({
          dropPosition,
          dropLevelOffset,
          indent: mergedIndent,
          prefixCls,
          direction
        }) : null;
      };
      return _this;
    }
    _createClass(InternalTreeNode2, [{
      key: "componentDidMount",
      value: (
        // Isomorphic needn't load data in server side
        function componentDidMount() {
          this.syncLoadData(this.props);
        }
      )
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate() {
        this.syncLoadData(this.props);
      }
    }, {
      key: "isSelectable",
      value: function isSelectable() {
        var selectable = this.props.selectable;
        var treeSelectable = this.props.context.selectable;
        if (typeof selectable === "boolean") {
          return selectable;
        }
        return treeSelectable;
      }
    }, {
      key: "render",
      value: (
        // =========================== Render ===========================
        function render2() {
          var _classNames;
          var _this$props8 = this.props, eventKey = _this$props8.eventKey, className = _this$props8.className, style3 = _this$props8.style, dragOver = _this$props8.dragOver, dragOverGapTop = _this$props8.dragOverGapTop, dragOverGapBottom = _this$props8.dragOverGapBottom, isLeaf = _this$props8.isLeaf, isStart = _this$props8.isStart, isEnd = _this$props8.isEnd, expanded = _this$props8.expanded, selected = _this$props8.selected, checked = _this$props8.checked, halfChecked = _this$props8.halfChecked, loading = _this$props8.loading, domRef = _this$props8.domRef, active = _this$props8.active, data = _this$props8.data, onMouseMove = _this$props8.onMouseMove, selectable = _this$props8.selectable, otherProps = _objectWithoutProperties(_this$props8, _excluded53);
          var _this$props$context5 = this.props.context, prefixCls = _this$props$context5.prefixCls, filterTreeNode = _this$props$context5.filterTreeNode, keyEntities = _this$props$context5.keyEntities, dropContainerKey = _this$props$context5.dropContainerKey, dropTargetKey = _this$props$context5.dropTargetKey, draggingNodeKey = _this$props$context5.draggingNodeKey;
          var disabled = this.isDisabled();
          var dataOrAriaAttributeProps = pickAttrs(otherProps, {
            aria: true,
            data: true
          });
          var _ref2 = getEntity(keyEntities, eventKey) || {}, level = _ref2.level;
          var isEndNode = isEnd[isEnd.length - 1];
          var mergedDraggable = this.isDraggable();
          var draggableWithoutDisabled = !disabled && mergedDraggable;
          var dragging = draggingNodeKey === eventKey;
          var ariaSelected = selectable !== void 0 ? {
            "aria-selected": !!selectable
          } : void 0;
          return /* @__PURE__ */ React349.createElement("div", _extends({
            ref: domRef,
            className: (0, import_classnames134.default)(className, "".concat(prefixCls, "-treenode"), (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-treenode-disabled"), disabled), _defineProperty(_classNames, "".concat(prefixCls, "-treenode-switcher-").concat(expanded ? "open" : "close"), !isLeaf), _defineProperty(_classNames, "".concat(prefixCls, "-treenode-checkbox-checked"), checked), _defineProperty(_classNames, "".concat(prefixCls, "-treenode-checkbox-indeterminate"), halfChecked), _defineProperty(_classNames, "".concat(prefixCls, "-treenode-selected"), selected), _defineProperty(_classNames, "".concat(prefixCls, "-treenode-loading"), loading), _defineProperty(_classNames, "".concat(prefixCls, "-treenode-active"), active), _defineProperty(_classNames, "".concat(prefixCls, "-treenode-leaf-last"), isEndNode), _defineProperty(_classNames, "".concat(prefixCls, "-treenode-draggable"), mergedDraggable), _defineProperty(_classNames, "dragging", dragging), _defineProperty(_classNames, "drop-target", dropTargetKey === eventKey), _defineProperty(_classNames, "drop-container", dropContainerKey === eventKey), _defineProperty(_classNames, "drag-over", !disabled && dragOver), _defineProperty(_classNames, "drag-over-gap-top", !disabled && dragOverGapTop), _defineProperty(_classNames, "drag-over-gap-bottom", !disabled && dragOverGapBottom), _defineProperty(_classNames, "filter-node", filterTreeNode && filterTreeNode(convertNodePropsToEventData(this.props))), _classNames)),
            style: style3,
            draggable: draggableWithoutDisabled,
            "aria-grabbed": dragging,
            onDragStart: draggableWithoutDisabled ? this.onDragStart : void 0,
            onDragEnter: mergedDraggable ? this.onDragEnter : void 0,
            onDragOver: mergedDraggable ? this.onDragOver : void 0,
            onDragLeave: mergedDraggable ? this.onDragLeave : void 0,
            onDrop: mergedDraggable ? this.onDrop : void 0,
            onDragEnd: mergedDraggable ? this.onDragEnd : void 0,
            onMouseMove
          }, ariaSelected, dataOrAriaAttributeProps), /* @__PURE__ */ React349.createElement(Indent_default, {
            prefixCls,
            level,
            isStart,
            isEnd
          }), this.renderDragHandler(), this.renderSwitcher(), this.renderCheckbox(), this.renderSelector());
        }
      )
    }]);
    return InternalTreeNode2;
  }(React349.Component);
  var ContextTreeNode = function ContextTreeNode2(props) {
    return /* @__PURE__ */ React349.createElement(TreeContext.Consumer, null, function(context2) {
      return /* @__PURE__ */ React349.createElement(InternalTreeNode, _extends({}, props, {
        context: context2
      }));
    });
  };
  ContextTreeNode.displayName = "TreeNode";
  ContextTreeNode.isTreeNode = 1;
  var TreeNode_default = ContextTreeNode;

  // node_modules/rc-tree/es/useUnmount.js
  var React350 = __toESM(require_react());
  function useUnmount(triggerStart, triggerEnd) {
    var _React$useState = React350.useState(false), _React$useState2 = _slicedToArray(_React$useState, 2), firstMount = _React$useState2[0], setFirstMount = _React$useState2[1];
    React350.useLayoutEffect(function() {
      if (firstMount) {
        triggerStart();
        return function() {
          triggerEnd();
        };
      }
    }, [firstMount]);
    React350.useLayoutEffect(function() {
      setFirstMount(true);
      return function() {
        setFirstMount(false);
      };
    }, []);
  }

  // node_modules/rc-tree/es/MotionTreeNode.js
  var _excluded54 = ["className", "style", "motion", "motionNodes", "motionType", "onMotionStart", "onMotionEnd", "active", "treeNodeRequiredProps"];
  var MotionTreeNode = function MotionTreeNode2(_ref, ref) {
    var className = _ref.className, style3 = _ref.style, motion2 = _ref.motion, motionNodes = _ref.motionNodes, motionType = _ref.motionType, onOriginMotionStart = _ref.onMotionStart, onOriginMotionEnd = _ref.onMotionEnd, active = _ref.active, treeNodeRequiredProps = _ref.treeNodeRequiredProps, props = _objectWithoutProperties(_ref, _excluded54);
    var _React$useState = React351.useState(true), _React$useState2 = _slicedToArray(_React$useState, 2), visible = _React$useState2[0], setVisible = _React$useState2[1];
    var _React$useContext = React351.useContext(TreeContext), prefixCls = _React$useContext.prefixCls;
    var targetVisible = motionNodes && motionType !== "hide";
    useLayoutEffect_default(function() {
      if (motionNodes) {
        if (targetVisible !== visible) {
          setVisible(targetVisible);
        }
      }
    }, [motionNodes]);
    var triggerMotionStart = function triggerMotionStart2() {
      if (motionNodes) {
        onOriginMotionStart();
      }
    };
    var triggerMotionEndRef = React351.useRef(false);
    var triggerMotionEnd = function triggerMotionEnd2() {
      if (motionNodes && !triggerMotionEndRef.current) {
        triggerMotionEndRef.current = true;
        onOriginMotionEnd();
      }
    };
    useUnmount(triggerMotionStart, triggerMotionEnd);
    var onVisibleChanged = function onVisibleChanged2(nextVisible) {
      if (targetVisible === nextVisible) {
        triggerMotionEnd();
      }
    };
    if (motionNodes) {
      return /* @__PURE__ */ React351.createElement(es_default3, _extends({
        ref,
        visible
      }, motion2, {
        motionAppear: motionType === "show",
        onVisibleChanged
      }), function(_ref2, motionRef) {
        var motionClassName = _ref2.className, motionStyle = _ref2.style;
        return /* @__PURE__ */ React351.createElement("div", {
          ref: motionRef,
          className: (0, import_classnames135.default)("".concat(prefixCls, "-treenode-motion"), motionClassName),
          style: motionStyle
        }, motionNodes.map(function(treeNode) {
          var restProps = _extends({}, (_objectDestructuringEmpty(treeNode.data), treeNode.data)), title = treeNode.title, key2 = treeNode.key, isStart = treeNode.isStart, isEnd = treeNode.isEnd;
          delete restProps.children;
          var treeNodeProps = getTreeNodeProps(key2, treeNodeRequiredProps);
          return /* @__PURE__ */ React351.createElement(TreeNode_default, _extends({}, restProps, treeNodeProps, {
            title,
            active,
            data: treeNode.data,
            key: key2,
            isStart,
            isEnd
          }));
        }));
      });
    }
    return /* @__PURE__ */ React351.createElement(TreeNode_default, _extends({
      domRef: ref,
      className,
      style: style3
    }, props, {
      active
    }));
  };
  MotionTreeNode.displayName = "MotionTreeNode";
  var RefMotionTreeNode = /* @__PURE__ */ React351.forwardRef(MotionTreeNode);
  var MotionTreeNode_default = RefMotionTreeNode;

  // node_modules/rc-tree/es/utils/diffUtil.js
  function findExpandedKeys() {
    var prev = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
    var next = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    var prevLen = prev.length;
    var nextLen = next.length;
    if (Math.abs(prevLen - nextLen) !== 1) {
      return {
        add: false,
        key: null
      };
    }
    function find(shorter, longer) {
      var cache = /* @__PURE__ */ new Map();
      shorter.forEach(function(key2) {
        cache.set(key2, true);
      });
      var keys2 = longer.filter(function(key2) {
        return !cache.has(key2);
      });
      return keys2.length === 1 ? keys2[0] : null;
    }
    if (prevLen < nextLen) {
      return {
        add: true,
        key: find(prev, next)
      };
    }
    return {
      add: false,
      key: find(next, prev)
    };
  }
  function getExpandRange(shorter, longer, key2) {
    var shorterStartIndex = shorter.findIndex(function(data) {
      return data.key === key2;
    });
    var shorterEndNode = shorter[shorterStartIndex + 1];
    var longerStartIndex = longer.findIndex(function(data) {
      return data.key === key2;
    });
    if (shorterEndNode) {
      var longerEndIndex = longer.findIndex(function(data) {
        return data.key === shorterEndNode.key;
      });
      return longer.slice(longerStartIndex + 1, longerEndIndex);
    }
    return longer.slice(longerStartIndex + 1);
  }

  // node_modules/rc-tree/es/NodeList.js
  var _excluded55 = ["prefixCls", "data", "selectable", "checkable", "expandedKeys", "selectedKeys", "checkedKeys", "loadedKeys", "loadingKeys", "halfCheckedKeys", "keyEntities", "disabled", "dragging", "dragOverNodeKey", "dropPosition", "motion", "height", "itemHeight", "virtual", "focusable", "activeItem", "focused", "tabIndex", "onKeyDown", "onFocus", "onBlur", "onActiveChange", "onListChangeStart", "onListChangeEnd"];
  var HIDDEN_STYLE2 = {
    width: 0,
    height: 0,
    display: "flex",
    overflow: "hidden",
    opacity: 0,
    border: 0,
    padding: 0,
    margin: 0
  };
  var noop5 = function noop6() {
  };
  var MOTION_KEY = "RC_TREE_MOTION_".concat(Math.random());
  var MotionNode = {
    key: MOTION_KEY
  };
  var MotionEntity = {
    key: MOTION_KEY,
    level: 0,
    index: 0,
    pos: "0",
    node: MotionNode,
    nodes: [MotionNode]
  };
  var MotionFlattenData = {
    parent: null,
    children: [],
    pos: MotionEntity.pos,
    data: MotionNode,
    title: null,
    key: MOTION_KEY,
    /** Hold empty list here since we do not use it */
    isStart: [],
    isEnd: []
  };
  function getMinimumRangeTransitionRange(list, virtual, height, itemHeight) {
    if (virtual === false || !height) {
      return list;
    }
    return list.slice(0, Math.ceil(height / itemHeight) + 1);
  }
  function itemKey2(item) {
    var key2 = item.key, pos = item.pos;
    return getKey4(key2, pos);
  }
  function getAccessibilityPath(item) {
    var path2 = String(item.data.key);
    var current = item;
    while (current.parent) {
      current = current.parent;
      path2 = "".concat(current.data.key, " > ").concat(path2);
    }
    return path2;
  }
  var NodeList2 = /* @__PURE__ */ React352.forwardRef(function(props, ref) {
    var prefixCls = props.prefixCls, data = props.data, selectable = props.selectable, checkable = props.checkable, expandedKeys = props.expandedKeys, selectedKeys = props.selectedKeys, checkedKeys = props.checkedKeys, loadedKeys = props.loadedKeys, loadingKeys = props.loadingKeys, halfCheckedKeys = props.halfCheckedKeys, keyEntities = props.keyEntities, disabled = props.disabled, dragging = props.dragging, dragOverNodeKey = props.dragOverNodeKey, dropPosition = props.dropPosition, motion2 = props.motion, height = props.height, itemHeight = props.itemHeight, virtual = props.virtual, focusable2 = props.focusable, activeItem = props.activeItem, focused = props.focused, tabIndex = props.tabIndex, onKeyDown3 = props.onKeyDown, onFocus = props.onFocus, onBlur = props.onBlur, onActiveChange = props.onActiveChange, onListChangeStart = props.onListChangeStart, onListChangeEnd = props.onListChangeEnd, domProps = _objectWithoutProperties(props, _excluded55);
    var listRef = React352.useRef(null);
    var indentMeasurerRef = React352.useRef(null);
    React352.useImperativeHandle(ref, function() {
      return {
        scrollTo: function scrollTo3(scroll) {
          listRef.current.scrollTo(scroll);
        },
        getIndentWidth: function getIndentWidth() {
          return indentMeasurerRef.current.offsetWidth;
        }
      };
    });
    var _React$useState = React352.useState(expandedKeys), _React$useState2 = _slicedToArray(_React$useState, 2), prevExpandedKeys = _React$useState2[0], setPrevExpandedKeys = _React$useState2[1];
    var _React$useState3 = React352.useState(data), _React$useState4 = _slicedToArray(_React$useState3, 2), prevData = _React$useState4[0], setPrevData = _React$useState4[1];
    var _React$useState5 = React352.useState(data), _React$useState6 = _slicedToArray(_React$useState5, 2), transitionData = _React$useState6[0], setTransitionData = _React$useState6[1];
    var _React$useState7 = React352.useState([]), _React$useState8 = _slicedToArray(_React$useState7, 2), transitionRange = _React$useState8[0], setTransitionRange = _React$useState8[1];
    var _React$useState9 = React352.useState(null), _React$useState10 = _slicedToArray(_React$useState9, 2), motionType = _React$useState10[0], setMotionType = _React$useState10[1];
    var dataRef = React352.useRef(data);
    dataRef.current = data;
    function onMotionEnd() {
      var latestData = dataRef.current;
      setPrevData(latestData);
      setTransitionData(latestData);
      setTransitionRange([]);
      setMotionType(null);
      onListChangeEnd();
    }
    useLayoutEffect_default(function() {
      setPrevExpandedKeys(expandedKeys);
      var diffExpanded = findExpandedKeys(prevExpandedKeys, expandedKeys);
      if (diffExpanded.key !== null) {
        if (diffExpanded.add) {
          var keyIndex = prevData.findIndex(function(_ref) {
            var key2 = _ref.key;
            return key2 === diffExpanded.key;
          });
          var rangeNodes = getMinimumRangeTransitionRange(getExpandRange(prevData, data, diffExpanded.key), virtual, height, itemHeight);
          var newTransitionData = prevData.slice();
          newTransitionData.splice(keyIndex + 1, 0, MotionFlattenData);
          setTransitionData(newTransitionData);
          setTransitionRange(rangeNodes);
          setMotionType("show");
        } else {
          var _keyIndex = data.findIndex(function(_ref2) {
            var key2 = _ref2.key;
            return key2 === diffExpanded.key;
          });
          var _rangeNodes = getMinimumRangeTransitionRange(getExpandRange(data, prevData, diffExpanded.key), virtual, height, itemHeight);
          var _newTransitionData = data.slice();
          _newTransitionData.splice(_keyIndex + 1, 0, MotionFlattenData);
          setTransitionData(_newTransitionData);
          setTransitionRange(_rangeNodes);
          setMotionType("hide");
        }
      } else if (prevData !== data) {
        setPrevData(data);
        setTransitionData(data);
      }
    }, [expandedKeys, data]);
    React352.useEffect(function() {
      if (!dragging) {
        onMotionEnd();
      }
    }, [dragging]);
    var mergedData = motion2 ? transitionData : data;
    var treeNodeRequiredProps = {
      expandedKeys,
      selectedKeys,
      loadedKeys,
      loadingKeys,
      checkedKeys,
      halfCheckedKeys,
      dragOverNodeKey,
      dropPosition,
      keyEntities
    };
    return /* @__PURE__ */ React352.createElement(React352.Fragment, null, focused && activeItem && /* @__PURE__ */ React352.createElement("span", {
      style: HIDDEN_STYLE2,
      "aria-live": "assertive"
    }, getAccessibilityPath(activeItem)), /* @__PURE__ */ React352.createElement("div", null, /* @__PURE__ */ React352.createElement("input", {
      style: HIDDEN_STYLE2,
      disabled: focusable2 === false || disabled,
      tabIndex: focusable2 !== false ? tabIndex : null,
      onKeyDown: onKeyDown3,
      onFocus,
      onBlur,
      value: "",
      onChange: noop5,
      "aria-label": "for screen reader"
    })), /* @__PURE__ */ React352.createElement("div", {
      className: "".concat(prefixCls, "-treenode"),
      "aria-hidden": true,
      style: {
        position: "absolute",
        pointerEvents: "none",
        visibility: "hidden",
        height: 0,
        overflow: "hidden",
        border: 0,
        padding: 0
      }
    }, /* @__PURE__ */ React352.createElement("div", {
      className: "".concat(prefixCls, "-indent")
    }, /* @__PURE__ */ React352.createElement("div", {
      ref: indentMeasurerRef,
      className: "".concat(prefixCls, "-indent-unit")
    }))), /* @__PURE__ */ React352.createElement(es_default8, _extends({}, domProps, {
      data: mergedData,
      itemKey: itemKey2,
      height,
      fullHeight: false,
      virtual,
      itemHeight,
      prefixCls: "".concat(prefixCls, "-list"),
      ref: listRef,
      onVisibleChange: function onVisibleChange(originList, fullList) {
        var originSet = new Set(originList);
        var restList = fullList.filter(function(item) {
          return !originSet.has(item);
        });
        if (restList.some(function(item) {
          return itemKey2(item) === MOTION_KEY;
        })) {
          onMotionEnd();
        }
      }
    }), function(treeNode) {
      var pos = treeNode.pos, restProps = _extends({}, (_objectDestructuringEmpty(treeNode.data), treeNode.data)), title = treeNode.title, key2 = treeNode.key, isStart = treeNode.isStart, isEnd = treeNode.isEnd;
      var mergedKey = getKey4(key2, pos);
      delete restProps.key;
      delete restProps.children;
      var treeNodeProps = getTreeNodeProps(mergedKey, treeNodeRequiredProps);
      return /* @__PURE__ */ React352.createElement(MotionTreeNode_default, _extends({}, restProps, treeNodeProps, {
        title,
        active: !!activeItem && key2 === activeItem.key,
        pos,
        data: treeNode.data,
        isStart,
        isEnd,
        motion: motion2,
        motionNodes: key2 === MOTION_KEY ? transitionRange : null,
        motionType,
        onMotionStart: onListChangeStart,
        onMotionEnd,
        treeNodeRequiredProps,
        onMouseMove: function onMouseMove() {
          onActiveChange(null);
        }
      }));
    }));
  });
  NodeList2.displayName = "NodeList";
  var NodeList_default = NodeList2;

  // node_modules/rc-tree/es/util.js
  var import_react102 = __toESM(require_react());
  function arrDel(list, value) {
    if (!list)
      return [];
    var clone2 = list.slice();
    var index2 = clone2.indexOf(value);
    if (index2 >= 0) {
      clone2.splice(index2, 1);
    }
    return clone2;
  }
  function arrAdd(list, value) {
    var clone2 = (list || []).slice();
    if (clone2.indexOf(value) === -1) {
      clone2.push(value);
    }
    return clone2;
  }
  function posToArr(pos) {
    return pos.split("-");
  }
  function getDragChildrenKeys(dragNodeKey, keyEntities) {
    var dragChildrenKeys = [];
    var entity = getEntity(keyEntities, dragNodeKey);
    function dig() {
      var list = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
      list.forEach(function(_ref) {
        var key2 = _ref.key, children = _ref.children;
        dragChildrenKeys.push(key2);
        dig(children);
      });
    }
    dig(entity.children);
    return dragChildrenKeys;
  }
  function isLastChild(treeNodeEntity) {
    if (treeNodeEntity.parent) {
      var posArr = posToArr(treeNodeEntity.pos);
      return Number(posArr[posArr.length - 1]) === treeNodeEntity.parent.children.length - 1;
    }
    return false;
  }
  function isFirstChild(treeNodeEntity) {
    var posArr = posToArr(treeNodeEntity.pos);
    return Number(posArr[posArr.length - 1]) === 0;
  }
  function calcDropPosition(event, dragNode, targetNode, indent, startMousePosition, allowDrop2, flattenedNodes, keyEntities, expandKeys, direction) {
    var _abstractDropNodeEnti;
    var clientX = event.clientX, clientY = event.clientY;
    var _event$target$getBoun = event.target.getBoundingClientRect(), top = _event$target$getBoun.top, height = _event$target$getBoun.height;
    var horizontalMouseOffset = (direction === "rtl" ? -1 : 1) * (((startMousePosition === null || startMousePosition === void 0 ? void 0 : startMousePosition.x) || 0) - clientX);
    var rawDropLevelOffset = (horizontalMouseOffset - 12) / indent;
    var abstractDropNodeEntity = getEntity(keyEntities, targetNode.props.eventKey);
    if (clientY < top + height / 2) {
      var nodeIndex = flattenedNodes.findIndex(function(flattenedNode) {
        return flattenedNode.key === abstractDropNodeEntity.key;
      });
      var prevNodeIndex = nodeIndex <= 0 ? 0 : nodeIndex - 1;
      var prevNodeKey = flattenedNodes[prevNodeIndex].key;
      abstractDropNodeEntity = getEntity(keyEntities, prevNodeKey);
    }
    var initialAbstractDropNodeKey = abstractDropNodeEntity.key;
    var abstractDragOverEntity = abstractDropNodeEntity;
    var dragOverNodeKey = abstractDropNodeEntity.key;
    var dropPosition = 0;
    var dropLevelOffset = 0;
    if (!expandKeys.includes(initialAbstractDropNodeKey)) {
      for (var i3 = 0; i3 < rawDropLevelOffset; i3 += 1) {
        if (isLastChild(abstractDropNodeEntity)) {
          abstractDropNodeEntity = abstractDropNodeEntity.parent;
          dropLevelOffset += 1;
        } else {
          break;
        }
      }
    }
    var abstractDragDataNode = dragNode.props.data;
    var abstractDropDataNode = abstractDropNodeEntity.node;
    var dropAllowed = true;
    if (isFirstChild(abstractDropNodeEntity) && abstractDropNodeEntity.level === 0 && clientY < top + height / 2 && allowDrop2({
      dragNode: abstractDragDataNode,
      dropNode: abstractDropDataNode,
      dropPosition: -1
    }) && abstractDropNodeEntity.key === targetNode.props.eventKey) {
      dropPosition = -1;
    } else if ((abstractDragOverEntity.children || []).length && expandKeys.includes(dragOverNodeKey)) {
      if (allowDrop2({
        dragNode: abstractDragDataNode,
        dropNode: abstractDropDataNode,
        dropPosition: 0
      })) {
        dropPosition = 0;
      } else {
        dropAllowed = false;
      }
    } else if (dropLevelOffset === 0) {
      if (rawDropLevelOffset > -1.5) {
        if (allowDrop2({
          dragNode: abstractDragDataNode,
          dropNode: abstractDropDataNode,
          dropPosition: 1
        })) {
          dropPosition = 1;
        } else {
          dropAllowed = false;
        }
      } else {
        if (allowDrop2({
          dragNode: abstractDragDataNode,
          dropNode: abstractDropDataNode,
          dropPosition: 0
        })) {
          dropPosition = 0;
        } else if (allowDrop2({
          dragNode: abstractDragDataNode,
          dropNode: abstractDropDataNode,
          dropPosition: 1
        })) {
          dropPosition = 1;
        } else {
          dropAllowed = false;
        }
      }
    } else {
      if (allowDrop2({
        dragNode: abstractDragDataNode,
        dropNode: abstractDropDataNode,
        dropPosition: 1
      })) {
        dropPosition = 1;
      } else {
        dropAllowed = false;
      }
    }
    return {
      dropPosition,
      dropLevelOffset,
      dropTargetKey: abstractDropNodeEntity.key,
      dropTargetPos: abstractDropNodeEntity.pos,
      dragOverNodeKey,
      dropContainerKey: dropPosition === 0 ? null : ((_abstractDropNodeEnti = abstractDropNodeEntity.parent) === null || _abstractDropNodeEnti === void 0 ? void 0 : _abstractDropNodeEnti.key) || null,
      dropAllowed
    };
  }
  function calcSelectedKeys(selectedKeys, props) {
    if (!selectedKeys)
      return void 0;
    var multiple = props.multiple;
    if (multiple) {
      return selectedKeys.slice();
    }
    if (selectedKeys.length) {
      return [selectedKeys[0]];
    }
    return selectedKeys;
  }
  function parseCheckedKeys(keys2) {
    if (!keys2) {
      return null;
    }
    var keyProps;
    if (Array.isArray(keys2)) {
      keyProps = {
        checkedKeys: keys2,
        halfCheckedKeys: void 0
      };
    } else if (_typeof(keys2) === "object") {
      keyProps = {
        checkedKeys: keys2.checked || void 0,
        halfCheckedKeys: keys2.halfChecked || void 0
      };
    } else {
      warning_default(false, "`checkedKeys` is not an array or an object");
      return null;
    }
    return keyProps;
  }
  function conductExpandParent(keyList, keyEntities) {
    var expandedKeys = /* @__PURE__ */ new Set();
    function conductUp(key2) {
      if (expandedKeys.has(key2))
        return;
      var entity = getEntity(keyEntities, key2);
      if (!entity)
        return;
      expandedKeys.add(key2);
      var parent = entity.parent, node = entity.node;
      if (node.disabled)
        return;
      if (parent) {
        conductUp(parent.key);
      }
    }
    (keyList || []).forEach(function(key2) {
      conductUp(key2);
    });
    return _toConsumableArray(expandedKeys);
  }

  // node_modules/rc-tree/es/Tree.js
  var MAX_RETRY_TIMES = 10;
  var Tree = /* @__PURE__ */ function(_React$Component) {
    _inherits(Tree4, _React$Component);
    var _super = _createSuper(Tree4);
    function Tree4() {
      var _this;
      _classCallCheck(this, Tree4);
      for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
        _args[_key] = arguments[_key];
      }
      _this = _super.call.apply(_super, [this].concat(_args));
      _this.destroyed = false;
      _this.delayedDragEnterLogic = void 0;
      _this.loadingRetryTimes = {};
      _this.state = {
        keyEntities: {},
        indent: null,
        selectedKeys: [],
        checkedKeys: [],
        halfCheckedKeys: [],
        loadedKeys: [],
        loadingKeys: [],
        expandedKeys: [],
        draggingNodeKey: null,
        dragChildrenKeys: [],
        // dropTargetKey is the key of abstract-drop-node
        // the abstract-drop-node is the real drop node when drag and drop
        // not the DOM drag over node
        dropTargetKey: null,
        dropPosition: null,
        dropContainerKey: null,
        dropLevelOffset: null,
        dropTargetPos: null,
        dropAllowed: true,
        // the abstract-drag-over-node
        // if mouse is on the bottom of top dom node or no the top of the bottom dom node
        // abstract-drag-over-node is the top node
        dragOverNodeKey: null,
        treeData: [],
        flattenNodes: [],
        focused: false,
        activeKey: null,
        listChanging: false,
        prevProps: null,
        fieldNames: fillFieldNames2()
      };
      _this.dragStartMousePosition = null;
      _this.dragNode = void 0;
      _this.currentMouseOverDroppableNodeKey = null;
      _this.listRef = /* @__PURE__ */ React354.createRef();
      _this.onNodeDragStart = function(event, node) {
        var _this$state = _this.state, expandedKeys = _this$state.expandedKeys, keyEntities = _this$state.keyEntities;
        var onDragStart = _this.props.onDragStart;
        var eventKey = node.props.eventKey;
        _this.dragNode = node;
        _this.dragStartMousePosition = {
          x: event.clientX,
          y: event.clientY
        };
        var newExpandedKeys = arrDel(expandedKeys, eventKey);
        _this.setState({
          draggingNodeKey: eventKey,
          dragChildrenKeys: getDragChildrenKeys(eventKey, keyEntities),
          indent: _this.listRef.current.getIndentWidth()
        });
        _this.setExpandedKeys(newExpandedKeys);
        window.addEventListener("dragend", _this.onWindowDragEnd);
        onDragStart === null || onDragStart === void 0 ? void 0 : onDragStart({
          event,
          node: convertNodePropsToEventData(node.props)
        });
      };
      _this.onNodeDragEnter = function(event, node) {
        var _this$state2 = _this.state, expandedKeys = _this$state2.expandedKeys, keyEntities = _this$state2.keyEntities, dragChildrenKeys = _this$state2.dragChildrenKeys, flattenNodes = _this$state2.flattenNodes, indent = _this$state2.indent;
        var _this$props = _this.props, onDragEnter = _this$props.onDragEnter, onExpand = _this$props.onExpand, allowDrop2 = _this$props.allowDrop, direction = _this$props.direction;
        var _node$props = node.props, pos = _node$props.pos, eventKey = _node$props.eventKey;
        var _assertThisInitialize = _assertThisInitialized(_this), dragNode = _assertThisInitialize.dragNode;
        if (_this.currentMouseOverDroppableNodeKey !== eventKey) {
          _this.currentMouseOverDroppableNodeKey = eventKey;
        }
        if (!dragNode) {
          _this.resetDragState();
          return;
        }
        var _calcDropPosition = calcDropPosition(event, dragNode, node, indent, _this.dragStartMousePosition, allowDrop2, flattenNodes, keyEntities, expandedKeys, direction), dropPosition = _calcDropPosition.dropPosition, dropLevelOffset = _calcDropPosition.dropLevelOffset, dropTargetKey = _calcDropPosition.dropTargetKey, dropContainerKey = _calcDropPosition.dropContainerKey, dropTargetPos = _calcDropPosition.dropTargetPos, dropAllowed = _calcDropPosition.dropAllowed, dragOverNodeKey = _calcDropPosition.dragOverNodeKey;
        if (
          // don't allow drop inside its children
          dragChildrenKeys.indexOf(dropTargetKey) !== -1 || // don't allow drop when drop is not allowed caculated by calcDropPosition
          !dropAllowed
        ) {
          _this.resetDragState();
          return;
        }
        if (!_this.delayedDragEnterLogic) {
          _this.delayedDragEnterLogic = {};
        }
        Object.keys(_this.delayedDragEnterLogic).forEach(function(key2) {
          clearTimeout(_this.delayedDragEnterLogic[key2]);
        });
        if (dragNode.props.eventKey !== node.props.eventKey) {
          event.persist();
          _this.delayedDragEnterLogic[pos] = window.setTimeout(function() {
            if (_this.state.draggingNodeKey === null)
              return;
            var newExpandedKeys = _toConsumableArray(expandedKeys);
            var entity = getEntity(keyEntities, node.props.eventKey);
            if (entity && (entity.children || []).length) {
              newExpandedKeys = arrAdd(expandedKeys, node.props.eventKey);
            }
            if (!("expandedKeys" in _this.props)) {
              _this.setExpandedKeys(newExpandedKeys);
            }
            onExpand === null || onExpand === void 0 ? void 0 : onExpand(newExpandedKeys, {
              node: convertNodePropsToEventData(node.props),
              expanded: true,
              nativeEvent: event.nativeEvent
            });
          }, 800);
        }
        if (dragNode.props.eventKey === dropTargetKey && dropLevelOffset === 0) {
          _this.resetDragState();
          return;
        }
        _this.setState({
          dragOverNodeKey,
          dropPosition,
          dropLevelOffset,
          dropTargetKey,
          dropContainerKey,
          dropTargetPos,
          dropAllowed
        });
        onDragEnter === null || onDragEnter === void 0 ? void 0 : onDragEnter({
          event,
          node: convertNodePropsToEventData(node.props),
          expandedKeys
        });
      };
      _this.onNodeDragOver = function(event, node) {
        var _this$state3 = _this.state, dragChildrenKeys = _this$state3.dragChildrenKeys, flattenNodes = _this$state3.flattenNodes, keyEntities = _this$state3.keyEntities, expandedKeys = _this$state3.expandedKeys, indent = _this$state3.indent;
        var _this$props2 = _this.props, onDragOver = _this$props2.onDragOver, allowDrop2 = _this$props2.allowDrop, direction = _this$props2.direction;
        var _assertThisInitialize2 = _assertThisInitialized(_this), dragNode = _assertThisInitialize2.dragNode;
        if (!dragNode) {
          return;
        }
        var _calcDropPosition2 = calcDropPosition(event, dragNode, node, indent, _this.dragStartMousePosition, allowDrop2, flattenNodes, keyEntities, expandedKeys, direction), dropPosition = _calcDropPosition2.dropPosition, dropLevelOffset = _calcDropPosition2.dropLevelOffset, dropTargetKey = _calcDropPosition2.dropTargetKey, dropContainerKey = _calcDropPosition2.dropContainerKey, dropAllowed = _calcDropPosition2.dropAllowed, dropTargetPos = _calcDropPosition2.dropTargetPos, dragOverNodeKey = _calcDropPosition2.dragOverNodeKey;
        if (dragChildrenKeys.indexOf(dropTargetKey) !== -1 || !dropAllowed) {
          return;
        }
        if (dragNode.props.eventKey === dropTargetKey && dropLevelOffset === 0) {
          if (!(_this.state.dropPosition === null && _this.state.dropLevelOffset === null && _this.state.dropTargetKey === null && _this.state.dropContainerKey === null && _this.state.dropTargetPos === null && _this.state.dropAllowed === false && _this.state.dragOverNodeKey === null)) {
            _this.resetDragState();
          }
        } else if (!(dropPosition === _this.state.dropPosition && dropLevelOffset === _this.state.dropLevelOffset && dropTargetKey === _this.state.dropTargetKey && dropContainerKey === _this.state.dropContainerKey && dropTargetPos === _this.state.dropTargetPos && dropAllowed === _this.state.dropAllowed && dragOverNodeKey === _this.state.dragOverNodeKey)) {
          _this.setState({
            dropPosition,
            dropLevelOffset,
            dropTargetKey,
            dropContainerKey,
            dropTargetPos,
            dropAllowed,
            dragOverNodeKey
          });
        }
        onDragOver === null || onDragOver === void 0 ? void 0 : onDragOver({
          event,
          node: convertNodePropsToEventData(node.props)
        });
      };
      _this.onNodeDragLeave = function(event, node) {
        if (_this.currentMouseOverDroppableNodeKey === node.props.eventKey && !event.currentTarget.contains(event.relatedTarget)) {
          _this.resetDragState();
          _this.currentMouseOverDroppableNodeKey = null;
        }
        var onDragLeave = _this.props.onDragLeave;
        onDragLeave === null || onDragLeave === void 0 ? void 0 : onDragLeave({
          event,
          node: convertNodePropsToEventData(node.props)
        });
      };
      _this.onWindowDragEnd = function(event) {
        _this.onNodeDragEnd(event, null, true);
        window.removeEventListener("dragend", _this.onWindowDragEnd);
      };
      _this.onNodeDragEnd = function(event, node) {
        var onDragEnd = _this.props.onDragEnd;
        _this.setState({
          dragOverNodeKey: null
        });
        _this.cleanDragState();
        onDragEnd === null || onDragEnd === void 0 ? void 0 : onDragEnd({
          event,
          node: convertNodePropsToEventData(node.props)
        });
        _this.dragNode = null;
        window.removeEventListener("dragend", _this.onWindowDragEnd);
      };
      _this.onNodeDrop = function(event, node) {
        var _this$getActiveItem;
        var outsideTree = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
        var _this$state4 = _this.state, dragChildrenKeys = _this$state4.dragChildrenKeys, dropPosition = _this$state4.dropPosition, dropTargetKey = _this$state4.dropTargetKey, dropTargetPos = _this$state4.dropTargetPos, dropAllowed = _this$state4.dropAllowed;
        if (!dropAllowed)
          return;
        var onDrop = _this.props.onDrop;
        _this.setState({
          dragOverNodeKey: null
        });
        _this.cleanDragState();
        if (dropTargetKey === null)
          return;
        var abstractDropNodeProps = _objectSpread2(_objectSpread2({}, getTreeNodeProps(dropTargetKey, _this.getTreeNodeRequiredProps())), {}, {
          active: ((_this$getActiveItem = _this.getActiveItem()) === null || _this$getActiveItem === void 0 ? void 0 : _this$getActiveItem.key) === dropTargetKey,
          data: getEntity(_this.state.keyEntities, dropTargetKey).node
        });
        var dropToChild = dragChildrenKeys.indexOf(dropTargetKey) !== -1;
        warning_default(!dropToChild, "Can not drop to dragNode's children node. This is a bug of rc-tree. Please report an issue.");
        var posArr = posToArr(dropTargetPos);
        var dropResult = {
          event,
          node: convertNodePropsToEventData(abstractDropNodeProps),
          dragNode: _this.dragNode ? convertNodePropsToEventData(_this.dragNode.props) : null,
          dragNodesKeys: [_this.dragNode.props.eventKey].concat(dragChildrenKeys),
          dropToGap: dropPosition !== 0,
          dropPosition: dropPosition + Number(posArr[posArr.length - 1])
        };
        if (!outsideTree) {
          onDrop === null || onDrop === void 0 ? void 0 : onDrop(dropResult);
        }
        _this.dragNode = null;
      };
      _this.cleanDragState = function() {
        var draggingNodeKey = _this.state.draggingNodeKey;
        if (draggingNodeKey !== null) {
          _this.setState({
            draggingNodeKey: null,
            dropPosition: null,
            dropContainerKey: null,
            dropTargetKey: null,
            dropLevelOffset: null,
            dropAllowed: true,
            dragOverNodeKey: null
          });
        }
        _this.dragStartMousePosition = null;
        _this.currentMouseOverDroppableNodeKey = null;
      };
      _this.triggerExpandActionExpand = function(e3, treeNode) {
        var _this$state5 = _this.state, expandedKeys = _this$state5.expandedKeys, flattenNodes = _this$state5.flattenNodes;
        var expanded = treeNode.expanded, key2 = treeNode.key, isLeaf = treeNode.isLeaf;
        if (isLeaf || e3.shiftKey || e3.metaKey || e3.ctrlKey) {
          return;
        }
        var node = flattenNodes.filter(function(nodeItem) {
          return nodeItem.key === key2;
        })[0];
        var eventNode = convertNodePropsToEventData(_objectSpread2(_objectSpread2({}, getTreeNodeProps(key2, _this.getTreeNodeRequiredProps())), {}, {
          data: node.data
        }));
        _this.setExpandedKeys(expanded ? arrDel(expandedKeys, key2) : arrAdd(expandedKeys, key2));
        _this.onNodeExpand(e3, eventNode);
      };
      _this.onNodeClick = function(e3, treeNode) {
        var _this$props3 = _this.props, onClick = _this$props3.onClick, expandAction = _this$props3.expandAction;
        if (expandAction === "click") {
          _this.triggerExpandActionExpand(e3, treeNode);
        }
        onClick === null || onClick === void 0 ? void 0 : onClick(e3, treeNode);
      };
      _this.onNodeDoubleClick = function(e3, treeNode) {
        var _this$props4 = _this.props, onDoubleClick = _this$props4.onDoubleClick, expandAction = _this$props4.expandAction;
        if (expandAction === "doubleClick") {
          _this.triggerExpandActionExpand(e3, treeNode);
        }
        onDoubleClick === null || onDoubleClick === void 0 ? void 0 : onDoubleClick(e3, treeNode);
      };
      _this.onNodeSelect = function(e3, treeNode) {
        var selectedKeys = _this.state.selectedKeys;
        var _this$state6 = _this.state, keyEntities = _this$state6.keyEntities, fieldNames = _this$state6.fieldNames;
        var _this$props5 = _this.props, onSelect = _this$props5.onSelect, multiple = _this$props5.multiple;
        var selected = treeNode.selected;
        var key2 = treeNode[fieldNames.key];
        var targetSelected = !selected;
        if (!targetSelected) {
          selectedKeys = arrDel(selectedKeys, key2);
        } else if (!multiple) {
          selectedKeys = [key2];
        } else {
          selectedKeys = arrAdd(selectedKeys, key2);
        }
        var selectedNodes = selectedKeys.map(function(selectedKey) {
          var entity = getEntity(keyEntities, selectedKey);
          if (!entity)
            return null;
          return entity.node;
        }).filter(function(node) {
          return node;
        });
        _this.setUncontrolledState({
          selectedKeys
        });
        onSelect === null || onSelect === void 0 ? void 0 : onSelect(selectedKeys, {
          event: "select",
          selected: targetSelected,
          node: treeNode,
          selectedNodes,
          nativeEvent: e3.nativeEvent
        });
      };
      _this.onNodeCheck = function(e3, treeNode, checked) {
        var _this$state7 = _this.state, keyEntities = _this$state7.keyEntities, oriCheckedKeys = _this$state7.checkedKeys, oriHalfCheckedKeys = _this$state7.halfCheckedKeys;
        var _this$props6 = _this.props, checkStrictly = _this$props6.checkStrictly, onCheck = _this$props6.onCheck;
        var key2 = treeNode.key;
        var checkedObj;
        var eventObj = {
          event: "check",
          node: treeNode,
          checked,
          nativeEvent: e3.nativeEvent
        };
        if (checkStrictly) {
          var checkedKeys = checked ? arrAdd(oriCheckedKeys, key2) : arrDel(oriCheckedKeys, key2);
          var halfCheckedKeys = arrDel(oriHalfCheckedKeys, key2);
          checkedObj = {
            checked: checkedKeys,
            halfChecked: halfCheckedKeys
          };
          eventObj.checkedNodes = checkedKeys.map(function(checkedKey) {
            return getEntity(keyEntities, checkedKey);
          }).filter(function(entity) {
            return entity;
          }).map(function(entity) {
            return entity.node;
          });
          _this.setUncontrolledState({
            checkedKeys
          });
        } else {
          var _conductCheck = conductCheck([].concat(_toConsumableArray(oriCheckedKeys), [key2]), true, keyEntities), _checkedKeys = _conductCheck.checkedKeys, _halfCheckedKeys = _conductCheck.halfCheckedKeys;
          if (!checked) {
            var keySet = new Set(_checkedKeys);
            keySet.delete(key2);
            var _conductCheck2 = conductCheck(Array.from(keySet), {
              checked: false,
              halfCheckedKeys: _halfCheckedKeys
            }, keyEntities);
            _checkedKeys = _conductCheck2.checkedKeys;
            _halfCheckedKeys = _conductCheck2.halfCheckedKeys;
          }
          checkedObj = _checkedKeys;
          eventObj.checkedNodes = [];
          eventObj.checkedNodesPositions = [];
          eventObj.halfCheckedKeys = _halfCheckedKeys;
          _checkedKeys.forEach(function(checkedKey) {
            var entity = getEntity(keyEntities, checkedKey);
            if (!entity)
              return;
            var node = entity.node, pos = entity.pos;
            eventObj.checkedNodes.push(node);
            eventObj.checkedNodesPositions.push({
              node,
              pos
            });
          });
          _this.setUncontrolledState({
            checkedKeys: _checkedKeys
          }, false, {
            halfCheckedKeys: _halfCheckedKeys
          });
        }
        onCheck === null || onCheck === void 0 ? void 0 : onCheck(checkedObj, eventObj);
      };
      _this.onNodeLoad = function(treeNode) {
        var key2 = treeNode.key;
        var loadPromise = new Promise(function(resolve, reject) {
          _this.setState(function(_ref) {
            var _ref$loadedKeys = _ref.loadedKeys, loadedKeys = _ref$loadedKeys === void 0 ? [] : _ref$loadedKeys, _ref$loadingKeys = _ref.loadingKeys, loadingKeys = _ref$loadingKeys === void 0 ? [] : _ref$loadingKeys;
            var _this$props7 = _this.props, loadData = _this$props7.loadData, onLoad = _this$props7.onLoad;
            if (!loadData || loadedKeys.indexOf(key2) !== -1 || loadingKeys.indexOf(key2) !== -1) {
              return null;
            }
            var promise2 = loadData(treeNode);
            promise2.then(function() {
              var currentLoadedKeys = _this.state.loadedKeys;
              var newLoadedKeys = arrAdd(currentLoadedKeys, key2);
              onLoad === null || onLoad === void 0 ? void 0 : onLoad(newLoadedKeys, {
                event: "load",
                node: treeNode
              });
              _this.setUncontrolledState({
                loadedKeys: newLoadedKeys
              });
              _this.setState(function(prevState) {
                return {
                  loadingKeys: arrDel(prevState.loadingKeys, key2)
                };
              });
              resolve();
            }).catch(function(e3) {
              _this.setState(function(prevState) {
                return {
                  loadingKeys: arrDel(prevState.loadingKeys, key2)
                };
              });
              _this.loadingRetryTimes[key2] = (_this.loadingRetryTimes[key2] || 0) + 1;
              if (_this.loadingRetryTimes[key2] >= MAX_RETRY_TIMES) {
                var currentLoadedKeys = _this.state.loadedKeys;
                warning_default(false, "Retry for `loadData` many times but still failed. No more retry.");
                _this.setUncontrolledState({
                  loadedKeys: arrAdd(currentLoadedKeys, key2)
                });
                resolve();
              }
              reject(e3);
            });
            return {
              loadingKeys: arrAdd(loadingKeys, key2)
            };
          });
        });
        loadPromise.catch(function() {
        });
        return loadPromise;
      };
      _this.onNodeMouseEnter = function(event, node) {
        var onMouseEnter = _this.props.onMouseEnter;
        onMouseEnter === null || onMouseEnter === void 0 ? void 0 : onMouseEnter({
          event,
          node
        });
      };
      _this.onNodeMouseLeave = function(event, node) {
        var onMouseLeave = _this.props.onMouseLeave;
        onMouseLeave === null || onMouseLeave === void 0 ? void 0 : onMouseLeave({
          event,
          node
        });
      };
      _this.onNodeContextMenu = function(event, node) {
        var onRightClick = _this.props.onRightClick;
        if (onRightClick) {
          event.preventDefault();
          onRightClick({
            event,
            node
          });
        }
      };
      _this.onFocus = function() {
        var onFocus = _this.props.onFocus;
        _this.setState({
          focused: true
        });
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }
        onFocus === null || onFocus === void 0 ? void 0 : onFocus.apply(void 0, args);
      };
      _this.onBlur = function() {
        var onBlur = _this.props.onBlur;
        _this.setState({
          focused: false
        });
        _this.onActiveChange(null);
        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          args[_key3] = arguments[_key3];
        }
        onBlur === null || onBlur === void 0 ? void 0 : onBlur.apply(void 0, args);
      };
      _this.getTreeNodeRequiredProps = function() {
        var _this$state8 = _this.state, expandedKeys = _this$state8.expandedKeys, selectedKeys = _this$state8.selectedKeys, loadedKeys = _this$state8.loadedKeys, loadingKeys = _this$state8.loadingKeys, checkedKeys = _this$state8.checkedKeys, halfCheckedKeys = _this$state8.halfCheckedKeys, dragOverNodeKey = _this$state8.dragOverNodeKey, dropPosition = _this$state8.dropPosition, keyEntities = _this$state8.keyEntities;
        return {
          expandedKeys: expandedKeys || [],
          selectedKeys: selectedKeys || [],
          loadedKeys: loadedKeys || [],
          loadingKeys: loadingKeys || [],
          checkedKeys: checkedKeys || [],
          halfCheckedKeys: halfCheckedKeys || [],
          dragOverNodeKey,
          dropPosition,
          keyEntities
        };
      };
      _this.setExpandedKeys = function(expandedKeys) {
        var _this$state9 = _this.state, treeData = _this$state9.treeData, fieldNames = _this$state9.fieldNames;
        var flattenNodes = flattenTreeData(treeData, expandedKeys, fieldNames);
        _this.setUncontrolledState({
          expandedKeys,
          flattenNodes
        }, true);
      };
      _this.onNodeExpand = function(e3, treeNode) {
        var expandedKeys = _this.state.expandedKeys;
        var _this$state10 = _this.state, listChanging = _this$state10.listChanging, fieldNames = _this$state10.fieldNames;
        var _this$props8 = _this.props, onExpand = _this$props8.onExpand, loadData = _this$props8.loadData;
        var expanded = treeNode.expanded;
        var key2 = treeNode[fieldNames.key];
        if (listChanging) {
          return;
        }
        var index2 = expandedKeys.indexOf(key2);
        var targetExpanded = !expanded;
        warning_default(expanded && index2 !== -1 || !expanded && index2 === -1, "Expand state not sync with index check");
        if (targetExpanded) {
          expandedKeys = arrAdd(expandedKeys, key2);
        } else {
          expandedKeys = arrDel(expandedKeys, key2);
        }
        _this.setExpandedKeys(expandedKeys);
        onExpand === null || onExpand === void 0 ? void 0 : onExpand(expandedKeys, {
          node: treeNode,
          expanded: targetExpanded,
          nativeEvent: e3.nativeEvent
        });
        if (targetExpanded && loadData) {
          var loadPromise = _this.onNodeLoad(treeNode);
          if (loadPromise) {
            loadPromise.then(function() {
              var newFlattenTreeData = flattenTreeData(_this.state.treeData, expandedKeys, fieldNames);
              _this.setUncontrolledState({
                flattenNodes: newFlattenTreeData
              });
            }).catch(function() {
              var currentExpandedKeys = _this.state.expandedKeys;
              var expandedKeysToRestore = arrDel(currentExpandedKeys, key2);
              _this.setExpandedKeys(expandedKeysToRestore);
            });
          }
        }
      };
      _this.onListChangeStart = function() {
        _this.setUncontrolledState({
          listChanging: true
        });
      };
      _this.onListChangeEnd = function() {
        setTimeout(function() {
          _this.setUncontrolledState({
            listChanging: false
          });
        });
      };
      _this.onActiveChange = function(newActiveKey) {
        var activeKey = _this.state.activeKey;
        var onActiveChange = _this.props.onActiveChange;
        if (activeKey === newActiveKey) {
          return;
        }
        _this.setState({
          activeKey: newActiveKey
        });
        if (newActiveKey !== null) {
          _this.scrollTo({
            key: newActiveKey
          });
        }
        onActiveChange === null || onActiveChange === void 0 ? void 0 : onActiveChange(newActiveKey);
      };
      _this.getActiveItem = function() {
        var _this$state11 = _this.state, activeKey = _this$state11.activeKey, flattenNodes = _this$state11.flattenNodes;
        if (activeKey === null) {
          return null;
        }
        return flattenNodes.find(function(_ref2) {
          var key2 = _ref2.key;
          return key2 === activeKey;
        }) || null;
      };
      _this.offsetActiveKey = function(offset4) {
        var _this$state12 = _this.state, flattenNodes = _this$state12.flattenNodes, activeKey = _this$state12.activeKey;
        var index2 = flattenNodes.findIndex(function(_ref3) {
          var key3 = _ref3.key;
          return key3 === activeKey;
        });
        if (index2 === -1 && offset4 < 0) {
          index2 = flattenNodes.length;
        }
        index2 = (index2 + offset4 + flattenNodes.length) % flattenNodes.length;
        var item = flattenNodes[index2];
        if (item) {
          var key2 = item.key;
          _this.onActiveChange(key2);
        } else {
          _this.onActiveChange(null);
        }
      };
      _this.onKeyDown = function(event) {
        var _this$state13 = _this.state, activeKey = _this$state13.activeKey, expandedKeys = _this$state13.expandedKeys, checkedKeys = _this$state13.checkedKeys, fieldNames = _this$state13.fieldNames;
        var _this$props9 = _this.props, onKeyDown3 = _this$props9.onKeyDown, checkable = _this$props9.checkable, selectable = _this$props9.selectable;
        switch (event.which) {
          case KeyCode_default.UP: {
            _this.offsetActiveKey(-1);
            event.preventDefault();
            break;
          }
          case KeyCode_default.DOWN: {
            _this.offsetActiveKey(1);
            event.preventDefault();
            break;
          }
        }
        var activeItem = _this.getActiveItem();
        if (activeItem && activeItem.data) {
          var treeNodeRequiredProps = _this.getTreeNodeRequiredProps();
          var expandable = activeItem.data.isLeaf === false || !!(activeItem.data[fieldNames.children] || []).length;
          var eventNode = convertNodePropsToEventData(_objectSpread2(_objectSpread2({}, getTreeNodeProps(activeKey, treeNodeRequiredProps)), {}, {
            data: activeItem.data,
            active: true
          }));
          switch (event.which) {
            case KeyCode_default.LEFT: {
              if (expandable && expandedKeys.includes(activeKey)) {
                _this.onNodeExpand({}, eventNode);
              } else if (activeItem.parent) {
                _this.onActiveChange(activeItem.parent.key);
              }
              event.preventDefault();
              break;
            }
            case KeyCode_default.RIGHT: {
              if (expandable && !expandedKeys.includes(activeKey)) {
                _this.onNodeExpand({}, eventNode);
              } else if (activeItem.children && activeItem.children.length) {
                _this.onActiveChange(activeItem.children[0].key);
              }
              event.preventDefault();
              break;
            }
            case KeyCode_default.ENTER:
            case KeyCode_default.SPACE: {
              if (checkable && !eventNode.disabled && eventNode.checkable !== false && !eventNode.disableCheckbox) {
                _this.onNodeCheck({}, eventNode, !checkedKeys.includes(activeKey));
              } else if (!checkable && selectable && !eventNode.disabled && eventNode.selectable !== false) {
                _this.onNodeSelect({}, eventNode);
              }
              break;
            }
          }
        }
        onKeyDown3 === null || onKeyDown3 === void 0 ? void 0 : onKeyDown3(event);
      };
      _this.setUncontrolledState = function(state) {
        var atomic = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
        var forceState = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
        if (!_this.destroyed) {
          var needSync = false;
          var allPassed = true;
          var newState = {};
          Object.keys(state).forEach(function(name) {
            if (name in _this.props) {
              allPassed = false;
              return;
            }
            needSync = true;
            newState[name] = state[name];
          });
          if (needSync && (!atomic || allPassed)) {
            _this.setState(_objectSpread2(_objectSpread2({}, newState), forceState));
          }
        }
      };
      _this.scrollTo = function(scroll) {
        _this.listRef.current.scrollTo(scroll);
      };
      return _this;
    }
    _createClass(Tree4, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this.destroyed = false;
        this.onUpdated();
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate() {
        this.onUpdated();
      }
    }, {
      key: "onUpdated",
      value: function onUpdated() {
        var activeKey = this.props.activeKey;
        if (activeKey !== void 0 && activeKey !== this.state.activeKey) {
          this.setState({
            activeKey
          });
          if (activeKey !== null) {
            this.scrollTo({
              key: activeKey
            });
          }
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        window.removeEventListener("dragend", this.onWindowDragEnd);
        this.destroyed = true;
      }
    }, {
      key: "resetDragState",
      value: function resetDragState() {
        this.setState({
          dragOverNodeKey: null,
          dropPosition: null,
          dropLevelOffset: null,
          dropTargetKey: null,
          dropContainerKey: null,
          dropTargetPos: null,
          dropAllowed: false
        });
      }
    }, {
      key: "render",
      value: function render2() {
        var _classNames;
        var _this$state14 = this.state, focused = _this$state14.focused, flattenNodes = _this$state14.flattenNodes, keyEntities = _this$state14.keyEntities, draggingNodeKey = _this$state14.draggingNodeKey, activeKey = _this$state14.activeKey, dropLevelOffset = _this$state14.dropLevelOffset, dropContainerKey = _this$state14.dropContainerKey, dropTargetKey = _this$state14.dropTargetKey, dropPosition = _this$state14.dropPosition, dragOverNodeKey = _this$state14.dragOverNodeKey, indent = _this$state14.indent;
        var _this$props10 = this.props, prefixCls = _this$props10.prefixCls, className = _this$props10.className, style3 = _this$props10.style, showLine = _this$props10.showLine, focusable2 = _this$props10.focusable, _this$props10$tabInde = _this$props10.tabIndex, tabIndex = _this$props10$tabInde === void 0 ? 0 : _this$props10$tabInde, selectable = _this$props10.selectable, showIcon = _this$props10.showIcon, icon = _this$props10.icon, switcherIcon = _this$props10.switcherIcon, draggable = _this$props10.draggable, checkable = _this$props10.checkable, checkStrictly = _this$props10.checkStrictly, disabled = _this$props10.disabled, motion2 = _this$props10.motion, loadData = _this$props10.loadData, filterTreeNode = _this$props10.filterTreeNode, height = _this$props10.height, itemHeight = _this$props10.itemHeight, virtual = _this$props10.virtual, titleRender = _this$props10.titleRender, dropIndicatorRender2 = _this$props10.dropIndicatorRender, onContextMenu = _this$props10.onContextMenu, onScroll = _this$props10.onScroll, direction = _this$props10.direction, rootClassName = _this$props10.rootClassName, rootStyle = _this$props10.rootStyle;
        var domProps = pickAttrs(this.props, {
          aria: true,
          data: true
        });
        var draggableConfig;
        if (draggable) {
          if (_typeof(draggable) === "object") {
            draggableConfig = draggable;
          } else if (typeof draggable === "function") {
            draggableConfig = {
              nodeDraggable: draggable
            };
          } else {
            draggableConfig = {};
          }
        }
        return /* @__PURE__ */ React354.createElement(TreeContext.Provider, {
          value: {
            prefixCls,
            selectable,
            showIcon,
            icon,
            switcherIcon,
            draggable: draggableConfig,
            draggingNodeKey,
            checkable,
            checkStrictly,
            disabled,
            keyEntities,
            dropLevelOffset,
            dropContainerKey,
            dropTargetKey,
            dropPosition,
            dragOverNodeKey,
            indent,
            direction,
            dropIndicatorRender: dropIndicatorRender2,
            loadData,
            filterTreeNode,
            titleRender,
            onNodeClick: this.onNodeClick,
            onNodeDoubleClick: this.onNodeDoubleClick,
            onNodeExpand: this.onNodeExpand,
            onNodeSelect: this.onNodeSelect,
            onNodeCheck: this.onNodeCheck,
            onNodeLoad: this.onNodeLoad,
            onNodeMouseEnter: this.onNodeMouseEnter,
            onNodeMouseLeave: this.onNodeMouseLeave,
            onNodeContextMenu: this.onNodeContextMenu,
            onNodeDragStart: this.onNodeDragStart,
            onNodeDragEnter: this.onNodeDragEnter,
            onNodeDragOver: this.onNodeDragOver,
            onNodeDragLeave: this.onNodeDragLeave,
            onNodeDragEnd: this.onNodeDragEnd,
            onNodeDrop: this.onNodeDrop
          }
        }, /* @__PURE__ */ React354.createElement("div", {
          role: "tree",
          className: (0, import_classnames136.default)(prefixCls, className, rootClassName, (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-show-line"), showLine), _defineProperty(_classNames, "".concat(prefixCls, "-focused"), focused), _defineProperty(_classNames, "".concat(prefixCls, "-active-focused"), activeKey !== null), _classNames)),
          style: rootStyle
        }, /* @__PURE__ */ React354.createElement(NodeList_default, _extends({
          ref: this.listRef,
          prefixCls,
          style: style3,
          data: flattenNodes,
          disabled,
          selectable,
          checkable: !!checkable,
          motion: motion2,
          dragging: draggingNodeKey !== null,
          height,
          itemHeight,
          virtual,
          focusable: focusable2,
          focused,
          tabIndex,
          activeItem: this.getActiveItem(),
          onFocus: this.onFocus,
          onBlur: this.onBlur,
          onKeyDown: this.onKeyDown,
          onActiveChange: this.onActiveChange,
          onListChangeStart: this.onListChangeStart,
          onListChangeEnd: this.onListChangeEnd,
          onContextMenu,
          onScroll
        }, this.getTreeNodeRequiredProps(), domProps))));
      }
    }], [{
      key: "getDerivedStateFromProps",
      value: function getDerivedStateFromProps(props, prevState) {
        var prevProps = prevState.prevProps;
        var newState = {
          prevProps: props
        };
        function needSync(name) {
          return !prevProps && name in props || prevProps && prevProps[name] !== props[name];
        }
        var treeData;
        var fieldNames = prevState.fieldNames;
        if (needSync("fieldNames")) {
          fieldNames = fillFieldNames2(props.fieldNames);
          newState.fieldNames = fieldNames;
        }
        if (needSync("treeData")) {
          treeData = props.treeData;
        } else if (needSync("children")) {
          warning_default(false, "`children` of Tree is deprecated. Please use `treeData` instead.");
          treeData = convertTreeToData(props.children);
        }
        if (treeData) {
          newState.treeData = treeData;
          var entitiesMap = convertDataToEntities(treeData, {
            fieldNames
          });
          newState.keyEntities = _objectSpread2(_defineProperty({}, MOTION_KEY, MotionEntity), entitiesMap.keyEntities);
          if (true) {
            warningWithoutKey(treeData, fieldNames);
          }
        }
        var keyEntities = newState.keyEntities || prevState.keyEntities;
        if (needSync("expandedKeys") || prevProps && needSync("autoExpandParent")) {
          newState.expandedKeys = props.autoExpandParent || !prevProps && props.defaultExpandParent ? conductExpandParent(props.expandedKeys, keyEntities) : props.expandedKeys;
        } else if (!prevProps && props.defaultExpandAll) {
          var cloneKeyEntities = _objectSpread2({}, keyEntities);
          delete cloneKeyEntities[MOTION_KEY];
          newState.expandedKeys = Object.keys(cloneKeyEntities).map(function(key2) {
            return cloneKeyEntities[key2].key;
          });
        } else if (!prevProps && props.defaultExpandedKeys) {
          newState.expandedKeys = props.autoExpandParent || props.defaultExpandParent ? conductExpandParent(props.defaultExpandedKeys, keyEntities) : props.defaultExpandedKeys;
        }
        if (!newState.expandedKeys) {
          delete newState.expandedKeys;
        }
        if (treeData || newState.expandedKeys) {
          var flattenNodes = flattenTreeData(treeData || prevState.treeData, newState.expandedKeys || prevState.expandedKeys, fieldNames);
          newState.flattenNodes = flattenNodes;
        }
        if (props.selectable) {
          if (needSync("selectedKeys")) {
            newState.selectedKeys = calcSelectedKeys(props.selectedKeys, props);
          } else if (!prevProps && props.defaultSelectedKeys) {
            newState.selectedKeys = calcSelectedKeys(props.defaultSelectedKeys, props);
          }
        }
        if (props.checkable) {
          var checkedKeyEntity;
          if (needSync("checkedKeys")) {
            checkedKeyEntity = parseCheckedKeys(props.checkedKeys) || {};
          } else if (!prevProps && props.defaultCheckedKeys) {
            checkedKeyEntity = parseCheckedKeys(props.defaultCheckedKeys) || {};
          } else if (treeData) {
            checkedKeyEntity = parseCheckedKeys(props.checkedKeys) || {
              checkedKeys: prevState.checkedKeys,
              halfCheckedKeys: prevState.halfCheckedKeys
            };
          }
          if (checkedKeyEntity) {
            var _checkedKeyEntity = checkedKeyEntity, _checkedKeyEntity$che = _checkedKeyEntity.checkedKeys, checkedKeys = _checkedKeyEntity$che === void 0 ? [] : _checkedKeyEntity$che, _checkedKeyEntity$hal = _checkedKeyEntity.halfCheckedKeys, halfCheckedKeys = _checkedKeyEntity$hal === void 0 ? [] : _checkedKeyEntity$hal;
            if (!props.checkStrictly) {
              var conductKeys = conductCheck(checkedKeys, true, keyEntities);
              checkedKeys = conductKeys.checkedKeys;
              halfCheckedKeys = conductKeys.halfCheckedKeys;
            }
            newState.checkedKeys = checkedKeys;
            newState.halfCheckedKeys = halfCheckedKeys;
          }
        }
        if (needSync("loadedKeys")) {
          newState.loadedKeys = props.loadedKeys;
        }
        return newState;
      }
    }]);
    return Tree4;
  }(React354.Component);
  Tree.defaultProps = {
    prefixCls: "rc-tree",
    showLine: false,
    showIcon: true,
    selectable: true,
    multiple: false,
    checkable: false,
    disabled: false,
    checkStrictly: false,
    draggable: false,
    defaultExpandParent: true,
    autoExpandParent: false,
    defaultExpandAll: false,
    defaultExpandedKeys: [],
    defaultCheckedKeys: [],
    defaultSelectedKeys: [],
    dropIndicatorRender: DropIndicator,
    allowDrop: function allowDrop() {
      return true;
    },
    expandAction: false
  };
  Tree.TreeNode = TreeNode_default;
  var Tree_default = Tree;

  // node_modules/rc-tree/es/index.js
  var es_default26 = Tree_default;

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/HolderOutlined.js
  var React355 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/HolderOutlined.js
  var HolderOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M300 276.5a56 56 0 1056-97 56 56 0 00-56 97zm0 284a56 56 0 1056-97 56 56 0 00-56 97zM640 228a56 56 0 10112 0 56 56 0 00-112 0zm0 284a56 56 0 10112 0 56 56 0 00-112 0zM300 844.5a56 56 0 1056-97 56 56 0 00-56 97zM640 796a56 56 0 10112 0 56 56 0 00-112 0z" } }] }, "name": "holder", "theme": "outlined" };
  var HolderOutlined_default = HolderOutlined;

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/HolderOutlined.js
  var HolderOutlined2 = function HolderOutlined3(props, ref) {
    return /* @__PURE__ */ React355.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: HolderOutlined_default
    }));
  };
  HolderOutlined2.displayName = "HolderOutlined";
  var HolderOutlined_default2 = /* @__PURE__ */ React355.forwardRef(HolderOutlined2);

  // node_modules/antd/es/tree/Tree.js
  var import_classnames138 = __toESM(require_classnames());
  var React362 = __toESM(require_react());

  // node_modules/antd/es/tree/utils/dropIndicator.js
  var import_react103 = __toESM(require_react());
  var offset3 = 4;
  function dropIndicatorRender(props) {
    var _style;
    var dropPosition = props.dropPosition, dropLevelOffset = props.dropLevelOffset, prefixCls = props.prefixCls, indent = props.indent, _props$direction = props.direction, direction = _props$direction === void 0 ? "ltr" : _props$direction;
    var startPosition = direction === "ltr" ? "left" : "right";
    var endPosition = direction === "ltr" ? "right" : "left";
    var style3 = (_style = {}, _defineProperty(_style, startPosition, -dropLevelOffset * indent + offset3), _defineProperty(_style, endPosition, 0), _style);
    switch (dropPosition) {
      case -1:
        style3.top = -3;
        break;
      case 1:
        style3.bottom = -3;
        break;
      default:
        style3.bottom = -3;
        style3[startPosition] = indent + offset3;
        break;
    }
    return /* @__PURE__ */ import_react103.default.createElement("div", {
      style: style3,
      className: "".concat(prefixCls, "-drop-indicator")
    });
  }

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/CaretDownFilled.js
  var React357 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/CaretDownFilled.js
  var CaretDownFilled = { "icon": { "tag": "svg", "attrs": { "viewBox": "0 0 1024 1024", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M840.4 300H183.6c-19.7 0-30.7 20.8-18.5 35l328.4 380.8c9.4 10.9 27.5 10.9 37 0L858.9 335c12.2-14.2 1.2-35-18.5-35z" } }] }, "name": "caret-down", "theme": "filled" };
  var CaretDownFilled_default = CaretDownFilled;

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/CaretDownFilled.js
  var CaretDownFilled2 = function CaretDownFilled3(props, ref) {
    return /* @__PURE__ */ React357.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: CaretDownFilled_default
    }));
  };
  CaretDownFilled2.displayName = "CaretDownFilled";
  var CaretDownFilled_default2 = /* @__PURE__ */ React357.forwardRef(CaretDownFilled2);

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/FileOutlined.js
  var React358 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/FileOutlined.js
  var FileOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M854.6 288.6L639.4 73.4c-6-6-14.1-9.4-22.6-9.4H192c-17.7 0-32 14.3-32 32v832c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V311.3c0-8.5-3.4-16.7-9.4-22.7zM790.2 326H602V137.8L790.2 326zm1.8 562H232V136h302v216a42 42 0 0042 42h216v494z" } }] }, "name": "file", "theme": "outlined" };
  var FileOutlined_default = FileOutlined;

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/FileOutlined.js
  var FileOutlined2 = function FileOutlined3(props, ref) {
    return /* @__PURE__ */ React358.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: FileOutlined_default
    }));
  };
  FileOutlined2.displayName = "FileOutlined";
  var FileOutlined_default2 = /* @__PURE__ */ React358.forwardRef(FileOutlined2);

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/MinusSquareOutlined.js
  var React359 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/MinusSquareOutlined.js
  var MinusSquareOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M328 544h368c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8H328c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8z" } }, { "tag": "path", "attrs": { "d": "M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zm-40 728H184V184h656v656z" } }] }, "name": "minus-square", "theme": "outlined" };
  var MinusSquareOutlined_default = MinusSquareOutlined;

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/MinusSquareOutlined.js
  var MinusSquareOutlined2 = function MinusSquareOutlined3(props, ref) {
    return /* @__PURE__ */ React359.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: MinusSquareOutlined_default
    }));
  };
  MinusSquareOutlined2.displayName = "MinusSquareOutlined";
  var MinusSquareOutlined_default2 = /* @__PURE__ */ React359.forwardRef(MinusSquareOutlined2);

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/PlusSquareOutlined.js
  var React360 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/PlusSquareOutlined.js
  var PlusSquareOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M328 544h152v152c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V544h152c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8H544V328c0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8v152H328c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8z" } }, { "tag": "path", "attrs": { "d": "M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zm-40 728H184V184h656v656z" } }] }, "name": "plus-square", "theme": "outlined" };
  var PlusSquareOutlined_default = PlusSquareOutlined;

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/PlusSquareOutlined.js
  var PlusSquareOutlined2 = function PlusSquareOutlined3(props, ref) {
    return /* @__PURE__ */ React360.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: PlusSquareOutlined_default
    }));
  };
  PlusSquareOutlined2.displayName = "PlusSquareOutlined";
  var PlusSquareOutlined_default2 = /* @__PURE__ */ React360.forwardRef(PlusSquareOutlined2);

  // node_modules/antd/es/tree/utils/iconUtil.js
  var import_classnames137 = __toESM(require_classnames());
  var React361 = __toESM(require_react());
  function renderSwitcherIcon(prefixCls, switcherIcon, showLine, treeNodeProps) {
    var isLeaf = treeNodeProps.isLeaf, expanded = treeNodeProps.expanded, loading = treeNodeProps.loading;
    if (loading) {
      return /* @__PURE__ */ React361.createElement(LoadingOutlined_default2, {
        className: "".concat(prefixCls, "-switcher-loading-icon")
      });
    }
    var showLeafIcon;
    if (showLine && _typeof(showLine) === "object") {
      showLeafIcon = showLine.showLeafIcon;
    }
    if (isLeaf) {
      if (!showLine) {
        return null;
      }
      if (typeof showLeafIcon !== "boolean" && !!showLeafIcon) {
        var leafIcon = typeof showLeafIcon === "function" ? showLeafIcon(treeNodeProps) : showLeafIcon;
        var leafCls = "".concat(prefixCls, "-switcher-line-custom-icon");
        if (isValidElement6(leafIcon)) {
          return cloneElement4(leafIcon, {
            className: (0, import_classnames137.default)(leafIcon.props.className || "", leafCls)
          });
        }
        return leafIcon;
      }
      return showLeafIcon ? /* @__PURE__ */ React361.createElement(FileOutlined_default2, {
        className: "".concat(prefixCls, "-switcher-line-icon")
      }) : /* @__PURE__ */ React361.createElement("span", {
        className: "".concat(prefixCls, "-switcher-leaf-line")
      });
    }
    var switcherCls = "".concat(prefixCls, "-switcher-icon");
    var switcher = typeof switcherIcon === "function" ? switcherIcon(treeNodeProps) : switcherIcon;
    if (isValidElement6(switcher)) {
      return cloneElement4(switcher, {
        className: (0, import_classnames137.default)(switcher.props.className || "", switcherCls)
      });
    }
    if (switcher) {
      return switcher;
    }
    if (showLine) {
      return expanded ? /* @__PURE__ */ React361.createElement(MinusSquareOutlined_default2, {
        className: "".concat(prefixCls, "-switcher-line-icon")
      }) : /* @__PURE__ */ React361.createElement(PlusSquareOutlined_default2, {
        className: "".concat(prefixCls, "-switcher-line-icon")
      });
    }
    return /* @__PURE__ */ React361.createElement(CaretDownFilled_default2, {
      className: switcherCls
    });
  }

  // node_modules/antd/es/tree/Tree.js
  var Tree2 = /* @__PURE__ */ React362.forwardRef(function(props, ref) {
    var _classNames;
    var _React$useContext = React362.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls, direction = _React$useContext.direction, virtual = _React$useContext.virtual;
    var customizePrefixCls = props.prefixCls, className = props.className, _props$showIcon = props.showIcon, showIcon = _props$showIcon === void 0 ? false : _props$showIcon, showLine = props.showLine, _switcherIcon = props.switcherIcon, _props$blockNode = props.blockNode, blockNode = _props$blockNode === void 0 ? false : _props$blockNode, children = props.children, _props$checkable = props.checkable, checkable = _props$checkable === void 0 ? false : _props$checkable, _props$selectable = props.selectable, selectable = _props$selectable === void 0 ? true : _props$selectable, draggable = props.draggable, _props$motion = props.motion, motion2 = _props$motion === void 0 ? _extends(_extends({}, motion_default), {
      motionAppear: false
    }) : _props$motion;
    var prefixCls = getPrefixCls("tree", customizePrefixCls);
    var newProps = _extends(_extends({}, props), {
      checkable,
      selectable,
      showIcon,
      motion: motion2,
      blockNode,
      showLine: Boolean(showLine),
      dropIndicatorRender
    });
    var draggableConfig = React362.useMemo(function() {
      if (!draggable) {
        return false;
      }
      var mergedDraggable = {};
      switch (_typeof(draggable)) {
        case "function":
          mergedDraggable.nodeDraggable = draggable;
          break;
        case "object":
          mergedDraggable = _extends({}, draggable);
          break;
        default:
          break;
      }
      if (mergedDraggable.icon !== false) {
        mergedDraggable.icon = mergedDraggable.icon || /* @__PURE__ */ React362.createElement(HolderOutlined_default2, null);
      }
      return mergedDraggable;
    }, [draggable]);
    return /* @__PURE__ */ React362.createElement(es_default26, _extends({
      itemHeight: 20,
      ref,
      virtual
    }, newProps, {
      prefixCls,
      className: (0, import_classnames138.default)((_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-icon-hide"), !showIcon), _defineProperty(_classNames, "".concat(prefixCls, "-block-node"), blockNode), _defineProperty(_classNames, "".concat(prefixCls, "-unselectable"), !selectable), _defineProperty(_classNames, "".concat(prefixCls, "-rtl"), direction === "rtl"), _classNames), className),
      direction,
      checkable: checkable ? /* @__PURE__ */ React362.createElement("span", {
        className: "".concat(prefixCls, "-checkbox-inner")
      }) : checkable,
      selectable,
      switcherIcon: function switcherIcon(nodeProps) {
        return renderSwitcherIcon(prefixCls, _switcherIcon, showLine, nodeProps);
      },
      draggable: draggableConfig
    }), children);
  });
  var Tree_default2 = Tree2;

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/FolderOpenOutlined.js
  var React363 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/FolderOpenOutlined.js
  var FolderOpenOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M928 444H820V330.4c0-17.7-14.3-32-32-32H473L355.7 186.2a8.15 8.15 0 00-5.5-2.2H96c-17.7 0-32 14.3-32 32v592c0 17.7 14.3 32 32 32h698c13 0 24.8-7.9 29.7-20l134-332c1.5-3.8 2.3-7.9 2.3-12 0-17.7-14.3-32-32-32zM136 256h188.5l119.6 114.4H748V444H238c-13 0-24.8 7.9-29.7 20L136 643.2V256zm635.3 512H159l103.3-256h612.4L771.3 768z" } }] }, "name": "folder-open", "theme": "outlined" };
  var FolderOpenOutlined_default = FolderOpenOutlined;

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/FolderOpenOutlined.js
  var FolderOpenOutlined2 = function FolderOpenOutlined3(props, ref) {
    return /* @__PURE__ */ React363.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: FolderOpenOutlined_default
    }));
  };
  FolderOpenOutlined2.displayName = "FolderOpenOutlined";
  var FolderOpenOutlined_default2 = /* @__PURE__ */ React363.forwardRef(FolderOpenOutlined2);

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/FolderOutlined.js
  var React364 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/FolderOutlined.js
  var FolderOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M880 298.4H521L403.7 186.2a8.15 8.15 0 00-5.5-2.2H144c-17.7 0-32 14.3-32 32v592c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V330.4c0-17.7-14.3-32-32-32zM840 768H184V256h188.5l119.6 114.4H840V768z" } }] }, "name": "folder", "theme": "outlined" };
  var FolderOutlined_default = FolderOutlined;

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/FolderOutlined.js
  var FolderOutlined2 = function FolderOutlined3(props, ref) {
    return /* @__PURE__ */ React364.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: FolderOutlined_default
    }));
  };
  FolderOutlined2.displayName = "FolderOutlined";
  var FolderOutlined_default2 = /* @__PURE__ */ React364.forwardRef(FolderOutlined2);

  // node_modules/antd/es/tree/DirectoryTree.js
  var import_classnames139 = __toESM(require_classnames());
  var React365 = __toESM(require_react());

  // node_modules/antd/es/tree/utils/dictUtil.js
  var Record;
  (function(Record2) {
    Record2[Record2["None"] = 0] = "None";
    Record2[Record2["Start"] = 1] = "Start";
    Record2[Record2["End"] = 2] = "End";
  })(Record || (Record = {}));
  function traverseNodesKey(treeData, callback) {
    function processNode(dataNode) {
      var key2 = dataNode.key, children = dataNode.children;
      if (callback(key2, dataNode) !== false) {
        traverseNodesKey(children || [], callback);
      }
    }
    treeData.forEach(processNode);
  }
  function calcRangeKeys(_ref) {
    var treeData = _ref.treeData, expandedKeys = _ref.expandedKeys, startKey = _ref.startKey, endKey = _ref.endKey;
    var keys2 = [];
    var record = Record.None;
    if (startKey && startKey === endKey) {
      return [startKey];
    }
    if (!startKey || !endKey) {
      return [];
    }
    function matchKey(key2) {
      return key2 === startKey || key2 === endKey;
    }
    traverseNodesKey(treeData, function(key2) {
      if (record === Record.End) {
        return false;
      }
      if (matchKey(key2)) {
        keys2.push(key2);
        if (record === Record.None) {
          record = Record.Start;
        } else if (record === Record.Start) {
          record = Record.End;
          return false;
        }
      } else if (record === Record.Start) {
        keys2.push(key2);
      }
      return expandedKeys.includes(key2);
    });
    return keys2;
  }
  function convertDirectoryKeysToNodes(treeData, keys2) {
    var restKeys = _toConsumableArray(keys2);
    var nodes = [];
    traverseNodesKey(treeData, function(key2, node) {
      var index2 = restKeys.indexOf(key2);
      if (index2 !== -1) {
        nodes.push(node);
        restKeys.splice(index2, 1);
      }
      return !!restKeys.length;
    });
    return nodes;
  }

  // node_modules/antd/es/tree/DirectoryTree.js
  var __rest50 = function(s2, e3) {
    var t4 = {};
    for (var p2 in s2)
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t4[p2] = s2[p2];
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t4[p2[i3]] = s2[p2[i3]];
      }
    return t4;
  };
  function getIcon(props) {
    var isLeaf = props.isLeaf, expanded = props.expanded;
    if (isLeaf) {
      return /* @__PURE__ */ React365.createElement(FileOutlined_default2, null);
    }
    return expanded ? /* @__PURE__ */ React365.createElement(FolderOpenOutlined_default2, null) : /* @__PURE__ */ React365.createElement(FolderOutlined_default2, null);
  }
  function getTreeData(_ref) {
    var treeData = _ref.treeData, children = _ref.children;
    return treeData || convertTreeToData(children);
  }
  var DirectoryTree = function DirectoryTree2(_a, ref) {
    var defaultExpandAll = _a.defaultExpandAll, defaultExpandParent = _a.defaultExpandParent, defaultExpandedKeys = _a.defaultExpandedKeys, props = __rest50(_a, ["defaultExpandAll", "defaultExpandParent", "defaultExpandedKeys"]);
    var lastSelectedKey = React365.useRef();
    var cachedSelectedKeys = React365.useRef();
    var getInitExpandedKeys = function getInitExpandedKeys2() {
      var _convertDataToEntitie = convertDataToEntities(getTreeData(props)), keyEntities = _convertDataToEntitie.keyEntities;
      var initExpandedKeys;
      if (defaultExpandAll) {
        initExpandedKeys = Object.keys(keyEntities);
      } else if (defaultExpandParent) {
        initExpandedKeys = conductExpandParent(props.expandedKeys || defaultExpandedKeys || [], keyEntities);
      } else {
        initExpandedKeys = props.expandedKeys || defaultExpandedKeys;
      }
      return initExpandedKeys;
    };
    var _React$useState = React365.useState(props.selectedKeys || props.defaultSelectedKeys || []), _React$useState2 = _slicedToArray(_React$useState, 2), selectedKeys = _React$useState2[0], setSelectedKeys = _React$useState2[1];
    var _React$useState3 = React365.useState(function() {
      return getInitExpandedKeys();
    }), _React$useState4 = _slicedToArray(_React$useState3, 2), expandedKeys = _React$useState4[0], setExpandedKeys = _React$useState4[1];
    React365.useEffect(function() {
      if ("selectedKeys" in props) {
        setSelectedKeys(props.selectedKeys);
      }
    }, [props.selectedKeys]);
    React365.useEffect(function() {
      if ("expandedKeys" in props) {
        setExpandedKeys(props.expandedKeys);
      }
    }, [props.expandedKeys]);
    var onExpand = function onExpand2(keys2, info) {
      var _a2;
      if (!("expandedKeys" in props)) {
        setExpandedKeys(keys2);
      }
      return (_a2 = props.onExpand) === null || _a2 === void 0 ? void 0 : _a2.call(props, keys2, info);
    };
    var onSelect = function onSelect2(keys2, event) {
      var _a2;
      var multiple = props.multiple;
      var node = event.node, nativeEvent = event.nativeEvent;
      var _node$key = node.key, key2 = _node$key === void 0 ? "" : _node$key;
      var treeData = getTreeData(props);
      var newEvent = _extends(_extends({}, event), {
        selected: true
      });
      var ctrlPick = (nativeEvent === null || nativeEvent === void 0 ? void 0 : nativeEvent.ctrlKey) || (nativeEvent === null || nativeEvent === void 0 ? void 0 : nativeEvent.metaKey);
      var shiftPick = nativeEvent === null || nativeEvent === void 0 ? void 0 : nativeEvent.shiftKey;
      var newSelectedKeys;
      if (multiple && ctrlPick) {
        newSelectedKeys = keys2;
        lastSelectedKey.current = key2;
        cachedSelectedKeys.current = newSelectedKeys;
        newEvent.selectedNodes = convertDirectoryKeysToNodes(treeData, newSelectedKeys);
      } else if (multiple && shiftPick) {
        newSelectedKeys = Array.from(new Set([].concat(_toConsumableArray(cachedSelectedKeys.current || []), _toConsumableArray(calcRangeKeys({
          treeData,
          expandedKeys,
          startKey: key2,
          endKey: lastSelectedKey.current
        })))));
        newEvent.selectedNodes = convertDirectoryKeysToNodes(treeData, newSelectedKeys);
      } else {
        newSelectedKeys = [key2];
        lastSelectedKey.current = key2;
        cachedSelectedKeys.current = newSelectedKeys;
        newEvent.selectedNodes = convertDirectoryKeysToNodes(treeData, newSelectedKeys);
      }
      (_a2 = props.onSelect) === null || _a2 === void 0 ? void 0 : _a2.call(props, newSelectedKeys, newEvent);
      if (!("selectedKeys" in props)) {
        setSelectedKeys(newSelectedKeys);
      }
    };
    var _React$useContext = React365.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls, direction = _React$useContext.direction;
    var customizePrefixCls = props.prefixCls, className = props.className, _props$showIcon = props.showIcon, showIcon = _props$showIcon === void 0 ? true : _props$showIcon, _props$expandAction = props.expandAction, expandAction = _props$expandAction === void 0 ? "click" : _props$expandAction, otherProps = __rest50(props, ["prefixCls", "className", "showIcon", "expandAction"]);
    var prefixCls = getPrefixCls("tree", customizePrefixCls);
    var connectClassName = (0, import_classnames139.default)("".concat(prefixCls, "-directory"), _defineProperty({}, "".concat(prefixCls, "-directory-rtl"), direction === "rtl"), className);
    return /* @__PURE__ */ React365.createElement(Tree_default2, _extends({
      icon: getIcon,
      ref,
      blockNode: true
    }, otherProps, {
      showIcon,
      expandAction,
      prefixCls,
      className: connectClassName,
      expandedKeys,
      selectedKeys,
      onSelect,
      onExpand
    }));
  };
  var ForwardDirectoryTree = /* @__PURE__ */ React365.forwardRef(DirectoryTree);
  if (true) {
    ForwardDirectoryTree.displayName = "DirectoryTree";
  }
  var DirectoryTree_default = ForwardDirectoryTree;

  // node_modules/antd/es/tree/index.js
  var Tree3 = Tree_default2;
  Tree3.DirectoryTree = DirectoryTree_default;
  Tree3.TreeNode = TreeNode_default;
  var tree_default = Tree3;

  // node_modules/antd/es/_util/hooks/useSyncState.js
  var React366 = __toESM(require_react());
  function useSyncState2(initialValue) {
    var ref = React366.useRef(initialValue);
    var forceUpdate = useForceUpdate();
    return [function() {
      return ref.current;
    }, function(newValue) {
      ref.current = newValue;
      forceUpdate();
    }];
  }

  // node_modules/antd/es/table/hooks/useFilter/FilterSearch.js
  var React367 = __toESM(require_react());
  function FilterSearch(_ref) {
    var value = _ref.value, onChange = _ref.onChange, filterSearch = _ref.filterSearch, tablePrefixCls = _ref.tablePrefixCls, locale4 = _ref.locale;
    if (!filterSearch) {
      return null;
    }
    return /* @__PURE__ */ React367.createElement("div", {
      className: "".concat(tablePrefixCls, "-filter-dropdown-search")
    }, /* @__PURE__ */ React367.createElement(input_default, {
      prefix: /* @__PURE__ */ React367.createElement(SearchOutlined_default2, null),
      placeholder: locale4.filterSearchPlaceholder,
      onChange,
      value,
      // for skip min-width of input
      htmlSize: 1,
      className: "".concat(tablePrefixCls, "-filter-dropdown-search-input")
    }));
  }
  var FilterSearch_default = FilterSearch;

  // node_modules/antd/es/table/hooks/useFilter/FilterWrapper.js
  var React368 = __toESM(require_react());
  var onKeyDown = function onKeyDown2(event) {
    var keyCode = event.keyCode;
    if (keyCode === KeyCode_default.ENTER) {
      event.stopPropagation();
    }
  };
  var FilterDropdownMenuWrapper = function FilterDropdownMenuWrapper2(props) {
    return /* @__PURE__ */ React368.createElement("div", {
      className: props.className,
      onClick: function onClick(e3) {
        return e3.stopPropagation();
      },
      onKeyDown
    }, props.children);
  };
  var FilterWrapper_default = FilterDropdownMenuWrapper;

  // node_modules/antd/es/table/hooks/useFilter/FilterDropdown.js
  function hasSubMenu(filters) {
    return filters.some(function(_ref) {
      var children = _ref.children;
      return children;
    });
  }
  function searchValueMatched(searchValue, text) {
    if (typeof text === "string" || typeof text === "number") {
      return text === null || text === void 0 ? void 0 : text.toString().toLowerCase().includes(searchValue.trim().toLowerCase());
    }
    return false;
  }
  function renderFilterItems(_ref2) {
    var filters = _ref2.filters, prefixCls = _ref2.prefixCls, filteredKeys = _ref2.filteredKeys, filterMultiple = _ref2.filterMultiple, searchValue = _ref2.searchValue, filterSearch = _ref2.filterSearch;
    return filters.map(function(filter3, index2) {
      var key2 = String(filter3.value);
      if (filter3.children) {
        return {
          key: key2 || index2,
          label: filter3.text,
          popupClassName: "".concat(prefixCls, "-dropdown-submenu"),
          children: renderFilterItems({
            filters: filter3.children,
            prefixCls,
            filteredKeys,
            filterMultiple,
            searchValue,
            filterSearch
          })
        };
      }
      var Component20 = filterMultiple ? checkbox_default : radio_default2;
      var item = {
        key: filter3.value !== void 0 ? key2 : index2,
        label: /* @__PURE__ */ React369.createElement(React369.Fragment, null, /* @__PURE__ */ React369.createElement(Component20, {
          checked: filteredKeys.includes(key2)
        }), /* @__PURE__ */ React369.createElement("span", null, filter3.text))
      };
      if (searchValue.trim()) {
        if (typeof filterSearch === "function") {
          return filterSearch(searchValue, filter3) ? item : null;
        }
        return searchValueMatched(searchValue, filter3.text) ? item : null;
      }
      return item;
    });
  }
  function FilterDropdown(props) {
    var _a;
    var tablePrefixCls = props.tablePrefixCls, prefixCls = props.prefixCls, column = props.column, dropdownPrefixCls = props.dropdownPrefixCls, columnKey = props.columnKey, filterMultiple = props.filterMultiple, _props$filterMode = props.filterMode, filterMode = _props$filterMode === void 0 ? "menu" : _props$filterMode, _props$filterSearch = props.filterSearch, filterSearch = _props$filterSearch === void 0 ? false : _props$filterSearch, filterState = props.filterState, triggerFilter = props.triggerFilter, locale4 = props.locale, children = props.children, getPopupContainer = props.getPopupContainer;
    var filterDropdownOpen = column.filterDropdownOpen, onFilterDropdownOpenChange = column.onFilterDropdownOpenChange, filterDropdownVisible = column.filterDropdownVisible, onFilterDropdownVisibleChange = column.onFilterDropdownVisibleChange, filterResetToDefaultFilteredValue = column.filterResetToDefaultFilteredValue, defaultFilteredValue = column.defaultFilteredValue;
    var _React$useState = React369.useState(false), _React$useState2 = _slicedToArray(_React$useState, 2), visible = _React$useState2[0], setVisible = _React$useState2[1];
    var filtered = !!(filterState && (((_a = filterState.filteredKeys) === null || _a === void 0 ? void 0 : _a.length) || filterState.forceFiltered));
    var triggerVisible = function triggerVisible2(newVisible) {
      setVisible(newVisible);
      onFilterDropdownOpenChange === null || onFilterDropdownOpenChange === void 0 ? void 0 : onFilterDropdownOpenChange(newVisible);
      onFilterDropdownVisibleChange === null || onFilterDropdownVisibleChange === void 0 ? void 0 : onFilterDropdownVisibleChange(newVisible);
    };
    var mergedVisible;
    if (typeof filterDropdownOpen === "boolean") {
      mergedVisible = filterDropdownOpen;
    } else {
      mergedVisible = typeof filterDropdownVisible === "boolean" ? filterDropdownVisible : visible;
    }
    var propFilteredKeys = filterState === null || filterState === void 0 ? void 0 : filterState.filteredKeys;
    var _useSyncState = useSyncState2(propFilteredKeys || []), _useSyncState2 = _slicedToArray(_useSyncState, 2), getFilteredKeysSync = _useSyncState2[0], setFilteredKeysSync = _useSyncState2[1];
    var onSelectKeys = function onSelectKeys2(_ref3) {
      var selectedKeys2 = _ref3.selectedKeys;
      setFilteredKeysSync(selectedKeys2);
    };
    var onCheck = function onCheck2(keys2, _ref4) {
      var node = _ref4.node, checked = _ref4.checked;
      if (!filterMultiple) {
        onSelectKeys({
          selectedKeys: checked && node.key ? [node.key] : []
        });
      } else {
        onSelectKeys({
          selectedKeys: keys2
        });
      }
    };
    React369.useEffect(function() {
      if (!visible) {
        return;
      }
      onSelectKeys({
        selectedKeys: propFilteredKeys || []
      });
    }, [propFilteredKeys]);
    var _React$useState3 = React369.useState([]), _React$useState4 = _slicedToArray(_React$useState3, 2), openKeys = _React$useState4[0], setOpenKeys = _React$useState4[1];
    var onOpenChange = function onOpenChange2(keys2) {
      setOpenKeys(keys2);
    };
    var _React$useState5 = React369.useState(""), _React$useState6 = _slicedToArray(_React$useState5, 2), searchValue = _React$useState6[0], setSearchValue = _React$useState6[1];
    var onSearch = function onSearch2(e3) {
      var value = e3.target.value;
      setSearchValue(value);
    };
    React369.useEffect(function() {
      if (!visible) {
        setSearchValue("");
      }
    }, [visible]);
    var internalTriggerFilter = function internalTriggerFilter2(keys2) {
      var mergedKeys = keys2 && keys2.length ? keys2 : null;
      if (mergedKeys === null && (!filterState || !filterState.filteredKeys)) {
        return null;
      }
      if ((0, import_isEqual6.default)(mergedKeys, filterState === null || filterState === void 0 ? void 0 : filterState.filteredKeys)) {
        return null;
      }
      triggerFilter({
        column,
        key: columnKey,
        filteredKeys: mergedKeys
      });
    };
    var onConfirm = function onConfirm2() {
      triggerVisible(false);
      internalTriggerFilter(getFilteredKeysSync());
    };
    var onReset = function onReset2() {
      var _ref5 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
        confirm: false,
        closeDropdown: false
      }, confirm = _ref5.confirm, closeDropdown = _ref5.closeDropdown;
      if (confirm) {
        internalTriggerFilter([]);
      }
      if (closeDropdown) {
        triggerVisible(false);
      }
      setSearchValue("");
      if (filterResetToDefaultFilteredValue) {
        setFilteredKeysSync((defaultFilteredValue || []).map(function(key2) {
          return String(key2);
        }));
      } else {
        setFilteredKeysSync([]);
      }
    };
    var doFilter = function doFilter2() {
      var _ref6 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
        closeDropdown: true
      }, closeDropdown = _ref6.closeDropdown;
      if (closeDropdown) {
        triggerVisible(false);
      }
      internalTriggerFilter(getFilteredKeysSync());
    };
    var onVisibleChange = function onVisibleChange2(newVisible) {
      if (newVisible && propFilteredKeys !== void 0) {
        setFilteredKeysSync(propFilteredKeys || []);
      }
      triggerVisible(newVisible);
      if (!newVisible && !column.filterDropdown) {
        onConfirm();
      }
    };
    var dropdownMenuClass = (0, import_classnames140.default)(_defineProperty({}, "".concat(dropdownPrefixCls, "-menu-without-submenu"), !hasSubMenu(column.filters || [])));
    var onCheckAll = function onCheckAll2(e3) {
      if (e3.target.checked) {
        var allFilterKeys = flattenKeys(column === null || column === void 0 ? void 0 : column.filters).map(function(key2) {
          return String(key2);
        });
        setFilteredKeysSync(allFilterKeys);
      } else {
        setFilteredKeysSync([]);
      }
    };
    var getTreeData2 = function getTreeData3(_ref7) {
      var filters = _ref7.filters;
      return (filters || []).map(function(filter3, index2) {
        var key2 = String(filter3.value);
        var item = {
          title: filter3.text,
          key: filter3.value !== void 0 ? key2 : index2
        };
        if (filter3.children) {
          item.children = getTreeData3({
            filters: filter3.children
          });
        }
        return item;
      });
    };
    var getFilterData2 = function getFilterData3(node) {
      var _a2;
      return _extends(_extends({}, node), {
        text: node.title,
        value: node.key,
        children: ((_a2 = node.children) === null || _a2 === void 0 ? void 0 : _a2.map(function(item) {
          return getFilterData3(item);
        })) || []
      });
    };
    var dropdownContent;
    if (typeof column.filterDropdown === "function") {
      dropdownContent = column.filterDropdown({
        prefixCls: "".concat(dropdownPrefixCls, "-custom"),
        setSelectedKeys: function setSelectedKeys(selectedKeys2) {
          return onSelectKeys({
            selectedKeys: selectedKeys2
          });
        },
        selectedKeys: getFilteredKeysSync(),
        confirm: doFilter,
        clearFilters: onReset,
        filters: column.filters,
        visible: mergedVisible,
        close: function close2() {
          triggerVisible(false);
        }
      });
    } else if (column.filterDropdown) {
      dropdownContent = column.filterDropdown;
    } else {
      var selectedKeys = getFilteredKeysSync() || [];
      var getFilterComponent = function getFilterComponent2() {
        if ((column.filters || []).length === 0) {
          return /* @__PURE__ */ React369.createElement(empty_default2, {
            image: empty_default2.PRESENTED_IMAGE_SIMPLE,
            description: locale4.filterEmptyText,
            imageStyle: {
              height: 24
            },
            style: {
              margin: 0,
              padding: "16px 0"
            }
          });
        }
        if (filterMode === "tree") {
          return /* @__PURE__ */ React369.createElement(React369.Fragment, null, /* @__PURE__ */ React369.createElement(FilterSearch_default, {
            filterSearch,
            value: searchValue,
            onChange: onSearch,
            tablePrefixCls,
            locale: locale4
          }), /* @__PURE__ */ React369.createElement("div", {
            className: "".concat(tablePrefixCls, "-filter-dropdown-tree")
          }, filterMultiple ? /* @__PURE__ */ React369.createElement(checkbox_default, {
            checked: selectedKeys.length === flattenKeys(column.filters).length,
            indeterminate: selectedKeys.length > 0 && selectedKeys.length < flattenKeys(column.filters).length,
            className: "".concat(tablePrefixCls, "-filter-dropdown-checkall"),
            onChange: onCheckAll
          }, locale4.filterCheckall) : null, /* @__PURE__ */ React369.createElement(tree_default, {
            checkable: true,
            selectable: false,
            blockNode: true,
            multiple: filterMultiple,
            checkStrictly: !filterMultiple,
            className: "".concat(dropdownPrefixCls, "-menu"),
            onCheck,
            checkedKeys: selectedKeys,
            selectedKeys,
            showIcon: false,
            treeData: getTreeData2({
              filters: column.filters
            }),
            autoExpandParent: true,
            defaultExpandAll: true,
            filterTreeNode: searchValue.trim() ? function(node) {
              if (typeof filterSearch === "function") {
                return filterSearch(searchValue, getFilterData2(node));
              }
              return searchValueMatched(searchValue, node.title);
            } : void 0
          })));
        }
        return /* @__PURE__ */ React369.createElement(React369.Fragment, null, /* @__PURE__ */ React369.createElement(FilterSearch_default, {
          filterSearch,
          value: searchValue,
          onChange: onSearch,
          tablePrefixCls,
          locale: locale4
        }), /* @__PURE__ */ React369.createElement(menu_default, {
          selectable: true,
          multiple: filterMultiple,
          prefixCls: "".concat(dropdownPrefixCls, "-menu"),
          className: dropdownMenuClass,
          onSelect: onSelectKeys,
          onDeselect: onSelectKeys,
          selectedKeys,
          getPopupContainer,
          openKeys,
          onOpenChange,
          items: renderFilterItems({
            filters: column.filters || [],
            filterSearch,
            prefixCls,
            filteredKeys: getFilteredKeysSync(),
            filterMultiple,
            searchValue
          })
        }));
      };
      var getResetDisabled = function getResetDisabled2() {
        if (filterResetToDefaultFilteredValue) {
          return (0, import_isEqual6.default)((defaultFilteredValue || []).map(function(key2) {
            return String(key2);
          }), selectedKeys);
        }
        return selectedKeys.length === 0;
      };
      dropdownContent = /* @__PURE__ */ React369.createElement(React369.Fragment, null, getFilterComponent(), /* @__PURE__ */ React369.createElement("div", {
        className: "".concat(prefixCls, "-dropdown-btns")
      }, /* @__PURE__ */ React369.createElement(button_default2, {
        type: "link",
        size: "small",
        disabled: getResetDisabled(),
        onClick: function onClick() {
          return onReset();
        }
      }, locale4.filterReset), /* @__PURE__ */ React369.createElement(button_default2, {
        type: "primary",
        size: "small",
        onClick: onConfirm
      }, locale4.filterConfirm)));
    }
    if (column.filterDropdown) {
      dropdownContent = /* @__PURE__ */ React369.createElement(OverrideProvider, {
        selectable: void 0
      }, dropdownContent);
    }
    var menu = function menu2() {
      return /* @__PURE__ */ React369.createElement(FilterWrapper_default, {
        className: "".concat(prefixCls, "-dropdown")
      }, dropdownContent);
    };
    var filterIcon;
    if (typeof column.filterIcon === "function") {
      filterIcon = column.filterIcon(filtered);
    } else if (column.filterIcon) {
      filterIcon = column.filterIcon;
    } else {
      filterIcon = /* @__PURE__ */ React369.createElement(FilterFilled_default2, null);
    }
    var _React$useContext = React369.useContext(ConfigContext), direction = _React$useContext.direction;
    return /* @__PURE__ */ React369.createElement("div", {
      className: "".concat(prefixCls, "-column")
    }, /* @__PURE__ */ React369.createElement("span", {
      className: "".concat(tablePrefixCls, "-column-title")
    }, children), /* @__PURE__ */ React369.createElement(dropdown_default2, {
      dropdownRender: menu,
      trigger: ["click"],
      open: mergedVisible,
      onOpenChange: onVisibleChange,
      getPopupContainer,
      placement: direction === "rtl" ? "bottomLeft" : "bottomRight"
    }, /* @__PURE__ */ React369.createElement("span", {
      role: "button",
      tabIndex: -1,
      className: (0, import_classnames140.default)("".concat(prefixCls, "-trigger"), {
        active: filtered
      }),
      onClick: function onClick(e3) {
        e3.stopPropagation();
      }
    }, filterIcon)));
  }
  var FilterDropdown_default = FilterDropdown;

  // node_modules/antd/es/table/hooks/useFilter/index.js
  function collectFilterStates(columns4, init2, pos) {
    var filterStates = [];
    (columns4 || []).forEach(function(column, index2) {
      var _a;
      var columnPos = getColumnPos(index2, pos);
      if (column.filters || "filterDropdown" in column || "onFilter" in column) {
        if ("filteredValue" in column) {
          var filteredValues = column.filteredValue;
          if (!("filterDropdown" in column)) {
            filteredValues = (_a = filteredValues === null || filteredValues === void 0 ? void 0 : filteredValues.map(String)) !== null && _a !== void 0 ? _a : filteredValues;
          }
          filterStates.push({
            column,
            key: getColumnKey(column, columnPos),
            filteredKeys: filteredValues,
            forceFiltered: column.filtered
          });
        } else {
          filterStates.push({
            column,
            key: getColumnKey(column, columnPos),
            filteredKeys: init2 && column.defaultFilteredValue ? column.defaultFilteredValue : void 0,
            forceFiltered: column.filtered
          });
        }
      }
      if ("children" in column) {
        filterStates = [].concat(_toConsumableArray(filterStates), _toConsumableArray(collectFilterStates(column.children, init2, columnPos)));
      }
    });
    return filterStates;
  }
  function injectFilter(prefixCls, dropdownPrefixCls, columns4, filterStates, triggerFilter, getPopupContainer, locale4, pos) {
    return columns4.map(function(column, index2) {
      var columnPos = getColumnPos(index2, pos);
      var _column$filterMultipl = column.filterMultiple, filterMultiple = _column$filterMultipl === void 0 ? true : _column$filterMultipl, filterMode = column.filterMode, filterSearch = column.filterSearch;
      var newColumn = column;
      if (newColumn.filters || newColumn.filterDropdown) {
        var columnKey = getColumnKey(newColumn, columnPos);
        var filterState = filterStates.find(function(_ref) {
          var key2 = _ref.key;
          return columnKey === key2;
        });
        newColumn = _extends(_extends({}, newColumn), {
          title: function title(renderProps) {
            return /* @__PURE__ */ React370.createElement(FilterDropdown_default, {
              tablePrefixCls: prefixCls,
              prefixCls: "".concat(prefixCls, "-filter"),
              dropdownPrefixCls,
              column: newColumn,
              columnKey,
              filterState,
              filterMultiple,
              filterMode,
              filterSearch,
              triggerFilter,
              locale: locale4,
              getPopupContainer
            }, renderColumnTitle(column.title, renderProps));
          }
        });
      }
      if ("children" in newColumn) {
        newColumn = _extends(_extends({}, newColumn), {
          children: injectFilter(prefixCls, dropdownPrefixCls, newColumn.children, filterStates, triggerFilter, getPopupContainer, locale4, columnPos)
        });
      }
      return newColumn;
    });
  }
  function flattenKeys(filters) {
    var keys2 = [];
    (filters || []).forEach(function(_ref2) {
      var value = _ref2.value, children = _ref2.children;
      keys2.push(value);
      if (children) {
        keys2 = [].concat(_toConsumableArray(keys2), _toConsumableArray(flattenKeys(children)));
      }
    });
    return keys2;
  }
  function generateFilterInfo(filterStates) {
    var currentFilters = {};
    filterStates.forEach(function(_ref3) {
      var key2 = _ref3.key, filteredKeys = _ref3.filteredKeys, column = _ref3.column;
      var filters = column.filters, filterDropdown = column.filterDropdown;
      if (filterDropdown) {
        currentFilters[key2] = filteredKeys || null;
      } else if (Array.isArray(filteredKeys)) {
        var keys2 = flattenKeys(filters);
        currentFilters[key2] = keys2.filter(function(originKey) {
          return filteredKeys.includes(String(originKey));
        });
      } else {
        currentFilters[key2] = null;
      }
    });
    return currentFilters;
  }
  function getFilterData(data, filterStates) {
    return filterStates.reduce(function(currentData, filterState) {
      var _filterState$column = filterState.column, onFilter = _filterState$column.onFilter, filters = _filterState$column.filters, filteredKeys = filterState.filteredKeys;
      if (onFilter && filteredKeys && filteredKeys.length) {
        return currentData.filter(function(record) {
          return filteredKeys.some(function(key2) {
            var keys2 = flattenKeys(filters);
            var keyIndex = keys2.findIndex(function(k2) {
              return String(k2) === String(key2);
            });
            var realKey = keyIndex !== -1 ? keys2[keyIndex] : key2;
            return onFilter(realKey, record);
          });
        });
      }
      return currentData;
    }, data);
  }
  function useFilter(_ref4) {
    var prefixCls = _ref4.prefixCls, dropdownPrefixCls = _ref4.dropdownPrefixCls, mergedColumns = _ref4.mergedColumns, onFilterChange = _ref4.onFilterChange, getPopupContainer = _ref4.getPopupContainer, tableLocale = _ref4.locale;
    var _React$useState = React370.useState(function() {
      return collectFilterStates(mergedColumns, true);
    }), _React$useState2 = _slicedToArray(_React$useState, 2), filterStates = _React$useState2[0], setFilterStates = _React$useState2[1];
    var mergedFilterStates = React370.useMemo(function() {
      var collectedStates = collectFilterStates(mergedColumns, false);
      var filteredKeysIsAllNotControlled = true;
      var filteredKeysIsAllControlled = true;
      collectedStates.forEach(function(_ref5) {
        var filteredKeys = _ref5.filteredKeys;
        if (filteredKeys !== void 0) {
          filteredKeysIsAllNotControlled = false;
        } else {
          filteredKeysIsAllControlled = false;
        }
      });
      if (filteredKeysIsAllNotControlled) {
        return filterStates;
      }
      true ? warning_default2(filteredKeysIsAllControlled, "Table", "Columns should all contain `filteredValue` or not contain `filteredValue`.") : void 0;
      return collectedStates;
    }, [mergedColumns, filterStates]);
    var filters = React370.useMemo(function() {
      return generateFilterInfo(mergedFilterStates);
    }, [mergedFilterStates]);
    var triggerFilter = function triggerFilter2(filterState) {
      var newFilterStates = mergedFilterStates.filter(function(_ref6) {
        var key2 = _ref6.key;
        return key2 !== filterState.key;
      });
      newFilterStates.push(filterState);
      setFilterStates(newFilterStates);
      onFilterChange(generateFilterInfo(newFilterStates), newFilterStates);
    };
    var transformColumns = function transformColumns2(innerColumns) {
      return injectFilter(prefixCls, dropdownPrefixCls, innerColumns, mergedFilterStates, triggerFilter, getPopupContainer, tableLocale);
    };
    return [transformColumns, mergedFilterStates, filters];
  }
  var useFilter_default = useFilter;

  // node_modules/antd/es/table/hooks/useLazyKVMap.js
  var React371 = __toESM(require_react());
  function useLazyKVMap(data, childrenColumnName, getRowKey) {
    var mapCacheRef = React371.useRef({});
    function getRecordByKey(key2) {
      if (!mapCacheRef.current || mapCacheRef.current.data !== data || mapCacheRef.current.childrenColumnName !== childrenColumnName || mapCacheRef.current.getRowKey !== getRowKey) {
        let dig = function(records) {
          records.forEach(function(record, index2) {
            var rowKey = getRowKey(record, index2);
            kvMap.set(rowKey, record);
            if (record && _typeof(record) === "object" && childrenColumnName in record) {
              dig(record[childrenColumnName] || []);
            }
          });
        };
        var kvMap = /* @__PURE__ */ new Map();
        dig(data);
        mapCacheRef.current = {
          data,
          childrenColumnName,
          kvMap,
          getRowKey
        };
      }
      return mapCacheRef.current.kvMap.get(key2);
    }
    return [getRecordByKey];
  }

  // node_modules/antd/es/table/hooks/usePagination.js
  var import_react104 = __toESM(require_react());
  var __rest51 = function(s2, e3) {
    var t4 = {};
    for (var p2 in s2)
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t4[p2] = s2[p2];
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t4[p2[i3]] = s2[p2[i3]];
      }
    return t4;
  };
  var DEFAULT_PAGE_SIZE = 10;
  function getPaginationParam(pagination, mergedPagination) {
    var param = {
      current: mergedPagination.current,
      pageSize: mergedPagination.pageSize
    };
    var paginationObj = pagination && _typeof(pagination) === "object" ? pagination : {};
    Object.keys(paginationObj).forEach(function(pageProp) {
      var value = mergedPagination[pageProp];
      if (typeof value !== "function") {
        param[pageProp] = value;
      }
    });
    return param;
  }
  function extendsObject() {
    var result2 = {};
    for (var _len = arguments.length, list = new Array(_len), _key = 0; _key < _len; _key++) {
      list[_key] = arguments[_key];
    }
    list.forEach(function(obj) {
      if (obj) {
        Object.keys(obj).forEach(function(key2) {
          var val = obj[key2];
          if (val !== void 0) {
            result2[key2] = val;
          }
        });
      }
    });
    return result2;
  }
  function usePagination(total, pagination, onChange) {
    var _a = pagination && _typeof(pagination) === "object" ? pagination : {}, _a$total = _a.total, paginationTotal = _a$total === void 0 ? 0 : _a$total, paginationObj = __rest51(_a, ["total"]);
    var _useState = (0, import_react104.useState)(function() {
      return {
        current: "defaultCurrent" in paginationObj ? paginationObj.defaultCurrent : 1,
        pageSize: "defaultPageSize" in paginationObj ? paginationObj.defaultPageSize : DEFAULT_PAGE_SIZE
      };
    }), _useState2 = _slicedToArray(_useState, 2), innerPagination = _useState2[0], setInnerPagination = _useState2[1];
    var mergedPagination = extendsObject(innerPagination, paginationObj, {
      total: paginationTotal > 0 ? paginationTotal : total
    });
    var maxPage = Math.ceil((paginationTotal || total) / mergedPagination.pageSize);
    if (mergedPagination.current > maxPage) {
      mergedPagination.current = maxPage || 1;
    }
    var refreshPagination = function refreshPagination2(current, pageSize) {
      setInnerPagination({
        current: current !== null && current !== void 0 ? current : 1,
        pageSize: pageSize || mergedPagination.pageSize
      });
    };
    var onInternalChange = function onInternalChange2(current, pageSize) {
      var _a2;
      if (pagination) {
        (_a2 = pagination.onChange) === null || _a2 === void 0 ? void 0 : _a2.call(pagination, current, pageSize);
      }
      refreshPagination(current, pageSize);
      onChange(current, pageSize || (mergedPagination === null || mergedPagination === void 0 ? void 0 : mergedPagination.pageSize));
    };
    if (pagination === false) {
      return [{}, function() {
      }];
    }
    return [_extends(_extends({}, mergedPagination), {
      onChange: onInternalChange
    }), refreshPagination];
  }

  // node_modules/antd/es/table/hooks/useSelection.js
  var React372 = __toESM(require_react());
  var import_react105 = __toESM(require_react());
  var SELECTION_COLUMN = {};
  var SELECTION_ALL = "SELECT_ALL";
  var SELECTION_INVERT = "SELECT_INVERT";
  var SELECTION_NONE = "SELECT_NONE";
  var EMPTY_LIST4 = [];
  function flattenData(data, childrenColumnName) {
    var list = [];
    (data || []).forEach(function(record) {
      list.push(record);
      if (record && _typeof(record) === "object" && childrenColumnName in record) {
        list = [].concat(_toConsumableArray(list), _toConsumableArray(flattenData(record[childrenColumnName], childrenColumnName)));
      }
    });
    return list;
  }
  function useSelection(rowSelection, config) {
    var _ref = rowSelection || {}, preserveSelectedRowKeys = _ref.preserveSelectedRowKeys, selectedRowKeys = _ref.selectedRowKeys, defaultSelectedRowKeys = _ref.defaultSelectedRowKeys, getCheckboxProps = _ref.getCheckboxProps, onSelectionChange = _ref.onChange, onSelect = _ref.onSelect, onSelectAll = _ref.onSelectAll, onSelectInvert = _ref.onSelectInvert, onSelectNone = _ref.onSelectNone, onSelectMultiple = _ref.onSelectMultiple, selectionColWidth = _ref.columnWidth, selectionType = _ref.type, selections = _ref.selections, fixed = _ref.fixed, customizeRenderCell = _ref.renderCell, hideSelectAll = _ref.hideSelectAll, _ref$checkStrictly = _ref.checkStrictly, checkStrictly = _ref$checkStrictly === void 0 ? true : _ref$checkStrictly;
    var prefixCls = config.prefixCls, data = config.data, pageData = config.pageData, getRecordByKey = config.getRecordByKey, getRowKey = config.getRowKey, expandType = config.expandType, childrenColumnName = config.childrenColumnName, tableLocale = config.locale, getPopupContainer = config.getPopupContainer;
    var _useMergedState = useMergedState(selectedRowKeys || defaultSelectedRowKeys || EMPTY_LIST4, {
      value: selectedRowKeys
    }), _useMergedState2 = _slicedToArray(_useMergedState, 2), mergedSelectedKeys = _useMergedState2[0], setMergedSelectedKeys = _useMergedState2[1];
    var preserveRecordsRef = React372.useRef(/* @__PURE__ */ new Map());
    var updatePreserveRecordsCache = (0, import_react105.useCallback)(function(keys2) {
      if (preserveSelectedRowKeys) {
        var newCache = /* @__PURE__ */ new Map();
        keys2.forEach(function(key2) {
          var record = getRecordByKey(key2);
          if (!record && preserveRecordsRef.current.has(key2)) {
            record = preserveRecordsRef.current.get(key2);
          }
          newCache.set(key2, record);
        });
        preserveRecordsRef.current = newCache;
      }
    }, [getRecordByKey, preserveSelectedRowKeys]);
    React372.useEffect(function() {
      updatePreserveRecordsCache(mergedSelectedKeys);
    }, [mergedSelectedKeys]);
    var _useMemo = (0, import_react105.useMemo)(function() {
      return checkStrictly ? {
        keyEntities: null
      } : convertDataToEntities(data, {
        externalGetKey: getRowKey,
        childrenPropName: childrenColumnName
      });
    }, [data, getRowKey, checkStrictly, childrenColumnName]), keyEntities = _useMemo.keyEntities;
    var flattedData = (0, import_react105.useMemo)(function() {
      return flattenData(pageData, childrenColumnName);
    }, [pageData, childrenColumnName]);
    var checkboxPropsMap = (0, import_react105.useMemo)(function() {
      var map = /* @__PURE__ */ new Map();
      flattedData.forEach(function(record, index2) {
        var key2 = getRowKey(record, index2);
        var checkboxProps = (getCheckboxProps ? getCheckboxProps(record) : null) || {};
        map.set(key2, checkboxProps);
        true ? warning_default2(!("checked" in checkboxProps || "defaultChecked" in checkboxProps), "Table", "Do not set `checked` or `defaultChecked` in `getCheckboxProps`. Please use `selectedRowKeys` instead.") : void 0;
      });
      return map;
    }, [flattedData, getRowKey, getCheckboxProps]);
    var isCheckboxDisabled = (0, import_react105.useCallback)(function(r4) {
      var _a;
      return !!((_a = checkboxPropsMap.get(getRowKey(r4))) === null || _a === void 0 ? void 0 : _a.disabled);
    }, [checkboxPropsMap, getRowKey]);
    var _useMemo2 = (0, import_react105.useMemo)(function() {
      if (checkStrictly) {
        return [mergedSelectedKeys || [], []];
      }
      var _conductCheck = conductCheck(mergedSelectedKeys, true, keyEntities, isCheckboxDisabled), checkedKeys = _conductCheck.checkedKeys, halfCheckedKeys = _conductCheck.halfCheckedKeys;
      return [checkedKeys || [], halfCheckedKeys];
    }, [mergedSelectedKeys, checkStrictly, keyEntities, isCheckboxDisabled]), _useMemo3 = _slicedToArray(_useMemo2, 2), derivedSelectedKeys = _useMemo3[0], derivedHalfSelectedKeys = _useMemo3[1];
    var derivedSelectedKeySet = (0, import_react105.useMemo)(function() {
      var keys2 = selectionType === "radio" ? derivedSelectedKeys.slice(0, 1) : derivedSelectedKeys;
      return new Set(keys2);
    }, [derivedSelectedKeys, selectionType]);
    var derivedHalfSelectedKeySet = (0, import_react105.useMemo)(function() {
      return selectionType === "radio" ? /* @__PURE__ */ new Set() : new Set(derivedHalfSelectedKeys);
    }, [derivedHalfSelectedKeys, selectionType]);
    var _useState = (0, import_react105.useState)(null), _useState2 = _slicedToArray(_useState, 2), lastSelectedKey = _useState2[0], setLastSelectedKey = _useState2[1];
    React372.useEffect(function() {
      if (!rowSelection) {
        setMergedSelectedKeys(EMPTY_LIST4);
      }
    }, [!!rowSelection]);
    var setSelectedKeys = (0, import_react105.useCallback)(function(keys2, method4) {
      var availableKeys;
      var records;
      updatePreserveRecordsCache(keys2);
      if (preserveSelectedRowKeys) {
        availableKeys = keys2;
        records = keys2.map(function(key2) {
          return preserveRecordsRef.current.get(key2);
        });
      } else {
        availableKeys = [];
        records = [];
        keys2.forEach(function(key2) {
          var record = getRecordByKey(key2);
          if (record !== void 0) {
            availableKeys.push(key2);
            records.push(record);
          }
        });
      }
      setMergedSelectedKeys(availableKeys);
      onSelectionChange === null || onSelectionChange === void 0 ? void 0 : onSelectionChange(availableKeys, records, {
        type: method4
      });
    }, [setMergedSelectedKeys, getRecordByKey, onSelectionChange, preserveSelectedRowKeys]);
    var triggerSingleSelection = (0, import_react105.useCallback)(function(key2, selected, keys2, event) {
      if (onSelect) {
        var rows = keys2.map(function(k2) {
          return getRecordByKey(k2);
        });
        onSelect(getRecordByKey(key2), selected, rows, event);
      }
      setSelectedKeys(keys2, "single");
    }, [onSelect, getRecordByKey, setSelectedKeys]);
    var mergedSelections = (0, import_react105.useMemo)(function() {
      if (!selections || hideSelectAll) {
        return null;
      }
      var selectionList = selections === true ? [SELECTION_ALL, SELECTION_INVERT, SELECTION_NONE] : selections;
      return selectionList.map(function(selection) {
        if (selection === SELECTION_ALL) {
          return {
            key: "all",
            text: tableLocale.selectionAll,
            onSelect: function onSelect2() {
              setSelectedKeys(data.map(function(record, index2) {
                return getRowKey(record, index2);
              }).filter(function(key2) {
                var checkProps = checkboxPropsMap.get(key2);
                return !(checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled) || derivedSelectedKeySet.has(key2);
              }), "all");
            }
          };
        }
        if (selection === SELECTION_INVERT) {
          return {
            key: "invert",
            text: tableLocale.selectInvert,
            onSelect: function onSelect2() {
              var keySet = new Set(derivedSelectedKeySet);
              pageData.forEach(function(record, index2) {
                var key2 = getRowKey(record, index2);
                var checkProps = checkboxPropsMap.get(key2);
                if (!(checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled)) {
                  if (keySet.has(key2)) {
                    keySet["delete"](key2);
                  } else {
                    keySet.add(key2);
                  }
                }
              });
              var keys2 = Array.from(keySet);
              if (onSelectInvert) {
                true ? warning_default2(false, "Table", "`onSelectInvert` will be removed in future. Please use `onChange` instead.") : void 0;
                onSelectInvert(keys2);
              }
              setSelectedKeys(keys2, "invert");
            }
          };
        }
        if (selection === SELECTION_NONE) {
          return {
            key: "none",
            text: tableLocale.selectNone,
            onSelect: function onSelect2() {
              onSelectNone === null || onSelectNone === void 0 ? void 0 : onSelectNone();
              setSelectedKeys(Array.from(derivedSelectedKeySet).filter(function(key2) {
                var checkProps = checkboxPropsMap.get(key2);
                return checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled;
              }), "none");
            }
          };
        }
        return selection;
      }).map(function(selection) {
        return _extends(_extends({}, selection), {
          onSelect: function onSelect2() {
            var _a2;
            var _a;
            for (var _len = arguments.length, rest = new Array(_len), _key = 0; _key < _len; _key++) {
              rest[_key] = arguments[_key];
            }
            (_a = selection.onSelect) === null || _a === void 0 ? void 0 : (_a2 = _a).call.apply(_a2, [selection].concat(rest));
            setLastSelectedKey(null);
          }
        });
      });
    }, [selections, derivedSelectedKeySet, pageData, getRowKey, onSelectInvert, setSelectedKeys]);
    var transformColumns = (0, import_react105.useCallback)(function(columns4) {
      var _a;
      if (!rowSelection) {
        true ? warning_default2(!columns4.includes(SELECTION_COLUMN), "Table", "`rowSelection` is not config but `SELECTION_COLUMN` exists in the `columns`.") : void 0;
        return columns4.filter(function(col) {
          return col !== SELECTION_COLUMN;
        });
      }
      var cloneColumns = _toConsumableArray(columns4);
      var keySet = new Set(derivedSelectedKeySet);
      var recordKeys = flattedData.map(getRowKey).filter(function(key2) {
        return !checkboxPropsMap.get(key2).disabled;
      });
      var checkedCurrentAll = recordKeys.every(function(key2) {
        return keySet.has(key2);
      });
      var checkedCurrentSome = recordKeys.some(function(key2) {
        return keySet.has(key2);
      });
      var onSelectAllChange = function onSelectAllChange2() {
        var changeKeys = [];
        if (checkedCurrentAll) {
          recordKeys.forEach(function(key2) {
            keySet["delete"](key2);
            changeKeys.push(key2);
          });
        } else {
          recordKeys.forEach(function(key2) {
            if (!keySet.has(key2)) {
              keySet.add(key2);
              changeKeys.push(key2);
            }
          });
        }
        var keys2 = Array.from(keySet);
        onSelectAll === null || onSelectAll === void 0 ? void 0 : onSelectAll(!checkedCurrentAll, keys2.map(function(k2) {
          return getRecordByKey(k2);
        }), changeKeys.map(function(k2) {
          return getRecordByKey(k2);
        }));
        setSelectedKeys(keys2, "all");
        setLastSelectedKey(null);
      };
      var title;
      if (selectionType !== "radio") {
        var customizeSelections;
        if (mergedSelections) {
          var menu = {
            getPopupContainer,
            items: mergedSelections.map(function(selection, index2) {
              var key2 = selection.key, text = selection.text, onSelectionClick = selection.onSelect;
              return {
                key: key2 || index2,
                onClick: function onClick() {
                  onSelectionClick === null || onSelectionClick === void 0 ? void 0 : onSelectionClick(recordKeys);
                },
                label: text
              };
            })
          };
          customizeSelections = /* @__PURE__ */ React372.createElement("div", {
            className: "".concat(prefixCls, "-selection-extra")
          }, /* @__PURE__ */ React372.createElement(dropdown_default2, {
            menu,
            getPopupContainer
          }, /* @__PURE__ */ React372.createElement("span", null, /* @__PURE__ */ React372.createElement(DownOutlined_default2, null))));
        }
        var allDisabledData = flattedData.map(function(record, index2) {
          var key2 = getRowKey(record, index2);
          var checkboxProps = checkboxPropsMap.get(key2) || {};
          return _extends({
            checked: keySet.has(key2)
          }, checkboxProps);
        }).filter(function(_ref2) {
          var disabled = _ref2.disabled;
          return disabled;
        });
        var allDisabled = !!allDisabledData.length && allDisabledData.length === flattedData.length;
        var allDisabledAndChecked = allDisabled && allDisabledData.every(function(_ref3) {
          var checked = _ref3.checked;
          return checked;
        });
        var allDisabledSomeChecked = allDisabled && allDisabledData.some(function(_ref4) {
          var checked = _ref4.checked;
          return checked;
        });
        title = !hideSelectAll && /* @__PURE__ */ React372.createElement("div", {
          className: "".concat(prefixCls, "-selection")
        }, /* @__PURE__ */ React372.createElement(checkbox_default, {
          checked: !allDisabled ? !!flattedData.length && checkedCurrentAll : allDisabledAndChecked,
          indeterminate: !allDisabled ? !checkedCurrentAll && checkedCurrentSome : !allDisabledAndChecked && allDisabledSomeChecked,
          onChange: onSelectAllChange,
          disabled: flattedData.length === 0 || allDisabled,
          "aria-label": customizeSelections ? "Custom selection" : "Select all",
          skipGroup: true
        }), customizeSelections);
      }
      var renderCell;
      if (selectionType === "radio") {
        renderCell = function renderCell2(_24, record, index2) {
          var key2 = getRowKey(record, index2);
          var checked = keySet.has(key2);
          return {
            node: /* @__PURE__ */ React372.createElement(radio_default2, _extends({}, checkboxPropsMap.get(key2), {
              checked,
              onClick: function onClick(e3) {
                return e3.stopPropagation();
              },
              onChange: function onChange(event) {
                if (!keySet.has(key2)) {
                  triggerSingleSelection(key2, true, [key2], event.nativeEvent);
                }
              }
            })),
            checked
          };
        };
      } else {
        renderCell = function renderCell2(_24, record, index2) {
          var _a2;
          var key2 = getRowKey(record, index2);
          var checked = keySet.has(key2);
          var indeterminate = derivedHalfSelectedKeySet.has(key2);
          var checkboxProps = checkboxPropsMap.get(key2);
          var mergedIndeterminate;
          if (expandType === "nest") {
            mergedIndeterminate = indeterminate;
            true ? warning_default2(typeof (checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.indeterminate) !== "boolean", "Table", "set `indeterminate` using `rowSelection.getCheckboxProps` is not allowed with tree structured dataSource.") : void 0;
          } else {
            mergedIndeterminate = (_a2 = checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.indeterminate) !== null && _a2 !== void 0 ? _a2 : indeterminate;
          }
          return {
            node: /* @__PURE__ */ React372.createElement(checkbox_default, _extends({}, checkboxProps, {
              indeterminate: mergedIndeterminate,
              checked,
              skipGroup: true,
              onClick: function onClick(e3) {
                return e3.stopPropagation();
              },
              onChange: function onChange(_ref5) {
                var nativeEvent = _ref5.nativeEvent;
                var shiftKey = nativeEvent.shiftKey;
                var startIndex = -1;
                var endIndex = -1;
                if (shiftKey && checkStrictly) {
                  var pointKeys = /* @__PURE__ */ new Set([lastSelectedKey, key2]);
                  recordKeys.some(function(recordKey, recordIndex) {
                    if (pointKeys.has(recordKey)) {
                      if (startIndex === -1) {
                        startIndex = recordIndex;
                      } else {
                        endIndex = recordIndex;
                        return true;
                      }
                    }
                    return false;
                  });
                }
                if (endIndex !== -1 && startIndex !== endIndex && checkStrictly) {
                  var rangeKeys = recordKeys.slice(startIndex, endIndex + 1);
                  var changedKeys = [];
                  if (checked) {
                    rangeKeys.forEach(function(recordKey) {
                      if (keySet.has(recordKey)) {
                        changedKeys.push(recordKey);
                        keySet["delete"](recordKey);
                      }
                    });
                  } else {
                    rangeKeys.forEach(function(recordKey) {
                      if (!keySet.has(recordKey)) {
                        changedKeys.push(recordKey);
                        keySet.add(recordKey);
                      }
                    });
                  }
                  var keys2 = Array.from(keySet);
                  onSelectMultiple === null || onSelectMultiple === void 0 ? void 0 : onSelectMultiple(!checked, keys2.map(function(recordKey) {
                    return getRecordByKey(recordKey);
                  }), changedKeys.map(function(recordKey) {
                    return getRecordByKey(recordKey);
                  }));
                  setSelectedKeys(keys2, "multiple");
                } else {
                  var originCheckedKeys = derivedSelectedKeys;
                  if (checkStrictly) {
                    var checkedKeys = checked ? arrDel(originCheckedKeys, key2) : arrAdd(originCheckedKeys, key2);
                    triggerSingleSelection(key2, !checked, checkedKeys, nativeEvent);
                  } else {
                    var result2 = conductCheck([].concat(_toConsumableArray(originCheckedKeys), [key2]), true, keyEntities, isCheckboxDisabled);
                    var _checkedKeys = result2.checkedKeys, halfCheckedKeys = result2.halfCheckedKeys;
                    var nextCheckedKeys = _checkedKeys;
                    if (checked) {
                      var tempKeySet = new Set(_checkedKeys);
                      tempKeySet["delete"](key2);
                      nextCheckedKeys = conductCheck(Array.from(tempKeySet), {
                        checked: false,
                        halfCheckedKeys
                      }, keyEntities, isCheckboxDisabled).checkedKeys;
                    }
                    triggerSingleSelection(key2, !checked, nextCheckedKeys, nativeEvent);
                  }
                }
                if (checked) {
                  setLastSelectedKey(null);
                } else {
                  setLastSelectedKey(key2);
                }
              }
            })),
            checked
          };
        };
      }
      var renderSelectionCell = function renderSelectionCell2(_24, record, index2) {
        var _renderCell = renderCell(_24, record, index2), node = _renderCell.node, checked = _renderCell.checked;
        if (customizeRenderCell) {
          return customizeRenderCell(checked, record, index2, node);
        }
        return node;
      };
      if (!cloneColumns.includes(SELECTION_COLUMN)) {
        if (cloneColumns.findIndex(function(col) {
          var _a2;
          return ((_a2 = col[INTERNAL_COL_DEFINE]) === null || _a2 === void 0 ? void 0 : _a2.columnType) === "EXPAND_COLUMN";
        }) === 0) {
          var _cloneColumns = cloneColumns, _cloneColumns2 = _toArray(_cloneColumns), expandColumn = _cloneColumns2[0], restColumns = _cloneColumns2.slice(1);
          cloneColumns = [expandColumn, SELECTION_COLUMN].concat(_toConsumableArray(restColumns));
        } else {
          cloneColumns = [SELECTION_COLUMN].concat(_toConsumableArray(cloneColumns));
        }
      }
      var selectionColumnIndex = cloneColumns.indexOf(SELECTION_COLUMN);
      true ? warning_default2(cloneColumns.filter(function(col) {
        return col === SELECTION_COLUMN;
      }).length <= 1, "Table", "Multiple `SELECTION_COLUMN` exist in `columns`.") : void 0;
      cloneColumns = cloneColumns.filter(function(column, index2) {
        return column !== SELECTION_COLUMN || index2 === selectionColumnIndex;
      });
      var prevCol = cloneColumns[selectionColumnIndex - 1];
      var nextCol = cloneColumns[selectionColumnIndex + 1];
      var mergedFixed = fixed;
      if (mergedFixed === void 0) {
        if ((nextCol === null || nextCol === void 0 ? void 0 : nextCol.fixed) !== void 0) {
          mergedFixed = nextCol.fixed;
        } else if ((prevCol === null || prevCol === void 0 ? void 0 : prevCol.fixed) !== void 0) {
          mergedFixed = prevCol.fixed;
        }
      }
      if (mergedFixed && prevCol && ((_a = prevCol[INTERNAL_COL_DEFINE]) === null || _a === void 0 ? void 0 : _a.columnType) === "EXPAND_COLUMN" && prevCol.fixed === void 0) {
        prevCol.fixed = mergedFixed;
      }
      var selectionColumn = _defineProperty({
        fixed: mergedFixed,
        width: selectionColWidth,
        className: "".concat(prefixCls, "-selection-column"),
        title: rowSelection.columnTitle || title,
        render: renderSelectionCell
      }, INTERNAL_COL_DEFINE, {
        className: "".concat(prefixCls, "-selection-col")
      });
      return cloneColumns.map(function(col) {
        return col === SELECTION_COLUMN ? selectionColumn : col;
      });
    }, [getRowKey, flattedData, rowSelection, derivedSelectedKeys, derivedSelectedKeySet, derivedHalfSelectedKeySet, selectionColWidth, mergedSelections, expandType, lastSelectedKey, checkboxPropsMap, onSelectMultiple, triggerSingleSelection, isCheckboxDisabled]);
    return [transformColumns, derivedSelectedKeySet];
  }

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/CaretDownOutlined.js
  var React373 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/CaretDownOutlined.js
  var CaretDownOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "0 0 1024 1024", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M840.4 300H183.6c-19.7 0-30.7 20.8-18.5 35l328.4 380.8c9.4 10.9 27.5 10.9 37 0L858.9 335c12.2-14.2 1.2-35-18.5-35z" } }] }, "name": "caret-down", "theme": "outlined" };
  var CaretDownOutlined_default = CaretDownOutlined;

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/CaretDownOutlined.js
  var CaretDownOutlined2 = function CaretDownOutlined3(props, ref) {
    return /* @__PURE__ */ React373.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: CaretDownOutlined_default
    }));
  };
  CaretDownOutlined2.displayName = "CaretDownOutlined";
  var CaretDownOutlined_default2 = /* @__PURE__ */ React373.forwardRef(CaretDownOutlined2);

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/CaretUpOutlined.js
  var React374 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/CaretUpOutlined.js
  var CaretUpOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "0 0 1024 1024", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M858.9 689L530.5 308.2c-9.4-10.9-27.5-10.9-37 0L165.1 689c-12.2 14.2-1.2 35 18.5 35h656.8c19.7 0 30.7-20.8 18.5-35z" } }] }, "name": "caret-up", "theme": "outlined" };
  var CaretUpOutlined_default = CaretUpOutlined;

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/CaretUpOutlined.js
  var CaretUpOutlined2 = function CaretUpOutlined3(props, ref) {
    return /* @__PURE__ */ React374.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: CaretUpOutlined_default
    }));
  };
  CaretUpOutlined2.displayName = "CaretUpOutlined";
  var CaretUpOutlined_default2 = /* @__PURE__ */ React374.forwardRef(CaretUpOutlined2);

  // node_modules/antd/es/table/hooks/useSorter.js
  var import_classnames141 = __toESM(require_classnames());
  var React375 = __toESM(require_react());
  var ASCEND = "ascend";
  var DESCEND = "descend";
  function getMultiplePriority(column) {
    if (_typeof(column.sorter) === "object" && typeof column.sorter.multiple === "number") {
      return column.sorter.multiple;
    }
    return false;
  }
  function getSortFunction(sorter) {
    if (typeof sorter === "function") {
      return sorter;
    }
    if (sorter && _typeof(sorter) === "object" && sorter.compare) {
      return sorter.compare;
    }
    return false;
  }
  function nextSortDirection(sortDirections, current) {
    if (!current) {
      return sortDirections[0];
    }
    return sortDirections[sortDirections.indexOf(current) + 1];
  }
  function collectSortStates(columns4, init2, pos) {
    var sortStates = [];
    function pushState(column, columnPos) {
      sortStates.push({
        column,
        key: getColumnKey(column, columnPos),
        multiplePriority: getMultiplePriority(column),
        sortOrder: column.sortOrder
      });
    }
    (columns4 || []).forEach(function(column, index2) {
      var columnPos = getColumnPos(index2, pos);
      if (column.children) {
        if ("sortOrder" in column) {
          pushState(column, columnPos);
        }
        sortStates = [].concat(_toConsumableArray(sortStates), _toConsumableArray(collectSortStates(column.children, init2, columnPos)));
      } else if (column.sorter) {
        if ("sortOrder" in column) {
          pushState(column, columnPos);
        } else if (init2 && column.defaultSortOrder) {
          sortStates.push({
            column,
            key: getColumnKey(column, columnPos),
            multiplePriority: getMultiplePriority(column),
            sortOrder: column.defaultSortOrder
          });
        }
      }
    });
    return sortStates;
  }
  function injectSorter(prefixCls, columns4, sorterStates, triggerSorter, defaultSortDirections, tableLocale, tableShowSorterTooltip, pos) {
    return (columns4 || []).map(function(column, index2) {
      var columnPos = getColumnPos(index2, pos);
      var newColumn = column;
      if (newColumn.sorter) {
        var sortDirections = newColumn.sortDirections || defaultSortDirections;
        var showSorterTooltip = newColumn.showSorterTooltip === void 0 ? tableShowSorterTooltip : newColumn.showSorterTooltip;
        var columnKey = getColumnKey(newColumn, columnPos);
        var sorterState = sorterStates.find(function(_ref) {
          var key2 = _ref.key;
          return key2 === columnKey;
        });
        var sorterOrder = sorterState ? sorterState.sortOrder : null;
        var nextSortOrder = nextSortDirection(sortDirections, sorterOrder);
        var upNode = sortDirections.includes(ASCEND) && /* @__PURE__ */ React375.createElement(CaretUpOutlined_default2, {
          className: (0, import_classnames141.default)("".concat(prefixCls, "-column-sorter-up"), {
            active: sorterOrder === ASCEND
          }),
          role: "presentation"
        });
        var downNode = sortDirections.includes(DESCEND) && /* @__PURE__ */ React375.createElement(CaretDownOutlined_default2, {
          className: (0, import_classnames141.default)("".concat(prefixCls, "-column-sorter-down"), {
            active: sorterOrder === DESCEND
          }),
          role: "presentation"
        });
        var _ref2 = tableLocale || {}, cancelSort = _ref2.cancelSort, triggerAsc = _ref2.triggerAsc, triggerDesc = _ref2.triggerDesc;
        var sortTip = cancelSort;
        if (nextSortOrder === DESCEND) {
          sortTip = triggerDesc;
        } else if (nextSortOrder === ASCEND) {
          sortTip = triggerAsc;
        }
        var tooltipProps = _typeof(showSorterTooltip) === "object" ? showSorterTooltip : {
          title: sortTip
        };
        newColumn = _extends(_extends({}, newColumn), {
          className: (0, import_classnames141.default)(newColumn.className, _defineProperty({}, "".concat(prefixCls, "-column-sort"), sorterOrder)),
          title: function title(renderProps) {
            var renderSortTitle = /* @__PURE__ */ React375.createElement("div", {
              className: "".concat(prefixCls, "-column-sorters")
            }, /* @__PURE__ */ React375.createElement("span", {
              className: "".concat(prefixCls, "-column-title")
            }, renderColumnTitle(column.title, renderProps)), /* @__PURE__ */ React375.createElement("span", {
              className: (0, import_classnames141.default)("".concat(prefixCls, "-column-sorter"), _defineProperty({}, "".concat(prefixCls, "-column-sorter-full"), !!(upNode && downNode)))
            }, /* @__PURE__ */ React375.createElement("span", {
              className: "".concat(prefixCls, "-column-sorter-inner")
            }, upNode, downNode)));
            return showSorterTooltip ? /* @__PURE__ */ React375.createElement(tooltip_default, _extends({}, tooltipProps), renderSortTitle) : renderSortTitle;
          },
          onHeaderCell: function onHeaderCell(col) {
            var cell = column.onHeaderCell && column.onHeaderCell(col) || {};
            var originOnClick = cell.onClick;
            var originOKeyDown = cell.onKeyDown;
            cell.onClick = function(event) {
              triggerSorter({
                column,
                key: columnKey,
                sortOrder: nextSortOrder,
                multiplePriority: getMultiplePriority(column)
              });
              originOnClick === null || originOnClick === void 0 ? void 0 : originOnClick(event);
            };
            cell.onKeyDown = function(event) {
              if (event.keyCode === KeyCode_default.ENTER) {
                triggerSorter({
                  column,
                  key: columnKey,
                  sortOrder: nextSortOrder,
                  multiplePriority: getMultiplePriority(column)
                });
                originOKeyDown === null || originOKeyDown === void 0 ? void 0 : originOKeyDown(event);
              }
            };
            var renderTitle = safeColumnTitle(column.title, {});
            var displayTitle = renderTitle === null || renderTitle === void 0 ? void 0 : renderTitle.toString();
            if (sorterOrder) {
              cell["aria-sort"] = sorterOrder === "ascend" ? "ascending" : "descending";
            } else {
              cell["aria-label"] = displayTitle || "";
            }
            cell.className = (0, import_classnames141.default)(cell.className, "".concat(prefixCls, "-column-has-sorters"));
            cell.tabIndex = 0;
            if (column.ellipsis) {
              cell.title = (renderTitle !== null && renderTitle !== void 0 ? renderTitle : "").toString();
            }
            return cell;
          }
        });
      }
      if ("children" in newColumn) {
        newColumn = _extends(_extends({}, newColumn), {
          children: injectSorter(prefixCls, newColumn.children, sorterStates, triggerSorter, defaultSortDirections, tableLocale, tableShowSorterTooltip, columnPos)
        });
      }
      return newColumn;
    });
  }
  function stateToInfo(sorterStates) {
    var column = sorterStates.column, sortOrder = sorterStates.sortOrder;
    return {
      column,
      order: sortOrder,
      field: column.dataIndex,
      columnKey: column.key
    };
  }
  function generateSorterInfo(sorterStates) {
    var list = sorterStates.filter(function(_ref3) {
      var sortOrder = _ref3.sortOrder;
      return sortOrder;
    }).map(stateToInfo);
    if (list.length === 0 && sorterStates.length) {
      return _extends(_extends({}, stateToInfo(sorterStates[sorterStates.length - 1])), {
        column: void 0
      });
    }
    if (list.length <= 1) {
      return list[0] || {};
    }
    return list;
  }
  function getSortData(data, sortStates, childrenColumnName) {
    var innerSorterStates = sortStates.slice().sort(function(a2, b2) {
      return b2.multiplePriority - a2.multiplePriority;
    });
    var cloneData = data.slice();
    var runningSorters = innerSorterStates.filter(function(_ref4) {
      var sorter = _ref4.column.sorter, sortOrder = _ref4.sortOrder;
      return getSortFunction(sorter) && sortOrder;
    });
    if (!runningSorters.length) {
      return cloneData;
    }
    return cloneData.sort(function(record1, record2) {
      for (var i3 = 0; i3 < runningSorters.length; i3 += 1) {
        var sorterState = runningSorters[i3];
        var sorter = sorterState.column.sorter, sortOrder = sorterState.sortOrder;
        var compareFn = getSortFunction(sorter);
        if (compareFn && sortOrder) {
          var compareResult = compareFn(record1, record2, sortOrder);
          if (compareResult !== 0) {
            return sortOrder === ASCEND ? compareResult : -compareResult;
          }
        }
      }
      return 0;
    }).map(function(record) {
      var subRecords = record[childrenColumnName];
      if (subRecords) {
        return _extends(_extends({}, record), _defineProperty({}, childrenColumnName, getSortData(subRecords, sortStates, childrenColumnName)));
      }
      return record;
    });
  }
  function useFilterSorter(_ref5) {
    var prefixCls = _ref5.prefixCls, mergedColumns = _ref5.mergedColumns, onSorterChange = _ref5.onSorterChange, sortDirections = _ref5.sortDirections, tableLocale = _ref5.tableLocale, showSorterTooltip = _ref5.showSorterTooltip;
    var _React$useState = React375.useState(collectSortStates(mergedColumns, true)), _React$useState2 = _slicedToArray(_React$useState, 2), sortStates = _React$useState2[0], setSortStates = _React$useState2[1];
    var mergedSorterStates = React375.useMemo(function() {
      var validate = true;
      var collectedStates = collectSortStates(mergedColumns, false);
      if (!collectedStates.length) {
        return sortStates;
      }
      var validateStates = [];
      function patchStates(state) {
        if (validate) {
          validateStates.push(state);
        } else {
          validateStates.push(_extends(_extends({}, state), {
            sortOrder: null
          }));
        }
      }
      var multipleMode = null;
      collectedStates.forEach(function(state) {
        if (multipleMode === null) {
          patchStates(state);
          if (state.sortOrder) {
            if (state.multiplePriority === false) {
              validate = false;
            } else {
              multipleMode = true;
            }
          }
        } else if (multipleMode && state.multiplePriority !== false) {
          patchStates(state);
        } else {
          validate = false;
          patchStates(state);
        }
      });
      return validateStates;
    }, [mergedColumns, sortStates]);
    var columnTitleSorterProps = React375.useMemo(function() {
      var sortColumns = mergedSorterStates.map(function(_ref6) {
        var column = _ref6.column, sortOrder = _ref6.sortOrder;
        return {
          column,
          order: sortOrder
        };
      });
      return {
        sortColumns,
        // Legacy
        sortColumn: sortColumns[0] && sortColumns[0].column,
        sortOrder: sortColumns[0] && sortColumns[0].order
      };
    }, [mergedSorterStates]);
    function triggerSorter(sortState) {
      var newSorterStates;
      if (sortState.multiplePriority === false || !mergedSorterStates.length || mergedSorterStates[0].multiplePriority === false) {
        newSorterStates = [sortState];
      } else {
        newSorterStates = [].concat(_toConsumableArray(mergedSorterStates.filter(function(_ref7) {
          var key2 = _ref7.key;
          return key2 !== sortState.key;
        })), [sortState]);
      }
      setSortStates(newSorterStates);
      onSorterChange(generateSorterInfo(newSorterStates), newSorterStates);
    }
    var transformColumns = function transformColumns2(innerColumns) {
      return injectSorter(prefixCls, innerColumns, mergedSorterStates, triggerSorter, sortDirections, tableLocale, showSorterTooltip);
    };
    var getSorters = function getSorters2() {
      return generateSorterInfo(mergedSorterStates);
    };
    return [transformColumns, mergedSorterStates, columnTitleSorterProps, getSorters];
  }

  // node_modules/antd/es/table/hooks/useTitleColumns.js
  var React376 = __toESM(require_react());
  function fillTitle(columns4, columnTitleProps) {
    return columns4.map(function(column) {
      var cloneColumn = _extends({}, column);
      cloneColumn.title = renderColumnTitle(column.title, columnTitleProps);
      if ("children" in cloneColumn) {
        cloneColumn.children = fillTitle(cloneColumn.children, columnTitleProps);
      }
      return cloneColumn;
    });
  }
  function useTitleColumns(columnTitleProps) {
    var filledColumns = React376.useCallback(function(columns4) {
      return fillTitle(columns4, columnTitleProps);
    }, [columnTitleProps]);
    return [filledColumns];
  }

  // node_modules/antd/es/table/Table.js
  var EMPTY_LIST5 = [];
  function InternalTable(props, ref) {
    var _classNames3;
    var customizePrefixCls = props.prefixCls, className = props.className, style3 = props.style, customizeSize = props.size, bordered = props.bordered, customizeDropdownPrefixCls = props.dropdownPrefixCls, dataSource = props.dataSource, pagination = props.pagination, rowSelection = props.rowSelection, _props$rowKey = props.rowKey, rowKey = _props$rowKey === void 0 ? "key" : _props$rowKey, rowClassName = props.rowClassName, columns4 = props.columns, children = props.children, legacyChildrenColumnName = props.childrenColumnName, onChange = props.onChange, getPopupContainer = props.getPopupContainer, loading = props.loading, expandIcon = props.expandIcon, expandable = props.expandable, expandedRowRender = props.expandedRowRender, expandIconColumnIndex = props.expandIconColumnIndex, indentSize = props.indentSize, scroll = props.scroll, sortDirections = props.sortDirections, locale4 = props.locale, _props$showSorterTool = props.showSorterTooltip, showSorterTooltip = _props$showSorterTool === void 0 ? true : _props$showSorterTool;
    true ? warning_default2(!(typeof rowKey === "function" && rowKey.length > 1), "Table", "`index` parameter of `rowKey` function is deprecated. There is no guarantee that it will work as expected.") : void 0;
    [["filterDropdownVisible", "filterDropdownOpen"], ["onFilterDropdownVisibleChange", "onFilterDropdownOpenChange"]].forEach(function(_ref) {
      var _ref2 = _slicedToArray(_ref, 2), deprecatedName = _ref2[0], newName = _ref2[1];
      true ? warning_default2(!(deprecatedName in props), "Table", "`".concat(deprecatedName, "` is deprecated which will be removed in next major version.Please use `").concat(newName, "` instead. ")) : void 0;
    });
    var baseColumns = React377.useMemo(function() {
      return columns4 || convertChildrenToColumns(children);
    }, [columns4, children]);
    var needResponsive = React377.useMemo(function() {
      return baseColumns.some(function(col) {
        return col.responsive;
      });
    }, [baseColumns]);
    var screens2 = useBreakpoint_default(needResponsive);
    var mergedColumns = React377.useMemo(function() {
      var matched = new Set(Object.keys(screens2).filter(function(m2) {
        return screens2[m2];
      }));
      return baseColumns.filter(function(c2) {
        return !c2.responsive || c2.responsive.some(function(r4) {
          return matched.has(r4);
        });
      });
    }, [baseColumns, screens2]);
    var tableProps = omit(props, ["className", "style", "columns"]);
    var size = React377.useContext(SizeContext_default);
    var _React$useContext = React377.useContext(ConfigContext), _React$useContext$loc = _React$useContext.locale, contextLocale = _React$useContext$loc === void 0 ? en_US_default6 : _React$useContext$loc, renderEmpty = _React$useContext.renderEmpty, direction = _React$useContext.direction;
    var mergedSize = customizeSize || size;
    var tableLocale = _extends(_extends({}, contextLocale.Table), locale4);
    var rawData = dataSource || EMPTY_LIST5;
    var _React$useContext2 = React377.useContext(ConfigContext), getPrefixCls = _React$useContext2.getPrefixCls;
    var prefixCls = getPrefixCls("table", customizePrefixCls);
    var dropdownPrefixCls = getPrefixCls("dropdown", customizeDropdownPrefixCls);
    var mergedExpandable = _extends({
      childrenColumnName: legacyChildrenColumnName,
      expandIconColumnIndex
    }, expandable);
    var _mergedExpandable$chi = mergedExpandable.childrenColumnName, childrenColumnName = _mergedExpandable$chi === void 0 ? "children" : _mergedExpandable$chi;
    var expandType = React377.useMemo(function() {
      if (rawData.some(function(item) {
        return item === null || item === void 0 ? void 0 : item[childrenColumnName];
      })) {
        return "nest";
      }
      if (expandedRowRender || expandable && expandable.expandedRowRender) {
        return "row";
      }
      return null;
    }, [rawData]);
    var internalRefs = {
      body: React377.useRef()
    };
    var getRowKey = React377.useMemo(function() {
      if (typeof rowKey === "function") {
        return rowKey;
      }
      return function(record) {
        return record === null || record === void 0 ? void 0 : record[rowKey];
      };
    }, [rowKey]);
    var _useLazyKVMap = useLazyKVMap(rawData, childrenColumnName, getRowKey), _useLazyKVMap2 = _slicedToArray(_useLazyKVMap, 1), getRecordByKey = _useLazyKVMap2[0];
    var changeEventInfo = {};
    var triggerOnChange = function triggerOnChange2(info, action) {
      var reset = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      var changeInfo = _extends(_extends({}, changeEventInfo), info);
      if (reset) {
        changeEventInfo.resetPagination();
        if (changeInfo.pagination.current) {
          changeInfo.pagination.current = 1;
        }
        if (pagination && pagination.onChange) {
          pagination.onChange(1, changeInfo.pagination.pageSize);
        }
      }
      if (scroll && scroll.scrollToFirstRowOnChange !== false && internalRefs.body.current) {
        scrollTo(0, {
          getContainer: function getContainer3() {
            return internalRefs.body.current;
          }
        });
      }
      onChange === null || onChange === void 0 ? void 0 : onChange(changeInfo.pagination, changeInfo.filters, changeInfo.sorter, {
        currentDataSource: getFilterData(getSortData(rawData, changeInfo.sorterStates, childrenColumnName), changeInfo.filterStates),
        action
      });
    };
    var onSorterChange = function onSorterChange2(sorter, sorterStates) {
      triggerOnChange({
        sorter,
        sorterStates
      }, "sort", false);
    };
    var _useSorter = useFilterSorter({
      prefixCls,
      mergedColumns,
      onSorterChange,
      sortDirections: sortDirections || ["ascend", "descend"],
      tableLocale,
      showSorterTooltip
    }), _useSorter2 = _slicedToArray(_useSorter, 4), transformSorterColumns = _useSorter2[0], sortStates = _useSorter2[1], sorterTitleProps = _useSorter2[2], getSorters = _useSorter2[3];
    var sortedData = React377.useMemo(function() {
      return getSortData(rawData, sortStates, childrenColumnName);
    }, [rawData, sortStates]);
    changeEventInfo.sorter = getSorters();
    changeEventInfo.sorterStates = sortStates;
    var onFilterChange = function onFilterChange2(filters2, filterStates2) {
      triggerOnChange({
        filters: filters2,
        filterStates: filterStates2
      }, "filter", true);
    };
    var _useFilter = useFilter_default({
      prefixCls,
      locale: tableLocale,
      dropdownPrefixCls,
      mergedColumns,
      onFilterChange,
      getPopupContainer
    }), _useFilter2 = _slicedToArray(_useFilter, 3), transformFilterColumns = _useFilter2[0], filterStates = _useFilter2[1], filters = _useFilter2[2];
    var mergedData = getFilterData(sortedData, filterStates);
    changeEventInfo.filters = filters;
    changeEventInfo.filterStates = filterStates;
    var columnTitleProps = React377.useMemo(function() {
      var mergedFilters = {};
      Object.keys(filters).forEach(function(filterKey) {
        if (filters[filterKey] !== null) {
          mergedFilters[filterKey] = filters[filterKey];
        }
      });
      return _extends(_extends({}, sorterTitleProps), {
        filters: mergedFilters
      });
    }, [sorterTitleProps, filters]);
    var _useTitleColumns = useTitleColumns(columnTitleProps), _useTitleColumns2 = _slicedToArray(_useTitleColumns, 1), transformTitleColumns = _useTitleColumns2[0];
    var onPaginationChange = function onPaginationChange2(current, pageSize) {
      triggerOnChange({
        pagination: _extends(_extends({}, changeEventInfo.pagination), {
          current,
          pageSize
        })
      }, "paginate");
    };
    var _usePagination = usePagination(mergedData.length, pagination, onPaginationChange), _usePagination2 = _slicedToArray(_usePagination, 2), mergedPagination = _usePagination2[0], resetPagination = _usePagination2[1];
    changeEventInfo.pagination = pagination === false ? {} : getPaginationParam(pagination, mergedPagination);
    changeEventInfo.resetPagination = resetPagination;
    var pageData = React377.useMemo(function() {
      if (pagination === false || !mergedPagination.pageSize) {
        return mergedData;
      }
      var _mergedPagination$cur = mergedPagination.current, current = _mergedPagination$cur === void 0 ? 1 : _mergedPagination$cur, total = mergedPagination.total, _mergedPagination$pag = mergedPagination.pageSize, pageSize = _mergedPagination$pag === void 0 ? DEFAULT_PAGE_SIZE : _mergedPagination$pag;
      true ? warning_default2(current > 0, "Table", "`current` should be positive number.") : void 0;
      if (mergedData.length < total) {
        if (mergedData.length > pageSize) {
          true ? warning_default2(false, "Table", "`dataSource` length is less than `pagination.total` but large than `pagination.pageSize`. Please make sure your config correct data with async mode.") : void 0;
          return mergedData.slice((current - 1) * pageSize, current * pageSize);
        }
        return mergedData;
      }
      return mergedData.slice((current - 1) * pageSize, current * pageSize);
    }, [!!pagination, mergedData, mergedPagination && mergedPagination.current, mergedPagination && mergedPagination.pageSize, mergedPagination && mergedPagination.total]);
    var _useSelection = useSelection(rowSelection, {
      prefixCls,
      data: mergedData,
      pageData,
      getRowKey,
      getRecordByKey,
      expandType,
      childrenColumnName,
      locale: tableLocale,
      getPopupContainer
    }), _useSelection2 = _slicedToArray(_useSelection, 2), transformSelectionColumns = _useSelection2[0], selectedKeySet = _useSelection2[1];
    var internalRowClassName = function internalRowClassName2(record, index2, indent) {
      var mergedRowClassName;
      if (typeof rowClassName === "function") {
        mergedRowClassName = (0, import_classnames142.default)(rowClassName(record, index2, indent));
      } else {
        mergedRowClassName = (0, import_classnames142.default)(rowClassName);
      }
      return (0, import_classnames142.default)(_defineProperty({}, "".concat(prefixCls, "-row-selected"), selectedKeySet.has(getRowKey(record, index2))), mergedRowClassName);
    };
    mergedExpandable.__PARENT_RENDER_ICON__ = mergedExpandable.expandIcon;
    mergedExpandable.expandIcon = mergedExpandable.expandIcon || expandIcon || ExpandIcon_default(tableLocale);
    if (expandType === "nest" && mergedExpandable.expandIconColumnIndex === void 0) {
      mergedExpandable.expandIconColumnIndex = rowSelection ? 1 : 0;
    } else if (mergedExpandable.expandIconColumnIndex > 0 && rowSelection) {
      mergedExpandable.expandIconColumnIndex -= 1;
    }
    if (typeof mergedExpandable.indentSize !== "number") {
      mergedExpandable.indentSize = typeof indentSize === "number" ? indentSize : 15;
    }
    var transformColumns = React377.useCallback(function(innerColumns) {
      return transformTitleColumns(transformSelectionColumns(transformFilterColumns(transformSorterColumns(innerColumns))));
    }, [transformSorterColumns, transformFilterColumns, transformSelectionColumns]);
    var topPaginationNode;
    var bottomPaginationNode;
    if (pagination !== false && (mergedPagination === null || mergedPagination === void 0 ? void 0 : mergedPagination.total)) {
      var paginationSize;
      if (mergedPagination.size) {
        paginationSize = mergedPagination.size;
      } else {
        paginationSize = mergedSize === "small" || mergedSize === "middle" ? "small" : void 0;
      }
      var renderPagination = function renderPagination2(position2) {
        return /* @__PURE__ */ React377.createElement(pagination_default, _extends({}, mergedPagination, {
          className: (0, import_classnames142.default)("".concat(prefixCls, "-pagination ").concat(prefixCls, "-pagination-").concat(position2), mergedPagination.className),
          size: paginationSize
        }));
      };
      var defaultPosition = direction === "rtl" ? "left" : "right";
      var position = mergedPagination.position;
      if (position !== null && Array.isArray(position)) {
        var topPos = position.find(function(p2) {
          return p2.includes("top");
        });
        var bottomPos = position.find(function(p2) {
          return p2.includes("bottom");
        });
        var isDisable = position.every(function(p2) {
          return "".concat(p2) === "none";
        });
        if (!topPos && !bottomPos && !isDisable) {
          bottomPaginationNode = renderPagination(defaultPosition);
        }
        if (topPos) {
          topPaginationNode = renderPagination(topPos.toLowerCase().replace("top", ""));
        }
        if (bottomPos) {
          bottomPaginationNode = renderPagination(bottomPos.toLowerCase().replace("bottom", ""));
        }
      } else {
        bottomPaginationNode = renderPagination(defaultPosition);
      }
    }
    var spinProps;
    if (typeof loading === "boolean") {
      spinProps = {
        spinning: loading
      };
    } else if (_typeof(loading) === "object") {
      spinProps = _extends({
        spinning: true
      }, loading);
    }
    var wrapperClassNames = (0, import_classnames142.default)("".concat(prefixCls, "-wrapper"), _defineProperty({}, "".concat(prefixCls, "-wrapper-rtl"), direction === "rtl"), className);
    return /* @__PURE__ */ React377.createElement("div", {
      ref,
      className: wrapperClassNames,
      style: style3
    }, /* @__PURE__ */ React377.createElement(spin_default, _extends({
      spinning: false
    }, spinProps), topPaginationNode, /* @__PURE__ */ React377.createElement(es_default25, _extends({}, tableProps, {
      columns: mergedColumns,
      direction,
      expandable: mergedExpandable,
      prefixCls,
      className: (0, import_classnames142.default)((_classNames3 = {}, _defineProperty(_classNames3, "".concat(prefixCls, "-middle"), mergedSize === "middle"), _defineProperty(_classNames3, "".concat(prefixCls, "-small"), mergedSize === "small"), _defineProperty(_classNames3, "".concat(prefixCls, "-bordered"), bordered), _defineProperty(_classNames3, "".concat(prefixCls, "-empty"), rawData.length === 0), _classNames3)),
      data: pageData,
      rowKey: getRowKey,
      rowClassName: internalRowClassName,
      emptyText: locale4 && locale4.emptyText || (renderEmpty || defaultRenderEmpty_default)("Table"),
      // Internal
      internalHooks: INTERNAL_HOOKS,
      internalRefs,
      transformColumns
    })), bottomPaginationNode));
  }
  var ForwardTable = /* @__PURE__ */ React377.forwardRef(InternalTable);
  var Table2 = ForwardTable;
  Table2.SELECTION_COLUMN = SELECTION_COLUMN;
  Table2.EXPAND_COLUMN = es_default25.EXPAND_COLUMN;
  Table2.SELECTION_ALL = SELECTION_ALL;
  Table2.SELECTION_INVERT = SELECTION_INVERT;
  Table2.SELECTION_NONE = SELECTION_NONE;
  Table2.Column = Column_default2;
  Table2.ColumnGroup = ColumnGroup_default2;
  Table2.Summary = FooterComponents;
  var Table_default2 = Table2;

  // node_modules/antd/es/table/index.js
  var table_default = Table_default2;

  // node_modules/@ant-design/icons-svg/es/asn/DeleteOutlined.js
  var DeleteOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M360 184h-8c4.4 0 8-3.6 8-8v8h304v-8c0 4.4 3.6 8 8 8h-8v72h72v-80c0-35.3-28.7-64-64-64H352c-35.3 0-64 28.7-64 64v80h72v-72zm504 72H160c-17.7 0-32 14.3-32 32v32c0 4.4 3.6 8 8 8h60.4l24.7 523c1.6 34.1 29.8 61 63.9 61h454c34.2 0 62.3-26.8 63.9-61l24.7-523H888c4.4 0 8-3.6 8-8v-32c0-17.7-14.3-32-32-32zM731.3 840H292.7l-24.2-512h487l-24.2 512z" } }] }, "name": "delete", "theme": "outlined" };
  var DeleteOutlined_default = DeleteOutlined;

  // node_modules/antd/es/typography/Link.js
  var React388 = __toESM(require_react());

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/CopyOutlined.js
  var React378 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/CopyOutlined.js
  var CopyOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z" } }] }, "name": "copy", "theme": "outlined" };
  var CopyOutlined_default = CopyOutlined;

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/CopyOutlined.js
  var CopyOutlined2 = function CopyOutlined3(props, ref) {
    return /* @__PURE__ */ React378.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: CopyOutlined_default
    }));
  };
  CopyOutlined2.displayName = "CopyOutlined";
  var CopyOutlined_default2 = /* @__PURE__ */ React378.forwardRef(CopyOutlined2);

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/EditOutlined.js
  var React379 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/EditOutlined.js
  var EditOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M257.7 752c2 0 4-.2 6-.5L431.9 722c2-.4 3.9-1.3 5.3-2.8l423.9-423.9a9.96 9.96 0 000-14.1L694.9 114.9c-1.9-1.9-4.4-2.9-7.1-2.9s-5.2 1-7.1 2.9L256.8 538.8c-1.5 1.5-2.4 3.3-2.8 5.3l-29.5 168.2a33.5 33.5 0 009.4 29.8c6.6 6.4 14.9 9.9 23.8 9.9zm67.4-174.4L687.8 215l73.3 73.3-362.7 362.6-88.9 15.7 15.6-89zM880 836H144c-17.7 0-32 14.3-32 32v36c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-36c0-17.7-14.3-32-32-32z" } }] }, "name": "edit", "theme": "outlined" };
  var EditOutlined_default = EditOutlined;

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/EditOutlined.js
  var EditOutlined2 = function EditOutlined3(props, ref) {
    return /* @__PURE__ */ React379.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: EditOutlined_default
    }));
  };
  EditOutlined2.displayName = "EditOutlined";
  var EditOutlined_default2 = /* @__PURE__ */ React379.forwardRef(EditOutlined2);

  // node_modules/antd/es/typography/Base/index.js
  var import_classnames145 = __toESM(require_classnames());
  var import_copy_to_clipboard = __toESM(require_copy_to_clipboard());
  var React387 = __toESM(require_react());

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/EnterOutlined.js
  var React380 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/EnterOutlined.js
  var EnterOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M864 170h-60c-4.4 0-8 3.6-8 8v518H310v-73c0-6.7-7.8-10.5-13-6.3l-141.9 112a8 8 0 000 12.6l141.9 112c5.3 4.2 13 .4 13-6.3v-75h498c35.3 0 64-28.7 64-64V178c0-4.4-3.6-8-8-8z" } }] }, "name": "enter", "theme": "outlined" };
  var EnterOutlined_default = EnterOutlined;

  // node_modules/antd/node_modules/@ant-design/icons/es/icons/EnterOutlined.js
  var EnterOutlined2 = function EnterOutlined3(props, ref) {
    return /* @__PURE__ */ React380.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
      ref,
      icon: EnterOutlined_default
    }));
  };
  EnterOutlined2.displayName = "EnterOutlined";
  var EnterOutlined_default2 = /* @__PURE__ */ React380.forwardRef(EnterOutlined2);

  // node_modules/antd/es/typography/Editable.js
  var import_classnames143 = __toESM(require_classnames());
  var React381 = __toESM(require_react());
  var Editable = function Editable2(_ref) {
    var prefixCls = _ref.prefixCls, ariaLabel = _ref["aria-label"], className = _ref.className, style3 = _ref.style, direction = _ref.direction, maxLength = _ref.maxLength, _ref$autoSize = _ref.autoSize, autoSize = _ref$autoSize === void 0 ? true : _ref$autoSize, value = _ref.value, onSave = _ref.onSave, onCancel = _ref.onCancel, onEnd = _ref.onEnd, component = _ref.component, _ref$enterIcon = _ref.enterIcon, enterIcon = _ref$enterIcon === void 0 ? /* @__PURE__ */ React381.createElement(EnterOutlined_default2, null) : _ref$enterIcon;
    var ref = React381.useRef(null);
    var inComposition = React381.useRef(false);
    var lastKeyCode = React381.useRef();
    var _React$useState = React381.useState(value), _React$useState2 = _slicedToArray(_React$useState, 2), current = _React$useState2[0], setCurrent2 = _React$useState2[1];
    React381.useEffect(function() {
      setCurrent2(value);
    }, [value]);
    React381.useEffect(function() {
      if (ref.current && ref.current.resizableTextArea) {
        var textArea = ref.current.resizableTextArea.textArea;
        textArea.focus();
        var length = textArea.value.length;
        textArea.setSelectionRange(length, length);
      }
    }, []);
    var onChange = function onChange2(_ref2) {
      var target = _ref2.target;
      setCurrent2(target.value.replace(/[\n\r]/g, ""));
    };
    var onCompositionStart = function onCompositionStart2() {
      inComposition.current = true;
    };
    var onCompositionEnd = function onCompositionEnd2() {
      inComposition.current = false;
    };
    var onKeyDown3 = function onKeyDown4(_ref3) {
      var keyCode = _ref3.keyCode;
      if (inComposition.current)
        return;
      lastKeyCode.current = keyCode;
    };
    var confirmChange = function confirmChange2() {
      onSave(current.trim());
    };
    var onKeyUp = function onKeyUp2(_ref4) {
      var keyCode = _ref4.keyCode, ctrlKey = _ref4.ctrlKey, altKey = _ref4.altKey, metaKey = _ref4.metaKey, shiftKey = _ref4.shiftKey;
      if (lastKeyCode.current === keyCode && !inComposition.current && !ctrlKey && !altKey && !metaKey && !shiftKey) {
        if (keyCode === KeyCode_default.ENTER) {
          confirmChange();
          onEnd === null || onEnd === void 0 ? void 0 : onEnd();
        } else if (keyCode === KeyCode_default.ESC) {
          onCancel();
        }
      }
    };
    var onBlur = function onBlur2() {
      confirmChange();
    };
    var textClassName = component ? "".concat(prefixCls, "-").concat(component) : "";
    var textAreaClassName = (0, import_classnames143.default)(prefixCls, "".concat(prefixCls, "-edit-content"), _defineProperty({}, "".concat(prefixCls, "-rtl"), direction === "rtl"), className, textClassName);
    return /* @__PURE__ */ React381.createElement("div", {
      className: textAreaClassName,
      style: style3
    }, /* @__PURE__ */ React381.createElement(TextArea_default, {
      ref,
      maxLength,
      value: current,
      onChange,
      onKeyDown: onKeyDown3,
      onKeyUp,
      onCompositionStart,
      onCompositionEnd,
      onBlur,
      "aria-label": ariaLabel,
      rows: 1,
      autoSize
    }), enterIcon !== null ? cloneElement4(enterIcon, {
      className: "".concat(prefixCls, "-edit-content-confirm")
    }) : null);
  };
  var Editable_default = Editable;

  // node_modules/antd/es/typography/hooks/useMergedConfig.js
  var React382 = __toESM(require_react());
  function useMergedConfig(propConfig, templateConfig) {
    return React382.useMemo(function() {
      var support = !!propConfig;
      return [support, _extends(_extends({}, templateConfig), support && _typeof(propConfig) === "object" ? propConfig : null)];
    }, [propConfig]);
  }

  // node_modules/antd/es/typography/hooks/useUpdatedEffect.js
  var React383 = __toESM(require_react());
  var useUpdatedEffect = function useUpdatedEffect2(callback, conditions) {
    var mountRef = React383.useRef(false);
    React383.useEffect(function() {
      if (mountRef.current) {
        callback();
      } else {
        mountRef.current = true;
      }
    }, conditions);
  };
  var useUpdatedEffect_default = useUpdatedEffect;

  // node_modules/antd/es/typography/Typography.js
  var import_classnames144 = __toESM(require_classnames());
  var React384 = __toESM(require_react());
  var __rest52 = function(s2, e3) {
    var t4 = {};
    for (var p2 in s2)
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t4[p2] = s2[p2];
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t4[p2[i3]] = s2[p2[i3]];
      }
    return t4;
  };
  var Typography = /* @__PURE__ */ React384.forwardRef(function(_a, ref) {
    var customizePrefixCls = _a.prefixCls, _a$component = _a.component, Component20 = _a$component === void 0 ? "article" : _a$component, className = _a.className, setContentRef = _a.setContentRef, children = _a.children, typographyDirection = _a.direction, restProps = __rest52(_a, ["prefixCls", "component", "className", "setContentRef", "children", "direction"]);
    var _React$useContext = React384.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls, contextDirection = _React$useContext.direction;
    var direction = typographyDirection !== null && typographyDirection !== void 0 ? typographyDirection : contextDirection;
    var mergedRef = ref;
    if (setContentRef) {
      true ? warning_default2(false, "Typography", "`setContentRef` is deprecated. Please use `ref` instead.") : void 0;
      mergedRef = composeRef(ref, setContentRef);
    }
    var prefixCls = getPrefixCls("typography", customizePrefixCls);
    var componentClassName = (0, import_classnames144.default)(prefixCls, _defineProperty({}, "".concat(prefixCls, "-rtl"), direction === "rtl"), className);
    return (
      // @ts-expect-error: Expression produces a union type that is too complex to represent.
      /* @__PURE__ */ React384.createElement(Component20, _extends({
        className: componentClassName,
        ref: mergedRef
      }, restProps), children)
    );
  });
  if (true) {
    Typography.displayName = "Typography";
  }
  var Typography_default = Typography;

  // node_modules/antd/es/typography/Base/Ellipsis.js
  var React385 = __toESM(require_react());
  function cuttable(node) {
    var type4 = _typeof(node);
    return type4 === "string" || type4 === "number";
  }
  function getNodesLen(nodeList) {
    var totalLen = 0;
    nodeList.forEach(function(node) {
      if (cuttable(node)) {
        totalLen += String(node).length;
      } else {
        totalLen += 1;
      }
    });
    return totalLen;
  }
  function sliceNodes(nodeList, len) {
    var currLen = 0;
    var currentNodeList = [];
    for (var i3 = 0; i3 < nodeList.length; i3 += 1) {
      if (currLen === len) {
        return currentNodeList;
      }
      var node = nodeList[i3];
      var canCut = cuttable(node);
      var nodeLen = canCut ? String(node).length : 1;
      var nextLen = currLen + nodeLen;
      if (nextLen > len) {
        var restLen = len - currLen;
        currentNodeList.push(String(node).slice(0, restLen));
        return currentNodeList;
      }
      currentNodeList.push(node);
      currLen = nextLen;
    }
    return nodeList;
  }
  var NONE = 0;
  var PREPARE = 1;
  var WALKING = 2;
  var DONE_WITH_ELLIPSIS = 3;
  var DONE_WITHOUT_ELLIPSIS = 4;
  var Ellipsis = function Ellipsis2(_ref) {
    var enabledMeasure = _ref.enabledMeasure, children = _ref.children, text = _ref.text, width = _ref.width, fontSize = _ref.fontSize, rows = _ref.rows, onEllipsis = _ref.onEllipsis;
    var _React$useState = React385.useState([0, 0, 0]), _React$useState2 = _slicedToArray(_React$useState, 2), _React$useState2$ = _slicedToArray(_React$useState2[0], 3), startLen = _React$useState2$[0], midLen = _React$useState2$[1], endLen = _React$useState2$[2], setCutLength = _React$useState2[1];
    var _React$useState3 = React385.useState(NONE), _React$useState4 = _slicedToArray(_React$useState3, 2), walkingState = _React$useState4[0], setWalkingState = _React$useState4[1];
    var _React$useState5 = React385.useState(0), _React$useState6 = _slicedToArray(_React$useState5, 2), singleRowHeight = _React$useState6[0], setSingleRowHeight = _React$useState6[1];
    var singleRowRef = React385.useRef(null);
    var midRowRef = React385.useRef(null);
    var nodeList = React385.useMemo(function() {
      return toArray(text);
    }, [text]);
    var totalLen = React385.useMemo(function() {
      return getNodesLen(nodeList);
    }, [nodeList]);
    var mergedChildren = React385.useMemo(function() {
      if (!enabledMeasure || walkingState !== DONE_WITH_ELLIPSIS) {
        return children(nodeList, false);
      }
      return children(sliceNodes(nodeList, midLen), midLen < totalLen);
    }, [enabledMeasure, walkingState, children, nodeList, midLen, totalLen]);
    useLayoutEffect_default(function() {
      if (enabledMeasure && width && fontSize && totalLen) {
        setWalkingState(PREPARE);
        setCutLength([0, Math.ceil(totalLen / 2), totalLen]);
      }
    }, [enabledMeasure, width, fontSize, text, totalLen, rows]);
    useLayoutEffect_default(function() {
      var _a;
      if (walkingState === PREPARE) {
        setSingleRowHeight(((_a = singleRowRef.current) === null || _a === void 0 ? void 0 : _a.offsetHeight) || 0);
      }
    }, [walkingState]);
    useLayoutEffect_default(function() {
      var _a, _b;
      if (singleRowHeight) {
        if (walkingState === PREPARE) {
          var midHeight = ((_a = midRowRef.current) === null || _a === void 0 ? void 0 : _a.offsetHeight) || 0;
          var maxHeight = rows * singleRowHeight;
          if (midHeight <= maxHeight) {
            setWalkingState(DONE_WITHOUT_ELLIPSIS);
            onEllipsis(false);
          } else {
            setWalkingState(WALKING);
          }
        } else if (walkingState === WALKING) {
          if (startLen !== endLen) {
            var _midHeight = ((_b = midRowRef.current) === null || _b === void 0 ? void 0 : _b.offsetHeight) || 0;
            var _maxHeight = rows * singleRowHeight;
            var nextStartLen = startLen;
            var nextEndLen = endLen;
            if (startLen === endLen - 1) {
              nextEndLen = startLen;
            } else if (_midHeight <= _maxHeight) {
              nextStartLen = midLen;
            } else {
              nextEndLen = midLen;
            }
            var nextMidLen = Math.ceil((nextStartLen + nextEndLen) / 2);
            setCutLength([nextStartLen, nextMidLen, nextEndLen]);
          } else {
            setWalkingState(DONE_WITH_ELLIPSIS);
            onEllipsis(true);
          }
        }
      }
    }, [walkingState, startLen, endLen, rows, singleRowHeight]);
    var measureStyle = {
      width,
      whiteSpace: "normal",
      margin: 0,
      padding: 0
    };
    var renderMeasure = function renderMeasure2(content, ref, style3) {
      return /* @__PURE__ */ React385.createElement("span", {
        "aria-hidden": true,
        ref,
        style: _extends({
          position: "fixed",
          display: "block",
          left: 0,
          top: 0,
          zIndex: -9999,
          visibility: "hidden",
          pointerEvents: "none",
          fontSize: Math.floor(fontSize / 2) * 2
        }, style3)
      }, content);
    };
    var renderMeasureSlice = function renderMeasureSlice2(len, ref) {
      var sliceNodeList = sliceNodes(nodeList, len);
      return renderMeasure(children(sliceNodeList, true), ref, measureStyle);
    };
    return /* @__PURE__ */ React385.createElement(React385.Fragment, null, mergedChildren, enabledMeasure && walkingState !== DONE_WITH_ELLIPSIS && walkingState !== DONE_WITHOUT_ELLIPSIS && /* @__PURE__ */ React385.createElement(React385.Fragment, null, renderMeasure("lg", singleRowRef, {
      wordBreak: "keep-all",
      whiteSpace: "nowrap"
    }), walkingState === PREPARE ? renderMeasure(children(nodeList, false), midRowRef, measureStyle) : renderMeasureSlice(midLen, midRowRef)));
  };
  if (true) {
    Ellipsis.displayName = "Ellipsis";
  }
  var Ellipsis_default = Ellipsis;

  // node_modules/antd/es/typography/Base/EllipsisTooltip.js
  var React386 = __toESM(require_react());
  var EllipsisTooltip = function EllipsisTooltip2(_ref) {
    var enabledEllipsis = _ref.enabledEllipsis, isEllipsis = _ref.isEllipsis, children = _ref.children, tooltipProps = _ref.tooltipProps;
    if (!(tooltipProps === null || tooltipProps === void 0 ? void 0 : tooltipProps.title) || !enabledEllipsis) {
      return children;
    }
    return /* @__PURE__ */ React386.createElement(tooltip_default, _extends({
      open: isEllipsis ? void 0 : false
    }, tooltipProps), children);
  };
  if (true) {
    EllipsisTooltip.displayName = "EllipsisTooltip";
  }
  var EllipsisTooltip_default = EllipsisTooltip;

  // node_modules/antd/es/typography/Base/index.js
  var __rest53 = function(s2, e3) {
    var t4 = {};
    for (var p2 in s2)
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t4[p2] = s2[p2];
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t4[p2[i3]] = s2[p2[i3]];
      }
    return t4;
  };
  function wrapperDecorations(_ref, content) {
    var mark = _ref.mark, code = _ref.code, underline = _ref.underline, del = _ref["delete"], strong = _ref.strong, keyboard = _ref.keyboard, italic = _ref.italic;
    var currentContent = content;
    function wrap(needed, tag) {
      if (!needed)
        return;
      currentContent = /* @__PURE__ */ React387.createElement(tag, {}, currentContent);
    }
    wrap(strong, "strong");
    wrap(underline, "u");
    wrap(del, "del");
    wrap(code, "code");
    wrap(mark, "mark");
    wrap(keyboard, "kbd");
    wrap(italic, "i");
    return currentContent;
  }
  function getNode(dom, defaultNode, needDom) {
    if (dom === true || dom === void 0) {
      return defaultNode;
    }
    return dom || needDom && defaultNode;
  }
  function toList(val) {
    if (val === false) {
      return [false, false];
    }
    return Array.isArray(val) ? val : [val];
  }
  var ELLIPSIS_STR = "...";
  var Base = /* @__PURE__ */ React387.forwardRef(function(props, ref) {
    var _a, _b, _c;
    var customizePrefixCls = props.prefixCls, className = props.className, style3 = props.style, type4 = props.type, disabled = props.disabled, children = props.children, ellipsis = props.ellipsis, editable = props.editable, copyable = props.copyable, component = props.component, title = props.title, restProps = __rest53(props, ["prefixCls", "className", "style", "type", "disabled", "children", "ellipsis", "editable", "copyable", "component", "title"]);
    var _React$useContext = React387.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls, direction = _React$useContext.direction;
    var textLocale = useLocaleReceiver("Text")[0];
    var typographyRef = React387.useRef(null);
    var editIconRef = React387.useRef(null);
    var prefixCls = getPrefixCls("typography", customizePrefixCls);
    var textProps = omit(restProps, ["mark", "code", "delete", "underline", "strong", "keyboard", "italic"]);
    var _useMergedConfig = useMergedConfig(editable), _useMergedConfig2 = _slicedToArray(_useMergedConfig, 2), enableEdit = _useMergedConfig2[0], editConfig = _useMergedConfig2[1];
    var _useMergedState = useMergedState(false, {
      value: editConfig.editing
    }), _useMergedState2 = _slicedToArray(_useMergedState, 2), editing = _useMergedState2[0], setEditing = _useMergedState2[1];
    var _editConfig$triggerTy = editConfig.triggerType, triggerType = _editConfig$triggerTy === void 0 ? ["icon"] : _editConfig$triggerTy;
    var triggerEdit = function triggerEdit2(edit) {
      var _a2;
      if (edit) {
        (_a2 = editConfig.onStart) === null || _a2 === void 0 ? void 0 : _a2.call(editConfig);
      }
      setEditing(edit);
    };
    useUpdatedEffect_default(function() {
      var _a2;
      if (!editing) {
        (_a2 = editIconRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
      }
    }, [editing]);
    var onEditClick = function onEditClick2(e3) {
      e3 === null || e3 === void 0 ? void 0 : e3.preventDefault();
      triggerEdit(true);
    };
    var onEditChange = function onEditChange2(value) {
      var _a2;
      (_a2 = editConfig.onChange) === null || _a2 === void 0 ? void 0 : _a2.call(editConfig, value);
      triggerEdit(false);
    };
    var onEditCancel = function onEditCancel2() {
      var _a2;
      (_a2 = editConfig.onCancel) === null || _a2 === void 0 ? void 0 : _a2.call(editConfig);
      triggerEdit(false);
    };
    var _useMergedConfig3 = useMergedConfig(copyable), _useMergedConfig4 = _slicedToArray(_useMergedConfig3, 2), enableCopy = _useMergedConfig4[0], copyConfig = _useMergedConfig4[1];
    var _React$useState = React387.useState(false), _React$useState2 = _slicedToArray(_React$useState, 2), copied = _React$useState2[0], setCopied = _React$useState2[1];
    var copyIdRef = React387.useRef();
    var copyOptions = {};
    if (copyConfig.format) {
      copyOptions.format = copyConfig.format;
    }
    var cleanCopyId = function cleanCopyId2() {
      window.clearTimeout(copyIdRef.current);
    };
    var onCopyClick = function onCopyClick2(e3) {
      var _a2;
      e3 === null || e3 === void 0 ? void 0 : e3.preventDefault();
      e3 === null || e3 === void 0 ? void 0 : e3.stopPropagation();
      (0, import_copy_to_clipboard.default)(copyConfig.text || String(children) || "", copyOptions);
      setCopied(true);
      cleanCopyId();
      copyIdRef.current = window.setTimeout(function() {
        setCopied(false);
      }, 3e3);
      (_a2 = copyConfig.onCopy) === null || _a2 === void 0 ? void 0 : _a2.call(copyConfig, e3);
    };
    React387.useEffect(function() {
      return cleanCopyId;
    }, []);
    var _React$useState3 = React387.useState(false), _React$useState4 = _slicedToArray(_React$useState3, 2), isLineClampSupport = _React$useState4[0], setIsLineClampSupport = _React$useState4[1];
    var _React$useState5 = React387.useState(false), _React$useState6 = _slicedToArray(_React$useState5, 2), isTextOverflowSupport = _React$useState6[0], setIsTextOverflowSupport = _React$useState6[1];
    var _React$useState7 = React387.useState(false), _React$useState8 = _slicedToArray(_React$useState7, 2), expanded = _React$useState8[0], setExpanded = _React$useState8[1];
    var _React$useState9 = React387.useState(false), _React$useState10 = _slicedToArray(_React$useState9, 2), isJsEllipsis = _React$useState10[0], setIsJsEllipsis = _React$useState10[1];
    var _React$useState11 = React387.useState(false), _React$useState12 = _slicedToArray(_React$useState11, 2), isNativeEllipsis = _React$useState12[0], setIsNativeEllipsis = _React$useState12[1];
    var _React$useState13 = React387.useState(true), _React$useState14 = _slicedToArray(_React$useState13, 2), isNativeVisible = _React$useState14[0], setIsNativeVisible = _React$useState14[1];
    var _useMergedConfig5 = useMergedConfig(ellipsis, {
      expandable: false
    }), _useMergedConfig6 = _slicedToArray(_useMergedConfig5, 2), enableEllipsis = _useMergedConfig6[0], ellipsisConfig = _useMergedConfig6[1];
    var mergedEnableEllipsis = enableEllipsis && !expanded;
    var _ellipsisConfig$rows = ellipsisConfig.rows, rows = _ellipsisConfig$rows === void 0 ? 1 : _ellipsisConfig$rows;
    var needMeasureEllipsis = React387.useMemo(function() {
      return (
        // Disable ellipsis
        !mergedEnableEllipsis || // Provide suffix
        ellipsisConfig.suffix !== void 0 || ellipsisConfig.onEllipsis || // Can't use css ellipsis since we need to provide the place for button
        ellipsisConfig.expandable || enableEdit || enableCopy
      );
    }, [mergedEnableEllipsis, ellipsisConfig, enableEdit, enableCopy]);
    useLayoutEffect_default(function() {
      if (enableEllipsis && !needMeasureEllipsis) {
        setIsLineClampSupport(isStyleSupport("webkitLineClamp"));
        setIsTextOverflowSupport(isStyleSupport("textOverflow"));
      }
    }, [needMeasureEllipsis, enableEllipsis]);
    var cssEllipsis = React387.useMemo(function() {
      if (needMeasureEllipsis) {
        return false;
      }
      if (rows === 1) {
        return isTextOverflowSupport;
      }
      return isLineClampSupport;
    }, [needMeasureEllipsis, isTextOverflowSupport, isLineClampSupport]);
    var isMergedEllipsis = mergedEnableEllipsis && (cssEllipsis ? isNativeEllipsis : isJsEllipsis);
    var cssTextOverflow = mergedEnableEllipsis && rows === 1 && cssEllipsis;
    var cssLineClamp = mergedEnableEllipsis && rows > 1 && cssEllipsis;
    var onExpandClick = function onExpandClick2(e3) {
      var _a2;
      setExpanded(true);
      (_a2 = ellipsisConfig.onExpand) === null || _a2 === void 0 ? void 0 : _a2.call(ellipsisConfig, e3);
    };
    var _React$useState15 = React387.useState(0), _React$useState16 = _slicedToArray(_React$useState15, 2), ellipsisWidth = _React$useState16[0], setEllipsisWidth = _React$useState16[1];
    var _React$useState17 = React387.useState(0), _React$useState18 = _slicedToArray(_React$useState17, 2), ellipsisFontSize = _React$useState18[0], setEllipsisFontSize = _React$useState18[1];
    var onResize2 = function onResize3(_ref2, element) {
      var offsetWidth = _ref2.offsetWidth;
      var _a2;
      setEllipsisWidth(offsetWidth);
      setEllipsisFontSize(parseInt((_a2 = window.getComputedStyle) === null || _a2 === void 0 ? void 0 : _a2.call(window, element).fontSize, 10) || 0);
    };
    var onJsEllipsis = function onJsEllipsis2(jsEllipsis) {
      var _a2;
      setIsJsEllipsis(jsEllipsis);
      if (isJsEllipsis !== jsEllipsis) {
        (_a2 = ellipsisConfig.onEllipsis) === null || _a2 === void 0 ? void 0 : _a2.call(ellipsisConfig, jsEllipsis);
      }
    };
    React387.useEffect(function() {
      var textEle = typographyRef.current;
      if (enableEllipsis && cssEllipsis && textEle) {
        var currentEllipsis = cssLineClamp ? textEle.offsetHeight < textEle.scrollHeight : textEle.offsetWidth < textEle.scrollWidth;
        if (isNativeEllipsis !== currentEllipsis) {
          setIsNativeEllipsis(currentEllipsis);
        }
      }
    }, [enableEllipsis, cssEllipsis, children, cssLineClamp, isNativeVisible]);
    React387.useEffect(function() {
      var textEle = typographyRef.current;
      if (typeof IntersectionObserver === "undefined" || !textEle || !cssEllipsis || !mergedEnableEllipsis) {
        return;
      }
      var observer = new IntersectionObserver(function() {
        setIsNativeVisible(!!textEle.offsetParent);
      });
      observer.observe(textEle);
      return function() {
        observer.disconnect();
      };
    }, [cssEllipsis, mergedEnableEllipsis]);
    var tooltipProps = {};
    if (ellipsisConfig.tooltip === true) {
      tooltipProps = {
        title: (_a = editConfig.text) !== null && _a !== void 0 ? _a : children
      };
    } else if (/* @__PURE__ */ React387.isValidElement(ellipsisConfig.tooltip)) {
      tooltipProps = {
        title: ellipsisConfig.tooltip
      };
    } else if (_typeof(ellipsisConfig.tooltip) === "object") {
      tooltipProps = _extends({
        title: (_b = editConfig.text) !== null && _b !== void 0 ? _b : children
      }, ellipsisConfig.tooltip);
    } else {
      tooltipProps = {
        title: ellipsisConfig.tooltip
      };
    }
    var topAriaLabel = React387.useMemo(function() {
      var isValid = function isValid2(val) {
        return ["string", "number"].includes(_typeof(val));
      };
      if (!enableEllipsis || cssEllipsis) {
        return void 0;
      }
      if (isValid(editConfig.text)) {
        return editConfig.text;
      }
      if (isValid(children)) {
        return children;
      }
      if (isValid(title)) {
        return title;
      }
      if (isValid(tooltipProps.title)) {
        return tooltipProps.title;
      }
      return void 0;
    }, [enableEllipsis, cssEllipsis, title, tooltipProps.title, isMergedEllipsis]);
    if (editing) {
      return /* @__PURE__ */ React387.createElement(Editable_default, {
        value: (_c = editConfig.text) !== null && _c !== void 0 ? _c : typeof children === "string" ? children : "",
        onSave: onEditChange,
        onCancel: onEditCancel,
        onEnd: editConfig.onEnd,
        prefixCls,
        className,
        style: style3,
        direction,
        component,
        maxLength: editConfig.maxLength,
        autoSize: editConfig.autoSize,
        enterIcon: editConfig.enterIcon
      });
    }
    var renderExpand = function renderExpand2() {
      var expandable = ellipsisConfig.expandable, symbol = ellipsisConfig.symbol;
      if (!expandable)
        return null;
      var expandContent;
      if (symbol) {
        expandContent = symbol;
      } else {
        expandContent = textLocale.expand;
      }
      return /* @__PURE__ */ React387.createElement("a", {
        key: "expand",
        className: "".concat(prefixCls, "-expand"),
        onClick: onExpandClick,
        "aria-label": textLocale.expand
      }, expandContent);
    };
    var renderEdit = function renderEdit2() {
      if (!enableEdit)
        return;
      var icon = editConfig.icon, tooltip = editConfig.tooltip;
      var editTitle = toArray(tooltip)[0] || textLocale.edit;
      var ariaLabel = typeof editTitle === "string" ? editTitle : "";
      return triggerType.includes("icon") ? /* @__PURE__ */ React387.createElement(tooltip_default, {
        key: "edit",
        title: tooltip === false ? "" : editTitle
      }, /* @__PURE__ */ React387.createElement(transButton_default, {
        ref: editIconRef,
        className: "".concat(prefixCls, "-edit"),
        onClick: onEditClick,
        "aria-label": ariaLabel
      }, icon || /* @__PURE__ */ React387.createElement(EditOutlined_default2, {
        role: "button"
      }))) : null;
    };
    var renderCopy = function renderCopy2() {
      if (!enableCopy)
        return;
      var tooltips = copyConfig.tooltips, icon = copyConfig.icon;
      var tooltipNodes = toList(tooltips);
      var iconNodes = toList(icon);
      var copyTitle = copied ? getNode(tooltipNodes[1], textLocale.copied) : getNode(tooltipNodes[0], textLocale.copy);
      var systemStr = copied ? textLocale.copied : textLocale.copy;
      var ariaLabel = typeof copyTitle === "string" ? copyTitle : systemStr;
      return /* @__PURE__ */ React387.createElement(tooltip_default, {
        key: "copy",
        title: copyTitle
      }, /* @__PURE__ */ React387.createElement(transButton_default, {
        className: (0, import_classnames145.default)("".concat(prefixCls, "-copy"), copied && "".concat(prefixCls, "-copy-success")),
        onClick: onCopyClick,
        "aria-label": ariaLabel
      }, copied ? getNode(iconNodes[1], /* @__PURE__ */ React387.createElement(CheckOutlined_default2, null), true) : getNode(iconNodes[0], /* @__PURE__ */ React387.createElement(CopyOutlined_default2, null), true)));
    };
    var renderOperations = function renderOperations2(renderExpanded) {
      return [renderExpanded && renderExpand(), renderEdit(), renderCopy()];
    };
    var renderEllipsis = function renderEllipsis2(needEllipsis) {
      return [needEllipsis && /* @__PURE__ */ React387.createElement("span", {
        "aria-hidden": true,
        key: "ellipsis"
      }, ELLIPSIS_STR), ellipsisConfig.suffix, renderOperations(needEllipsis)];
    };
    return /* @__PURE__ */ React387.createElement(es_default2, {
      onResize: onResize2,
      disabled: !mergedEnableEllipsis || cssEllipsis
    }, function(resizeRef) {
      var _classNames;
      return /* @__PURE__ */ React387.createElement(EllipsisTooltip_default, {
        tooltipProps,
        enabledEllipsis: mergedEnableEllipsis,
        isEllipsis: isMergedEllipsis
      }, /* @__PURE__ */ React387.createElement(Typography_default, _extends({
        className: (0, import_classnames145.default)((_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-").concat(type4), type4), _defineProperty(_classNames, "".concat(prefixCls, "-disabled"), disabled), _defineProperty(_classNames, "".concat(prefixCls, "-ellipsis"), enableEllipsis), _defineProperty(_classNames, "".concat(prefixCls, "-single-line"), mergedEnableEllipsis && rows === 1), _defineProperty(_classNames, "".concat(prefixCls, "-ellipsis-single-line"), cssTextOverflow), _defineProperty(_classNames, "".concat(prefixCls, "-ellipsis-multiple-line"), cssLineClamp), _classNames), className),
        prefixCls: customizePrefixCls,
        style: _extends(_extends({}, style3), {
          WebkitLineClamp: cssLineClamp ? rows : void 0
        }),
        component,
        ref: composeRef(resizeRef, typographyRef, ref),
        direction,
        onClick: triggerType.includes("text") ? onEditClick : void 0,
        "aria-label": topAriaLabel === null || topAriaLabel === void 0 ? void 0 : topAriaLabel.toString(),
        title
      }, textProps), /* @__PURE__ */ React387.createElement(Ellipsis_default, {
        enabledMeasure: mergedEnableEllipsis && !cssEllipsis,
        text: children,
        rows,
        width: ellipsisWidth,
        fontSize: ellipsisFontSize,
        onEllipsis: onJsEllipsis
      }, function(node, needEllipsis) {
        var renderNode = node;
        if (node.length && needEllipsis && topAriaLabel) {
          renderNode = /* @__PURE__ */ React387.createElement("span", {
            key: "show-content",
            "aria-hidden": true
          }, renderNode);
        }
        var wrappedContext = wrapperDecorations(props, /* @__PURE__ */ React387.createElement(React387.Fragment, null, renderNode, renderEllipsis(needEllipsis)));
        return wrappedContext;
      })));
    });
  });
  var Base_default = Base;

  // node_modules/antd/es/typography/Link.js
  var __rest54 = function(s2, e3) {
    var t4 = {};
    for (var p2 in s2)
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t4[p2] = s2[p2];
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t4[p2[i3]] = s2[p2[i3]];
      }
    return t4;
  };
  var Link2 = /* @__PURE__ */ React388.forwardRef(function(_a, ref) {
    var ellipsis = _a.ellipsis, rel = _a.rel, restProps = __rest54(_a, ["ellipsis", "rel"]);
    true ? warning_default2(_typeof(ellipsis) !== "object", "Typography.Link", "`ellipsis` only supports boolean value.") : void 0;
    var mergedProps = _extends(_extends({}, restProps), {
      rel: rel === void 0 && restProps.target === "_blank" ? "noopener noreferrer" : rel
    });
    delete mergedProps.navigate;
    return /* @__PURE__ */ React388.createElement(Base_default, _extends({}, mergedProps, {
      ref,
      ellipsis: !!ellipsis,
      component: "a"
    }));
  });
  var Link_default = Link2;

  // node_modules/antd/es/typography/Paragraph.js
  var React389 = __toESM(require_react());
  var Paragraph3 = /* @__PURE__ */ React389.forwardRef(function(props, ref) {
    return /* @__PURE__ */ React389.createElement(Base_default, _extends({
      ref
    }, props, {
      component: "div"
    }));
  });
  var Paragraph_default2 = Paragraph3;

  // node_modules/antd/es/typography/Text.js
  var React390 = __toESM(require_react());
  var __rest55 = function(s2, e3) {
    var t4 = {};
    for (var p2 in s2)
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t4[p2] = s2[p2];
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t4[p2[i3]] = s2[p2[i3]];
      }
    return t4;
  };
  var Text = function Text2(_a, ref) {
    var ellipsis = _a.ellipsis, restProps = __rest55(_a, ["ellipsis"]);
    var mergedEllipsis = React390.useMemo(function() {
      if (ellipsis && _typeof(ellipsis) === "object") {
        return omit(ellipsis, ["expandable", "rows"]);
      }
      return ellipsis;
    }, [ellipsis]);
    true ? warning_default2(_typeof(ellipsis) !== "object" || !ellipsis || !("expandable" in ellipsis) && !("rows" in ellipsis), "Typography.Text", "`ellipsis` do not support `expandable` or `rows` props.") : void 0;
    return /* @__PURE__ */ React390.createElement(Base_default, _extends({
      ref
    }, restProps, {
      ellipsis: mergedEllipsis,
      component: "span"
    }));
  };
  var Text_default = /* @__PURE__ */ React390.forwardRef(Text);

  // node_modules/antd/es/typography/Title.js
  var React391 = __toESM(require_react());
  var __rest56 = function(s2, e3) {
    var t4 = {};
    for (var p2 in s2)
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t4[p2] = s2[p2];
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
          t4[p2[i3]] = s2[p2[i3]];
      }
    return t4;
  };
  var TITLE_ELE_LIST = tupleNum(1, 2, 3, 4, 5);
  var Title3 = /* @__PURE__ */ React391.forwardRef(function(props, ref) {
    var _props$level = props.level, level = _props$level === void 0 ? 1 : _props$level, restProps = __rest56(props, ["level"]);
    var component;
    if (TITLE_ELE_LIST.includes(level)) {
      component = "h".concat(level);
    } else {
      true ? warning_default2(false, "Typography.Title", "Title only accept `1 | 2 | 3 | 4 | 5` as `level` value. And `5` need 4.6.0+ version.") : void 0;
      component = "h1";
    }
    return /* @__PURE__ */ React391.createElement(Base_default, _extends({
      ref
    }, restProps, {
      component
    }));
  });
  var Title_default2 = Title3;

  // node_modules/antd/es/typography/index.js
  var Typography2 = Typography_default;
  Typography2.Text = Text_default;
  Typography2.Link = Link_default;
  Typography2.Title = Title_default2;
  Typography2.Paragraph = Paragraph_default2;
  var typography_default = Typography2;

  // node_modules/react-i18next/dist/es/context.js
  var import_react106 = __toESM(require_react());

  // node_modules/react-i18next/dist/es/unescape.js
  var matchHtmlEntity = /&(?:amp|#38|lt|#60|gt|#62|apos|#39|quot|#34|nbsp|#160|copy|#169|reg|#174|hellip|#8230|#x2F|#47);/g;
  var htmlEntities = {
    "&amp;": "&",
    "&#38;": "&",
    "&lt;": "<",
    "&#60;": "<",
    "&gt;": ">",
    "&#62;": ">",
    "&apos;": "'",
    "&#39;": "'",
    "&quot;": '"',
    "&#34;": '"',
    "&nbsp;": " ",
    "&#160;": " ",
    "&copy;": "\xA9",
    "&#169;": "\xA9",
    "&reg;": "\xAE",
    "&#174;": "\xAE",
    "&hellip;": "\u2026",
    "&#8230;": "\u2026",
    "&#x2F;": "/",
    "&#47;": "/"
  };
  var unescapeHtmlEntity = function unescapeHtmlEntity2(m2) {
    return htmlEntities[m2];
  };
  var unescape2 = function unescape3(text) {
    return text.replace(matchHtmlEntity, unescapeHtmlEntity);
  };

  // node_modules/react-i18next/dist/es/context.js
  function ownKeys3(object4, enumerableOnly) {
    var keys2 = Object.keys(object4);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object4);
      if (enumerableOnly) {
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object4, sym).enumerable;
        });
      }
      keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread(target) {
    for (var i3 = 1; i3 < arguments.length; i3++) {
      var source = arguments[i3] != null ? arguments[i3] : {};
      if (i3 % 2) {
        ownKeys3(Object(source), true).forEach(function(key2) {
          _defineProperty(target, key2, source[key2]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys3(Object(source)).forEach(function(key2) {
          Object.defineProperty(target, key2, Object.getOwnPropertyDescriptor(source, key2));
        });
      }
    }
    return target;
  }
  var defaultOptions = {
    bindI18n: "languageChanged",
    bindI18nStore: "",
    transEmptyNodeValue: "",
    transSupportBasicHtmlNodes: true,
    transWrapTextNodes: "",
    transKeepBasicHtmlNodesFor: ["br", "strong", "i", "p"],
    useSuspense: true,
    unescape: unescape2
  };
  var i18nInstance;
  var I18nContext = (0, import_react106.createContext)();
  function setDefaults() {
    var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    defaultOptions = _objectSpread(_objectSpread({}, defaultOptions), options);
  }
  function getDefaults() {
    return defaultOptions;
  }
  var ReportNamespaces = function() {
    function ReportNamespaces2() {
      _classCallCheck(this, ReportNamespaces2);
      this.usedNamespaces = {};
    }
    _createClass(ReportNamespaces2, [{
      key: "addUsedNamespaces",
      value: function addUsedNamespaces(namespaces) {
        var _this = this;
        namespaces.forEach(function(ns) {
          if (!_this.usedNamespaces[ns])
            _this.usedNamespaces[ns] = true;
        });
      }
    }, {
      key: "getUsedNamespaces",
      value: function getUsedNamespaces() {
        return Object.keys(this.usedNamespaces);
      }
    }]);
    return ReportNamespaces2;
  }();
  function setI18n(instance2) {
    i18nInstance = instance2;
  }
  function getI18n() {
    return i18nInstance;
  }
  var initReactI18next = {
    type: "3rdParty",
    init: function init(instance2) {
      setDefaults(instance2.options.react);
      setI18n(instance2);
    }
  };

  // node_modules/react-i18next/dist/es/utils.js
  function warn() {
    if (console && console.warn) {
      var _console;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      if (typeof args[0] === "string")
        args[0] = "react-i18next:: ".concat(args[0]);
      (_console = console).warn.apply(_console, args);
    }
  }
  var alreadyWarned2 = {};
  function warnOnce() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    if (typeof args[0] === "string" && alreadyWarned2[args[0]])
      return;
    if (typeof args[0] === "string")
      alreadyWarned2[args[0]] = /* @__PURE__ */ new Date();
    warn.apply(void 0, args);
  }
  function loadNamespaces(i18n, ns, cb) {
    i18n.loadNamespaces(ns, function() {
      if (i18n.isInitialized) {
        cb();
      } else {
        var initialized = function initialized2() {
          setTimeout(function() {
            i18n.off("initialized", initialized2);
          }, 0);
          cb();
        };
        i18n.on("initialized", initialized);
      }
    });
  }
  function oldI18nextHasLoadedNamespace(ns, i18n) {
    var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    var lng = i18n.languages[0];
    var fallbackLng = i18n.options ? i18n.options.fallbackLng : false;
    var lastLng = i18n.languages[i18n.languages.length - 1];
    if (lng.toLowerCase() === "cimode")
      return true;
    var loadNotPending = function loadNotPending2(l2, n4) {
      var loadState = i18n.services.backendConnector.state["".concat(l2, "|").concat(n4)];
      return loadState === -1 || loadState === 2;
    };
    if (options.bindI18n && options.bindI18n.indexOf("languageChanging") > -1 && i18n.services.backendConnector.backend && i18n.isLanguageChangingTo && !loadNotPending(i18n.isLanguageChangingTo, ns))
      return false;
    if (i18n.hasResourceBundle(lng, ns))
      return true;
    if (!i18n.services.backendConnector.backend || i18n.options.resources && !i18n.options.partialBundledLanguages)
      return true;
    if (loadNotPending(lng, ns) && (!fallbackLng || loadNotPending(lastLng, ns)))
      return true;
    return false;
  }
  function hasLoadedNamespace(ns, i18n) {
    var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    if (!i18n.languages || !i18n.languages.length) {
      warnOnce("i18n.languages were undefined or empty", i18n.languages);
      return true;
    }
    var isNewerI18next = i18n.options.ignoreJSONStructure !== void 0;
    if (!isNewerI18next) {
      return oldI18nextHasLoadedNamespace(ns, i18n, options);
    }
    return i18n.hasLoadedNamespace(ns, {
      precheck: function precheck(i18nInstance2, loadNotPending) {
        if (options.bindI18n && options.bindI18n.indexOf("languageChanging") > -1 && i18nInstance2.services.backendConnector.backend && i18nInstance2.isLanguageChangingTo && !loadNotPending(i18nInstance2.isLanguageChangingTo, ns))
          return false;
      }
    });
  }

  // node_modules/react-i18next/dist/es/useTranslation.js
  var import_react107 = __toESM(require_react());
  function ownKeys4(object4, enumerableOnly) {
    var keys2 = Object.keys(object4);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object4);
      if (enumerableOnly) {
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object4, sym).enumerable;
        });
      }
      keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread3(target) {
    for (var i3 = 1; i3 < arguments.length; i3++) {
      var source = arguments[i3] != null ? arguments[i3] : {};
      if (i3 % 2) {
        ownKeys4(Object(source), true).forEach(function(key2) {
          _defineProperty(target, key2, source[key2]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys4(Object(source)).forEach(function(key2) {
          Object.defineProperty(target, key2, Object.getOwnPropertyDescriptor(source, key2));
        });
      }
    }
    return target;
  }
  var usePrevious = function usePrevious2(value, ignore) {
    var ref = (0, import_react107.useRef)();
    (0, import_react107.useEffect)(function() {
      ref.current = ignore ? ref.current : value;
    }, [value, ignore]);
    return ref.current;
  };
  function useTranslation(ns) {
    var props = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var i18nFromProps = props.i18n;
    var _ref = (0, import_react107.useContext)(I18nContext) || {}, i18nFromContext = _ref.i18n, defaultNSFromContext = _ref.defaultNS;
    var i18n = i18nFromProps || i18nFromContext || getI18n();
    if (i18n && !i18n.reportNamespaces)
      i18n.reportNamespaces = new ReportNamespaces();
    if (!i18n) {
      warnOnce("You will need to pass in an i18next instance by using initReactI18next");
      var notReadyT = function notReadyT2(k2) {
        return Array.isArray(k2) ? k2[k2.length - 1] : k2;
      };
      var retNotReady = [notReadyT, {}, false];
      retNotReady.t = notReadyT;
      retNotReady.i18n = {};
      retNotReady.ready = false;
      return retNotReady;
    }
    if (i18n.options.react && i18n.options.react.wait !== void 0)
      warnOnce("It seems you are still using the old wait option, you may migrate to the new useSuspense behaviour.");
    var i18nOptions = _objectSpread3(_objectSpread3(_objectSpread3({}, getDefaults()), i18n.options.react), props);
    var useSuspense = i18nOptions.useSuspense, keyPrefix = i18nOptions.keyPrefix;
    var namespaces = ns || defaultNSFromContext || i18n.options && i18n.options.defaultNS;
    namespaces = typeof namespaces === "string" ? [namespaces] : namespaces || ["translation"];
    if (i18n.reportNamespaces.addUsedNamespaces)
      i18n.reportNamespaces.addUsedNamespaces(namespaces);
    var ready = (i18n.isInitialized || i18n.initializedStoreOnce) && namespaces.every(function(n4) {
      return hasLoadedNamespace(n4, i18n, i18nOptions);
    });
    function getT() {
      return i18n.getFixedT(null, i18nOptions.nsMode === "fallback" ? namespaces : namespaces[0], keyPrefix);
    }
    var _useState = (0, import_react107.useState)(getT), _useState2 = _slicedToArray(_useState, 2), t4 = _useState2[0], setT = _useState2[1];
    var joinedNS = namespaces.join();
    var previousJoinedNS = usePrevious(joinedNS);
    var isMounted = (0, import_react107.useRef)(true);
    (0, import_react107.useEffect)(function() {
      var bindI18n = i18nOptions.bindI18n, bindI18nStore = i18nOptions.bindI18nStore;
      isMounted.current = true;
      if (!ready && !useSuspense) {
        loadNamespaces(i18n, namespaces, function() {
          if (isMounted.current)
            setT(getT);
        });
      }
      if (ready && previousJoinedNS && previousJoinedNS !== joinedNS && isMounted.current) {
        setT(getT);
      }
      function boundReset() {
        if (isMounted.current)
          setT(getT);
      }
      if (bindI18n && i18n)
        i18n.on(bindI18n, boundReset);
      if (bindI18nStore && i18n)
        i18n.store.on(bindI18nStore, boundReset);
      return function() {
        isMounted.current = false;
        if (bindI18n && i18n)
          bindI18n.split(" ").forEach(function(e3) {
            return i18n.off(e3, boundReset);
          });
        if (bindI18nStore && i18n)
          bindI18nStore.split(" ").forEach(function(e3) {
            return i18n.store.off(e3, boundReset);
          });
      };
    }, [i18n, joinedNS]);
    var isInitial = (0, import_react107.useRef)(true);
    (0, import_react107.useEffect)(function() {
      if (isMounted.current && !isInitial.current) {
        setT(getT);
      }
      isInitial.current = false;
    }, [i18n, keyPrefix]);
    var ret = [t4, i18n, ready];
    ret.t = t4;
    ret.i18n = i18n;
    ret.ready = ready;
    if (ready)
      return ret;
    if (!ready && !useSuspense)
      return ret;
    throw new Promise(function(resolve) {
      loadNamespaces(i18n, namespaces, function() {
        resolve();
      });
    });
  }

  // node_modules/axios/lib/helpers/bind.js
  function bind(fn2, thisArg) {
    return function wrap() {
      return fn2.apply(thisArg, arguments);
    };
  }

  // node_modules/axios/lib/utils.js
  var { toString } = Object.prototype;
  var { getPrototypeOf } = Object;
  var kindOf = ((cache) => (thing) => {
    const str = toString.call(thing);
    return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
  })(/* @__PURE__ */ Object.create(null));
  var kindOfTest = (type4) => {
    type4 = type4.toLowerCase();
    return (thing) => kindOf(thing) === type4;
  };
  var typeOfTest = (type4) => (thing) => typeof thing === type4;
  var { isArray } = Array;
  var isUndefined = typeOfTest("undefined");
  function isBuffer(val) {
    return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);
  }
  var isArrayBuffer = kindOfTest("ArrayBuffer");
  function isArrayBufferView(val) {
    let result2;
    if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
      result2 = ArrayBuffer.isView(val);
    } else {
      result2 = val && val.buffer && isArrayBuffer(val.buffer);
    }
    return result2;
  }
  var isString2 = typeOfTest("string");
  var isFunction = typeOfTest("function");
  var isNumber = typeOfTest("number");
  var isObject2 = (thing) => thing !== null && typeof thing === "object";
  var isBoolean = (thing) => thing === true || thing === false;
  var isPlainObject3 = (val) => {
    if (kindOf(val) !== "object") {
      return false;
    }
    const prototype3 = getPrototypeOf(val);
    return (prototype3 === null || prototype3 === Object.prototype || Object.getPrototypeOf(prototype3) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);
  };
  var isDate = kindOfTest("Date");
  var isFile = kindOfTest("File");
  var isBlob = kindOfTest("Blob");
  var isFileList = kindOfTest("FileList");
  var isStream = (val) => isObject2(val) && isFunction(val.pipe);
  var isFormData = (thing) => {
    let kind;
    return thing && (typeof FormData === "function" && thing instanceof FormData || isFunction(thing.append) && ((kind = kindOf(thing)) === "formdata" || // detect form-data instance
    kind === "object" && isFunction(thing.toString) && thing.toString() === "[object FormData]"));
  };
  var isURLSearchParams = kindOfTest("URLSearchParams");
  var trim = (str) => str.trim ? str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
  function forEach(obj, fn2, { allOwnKeys = false } = {}) {
    if (obj === null || typeof obj === "undefined") {
      return;
    }
    let i3;
    let l2;
    if (typeof obj !== "object") {
      obj = [obj];
    }
    if (isArray(obj)) {
      for (i3 = 0, l2 = obj.length; i3 < l2; i3++) {
        fn2.call(null, obj[i3], i3, obj);
      }
    } else {
      const keys2 = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
      const len = keys2.length;
      let key2;
      for (i3 = 0; i3 < len; i3++) {
        key2 = keys2[i3];
        fn2.call(null, obj[key2], key2, obj);
      }
    }
  }
  function findKey(obj, key2) {
    key2 = key2.toLowerCase();
    const keys2 = Object.keys(obj);
    let i3 = keys2.length;
    let _key;
    while (i3-- > 0) {
      _key = keys2[i3];
      if (key2 === _key.toLowerCase()) {
        return _key;
      }
    }
    return null;
  }
  var _global = (() => {
    if (typeof globalThis !== "undefined")
      return globalThis;
    return typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : global;
  })();
  var isContextDefined = (context2) => !isUndefined(context2) && context2 !== _global;
  function merge3() {
    const { caseless } = isContextDefined(this) && this || {};
    const result2 = {};
    const assignValue = (val, key2) => {
      const targetKey = caseless && findKey(result2, key2) || key2;
      if (isPlainObject3(result2[targetKey]) && isPlainObject3(val)) {
        result2[targetKey] = merge3(result2[targetKey], val);
      } else if (isPlainObject3(val)) {
        result2[targetKey] = merge3({}, val);
      } else if (isArray(val)) {
        result2[targetKey] = val.slice();
      } else {
        result2[targetKey] = val;
      }
    };
    for (let i3 = 0, l2 = arguments.length; i3 < l2; i3++) {
      arguments[i3] && forEach(arguments[i3], assignValue);
    }
    return result2;
  }
  var extend = (a2, b2, thisArg, { allOwnKeys } = {}) => {
    forEach(b2, (val, key2) => {
      if (thisArg && isFunction(val)) {
        a2[key2] = bind(val, thisArg);
      } else {
        a2[key2] = val;
      }
    }, { allOwnKeys });
    return a2;
  };
  var stripBOM = (content) => {
    if (content.charCodeAt(0) === 65279) {
      content = content.slice(1);
    }
    return content;
  };
  var inherits = (constructor, superConstructor, props, descriptors2) => {
    constructor.prototype = Object.create(superConstructor.prototype, descriptors2);
    constructor.prototype.constructor = constructor;
    Object.defineProperty(constructor, "super", {
      value: superConstructor.prototype
    });
    props && Object.assign(constructor.prototype, props);
  };
  var toFlatObject = (sourceObj, destObj, filter3, propFilter) => {
    let props;
    let i3;
    let prop;
    const merged = {};
    destObj = destObj || {};
    if (sourceObj == null)
      return destObj;
    do {
      props = Object.getOwnPropertyNames(sourceObj);
      i3 = props.length;
      while (i3-- > 0) {
        prop = props[i3];
        if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
          destObj[prop] = sourceObj[prop];
          merged[prop] = true;
        }
      }
      sourceObj = filter3 !== false && getPrototypeOf(sourceObj);
    } while (sourceObj && (!filter3 || filter3(sourceObj, destObj)) && sourceObj !== Object.prototype);
    return destObj;
  };
  var endsWith = (str, searchString, position) => {
    str = String(str);
    if (position === void 0 || position > str.length) {
      position = str.length;
    }
    position -= searchString.length;
    const lastIndex = str.indexOf(searchString, position);
    return lastIndex !== -1 && lastIndex === position;
  };
  var toArray8 = (thing) => {
    if (!thing)
      return null;
    if (isArray(thing))
      return thing;
    let i3 = thing.length;
    if (!isNumber(i3))
      return null;
    const arr = new Array(i3);
    while (i3-- > 0) {
      arr[i3] = thing[i3];
    }
    return arr;
  };
  var isTypedArray = ((TypedArray) => {
    return (thing) => {
      return TypedArray && thing instanceof TypedArray;
    };
  })(typeof Uint8Array !== "undefined" && getPrototypeOf(Uint8Array));
  var forEachEntry = (obj, fn2) => {
    const generator2 = obj && obj[Symbol.iterator];
    const iterator = generator2.call(obj);
    let result2;
    while ((result2 = iterator.next()) && !result2.done) {
      const pair = result2.value;
      fn2.call(obj, pair[0], pair[1]);
    }
  };
  var matchAll = (regExp, str) => {
    let matches;
    const arr = [];
    while ((matches = regExp.exec(str)) !== null) {
      arr.push(matches);
    }
    return arr;
  };
  var isHTMLForm = kindOfTest("HTMLFormElement");
  var toCamelCase = (str) => {
    return str.toLowerCase().replace(
      /[-_\s]([a-z\d])(\w*)/g,
      function replacer(m2, p1, p2) {
        return p1.toUpperCase() + p2;
      }
    );
  };
  var hasOwnProperty = (({ hasOwnProperty: hasOwnProperty2 }) => (obj, prop) => hasOwnProperty2.call(obj, prop))(Object.prototype);
  var isRegExp = kindOfTest("RegExp");
  var reduceDescriptors = (obj, reducer) => {
    const descriptors2 = Object.getOwnPropertyDescriptors(obj);
    const reducedDescriptors = {};
    forEach(descriptors2, (descriptor, name) => {
      let ret;
      if ((ret = reducer(descriptor, name, obj)) !== false) {
        reducedDescriptors[name] = ret || descriptor;
      }
    });
    Object.defineProperties(obj, reducedDescriptors);
  };
  var freezeMethods = (obj) => {
    reduceDescriptors(obj, (descriptor, name) => {
      if (isFunction(obj) && ["arguments", "caller", "callee"].indexOf(name) !== -1) {
        return false;
      }
      const value = obj[name];
      if (!isFunction(value))
        return;
      descriptor.enumerable = false;
      if ("writable" in descriptor) {
        descriptor.writable = false;
        return;
      }
      if (!descriptor.set) {
        descriptor.set = () => {
          throw Error("Can not rewrite read-only method '" + name + "'");
        };
      }
    });
  };
  var toObjectSet = (arrayOrString, delimiter) => {
    const obj = {};
    const define2 = (arr) => {
      arr.forEach((value) => {
        obj[value] = true;
      });
    };
    isArray(arrayOrString) ? define2(arrayOrString) : define2(String(arrayOrString).split(delimiter));
    return obj;
  };
  var noop7 = () => {
  };
  var toFiniteNumber = (value, defaultValue) => {
    value = +value;
    return Number.isFinite(value) ? value : defaultValue;
  };
  var ALPHA = "abcdefghijklmnopqrstuvwxyz";
  var DIGIT = "0123456789";
  var ALPHABET = {
    DIGIT,
    ALPHA,
    ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT
  };
  var generateString = (size = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {
    let str = "";
    const { length } = alphabet;
    while (size--) {
      str += alphabet[Math.random() * length | 0];
    }
    return str;
  };
  function isSpecCompliantForm(thing) {
    return !!(thing && isFunction(thing.append) && thing[Symbol.toStringTag] === "FormData" && thing[Symbol.iterator]);
  }
  var toJSONObject = (obj) => {
    const stack = new Array(10);
    const visit = (source, i3) => {
      if (isObject2(source)) {
        if (stack.indexOf(source) >= 0) {
          return;
        }
        if (!("toJSON" in source)) {
          stack[i3] = source;
          const target = isArray(source) ? [] : {};
          forEach(source, (value, key2) => {
            const reducedValue = visit(value, i3 + 1);
            !isUndefined(reducedValue) && (target[key2] = reducedValue);
          });
          stack[i3] = void 0;
          return target;
        }
      }
      return source;
    };
    return visit(obj, 0);
  };
  var isAsyncFn = kindOfTest("AsyncFunction");
  var isThenable = (thing) => thing && (isObject2(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);
  var utils_default = {
    isArray,
    isArrayBuffer,
    isBuffer,
    isFormData,
    isArrayBufferView,
    isString: isString2,
    isNumber,
    isBoolean,
    isObject: isObject2,
    isPlainObject: isPlainObject3,
    isUndefined,
    isDate,
    isFile,
    isBlob,
    isRegExp,
    isFunction,
    isStream,
    isURLSearchParams,
    isTypedArray,
    isFileList,
    forEach,
    merge: merge3,
    extend,
    trim,
    stripBOM,
    inherits,
    toFlatObject,
    kindOf,
    kindOfTest,
    endsWith,
    toArray: toArray8,
    forEachEntry,
    matchAll,
    isHTMLForm,
    hasOwnProperty,
    hasOwnProp: hasOwnProperty,
    // an alias to avoid ESLint no-prototype-builtins detection
    reduceDescriptors,
    freezeMethods,
    toObjectSet,
    toCamelCase,
    noop: noop7,
    toFiniteNumber,
    findKey,
    global: _global,
    isContextDefined,
    ALPHABET,
    generateString,
    isSpecCompliantForm,
    toJSONObject,
    isAsyncFn,
    isThenable
  };

  // node_modules/axios/lib/core/AxiosError.js
  function AxiosError(message, code, config, request, response) {
    Error.call(this);
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, this.constructor);
    } else {
      this.stack = new Error().stack;
    }
    this.message = message;
    this.name = "AxiosError";
    code && (this.code = code);
    config && (this.config = config);
    request && (this.request = request);
    response && (this.response = response);
  }
  utils_default.inherits(AxiosError, Error, {
    toJSON: function toJSON() {
      return {
        // Standard
        message: this.message,
        name: this.name,
        // Microsoft
        description: this.description,
        number: this.number,
        // Mozilla
        fileName: this.fileName,
        lineNumber: this.lineNumber,
        columnNumber: this.columnNumber,
        stack: this.stack,
        // Axios
        config: utils_default.toJSONObject(this.config),
        code: this.code,
        status: this.response && this.response.status ? this.response.status : null
      };
    }
  });
  var prototype = AxiosError.prototype;
  var descriptors = {};
  [
    "ERR_BAD_OPTION_VALUE",
    "ERR_BAD_OPTION",
    "ECONNABORTED",
    "ETIMEDOUT",
    "ERR_NETWORK",
    "ERR_FR_TOO_MANY_REDIRECTS",
    "ERR_DEPRECATED",
    "ERR_BAD_RESPONSE",
    "ERR_BAD_REQUEST",
    "ERR_CANCELED",
    "ERR_NOT_SUPPORT",
    "ERR_INVALID_URL"
    // eslint-disable-next-line func-names
  ].forEach((code) => {
    descriptors[code] = { value: code };
  });
  Object.defineProperties(AxiosError, descriptors);
  Object.defineProperty(prototype, "isAxiosError", { value: true });
  AxiosError.from = (error2, code, config, request, response, customProps) => {
    const axiosError = Object.create(prototype);
    utils_default.toFlatObject(error2, axiosError, function filter3(obj) {
      return obj !== Error.prototype;
    }, (prop) => {
      return prop !== "isAxiosError";
    });
    AxiosError.call(axiosError, error2.message, code, config, request, response);
    axiosError.cause = error2;
    axiosError.name = error2.name;
    customProps && Object.assign(axiosError, customProps);
    return axiosError;
  };
  var AxiosError_default = AxiosError;

  // node_modules/axios/lib/helpers/null.js
  var null_default = null;

  // node_modules/axios/lib/helpers/toFormData.js
  function isVisitable(thing) {
    return utils_default.isPlainObject(thing) || utils_default.isArray(thing);
  }
  function removeBrackets(key2) {
    return utils_default.endsWith(key2, "[]") ? key2.slice(0, -2) : key2;
  }
  function renderKey(path2, key2, dots) {
    if (!path2)
      return key2;
    return path2.concat(key2).map(function each2(token, i3) {
      token = removeBrackets(token);
      return !dots && i3 ? "[" + token + "]" : token;
    }).join(dots ? "." : "");
  }
  function isFlatArray(arr) {
    return utils_default.isArray(arr) && !arr.some(isVisitable);
  }
  var predicates = utils_default.toFlatObject(utils_default, {}, null, function filter2(prop) {
    return /^is[A-Z]/.test(prop);
  });
  function toFormData(obj, formData, options) {
    if (!utils_default.isObject(obj)) {
      throw new TypeError("target must be an object");
    }
    formData = formData || new (null_default || FormData)();
    options = utils_default.toFlatObject(options, {
      metaTokens: true,
      dots: false,
      indexes: false
    }, false, function defined(option, source) {
      return !utils_default.isUndefined(source[option]);
    });
    const metaTokens = options.metaTokens;
    const visitor = options.visitor || defaultVisitor;
    const dots = options.dots;
    const indexes = options.indexes;
    const _Blob = options.Blob || typeof Blob !== "undefined" && Blob;
    const useBlob = _Blob && utils_default.isSpecCompliantForm(formData);
    if (!utils_default.isFunction(visitor)) {
      throw new TypeError("visitor must be a function");
    }
    function convertValue(value) {
      if (value === null)
        return "";
      if (utils_default.isDate(value)) {
        return value.toISOString();
      }
      if (!useBlob && utils_default.isBlob(value)) {
        throw new AxiosError_default("Blob is not supported. Use a Buffer instead.");
      }
      if (utils_default.isArrayBuffer(value) || utils_default.isTypedArray(value)) {
        return useBlob && typeof Blob === "function" ? new Blob([value]) : Buffer.from(value);
      }
      return value;
    }
    function defaultVisitor(value, key2, path2) {
      let arr = value;
      if (value && !path2 && typeof value === "object") {
        if (utils_default.endsWith(key2, "{}")) {
          key2 = metaTokens ? key2 : key2.slice(0, -2);
          value = JSON.stringify(value);
        } else if (utils_default.isArray(value) && isFlatArray(value) || (utils_default.isFileList(value) || utils_default.endsWith(key2, "[]")) && (arr = utils_default.toArray(value))) {
          key2 = removeBrackets(key2);
          arr.forEach(function each2(el, index2) {
            !(utils_default.isUndefined(el) || el === null) && formData.append(
              // eslint-disable-next-line no-nested-ternary
              indexes === true ? renderKey([key2], index2, dots) : indexes === null ? key2 : key2 + "[]",
              convertValue(el)
            );
          });
          return false;
        }
      }
      if (isVisitable(value)) {
        return true;
      }
      formData.append(renderKey(path2, key2, dots), convertValue(value));
      return false;
    }
    const stack = [];
    const exposedHelpers = Object.assign(predicates, {
      defaultVisitor,
      convertValue,
      isVisitable
    });
    function build(value, path2) {
      if (utils_default.isUndefined(value))
        return;
      if (stack.indexOf(value) !== -1) {
        throw Error("Circular reference detected in " + path2.join("."));
      }
      stack.push(value);
      utils_default.forEach(value, function each2(el, key2) {
        const result2 = !(utils_default.isUndefined(el) || el === null) && visitor.call(
          formData,
          el,
          utils_default.isString(key2) ? key2.trim() : key2,
          path2,
          exposedHelpers
        );
        if (result2 === true) {
          build(el, path2 ? path2.concat(key2) : [key2]);
        }
      });
      stack.pop();
    }
    if (!utils_default.isObject(obj)) {
      throw new TypeError("data must be an object");
    }
    build(obj);
    return formData;
  }
  var toFormData_default = toFormData;

  // node_modules/axios/lib/helpers/AxiosURLSearchParams.js
  function encode(str) {
    const charMap = {
      "!": "%21",
      "'": "%27",
      "(": "%28",
      ")": "%29",
      "~": "%7E",
      "%20": "+",
      "%00": "\0"
    };
    return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match2) {
      return charMap[match2];
    });
  }
  function AxiosURLSearchParams(params, options) {
    this._pairs = [];
    params && toFormData_default(params, this, options);
  }
  var prototype2 = AxiosURLSearchParams.prototype;
  prototype2.append = function append(name, value) {
    this._pairs.push([name, value]);
  };
  prototype2.toString = function toString2(encoder) {
    const _encode = encoder ? function(value) {
      return encoder.call(this, value, encode);
    } : encode;
    return this._pairs.map(function each2(pair) {
      return _encode(pair[0]) + "=" + _encode(pair[1]);
    }, "").join("&");
  };
  var AxiosURLSearchParams_default = AxiosURLSearchParams;

  // node_modules/axios/lib/helpers/buildURL.js
  function encode2(val) {
    return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
  }
  function buildURL(url2, params, options) {
    if (!params) {
      return url2;
    }
    const _encode = options && options.encode || encode2;
    const serializeFn = options && options.serialize;
    let serializedParams;
    if (serializeFn) {
      serializedParams = serializeFn(params, options);
    } else {
      serializedParams = utils_default.isURLSearchParams(params) ? params.toString() : new AxiosURLSearchParams_default(params, options).toString(_encode);
    }
    if (serializedParams) {
      const hashmarkIndex = url2.indexOf("#");
      if (hashmarkIndex !== -1) {
        url2 = url2.slice(0, hashmarkIndex);
      }
      url2 += (url2.indexOf("?") === -1 ? "?" : "&") + serializedParams;
    }
    return url2;
  }

  // node_modules/axios/lib/core/InterceptorManager.js
  var InterceptorManager = class {
    constructor() {
      this.handlers = [];
    }
    /**
     * Add a new interceptor to the stack
     *
     * @param {Function} fulfilled The function to handle `then` for a `Promise`
     * @param {Function} rejected The function to handle `reject` for a `Promise`
     *
     * @return {Number} An ID used to remove interceptor later
     */
    use(fulfilled, rejected, options) {
      this.handlers.push({
        fulfilled,
        rejected,
        synchronous: options ? options.synchronous : false,
        runWhen: options ? options.runWhen : null
      });
      return this.handlers.length - 1;
    }
    /**
     * Remove an interceptor from the stack
     *
     * @param {Number} id The ID that was returned by `use`
     *
     * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
     */
    eject(id2) {
      if (this.handlers[id2]) {
        this.handlers[id2] = null;
      }
    }
    /**
     * Clear all interceptors from the stack
     *
     * @returns {void}
     */
    clear() {
      if (this.handlers) {
        this.handlers = [];
      }
    }
    /**
     * Iterate over all the registered interceptors
     *
     * This method is particularly useful for skipping over any
     * interceptors that may have become `null` calling `eject`.
     *
     * @param {Function} fn The function to call for each interceptor
     *
     * @returns {void}
     */
    forEach(fn2) {
      utils_default.forEach(this.handlers, function forEachHandler(h2) {
        if (h2 !== null) {
          fn2(h2);
        }
      });
    }
  };
  var InterceptorManager_default = InterceptorManager;

  // node_modules/axios/lib/defaults/transitional.js
  var transitional_default = {
    silentJSONParsing: true,
    forcedJSONParsing: true,
    clarifyTimeoutError: false
  };

  // node_modules/axios/lib/platform/browser/classes/URLSearchParams.js
  var URLSearchParams_default = typeof URLSearchParams !== "undefined" ? URLSearchParams : AxiosURLSearchParams_default;

  // node_modules/axios/lib/platform/browser/classes/FormData.js
  var FormData_default = typeof FormData !== "undefined" ? FormData : null;

  // node_modules/axios/lib/platform/browser/classes/Blob.js
  var Blob_default = typeof Blob !== "undefined" ? Blob : null;

  // node_modules/axios/lib/platform/browser/index.js
  var isStandardBrowserEnv = (() => {
    let product;
    if (typeof navigator !== "undefined" && ((product = navigator.product) === "ReactNative" || product === "NativeScript" || product === "NS")) {
      return false;
    }
    return typeof window !== "undefined" && typeof document !== "undefined";
  })();
  var isStandardBrowserWebWorkerEnv = (() => {
    return typeof WorkerGlobalScope !== "undefined" && // eslint-disable-next-line no-undef
    self instanceof WorkerGlobalScope && typeof self.importScripts === "function";
  })();
  var browser_default = {
    isBrowser: true,
    classes: {
      URLSearchParams: URLSearchParams_default,
      FormData: FormData_default,
      Blob: Blob_default
    },
    isStandardBrowserEnv,
    isStandardBrowserWebWorkerEnv,
    protocols: ["http", "https", "file", "blob", "url", "data"]
  };

  // node_modules/axios/lib/helpers/toURLEncodedForm.js
  function toURLEncodedForm(data, options) {
    return toFormData_default(data, new browser_default.classes.URLSearchParams(), Object.assign({
      visitor: function(value, key2, path2, helpers) {
        if (browser_default.isNode && utils_default.isBuffer(value)) {
          this.append(key2, value.toString("base64"));
          return false;
        }
        return helpers.defaultVisitor.apply(this, arguments);
      }
    }, options));
  }

  // node_modules/axios/lib/helpers/formDataToJSON.js
  function parsePropPath(name) {
    return utils_default.matchAll(/\w+|\[(\w*)]/g, name).map((match2) => {
      return match2[0] === "[]" ? "" : match2[1] || match2[0];
    });
  }
  function arrayToObject(arr) {
    const obj = {};
    const keys2 = Object.keys(arr);
    let i3;
    const len = keys2.length;
    let key2;
    for (i3 = 0; i3 < len; i3++) {
      key2 = keys2[i3];
      obj[key2] = arr[key2];
    }
    return obj;
  }
  function formDataToJSON(formData) {
    function buildPath(path2, value, target, index2) {
      let name = path2[index2++];
      const isNumericKey = Number.isFinite(+name);
      const isLast = index2 >= path2.length;
      name = !name && utils_default.isArray(target) ? target.length : name;
      if (isLast) {
        if (utils_default.hasOwnProp(target, name)) {
          target[name] = [target[name], value];
        } else {
          target[name] = value;
        }
        return !isNumericKey;
      }
      if (!target[name] || !utils_default.isObject(target[name])) {
        target[name] = [];
      }
      const result2 = buildPath(path2, value, target[name], index2);
      if (result2 && utils_default.isArray(target[name])) {
        target[name] = arrayToObject(target[name]);
      }
      return !isNumericKey;
    }
    if (utils_default.isFormData(formData) && utils_default.isFunction(formData.entries)) {
      const obj = {};
      utils_default.forEachEntry(formData, (name, value) => {
        buildPath(parsePropPath(name), value, obj, 0);
      });
      return obj;
    }
    return null;
  }
  var formDataToJSON_default = formDataToJSON;

  // node_modules/axios/lib/defaults/index.js
  function stringifySafely(rawValue, parser, encoder) {
    if (utils_default.isString(rawValue)) {
      try {
        (parser || JSON.parse)(rawValue);
        return utils_default.trim(rawValue);
      } catch (e3) {
        if (e3.name !== "SyntaxError") {
          throw e3;
        }
      }
    }
    return (encoder || JSON.stringify)(rawValue);
  }
  var defaults = {
    transitional: transitional_default,
    adapter: ["xhr", "http"],
    transformRequest: [function transformRequest(data, headers) {
      const contentType = headers.getContentType() || "";
      const hasJSONContentType = contentType.indexOf("application/json") > -1;
      const isObjectPayload = utils_default.isObject(data);
      if (isObjectPayload && utils_default.isHTMLForm(data)) {
        data = new FormData(data);
      }
      const isFormData2 = utils_default.isFormData(data);
      if (isFormData2) {
        if (!hasJSONContentType) {
          return data;
        }
        return hasJSONContentType ? JSON.stringify(formDataToJSON_default(data)) : data;
      }
      if (utils_default.isArrayBuffer(data) || utils_default.isBuffer(data) || utils_default.isStream(data) || utils_default.isFile(data) || utils_default.isBlob(data)) {
        return data;
      }
      if (utils_default.isArrayBufferView(data)) {
        return data.buffer;
      }
      if (utils_default.isURLSearchParams(data)) {
        headers.setContentType("application/x-www-form-urlencoded;charset=utf-8", false);
        return data.toString();
      }
      let isFileList2;
      if (isObjectPayload) {
        if (contentType.indexOf("application/x-www-form-urlencoded") > -1) {
          return toURLEncodedForm(data, this.formSerializer).toString();
        }
        if ((isFileList2 = utils_default.isFileList(data)) || contentType.indexOf("multipart/form-data") > -1) {
          const _FormData = this.env && this.env.FormData;
          return toFormData_default(
            isFileList2 ? { "files[]": data } : data,
            _FormData && new _FormData(),
            this.formSerializer
          );
        }
      }
      if (isObjectPayload || hasJSONContentType) {
        headers.setContentType("application/json", false);
        return stringifySafely(data);
      }
      return data;
    }],
    transformResponse: [function transformResponse(data) {
      const transitional2 = this.transitional || defaults.transitional;
      const forcedJSONParsing = transitional2 && transitional2.forcedJSONParsing;
      const JSONRequested = this.responseType === "json";
      if (data && utils_default.isString(data) && (forcedJSONParsing && !this.responseType || JSONRequested)) {
        const silentJSONParsing = transitional2 && transitional2.silentJSONParsing;
        const strictJSONParsing = !silentJSONParsing && JSONRequested;
        try {
          return JSON.parse(data);
        } catch (e3) {
          if (strictJSONParsing) {
            if (e3.name === "SyntaxError") {
              throw AxiosError_default.from(e3, AxiosError_default.ERR_BAD_RESPONSE, this, null, this.response);
            }
            throw e3;
          }
        }
      }
      return data;
    }],
    /**
     * A timeout in milliseconds to abort a request. If set to 0 (default) a
     * timeout is not created.
     */
    timeout: 0,
    xsrfCookieName: "XSRF-TOKEN",
    xsrfHeaderName: "X-XSRF-TOKEN",
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: browser_default.classes.FormData,
      Blob: browser_default.classes.Blob
    },
    validateStatus: function validateStatus(status) {
      return status >= 200 && status < 300;
    },
    headers: {
      common: {
        "Accept": "application/json, text/plain, */*",
        "Content-Type": void 0
      }
    }
  };
  utils_default.forEach(["delete", "get", "head", "post", "put", "patch"], (method4) => {
    defaults.headers[method4] = {};
  });
  var defaults_default = defaults;

  // node_modules/axios/lib/helpers/parseHeaders.js
  var ignoreDuplicateOf = utils_default.toObjectSet([
    "age",
    "authorization",
    "content-length",
    "content-type",
    "etag",
    "expires",
    "from",
    "host",
    "if-modified-since",
    "if-unmodified-since",
    "last-modified",
    "location",
    "max-forwards",
    "proxy-authorization",
    "referer",
    "retry-after",
    "user-agent"
  ]);
  var parseHeaders_default = (rawHeaders) => {
    const parsed = {};
    let key2;
    let val;
    let i3;
    rawHeaders && rawHeaders.split("\n").forEach(function parser(line) {
      i3 = line.indexOf(":");
      key2 = line.substring(0, i3).trim().toLowerCase();
      val = line.substring(i3 + 1).trim();
      if (!key2 || parsed[key2] && ignoreDuplicateOf[key2]) {
        return;
      }
      if (key2 === "set-cookie") {
        if (parsed[key2]) {
          parsed[key2].push(val);
        } else {
          parsed[key2] = [val];
        }
      } else {
        parsed[key2] = parsed[key2] ? parsed[key2] + ", " + val : val;
      }
    });
    return parsed;
  };

  // node_modules/axios/lib/core/AxiosHeaders.js
  var $internals = Symbol("internals");
  function normalizeHeader(header) {
    return header && String(header).trim().toLowerCase();
  }
  function normalizeValue(value) {
    if (value === false || value == null) {
      return value;
    }
    return utils_default.isArray(value) ? value.map(normalizeValue) : String(value);
  }
  function parseTokens(str) {
    const tokens = /* @__PURE__ */ Object.create(null);
    const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
    let match2;
    while (match2 = tokensRE.exec(str)) {
      tokens[match2[1]] = match2[2];
    }
    return tokens;
  }
  var isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());
  function matchHeaderValue(context2, value, header, filter3, isHeaderNameFilter) {
    if (utils_default.isFunction(filter3)) {
      return filter3.call(this, value, header);
    }
    if (isHeaderNameFilter) {
      value = header;
    }
    if (!utils_default.isString(value))
      return;
    if (utils_default.isString(filter3)) {
      return value.indexOf(filter3) !== -1;
    }
    if (utils_default.isRegExp(filter3)) {
      return filter3.test(value);
    }
  }
  function formatHeader(header) {
    return header.trim().toLowerCase().replace(/([a-z\d])(\w*)/g, (w2, char, str) => {
      return char.toUpperCase() + str;
    });
  }
  function buildAccessors(obj, header) {
    const accessorName = utils_default.toCamelCase(" " + header);
    ["get", "set", "has"].forEach((methodName) => {
      Object.defineProperty(obj, methodName + accessorName, {
        value: function(arg1, arg2, arg3) {
          return this[methodName].call(this, header, arg1, arg2, arg3);
        },
        configurable: true
      });
    });
  }
  var AxiosHeaders = class {
    constructor(headers) {
      headers && this.set(headers);
    }
    set(header, valueOrRewrite, rewrite) {
      const self2 = this;
      function setHeader(_value, _header, _rewrite) {
        const lHeader = normalizeHeader(_header);
        if (!lHeader) {
          throw new Error("header name must be a non-empty string");
        }
        const key2 = utils_default.findKey(self2, lHeader);
        if (!key2 || self2[key2] === void 0 || _rewrite === true || _rewrite === void 0 && self2[key2] !== false) {
          self2[key2 || _header] = normalizeValue(_value);
        }
      }
      const setHeaders = (headers, _rewrite) => utils_default.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));
      if (utils_default.isPlainObject(header) || header instanceof this.constructor) {
        setHeaders(header, valueOrRewrite);
      } else if (utils_default.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
        setHeaders(parseHeaders_default(header), valueOrRewrite);
      } else {
        header != null && setHeader(valueOrRewrite, header, rewrite);
      }
      return this;
    }
    get(header, parser) {
      header = normalizeHeader(header);
      if (header) {
        const key2 = utils_default.findKey(this, header);
        if (key2) {
          const value = this[key2];
          if (!parser) {
            return value;
          }
          if (parser === true) {
            return parseTokens(value);
          }
          if (utils_default.isFunction(parser)) {
            return parser.call(this, value, key2);
          }
          if (utils_default.isRegExp(parser)) {
            return parser.exec(value);
          }
          throw new TypeError("parser must be boolean|regexp|function");
        }
      }
    }
    has(header, matcher) {
      header = normalizeHeader(header);
      if (header) {
        const key2 = utils_default.findKey(this, header);
        return !!(key2 && this[key2] !== void 0 && (!matcher || matchHeaderValue(this, this[key2], key2, matcher)));
      }
      return false;
    }
    delete(header, matcher) {
      const self2 = this;
      let deleted = false;
      function deleteHeader(_header) {
        _header = normalizeHeader(_header);
        if (_header) {
          const key2 = utils_default.findKey(self2, _header);
          if (key2 && (!matcher || matchHeaderValue(self2, self2[key2], key2, matcher))) {
            delete self2[key2];
            deleted = true;
          }
        }
      }
      if (utils_default.isArray(header)) {
        header.forEach(deleteHeader);
      } else {
        deleteHeader(header);
      }
      return deleted;
    }
    clear(matcher) {
      const keys2 = Object.keys(this);
      let i3 = keys2.length;
      let deleted = false;
      while (i3--) {
        const key2 = keys2[i3];
        if (!matcher || matchHeaderValue(this, this[key2], key2, matcher, true)) {
          delete this[key2];
          deleted = true;
        }
      }
      return deleted;
    }
    normalize(format3) {
      const self2 = this;
      const headers = {};
      utils_default.forEach(this, (value, header) => {
        const key2 = utils_default.findKey(headers, header);
        if (key2) {
          self2[key2] = normalizeValue(value);
          delete self2[header];
          return;
        }
        const normalized = format3 ? formatHeader(header) : String(header).trim();
        if (normalized !== header) {
          delete self2[header];
        }
        self2[normalized] = normalizeValue(value);
        headers[normalized] = true;
      });
      return this;
    }
    concat(...targets) {
      return this.constructor.concat(this, ...targets);
    }
    toJSON(asStrings) {
      const obj = /* @__PURE__ */ Object.create(null);
      utils_default.forEach(this, (value, header) => {
        value != null && value !== false && (obj[header] = asStrings && utils_default.isArray(value) ? value.join(", ") : value);
      });
      return obj;
    }
    [Symbol.iterator]() {
      return Object.entries(this.toJSON())[Symbol.iterator]();
    }
    toString() {
      return Object.entries(this.toJSON()).map(([header, value]) => header + ": " + value).join("\n");
    }
    get [Symbol.toStringTag]() {
      return "AxiosHeaders";
    }
    static from(thing) {
      return thing instanceof this ? thing : new this(thing);
    }
    static concat(first, ...targets) {
      const computed = new this(first);
      targets.forEach((target) => computed.set(target));
      return computed;
    }
    static accessor(header) {
      const internals = this[$internals] = this[$internals] = {
        accessors: {}
      };
      const accessors = internals.accessors;
      const prototype3 = this.prototype;
      function defineAccessor(_header) {
        const lHeader = normalizeHeader(_header);
        if (!accessors[lHeader]) {
          buildAccessors(prototype3, _header);
          accessors[lHeader] = true;
        }
      }
      utils_default.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);
      return this;
    }
  };
  AxiosHeaders.accessor(["Content-Type", "Content-Length", "Accept", "Accept-Encoding", "User-Agent", "Authorization"]);
  utils_default.reduceDescriptors(AxiosHeaders.prototype, ({ value }, key2) => {
    let mapped = key2[0].toUpperCase() + key2.slice(1);
    return {
      get: () => value,
      set(headerValue) {
        this[mapped] = headerValue;
      }
    };
  });
  utils_default.freezeMethods(AxiosHeaders);
  var AxiosHeaders_default = AxiosHeaders;

  // node_modules/axios/lib/core/transformData.js
  function transformData(fns, response) {
    const config = this || defaults_default;
    const context2 = response || config;
    const headers = AxiosHeaders_default.from(context2.headers);
    let data = context2.data;
    utils_default.forEach(fns, function transform(fn2) {
      data = fn2.call(config, data, headers.normalize(), response ? response.status : void 0);
    });
    headers.normalize();
    return data;
  }

  // node_modules/axios/lib/cancel/isCancel.js
  function isCancel(value) {
    return !!(value && value.__CANCEL__);
  }

  // node_modules/axios/lib/cancel/CanceledError.js
  function CanceledError(message, config, request) {
    AxiosError_default.call(this, message == null ? "canceled" : message, AxiosError_default.ERR_CANCELED, config, request);
    this.name = "CanceledError";
  }
  utils_default.inherits(CanceledError, AxiosError_default, {
    __CANCEL__: true
  });
  var CanceledError_default = CanceledError;

  // node_modules/axios/lib/core/settle.js
  function settle(resolve, reject, response) {
    const validateStatus2 = response.config.validateStatus;
    if (!response.status || !validateStatus2 || validateStatus2(response.status)) {
      resolve(response);
    } else {
      reject(new AxiosError_default(
        "Request failed with status code " + response.status,
        [AxiosError_default.ERR_BAD_REQUEST, AxiosError_default.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
        response.config,
        response.request,
        response
      ));
    }
  }

  // node_modules/axios/lib/helpers/cookies.js
  var cookies_default = browser_default.isStandardBrowserEnv ? (
    // Standard browser envs support document.cookie
    function standardBrowserEnv() {
      return {
        write: function write(name, value, expires, path2, domain, secure) {
          const cookie = [];
          cookie.push(name + "=" + encodeURIComponent(value));
          if (utils_default.isNumber(expires)) {
            cookie.push("expires=" + new Date(expires).toGMTString());
          }
          if (utils_default.isString(path2)) {
            cookie.push("path=" + path2);
          }
          if (utils_default.isString(domain)) {
            cookie.push("domain=" + domain);
          }
          if (secure === true) {
            cookie.push("secure");
          }
          document.cookie = cookie.join("; ");
        },
        read: function read(name) {
          const match2 = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
          return match2 ? decodeURIComponent(match2[3]) : null;
        },
        remove: function remove2(name) {
          this.write(name, "", Date.now() - 864e5);
        }
      };
    }()
  ) : (
    // Non standard browser env (web workers, react-native) lack needed support.
    function nonStandardBrowserEnv() {
      return {
        write: function write() {
        },
        read: function read() {
          return null;
        },
        remove: function remove2() {
        }
      };
    }()
  );

  // node_modules/axios/lib/helpers/isAbsoluteURL.js
  function isAbsoluteURL(url2) {
    return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url2);
  }

  // node_modules/axios/lib/helpers/combineURLs.js
  function combineURLs(baseURL, relativeURL) {
    return relativeURL ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
  }

  // node_modules/axios/lib/core/buildFullPath.js
  function buildFullPath(baseURL, requestedURL) {
    if (baseURL && !isAbsoluteURL(requestedURL)) {
      return combineURLs(baseURL, requestedURL);
    }
    return requestedURL;
  }

  // node_modules/axios/lib/helpers/isURLSameOrigin.js
  var isURLSameOrigin_default = browser_default.isStandardBrowserEnv ? (
    // Standard browser envs have full support of the APIs needed to test
    // whether the request URL is of the same origin as current location.
    function standardBrowserEnv2() {
      const msie = /(msie|trident)/i.test(navigator.userAgent);
      const urlParsingNode = document.createElement("a");
      let originURL;
      function resolveURL(url2) {
        let href = url2;
        if (msie) {
          urlParsingNode.setAttribute("href", href);
          href = urlParsingNode.href;
        }
        urlParsingNode.setAttribute("href", href);
        return {
          href: urlParsingNode.href,
          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
          host: urlParsingNode.host,
          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
          hostname: urlParsingNode.hostname,
          port: urlParsingNode.port,
          pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
        };
      }
      originURL = resolveURL(window.location.href);
      return function isURLSameOrigin(requestURL) {
        const parsed = utils_default.isString(requestURL) ? resolveURL(requestURL) : requestURL;
        return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
      };
    }()
  ) : (
    // Non standard browser envs (web workers, react-native) lack needed support.
    function nonStandardBrowserEnv2() {
      return function isURLSameOrigin() {
        return true;
      };
    }()
  );

  // node_modules/axios/lib/helpers/parseProtocol.js
  function parseProtocol(url2) {
    const match2 = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url2);
    return match2 && match2[1] || "";
  }

  // node_modules/axios/lib/helpers/speedometer.js
  function speedometer(samplesCount, min) {
    samplesCount = samplesCount || 10;
    const bytes = new Array(samplesCount);
    const timestamps = new Array(samplesCount);
    let head = 0;
    let tail = 0;
    let firstSampleTS;
    min = min !== void 0 ? min : 1e3;
    return function push(chunkLength) {
      const now2 = Date.now();
      const startedAt = timestamps[tail];
      if (!firstSampleTS) {
        firstSampleTS = now2;
      }
      bytes[head] = chunkLength;
      timestamps[head] = now2;
      let i3 = tail;
      let bytesCount = 0;
      while (i3 !== head) {
        bytesCount += bytes[i3++];
        i3 = i3 % samplesCount;
      }
      head = (head + 1) % samplesCount;
      if (head === tail) {
        tail = (tail + 1) % samplesCount;
      }
      if (now2 - firstSampleTS < min) {
        return;
      }
      const passed = startedAt && now2 - startedAt;
      return passed ? Math.round(bytesCount * 1e3 / passed) : void 0;
    };
  }
  var speedometer_default = speedometer;

  // node_modules/axios/lib/adapters/xhr.js
  function progressEventReducer(listener2, isDownloadStream) {
    let bytesNotified = 0;
    const _speedometer = speedometer_default(50, 250);
    return (e3) => {
      const loaded = e3.loaded;
      const total = e3.lengthComputable ? e3.total : void 0;
      const progressBytes = loaded - bytesNotified;
      const rate = _speedometer(progressBytes);
      const inRange = loaded <= total;
      bytesNotified = loaded;
      const data = {
        loaded,
        total,
        progress: total ? loaded / total : void 0,
        bytes: progressBytes,
        rate: rate ? rate : void 0,
        estimated: rate && total && inRange ? (total - loaded) / rate : void 0,
        event: e3
      };
      data[isDownloadStream ? "download" : "upload"] = true;
      listener2(data);
    };
  }
  var isXHRAdapterSupported = typeof XMLHttpRequest !== "undefined";
  var xhr_default = isXHRAdapterSupported && function(config) {
    return new Promise(function dispatchXhrRequest(resolve, reject) {
      let requestData = config.data;
      const requestHeaders = AxiosHeaders_default.from(config.headers).normalize();
      const responseType = config.responseType;
      let onCanceled;
      function done() {
        if (config.cancelToken) {
          config.cancelToken.unsubscribe(onCanceled);
        }
        if (config.signal) {
          config.signal.removeEventListener("abort", onCanceled);
        }
      }
      let contentType;
      if (utils_default.isFormData(requestData)) {
        if (browser_default.isStandardBrowserEnv || browser_default.isStandardBrowserWebWorkerEnv) {
          requestHeaders.setContentType(false);
        } else if (!requestHeaders.getContentType(/^\s*multipart\/form-data/)) {
          requestHeaders.setContentType("multipart/form-data");
        } else if (utils_default.isString(contentType = requestHeaders.getContentType())) {
          requestHeaders.setContentType(contentType.replace(/^\s*(multipart\/form-data);+/, "$1"));
        }
      }
      let request = new XMLHttpRequest();
      if (config.auth) {
        const username = config.auth.username || "";
        const password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : "";
        requestHeaders.set("Authorization", "Basic " + btoa(username + ":" + password));
      }
      const fullPath = buildFullPath(config.baseURL, config.url);
      request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);
      request.timeout = config.timeout;
      function onloadend() {
        if (!request) {
          return;
        }
        const responseHeaders = AxiosHeaders_default.from(
          "getAllResponseHeaders" in request && request.getAllResponseHeaders()
        );
        const responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
        const response = {
          data: responseData,
          status: request.status,
          statusText: request.statusText,
          headers: responseHeaders,
          config,
          request
        };
        settle(function _resolve(value) {
          resolve(value);
          done();
        }, function _reject(err) {
          reject(err);
          done();
        }, response);
        request = null;
      }
      if ("onloadend" in request) {
        request.onloadend = onloadend;
      } else {
        request.onreadystatechange = function handleLoad() {
          if (!request || request.readyState !== 4) {
            return;
          }
          if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
            return;
          }
          setTimeout(onloadend);
        };
      }
      request.onabort = function handleAbort() {
        if (!request) {
          return;
        }
        reject(new AxiosError_default("Request aborted", AxiosError_default.ECONNABORTED, config, request));
        request = null;
      };
      request.onerror = function handleError() {
        reject(new AxiosError_default("Network Error", AxiosError_default.ERR_NETWORK, config, request));
        request = null;
      };
      request.ontimeout = function handleTimeout() {
        let timeoutErrorMessage = config.timeout ? "timeout of " + config.timeout + "ms exceeded" : "timeout exceeded";
        const transitional2 = config.transitional || transitional_default;
        if (config.timeoutErrorMessage) {
          timeoutErrorMessage = config.timeoutErrorMessage;
        }
        reject(new AxiosError_default(
          timeoutErrorMessage,
          transitional2.clarifyTimeoutError ? AxiosError_default.ETIMEDOUT : AxiosError_default.ECONNABORTED,
          config,
          request
        ));
        request = null;
      };
      if (browser_default.isStandardBrowserEnv) {
        const xsrfValue = (config.withCredentials || isURLSameOrigin_default(fullPath)) && config.xsrfCookieName && cookies_default.read(config.xsrfCookieName);
        if (xsrfValue) {
          requestHeaders.set(config.xsrfHeaderName, xsrfValue);
        }
      }
      requestData === void 0 && requestHeaders.setContentType(null);
      if ("setRequestHeader" in request) {
        utils_default.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key2) {
          request.setRequestHeader(key2, val);
        });
      }
      if (!utils_default.isUndefined(config.withCredentials)) {
        request.withCredentials = !!config.withCredentials;
      }
      if (responseType && responseType !== "json") {
        request.responseType = config.responseType;
      }
      if (typeof config.onDownloadProgress === "function") {
        request.addEventListener("progress", progressEventReducer(config.onDownloadProgress, true));
      }
      if (typeof config.onUploadProgress === "function" && request.upload) {
        request.upload.addEventListener("progress", progressEventReducer(config.onUploadProgress));
      }
      if (config.cancelToken || config.signal) {
        onCanceled = (cancel2) => {
          if (!request) {
            return;
          }
          reject(!cancel2 || cancel2.type ? new CanceledError_default(null, config, request) : cancel2);
          request.abort();
          request = null;
        };
        config.cancelToken && config.cancelToken.subscribe(onCanceled);
        if (config.signal) {
          config.signal.aborted ? onCanceled() : config.signal.addEventListener("abort", onCanceled);
        }
      }
      const protocol = parseProtocol(fullPath);
      if (protocol && browser_default.protocols.indexOf(protocol) === -1) {
        reject(new AxiosError_default("Unsupported protocol " + protocol + ":", AxiosError_default.ERR_BAD_REQUEST, config));
        return;
      }
      request.send(requestData || null);
    });
  };

  // node_modules/axios/lib/adapters/adapters.js
  var knownAdapters = {
    http: null_default,
    xhr: xhr_default
  };
  utils_default.forEach(knownAdapters, (fn2, value) => {
    if (fn2) {
      try {
        Object.defineProperty(fn2, "name", { value });
      } catch (e3) {
      }
      Object.defineProperty(fn2, "adapterName", { value });
    }
  });
  var renderReason = (reason) => `- ${reason}`;
  var isResolvedHandle = (adapter) => utils_default.isFunction(adapter) || adapter === null || adapter === false;
  var adapters_default = {
    getAdapter: (adapters) => {
      adapters = utils_default.isArray(adapters) ? adapters : [adapters];
      const { length } = adapters;
      let nameOrAdapter;
      let adapter;
      const rejectedReasons = {};
      for (let i3 = 0; i3 < length; i3++) {
        nameOrAdapter = adapters[i3];
        let id2;
        adapter = nameOrAdapter;
        if (!isResolvedHandle(nameOrAdapter)) {
          adapter = knownAdapters[(id2 = String(nameOrAdapter)).toLowerCase()];
          if (adapter === void 0) {
            throw new AxiosError_default(`Unknown adapter '${id2}'`);
          }
        }
        if (adapter) {
          break;
        }
        rejectedReasons[id2 || "#" + i3] = adapter;
      }
      if (!adapter) {
        const reasons = Object.entries(rejectedReasons).map(
          ([id2, state]) => `adapter ${id2} ` + (state === false ? "is not supported by the environment" : "is not available in the build")
        );
        let s2 = length ? reasons.length > 1 ? "since :\n" + reasons.map(renderReason).join("\n") : " " + renderReason(reasons[0]) : "as no adapter specified";
        throw new AxiosError_default(
          `There is no suitable adapter to dispatch the request ` + s2,
          "ERR_NOT_SUPPORT"
        );
      }
      return adapter;
    },
    adapters: knownAdapters
  };

  // node_modules/axios/lib/core/dispatchRequest.js
  function throwIfCancellationRequested(config) {
    if (config.cancelToken) {
      config.cancelToken.throwIfRequested();
    }
    if (config.signal && config.signal.aborted) {
      throw new CanceledError_default(null, config);
    }
  }
  function dispatchRequest(config) {
    throwIfCancellationRequested(config);
    config.headers = AxiosHeaders_default.from(config.headers);
    config.data = transformData.call(
      config,
      config.transformRequest
    );
    if (["post", "put", "patch"].indexOf(config.method) !== -1) {
      config.headers.setContentType("application/x-www-form-urlencoded", false);
    }
    const adapter = adapters_default.getAdapter(config.adapter || defaults_default.adapter);
    return adapter(config).then(function onAdapterResolution(response) {
      throwIfCancellationRequested(config);
      response.data = transformData.call(
        config,
        config.transformResponse,
        response
      );
      response.headers = AxiosHeaders_default.from(response.headers);
      return response;
    }, function onAdapterRejection(reason) {
      if (!isCancel(reason)) {
        throwIfCancellationRequested(config);
        if (reason && reason.response) {
          reason.response.data = transformData.call(
            config,
            config.transformResponse,
            reason.response
          );
          reason.response.headers = AxiosHeaders_default.from(reason.response.headers);
        }
      }
      return Promise.reject(reason);
    });
  }

  // node_modules/axios/lib/core/mergeConfig.js
  var headersToObject = (thing) => thing instanceof AxiosHeaders_default ? thing.toJSON() : thing;
  function mergeConfig(config1, config2) {
    config2 = config2 || {};
    const config = {};
    function getMergedValue(target, source, caseless) {
      if (utils_default.isPlainObject(target) && utils_default.isPlainObject(source)) {
        return utils_default.merge.call({ caseless }, target, source);
      } else if (utils_default.isPlainObject(source)) {
        return utils_default.merge({}, source);
      } else if (utils_default.isArray(source)) {
        return source.slice();
      }
      return source;
    }
    function mergeDeepProperties(a2, b2, caseless) {
      if (!utils_default.isUndefined(b2)) {
        return getMergedValue(a2, b2, caseless);
      } else if (!utils_default.isUndefined(a2)) {
        return getMergedValue(void 0, a2, caseless);
      }
    }
    function valueFromConfig2(a2, b2) {
      if (!utils_default.isUndefined(b2)) {
        return getMergedValue(void 0, b2);
      }
    }
    function defaultToConfig2(a2, b2) {
      if (!utils_default.isUndefined(b2)) {
        return getMergedValue(void 0, b2);
      } else if (!utils_default.isUndefined(a2)) {
        return getMergedValue(void 0, a2);
      }
    }
    function mergeDirectKeys(a2, b2, prop) {
      if (prop in config2) {
        return getMergedValue(a2, b2);
      } else if (prop in config1) {
        return getMergedValue(void 0, a2);
      }
    }
    const mergeMap = {
      url: valueFromConfig2,
      method: valueFromConfig2,
      data: valueFromConfig2,
      baseURL: defaultToConfig2,
      transformRequest: defaultToConfig2,
      transformResponse: defaultToConfig2,
      paramsSerializer: defaultToConfig2,
      timeout: defaultToConfig2,
      timeoutMessage: defaultToConfig2,
      withCredentials: defaultToConfig2,
      adapter: defaultToConfig2,
      responseType: defaultToConfig2,
      xsrfCookieName: defaultToConfig2,
      xsrfHeaderName: defaultToConfig2,
      onUploadProgress: defaultToConfig2,
      onDownloadProgress: defaultToConfig2,
      decompress: defaultToConfig2,
      maxContentLength: defaultToConfig2,
      maxBodyLength: defaultToConfig2,
      beforeRedirect: defaultToConfig2,
      transport: defaultToConfig2,
      httpAgent: defaultToConfig2,
      httpsAgent: defaultToConfig2,
      cancelToken: defaultToConfig2,
      socketPath: defaultToConfig2,
      responseEncoding: defaultToConfig2,
      validateStatus: mergeDirectKeys,
      headers: (a2, b2) => mergeDeepProperties(headersToObject(a2), headersToObject(b2), true)
    };
    utils_default.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {
      const merge4 = mergeMap[prop] || mergeDeepProperties;
      const configValue = merge4(config1[prop], config2[prop], prop);
      utils_default.isUndefined(configValue) && merge4 !== mergeDirectKeys || (config[prop] = configValue);
    });
    return config;
  }

  // node_modules/axios/lib/env/data.js
  var VERSION = "1.5.1";

  // node_modules/axios/lib/helpers/validator.js
  var validators2 = {};
  ["object", "boolean", "number", "function", "string", "symbol"].forEach((type4, i3) => {
    validators2[type4] = function validator(thing) {
      return typeof thing === type4 || "a" + (i3 < 1 ? "n " : " ") + type4;
    };
  });
  var deprecatedWarnings = {};
  validators2.transitional = function transitional(validator, version2, message) {
    function formatMessage(opt, desc) {
      return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
    }
    return (value, opt, opts) => {
      if (validator === false) {
        throw new AxiosError_default(
          formatMessage(opt, " has been removed" + (version2 ? " in " + version2 : "")),
          AxiosError_default.ERR_DEPRECATED
        );
      }
      if (version2 && !deprecatedWarnings[opt]) {
        deprecatedWarnings[opt] = true;
        console.warn(
          formatMessage(
            opt,
            " has been deprecated since v" + version2 + " and will be removed in the near future"
          )
        );
      }
      return validator ? validator(value, opt, opts) : true;
    };
  };
  function assertOptions(options, schema, allowUnknown) {
    if (typeof options !== "object") {
      throw new AxiosError_default("options must be an object", AxiosError_default.ERR_BAD_OPTION_VALUE);
    }
    const keys2 = Object.keys(options);
    let i3 = keys2.length;
    while (i3-- > 0) {
      const opt = keys2[i3];
      const validator = schema[opt];
      if (validator) {
        const value = options[opt];
        const result2 = value === void 0 || validator(value, opt, options);
        if (result2 !== true) {
          throw new AxiosError_default("option " + opt + " must be " + result2, AxiosError_default.ERR_BAD_OPTION_VALUE);
        }
        continue;
      }
      if (allowUnknown !== true) {
        throw new AxiosError_default("Unknown option " + opt, AxiosError_default.ERR_BAD_OPTION);
      }
    }
  }
  var validator_default = {
    assertOptions,
    validators: validators2
  };

  // node_modules/axios/lib/core/Axios.js
  var validators3 = validator_default.validators;
  var Axios = class {
    constructor(instanceConfig) {
      this.defaults = instanceConfig;
      this.interceptors = {
        request: new InterceptorManager_default(),
        response: new InterceptorManager_default()
      };
    }
    /**
     * Dispatch a request
     *
     * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
     * @param {?Object} config
     *
     * @returns {Promise} The Promise to be fulfilled
     */
    request(configOrUrl, config) {
      if (typeof configOrUrl === "string") {
        config = config || {};
        config.url = configOrUrl;
      } else {
        config = configOrUrl || {};
      }
      config = mergeConfig(this.defaults, config);
      const { transitional: transitional2, paramsSerializer, headers } = config;
      if (transitional2 !== void 0) {
        validator_default.assertOptions(transitional2, {
          silentJSONParsing: validators3.transitional(validators3.boolean),
          forcedJSONParsing: validators3.transitional(validators3.boolean),
          clarifyTimeoutError: validators3.transitional(validators3.boolean)
        }, false);
      }
      if (paramsSerializer != null) {
        if (utils_default.isFunction(paramsSerializer)) {
          config.paramsSerializer = {
            serialize: paramsSerializer
          };
        } else {
          validator_default.assertOptions(paramsSerializer, {
            encode: validators3.function,
            serialize: validators3.function
          }, true);
        }
      }
      config.method = (config.method || this.defaults.method || "get").toLowerCase();
      let contextHeaders = headers && utils_default.merge(
        headers.common,
        headers[config.method]
      );
      headers && utils_default.forEach(
        ["delete", "get", "head", "post", "put", "patch", "common"],
        (method4) => {
          delete headers[method4];
        }
      );
      config.headers = AxiosHeaders_default.concat(contextHeaders, headers);
      const requestInterceptorChain = [];
      let synchronousRequestInterceptors = true;
      this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
        if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) {
          return;
        }
        synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
        requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
      });
      const responseInterceptorChain = [];
      this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
        responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
      });
      let promise2;
      let i3 = 0;
      let len;
      if (!synchronousRequestInterceptors) {
        const chain = [dispatchRequest.bind(this), void 0];
        chain.unshift.apply(chain, requestInterceptorChain);
        chain.push.apply(chain, responseInterceptorChain);
        len = chain.length;
        promise2 = Promise.resolve(config);
        while (i3 < len) {
          promise2 = promise2.then(chain[i3++], chain[i3++]);
        }
        return promise2;
      }
      len = requestInterceptorChain.length;
      let newConfig = config;
      i3 = 0;
      while (i3 < len) {
        const onFulfilled = requestInterceptorChain[i3++];
        const onRejected = requestInterceptorChain[i3++];
        try {
          newConfig = onFulfilled(newConfig);
        } catch (error2) {
          onRejected.call(this, error2);
          break;
        }
      }
      try {
        promise2 = dispatchRequest.call(this, newConfig);
      } catch (error2) {
        return Promise.reject(error2);
      }
      i3 = 0;
      len = responseInterceptorChain.length;
      while (i3 < len) {
        promise2 = promise2.then(responseInterceptorChain[i3++], responseInterceptorChain[i3++]);
      }
      return promise2;
    }
    getUri(config) {
      config = mergeConfig(this.defaults, config);
      const fullPath = buildFullPath(config.baseURL, config.url);
      return buildURL(fullPath, config.params, config.paramsSerializer);
    }
  };
  utils_default.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method4) {
    Axios.prototype[method4] = function(url2, config) {
      return this.request(mergeConfig(config || {}, {
        method: method4,
        url: url2,
        data: (config || {}).data
      }));
    };
  });
  utils_default.forEach(["post", "put", "patch"], function forEachMethodWithData(method4) {
    function generateHTTPMethod(isForm) {
      return function httpMethod(url2, data, config) {
        return this.request(mergeConfig(config || {}, {
          method: method4,
          headers: isForm ? {
            "Content-Type": "multipart/form-data"
          } : {},
          url: url2,
          data
        }));
      };
    }
    Axios.prototype[method4] = generateHTTPMethod();
    Axios.prototype[method4 + "Form"] = generateHTTPMethod(true);
  });
  var Axios_default = Axios;

  // node_modules/axios/lib/cancel/CancelToken.js
  var CancelToken = class _CancelToken {
    constructor(executor) {
      if (typeof executor !== "function") {
        throw new TypeError("executor must be a function.");
      }
      let resolvePromise;
      this.promise = new Promise(function promiseExecutor(resolve) {
        resolvePromise = resolve;
      });
      const token = this;
      this.promise.then((cancel2) => {
        if (!token._listeners)
          return;
        let i3 = token._listeners.length;
        while (i3-- > 0) {
          token._listeners[i3](cancel2);
        }
        token._listeners = null;
      });
      this.promise.then = (onfulfilled) => {
        let _resolve;
        const promise2 = new Promise((resolve) => {
          token.subscribe(resolve);
          _resolve = resolve;
        }).then(onfulfilled);
        promise2.cancel = function reject() {
          token.unsubscribe(_resolve);
        };
        return promise2;
      };
      executor(function cancel2(message, config, request) {
        if (token.reason) {
          return;
        }
        token.reason = new CanceledError_default(message, config, request);
        resolvePromise(token.reason);
      });
    }
    /**
     * Throws a `CanceledError` if cancellation has been requested.
     */
    throwIfRequested() {
      if (this.reason) {
        throw this.reason;
      }
    }
    /**
     * Subscribe to the cancel signal
     */
    subscribe(listener2) {
      if (this.reason) {
        listener2(this.reason);
        return;
      }
      if (this._listeners) {
        this._listeners.push(listener2);
      } else {
        this._listeners = [listener2];
      }
    }
    /**
     * Unsubscribe from the cancel signal
     */
    unsubscribe(listener2) {
      if (!this._listeners) {
        return;
      }
      const index2 = this._listeners.indexOf(listener2);
      if (index2 !== -1) {
        this._listeners.splice(index2, 1);
      }
    }
    /**
     * Returns an object that contains a new `CancelToken` and a function that, when called,
     * cancels the `CancelToken`.
     */
    static source() {
      let cancel2;
      const token = new _CancelToken(function executor(c2) {
        cancel2 = c2;
      });
      return {
        token,
        cancel: cancel2
      };
    }
  };
  var CancelToken_default = CancelToken;

  // node_modules/axios/lib/helpers/spread.js
  function spread(callback) {
    return function wrap(arr) {
      return callback.apply(null, arr);
    };
  }

  // node_modules/axios/lib/helpers/isAxiosError.js
  function isAxiosError(payload) {
    return utils_default.isObject(payload) && payload.isAxiosError === true;
  }

  // node_modules/axios/lib/helpers/HttpStatusCode.js
  var HttpStatusCode = {
    Continue: 100,
    SwitchingProtocols: 101,
    Processing: 102,
    EarlyHints: 103,
    Ok: 200,
    Created: 201,
    Accepted: 202,
    NonAuthoritativeInformation: 203,
    NoContent: 204,
    ResetContent: 205,
    PartialContent: 206,
    MultiStatus: 207,
    AlreadyReported: 208,
    ImUsed: 226,
    MultipleChoices: 300,
    MovedPermanently: 301,
    Found: 302,
    SeeOther: 303,
    NotModified: 304,
    UseProxy: 305,
    Unused: 306,
    TemporaryRedirect: 307,
    PermanentRedirect: 308,
    BadRequest: 400,
    Unauthorized: 401,
    PaymentRequired: 402,
    Forbidden: 403,
    NotFound: 404,
    MethodNotAllowed: 405,
    NotAcceptable: 406,
    ProxyAuthenticationRequired: 407,
    RequestTimeout: 408,
    Conflict: 409,
    Gone: 410,
    LengthRequired: 411,
    PreconditionFailed: 412,
    PayloadTooLarge: 413,
    UriTooLong: 414,
    UnsupportedMediaType: 415,
    RangeNotSatisfiable: 416,
    ExpectationFailed: 417,
    ImATeapot: 418,
    MisdirectedRequest: 421,
    UnprocessableEntity: 422,
    Locked: 423,
    FailedDependency: 424,
    TooEarly: 425,
    UpgradeRequired: 426,
    PreconditionRequired: 428,
    TooManyRequests: 429,
    RequestHeaderFieldsTooLarge: 431,
    UnavailableForLegalReasons: 451,
    InternalServerError: 500,
    NotImplemented: 501,
    BadGateway: 502,
    ServiceUnavailable: 503,
    GatewayTimeout: 504,
    HttpVersionNotSupported: 505,
    VariantAlsoNegotiates: 506,
    InsufficientStorage: 507,
    LoopDetected: 508,
    NotExtended: 510,
    NetworkAuthenticationRequired: 511
  };
  Object.entries(HttpStatusCode).forEach(([key2, value]) => {
    HttpStatusCode[value] = key2;
  });
  var HttpStatusCode_default = HttpStatusCode;

  // node_modules/axios/lib/axios.js
  function createInstance(defaultConfig) {
    const context2 = new Axios_default(defaultConfig);
    const instance2 = bind(Axios_default.prototype.request, context2);
    utils_default.extend(instance2, Axios_default.prototype, context2, { allOwnKeys: true });
    utils_default.extend(instance2, context2, null, { allOwnKeys: true });
    instance2.create = function create(instanceConfig) {
      return createInstance(mergeConfig(defaultConfig, instanceConfig));
    };
    return instance2;
  }
  var axios = createInstance(defaults_default);
  axios.Axios = Axios_default;
  axios.CanceledError = CanceledError_default;
  axios.CancelToken = CancelToken_default;
  axios.isCancel = isCancel;
  axios.VERSION = VERSION;
  axios.toFormData = toFormData_default;
  axios.AxiosError = AxiosError_default;
  axios.Cancel = axios.CanceledError;
  axios.all = function all(promises) {
    return Promise.all(promises);
  };
  axios.spread = spread;
  axios.isAxiosError = isAxiosError;
  axios.mergeConfig = mergeConfig;
  axios.AxiosHeaders = AxiosHeaders_default;
  axios.formToJSON = (thing) => formDataToJSON_default(utils_default.isHTMLForm(thing) ? new FormData(thing) : thing);
  axios.getAdapter = adapters_default.getAdapter;
  axios.HttpStatusCode = HttpStatusCode_default;
  axios.default = axios;
  var axios_default = axios;

  // node_modules/axios/index.js
  var {
    Axios: Axios2,
    AxiosError: AxiosError2,
    CanceledError: CanceledError2,
    isCancel: isCancel2,
    CancelToken: CancelToken2,
    VERSION: VERSION2,
    all: all2,
    Cancel,
    isAxiosError: isAxiosError2,
    spread: spread2,
    toFormData: toFormData2,
    AxiosHeaders: AxiosHeaders2,
    HttpStatusCode: HttpStatusCode2,
    formToJSON,
    getAdapter,
    mergeConfig: mergeConfig2
  } = axios_default;

  // node_modules/immer/dist/immer.esm.mjs
  function n2(n4) {
    for (var r4 = arguments.length, t4 = Array(r4 > 1 ? r4 - 1 : 0), e3 = 1; e3 < r4; e3++)
      t4[e3 - 1] = arguments[e3];
    if (true) {
      var i3 = Y[n4], o3 = i3 ? "function" == typeof i3 ? i3.apply(null, t4) : i3 : "unknown error nr: " + n4;
      throw Error("[Immer] " + o3);
    }
    throw Error("[Immer] minified error nr: " + n4 + (t4.length ? " " + t4.map(function(n5) {
      return "'" + n5 + "'";
    }).join(",") : "") + ". Find the full error at: https://bit.ly/3cXEKWf");
  }
  function r2(n4) {
    return !!n4 && !!n4[Q];
  }
  function t2(n4) {
    var r4;
    return !!n4 && (function(n5) {
      if (!n5 || "object" != typeof n5)
        return false;
      var r5 = Object.getPrototypeOf(n5);
      if (null === r5)
        return true;
      var t4 = Object.hasOwnProperty.call(r5, "constructor") && r5.constructor;
      return t4 === Object || "function" == typeof t4 && Function.toString.call(t4) === Z;
    }(n4) || Array.isArray(n4) || !!n4[L] || !!(null === (r4 = n4.constructor) || void 0 === r4 ? void 0 : r4[L]) || s(n4) || v(n4));
  }
  function i2(n4, r4, t4) {
    void 0 === t4 && (t4 = false), 0 === o(n4) ? (t4 ? Object.keys : nn)(n4).forEach(function(e3) {
      t4 && "symbol" == typeof e3 || r4(e3, n4[e3], n4);
    }) : n4.forEach(function(t5, e3) {
      return r4(e3, t5, n4);
    });
  }
  function o(n4) {
    var r4 = n4[Q];
    return r4 ? r4.i > 3 ? r4.i - 4 : r4.i : Array.isArray(n4) ? 1 : s(n4) ? 2 : v(n4) ? 3 : 0;
  }
  function u(n4, r4) {
    return 2 === o(n4) ? n4.has(r4) : Object.prototype.hasOwnProperty.call(n4, r4);
  }
  function a(n4, r4) {
    return 2 === o(n4) ? n4.get(r4) : n4[r4];
  }
  function f(n4, r4, t4) {
    var e3 = o(n4);
    2 === e3 ? n4.set(r4, t4) : 3 === e3 ? n4.add(t4) : n4[r4] = t4;
  }
  function c(n4, r4) {
    return n4 === r4 ? 0 !== n4 || 1 / n4 == 1 / r4 : n4 != n4 && r4 != r4;
  }
  function s(n4) {
    return X && n4 instanceof Map;
  }
  function v(n4) {
    return q && n4 instanceof Set;
  }
  function p(n4) {
    return n4.o || n4.t;
  }
  function l(n4) {
    if (Array.isArray(n4))
      return Array.prototype.slice.call(n4);
    var r4 = rn(n4);
    delete r4[Q];
    for (var t4 = nn(r4), e3 = 0; e3 < t4.length; e3++) {
      var i3 = t4[e3], o3 = r4[i3];
      false === o3.writable && (o3.writable = true, o3.configurable = true), (o3.get || o3.set) && (r4[i3] = { configurable: true, writable: true, enumerable: o3.enumerable, value: n4[i3] });
    }
    return Object.create(Object.getPrototypeOf(n4), r4);
  }
  function d(n4, e3) {
    return void 0 === e3 && (e3 = false), y(n4) || r2(n4) || !t2(n4) || (o(n4) > 1 && (n4.set = n4.add = n4.clear = n4.delete = h), Object.freeze(n4), e3 && i2(n4, function(n5, r4) {
      return d(r4, true);
    }, true)), n4;
  }
  function h() {
    n2(2);
  }
  function y(n4) {
    return null == n4 || "object" != typeof n4 || Object.isFrozen(n4);
  }
  function b(r4) {
    var t4 = tn[r4];
    return t4 || n2(18, r4), t4;
  }
  function m(n4, r4) {
    tn[n4] || (tn[n4] = r4);
  }
  function _() {
    return U || n2(0), U;
  }
  function j(n4, r4) {
    r4 && (b("Patches"), n4.u = [], n4.s = [], n4.v = r4);
  }
  function g(n4) {
    O(n4), n4.p.forEach(S), n4.p = null;
  }
  function O(n4) {
    n4 === U && (U = n4.l);
  }
  function w(n4) {
    return U = { p: [], l: U, h: n4, m: true, _: 0 };
  }
  function S(n4) {
    var r4 = n4[Q];
    0 === r4.i || 1 === r4.i ? r4.j() : r4.g = true;
  }
  function P(r4, e3) {
    e3._ = e3.p.length;
    var i3 = e3.p[0], o3 = void 0 !== r4 && r4 !== i3;
    return e3.h.O || b("ES5").S(e3, r4, o3), o3 ? (i3[Q].P && (g(e3), n2(4)), t2(r4) && (r4 = M(e3, r4), e3.l || x(e3, r4)), e3.u && b("Patches").M(i3[Q].t, r4, e3.u, e3.s)) : r4 = M(e3, i3, []), g(e3), e3.u && e3.v(e3.u, e3.s), r4 !== H ? r4 : void 0;
  }
  function M(n4, r4, t4) {
    if (y(r4))
      return r4;
    var e3 = r4[Q];
    if (!e3)
      return i2(r4, function(i3, o4) {
        return A(n4, e3, r4, i3, o4, t4);
      }, true), r4;
    if (e3.A !== n4)
      return r4;
    if (!e3.P)
      return x(n4, e3.t, true), e3.t;
    if (!e3.I) {
      e3.I = true, e3.A._--;
      var o3 = 4 === e3.i || 5 === e3.i ? e3.o = l(e3.k) : e3.o, u2 = o3, a2 = false;
      3 === e3.i && (u2 = new Set(o3), o3.clear(), a2 = true), i2(u2, function(r5, i3) {
        return A(n4, e3, o3, r5, i3, t4, a2);
      }), x(n4, o3, false), t4 && n4.u && b("Patches").N(e3, t4, n4.u, n4.s);
    }
    return e3.o;
  }
  function A(e3, i3, o3, a2, c2, s2, v2) {
    if (c2 === o3 && n2(5), r2(c2)) {
      var p2 = M(e3, c2, s2 && i3 && 3 !== i3.i && !u(i3.R, a2) ? s2.concat(a2) : void 0);
      if (f(o3, a2, p2), !r2(p2))
        return;
      e3.m = false;
    } else
      v2 && o3.add(c2);
    if (t2(c2) && !y(c2)) {
      if (!e3.h.D && e3._ < 1)
        return;
      M(e3, c2), i3 && i3.A.l || x(e3, c2);
    }
  }
  function x(n4, r4, t4) {
    void 0 === t4 && (t4 = false), !n4.l && n4.h.D && n4.m && d(r4, t4);
  }
  function z(n4, r4) {
    var t4 = n4[Q];
    return (t4 ? p(t4) : n4)[r4];
  }
  function I(n4, r4) {
    if (r4 in n4)
      for (var t4 = Object.getPrototypeOf(n4); t4; ) {
        var e3 = Object.getOwnPropertyDescriptor(t4, r4);
        if (e3)
          return e3;
        t4 = Object.getPrototypeOf(t4);
      }
  }
  function k(n4) {
    n4.P || (n4.P = true, n4.l && k(n4.l));
  }
  function E(n4) {
    n4.o || (n4.o = l(n4.t));
  }
  function N(n4, r4, t4) {
    var e3 = s(r4) ? b("MapSet").F(r4, t4) : v(r4) ? b("MapSet").T(r4, t4) : n4.O ? function(n5, r5) {
      var t5 = Array.isArray(n5), e4 = { i: t5 ? 1 : 0, A: r5 ? r5.A : _(), P: false, I: false, R: {}, l: r5, t: n5, k: null, o: null, j: null, C: false }, i3 = e4, o3 = en;
      t5 && (i3 = [e4], o3 = on);
      var u2 = Proxy.revocable(i3, o3), a2 = u2.revoke, f2 = u2.proxy;
      return e4.k = f2, e4.j = a2, f2;
    }(r4, t4) : b("ES5").J(r4, t4);
    return (t4 ? t4.A : _()).p.push(e3), e3;
  }
  function R(e3) {
    return r2(e3) || n2(22, e3), function n4(r4) {
      if (!t2(r4))
        return r4;
      var e4, u2 = r4[Q], c2 = o(r4);
      if (u2) {
        if (!u2.P && (u2.i < 4 || !b("ES5").K(u2)))
          return u2.t;
        u2.I = true, e4 = D(r4, c2), u2.I = false;
      } else
        e4 = D(r4, c2);
      return i2(e4, function(r5, t4) {
        u2 && a(u2.t, r5) === t4 || f(e4, r5, n4(t4));
      }), 3 === c2 ? new Set(e4) : e4;
    }(e3);
  }
  function D(n4, r4) {
    switch (r4) {
      case 2:
        return new Map(n4);
      case 3:
        return Array.from(n4);
    }
    return l(n4);
  }
  function F() {
    function t4(n4, r4) {
      var t5 = s2[n4];
      return t5 ? t5.enumerable = r4 : s2[n4] = t5 = { configurable: true, enumerable: r4, get: function() {
        var r5 = this[Q];
        return f2(r5), en.get(r5, n4);
      }, set: function(r5) {
        var t6 = this[Q];
        f2(t6), en.set(t6, n4, r5);
      } }, t5;
    }
    function e3(n4) {
      for (var r4 = n4.length - 1; r4 >= 0; r4--) {
        var t5 = n4[r4][Q];
        if (!t5.P)
          switch (t5.i) {
            case 5:
              a2(t5) && k(t5);
              break;
            case 4:
              o3(t5) && k(t5);
          }
      }
    }
    function o3(n4) {
      for (var r4 = n4.t, t5 = n4.k, e4 = nn(t5), i3 = e4.length - 1; i3 >= 0; i3--) {
        var o4 = e4[i3];
        if (o4 !== Q) {
          var a3 = r4[o4];
          if (void 0 === a3 && !u(r4, o4))
            return true;
          var f3 = t5[o4], s3 = f3 && f3[Q];
          if (s3 ? s3.t !== a3 : !c(f3, a3))
            return true;
        }
      }
      var v2 = !!r4[Q];
      return e4.length !== nn(r4).length + (v2 ? 0 : 1);
    }
    function a2(n4) {
      var r4 = n4.k;
      if (r4.length !== n4.t.length)
        return true;
      var t5 = Object.getOwnPropertyDescriptor(r4, r4.length - 1);
      if (t5 && !t5.get)
        return true;
      for (var e4 = 0; e4 < r4.length; e4++)
        if (!r4.hasOwnProperty(e4))
          return true;
      return false;
    }
    function f2(r4) {
      r4.g && n2(3, JSON.stringify(p(r4)));
    }
    var s2 = {};
    m("ES5", { J: function(n4, r4) {
      var e4 = Array.isArray(n4), i3 = function(n5, r5) {
        if (n5) {
          for (var e5 = Array(r5.length), i4 = 0; i4 < r5.length; i4++)
            Object.defineProperty(e5, "" + i4, t4(i4, true));
          return e5;
        }
        var o5 = rn(r5);
        delete o5[Q];
        for (var u2 = nn(o5), a3 = 0; a3 < u2.length; a3++) {
          var f3 = u2[a3];
          o5[f3] = t4(f3, n5 || !!o5[f3].enumerable);
        }
        return Object.create(Object.getPrototypeOf(r5), o5);
      }(e4, n4), o4 = { i: e4 ? 5 : 4, A: r4 ? r4.A : _(), P: false, I: false, R: {}, l: r4, t: n4, k: i3, o: null, g: false, C: false };
      return Object.defineProperty(i3, Q, { value: o4, writable: true }), i3;
    }, S: function(n4, t5, o4) {
      o4 ? r2(t5) && t5[Q].A === n4 && e3(n4.p) : (n4.u && function n5(r4) {
        if (r4 && "object" == typeof r4) {
          var t6 = r4[Q];
          if (t6) {
            var e4 = t6.t, o5 = t6.k, f3 = t6.R, c2 = t6.i;
            if (4 === c2)
              i2(o5, function(r5) {
                r5 !== Q && (void 0 !== e4[r5] || u(e4, r5) ? f3[r5] || n5(o5[r5]) : (f3[r5] = true, k(t6)));
              }), i2(e4, function(n6) {
                void 0 !== o5[n6] || u(o5, n6) || (f3[n6] = false, k(t6));
              });
            else if (5 === c2) {
              if (a2(t6) && (k(t6), f3.length = true), o5.length < e4.length)
                for (var s3 = o5.length; s3 < e4.length; s3++)
                  f3[s3] = false;
              else
                for (var v2 = e4.length; v2 < o5.length; v2++)
                  f3[v2] = true;
              for (var p2 = Math.min(o5.length, e4.length), l2 = 0; l2 < p2; l2++)
                o5.hasOwnProperty(l2) || (f3[l2] = true), void 0 === f3[l2] && n5(o5[l2]);
            }
          }
        }
      }(n4.p[0]), e3(n4.p));
    }, K: function(n4) {
      return 4 === n4.i ? o3(n4) : a2(n4);
    } });
  }
  var G;
  var U;
  var W = "undefined" != typeof Symbol && "symbol" == typeof Symbol("x");
  var X = "undefined" != typeof Map;
  var q = "undefined" != typeof Set;
  var B = "undefined" != typeof Proxy && void 0 !== Proxy.revocable && "undefined" != typeof Reflect;
  var H = W ? Symbol.for("immer-nothing") : ((G = {})["immer-nothing"] = true, G);
  var L = W ? Symbol.for("immer-draftable") : "__$immer_draftable";
  var Q = W ? Symbol.for("immer-state") : "__$immer_state";
  var Y = { 0: "Illegal state", 1: "Immer drafts cannot have computed properties", 2: "This object has been frozen and should not be mutated", 3: function(n4) {
    return "Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? " + n4;
  }, 4: "An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.", 5: "Immer forbids circular references", 6: "The first or second argument to `produce` must be a function", 7: "The third argument to `produce` must be a function or undefined", 8: "First argument to `createDraft` must be a plain object, an array, or an immerable object", 9: "First argument to `finishDraft` must be a draft returned by `createDraft`", 10: "The given draft is already finalized", 11: "Object.defineProperty() cannot be used on an Immer draft", 12: "Object.setPrototypeOf() cannot be used on an Immer draft", 13: "Immer only supports deleting array indices", 14: "Immer only supports setting array indices and the 'length' property", 15: function(n4) {
    return "Cannot apply patch, path doesn't resolve: " + n4;
  }, 16: 'Sets cannot have "replace" patches.', 17: function(n4) {
    return "Unsupported patch operation: " + n4;
  }, 18: function(n4) {
    return "The plugin for '" + n4 + "' has not been loaded into Immer. To enable the plugin, import and call `enable" + n4 + "()` when initializing your application.";
  }, 20: "Cannot use proxies if Proxy, Proxy.revocable or Reflect are not available", 21: function(n4) {
    return "produce can only be called on things that are draftable: plain objects, arrays, Map, Set or classes that are marked with '[immerable]: true'. Got '" + n4 + "'";
  }, 22: function(n4) {
    return "'current' expects a draft, got: " + n4;
  }, 23: function(n4) {
    return "'original' expects a draft, got: " + n4;
  }, 24: "Patching reserved attributes like __proto__, prototype and constructor is not allowed" };
  var Z = "" + Object.prototype.constructor;
  var nn = "undefined" != typeof Reflect && Reflect.ownKeys ? Reflect.ownKeys : void 0 !== Object.getOwnPropertySymbols ? function(n4) {
    return Object.getOwnPropertyNames(n4).concat(Object.getOwnPropertySymbols(n4));
  } : Object.getOwnPropertyNames;
  var rn = Object.getOwnPropertyDescriptors || function(n4) {
    var r4 = {};
    return nn(n4).forEach(function(t4) {
      r4[t4] = Object.getOwnPropertyDescriptor(n4, t4);
    }), r4;
  };
  var tn = {};
  var en = { get: function(n4, r4) {
    if (r4 === Q)
      return n4;
    var e3 = p(n4);
    if (!u(e3, r4))
      return function(n5, r5, t4) {
        var e4, i4 = I(r5, t4);
        return i4 ? "value" in i4 ? i4.value : null === (e4 = i4.get) || void 0 === e4 ? void 0 : e4.call(n5.k) : void 0;
      }(n4, e3, r4);
    var i3 = e3[r4];
    return n4.I || !t2(i3) ? i3 : i3 === z(n4.t, r4) ? (E(n4), n4.o[r4] = N(n4.A.h, i3, n4)) : i3;
  }, has: function(n4, r4) {
    return r4 in p(n4);
  }, ownKeys: function(n4) {
    return Reflect.ownKeys(p(n4));
  }, set: function(n4, r4, t4) {
    var e3 = I(p(n4), r4);
    if (null == e3 ? void 0 : e3.set)
      return e3.set.call(n4.k, t4), true;
    if (!n4.P) {
      var i3 = z(p(n4), r4), o3 = null == i3 ? void 0 : i3[Q];
      if (o3 && o3.t === t4)
        return n4.o[r4] = t4, n4.R[r4] = false, true;
      if (c(t4, i3) && (void 0 !== t4 || u(n4.t, r4)))
        return true;
      E(n4), k(n4);
    }
    return n4.o[r4] === t4 && (void 0 !== t4 || r4 in n4.o) || Number.isNaN(t4) && Number.isNaN(n4.o[r4]) || (n4.o[r4] = t4, n4.R[r4] = true), true;
  }, deleteProperty: function(n4, r4) {
    return void 0 !== z(n4.t, r4) || r4 in n4.t ? (n4.R[r4] = false, E(n4), k(n4)) : delete n4.R[r4], n4.o && delete n4.o[r4], true;
  }, getOwnPropertyDescriptor: function(n4, r4) {
    var t4 = p(n4), e3 = Reflect.getOwnPropertyDescriptor(t4, r4);
    return e3 ? { writable: true, configurable: 1 !== n4.i || "length" !== r4, enumerable: e3.enumerable, value: t4[r4] } : e3;
  }, defineProperty: function() {
    n2(11);
  }, getPrototypeOf: function(n4) {
    return Object.getPrototypeOf(n4.t);
  }, setPrototypeOf: function() {
    n2(12);
  } };
  var on = {};
  i2(en, function(n4, r4) {
    on[n4] = function() {
      return arguments[0] = arguments[0][0], r4.apply(this, arguments);
    };
  }), on.deleteProperty = function(r4, t4) {
    return isNaN(parseInt(t4)) && n2(13), on.set.call(this, r4, t4, void 0);
  }, on.set = function(r4, t4, e3) {
    return "length" !== t4 && isNaN(parseInt(t4)) && n2(14), en.set.call(this, r4[0], t4, e3, r4[0]);
  };
  var un = function() {
    function e3(r4) {
      var e4 = this;
      this.O = B, this.D = true, this.produce = function(r5, i4, o3) {
        if ("function" == typeof r5 && "function" != typeof i4) {
          var u2 = i4;
          i4 = r5;
          var a2 = e4;
          return function(n4) {
            var r6 = this;
            void 0 === n4 && (n4 = u2);
            for (var t4 = arguments.length, e5 = Array(t4 > 1 ? t4 - 1 : 0), o4 = 1; o4 < t4; o4++)
              e5[o4 - 1] = arguments[o4];
            return a2.produce(n4, function(n5) {
              var t5;
              return (t5 = i4).call.apply(t5, [r6, n5].concat(e5));
            });
          };
        }
        var f2;
        if ("function" != typeof i4 && n2(6), void 0 !== o3 && "function" != typeof o3 && n2(7), t2(r5)) {
          var c2 = w(e4), s2 = N(e4, r5, void 0), v2 = true;
          try {
            f2 = i4(s2), v2 = false;
          } finally {
            v2 ? g(c2) : O(c2);
          }
          return "undefined" != typeof Promise && f2 instanceof Promise ? f2.then(function(n4) {
            return j(c2, o3), P(n4, c2);
          }, function(n4) {
            throw g(c2), n4;
          }) : (j(c2, o3), P(f2, c2));
        }
        if (!r5 || "object" != typeof r5) {
          if (void 0 === (f2 = i4(r5)) && (f2 = r5), f2 === H && (f2 = void 0), e4.D && d(f2, true), o3) {
            var p2 = [], l2 = [];
            b("Patches").M(r5, f2, p2, l2), o3(p2, l2);
          }
          return f2;
        }
        n2(21, r5);
      }, this.produceWithPatches = function(n4, r5) {
        if ("function" == typeof n4)
          return function(r6) {
            for (var t5 = arguments.length, i5 = Array(t5 > 1 ? t5 - 1 : 0), o4 = 1; o4 < t5; o4++)
              i5[o4 - 1] = arguments[o4];
            return e4.produceWithPatches(r6, function(r7) {
              return n4.apply(void 0, [r7].concat(i5));
            });
          };
        var t4, i4, o3 = e4.produce(n4, r5, function(n5, r6) {
          t4 = n5, i4 = r6;
        });
        return "undefined" != typeof Promise && o3 instanceof Promise ? o3.then(function(n5) {
          return [n5, t4, i4];
        }) : [o3, t4, i4];
      }, "boolean" == typeof (null == r4 ? void 0 : r4.useProxies) && this.setUseProxies(r4.useProxies), "boolean" == typeof (null == r4 ? void 0 : r4.autoFreeze) && this.setAutoFreeze(r4.autoFreeze);
    }
    var i3 = e3.prototype;
    return i3.createDraft = function(e4) {
      t2(e4) || n2(8), r2(e4) && (e4 = R(e4));
      var i4 = w(this), o3 = N(this, e4, void 0);
      return o3[Q].C = true, O(i4), o3;
    }, i3.finishDraft = function(r4, t4) {
      var e4 = r4 && r4[Q];
      e4 && e4.C || n2(9), e4.I && n2(10);
      var i4 = e4.A;
      return j(i4, t4), P(void 0, i4);
    }, i3.setAutoFreeze = function(n4) {
      this.D = n4;
    }, i3.setUseProxies = function(r4) {
      r4 && !B && n2(20), this.O = r4;
    }, i3.applyPatches = function(n4, t4) {
      var e4;
      for (e4 = t4.length - 1; e4 >= 0; e4--) {
        var i4 = t4[e4];
        if (0 === i4.path.length && "replace" === i4.op) {
          n4 = i4.value;
          break;
        }
      }
      e4 > -1 && (t4 = t4.slice(e4 + 1));
      var o3 = b("Patches").$;
      return r2(n4) ? o3(n4, t4) : this.produce(n4, function(n5) {
        return o3(n5, t4);
      });
    }, e3;
  }();
  var an = new un();
  var fn = an.produce;
  var cn2 = an.produceWithPatches.bind(an);
  var sn = an.setAutoFreeze.bind(an);
  var vn = an.setUseProxies.bind(an);
  var pn = an.applyPatches.bind(an);
  var ln = an.createDraft.bind(an);
  var dn = an.finishDraft.bind(an);
  var immer_esm_default = fn;

  // node_modules/@reduxjs/toolkit/node_modules/redux/es/redux.js
  var $$observable = function() {
    return typeof Symbol === "function" && Symbol.observable || "@@observable";
  }();
  var randomString3 = function randomString4() {
    return Math.random().toString(36).substring(7).split("").join(".");
  };
  var ActionTypes2 = {
    INIT: "@@redux/INIT" + randomString3(),
    REPLACE: "@@redux/REPLACE" + randomString3(),
    PROBE_UNKNOWN_ACTION: function PROBE_UNKNOWN_ACTION2() {
      return "@@redux/PROBE_UNKNOWN_ACTION" + randomString3();
    }
  };
  function isPlainObject4(obj) {
    if (typeof obj !== "object" || obj === null)
      return false;
    var proto = obj;
    while (Object.getPrototypeOf(proto) !== null) {
      proto = Object.getPrototypeOf(proto);
    }
    return Object.getPrototypeOf(obj) === proto;
  }
  function miniKindOf(val) {
    if (val === void 0)
      return "undefined";
    if (val === null)
      return "null";
    var type4 = typeof val;
    switch (type4) {
      case "boolean":
      case "string":
      case "number":
      case "symbol":
      case "function": {
        return type4;
      }
    }
    if (Array.isArray(val))
      return "array";
    if (isDate2(val))
      return "date";
    if (isError(val))
      return "error";
    var constructorName = ctorName(val);
    switch (constructorName) {
      case "Symbol":
      case "Promise":
      case "WeakMap":
      case "WeakSet":
      case "Map":
      case "Set":
        return constructorName;
    }
    return type4.slice(8, -1).toLowerCase().replace(/\s/g, "");
  }
  function ctorName(val) {
    return typeof val.constructor === "function" ? val.constructor.name : null;
  }
  function isError(val) {
    return val instanceof Error || typeof val.message === "string" && val.constructor && typeof val.constructor.stackTraceLimit === "number";
  }
  function isDate2(val) {
    if (val instanceof Date)
      return true;
    return typeof val.toDateString === "function" && typeof val.getDate === "function" && typeof val.setDate === "function";
  }
  function kindOf2(val) {
    var typeOfVal = typeof val;
    if (true) {
      typeOfVal = miniKindOf(val);
    }
    return typeOfVal;
  }
  function createStore2(reducer, preloadedState, enhancer) {
    var _ref2;
    if (typeof preloadedState === "function" && typeof enhancer === "function" || typeof enhancer === "function" && typeof arguments[3] === "function") {
      throw new Error(false ? formatProdErrorMessage(0) : "It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function. See https://redux.js.org/tutorials/fundamentals/part-4-store#creating-a-store-with-enhancers for an example.");
    }
    if (typeof preloadedState === "function" && typeof enhancer === "undefined") {
      enhancer = preloadedState;
      preloadedState = void 0;
    }
    if (typeof enhancer !== "undefined") {
      if (typeof enhancer !== "function") {
        throw new Error(false ? formatProdErrorMessage(1) : "Expected the enhancer to be a function. Instead, received: '" + kindOf2(enhancer) + "'");
      }
      return enhancer(createStore2)(reducer, preloadedState);
    }
    if (typeof reducer !== "function") {
      throw new Error(false ? formatProdErrorMessage(2) : "Expected the root reducer to be a function. Instead, received: '" + kindOf2(reducer) + "'");
    }
    var currentReducer = reducer;
    var currentState = preloadedState;
    var currentListeners = [];
    var nextListeners = currentListeners;
    var isDispatching = false;
    function ensureCanMutateNextListeners() {
      if (nextListeners === currentListeners) {
        nextListeners = currentListeners.slice();
      }
    }
    function getState() {
      if (isDispatching) {
        throw new Error(false ? formatProdErrorMessage(3) : "You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");
      }
      return currentState;
    }
    function subscribe2(listener2) {
      if (typeof listener2 !== "function") {
        throw new Error(false ? formatProdErrorMessage(4) : "Expected the listener to be a function. Instead, received: '" + kindOf2(listener2) + "'");
      }
      if (isDispatching) {
        throw new Error(false ? formatProdErrorMessage(5) : "You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api/store#subscribelistener for more details.");
      }
      var isSubscribed = true;
      ensureCanMutateNextListeners();
      nextListeners.push(listener2);
      return function unsubscribe2() {
        if (!isSubscribed) {
          return;
        }
        if (isDispatching) {
          throw new Error(false ? formatProdErrorMessage(6) : "You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api/store#subscribelistener for more details.");
        }
        isSubscribed = false;
        ensureCanMutateNextListeners();
        var index2 = nextListeners.indexOf(listener2);
        nextListeners.splice(index2, 1);
        currentListeners = null;
      };
    }
    function dispatch2(action) {
      if (!isPlainObject4(action)) {
        throw new Error(false ? formatProdErrorMessage(7) : "Actions must be plain objects. Instead, the actual type was: '" + kindOf2(action) + "'. You may need to add middleware to your store setup to handle dispatching other values, such as 'redux-thunk' to handle dispatching functions. See https://redux.js.org/tutorials/fundamentals/part-4-store#middleware and https://redux.js.org/tutorials/fundamentals/part-6-async-logic#using-the-redux-thunk-middleware for examples.");
      }
      if (typeof action.type === "undefined") {
        throw new Error(false ? formatProdErrorMessage(8) : 'Actions may not have an undefined "type" property. You may have misspelled an action type string constant.');
      }
      if (isDispatching) {
        throw new Error(false ? formatProdErrorMessage(9) : "Reducers may not dispatch actions.");
      }
      try {
        isDispatching = true;
        currentState = currentReducer(currentState, action);
      } finally {
        isDispatching = false;
      }
      var listeners = currentListeners = nextListeners;
      for (var i3 = 0; i3 < listeners.length; i3++) {
        var listener2 = listeners[i3];
        listener2();
      }
      return action;
    }
    function replaceReducer(nextReducer) {
      if (typeof nextReducer !== "function") {
        throw new Error(false ? formatProdErrorMessage(10) : "Expected the nextReducer to be a function. Instead, received: '" + kindOf2(nextReducer));
      }
      currentReducer = nextReducer;
      dispatch2({
        type: ActionTypes2.REPLACE
      });
    }
    function observable() {
      var _ref;
      var outerSubscribe = subscribe2;
      return _ref = {
        /**
         * The minimal observable subscription method.
         * @param {Object} observer Any object that can be used as an observer.
         * The observer object should have a `next` method.
         * @returns {subscription} An object with an `unsubscribe` method that can
         * be used to unsubscribe the observable from the store, and prevent further
         * emission of values from the observable.
         */
        subscribe: function subscribe3(observer) {
          if (typeof observer !== "object" || observer === null) {
            throw new Error(false ? formatProdErrorMessage(11) : "Expected the observer to be an object. Instead, received: '" + kindOf2(observer) + "'");
          }
          function observeState() {
            if (observer.next) {
              observer.next(getState());
            }
          }
          observeState();
          var unsubscribe2 = outerSubscribe(observeState);
          return {
            unsubscribe: unsubscribe2
          };
        }
      }, _ref[$$observable] = function() {
        return this;
      }, _ref;
    }
    dispatch2({
      type: ActionTypes2.INIT
    });
    return _ref2 = {
      dispatch: dispatch2,
      subscribe: subscribe2,
      getState,
      replaceReducer
    }, _ref2[$$observable] = observable, _ref2;
  }
  function warning10(message) {
    if (typeof console !== "undefined" && typeof console.error === "function") {
      console.error(message);
    }
    try {
      throw new Error(message);
    } catch (e3) {
    }
  }
  function getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {
    var reducerKeys = Object.keys(reducers);
    var argumentName = action && action.type === ActionTypes2.INIT ? "preloadedState argument passed to createStore" : "previous state received by the reducer";
    if (reducerKeys.length === 0) {
      return "Store does not have a valid reducer. Make sure the argument passed to combineReducers is an object whose values are reducers.";
    }
    if (!isPlainObject4(inputState)) {
      return "The " + argumentName + ' has unexpected type of "' + kindOf2(inputState) + '". Expected argument to be an object with the following ' + ('keys: "' + reducerKeys.join('", "') + '"');
    }
    var unexpectedKeys = Object.keys(inputState).filter(function(key2) {
      return !reducers.hasOwnProperty(key2) && !unexpectedKeyCache[key2];
    });
    unexpectedKeys.forEach(function(key2) {
      unexpectedKeyCache[key2] = true;
    });
    if (action && action.type === ActionTypes2.REPLACE)
      return;
    if (unexpectedKeys.length > 0) {
      return "Unexpected " + (unexpectedKeys.length > 1 ? "keys" : "key") + " " + ('"' + unexpectedKeys.join('", "') + '" found in ' + argumentName + ". ") + "Expected to find one of the known reducer keys instead: " + ('"' + reducerKeys.join('", "') + '". Unexpected keys will be ignored.');
    }
  }
  function assertReducerShape(reducers) {
    Object.keys(reducers).forEach(function(key2) {
      var reducer = reducers[key2];
      var initialState10 = reducer(void 0, {
        type: ActionTypes2.INIT
      });
      if (typeof initialState10 === "undefined") {
        throw new Error(false ? formatProdErrorMessage(12) : 'The slice reducer for key "' + key2 + `" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.`);
      }
      if (typeof reducer(void 0, {
        type: ActionTypes2.PROBE_UNKNOWN_ACTION()
      }) === "undefined") {
        throw new Error(false ? formatProdErrorMessage(13) : 'The slice reducer for key "' + key2 + '" returned undefined when probed with a random type. ' + ("Don't try to handle '" + ActionTypes2.INIT + `' or other actions in "redux/*" `) + "namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.");
      }
    });
  }
  function combineReducers(reducers) {
    var reducerKeys = Object.keys(reducers);
    var finalReducers = {};
    for (var i3 = 0; i3 < reducerKeys.length; i3++) {
      var key2 = reducerKeys[i3];
      if (true) {
        if (typeof reducers[key2] === "undefined") {
          warning10('No reducer provided for key "' + key2 + '"');
        }
      }
      if (typeof reducers[key2] === "function") {
        finalReducers[key2] = reducers[key2];
      }
    }
    var finalReducerKeys = Object.keys(finalReducers);
    var unexpectedKeyCache;
    if (true) {
      unexpectedKeyCache = {};
    }
    var shapeAssertionError;
    try {
      assertReducerShape(finalReducers);
    } catch (e3) {
      shapeAssertionError = e3;
    }
    return function combination(state, action) {
      if (state === void 0) {
        state = {};
      }
      if (shapeAssertionError) {
        throw shapeAssertionError;
      }
      if (true) {
        var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);
        if (warningMessage) {
          warning10(warningMessage);
        }
      }
      var hasChanged = false;
      var nextState = {};
      for (var _i = 0; _i < finalReducerKeys.length; _i++) {
        var _key = finalReducerKeys[_i];
        var reducer = finalReducers[_key];
        var previousStateForKey = state[_key];
        var nextStateForKey = reducer(previousStateForKey, action);
        if (typeof nextStateForKey === "undefined") {
          var actionType = action && action.type;
          throw new Error(false ? formatProdErrorMessage(14) : "When called with an action of type " + (actionType ? '"' + String(actionType) + '"' : "(unknown type)") + ', the slice reducer for key "' + _key + '" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.');
        }
        nextState[_key] = nextStateForKey;
        hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
      }
      hasChanged = hasChanged || finalReducerKeys.length !== Object.keys(state).length;
      return hasChanged ? nextState : state;
    };
  }
  function compose() {
    for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {
      funcs[_key] = arguments[_key];
    }
    if (funcs.length === 0) {
      return function(arg) {
        return arg;
      };
    }
    if (funcs.length === 1) {
      return funcs[0];
    }
    return funcs.reduce(function(a2, b2) {
      return function() {
        return a2(b2.apply(void 0, arguments));
      };
    });
  }
  function applyMiddleware() {
    for (var _len = arguments.length, middlewares = new Array(_len), _key = 0; _key < _len; _key++) {
      middlewares[_key] = arguments[_key];
    }
    return function(createStore3) {
      return function() {
        var store3 = createStore3.apply(void 0, arguments);
        var _dispatch = function dispatch2() {
          throw new Error(false ? formatProdErrorMessage(15) : "Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.");
        };
        var middlewareAPI = {
          getState: store3.getState,
          dispatch: function dispatch2() {
            return _dispatch.apply(void 0, arguments);
          }
        };
        var chain = middlewares.map(function(middleware) {
          return middleware(middlewareAPI);
        });
        _dispatch = compose.apply(void 0, chain)(store3.dispatch);
        return _objectSpread2(_objectSpread2({}, store3), {}, {
          dispatch: _dispatch
        });
      };
    };
  }

  // node_modules/redux-thunk/es/index.js
  function createThunkMiddleware(extraArgument) {
    var middleware = function middleware2(_ref) {
      var dispatch2 = _ref.dispatch, getState = _ref.getState;
      return function(next) {
        return function(action) {
          if (typeof action === "function") {
            return action(dispatch2, getState, extraArgument);
          }
          return next(action);
        };
      };
    };
    return middleware;
  }
  var thunk = createThunkMiddleware();
  thunk.withExtraArgument = createThunkMiddleware;
  var es_default27 = thunk;

  // node_modules/@reduxjs/toolkit/dist/redux-toolkit.esm.js
  var __extends = function() {
    var extendStatics = function(d2, b2) {
      extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
        d3.__proto__ = b3;
      } || function(d3, b3) {
        for (var p2 in b3)
          if (Object.prototype.hasOwnProperty.call(b3, p2))
            d3[p2] = b3[p2];
      };
      return extendStatics(d2, b2);
    };
    return function(d2, b2) {
      if (typeof b2 !== "function" && b2 !== null)
        throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
      extendStatics(d2, b2);
      function __() {
        this.constructor = d2;
      }
      d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
    };
  }();
  var __generator = function(thisArg, body) {
    var _24 = { label: 0, sent: function() {
      if (t4[0] & 1)
        throw t4[1];
      return t4[1];
    }, trys: [], ops: [] }, f2, y2, t4, g2;
    return g2 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g2[Symbol.iterator] = function() {
      return this;
    }), g2;
    function verb(n4) {
      return function(v2) {
        return step([n4, v2]);
      };
    }
    function step(op) {
      if (f2)
        throw new TypeError("Generator is already executing.");
      while (_24)
        try {
          if (f2 = 1, y2 && (t4 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t4 = y2["return"]) && t4.call(y2), 0) : y2.next) && !(t4 = t4.call(y2, op[1])).done)
            return t4;
          if (y2 = 0, t4)
            op = [op[0] & 2, t4.value];
          switch (op[0]) {
            case 0:
            case 1:
              t4 = op;
              break;
            case 4:
              _24.label++;
              return { value: op[1], done: false };
            case 5:
              _24.label++;
              y2 = op[1];
              op = [0];
              continue;
            case 7:
              op = _24.ops.pop();
              _24.trys.pop();
              continue;
            default:
              if (!(t4 = _24.trys, t4 = t4.length > 0 && t4[t4.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _24 = 0;
                continue;
              }
              if (op[0] === 3 && (!t4 || op[1] > t4[0] && op[1] < t4[3])) {
                _24.label = op[1];
                break;
              }
              if (op[0] === 6 && _24.label < t4[1]) {
                _24.label = t4[1];
                t4 = op;
                break;
              }
              if (t4 && _24.label < t4[2]) {
                _24.label = t4[2];
                _24.ops.push(op);
                break;
              }
              if (t4[2])
                _24.ops.pop();
              _24.trys.pop();
              continue;
          }
          op = body.call(thisArg, _24);
        } catch (e3) {
          op = [6, e3];
          y2 = 0;
        } finally {
          f2 = t4 = 0;
        }
      if (op[0] & 5)
        throw op[1];
      return { value: op[0] ? op[1] : void 0, done: true };
    }
  };
  var __spreadArray = function(to, from) {
    for (var i3 = 0, il = from.length, j2 = to.length; i3 < il; i3++, j2++)
      to[j2] = from[i3];
    return to;
  };
  var __defProp2 = Object.defineProperty;
  var __defProps = Object.defineProperties;
  var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
  var __getOwnPropSymbols = Object.getOwnPropertySymbols;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __propIsEnum = Object.prototype.propertyIsEnumerable;
  var __defNormalProp = function(obj, key2, value) {
    return key2 in obj ? __defProp2(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
  };
  var __spreadValues = function(a2, b2) {
    for (var prop in b2 || (b2 = {}))
      if (__hasOwnProp2.call(b2, prop))
        __defNormalProp(a2, prop, b2[prop]);
    if (__getOwnPropSymbols)
      for (var _i = 0, _c = __getOwnPropSymbols(b2); _i < _c.length; _i++) {
        var prop = _c[_i];
        if (__propIsEnum.call(b2, prop))
          __defNormalProp(a2, prop, b2[prop]);
      }
    return a2;
  };
  var __spreadProps = function(a2, b2) {
    return __defProps(a2, __getOwnPropDescs(b2));
  };
  var __async = function(__this, __arguments, generator2) {
    return new Promise(function(resolve, reject) {
      var fulfilled = function(value) {
        try {
          step(generator2.next(value));
        } catch (e3) {
          reject(e3);
        }
      };
      var rejected = function(value) {
        try {
          step(generator2.throw(value));
        } catch (e3) {
          reject(e3);
        }
      };
      var step = function(x2) {
        return x2.done ? resolve(x2.value) : Promise.resolve(x2.value).then(fulfilled, rejected);
      };
      step((generator2 = generator2.apply(__this, __arguments)).next());
    });
  };
  var composeWithDevTools = typeof window !== "undefined" && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : function() {
    if (arguments.length === 0)
      return void 0;
    if (typeof arguments[0] === "object")
      return compose;
    return compose.apply(null, arguments);
  };
  var devToolsEnhancer = typeof window !== "undefined" && window.__REDUX_DEVTOOLS_EXTENSION__ ? window.__REDUX_DEVTOOLS_EXTENSION__ : function() {
    return function(noop22) {
      return noop22;
    };
  };
  function isPlainObject5(value) {
    if (typeof value !== "object" || value === null)
      return false;
    var proto = Object.getPrototypeOf(value);
    if (proto === null)
      return true;
    var baseProto = proto;
    while (Object.getPrototypeOf(baseProto) !== null) {
      baseProto = Object.getPrototypeOf(baseProto);
    }
    return proto === baseProto;
  }
  var hasMatchFunction = function(v2) {
    return v2 && typeof v2.match === "function";
  };
  function createAction(type4, prepareAction) {
    function actionCreator() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      if (prepareAction) {
        var prepared = prepareAction.apply(void 0, args);
        if (!prepared) {
          throw new Error("prepareAction did not return an object");
        }
        return __spreadValues(__spreadValues({
          type: type4,
          payload: prepared.payload
        }, "meta" in prepared && { meta: prepared.meta }), "error" in prepared && { error: prepared.error });
      }
      return { type: type4, payload: args[0] };
    }
    actionCreator.toString = function() {
      return "" + type4;
    };
    actionCreator.type = type4;
    actionCreator.match = function(action) {
      return action.type === type4;
    };
    return actionCreator;
  }
  function isActionCreator(action) {
    return typeof action === "function" && "type" in action && hasMatchFunction(action);
  }
  function getMessage(type4) {
    var splitType = type4 ? ("" + type4).split("/") : [];
    var actionName = splitType[splitType.length - 1] || "actionCreator";
    return 'Detected an action creator with type "' + (type4 || "unknown") + "\" being dispatched. \nMake sure you're calling the action creator before dispatching, i.e. `dispatch(" + actionName + "())` instead of `dispatch(" + actionName + ")`. This is necessary even if the action has no payload.";
  }
  function createActionCreatorInvariantMiddleware(options) {
    if (options === void 0) {
      options = {};
    }
    if (false) {
      return function() {
        return function(next) {
          return function(action) {
            return next(action);
          };
        };
      };
    }
    var _c = options.isActionCreator, isActionCreator2 = _c === void 0 ? isActionCreator : _c;
    return function() {
      return function(next) {
        return function(action) {
          if (isActionCreator2(action)) {
            console.warn(getMessage(action.type));
          }
          return next(action);
        };
      };
    };
  }
  function getTimeMeasureUtils(maxDelay, fnName) {
    var elapsed = 0;
    return {
      measureTime: function(fn2) {
        var started = Date.now();
        try {
          return fn2();
        } finally {
          var finished = Date.now();
          elapsed += finished - started;
        }
      },
      warnIfExceeded: function() {
        if (elapsed > maxDelay) {
          console.warn(fnName + " took " + elapsed + "ms, which is more than the warning threshold of " + maxDelay + "ms. \nIf your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.\nIt is disabled in production builds, so you don't need to worry about that.");
        }
      }
    };
  }
  var MiddlewareArray = (
    /** @class */
    function(_super) {
      __extends(MiddlewareArray2, _super);
      function MiddlewareArray2() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        var _this = _super.apply(this, args) || this;
        Object.setPrototypeOf(_this, MiddlewareArray2.prototype);
        return _this;
      }
      Object.defineProperty(MiddlewareArray2, Symbol.species, {
        get: function() {
          return MiddlewareArray2;
        },
        enumerable: false,
        configurable: true
      });
      MiddlewareArray2.prototype.concat = function() {
        var arr = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          arr[_i] = arguments[_i];
        }
        return _super.prototype.concat.apply(this, arr);
      };
      MiddlewareArray2.prototype.prepend = function() {
        var arr = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          arr[_i] = arguments[_i];
        }
        if (arr.length === 1 && Array.isArray(arr[0])) {
          return new (MiddlewareArray2.bind.apply(MiddlewareArray2, __spreadArray([void 0], arr[0].concat(this))))();
        }
        return new (MiddlewareArray2.bind.apply(MiddlewareArray2, __spreadArray([void 0], arr.concat(this))))();
      };
      return MiddlewareArray2;
    }(Array)
  );
  var EnhancerArray = (
    /** @class */
    function(_super) {
      __extends(EnhancerArray2, _super);
      function EnhancerArray2() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        var _this = _super.apply(this, args) || this;
        Object.setPrototypeOf(_this, EnhancerArray2.prototype);
        return _this;
      }
      Object.defineProperty(EnhancerArray2, Symbol.species, {
        get: function() {
          return EnhancerArray2;
        },
        enumerable: false,
        configurable: true
      });
      EnhancerArray2.prototype.concat = function() {
        var arr = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          arr[_i] = arguments[_i];
        }
        return _super.prototype.concat.apply(this, arr);
      };
      EnhancerArray2.prototype.prepend = function() {
        var arr = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          arr[_i] = arguments[_i];
        }
        if (arr.length === 1 && Array.isArray(arr[0])) {
          return new (EnhancerArray2.bind.apply(EnhancerArray2, __spreadArray([void 0], arr[0].concat(this))))();
        }
        return new (EnhancerArray2.bind.apply(EnhancerArray2, __spreadArray([void 0], arr.concat(this))))();
      };
      return EnhancerArray2;
    }(Array)
  );
  function freezeDraftable(val) {
    return t2(val) ? immer_esm_default(val, function() {
    }) : val;
  }
  var isProduction = false;
  var prefix = "Invariant failed";
  function invariant2(condition, message) {
    if (condition) {
      return;
    }
    if (isProduction) {
      throw new Error(prefix);
    }
    throw new Error(prefix + ": " + (message || ""));
  }
  function stringify3(obj, serializer, indent, decycler) {
    return JSON.stringify(obj, getSerialize(serializer, decycler), indent);
  }
  function getSerialize(serializer, decycler) {
    var stack = [], keys2 = [];
    if (!decycler)
      decycler = function(_24, value) {
        if (stack[0] === value)
          return "[Circular ~]";
        return "[Circular ~." + keys2.slice(0, stack.indexOf(value)).join(".") + "]";
      };
    return function(key2, value) {
      if (stack.length > 0) {
        var thisPos = stack.indexOf(this);
        ~thisPos ? stack.splice(thisPos + 1) : stack.push(this);
        ~thisPos ? keys2.splice(thisPos, Infinity, key2) : keys2.push(key2);
        if (~stack.indexOf(value))
          value = decycler.call(this, key2, value);
      } else
        stack.push(value);
      return serializer == null ? value : serializer.call(this, key2, value);
    };
  }
  function isImmutableDefault(value) {
    return typeof value !== "object" || value == null || Object.isFrozen(value);
  }
  function trackForMutations(isImmutable, ignorePaths, obj) {
    var trackedProperties = trackProperties(isImmutable, ignorePaths, obj);
    return {
      detectMutations: function() {
        return detectMutations(isImmutable, ignorePaths, trackedProperties, obj);
      }
    };
  }
  function trackProperties(isImmutable, ignorePaths, obj, path2, checkedObjects) {
    if (ignorePaths === void 0) {
      ignorePaths = [];
    }
    if (path2 === void 0) {
      path2 = "";
    }
    if (checkedObjects === void 0) {
      checkedObjects = /* @__PURE__ */ new Set();
    }
    var tracked = { value: obj };
    if (!isImmutable(obj) && !checkedObjects.has(obj)) {
      checkedObjects.add(obj);
      tracked.children = {};
      for (var key2 in obj) {
        var childPath = path2 ? path2 + "." + key2 : key2;
        if (ignorePaths.length && ignorePaths.indexOf(childPath) !== -1) {
          continue;
        }
        tracked.children[key2] = trackProperties(isImmutable, ignorePaths, obj[key2], childPath);
      }
    }
    return tracked;
  }
  function detectMutations(isImmutable, ignoredPaths, trackedProperty, obj, sameParentRef, path2) {
    if (ignoredPaths === void 0) {
      ignoredPaths = [];
    }
    if (sameParentRef === void 0) {
      sameParentRef = false;
    }
    if (path2 === void 0) {
      path2 = "";
    }
    var prevObj = trackedProperty ? trackedProperty.value : void 0;
    var sameRef = prevObj === obj;
    if (sameParentRef && !sameRef && !Number.isNaN(obj)) {
      return { wasMutated: true, path: path2 };
    }
    if (isImmutable(prevObj) || isImmutable(obj)) {
      return { wasMutated: false };
    }
    var keysToDetect = {};
    for (var key2 in trackedProperty.children) {
      keysToDetect[key2] = true;
    }
    for (var key2 in obj) {
      keysToDetect[key2] = true;
    }
    var hasIgnoredPaths = ignoredPaths.length > 0;
    var _loop_1 = function(key3) {
      var nestedPath = path2 ? path2 + "." + key3 : key3;
      if (hasIgnoredPaths) {
        var hasMatches = ignoredPaths.some(function(ignored) {
          if (ignored instanceof RegExp) {
            return ignored.test(nestedPath);
          }
          return nestedPath === ignored;
        });
        if (hasMatches) {
          return "continue";
        }
      }
      var result2 = detectMutations(isImmutable, ignoredPaths, trackedProperty.children[key3], obj[key3], sameRef, nestedPath);
      if (result2.wasMutated) {
        return { value: result2 };
      }
    };
    for (var key2 in keysToDetect) {
      var state_1 = _loop_1(key2);
      if (typeof state_1 === "object")
        return state_1.value;
    }
    return { wasMutated: false };
  }
  function createImmutableStateInvariantMiddleware(options) {
    if (options === void 0) {
      options = {};
    }
    if (false) {
      return function() {
        return function(next) {
          return function(action) {
            return next(action);
          };
        };
      };
    }
    var _c = options.isImmutable, isImmutable = _c === void 0 ? isImmutableDefault : _c, ignoredPaths = options.ignoredPaths, _d = options.warnAfter, warnAfter = _d === void 0 ? 32 : _d, ignore = options.ignore;
    ignoredPaths = ignoredPaths || ignore;
    var track = trackForMutations.bind(null, isImmutable, ignoredPaths);
    return function(_c2) {
      var getState = _c2.getState;
      var state = getState();
      var tracker = track(state);
      var result2;
      return function(next) {
        return function(action) {
          var measureUtils = getTimeMeasureUtils(warnAfter, "ImmutableStateInvariantMiddleware");
          measureUtils.measureTime(function() {
            state = getState();
            result2 = tracker.detectMutations();
            tracker = track(state);
            invariant2(!result2.wasMutated, "A state mutation was detected between dispatches, in the path '" + (result2.path || "") + "'.  This may cause incorrect behavior. (https://redux.js.org/style-guide/style-guide#do-not-mutate-state)");
          });
          var dispatchedAction = next(action);
          measureUtils.measureTime(function() {
            state = getState();
            result2 = tracker.detectMutations();
            tracker = track(state);
            result2.wasMutated && invariant2(!result2.wasMutated, "A state mutation was detected inside a dispatch, in the path: " + (result2.path || "") + ". Take a look at the reducer(s) handling the action " + stringify3(action) + ". (https://redux.js.org/style-guide/style-guide#do-not-mutate-state)");
          });
          measureUtils.warnIfExceeded();
          return dispatchedAction;
        };
      };
    };
  }
  function isPlain(val) {
    var type4 = typeof val;
    return val == null || type4 === "string" || type4 === "boolean" || type4 === "number" || Array.isArray(val) || isPlainObject5(val);
  }
  function findNonSerializableValue(value, path2, isSerializable, getEntries, ignoredPaths, cache) {
    if (path2 === void 0) {
      path2 = "";
    }
    if (isSerializable === void 0) {
      isSerializable = isPlain;
    }
    if (ignoredPaths === void 0) {
      ignoredPaths = [];
    }
    var foundNestedSerializable;
    if (!isSerializable(value)) {
      return {
        keyPath: path2 || "<root>",
        value
      };
    }
    if (typeof value !== "object" || value === null) {
      return false;
    }
    if (cache == null ? void 0 : cache.has(value))
      return false;
    var entries = getEntries != null ? getEntries(value) : Object.entries(value);
    var hasIgnoredPaths = ignoredPaths.length > 0;
    var _loop_2 = function(key3, nestedValue2) {
      var nestedPath = path2 ? path2 + "." + key3 : key3;
      if (hasIgnoredPaths) {
        var hasMatches = ignoredPaths.some(function(ignored) {
          if (ignored instanceof RegExp) {
            return ignored.test(nestedPath);
          }
          return nestedPath === ignored;
        });
        if (hasMatches) {
          return "continue";
        }
      }
      if (!isSerializable(nestedValue2)) {
        return { value: {
          keyPath: nestedPath,
          value: nestedValue2
        } };
      }
      if (typeof nestedValue2 === "object") {
        foundNestedSerializable = findNonSerializableValue(nestedValue2, nestedPath, isSerializable, getEntries, ignoredPaths, cache);
        if (foundNestedSerializable) {
          return { value: foundNestedSerializable };
        }
      }
    };
    for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {
      var _c = entries_1[_i], key2 = _c[0], nestedValue = _c[1];
      var state_2 = _loop_2(key2, nestedValue);
      if (typeof state_2 === "object")
        return state_2.value;
    }
    if (cache && isNestedFrozen(value))
      cache.add(value);
    return false;
  }
  function isNestedFrozen(value) {
    if (!Object.isFrozen(value))
      return false;
    for (var _i = 0, _c = Object.values(value); _i < _c.length; _i++) {
      var nestedValue = _c[_i];
      if (typeof nestedValue !== "object" || nestedValue === null)
        continue;
      if (!isNestedFrozen(nestedValue))
        return false;
    }
    return true;
  }
  function createSerializableStateInvariantMiddleware(options) {
    if (options === void 0) {
      options = {};
    }
    if (false) {
      return function() {
        return function(next) {
          return function(action) {
            return next(action);
          };
        };
      };
    }
    var _c = options.isSerializable, isSerializable = _c === void 0 ? isPlain : _c, getEntries = options.getEntries, _d = options.ignoredActions, ignoredActions = _d === void 0 ? [] : _d, _e = options.ignoredActionPaths, ignoredActionPaths = _e === void 0 ? ["meta.arg", "meta.baseQueryMeta"] : _e, _f = options.ignoredPaths, ignoredPaths = _f === void 0 ? [] : _f, _g = options.warnAfter, warnAfter = _g === void 0 ? 32 : _g, _h = options.ignoreState, ignoreState = _h === void 0 ? false : _h, _j = options.ignoreActions, ignoreActions = _j === void 0 ? false : _j, _k = options.disableCache, disableCache = _k === void 0 ? false : _k;
    var cache = !disableCache && WeakSet ? /* @__PURE__ */ new WeakSet() : void 0;
    return function(storeAPI) {
      return function(next) {
        return function(action) {
          var result2 = next(action);
          var measureUtils = getTimeMeasureUtils(warnAfter, "SerializableStateInvariantMiddleware");
          if (!ignoreActions && !(ignoredActions.length && ignoredActions.indexOf(action.type) !== -1)) {
            measureUtils.measureTime(function() {
              var foundActionNonSerializableValue = findNonSerializableValue(action, "", isSerializable, getEntries, ignoredActionPaths, cache);
              if (foundActionNonSerializableValue) {
                var keyPath = foundActionNonSerializableValue.keyPath, value = foundActionNonSerializableValue.value;
                console.error("A non-serializable value was detected in an action, in the path: `" + keyPath + "`. Value:", value, "\nTake a look at the logic that dispatched this action: ", action, "\n(See https://redux.js.org/faq/actions#why-should-type-be-a-string-or-at-least-serializable-why-should-my-action-types-be-constants)", "\n(To allow non-serializable values see: https://redux-toolkit.js.org/usage/usage-guide#working-with-non-serializable-data)");
              }
            });
          }
          if (!ignoreState) {
            measureUtils.measureTime(function() {
              var state = storeAPI.getState();
              var foundStateNonSerializableValue = findNonSerializableValue(state, "", isSerializable, getEntries, ignoredPaths, cache);
              if (foundStateNonSerializableValue) {
                var keyPath = foundStateNonSerializableValue.keyPath, value = foundStateNonSerializableValue.value;
                console.error("A non-serializable value was detected in the state, in the path: `" + keyPath + "`. Value:", value, "\nTake a look at the reducer(s) handling this action type: " + action.type + ".\n(See https://redux.js.org/faq/organizing-state#can-i-put-functions-promises-or-other-non-serializable-items-in-my-store-state)");
              }
            });
            measureUtils.warnIfExceeded();
          }
          return result2;
        };
      };
    };
  }
  function isBoolean2(x2) {
    return typeof x2 === "boolean";
  }
  function curryGetDefaultMiddleware() {
    return function curriedGetDefaultMiddleware(options) {
      return getDefaultMiddleware(options);
    };
  }
  function getDefaultMiddleware(options) {
    if (options === void 0) {
      options = {};
    }
    var _c = options.thunk, thunk2 = _c === void 0 ? true : _c, _d = options.immutableCheck, immutableCheck = _d === void 0 ? true : _d, _e = options.serializableCheck, serializableCheck = _e === void 0 ? true : _e, _f = options.actionCreatorCheck, actionCreatorCheck = _f === void 0 ? true : _f;
    var middlewareArray = new MiddlewareArray();
    if (thunk2) {
      if (isBoolean2(thunk2)) {
        middlewareArray.push(es_default27);
      } else {
        middlewareArray.push(es_default27.withExtraArgument(thunk2.extraArgument));
      }
    }
    if (true) {
      if (immutableCheck) {
        var immutableOptions = {};
        if (!isBoolean2(immutableCheck)) {
          immutableOptions = immutableCheck;
        }
        middlewareArray.unshift(createImmutableStateInvariantMiddleware(immutableOptions));
      }
      if (serializableCheck) {
        var serializableOptions = {};
        if (!isBoolean2(serializableCheck)) {
          serializableOptions = serializableCheck;
        }
        middlewareArray.push(createSerializableStateInvariantMiddleware(serializableOptions));
      }
      if (actionCreatorCheck) {
        var actionCreatorOptions = {};
        if (!isBoolean2(actionCreatorCheck)) {
          actionCreatorOptions = actionCreatorCheck;
        }
        middlewareArray.unshift(createActionCreatorInvariantMiddleware(actionCreatorOptions));
      }
    }
    return middlewareArray;
  }
  var IS_PRODUCTION = false;
  function configureStore(options) {
    var curriedGetDefaultMiddleware = curryGetDefaultMiddleware();
    var _c = options || {}, _d = _c.reducer, reducer = _d === void 0 ? void 0 : _d, _e = _c.middleware, middleware = _e === void 0 ? curriedGetDefaultMiddleware() : _e, _f = _c.devTools, devTools = _f === void 0 ? true : _f, _g = _c.preloadedState, preloadedState = _g === void 0 ? void 0 : _g, _h = _c.enhancers, enhancers = _h === void 0 ? void 0 : _h;
    var rootReducer2;
    if (typeof reducer === "function") {
      rootReducer2 = reducer;
    } else if (isPlainObject5(reducer)) {
      rootReducer2 = combineReducers(reducer);
    } else {
      throw new Error('"reducer" is a required argument, and must be a function or an object of functions that can be passed to combineReducers');
    }
    var finalMiddleware = middleware;
    if (typeof finalMiddleware === "function") {
      finalMiddleware = finalMiddleware(curriedGetDefaultMiddleware);
      if (!IS_PRODUCTION && !Array.isArray(finalMiddleware)) {
        throw new Error("when using a middleware builder function, an array of middleware must be returned");
      }
    }
    if (!IS_PRODUCTION && finalMiddleware.some(function(item) {
      return typeof item !== "function";
    })) {
      throw new Error("each middleware provided to configureStore must be a function");
    }
    var middlewareEnhancer = applyMiddleware.apply(void 0, finalMiddleware);
    var finalCompose = compose;
    if (devTools) {
      finalCompose = composeWithDevTools(__spreadValues({
        trace: !IS_PRODUCTION
      }, typeof devTools === "object" && devTools));
    }
    var defaultEnhancers = new EnhancerArray(middlewareEnhancer);
    var storeEnhancers = defaultEnhancers;
    if (Array.isArray(enhancers)) {
      storeEnhancers = __spreadArray([middlewareEnhancer], enhancers);
    } else if (typeof enhancers === "function") {
      storeEnhancers = enhancers(defaultEnhancers);
    }
    var composedEnhancer = finalCompose.apply(void 0, storeEnhancers);
    return createStore2(rootReducer2, preloadedState, composedEnhancer);
  }
  function executeReducerBuilderCallback(builderCallback) {
    var actionsMap = {};
    var actionMatchers = [];
    var defaultCaseReducer;
    var builder = {
      addCase: function(typeOrActionCreator, reducer) {
        if (true) {
          if (actionMatchers.length > 0) {
            throw new Error("`builder.addCase` should only be called before calling `builder.addMatcher`");
          }
          if (defaultCaseReducer) {
            throw new Error("`builder.addCase` should only be called before calling `builder.addDefaultCase`");
          }
        }
        var type4 = typeof typeOrActionCreator === "string" ? typeOrActionCreator : typeOrActionCreator.type;
        if (!type4) {
          throw new Error("`builder.addCase` cannot be called with an empty action type");
        }
        if (type4 in actionsMap) {
          throw new Error("`builder.addCase` cannot be called with two reducers for the same action type");
        }
        actionsMap[type4] = reducer;
        return builder;
      },
      addMatcher: function(matcher, reducer) {
        if (true) {
          if (defaultCaseReducer) {
            throw new Error("`builder.addMatcher` should only be called before calling `builder.addDefaultCase`");
          }
        }
        actionMatchers.push({ matcher, reducer });
        return builder;
      },
      addDefaultCase: function(reducer) {
        if (true) {
          if (defaultCaseReducer) {
            throw new Error("`builder.addDefaultCase` can only be called once");
          }
        }
        defaultCaseReducer = reducer;
        return builder;
      }
    };
    builderCallback(builder);
    return [actionsMap, actionMatchers, defaultCaseReducer];
  }
  function isStateFunction(x2) {
    return typeof x2 === "function";
  }
  var hasWarnedAboutObjectNotation = false;
  function createReducer(initialState10, mapOrBuilderCallback, actionMatchers, defaultCaseReducer) {
    if (actionMatchers === void 0) {
      actionMatchers = [];
    }
    if (true) {
      if (typeof mapOrBuilderCallback === "object") {
        if (!hasWarnedAboutObjectNotation) {
          hasWarnedAboutObjectNotation = true;
          console.warn("The object notation for `createReducer` is deprecated, and will be removed in RTK 2.0. Please use the 'builder callback' notation instead: https://redux-toolkit.js.org/api/createReducer");
        }
      }
    }
    var _c = typeof mapOrBuilderCallback === "function" ? executeReducerBuilderCallback(mapOrBuilderCallback) : [mapOrBuilderCallback, actionMatchers, defaultCaseReducer], actionsMap = _c[0], finalActionMatchers = _c[1], finalDefaultCaseReducer = _c[2];
    var getInitialState;
    if (isStateFunction(initialState10)) {
      getInitialState = function() {
        return freezeDraftable(initialState10());
      };
    } else {
      var frozenInitialState_1 = freezeDraftable(initialState10);
      getInitialState = function() {
        return frozenInitialState_1;
      };
    }
    function reducer(state, action) {
      if (state === void 0) {
        state = getInitialState();
      }
      var caseReducers = __spreadArray([
        actionsMap[action.type]
      ], finalActionMatchers.filter(function(_c2) {
        var matcher = _c2.matcher;
        return matcher(action);
      }).map(function(_c2) {
        var reducer2 = _c2.reducer;
        return reducer2;
      }));
      if (caseReducers.filter(function(cr) {
        return !!cr;
      }).length === 0) {
        caseReducers = [finalDefaultCaseReducer];
      }
      return caseReducers.reduce(function(previousState, caseReducer) {
        if (caseReducer) {
          if (r2(previousState)) {
            var draft = previousState;
            var result2 = caseReducer(draft, action);
            if (result2 === void 0) {
              return previousState;
            }
            return result2;
          } else if (!t2(previousState)) {
            var result2 = caseReducer(previousState, action);
            if (result2 === void 0) {
              if (previousState === null) {
                return previousState;
              }
              throw Error("A case reducer on a non-draftable value must not return undefined");
            }
            return result2;
          } else {
            return immer_esm_default(previousState, function(draft2) {
              return caseReducer(draft2, action);
            });
          }
        }
        return previousState;
      }, state);
    }
    reducer.getInitialState = getInitialState;
    return reducer;
  }
  var hasWarnedAboutObjectNotation2 = false;
  function getType2(slice, actionKey) {
    return slice + "/" + actionKey;
  }
  function createSlice(options) {
    var name = options.name;
    if (!name) {
      throw new Error("`name` is a required option for createSlice");
    }
    if (typeof process !== "undefined" && true) {
      if (options.initialState === void 0) {
        console.error("You must provide an `initialState` value that is not `undefined`. You may have misspelled `initialState`");
      }
    }
    var initialState10 = typeof options.initialState == "function" ? options.initialState : freezeDraftable(options.initialState);
    var reducers = options.reducers || {};
    var reducerNames = Object.keys(reducers);
    var sliceCaseReducersByName = {};
    var sliceCaseReducersByType = {};
    var actionCreators = {};
    reducerNames.forEach(function(reducerName) {
      var maybeReducerWithPrepare = reducers[reducerName];
      var type4 = getType2(name, reducerName);
      var caseReducer;
      var prepareCallback;
      if ("reducer" in maybeReducerWithPrepare) {
        caseReducer = maybeReducerWithPrepare.reducer;
        prepareCallback = maybeReducerWithPrepare.prepare;
      } else {
        caseReducer = maybeReducerWithPrepare;
      }
      sliceCaseReducersByName[reducerName] = caseReducer;
      sliceCaseReducersByType[type4] = caseReducer;
      actionCreators[reducerName] = prepareCallback ? createAction(type4, prepareCallback) : createAction(type4);
    });
    function buildReducer() {
      if (true) {
        if (typeof options.extraReducers === "object") {
          if (!hasWarnedAboutObjectNotation2) {
            hasWarnedAboutObjectNotation2 = true;
            console.warn("The object notation for `createSlice.extraReducers` is deprecated, and will be removed in RTK 2.0. Please use the 'builder callback' notation instead: https://redux-toolkit.js.org/api/createSlice");
          }
        }
      }
      var _c = typeof options.extraReducers === "function" ? executeReducerBuilderCallback(options.extraReducers) : [options.extraReducers], _d = _c[0], extraReducers = _d === void 0 ? {} : _d, _e = _c[1], actionMatchers = _e === void 0 ? [] : _e, _f = _c[2], defaultCaseReducer = _f === void 0 ? void 0 : _f;
      var finalCaseReducers = __spreadValues(__spreadValues({}, extraReducers), sliceCaseReducersByType);
      return createReducer(initialState10, function(builder) {
        for (var key2 in finalCaseReducers) {
          builder.addCase(key2, finalCaseReducers[key2]);
        }
        for (var _i = 0, actionMatchers_1 = actionMatchers; _i < actionMatchers_1.length; _i++) {
          var m2 = actionMatchers_1[_i];
          builder.addMatcher(m2.matcher, m2.reducer);
        }
        if (defaultCaseReducer) {
          builder.addDefaultCase(defaultCaseReducer);
        }
      });
    }
    var _reducer;
    return {
      name,
      reducer: function(state, action) {
        if (!_reducer)
          _reducer = buildReducer();
        return _reducer(state, action);
      },
      actions: actionCreators,
      caseReducers: sliceCaseReducersByName,
      getInitialState: function() {
        if (!_reducer)
          _reducer = buildReducer();
        return _reducer.getInitialState();
      }
    };
  }
  var urlAlphabet = "ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW";
  var nanoid = function(size) {
    if (size === void 0) {
      size = 21;
    }
    var id2 = "";
    var i3 = size;
    while (i3--) {
      id2 += urlAlphabet[Math.random() * 64 | 0];
    }
    return id2;
  };
  var commonProperties = [
    "name",
    "message",
    "stack",
    "code"
  ];
  var RejectWithValue = (
    /** @class */
    function() {
      function RejectWithValue2(payload, meta) {
        this.payload = payload;
        this.meta = meta;
      }
      return RejectWithValue2;
    }()
  );
  var FulfillWithMeta = (
    /** @class */
    function() {
      function FulfillWithMeta2(payload, meta) {
        this.payload = payload;
        this.meta = meta;
      }
      return FulfillWithMeta2;
    }()
  );
  var miniSerializeError = function(value) {
    if (typeof value === "object" && value !== null) {
      var simpleError = {};
      for (var _i = 0, commonProperties_1 = commonProperties; _i < commonProperties_1.length; _i++) {
        var property = commonProperties_1[_i];
        if (typeof value[property] === "string") {
          simpleError[property] = value[property];
        }
      }
      return simpleError;
    }
    return { message: String(value) };
  };
  var createAsyncThunk = function() {
    function createAsyncThunk2(typePrefix, payloadCreator, options) {
      var fulfilled = createAction(typePrefix + "/fulfilled", function(payload, requestId, arg, meta) {
        return {
          payload,
          meta: __spreadProps(__spreadValues({}, meta || {}), {
            arg,
            requestId,
            requestStatus: "fulfilled"
          })
        };
      });
      var pending = createAction(typePrefix + "/pending", function(requestId, arg, meta) {
        return {
          payload: void 0,
          meta: __spreadProps(__spreadValues({}, meta || {}), {
            arg,
            requestId,
            requestStatus: "pending"
          })
        };
      });
      var rejected = createAction(typePrefix + "/rejected", function(error2, requestId, arg, payload, meta) {
        return {
          payload,
          error: (options && options.serializeError || miniSerializeError)(error2 || "Rejected"),
          meta: __spreadProps(__spreadValues({}, meta || {}), {
            arg,
            requestId,
            rejectedWithValue: !!payload,
            requestStatus: "rejected",
            aborted: (error2 == null ? void 0 : error2.name) === "AbortError",
            condition: (error2 == null ? void 0 : error2.name) === "ConditionError"
          })
        };
      });
      var displayedWarning = false;
      var AC = typeof AbortController !== "undefined" ? AbortController : (
        /** @class */
        function() {
          function class_1() {
            this.signal = {
              aborted: false,
              addEventListener: function() {
              },
              dispatchEvent: function() {
                return false;
              },
              onabort: function() {
              },
              removeEventListener: function() {
              },
              reason: void 0,
              throwIfAborted: function() {
              }
            };
          }
          class_1.prototype.abort = function() {
            if (true) {
              if (!displayedWarning) {
                displayedWarning = true;
                console.info("This platform does not implement AbortController. \nIf you want to use the AbortController to react to `abort` events, please consider importing a polyfill like 'abortcontroller-polyfill/dist/abortcontroller-polyfill-only'.");
              }
            }
          };
          return class_1;
        }()
      );
      function actionCreator(arg) {
        return function(dispatch2, getState, extra) {
          var requestId = (options == null ? void 0 : options.idGenerator) ? options.idGenerator(arg) : nanoid();
          var abortController = new AC();
          var abortReason;
          var started = false;
          function abort(reason) {
            abortReason = reason;
            abortController.abort();
          }
          var promise2 = function() {
            return __async(this, null, function() {
              var _a, _b, finalAction, conditionResult, abortedPromise, err_1, skipDispatch;
              return __generator(this, function(_c) {
                switch (_c.label) {
                  case 0:
                    _c.trys.push([0, 4, , 5]);
                    conditionResult = (_a = options == null ? void 0 : options.condition) == null ? void 0 : _a.call(options, arg, { getState, extra });
                    if (!isThenable2(conditionResult))
                      return [3, 2];
                    return [4, conditionResult];
                  case 1:
                    conditionResult = _c.sent();
                    _c.label = 2;
                  case 2:
                    if (conditionResult === false || abortController.signal.aborted) {
                      throw {
                        name: "ConditionError",
                        message: "Aborted due to condition callback returning false."
                      };
                    }
                    started = true;
                    abortedPromise = new Promise(function(_24, reject) {
                      return abortController.signal.addEventListener("abort", function() {
                        return reject({
                          name: "AbortError",
                          message: abortReason || "Aborted"
                        });
                      });
                    });
                    dispatch2(pending(requestId, arg, (_b = options == null ? void 0 : options.getPendingMeta) == null ? void 0 : _b.call(options, { requestId, arg }, { getState, extra })));
                    return [4, Promise.race([
                      abortedPromise,
                      Promise.resolve(payloadCreator(arg, {
                        dispatch: dispatch2,
                        getState,
                        extra,
                        requestId,
                        signal: abortController.signal,
                        abort,
                        rejectWithValue: function(value, meta) {
                          return new RejectWithValue(value, meta);
                        },
                        fulfillWithValue: function(value, meta) {
                          return new FulfillWithMeta(value, meta);
                        }
                      })).then(function(result2) {
                        if (result2 instanceof RejectWithValue) {
                          throw result2;
                        }
                        if (result2 instanceof FulfillWithMeta) {
                          return fulfilled(result2.payload, requestId, arg, result2.meta);
                        }
                        return fulfilled(result2, requestId, arg);
                      })
                    ])];
                  case 3:
                    finalAction = _c.sent();
                    return [3, 5];
                  case 4:
                    err_1 = _c.sent();
                    finalAction = err_1 instanceof RejectWithValue ? rejected(null, requestId, arg, err_1.payload, err_1.meta) : rejected(err_1, requestId, arg);
                    return [3, 5];
                  case 5:
                    skipDispatch = options && !options.dispatchConditionRejection && rejected.match(finalAction) && finalAction.meta.condition;
                    if (!skipDispatch) {
                      dispatch2(finalAction);
                    }
                    return [2, finalAction];
                }
              });
            });
          }();
          return Object.assign(promise2, {
            abort,
            requestId,
            arg,
            unwrap: function() {
              return promise2.then(unwrapResult);
            }
          });
        };
      }
      return Object.assign(actionCreator, {
        pending,
        rejected,
        fulfilled,
        typePrefix
      });
    }
    createAsyncThunk2.withTypes = function() {
      return createAsyncThunk2;
    };
    return createAsyncThunk2;
  }();
  function unwrapResult(action) {
    if (action.meta && action.meta.rejectedWithValue) {
      throw action.payload;
    }
    if (action.error) {
      throw action.error;
    }
    return action.payload;
  }
  function isThenable2(value) {
    return value !== null && typeof value === "object" && typeof value.then === "function";
  }
  var task = "task";
  var listener = "listener";
  var completed = "completed";
  var cancelled = "cancelled";
  var taskCancelled = "task-" + cancelled;
  var taskCompleted = "task-" + completed;
  var listenerCancelled = listener + "-" + cancelled;
  var listenerCompleted = listener + "-" + completed;
  var TaskAbortError = (
    /** @class */
    function() {
      function TaskAbortError2(code) {
        this.code = code;
        this.name = "TaskAbortError";
        this.message = task + " " + cancelled + " (reason: " + code + ")";
      }
      return TaskAbortError2;
    }()
  );
  var alm = "listenerMiddleware";
  var addListener = createAction(alm + "/add");
  var clearAllListeners = createAction(alm + "/removeAll");
  var removeListener = createAction(alm + "/remove");
  var promise;
  var queueMicrotaskShim = typeof queueMicrotask === "function" ? queueMicrotask.bind(typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : globalThis) : function(cb) {
    return (promise || (promise = Promise.resolve())).then(cb).catch(function(err) {
      return setTimeout(function() {
        throw err;
      }, 0);
    });
  };
  var createQueueWithTimer = function(timeout) {
    return function(notify2) {
      setTimeout(notify2, timeout);
    };
  };
  var rAF = typeof window !== "undefined" && window.requestAnimationFrame ? window.requestAnimationFrame : createQueueWithTimer(10);
  F();

  // src/redux/user/slice.ts
  var initialState2 = {
    loading: false,
    error: null,
    token: null
  };
  var signIn = createAsyncThunk(
    "user/signIn",
    async (parameters, thunkAPI) => {
      console.log("signIn Action done! ");
      const { data } = await axios_default2.post("/auth/login", {
        email: parameters.email,
        password: parameters.password
      });
      return data.token;
    }
  );
  var userSlice = createSlice({
    name: "user",
    initialState: initialState2,
    reducers: {
      logOut: (state) => {
        state.token = null;
        state.error = null;
        state.loading = false;
      },
      // 手动设置token测试（设置无效token，看看后端会不会报错）
      setToken: (state, action) => {
        state.token = action.payload.token;
      }
    },
    extraReducers: {
      [signIn.pending.type]: (state) => {
        state.loading = true;
      },
      [signIn.fulfilled.type]: (state, action) => {
        state.loading = false;
        state.token = action.payload;
      },
      [signIn.rejected.type]: (state, action) => {
        state.loading = false;
        state.error = action.payload;
      }
    }
  });

  // src/utils/axios/index.ts
  var instance = axios_default.create({
    // baseURL,
    headers: {
      "x-icode": "0EABAA984A686F10"
      // "x-icode": "qKhDxI15yz",
    }
  });
  var store;
  var injectStore = (_store) => {
    store = _store;
  };
  instance.interceptors.response.use(
    (response) => {
      return response;
    },
    (error2) => {
      if (!error2.response) {
        message_default.error("\u7F51\u7EDC\u5F02\u5E38", 3);
      } else if (error2.response.status == 401) {
        error2.response.data.err ? message_default.error(error2.response.data.err) : message_default.error("\u7528\u6237\u8EAB\u4EFD\u4E0D\u5408\u6CD5\uFF0C\u8BF7\u91CD\u65B0\u767B\u5F55\uFF01");
        store.dispatch(userSlice.actions.logOut());
        history_default.push("/signin");
      } else if (error2.response.status != 200) {
        console.log(error2.response);
        error2.response.data.err ? message_default.error(error2.response.data.err, 3) : null;
      }
    }
  );
  var axios_default2 = instance;

  // src/redux/recommendProducts/slice.ts
  var initialState3 = {
    loading: true,
    error: null,
    productList: []
  };
  var getRecommendProduct = createAsyncThunk(
    "recommendProduct/getRecommendProduct",
    async (thunkAPI) => {
      const { data } = await axios_default2.get("/api/productCollections");
      return data;
    }
  );
  var recommendProductSlice = createSlice({
    name: "recommendProduct",
    initialState: initialState3,
    reducers: {},
    extraReducers: {
      [getRecommendProduct.pending.type]: (state) => {
        state.loading = true;
      },
      [getRecommendProduct.fulfilled.type]: (state, action) => {
        state.loading = false;
        state.productList = action.payload;
      },
      [getRecommendProduct.rejected.type]: (state, action) => {
        state.loading = false;
        state.error = action.payload;
      }
    }
  });

  // src/layouts/mainLayout/MainLayout.tsx
  var import_react127 = __toESM(require_react());

  // src/layouts/mainLayout/MainLayout.module.css
  var MainLayout_default = {
    "page-content": "MainLayout_page-content"
  };

  // src/assets/logo.jpg
  var logo_default = "./logo-BKIXB2UW.jpg";

  // src/components/header/Header.module.css
  var Header_default3 = {
    "app-header": "Header_app-header",
    "top-header": "Header_top-header",
    inner: "Header_inner",
    "button-group": "Header_button-group",
    "main-header": "Header_main-header",
    "App-logo": "Header_App-logo",
    "App-logo-spin": "Header_App-logo-spin",
    title: "Header_title",
    "search-input": "Header_search-input",
    "main-menu": "Header_main-menu"
  };

  // src/components/header/Header.tsx
  var import_react109 = __toESM(require_react());

  // node_modules/jwt-decode/build/jwt-decode.esm.js
  function e2(e3) {
    this.message = e3;
  }
  e2.prototype = new Error(), e2.prototype.name = "InvalidCharacterError";
  var r3 = "undefined" != typeof window && window.atob && window.atob.bind(window) || function(r4) {
    var t4 = String(r4).replace(/=+$/, "");
    if (t4.length % 4 == 1)
      throw new e2("'atob' failed: The string to be decoded is not correctly encoded.");
    for (var n4, o3, a2 = 0, i3 = 0, c2 = ""; o3 = t4.charAt(i3++); ~o3 && (n4 = a2 % 4 ? 64 * n4 + o3 : o3, a2++ % 4) ? c2 += String.fromCharCode(255 & n4 >> (-2 * a2 & 6)) : 0)
      o3 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".indexOf(o3);
    return c2;
  };
  function t3(e3) {
    var t4 = e3.replace(/-/g, "+").replace(/_/g, "/");
    switch (t4.length % 4) {
      case 0:
        break;
      case 2:
        t4 += "==";
        break;
      case 3:
        t4 += "=";
        break;
      default:
        throw "Illegal base64url string!";
    }
    try {
      return function(e4) {
        return decodeURIComponent(r3(e4).replace(/(.)/g, function(e5, r4) {
          var t5 = r4.charCodeAt(0).toString(16).toUpperCase();
          return t5.length < 2 && (t5 = "0" + t5), "%" + t5;
        }));
      }(t4);
    } catch (e4) {
      return r3(t4);
    }
  }
  function n3(e3) {
    this.message = e3;
  }
  function o2(e3, r4) {
    if ("string" != typeof e3)
      throw new n3("Invalid token specified");
    var o3 = true === (r4 = r4 || {}).header ? 0 : 1;
    try {
      return JSON.parse(t3(e3.split(".")[o3]));
    } catch (e4) {
      throw new n3("Invalid token specified: " + e4.message);
    }
  }
  n3.prototype = new Error(), n3.prototype.name = "InvalidTokenError";
  var jwt_decode_esm_default = o2;

  // node_modules/@ant-design/icons/es/components/AntdIcon.js
  var React393 = __toESM(require_react());
  var import_classnames146 = __toESM(require_classnames());

  // node_modules/@ant-design/icons/node_modules/@ant-design/colors/dist/index.esm.js
  var hueStep2 = 2;
  var saturationStep3 = 0.16;
  var saturationStep22 = 0.05;
  var brightnessStep12 = 0.05;
  var brightnessStep22 = 0.15;
  var lightColorCount2 = 5;
  var darkColorCount2 = 4;
  var darkColorMap2 = [{
    index: 7,
    opacity: 0.15
  }, {
    index: 6,
    opacity: 0.25
  }, {
    index: 5,
    opacity: 0.3
  }, {
    index: 5,
    opacity: 0.45
  }, {
    index: 5,
    opacity: 0.65
  }, {
    index: 5,
    opacity: 0.85
  }, {
    index: 4,
    opacity: 0.9
  }, {
    index: 3,
    opacity: 0.95
  }, {
    index: 2,
    opacity: 0.97
  }, {
    index: 1,
    opacity: 0.98
  }];
  function getHue2(hsv, i3, light) {
    var hue;
    if (Math.round(hsv.h) >= 60 && Math.round(hsv.h) <= 240) {
      hue = light ? Math.round(hsv.h) - hueStep2 * i3 : Math.round(hsv.h) + hueStep2 * i3;
    } else {
      hue = light ? Math.round(hsv.h) + hueStep2 * i3 : Math.round(hsv.h) - hueStep2 * i3;
    }
    if (hue < 0) {
      hue += 360;
    } else if (hue >= 360) {
      hue -= 360;
    }
    return hue;
  }
  function getSaturation2(hsv, i3, light) {
    if (hsv.h === 0 && hsv.s === 0) {
      return hsv.s;
    }
    var saturation;
    if (light) {
      saturation = hsv.s - saturationStep3 * i3;
    } else if (i3 === darkColorCount2) {
      saturation = hsv.s + saturationStep3;
    } else {
      saturation = hsv.s + saturationStep22 * i3;
    }
    if (saturation > 1) {
      saturation = 1;
    }
    if (light && i3 === lightColorCount2 && saturation > 0.1) {
      saturation = 0.1;
    }
    if (saturation < 0.06) {
      saturation = 0.06;
    }
    return Number(saturation.toFixed(2));
  }
  function getValue4(hsv, i3, light) {
    var value;
    if (light) {
      value = hsv.v + brightnessStep12 * i3;
    } else {
      value = hsv.v - brightnessStep22 * i3;
    }
    if (value > 1) {
      value = 1;
    }
    return Number(value.toFixed(2));
  }
  function generate3(color) {
    var opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var patterns = [];
    var pColor = new TinyColor(color);
    for (var i3 = lightColorCount2; i3 > 0; i3 -= 1) {
      var hsv = pColor.toHsv();
      var colorString = new TinyColor({
        h: getHue2(hsv, i3, true),
        s: getSaturation2(hsv, i3, true),
        v: getValue4(hsv, i3, true)
      }).toHexString();
      patterns.push(colorString);
    }
    patterns.push(pColor.toHexString());
    for (var _i = 1; _i <= darkColorCount2; _i += 1) {
      var _hsv = pColor.toHsv();
      var _colorString = new TinyColor({
        h: getHue2(_hsv, _i),
        s: getSaturation2(_hsv, _i),
        v: getValue4(_hsv, _i)
      }).toHexString();
      patterns.push(_colorString);
    }
    if (opts.theme === "dark") {
      return darkColorMap2.map(function(_ref) {
        var index2 = _ref.index, opacity = _ref.opacity;
        var darkColorString = new TinyColor(opts.backgroundColor || "#141414").mix(patterns[index2], opacity * 100).toHexString();
        return darkColorString;
      });
    }
    return patterns;
  }
  var presetPrimaryColors2 = {
    red: "#F5222D",
    volcano: "#FA541C",
    orange: "#FA8C16",
    gold: "#FAAD14",
    yellow: "#FADB14",
    lime: "#A0D911",
    green: "#52C41A",
    cyan: "#13C2C2",
    blue: "#1890FF",
    geekblue: "#2F54EB",
    purple: "#722ED1",
    magenta: "#EB2F96",
    grey: "#666666"
  };
  var presetPalettes2 = {};
  var presetDarkPalettes2 = {};
  Object.keys(presetPrimaryColors2).forEach(function(key2) {
    presetPalettes2[key2] = generate3(presetPrimaryColors2[key2]);
    presetPalettes2[key2].primary = presetPalettes2[key2][5];
    presetDarkPalettes2[key2] = generate3(presetPrimaryColors2[key2], {
      theme: "dark",
      backgroundColor: "#141414"
    });
    presetDarkPalettes2[key2].primary = presetDarkPalettes2[key2][5];
  });
  var red2 = presetPalettes2.red;
  var volcano2 = presetPalettes2.volcano;
  var gold2 = presetPalettes2.gold;
  var orange2 = presetPalettes2.orange;
  var yellow2 = presetPalettes2.yellow;
  var lime2 = presetPalettes2.lime;
  var green2 = presetPalettes2.green;
  var cyan2 = presetPalettes2.cyan;
  var blue2 = presetPalettes2.blue;
  var geekblue2 = presetPalettes2.geekblue;
  var purple2 = presetPalettes2.purple;
  var magenta2 = presetPalettes2.magenta;
  var grey2 = presetPalettes2.grey;

  // node_modules/@ant-design/icons/es/utils.js
  var import_react108 = __toESM(require_react());
  var import_insert_css = __toESM(require_insert_css());
  function warning11(valid, message) {
    warning_default(valid, "[@ant-design/icons] ".concat(message));
  }
  function isIconDefinition2(target) {
    return _typeof(target) === "object" && typeof target.name === "string" && typeof target.theme === "string" && (_typeof(target.icon) === "object" || typeof target.icon === "function");
  }
  function normalizeAttrs2() {
    var attrs = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    return Object.keys(attrs).reduce(function(acc, key2) {
      var val = attrs[key2];
      switch (key2) {
        case "class":
          acc.className = val;
          delete acc.class;
          break;
        default:
          acc[key2] = val;
      }
      return acc;
    }, {});
  }
  function generate4(node, key2, rootProps) {
    if (!rootProps) {
      return /* @__PURE__ */ import_react108.default.createElement(node.tag, _objectSpread2({
        key: key2
      }, normalizeAttrs2(node.attrs)), (node.children || []).map(function(child, index2) {
        return generate4(child, "".concat(key2, "-").concat(node.tag, "-").concat(index2));
      }));
    }
    return /* @__PURE__ */ import_react108.default.createElement(node.tag, _objectSpread2(_objectSpread2({
      key: key2
    }, normalizeAttrs2(node.attrs)), rootProps), (node.children || []).map(function(child, index2) {
      return generate4(child, "".concat(key2, "-").concat(node.tag, "-").concat(index2));
    }));
  }
  function getSecondaryColor2(primaryColor) {
    return generate3(primaryColor)[0];
  }
  function normalizeTwoToneColors2(twoToneColor) {
    if (!twoToneColor) {
      return [];
    }
    return Array.isArray(twoToneColor) ? twoToneColor : [twoToneColor];
  }
  var iconStyles2 = "\n.anticon {\n  display: inline-block;\n  color: inherit;\n  font-style: normal;\n  line-height: 0;\n  text-align: center;\n  text-transform: none;\n  vertical-align: -0.125em;\n  text-rendering: optimizeLegibility;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n.anticon > * {\n  line-height: 1;\n}\n\n.anticon svg {\n  display: inline-block;\n}\n\n.anticon::before {\n  display: none;\n}\n\n.anticon .anticon-icon {\n  display: block;\n}\n\n.anticon[tabindex] {\n  cursor: pointer;\n}\n\n.anticon-spin::before,\n.anticon-spin {\n  display: inline-block;\n  -webkit-animation: loadingCircle 1s infinite linear;\n  animation: loadingCircle 1s infinite linear;\n}\n\n@-webkit-keyframes loadingCircle {\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n\n@keyframes loadingCircle {\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n";
  var cssInjectedFlag = false;
  var useInsertStyles3 = function useInsertStyles4() {
    var styleStr = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : iconStyles2;
    (0, import_react108.useEffect)(function() {
      if (!cssInjectedFlag) {
        (0, import_insert_css.insertCss)(styleStr, {
          prepend: true
        });
        cssInjectedFlag = true;
      }
    }, []);
  };

  // node_modules/@ant-design/icons/es/components/IconBase.js
  var twoToneColorPalette2 = {
    primaryColor: "#333",
    secondaryColor: "#E6E6E6",
    calculated: false
  };
  function setTwoToneColors2(_ref) {
    var primaryColor = _ref.primaryColor, secondaryColor = _ref.secondaryColor;
    twoToneColorPalette2.primaryColor = primaryColor;
    twoToneColorPalette2.secondaryColor = secondaryColor || getSecondaryColor2(primaryColor);
    twoToneColorPalette2.calculated = !!secondaryColor;
  }
  function getTwoToneColors2() {
    return _objectSpread2({}, twoToneColorPalette2);
  }
  var IconBase3 = function IconBase4(props) {
    var icon = props.icon, className = props.className, onClick = props.onClick, style3 = props.style, primaryColor = props.primaryColor, secondaryColor = props.secondaryColor, restProps = _objectWithoutProperties(props, ["icon", "className", "onClick", "style", "primaryColor", "secondaryColor"]);
    var colors = twoToneColorPalette2;
    if (primaryColor) {
      colors = {
        primaryColor,
        secondaryColor: secondaryColor || getSecondaryColor2(primaryColor)
      };
    }
    useInsertStyles3();
    warning11(isIconDefinition2(icon), "icon should be icon definiton, but got ".concat(icon));
    if (!isIconDefinition2(icon)) {
      return null;
    }
    var target = icon;
    if (target && typeof target.icon === "function") {
      target = _objectSpread2(_objectSpread2({}, target), {}, {
        icon: target.icon(colors.primaryColor, colors.secondaryColor)
      });
    }
    return generate4(target.icon, "svg-".concat(target.name), _objectSpread2({
      className,
      onClick,
      style: style3,
      "data-icon": target.name,
      width: "1em",
      height: "1em",
      fill: "currentColor",
      "aria-hidden": "true"
    }, restProps));
  };
  IconBase3.displayName = "IconReact";
  IconBase3.getTwoToneColors = getTwoToneColors2;
  IconBase3.setTwoToneColors = setTwoToneColors2;
  var IconBase_default2 = IconBase3;

  // node_modules/@ant-design/icons/es/components/twoTonePrimaryColor.js
  function setTwoToneColor2(twoToneColor) {
    var _normalizeTwoToneColo = normalizeTwoToneColors2(twoToneColor), _normalizeTwoToneColo2 = _slicedToArray(_normalizeTwoToneColo, 2), primaryColor = _normalizeTwoToneColo2[0], secondaryColor = _normalizeTwoToneColo2[1];
    return IconBase_default2.setTwoToneColors({
      primaryColor,
      secondaryColor
    });
  }
  function getTwoToneColor2() {
    var colors = IconBase_default2.getTwoToneColors();
    if (!colors.calculated) {
      return colors.primaryColor;
    }
    return [colors.primaryColor, colors.secondaryColor];
  }

  // node_modules/@ant-design/icons/es/components/AntdIcon.js
  setTwoToneColor2("#1890ff");
  var Icon3 = /* @__PURE__ */ React393.forwardRef(function(props, ref) {
    var className = props.className, icon = props.icon, spin = props.spin, rotate = props.rotate, tabIndex = props.tabIndex, onClick = props.onClick, twoToneColor = props.twoToneColor, restProps = _objectWithoutProperties(props, ["className", "icon", "spin", "rotate", "tabIndex", "onClick", "twoToneColor"]);
    var classString = (0, import_classnames146.default)("anticon", _defineProperty({}, "anticon-".concat(icon.name), Boolean(icon.name)), {
      "anticon-spin": !!spin || icon.name === "loading"
    }, className);
    var iconTabIndex = tabIndex;
    if (iconTabIndex === void 0 && onClick) {
      iconTabIndex = -1;
    }
    var svgStyle = rotate ? {
      msTransform: "rotate(".concat(rotate, "deg)"),
      transform: "rotate(".concat(rotate, "deg)")
    } : void 0;
    var _normalizeTwoToneColo = normalizeTwoToneColors2(twoToneColor), _normalizeTwoToneColo2 = _slicedToArray(_normalizeTwoToneColo, 2), primaryColor = _normalizeTwoToneColo2[0], secondaryColor = _normalizeTwoToneColo2[1];
    return /* @__PURE__ */ React393.createElement("span", Object.assign({
      role: "img",
      "aria-label": icon.name
    }, restProps, {
      ref,
      tabIndex: iconTabIndex,
      onClick,
      className: classString
    }), /* @__PURE__ */ React393.createElement(IconBase_default2, {
      icon,
      primaryColor,
      secondaryColor,
      style: svgStyle
    }));
  });
  Icon3.displayName = "AntdIcon";
  Icon3.getTwoToneColor = getTwoToneColor2;
  Icon3.setTwoToneColor = setTwoToneColor2;
  var AntdIcon_default2 = Icon3;

  // node_modules/@ant-design/icons/es/icons/CaretDownOutlined.js
  var React394 = __toESM(require_react());
  var CaretDownOutlined4 = function CaretDownOutlined5(props, ref) {
    return /* @__PURE__ */ React394.createElement(AntdIcon_default2, Object.assign({}, props, {
      ref,
      icon: CaretDownOutlined_default
    }));
  };
  CaretDownOutlined4.displayName = "CaretDownOutlined";
  var CaretDownOutlined_default3 = /* @__PURE__ */ React394.forwardRef(CaretDownOutlined4);

  // node_modules/@ant-design/icons/es/icons/CheckCircleOutlined.js
  var React395 = __toESM(require_react());
  var CheckCircleOutlined4 = function CheckCircleOutlined5(props, ref) {
    return /* @__PURE__ */ React395.createElement(AntdIcon_default2, Object.assign({}, props, {
      ref,
      icon: CheckCircleOutlined_default
    }));
  };
  CheckCircleOutlined4.displayName = "CheckCircleOutlined";
  var CheckCircleOutlined_default3 = /* @__PURE__ */ React395.forwardRef(CheckCircleOutlined4);

  // node_modules/@ant-design/icons/es/icons/DeleteOutlined.js
  var React396 = __toESM(require_react());
  var DeleteOutlined2 = function DeleteOutlined3(props, ref) {
    return /* @__PURE__ */ React396.createElement(AntdIcon_default2, Object.assign({}, props, {
      ref,
      icon: DeleteOutlined_default
    }));
  };
  DeleteOutlined2.displayName = "DeleteOutlined";
  var DeleteOutlined_default2 = /* @__PURE__ */ React396.forwardRef(DeleteOutlined2);

  // node_modules/@ant-design/icons/es/icons/GifOutlined.js
  var React397 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/GifOutlined.js
  var GifOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "defs", "attrs": {}, "children": [{ "tag": "style", "attrs": {} }] }, { "tag": "path", "attrs": { "d": "M944 299H692c-4.4 0-8 3.6-8 8v406c0 4.4 3.6 8 8 8h59.2c4.4 0 8-3.6 8-8V549.9h168.2c4.4 0 8-3.6 8-8V495c0-4.4-3.6-8-8-8H759.2V364.2H944c4.4 0 8-3.6 8-8V307c0-4.4-3.6-8-8-8zm-356 1h-56c-4.4 0-8 3.6-8 8v406c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V308c0-4.4-3.6-8-8-8zM452 500.9H290.5c-4.4 0-8 3.6-8 8v43.7c0 4.4 3.6 8 8 8h94.9l-.3 8.9c-1.2 58.8-45.6 98.5-110.9 98.5-76.2 0-123.9-59.7-123.9-156.7 0-95.8 46.8-155.2 121.5-155.2 54.8 0 93.1 26.9 108.5 75.4h76.2c-13.6-87.2-86-143.4-184.7-143.4C150 288 72 375.2 72 511.9 72 650.2 149.1 736 273 736c114.1 0 187-70.7 187-181.6v-45.5c0-4.4-3.6-8-8-8z" } }] }, "name": "gif", "theme": "outlined" };
  var GifOutlined_default = GifOutlined;

  // node_modules/@ant-design/icons/es/icons/GifOutlined.js
  var GifOutlined2 = function GifOutlined3(props, ref) {
    return /* @__PURE__ */ React397.createElement(AntdIcon_default2, Object.assign({}, props, {
      ref,
      icon: GifOutlined_default
    }));
  };
  GifOutlined2.displayName = "GifOutlined";
  var GifOutlined_default2 = /* @__PURE__ */ React397.forwardRef(GifOutlined2);

  // node_modules/@ant-design/icons/es/icons/GlobalOutlined.js
  var React398 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/GlobalOutlined.js
  var GlobalOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M854.4 800.9c.2-.3.5-.6.7-.9C920.6 722.1 960 621.7 960 512s-39.4-210.1-104.8-288c-.2-.3-.5-.5-.7-.8-1.1-1.3-2.1-2.5-3.2-3.7-.4-.5-.8-.9-1.2-1.4l-4.1-4.7-.1-.1c-1.5-1.7-3.1-3.4-4.6-5.1l-.1-.1c-3.2-3.4-6.4-6.8-9.7-10.1l-.1-.1-4.8-4.8-.3-.3c-1.5-1.5-3-2.9-4.5-4.3-.5-.5-1-1-1.6-1.5-1-1-2-1.9-3-2.8-.3-.3-.7-.6-1-1C736.4 109.2 629.5 64 512 64s-224.4 45.2-304.3 119.2c-.3.3-.7.6-1 1-1 .9-2 1.9-3 2.9-.5.5-1 1-1.6 1.5-1.5 1.4-3 2.9-4.5 4.3l-.3.3-4.8 4.8-.1.1c-3.3 3.3-6.5 6.7-9.7 10.1l-.1.1c-1.6 1.7-3.1 3.4-4.6 5.1l-.1.1c-1.4 1.5-2.8 3.1-4.1 4.7-.4.5-.8.9-1.2 1.4-1.1 1.2-2.1 2.5-3.2 3.7-.2.3-.5.5-.7.8C103.4 301.9 64 402.3 64 512s39.4 210.1 104.8 288c.2.3.5.6.7.9l3.1 3.7c.4.5.8.9 1.2 1.4l4.1 4.7c0 .1.1.1.1.2 1.5 1.7 3 3.4 4.6 5l.1.1c3.2 3.4 6.4 6.8 9.6 10.1l.1.1c1.6 1.6 3.1 3.2 4.7 4.7l.3.3c3.3 3.3 6.7 6.5 10.1 9.6 80.1 74 187 119.2 304.5 119.2s224.4-45.2 304.3-119.2a300 300 0 0010-9.6l.3-.3c1.6-1.6 3.2-3.1 4.7-4.7l.1-.1c3.3-3.3 6.5-6.7 9.6-10.1l.1-.1c1.5-1.7 3.1-3.3 4.6-5 0-.1.1-.1.1-.2 1.4-1.5 2.8-3.1 4.1-4.7.4-.5.8-.9 1.2-1.4a99 99 0 003.3-3.7zm4.1-142.6c-13.8 32.6-32 62.8-54.2 90.2a444.07 444.07 0 00-81.5-55.9c11.6-46.9 18.8-98.4 20.7-152.6H887c-3 40.9-12.6 80.6-28.5 118.3zM887 484H743.5c-1.9-54.2-9.1-105.7-20.7-152.6 29.3-15.6 56.6-34.4 81.5-55.9A373.86 373.86 0 01887 484zM658.3 165.5c39.7 16.8 75.8 40 107.6 69.2a394.72 394.72 0 01-59.4 41.8c-15.7-45-35.8-84.1-59.2-115.4 3.7 1.4 7.4 2.9 11 4.4zm-90.6 700.6c-9.2 7.2-18.4 12.7-27.7 16.4V697a389.1 389.1 0 01115.7 26.2c-8.3 24.6-17.9 47.3-29 67.8-17.4 32.4-37.8 58.3-59 75.1zm59-633.1c11 20.6 20.7 43.3 29 67.8A389.1 389.1 0 01540 327V141.6c9.2 3.7 18.5 9.1 27.7 16.4 21.2 16.7 41.6 42.6 59 75zM540 640.9V540h147.5c-1.6 44.2-7.1 87.1-16.3 127.8l-.3 1.2A445.02 445.02 0 00540 640.9zm0-156.9V383.1c45.8-2.8 89.8-12.5 130.9-28.1l.3 1.2c9.2 40.7 14.7 83.5 16.3 127.8H540zm-56 56v100.9c-45.8 2.8-89.8 12.5-130.9 28.1l-.3-1.2c-9.2-40.7-14.7-83.5-16.3-127.8H484zm-147.5-56c1.6-44.2 7.1-87.1 16.3-127.8l.3-1.2c41.1 15.6 85 25.3 130.9 28.1V484H336.5zM484 697v185.4c-9.2-3.7-18.5-9.1-27.7-16.4-21.2-16.7-41.7-42.7-59.1-75.1-11-20.6-20.7-43.3-29-67.8 37.2-14.6 75.9-23.3 115.8-26.1zm0-370a389.1 389.1 0 01-115.7-26.2c8.3-24.6 17.9-47.3 29-67.8 17.4-32.4 37.8-58.4 59.1-75.1 9.2-7.2 18.4-12.7 27.7-16.4V327zM365.7 165.5c3.7-1.5 7.3-3 11-4.4-23.4 31.3-43.5 70.4-59.2 115.4-21-12-40.9-26-59.4-41.8 31.8-29.2 67.9-52.4 107.6-69.2zM165.5 365.7c13.8-32.6 32-62.8 54.2-90.2 24.9 21.5 52.2 40.3 81.5 55.9-11.6 46.9-18.8 98.4-20.7 152.6H137c3-40.9 12.6-80.6 28.5-118.3zM137 540h143.5c1.9 54.2 9.1 105.7 20.7 152.6a444.07 444.07 0 00-81.5 55.9A373.86 373.86 0 01137 540zm228.7 318.5c-39.7-16.8-75.8-40-107.6-69.2 18.5-15.8 38.4-29.7 59.4-41.8 15.7 45 35.8 84.1 59.2 115.4-3.7-1.4-7.4-2.9-11-4.4zm292.6 0c-3.7 1.5-7.3 3-11 4.4 23.4-31.3 43.5-70.4 59.2-115.4 21 12 40.9 26 59.4 41.8a373.81 373.81 0 01-107.6 69.2z" } }] }, "name": "global", "theme": "outlined" };
  var GlobalOutlined_default = GlobalOutlined;

  // node_modules/@ant-design/icons/es/icons/GlobalOutlined.js
  var GlobalOutlined2 = function GlobalOutlined3(props, ref) {
    return /* @__PURE__ */ React398.createElement(AntdIcon_default2, Object.assign({}, props, {
      ref,
      icon: GlobalOutlined_default
    }));
  };
  GlobalOutlined2.displayName = "GlobalOutlined";
  var GlobalOutlined_default2 = /* @__PURE__ */ React398.forwardRef(GlobalOutlined2);

  // node_modules/@ant-design/icons/es/icons/HomeOutlined.js
  var React399 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/HomeOutlined.js
  var HomeOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M946.5 505L560.1 118.8l-25.9-25.9a31.5 31.5 0 00-44.4 0L77.5 505a63.9 63.9 0 00-18.8 46c.4 35.2 29.7 63.3 64.9 63.3h42.5V940h691.8V614.3h43.4c17.1 0 33.2-6.7 45.3-18.8a63.6 63.6 0 0018.7-45.3c0-17-6.7-33.1-18.8-45.2zM568 868H456V664h112v204zm217.9-325.7V868H632V640c0-22.1-17.9-40-40-40H432c-22.1 0-40 17.9-40 40v228H238.1V542.3h-96l370-369.7 23.1 23.1L882 542.3h-96.1z" } }] }, "name": "home", "theme": "outlined" };
  var HomeOutlined_default = HomeOutlined;

  // node_modules/@ant-design/icons/es/icons/HomeOutlined.js
  var HomeOutlined2 = function HomeOutlined3(props, ref) {
    return /* @__PURE__ */ React399.createElement(AntdIcon_default2, Object.assign({}, props, {
      ref,
      icon: HomeOutlined_default
    }));
  };
  HomeOutlined2.displayName = "HomeOutlined";
  var HomeOutlined_default2 = /* @__PURE__ */ React399.forwardRef(HomeOutlined2);

  // node_modules/@ant-design/icons/es/icons/LikeOutlined.js
  var React400 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/LikeOutlined.js
  var LikeOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M885.9 533.7c16.8-22.2 26.1-49.4 26.1-77.7 0-44.9-25.1-87.4-65.5-111.1a67.67 67.67 0 00-34.3-9.3H572.4l6-122.9c1.4-29.7-9.1-57.9-29.5-79.4A106.62 106.62 0 00471 99.9c-52 0-98 35-111.8 85.1l-85.9 311H144c-17.7 0-32 14.3-32 32v364c0 17.7 14.3 32 32 32h601.3c9.2 0 18.2-1.8 26.5-5.4 47.6-20.3 78.3-66.8 78.3-118.4 0-12.6-1.8-25-5.4-37 16.8-22.2 26.1-49.4 26.1-77.7 0-12.6-1.8-25-5.4-37 16.8-22.2 26.1-49.4 26.1-77.7-.2-12.6-2-25.1-5.6-37.1zM184 852V568h81v284h-81zm636.4-353l-21.9 19 13.9 25.4a56.2 56.2 0 016.9 27.3c0 16.5-7.2 32.2-19.6 43l-21.9 19 13.9 25.4a56.2 56.2 0 016.9 27.3c0 16.5-7.2 32.2-19.6 43l-21.9 19 13.9 25.4a56.2 56.2 0 016.9 27.3c0 22.4-13.2 42.6-33.6 51.8H329V564.8l99.5-360.5a44.1 44.1 0 0142.2-32.3c7.6 0 15.1 2.2 21.1 6.7 9.9 7.4 15.2 18.6 14.6 30.5l-9.6 198.4h314.4C829 418.5 840 436.9 840 456c0 16.5-7.2 32.1-19.6 43z" } }] }, "name": "like", "theme": "outlined" };
  var LikeOutlined_default = LikeOutlined;

  // node_modules/@ant-design/icons/es/icons/LikeOutlined.js
  var LikeOutlined2 = function LikeOutlined3(props, ref) {
    return /* @__PURE__ */ React400.createElement(AntdIcon_default2, Object.assign({}, props, {
      ref,
      icon: LikeOutlined_default
    }));
  };
  LikeOutlined2.displayName = "LikeOutlined";
  var LikeOutlined_default2 = /* @__PURE__ */ React400.forwardRef(LikeOutlined2);

  // node_modules/@ant-design/icons/es/icons/ShoppingCartOutlined.js
  var React401 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/ShoppingCartOutlined.js
  var ShoppingCartOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "0 0 1024 1024", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M922.9 701.9H327.4l29.9-60.9 496.8-.9c16.8 0 31.2-12 34.2-28.6l68.8-385.1c1.8-10.1-.9-20.5-7.5-28.4a34.99 34.99 0 00-26.6-12.5l-632-2.1-5.4-25.4c-3.4-16.2-18-28-34.6-28H96.5a35.3 35.3 0 100 70.6h125.9L246 312.8l58.1 281.3-74.8 122.1a34.96 34.96 0 00-3 36.8c6 11.9 18.1 19.4 31.5 19.4h62.8a102.43 102.43 0 00-20.6 61.7c0 56.6 46 102.6 102.6 102.6s102.6-46 102.6-102.6c0-22.3-7.4-44-20.6-61.7h161.1a102.43 102.43 0 00-20.6 61.7c0 56.6 46 102.6 102.6 102.6s102.6-46 102.6-102.6c0-22.3-7.4-44-20.6-61.7H923c19.4 0 35.3-15.8 35.3-35.3a35.42 35.42 0 00-35.4-35.2zM305.7 253l575.8 1.9-56.4 315.8-452.3.8L305.7 253zm96.9 612.7c-17.4 0-31.6-14.2-31.6-31.6 0-17.4 14.2-31.6 31.6-31.6s31.6 14.2 31.6 31.6a31.6 31.6 0 01-31.6 31.6zm325.1 0c-17.4 0-31.6-14.2-31.6-31.6 0-17.4 14.2-31.6 31.6-31.6s31.6 14.2 31.6 31.6a31.6 31.6 0 01-31.6 31.6z" } }] }, "name": "shopping-cart", "theme": "outlined" };
  var ShoppingCartOutlined_default = ShoppingCartOutlined;

  // node_modules/@ant-design/icons/es/icons/ShoppingCartOutlined.js
  var ShoppingCartOutlined2 = function ShoppingCartOutlined3(props, ref) {
    return /* @__PURE__ */ React401.createElement(AntdIcon_default2, Object.assign({}, props, {
      ref,
      icon: ShoppingCartOutlined_default
    }));
  };
  ShoppingCartOutlined2.displayName = "ShoppingCartOutlined";
  var ShoppingCartOutlined_default2 = /* @__PURE__ */ React401.forwardRef(ShoppingCartOutlined2);

  // node_modules/@ant-design/icons/es/icons/StarOutlined.js
  var React402 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/StarOutlined.js
  var StarOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M908.1 353.1l-253.9-36.9L540.7 86.1c-3.1-6.3-8.2-11.4-14.5-14.5-15.8-7.8-35-1.3-42.9 14.5L369.8 316.2l-253.9 36.9c-7 1-13.4 4.3-18.3 9.3a32.05 32.05 0 00.6 45.3l183.7 179.1-43.4 252.9a31.95 31.95 0 0046.4 33.7L512 754l227.1 119.4c6.2 3.3 13.4 4.4 20.3 3.2 17.4-3 29.1-19.5 26.1-36.9l-43.4-252.9 183.7-179.1c5-4.9 8.3-11.3 9.3-18.3 2.7-17.5-9.5-33.7-27-36.3zM664.8 561.6l36.1 210.3L512 672.7 323.1 772l36.1-210.3-152.8-149L417.6 382 512 190.7 606.4 382l211.2 30.7-152.8 148.9z" } }] }, "name": "star", "theme": "outlined" };
  var StarOutlined_default = StarOutlined;

  // node_modules/@ant-design/icons/es/icons/StarOutlined.js
  var StarOutlined2 = function StarOutlined3(props, ref) {
    return /* @__PURE__ */ React402.createElement(AntdIcon_default2, Object.assign({}, props, {
      ref,
      icon: StarOutlined_default
    }));
  };
  StarOutlined2.displayName = "StarOutlined";
  var StarOutlined_default2 = /* @__PURE__ */ React402.forwardRef(StarOutlined2);

  // src/redux/language/slice.ts
  var initialState4 = {
    language: "zh",
    languageList: [
      { name: "\u4E2D\u6587", code: "zh" },
      { name: "English", code: "en" }
    ]
  };
  var languageSlice = createSlice({
    name: "language",
    initialState: initialState4,
    reducers: {
      changeLanguage: (state, action) => {
        state.language = action.payload;
      },
      addLanguage: (state, action) => {
        state.languageList = [...state.languageList, action.payload];
      }
    }
  });

  // src/redux/shoppingCart/slice.ts
  var initialState5 = {
    loading: true,
    error: null,
    items: []
    // 初始值不应该为null, 而应该是一个空数组对象
  };
  var getShoppingCart = createAsyncThunk(
    "shoppingCart/getShoppingCart",
    async (jwt, thunkAPI) => {
      const { data } = await axios_default2.get(`/api/shoppingCart`, {
        headers: {
          Authorization: `bearer ${jwt}`
        }
      });
      return data.shoppingCartItems;
    }
  );
  var addShoppingCartItem = createAsyncThunk(
    "shoppingCart/addShoppingCartItem",
    async (parameters, thunkAPI) => {
      const { data } = await axios_default2.post(
        `/api/shoppingCart/items`,
        {
          touristRouteId: parameters.touristRouteId
        },
        {
          headers: {
            Authorization: `bearer ${parameters.jwt}`
          }
        }
      );
      return data;
    }
  );
  var clearShoppingCartItem = createAsyncThunk(
    "shoppingCart/clearShoppingCartItem",
    async (parameters, thunkAPI) => {
      return await axios_default2.delete(
        `/api/shoppingCart/items/(${parameters.itemIds.join(",")})`,
        {
          headers: {
            Authorization: `bearer ${parameters.jwt}`
          }
        }
      );
    }
  );
  var delSingleShoppingCartItem = createAsyncThunk(
    "shoppingCart/clearShoppingCartItem",
    async (parameters, thunkAPI) => {
      await axios_default2.delete(`/api/shoppingCart/items/(${parameters.itemId})`, {
        headers: {
          Authorization: `bearer ${parameters.jwt}`
        }
      });
      thunkAPI.dispatch(getShoppingCart(parameters.jwt));
    }
  );
  var checkout = createAsyncThunk(
    "shoppingCart/checkout",
    async (jwt, thunkAPI) => {
      const { data } = await axios_default2.post(`/api/shoppingCart/checkout`, null, {
        headers: {
          Authorization: `bearer ${jwt}`
        }
      });
      return data;
    }
  );
  var shoppingCartSlice = createSlice({
    name: "shoppingCart",
    initialState: initialState5,
    reducers: {},
    extraReducers: {
      [getShoppingCart.pending.type]: (state) => {
        state.loading = true;
      },
      [getShoppingCart.fulfilled.type]: (state, action) => {
        state.loading = false;
        state.items = action.payload;
        state.error = null;
      },
      [getShoppingCart.rejected.type]: (state, action) => {
        state.loading = false;
        state.error = action.payload;
      },
      [addShoppingCartItem.pending.type]: (state) => {
        state.loading = true;
      },
      [addShoppingCartItem.fulfilled.type]: (state, action) => {
        state.loading = false;
        state.error = null;
      },
      [addShoppingCartItem.rejected.type]: (state, action) => {
        state.loading = false;
        state.error = action.payload;
      },
      [delSingleShoppingCartItem.pending.type]: (state) => {
        state.loading = true;
      },
      [delSingleShoppingCartItem.fulfilled.type]: (state, action) => {
        state.loading = false;
        state.items = action.payload;
        state.error = null;
      },
      [delSingleShoppingCartItem.rejected.type]: (state, action) => {
        state.loading = false;
        state.error = action.payload;
      },
      [clearShoppingCartItem.pending.type]: (state) => {
        state.loading = true;
      },
      [clearShoppingCartItem.fulfilled.type]: (state) => {
        state.loading = false;
        state.items = [];
        state.error = null;
      },
      [clearShoppingCartItem.rejected.type]: (state, action) => {
        state.loading = false;
        state.error = action.payload;
      },
      [checkout.pending.type]: (state) => {
        state.loading = true;
      },
      [checkout.fulfilled.type]: (state, action) => {
        state.loading = false;
        state.items = [];
        state.error = null;
      },
      [checkout.rejected.type]: (state, action) => {
        state.loading = false;
        state.error = action.payload;
      }
    }
  });

  // src/utils/price/index.ts
  var handlePrice = (x2, d2 = 0) => {
    let w2 = x2.toString();
    let f2 = parseFloat(w2);
    if (isNaN(f2)) {
      return;
    }
    if (f2 === 0) {
      return f2;
    }
    d2 = d2 ? d2 * 100 : 100;
    f2 = Math.floor(f2 * 100) / d2;
    let s2 = f2.toString();
    let rs = s2.indexOf(".");
    if (rs < 0) {
      rs = s2.length;
      s2 += ".";
    }
    while (s2.length <= rs + 2) {
      s2 += "0";
    }
    if (s2.includes(".00") === true) {
      s2 = s2.replace(".00", "");
    }
    return s2;
  };

  // node_modules/nanoid/index.browser.js
  var nanoid2 = (size = 21) => crypto.getRandomValues(new Uint8Array(size)).reduce((id2, byte) => {
    byte &= 63;
    if (byte < 36) {
      id2 += byte.toString(36);
    } else if (byte < 62) {
      id2 += (byte - 26).toString(36).toUpperCase();
    } else if (byte > 62) {
      id2 += "-";
    } else {
      id2 += "_";
    }
    return id2;
  }, "");

  // src/utils/nanoid/index.ts
  var getKey5 = nanoid2;

  // src/utils/menu/index.ts
  var getItem = (label, key2, icon, children, type4) => {
    return {
      label,
      key: key2,
      icon,
      children,
      type: type4
    };
  };

  // src/components/header/Header.tsx
  var Header4 = import_react109.default.memo(() => {
    const navigate = useNavigate();
    const language = useSelector2((state) => state.language.language);
    const languageList = useSelector2((state) => state.language.languageList);
    const dispatch2 = useDispatch();
    const { t: t4 } = useTranslation();
    const jwt = useSelector2((s2) => s2.user.token);
    const [username, setUsername] = (0, import_react109.useState)("");
    (0, import_react109.useEffect)(() => {
      if (jwt) {
        dispatch2(getShoppingCart(jwt));
      }
    }, [jwt]);
    const shoppingCartItems = useSelector2((s2) => s2.shoppingCart.items);
    const shoppingCartLoading = useSelector2((s2) => s2.shoppingCart.loading);
    (0, import_react109.useEffect)(() => {
      if (jwt) {
        const token = jwt_decode_esm_default(jwt);
        setUsername(token.username);
      }
    }, [jwt]);
    const navItems = (0, import_react109.useMemo)(() => {
      return [
        // getItem(t("header.home_page"), "1"),
        getItem(/* @__PURE__ */ import_react109.default.createElement(Link, { to: "/" }, t4("header.home_page")), "1"),
        getItem(t4("header.weekend"), "2"),
        getItem(t4("header.group"), "3"),
        getItem(t4("header.backpack"), "4"),
        getItem(t4("header.private"), "5"),
        getItem(t4("header.cruise"), "6"),
        getItem(t4("header.hotel"), "7"),
        getItem(t4("header.local"), "8"),
        getItem(t4("header.theme"), "9"),
        getItem(t4("header.custom"), "10"),
        getItem(t4("header.study"), "11"),
        getItem(t4("header.visa"), "12"),
        getItem(t4("header.enterprise"), "13"),
        getItem(t4("header.high_end"), "14"),
        getItem(t4("header.outdoor"), "15"),
        getItem(t4("header.insurance"), "16")
      ];
    }, [t4]);
    const langItems = (0, import_react109.useMemo)(() => {
      return [
        ...languageList.map((l2) => {
          return getItem(l2.name, l2.code);
        }),
        getItem(t4("header.add_new_language"), "new")
      ];
    }, [languageList, t4]);
    const menuClickHandler = (0, import_react109.useCallback)(
      (e3) => {
        if (e3.key === "new") {
          dispatch2(
            languageSlice.actions.addLanguage({
              name: "\u65B0\u8BED\u8A00",
              code: "new_lang"
            })
          );
        } else {
          dispatch2(languageSlice.actions.changeLanguage(e3.key));
        }
      },
      [dispatch2]
    );
    const onLogOut = (0, import_react109.useCallback)(() => {
      dispatch2(userSlice.actions.logOut());
      navigate("/");
    }, [dispatch2, navigate]);
    const handle2 = () => {
      const token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6Inl1YW5iZXN0IiwiaWF0IjoxNjk1NTU1MDAyfQ.OruhS8lNtnjuP8T4lmod4_pGpE7AMni3gO0MQmKtCGI";
      dispatch2(userSlice.actions.setToken({ token }));
    };
    return /* @__PURE__ */ import_react109.default.createElement("div", { className: Header_default3["app-header"] }, /* @__PURE__ */ import_react109.default.createElement("div", { className: Header_default3["top-header"] }, /* @__PURE__ */ import_react109.default.createElement("div", { className: Header_default3.inner }, /* @__PURE__ */ import_react109.default.createElement(typography_default.Text, { style: { float: "left" } }, t4("header.slogan")), /* @__PURE__ */ import_react109.default.createElement(
      dropdown_default2.Button,
      {
        style: { marginLeft: 15, width: 92, float: "left" },
        overlay: /* @__PURE__ */ import_react109.default.createElement(menu_default, { onClick: menuClickHandler, items: langItems }),
        icon: /* @__PURE__ */ import_react109.default.createElement(GlobalOutlined_default2, null)
      },
      language === "zh" ? "\u4E2D\u6587" : "English"
    ), /* @__PURE__ */ import_react109.default.createElement(
      button_default2,
      {
        onClick: handle2,
        style: { marginLeft: "60px", position: "relative", top: "-3px" }
      },
      "\u624B\u52A8\u6D3E\u53D1User Action"
    ), jwt ? /* @__PURE__ */ import_react109.default.createElement(space_default, { size: 0, className: Header_default3["button-group"] }, /* @__PURE__ */ import_react109.default.createElement("span", { style: { marginRight: "15px" } }, t4("header.welcome"), /* @__PURE__ */ import_react109.default.createElement(typography_default.Text, { strong: true }, " ", username)), /* @__PURE__ */ import_react109.default.createElement(
      button_default2,
      {
        loading: shoppingCartLoading,
        onClick: () => navigate("/shoppingCart")
      },
      t4("header.shoppingCart"),
      "(",
      shoppingCartItems ? shoppingCartItems.length : 0,
      ")"
    ), /* @__PURE__ */ import_react109.default.createElement(button_default2, { onClick: onLogOut }, t4("header.signOut"))) : /* @__PURE__ */ import_react109.default.createElement(space_default, { size: 0, className: Header_default3["button-group"] }, /* @__PURE__ */ import_react109.default.createElement(button_default2, { onClick: () => navigate("/signIn") }, t4("header.signin")), /* @__PURE__ */ import_react109.default.createElement(button_default2, { onClick: () => navigate("/register") }, t4("header.register"))))), /* @__PURE__ */ import_react109.default.createElement("div", null, /* @__PURE__ */ import_react109.default.createElement(layout_default2.Header, { className: Header_default3["main-header"] }, /* @__PURE__ */ import_react109.default.createElement("span", { onClick: () => navigate("/") }, /* @__PURE__ */ import_react109.default.createElement("img", { src: logo_default, alt: "", className: Header_default3["App-logo"] }), /* @__PURE__ */ import_react109.default.createElement(typography_default.Title, { level: 3, className: Header_default3.title }, t4("header.title"))), /* @__PURE__ */ import_react109.default.createElement(
      input_default.Search,
      {
        placeholder: "\u8BF7\u8F93\u5165\u65C5\u6E38\u76EE\u7684\u5730\uFF0C\u4E3B\u9898\u6216\u5173\u952E\u5B57",
        className: Header_default3["search-input"],
        onSearch: (data) => navigate("/search/" + data)
      }
    ))), /* @__PURE__ */ import_react109.default.createElement("div", null, /* @__PURE__ */ import_react109.default.createElement(
      menu_default,
      {
        mode: "horizontal",
        className: Header_default3["main-menu"],
        items: navItems
      }
    )));
  });
  Header4.displayName = "Header";

  // src/components/footer/Footer.tsx
  var import_react110 = __toESM(require_react());
  var Footer3 = import_react110.default.memo(() => {
    const { t: t4 } = useTranslation();
    return /* @__PURE__ */ import_react110.default.createElement(layout_default2.Footer, null, /* @__PURE__ */ import_react110.default.createElement(typography_default.Title, { level: 3, style: { textAlign: "center" } }, t4("footer.detail")));
  });
  Footer3.displayName = "Footer";

  // src/components/sideMenu/SideMenu.tsx
  var import_react111 = __toESM(require_react());

  // src/components/sideMenu/SideMenu.module.css
  var SideMenu_default = {
    "side-menu": "SideMenu_side-menu"
  };

  // src/components/sideMenu/mockup.ts
  var sideMenuList = [
    {
      title: "\u4E3B\u9898\u65C5\u6E38",
      subMenu: [
        {
          title: "\u7238\u5988\u6E38",
          subMenu: ["\u7948\u798F\u62DC\u4F5B", "\u53E4\u9547\u6E38\u73A9", "\u6842\u6797\u5C71\u6C34", "\u7EA2\u8272\u4E4B\u65C5"]
        },
        {
          title: "\u4EB2\u5B50\u6E38",
          subMenu: ["\u4E0A\u6D77\u8FEA\u58EB\u5C3C", "\u63A2\u9669\u4F53\u9A8C", "\u6D77\u6D0B\u516C\u56ED", "\u611F\u53D7\u540D\u6821"]
        },
        {
          title: "\u871C\u6708\u6E38",
          subMenu: ["\u6D6A\u6F2B\u6D77\u5C9B", "\u8C6A\u534E\u9152\u5E97", "\u8D2D\u7269\u8840\u62FC", "\u5168\u7403\u5A5A\u793C"]
        }
      ]
    },
    {
      title: "\u5468\u8FB9\u6E38",
      subMenu: [
        {
          title: "\u5468\u8FB9\u76EE\u7684\u5730",
          subMenu: ["\u676D\u5DDE", "\u5357\u4EAC", "\u82CF\u5DDE", "\u9EC4\u5C71"]
        },
        {
          title: "\u70ED\u95E8\u666F\u70B9",
          subMenu: ["\u666E\u9640\u5C71", "\u5343\u5C9B\u6E56", "\u4E4C\u9547\u53E4\u9547", "\u5B8F\u6751"]
        }
      ]
    },
    {
      title: "\u56FD\u5185\u6E38",
      subMenu: [
        {
          title: "\u5E7F\u4E1C",
          subMenu: ["\u5E7F\u5DDE", "\u6DF1\u5733", "\u73E0\u6D77", "\u60E0\u5DDE"]
        },
        {
          title: "\u6D59\u6C5F",
          subMenu: ["\u676D\u5DDE", "\u666E\u9640\u5C71", "\u5343\u5C9B\u6E56", "\u5B81\u6CE2"]
        },
        {
          title: "\u6C5F\u82CF",
          subMenu: ["\u821F\u5C71", "\u4E4C\u9547", "\u5E72\u5C71", "\u6E56\u5DDE"]
        }
      ]
    },
    {
      title: "\u4E1C\u5357\u4E9A",
      subMenu: [
        {
          title: "\u70ED\u95E8\u76EE\u7684\u5730",
          subMenu: ["\u65B0\u52A0\u5761", "\u5DF4\u5398\u5C9B", "\u8D8A\u5357", "\u67EC\u57D4\u5BE8"]
        },
        {
          title: "\u70ED\u95E8\u666F\u70B9",
          subMenu: ["\u4E0B\u9F99\u6E7E", "\u5434\u54E5\u7A9F", "\u897F\u54C8\u52AA\u514B", "\u69DF\u57CE\u73CD\u73E0\u5C9B"]
        }
      ]
    },
    {
      title: "\u6B27\u6D32",
      subMenu: [
        {
          title: "\u70ED\u95E8\u90AE\u8F6E\u822A\u7EBF",
          subMenu: ["\u6B27\u6D32\u6CB3\u8F6E", "\u5317\u6B27\u90AE\u8F6E", "\u7231\u7434\u6D77\u90AE\u8F6E", "\u82F1\u4F26\u4E09\u5C9B"]
        },
        {
          title: "\u70ED\u95E8\u666F\u70B9",
          subMenu: ["\u8D1D\u52A0\u5C14\u6E56", "\u666E\u7F57\u65FA\u65AF", "\u963F\u5C14\u5351\u65AF", "\u5723\u6258\u91CC\u5C3C\u5C9B"]
        },
        {
          title: "\u871C\u6708\u6E38",
          subMenu: ["\u6781\u5149\u4E2D\u5FC3", "\u4FC4\u7F57\u65AF\u8FDC\u4E1C\u5730\u533A", "\u82F1\u683C\u5170\u5C11\u5973\u5CF0", "\u73BB\u7483\u6D77\u6EE9"]
        }
      ]
    }
  ];

  // src/components/sideMenu/SideMenu.tsx
  var SideMenu = import_react111.default.memo(() => {
    const sideItems = (0, import_react111.useMemo)(() => {
      return [
        ...sideMenuList.map((m2) => {
          return getItem(
            /* @__PURE__ */ import_react111.default.createElement("span", null, /* @__PURE__ */ import_react111.default.createElement(GifOutlined_default2, null), m2.title),
            `side-menu${getKey5()}`,
            null,
            m2.subMenu.map((sm) => {
              return getItem(
                /* @__PURE__ */ import_react111.default.createElement("span", null, /* @__PURE__ */ import_react111.default.createElement(GifOutlined_default2, null), sm.title),
                `sub-menu${getKey5()}`,
                null,
                sm.subMenu.map((sms) => {
                  return getItem(
                    /* @__PURE__ */ import_react111.default.createElement("span", null, /* @__PURE__ */ import_react111.default.createElement(GifOutlined_default2, null), sms),
                    `sub-sub-menu${getKey5()}`
                  );
                })
              );
            })
          );
        })
      ];
    }, []);
    return /* @__PURE__ */ import_react111.default.createElement(menu_default, { mode: "vertical", className: SideMenu_default["side-menu"], items: sideItems });
  });
  SideMenu.displayName = "SideMenu";

  // src/components/carousel/Carousel.tsx
  var import_react112 = __toESM(require_react());

  // src/components/carousel/Carousel.module.css
  var Carousel_default = {
    slider: "Carousel_slider"
  };

  // src/assets/images/carousel_1.jpg
  var carousel_1_default = "./carousel_1-OS5DSZAF.jpg";

  // src/assets/images/carousel_2.jpg
  var carousel_2_default = "./carousel_2-J4PQBLQD.jpg";

  // src/assets/images/carousel_3.jpg
  var carousel_3_default = "./carousel_3-RCPTUZDS.jpg";

  // src/components/carousel/Carousel.tsx
  var Carousel2 = import_react112.default.memo(() => {
    return /* @__PURE__ */ import_react112.default.createElement(carousel_default, { autoplay: true, className: Carousel_default.slider }, /* @__PURE__ */ import_react112.default.createElement(image_default, { src: carousel_1_default }), /* @__PURE__ */ import_react112.default.createElement(image_default, { src: carousel_2_default }), /* @__PURE__ */ import_react112.default.createElement(image_default, { src: carousel_3_default }));
  });
  Carousel2.displayName = "Carousel";

  // src/components/productCollection/ProductCollection.tsx
  var import_react114 = __toESM(require_react());

  // src/components/productCollection/ProductCollection.module.css
  var ProductCollection_default = {
    content: "ProductCollection_content",
    "side-image": "ProductCollection_side-image"
  };

  // src/components/productCollection/ProductImage.tsx
  var import_react113 = __toESM(require_react());
  var ProductImage = import_react113.default.memo(
    ({ id: id2, size, imageSrc, price, title }) => {
      return /* @__PURE__ */ import_react113.default.createElement(Link, { to: `/detail/${id2}` }, size === "large" ? /* @__PURE__ */ import_react113.default.createElement(image_default, { src: imageSrc, height: 285, width: 490 }) : /* @__PURE__ */ import_react113.default.createElement(image_default, { src: imageSrc, height: 120, width: 240 }), /* @__PURE__ */ import_react113.default.createElement("div", null, /* @__PURE__ */ import_react113.default.createElement(typography_default.Text, { type: "secondary" }, title.slice(0, 25)), /* @__PURE__ */ import_react113.default.createElement(typography_default.Text, { type: "danger", strong: true }, "\xA5 ", handlePrice(price), " \u8D77")));
    }
  );

  // src/components/productCollection/ProductCollection.tsx
  var ProductCollection = import_react114.default.memo(
    ({ title, sideImage, products }) => {
      return /* @__PURE__ */ import_react114.default.createElement("div", { className: ProductCollection_default.content }, /* @__PURE__ */ import_react114.default.createElement(divider_default, { orientation: "left" }, title), /* @__PURE__ */ import_react114.default.createElement(row_default2, null, /* @__PURE__ */ import_react114.default.createElement(col_default2, { span: 4 }, /* @__PURE__ */ import_react114.default.createElement("img", { src: sideImage, className: ProductCollection_default["side-image"], alt: "" })), /* @__PURE__ */ import_react114.default.createElement(col_default2, { span: 20 }, /* @__PURE__ */ import_react114.default.createElement(row_default2, null, /* @__PURE__ */ import_react114.default.createElement(col_default2, { span: 12 }, /* @__PURE__ */ import_react114.default.createElement(
        ProductImage,
        {
          id: products[0].id,
          size: "large",
          title: products[0].title,
          imageSrc: products[0].touristRoutePictures[0].url,
          price: products[0].price
        }
      )), /* @__PURE__ */ import_react114.default.createElement(col_default2, { span: 12 }, /* @__PURE__ */ import_react114.default.createElement(row_default2, null, /* @__PURE__ */ import_react114.default.createElement(col_default2, { span: 12 }, /* @__PURE__ */ import_react114.default.createElement(
        ProductImage,
        {
          id: products[1].id,
          size: "small",
          title: products[1].title,
          imageSrc: products[1].touristRoutePictures[0].url,
          price: products[1].price
        }
      )), /* @__PURE__ */ import_react114.default.createElement(col_default2, { span: 12 }, /* @__PURE__ */ import_react114.default.createElement(
        ProductImage,
        {
          id: products[2].id,
          size: "small",
          title: products[2].title,
          imageSrc: products[2].touristRoutePictures[0].url,
          price: products[2].price
        }
      ))), /* @__PURE__ */ import_react114.default.createElement(row_default2, null, /* @__PURE__ */ import_react114.default.createElement(col_default2, { span: 12 }, /* @__PURE__ */ import_react114.default.createElement(
        ProductImage,
        {
          id: products[3].id,
          size: "small",
          title: products[3].title,
          imageSrc: products[3].touristRoutePictures[0].url,
          price: products[3].price
        }
      )), /* @__PURE__ */ import_react114.default.createElement(col_default2, { span: 12 }, /* @__PURE__ */ import_react114.default.createElement(
        ProductImage,
        {
          id: products[4].id,
          size: "small",
          title: products[4].title,
          imageSrc: products[4].touristRoutePictures[0].url,
          price: products[4].price
        }
      ))))), /* @__PURE__ */ import_react114.default.createElement(row_default2, null, /* @__PURE__ */ import_react114.default.createElement(col_default2, { span: 6 }, /* @__PURE__ */ import_react114.default.createElement(
        ProductImage,
        {
          id: products[5].id,
          size: "small",
          title: products[5].title,
          imageSrc: products[5].touristRoutePictures[0].url,
          price: products[5].price
        }
      )), /* @__PURE__ */ import_react114.default.createElement(col_default2, { span: 6 }, /* @__PURE__ */ import_react114.default.createElement(
        ProductImage,
        {
          id: products[6].id,
          size: "small",
          title: products[6].title,
          imageSrc: products[6].touristRoutePictures[0].url,
          price: products[6].price
        }
      )), /* @__PURE__ */ import_react114.default.createElement(col_default2, { span: 6 }, /* @__PURE__ */ import_react114.default.createElement(
        ProductImage,
        {
          id: products[7].id,
          size: "small",
          title: products[7].title,
          imageSrc: products[7].touristRoutePictures[0].url,
          price: products[7].price
        }
      )), /* @__PURE__ */ import_react114.default.createElement(col_default2, { span: 6 }, /* @__PURE__ */ import_react114.default.createElement(
        ProductImage,
        {
          id: products[8].id,
          size: "small",
          title: products[8].title,
          imageSrc: products[8].touristRoutePictures[0].url,
          price: products[8].price
        }
      ))))));
    }
  );
  ProductCollection.displayName = "ProductCollection";

  // src/components/businessPartners/BusinessPartners.tsx
  var import_react115 = __toESM(require_react());

  // src/components/businessPartners/BusinessPartners.module.css
  var BusinessPartners_default = {
    content: "BusinessPartners_content"
  };

  // src/assets/images/microsoft-80658_640.png
  var microsoft_80658_640_default = "./microsoft-80658_640-O52VEK2N.png";

  // src/assets/images/icon-720944_640.png
  var icon_720944_640_default = "./icon-720944_640-B4KEAKMT.png";

  // src/assets/images/follow-826033_640.png
  var follow_826033_640_default = "./follow-826033_640-HE4Q4BST.png";

  // src/assets/images/facebook-807588_640.png
  var facebook_807588_640_default = "./facebook-807588_640-Q5XBTM76.png";

  // src/components/businessPartners/BusinessPartners.tsx
  var companies = [
    { src: microsoft_80658_640_default, title: "Microsoft" },
    { src: icon_720944_640_default, title: "Youtube" },
    { src: follow_826033_640_default, title: "Ins" },
    { src: facebook_807588_640_default, title: "Facebook" }
  ];
  var BusinessPartners = import_react115.default.memo((props) => {
    const { t: t4 } = useTranslation();
    return /* @__PURE__ */ import_react115.default.createElement("div", { className: BusinessPartners_default.content }, /* @__PURE__ */ import_react115.default.createElement(divider_default, { orientation: "left" }, /* @__PURE__ */ import_react115.default.createElement(typography_default.Title, { level: 3 }, t4("home_page.joint_venture"))), /* @__PURE__ */ import_react115.default.createElement(row_default2, null, companies.map((c2, index2) => /* @__PURE__ */ import_react115.default.createElement(col_default2, { span: 6, key: `business-partner-${getKey5()}` }, /* @__PURE__ */ import_react115.default.createElement(
      "img",
      {
        alt: "business-partner",
        src: c2.src,
        style: {
          width: "80%",
          display: "block",
          marginLeft: "auto",
          marginRight: "auto"
        }
      }
    )))));
  });
  BusinessPartners.displayName = "BusinessPartners";

  // src/components/productIntro/ProductIntro.tsx
  var import_react116 = __toESM(require_react());

  // src/components/productIntro/ProductIntro.module.css
  var ProductIntro_default = {
    "intro-container": "ProductIntro_intro-container",
    "intro-detail-content": "ProductIntro_intro-detail-content",
    "intro-detail-strong-text": "ProductIntro_intro-detail-strong-text"
  };

  // src/components/productIntro/ProductIntro.tsx
  var columns = [
    {
      title: "title",
      dataIndex: "title",
      key: getKey5(),
      align: "left",
      width: 120
    },
    {
      title: "description",
      dataIndex: "description",
      key: getKey5(),
      align: "center"
    }
  ];
  var ProductIntro = import_react116.default.memo(
    ({ title, shortDescription, price, coupons, discount, rating, pictures }) => {
      const tableDataSource = (0, import_react116.useMemo)(() => {
        return [
          {
            key: 0,
            title: "\u8DEF\u7EBF\u540D\u79F0",
            description: title
          },
          {
            key: 1,
            title: "\u4EF7\u683C",
            description: /* @__PURE__ */ import_react116.default.createElement(import_react116.default.Fragment, null, "\xA5", " ", /* @__PURE__ */ import_react116.default.createElement(typography_default.Text, { type: "danger", strong: true }, handlePrice(price)))
          },
          {
            key: 2,
            title: "\u9650\u65F6\u62A2\u8D2D\u6298\u6263",
            description: discount ? /* @__PURE__ */ import_react116.default.createElement(import_react116.default.Fragment, null, "\xA5 ", /* @__PURE__ */ import_react116.default.createElement(typography_default.Text, { delete: true }, handlePrice(price)), " ", /* @__PURE__ */ import_react116.default.createElement(typography_default.Text, { type: "danger", strong: true }, "\xA5 ", handlePrice(discount))) : "\u6682\u65E0\u6298\u6263"
          },
          {
            key: 3,
            title: "\u9886\u53D6\u4F18\u60E0",
            description: coupons ? discount : "\u65E0\u4F18\u60E0\u5238\u53EF\u9886"
          },
          {
            key: 4,
            title: "\u7EBF\u8DEF\u8BC4\u4EF7",
            description: /* @__PURE__ */ import_react116.default.createElement(import_react116.default.Fragment, null, /* @__PURE__ */ import_react116.default.createElement(rate_default, { allowHalf: true, defaultValue: +rating }), /* @__PURE__ */ import_react116.default.createElement(typography_default.Text, { style: { marginLeft: 10 } }, rating, " \u661F"))
          }
        ];
      }, [coupons, discount, price, rating, title]);
      return /* @__PURE__ */ import_react116.default.createElement("div", { className: ProductIntro_default["intro-container"] }, /* @__PURE__ */ import_react116.default.createElement(typography_default.Title, { level: 4 }, title), /* @__PURE__ */ import_react116.default.createElement(typography_default.Text, null, shortDescription), /* @__PURE__ */ import_react116.default.createElement("div", { className: ProductIntro_default["intro-detail-content"] }, /* @__PURE__ */ import_react116.default.createElement(typography_default.Text, { style: { marginLeft: 20 } }, "\xA5", /* @__PURE__ */ import_react116.default.createElement("span", { className: ProductIntro_default["intro-detail-strong-text"] }, handlePrice(price)), "/\u4EBA\u8D77"), /* @__PURE__ */ import_react116.default.createElement(typography_default.Text, { style: { marginLeft: 50 } }, /* @__PURE__ */ import_react116.default.createElement("span", { className: ProductIntro_default["intro-detail-strong-text"] }, rating), " ", "\u5206")), /* @__PURE__ */ import_react116.default.createElement(carousel_default, { autoplay: true, slidesToShow: 3 }, pictures.map((p2) => /* @__PURE__ */ import_react116.default.createElement(image_default, { height: 150, src: p2, key: getKey5() }))), /* @__PURE__ */ import_react116.default.createElement(
        table_default,
        {
          columns,
          dataSource: tableDataSource,
          size: "small",
          bordered: false,
          pagination: false
        }
      ));
    }
  );
  ProductIntro.displayName = "ProductIntro";

  // src/components/productComments/ProductComments.tsx
  var import_react117 = __toESM(require_react());
  var ProductComments = import_react117.default.memo(({ data }) => {
    return /* @__PURE__ */ import_react117.default.createElement(
      list_default,
      {
        dataSource: data,
        itemLayout: "horizontal",
        renderItem: (item) => {
          return /* @__PURE__ */ import_react117.default.createElement("li", null, /* @__PURE__ */ import_react117.default.createElement(
            comment_default,
            {
              author: item.author,
              avatar: item.avatar,
              content: item.content,
              datetime: item.createDate
            }
          ));
        }
      }
    );
  });
  ProductComments.displayName = "ProductComments";

  // src/components/filter/FilterArea.tsx
  var import_react120 = __toESM(require_react());

  // src/components/filter/FilterArea.module.css
  var FilterArea_default = {
    "filter-divider": "FilterArea_filter-divider"
  };

  // src/components/filter/Filter.tsx
  var import_react119 = __toESM(require_react());

  // src/components/filter/FilterTag.tsx
  var import_react118 = __toESM(require_react());
  var { CheckableTag: CheckableTag3 } = tag_default;
  var FilterTag = import_react118.default.memo((props) => {
    const [checked, setChecked] = (0, import_react118.useState)(false);
    const handleChange = (checked2) => {
      setChecked(checked2);
    };
    return /* @__PURE__ */ import_react118.default.createElement(CheckableTag3, { ...props, checked, onChange: handleChange });
  });

  // src/components/filter/Filter.tsx
  var { Text: Text3 } = typography_default;
  var Filter = import_react119.default.memo(({ title, tags }) => {
    return /* @__PURE__ */ import_react119.default.createElement("div", null, /* @__PURE__ */ import_react119.default.createElement(Text3, { style: { marginRight: 40, fontSize: 15, fontWeight: 500 } }, title, " :", " "), tags.map((t4, index2) => {
      if (index2 === tags.length - 1)
        return /* @__PURE__ */ import_react119.default.createElement(FilterTag, { key: `filter${getKey5()}` }, t4);
      return /* @__PURE__ */ import_react119.default.createElement("span", { key: `filter${getKey5()}` }, /* @__PURE__ */ import_react119.default.createElement(FilterTag, null, t4), /* @__PURE__ */ import_react119.default.createElement(divider_default, { type: "vertical" }));
    }));
  });

  // src/components/filter/FilterArea.tsx
  var FilterArea = import_react120.default.memo(() => {
    return /* @__PURE__ */ import_react120.default.createElement(import_react120.default.Fragment, null, /* @__PURE__ */ import_react120.default.createElement(Filter, { title: "\u8DEF\u7EBF\u8BC4\u4EF7", tags: ["1\u661F", "2\u661F", "3\u661F", "4\u661F", "5\u661F"] }), /* @__PURE__ */ import_react120.default.createElement(divider_default, { dashed: true, className: FilterArea_default["filter-divider"] }), /* @__PURE__ */ import_react120.default.createElement(Filter, { title: "\u51FA\u53D1\u57CE\u5E02", tags: ["\u5317\u4EAC", "\u4E0A\u6D77", "\u5E7F\u5DDE", "\u6DF1\u5733"] }), /* @__PURE__ */ import_react120.default.createElement(divider_default, { dashed: true, className: FilterArea_default["filter-divider"] }), /* @__PURE__ */ import_react120.default.createElement(Filter, { title: "\u884C\u7A0B\u5929\u6570", tags: ["2\u65E5", "3\u65E5", "4\u65E5", "5\u65E5", "6\u65E5"] }), /* @__PURE__ */ import_react120.default.createElement(divider_default, { dashed: true }), /* @__PURE__ */ import_react120.default.createElement(
      Filter,
      {
        title: "\u65C5\u7A0B\u7C7B\u578B",
        tags: ["\u8DDF\u56E2\u6E38", "\u81EA\u7531\u884C", "\u81EA\u9A7E\u6E38", "\u9AD8\u7AEF\u5B9A\u5236"]
      }
    ), /* @__PURE__ */ import_react120.default.createElement(divider_default, { dashed: true }), /* @__PURE__ */ import_react120.default.createElement(Filter, { title: "\u51FA\u53D1\u65F6\u95F4", tags: ["\u6625\u8282", "\u6E05\u660E", "\u52B3\u52A8\u8282"] }));
  });

  // src/components/productList/ProductList.tsx
  var import_react121 = __toESM(require_react());

  // src/components/productList/ProductList.module.css
  var ProductList_default = {
    footer: "ProductList_footer",
    pagination: "ProductList_pagination"
  };

  // src/components/productList/ProductList.tsx
  var { Text: Text4 } = typography_default;
  var listData = (productList, isSearch) => productList.map((p2) => ({
    cid: p2.cid,
    id: p2.id,
    title: p2.title,
    description: p2.description,
    tags: /* @__PURE__ */ import_react121.default.createElement(import_react121.default.Fragment, null, p2.departureCity && /* @__PURE__ */ import_react121.default.createElement(tag_default, { color: "#f50" }, p2.departureCity, "\u51FA\u53D1"), p2.travelDays && /* @__PURE__ */ import_react121.default.createElement(tag_default, { color: "#108ee9" }, p2.travelDays, " \u5929 "), p2.discountPresent && /* @__PURE__ */ import_react121.default.createElement(tag_default, { color: "#87d068" }, "\u8D85\u4F4E\u6298\u6263"), p2.tripType && /* @__PURE__ */ import_react121.default.createElement(tag_default, { color: "#2db7f5" }, p2.tripType)),
    imgSrc: p2.touristRoutePictures[0].url,
    price: p2.price,
    originalPrice: p2.originalPrice,
    discountPresent: p2.discountPresent,
    rating: p2.rating,
    isSearch
  }));
  var IconText = ({ icon, text }) => /* @__PURE__ */ import_react121.default.createElement(space_default, null, import_react121.default.createElement(icon), text);
  var ProductList = import_react121.default.memo(
    ({ data, paging, isSearch, onPageChange }) => {
      const dispatch2 = useDispatch();
      const jwt = useSelector2((s2) => s2.user.token);
      const products = (0, import_react121.useMemo)(() => {
        return listData(data, isSearch);
      }, [data]);
      const delCartItem = (itemId) => {
        return (e3) => {
          dispatch2(delSingleShoppingCartItem({ jwt, itemId }));
          dispatch2(getShoppingCart(jwt));
        };
      };
      return /* @__PURE__ */ import_react121.default.createElement(import_react121.default.Fragment, null, /* @__PURE__ */ import_react121.default.createElement(
        list_default,
        {
          itemLayout: "vertical",
          size: "large",
          pagination: paging ? {
            current: paging.currentPage,
            onChange: (ClickPage, pageSize) => onPageChange && onPageChange(
              paging.currentPage,
              ClickPage,
              pageSize
            ),
            pageSize: paging.pageSize,
            total: paging.totalCount,
            style: { textAlign: "center" }
            //style用来设置分页组件居中显示（默认最右）
          } : false,
          dataSource: products,
          footer: paging && /* @__PURE__ */ import_react121.default.createElement("div", { className: ProductList_default["footer"] }, /* @__PURE__ */ import_react121.default.createElement("span", null, "\u641C\u7D22\u603B\u8DEF\u7EBF: ", /* @__PURE__ */ import_react121.default.createElement(Text4, { strong: true }, paging.totalCount), " \u6761"), /* @__PURE__ */ import_react121.default.createElement("span", null, "\u5F53\u524D\u7B2C: ", /* @__PURE__ */ import_react121.default.createElement("strong", null, " ", paging.currentPage, " "), " \u9875")),
          renderItem: (item) => /* @__PURE__ */ import_react121.default.createElement(
            list_default.Item,
            {
              key: getKey5(),
              actions: [
                /* @__PURE__ */ import_react121.default.createElement(
                  IconText,
                  {
                    icon: StarOutlined_default2,
                    text: "156",
                    key: "list-vertical-star-o"
                  }
                ),
                /* @__PURE__ */ import_react121.default.createElement(
                  IconText,
                  {
                    icon: LikeOutlined_default2,
                    text: "156",
                    key: "list-vertical-like-o"
                  }
                ),
                /* @__PURE__ */ import_react121.default.createElement(import_react121.default.Fragment, null, /* @__PURE__ */ import_react121.default.createElement(rate_default, { allowHalf: true, defaultValue: 3, value: item.rating }), /* @__PURE__ */ import_react121.default.createElement(
                  Text4,
                  {
                    strong: true,
                    style: { width: "20px" },
                    className: "ant-rate-text"
                  },
                  item.rating
                )),
                // 此处是条件渲染
                item.isSearch ? null : /* @__PURE__ */ import_react121.default.createElement(
                  button_default2,
                  {
                    size: "small",
                    type: "primary",
                    danger: true,
                    onClick: delCartItem(item.cid)
                  },
                  "\u5220\u9664"
                )
              ],
              extra: (
                // extra为List的额外内容，通常位于最右侧
                /* @__PURE__ */ import_react121.default.createElement(image_default, { width: 272, height: 172, alt: "image", src: item.imgSrc })
              )
            },
            /* @__PURE__ */ import_react121.default.createElement(
              list_default.Item.Meta,
              {
                title: /* @__PURE__ */ import_react121.default.createElement(import_react121.default.Fragment, null, item.discountPresent ? /* @__PURE__ */ import_react121.default.createElement(import_react121.default.Fragment, null, /* @__PURE__ */ import_react121.default.createElement(Text4, { style: { fontSize: 20, fontWeight: 400 }, delete: true }, "\xA5 ", handlePrice(item.originalPrice)), /* @__PURE__ */ import_react121.default.createElement(
                  Text4,
                  {
                    type: "danger",
                    style: { fontSize: 20, fontWeight: 400 }
                  },
                  " ",
                  "\xA5 ",
                  handlePrice(item.price)
                )) : /* @__PURE__ */ import_react121.default.createElement(Text4, { style: { fontSize: 20, fontWeight: 400 } }, "\xA5 ", handlePrice(item.price)), /* @__PURE__ */ import_react121.default.createElement(Link, { to: "/detail/" + item.id }, " ", item.title)),
                description: item.tags
              }
            ),
            item.description
          )
        }
      ));
    }
  );
  var style2 = {
    textAlign: "center",
    fontWeight: "bold",
    color: "red",
    marginTop: "20px"
  };
  var TestExport = ({ msg }) => {
    return /* @__PURE__ */ import_react121.default.createElement("div", { style: style2 }, " ", msg);
  };
  ProductList.displayName = "ProductList";

  // src/components/paymentCard/PaymentCard.tsx
  var import_react122 = __toESM(require_react());
  var { Meta: Meta5 } = card_default;
  var { Title: Title4, Text: Text5 } = typography_default;
  var columns2 = [
    {
      title: "\u9879\u76EE",
      dataIndex: "item",
      key: "item"
    },
    {
      title: "\u91D1\u989D",
      dataIndex: "amount",
      key: "amount"
    }
  ];
  var PaymentCard = import_react122.default.memo(
    ({ loading, originalPrice, price, onShoppingCartClear, onCheckout }) => {
      const paymentData = [
        {
          key: 1,
          item: "\u539F\u4EF7",
          amount: /* @__PURE__ */ import_react122.default.createElement(Text5, { delete: true }, "\xA5 ", handlePrice(originalPrice))
        },
        {
          key: 3,
          item: "\u73B0\u4EF7",
          amount: /* @__PURE__ */ import_react122.default.createElement(Title4, { type: "danger", level: 2 }, "\xA5 ", handlePrice(price))
        }
      ];
      return /* @__PURE__ */ import_react122.default.createElement(
        card_default,
        {
          style: { width: 300, marginTop: 16 },
          actions: [
            /* @__PURE__ */ import_react122.default.createElement(button_default2, { type: "primary", danger: true, onClick: onCheckout, loading }, /* @__PURE__ */ import_react122.default.createElement(CheckCircleOutlined_default3, null), "\u4E0B\u5355\u652F\u4ED8"),
            /* @__PURE__ */ import_react122.default.createElement(button_default2, { onClick: onShoppingCartClear, loading }, /* @__PURE__ */ import_react122.default.createElement(DeleteOutlined_default2, null), "\u6E05\u7A7A")
          ]
        },
        /* @__PURE__ */ import_react122.default.createElement(skeleton_default, { loading, active: true }, /* @__PURE__ */ import_react122.default.createElement(
          Meta5,
          {
            title: /* @__PURE__ */ import_react122.default.createElement(Title4, { level: 2 }, "\u603B\u8BA1"),
            description: /* @__PURE__ */ import_react122.default.createElement(
              table_default,
              {
                columns: columns2,
                dataSource: paymentData,
                showHeader: false,
                size: "small",
                bordered: false,
                pagination: false
              }
            )
          }
        ))
      );
    }
  );
  PaymentCard.displayName = "PaymentCard";

  // src/components/paymentForm/PaymentForm.tsx
  var import_react124 = __toESM(require_react());

  // node_modules/react-credit-cards/es/index.js
  var import_react123 = __toESM(require_react());
  var import_prop_types2 = __toESM(require_prop_types());
  var import_payment = __toESM(require_lib2());
  function _typeof3(obj) {
    "@babel/helpers - typeof";
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof3 = function _typeof6(obj2) {
        return typeof obj2;
      };
    } else {
      _typeof3 = function _typeof6(obj2) {
        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      };
    }
    return _typeof3(obj);
  }
  function _slicedToArray2(arr, i3) {
    return _arrayWithHoles2(arr) || _iterableToArrayLimit2(arr, i3) || _unsupportedIterableToArray2(arr, i3) || _nonIterableRest2();
  }
  function _nonIterableRest2() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray2(o3, minLen) {
    if (!o3)
      return;
    if (typeof o3 === "string")
      return _arrayLikeToArray2(o3, minLen);
    var n4 = Object.prototype.toString.call(o3).slice(8, -1);
    if (n4 === "Object" && o3.constructor)
      n4 = o3.constructor.name;
    if (n4 === "Map" || n4 === "Set")
      return Array.from(o3);
    if (n4 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n4))
      return _arrayLikeToArray2(o3, minLen);
  }
  function _arrayLikeToArray2(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i3 = 0, arr2 = new Array(len); i3 < len; i3++) {
      arr2[i3] = arr[i3];
    }
    return arr2;
  }
  function _iterableToArrayLimit2(arr, i3) {
    if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr)))
      return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = void 0;
    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i3 && _arr.length === i3)
          break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null)
          _i["return"]();
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }
  function _arrayWithHoles2(arr) {
    if (Array.isArray(arr))
      return arr;
  }
  function _classCallCheck2(instance2, Constructor) {
    if (!(instance2 instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties2(target, props) {
    for (var i3 = 0; i3 < props.length; i3++) {
      var descriptor = props[i3];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  function _createClass2(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties2(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties2(Constructor, staticProps);
    return Constructor;
  }
  function _inherits2(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
    if (superClass)
      _setPrototypeOf3(subClass, superClass);
  }
  function _setPrototypeOf3(o3, p2) {
    _setPrototypeOf3 = Object.setPrototypeOf || function _setPrototypeOf5(o4, p3) {
      o4.__proto__ = p3;
      return o4;
    };
    return _setPrototypeOf3(o3, p2);
  }
  function _createSuper2(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct3();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf3(Derived), result2;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf3(this).constructor;
        result2 = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result2 = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn2(this, result2);
    };
  }
  function _possibleConstructorReturn2(self2, call2) {
    if (call2 && (_typeof3(call2) === "object" || typeof call2 === "function")) {
      return call2;
    }
    return _assertThisInitialized2(self2);
  }
  function _assertThisInitialized2(self2) {
    if (self2 === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self2;
  }
  function _isNativeReflectConstruct3() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function() {
      }));
      return true;
    } catch (e3) {
      return false;
    }
  }
  function _getPrototypeOf3(o3) {
    _getPrototypeOf3 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf5(o4) {
      return o4.__proto__ || Object.getPrototypeOf(o4);
    };
    return _getPrototypeOf3(o3);
  }
  function _defineProperty3(obj, key2, value) {
    if (key2 in obj) {
      Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key2] = value;
    }
    return obj;
  }
  var ReactCreditCards = /* @__PURE__ */ function(_React$Component) {
    _inherits2(ReactCreditCards2, _React$Component);
    var _super = _createSuper2(ReactCreditCards2);
    function ReactCreditCards2(props) {
      var _this;
      _classCallCheck2(this, ReactCreditCards2);
      _this = _super.call(this, props);
      _this.setCards();
      return _this;
    }
    _createClass2(ReactCreditCards2, [{
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        var _this$props = this.props, acceptedCards = _this$props.acceptedCards, callback = _this$props.callback, number4 = _this$props.number;
        if (prevProps.number !== number4) {
          if (typeof callback === "function") {
            callback(this.options, import_payment.default.fns.validateCardNumber(number4));
          }
        }
        if (prevProps.acceptedCards.toString() !== acceptedCards.toString()) {
          this.setCards();
        }
      }
    }, {
      key: "setCards",
      value: function setCards() {
        var acceptedCards = this.props.acceptedCards;
        var newCardArray = [];
        if (acceptedCards.length) {
          import_payment.default.getCardArray().forEach(function(d2) {
            if (acceptedCards.indexOf(d2.type) !== -1) {
              newCardArray.push(d2);
            }
          });
        } else {
          newCardArray = newCardArray.concat(import_payment.default.getCardArray());
        }
        import_payment.default.setCardArray(newCardArray);
      }
    }, {
      key: "render",
      value: function render2() {
        var _this$props2 = this.props, cvc = _this$props2.cvc, focused = _this$props2.focused, locale4 = _this$props2.locale, name = _this$props2.name, placeholders = _this$props2.placeholders;
        var number4 = this.number, expiry = this.expiry;
        return /* @__PURE__ */ import_react123.default.createElement("div", {
          key: "Cards",
          className: "rccs"
        }, /* @__PURE__ */ import_react123.default.createElement("div", {
          className: ["rccs__card", "rccs__card--".concat(this.issuer), focused === "cvc" && this.issuer !== "amex" ? "rccs__card--flipped" : ""].join(" ").trim()
        }, /* @__PURE__ */ import_react123.default.createElement("div", {
          className: "rccs__card--front"
        }, /* @__PURE__ */ import_react123.default.createElement("div", {
          className: "rccs__card__background"
        }), /* @__PURE__ */ import_react123.default.createElement("div", {
          className: "rccs__issuer"
        }), /* @__PURE__ */ import_react123.default.createElement("div", {
          className: ["rccs__cvc__front", focused === "cvc" ? "rccs--focused" : ""].join(" ").trim()
        }, cvc), /* @__PURE__ */ import_react123.default.createElement("div", {
          className: ["rccs__number", number4.replace(/ /g, "").length > 16 ? "rccs__number--large" : "", focused === "number" ? "rccs--focused" : "", number4.substr(0, 1) !== "\u2022" ? "rccs--filled" : ""].join(" ").trim()
        }, number4), /* @__PURE__ */ import_react123.default.createElement("div", {
          className: ["rccs__name", focused === "name" ? "rccs--focused" : "", name ? "rccs--filled" : ""].join(" ").trim()
        }, name || placeholders.name), /* @__PURE__ */ import_react123.default.createElement("div", {
          className: ["rccs__expiry", focused === "expiry" ? "rccs--focused" : "", expiry.substr(0, 1) !== "\u2022" ? "rccs--filled" : ""].join(" ").trim()
        }, /* @__PURE__ */ import_react123.default.createElement("div", {
          className: "rccs__expiry__valid"
        }, locale4.valid), /* @__PURE__ */ import_react123.default.createElement("div", {
          className: "rccs__expiry__value"
        }, expiry)), /* @__PURE__ */ import_react123.default.createElement("div", {
          className: "rccs__chip"
        })), /* @__PURE__ */ import_react123.default.createElement("div", {
          className: "rccs__card--back"
        }, /* @__PURE__ */ import_react123.default.createElement("div", {
          className: "rccs__card__background"
        }), /* @__PURE__ */ import_react123.default.createElement("div", {
          className: "rccs__stripe"
        }), /* @__PURE__ */ import_react123.default.createElement("div", {
          className: "rccs__signature"
        }), /* @__PURE__ */ import_react123.default.createElement("div", {
          className: ["rccs__cvc", focused === "cvc" ? "rccs--focused" : ""].join(" ").trim()
        }, cvc), /* @__PURE__ */ import_react123.default.createElement("div", {
          className: "rccs__issuer"
        }))));
      }
    }, {
      key: "issuer",
      get: function get3() {
        var _this$props3 = this.props, issuer = _this$props3.issuer, preview = _this$props3.preview;
        return preview && issuer ? issuer.toLowerCase() : this.options.issuer;
      }
    }, {
      key: "number",
      get: function get3() {
        var _this$props4 = this.props, number4 = _this$props4.number, preview = _this$props4.preview;
        var maxLength = preview ? 19 : this.options.maxLength;
        var nextNumber = typeof number4 === "number" ? number4.toString() : number4.replace(/[A-Za-z]| /g, "");
        if (isNaN(parseInt(nextNumber, 10)) && !preview) {
          nextNumber = "";
        }
        if (maxLength > 16) {
          maxLength = nextNumber.length <= 16 ? 16 : maxLength;
        }
        if (nextNumber.length > maxLength) {
          nextNumber = nextNumber.slice(0, maxLength);
        }
        while (nextNumber.length < maxLength) {
          nextNumber += "\u2022";
        }
        if (["amex", "dinersclub"].indexOf(this.issuer) !== -1) {
          var format3 = [0, 4, 10];
          var limit = [4, 6, 5];
          nextNumber = "".concat(nextNumber.substr(format3[0], limit[0]), " ").concat(nextNumber.substr(format3[1], limit[1]), " ").concat(nextNumber.substr(format3[2], limit[2]));
        } else if (nextNumber.length > 16) {
          var _format = [0, 4, 8, 12];
          var _limit = [4, 7];
          nextNumber = "".concat(nextNumber.substr(_format[0], _limit[0]), " ").concat(nextNumber.substr(_format[1], _limit[0]), " ").concat(nextNumber.substr(_format[2], _limit[0]), " ").concat(nextNumber.substr(_format[3], _limit[1]));
        } else {
          for (var i3 = 1; i3 < maxLength / 4; i3++) {
            var space_index = i3 * 4 + (i3 - 1);
            nextNumber = "".concat(nextNumber.slice(0, space_index), " ").concat(nextNumber.slice(space_index));
          }
        }
        return nextNumber;
      }
    }, {
      key: "expiry",
      get: function get3() {
        var _this$props$expiry = this.props.expiry, expiry = _this$props$expiry === void 0 ? "" : _this$props$expiry;
        var date4 = typeof expiry === "number" ? expiry.toString() : expiry;
        var month = "";
        var year = "";
        if (date4.indexOf("/") !== -1) {
          var _date$split = date4.split("/");
          var _date$split2 = _slicedToArray2(_date$split, 2);
          month = _date$split2[0];
          year = _date$split2[1];
        } else if (date4.length) {
          month = date4.substr(0, 2);
          year = date4.substr(2, 6);
        }
        while (month.length < 2) {
          month += "\u2022";
        }
        if (year.length > 2) {
          year = year.substr(2, 4);
        }
        while (year.length < 2) {
          year += "\u2022";
        }
        return "".concat(month, "/").concat(year);
      }
    }, {
      key: "options",
      get: function get3() {
        var number4 = this.props.number;
        var issuer = import_payment.default.fns.cardType(number4) || "unknown";
        var maxLength = 16;
        if (issuer === "amex") {
          maxLength = 15;
        } else if (issuer === "dinersclub") {
          maxLength = 14;
        } else if (["hipercard", "mastercard", "visa"].indexOf(issuer) !== -1) {
          maxLength = 19;
        }
        return {
          issuer,
          maxLength
        };
      }
    }]);
    return ReactCreditCards2;
  }(import_react123.default.Component);
  _defineProperty3(ReactCreditCards, "propTypes", {
    acceptedCards: import_prop_types2.default.array,
    callback: import_prop_types2.default.func,
    cvc: import_prop_types2.default.oneOfType([import_prop_types2.default.string, import_prop_types2.default.number]).isRequired,
    expiry: import_prop_types2.default.oneOfType([import_prop_types2.default.string, import_prop_types2.default.number]).isRequired,
    focused: import_prop_types2.default.string,
    issuer: import_prop_types2.default.string,
    locale: import_prop_types2.default.shape({
      valid: import_prop_types2.default.string
    }),
    name: import_prop_types2.default.string.isRequired,
    number: import_prop_types2.default.oneOfType([import_prop_types2.default.string, import_prop_types2.default.number]).isRequired,
    placeholders: import_prop_types2.default.shape({
      name: import_prop_types2.default.string
    }),
    preview: import_prop_types2.default.bool
  });
  _defineProperty3(ReactCreditCards, "defaultProps", {
    acceptedCards: [],
    locale: {
      valid: "valid thru"
    },
    placeholders: {
      name: "YOUR NAME HERE"
    },
    preview: false
  });
  var es_default28 = ReactCreditCards;

  // src/components/paymentForm/PaymentForm.module.css
  var PaymentForm_default = {
    "payment-form": "PaymentForm_payment-form"
  };

  // src/components/paymentForm/PaymentForm.tsx
  var import_react125 = __toESM(require_react());
  var PaymentForm = () => {
    const [cvc, setCvc] = (0, import_react125.useState)(" ");
    const [expiry, setexpiry] = (0, import_react125.useState)(" ");
    const [focus, setFocus] = (0, import_react125.useState)(" ");
    const [name, setName] = (0, import_react125.useState)(" ");
    const [number4, setNumber] = (0, import_react125.useState)(" ");
    const handleInputFocus = (e3) => {
      setFocus(e3.target.name);
    };
    const handleInputChange = (e3) => {
      const { name: name2, value } = e3.target;
      switch (name2) {
        case "cvc":
          setCvc(value);
          break;
        case "name":
          setName(value);
          break;
        case "number":
          setNumber(value);
          break;
        case "expiry":
          setexpiry(value);
          break;
        default:
          break;
      }
    };
    return /* @__PURE__ */ import_react124.default.createElement("div", { id: "PaymentForm", style: { marginTop: 50 } }, /* @__PURE__ */ import_react124.default.createElement(
      es_default28,
      {
        cvc,
        expiry,
        focused: focus,
        name,
        number: number4
      }
    ), /* @__PURE__ */ import_react124.default.createElement("form", { className: PaymentForm_default["payment-form"] }, /* @__PURE__ */ import_react124.default.createElement(input_default.Group, null, /* @__PURE__ */ import_react124.default.createElement(row_default2, { gutter: [0, 16] }, /* @__PURE__ */ import_react124.default.createElement(
      input_default,
      {
        type: "tel",
        name: "number",
        placeholder: "Card Number",
        required: true,
        pattern: "[\\d| ]{16,22}",
        onChange: handleInputChange,
        onFocus: handleInputFocus
      }
    )), /* @__PURE__ */ import_react124.default.createElement(row_default2, { gutter: [0, 16] }, /* @__PURE__ */ import_react124.default.createElement(
      input_default,
      {
        type: "text",
        name: "name",
        placeholder: "Your Name",
        required: true,
        onChange: handleInputChange,
        onFocus: handleInputFocus
      }
    )), /* @__PURE__ */ import_react124.default.createElement(row_default2, { gutter: [0, 16] }, /* @__PURE__ */ import_react124.default.createElement(col_default2, { span: 13 }, /* @__PURE__ */ import_react124.default.createElement(
      input_default,
      {
        type: "tel",
        name: "expiry",
        placeholder: "Valid Thru",
        required: true,
        pattern: "\\d\\d/\\d\\d",
        onChange: handleInputChange,
        onFocus: handleInputFocus
      }
    )), /* @__PURE__ */ import_react124.default.createElement(col_default2, { span: 4 }), /* @__PURE__ */ import_react124.default.createElement(col_default2, { span: 7 }, /* @__PURE__ */ import_react124.default.createElement(
      input_default,
      {
        type: "tel",
        name: "cvc",
        placeholder: "CVC",
        required: true,
        pattern: "\\d{3,4}",
        onChange: handleInputChange,
        onFocus: handleInputFocus
      }
    ))))));
  };
  PaymentForm.displayName = "PaymentForm";

  // src/components/checkOutCard/CheckOutCard.tsx
  var import_react126 = __toESM(require_react());
  var { Meta: Meta6 } = card_default;
  var { Title: Title5, Text: Text6 } = typography_default;
  var columns3 = [
    {
      title: "\u4EA7\u54C1",
      dataIndex: "item",
      key: "item"
    },
    {
      title: "\u4EF7\u683C",
      dataIndex: "amount",
      key: "amount"
    }
  ];
  var CheckOutCard = import_react126.default.memo(
    ({ loading, order, onCheckout }) => {
      const navigate = useNavigate();
      const getSum = () => {
        return order && order.orderItems ? order.orderItems.map(
          (s2) => s2.originalPrice * (s2.discountPresent ? s2.discountPresent : 1)
        ).reduce((a2, b2) => a2 + b2, 0).toFixed(2) : 0;
      };
      const getPaymentData = (0, import_react126.useMemo)(() => {
        return order ? order.orderItems.map((i3, index2) => ({
          key: getKey5(),
          item: i3.title,
          amount: i3.discountPresent ? /* @__PURE__ */ import_react126.default.createElement(import_react126.default.Fragment, null, /* @__PURE__ */ import_react126.default.createElement(Text6, { delete: true }, "\xA5 ", handlePrice(i3.originalPrice), " "), " ", /* @__PURE__ */ import_react126.default.createElement(Text6, { type: "danger", strong: true }, "\xA5 ", handlePrice(i3.originalPrice * i3.discountPresent))) : /* @__PURE__ */ import_react126.default.createElement(import_react126.default.Fragment, null, /* @__PURE__ */ import_react126.default.createElement(Text6, null, "\xA5 ", handlePrice(i3.originalPrice), " "))
        })) : [];
      }, [order]);
      return /* @__PURE__ */ import_react126.default.createElement(
        card_default,
        {
          style: { width: 600, marginTop: 50 },
          actions: [
            order && order.state === "Completed" ? /* @__PURE__ */ import_react126.default.createElement(
              button_default2,
              {
                type: "primary",
                onClick: () => {
                  navigate("/");
                },
                loading
              },
              /* @__PURE__ */ import_react126.default.createElement(HomeOutlined_default2, null),
              "\u56DE\u5230\u9996\u9875"
            ) : /* @__PURE__ */ import_react126.default.createElement(
              button_default2,
              {
                type: "primary",
                danger: true,
                onClick: onCheckout,
                loading
              },
              /* @__PURE__ */ import_react126.default.createElement(CheckCircleOutlined_default3, null),
              "\u652F\u4ED8"
            )
          ]
        },
        /* @__PURE__ */ import_react126.default.createElement(skeleton_default, { loading, active: true }, /* @__PURE__ */ import_react126.default.createElement(
          Meta6,
          {
            title: /* @__PURE__ */ import_react126.default.createElement(Title5, { level: 2 }, order && order.state === "Completed" ? "\u652F\u4ED8\u6210\u529F" : "\u603B\u8BA1\uFF1A " + getSum() + "\u5143"),
            description: /* @__PURE__ */ import_react126.default.createElement(
              table_default,
              {
                columns: columns3,
                dataSource: getPaymentData,
                showHeader: false,
                size: "small",
                bordered: false,
                pagination: false
              }
            )
          }
        ))
      );
    }
  );
  CheckOutCard.displayName = "CheckOutCard";

  // src/layouts/mainLayout/MainLayout.tsx
  var MainLayout = import_react127.default.memo(({ children }) => {
    return /* @__PURE__ */ import_react127.default.createElement(import_react127.default.Fragment, null, /* @__PURE__ */ import_react127.default.createElement(Header4, null), /* @__PURE__ */ import_react127.default.createElement("div", { className: MainLayout_default["page-content"] }, children), /* @__PURE__ */ import_react127.default.createElement(Footer3, null));
  });

  // src/assets/images/sider_2019_12-09.png
  var sider_2019_12_09_default = "./sider_2019_12-09-PKRTG2NA.png";

  // src/assets/images/sider_2019_02-04.png
  var sider_2019_02_04_default = "./sider_2019_02-04-XVZQGHP3.png";

  // src/assets/images/sider_2019_02-04-2.png
  var sider_2019_02_04_2_default = "./sider_2019_02-04-2-7OVNZOFP.png";

  // src/pages/home/HomePage.tsx
  var HomePage = import_react128.default.memo(() => {
    const loading = useSelector2((state) => state.recommendProduct.loading);
    const error2 = useSelector2((state) => state.recommendProduct.error);
    const productList = useSelector2(
      (state) => state.recommendProduct.productList
    );
    const dispatch2 = useDispatch();
    const { t: t4 } = useTranslation();
    (0, import_react128.useEffect)(() => {
      dispatch2(getRecommendProduct());
    }, [dispatch2]);
    if (loading) {
      return /* @__PURE__ */ import_react128.default.createElement(
        spin_default,
        {
          size: "large",
          style: {
            marginTop: 200,
            marginBottom: 200,
            marginLeft: "auto",
            marginRight: "auto",
            width: "100%"
          }
        }
      );
    }
    if (error2) {
      return /* @__PURE__ */ import_react128.default.createElement("div", null, "\u7F51\u7AD9\u51FA\u9519:", error2);
    }
    return /* @__PURE__ */ import_react128.default.createElement(MainLayout, null, /* @__PURE__ */ import_react128.default.createElement(row_default2, { style: { marginTop: 20 } }, /* @__PURE__ */ import_react128.default.createElement(col_default2, { span: 6 }, /* @__PURE__ */ import_react128.default.createElement(SideMenu, null)), /* @__PURE__ */ import_react128.default.createElement(col_default2, { span: 18 }, /* @__PURE__ */ import_react128.default.createElement(Carousel2, null))), /* @__PURE__ */ import_react128.default.createElement(
      ProductCollection,
      {
        title: /* @__PURE__ */ import_react128.default.createElement(typography_default.Title, { level: 3, type: "warning" }, t4("home_page.hot_recommended")),
        sideImage: sider_2019_12_09_default,
        products: productList[0].touristRoutes
      }
    ), /* @__PURE__ */ import_react128.default.createElement(
      ProductCollection,
      {
        title: /* @__PURE__ */ import_react128.default.createElement(typography_default.Title, { level: 3, type: "danger" }, t4("home_page.new_arrival")),
        sideImage: sider_2019_02_04_default,
        products: productList[1].touristRoutes
      }
    ), /* @__PURE__ */ import_react128.default.createElement(
      ProductCollection,
      {
        title: /* @__PURE__ */ import_react128.default.createElement(typography_default.Title, { level: 3, type: "success" }, t4("home_page.domestic_travel")),
        sideImage: sider_2019_02_04_2_default,
        products: productList[2].touristRoutes
      }
    ), /* @__PURE__ */ import_react128.default.createElement(BusinessPartners, null));
  });
  HomePage.displayName = "HomePage";

  // src/pages/signIn/SingInPage.tsx
  var import_react132 = __toESM(require_react());

  // src/layouts/userLayout/UserLayout.tsx
  var import_react129 = __toESM(require_react());

  // src/layouts/userLayout/UserLayout.module.css
  var UserLayout_default = {
    "user-layout-container": "UserLayout_user-layout-container",
    header: "UserLayout_header",
    home: "UserLayout_home",
    lang: "UserLayout_lang",
    content: "UserLayout_content",
    top: "UserLayout_top",
    "content-header": "UserLayout_content-header",
    logo: "UserLayout_logo",
    title: "UserLayout_title",
    desc: "UserLayout_desc"
  };

  // src/layouts/userLayout/UserLayout.tsx
  var { Header: Header5, Footer: Footer4, Content: Content3 } = layout_default2;
  var UserLayout = import_react129.default.memo((props) => {
    const navigate = useNavigate();
    const items = [getItem("\u4E2D\u6587", "1"), getItem("English", "2")];
    const goHome = (e3) => {
      navigate("/");
    };
    return /* @__PURE__ */ import_react129.default.createElement(layout_default2, { className: UserLayout_default["user-layout-container"] }, /* @__PURE__ */ import_react129.default.createElement(Header5, { className: UserLayout_default["header"] }, /* @__PURE__ */ import_react129.default.createElement("div", { className: UserLayout_default["home"] }, /* @__PURE__ */ import_react129.default.createElement(button_default2, { onClick: goHome }, "\u56DE\u5230\u9996\u9875 ", /* @__PURE__ */ import_react129.default.createElement(HomeOutlined_default2, null))), /* @__PURE__ */ import_react129.default.createElement("div", { className: UserLayout_default["lang"] }, /* @__PURE__ */ import_react129.default.createElement(dropdown_default2, { overlay: /* @__PURE__ */ import_react129.default.createElement(menu_default, { items }) }, /* @__PURE__ */ import_react129.default.createElement(button_default2, null, "\u9009\u62E9\u8BED\u8A00 ", /* @__PURE__ */ import_react129.default.createElement(CaretDownOutlined_default3, null))))), /* @__PURE__ */ import_react129.default.createElement(Content3, { className: UserLayout_default["content"] }, /* @__PURE__ */ import_react129.default.createElement("div", { className: UserLayout_default["top"] }, /* @__PURE__ */ import_react129.default.createElement("div", { className: UserLayout_default["content-header"] }, /* @__PURE__ */ import_react129.default.createElement(Link, { to: "/" }, /* @__PURE__ */ import_react129.default.createElement("img", { alt: "logo", className: UserLayout_default["logo"], src: logo_default }), /* @__PURE__ */ import_react129.default.createElement("span", { className: UserLayout_default["title"] }, "\u767D\u8017\u513F\u65C5\u6E38\u7F51"))), /* @__PURE__ */ import_react129.default.createElement("div", { className: UserLayout_default["desc"] }, "\u8BA9\u65C5\u6E38\u66F4\u8F7B\u677E"), props.children)), /* @__PURE__ */ import_react129.default.createElement(Footer4, { style: { textAlign: "center" } }, "\u767D\u8017\u513F\u5B66\u4E60\u7528"));
  });

  // src/pages/signIn/SignInForm.tsx
  var import_react130 = __toESM(require_react());

  // src/pages/signIn/SignInForm.module.css
  var SignInForm_default = {
    "register-form": "SignInForm_register-form"
  };

  // src/pages/signIn/SignInForm.tsx
  var import_react131 = __toESM(require_react());
  var SignInForm = import_react130.default.memo(() => {
    const loading = useSelector2((s2) => s2.user.loading);
    const jwt = useSelector2((s2) => s2.user.token);
    const dispath = useDispatch();
    const navigate = useNavigate();
    (0, import_react131.useEffect)(() => {
      if (jwt !== null) {
        navigate("/");
      }
    }, [jwt, navigate]);
    const onFinish = (values) => {
      console.log("login form submitted ");
      dispath(
        signIn({
          email: values.username,
          password: values.password
        })
      );
    };
    const onFinishFailed = (errorInfo) => {
      console.log("Failed:", errorInfo);
    };
    return /* @__PURE__ */ import_react130.default.createElement(
      form_default,
      {
        name: "basic",
        labelCol: {
          span: 8
        },
        wrapperCol: {
          span: 16
        },
        initialValues: {
          remember: false,
          username: "yuanbest",
          //此处设置表单的默认值
          password: "123456"
          //此处设置表单的默认值
        },
        onFinish,
        onFinishFailed,
        autoComplete: "off",
        className: SignInForm_default["register-form"]
      },
      /* @__PURE__ */ import_react130.default.createElement(
        form_default.Item,
        {
          label: "Username",
          name: "username",
          rules: [
            {
              required: true,
              message: "\u8BF7\u8F93\u5165\u7528\u6237\u540D"
            }
          ]
        },
        /* @__PURE__ */ import_react130.default.createElement(input_default, null)
      ),
      /* @__PURE__ */ import_react130.default.createElement(
        form_default.Item,
        {
          label: "Password",
          name: "password",
          rules: [
            {
              required: true,
              message: "\u8BF7\u8F93\u5165\u5BC6\u7801"
            }
          ]
        },
        /* @__PURE__ */ import_react130.default.createElement(input_default.Password, null)
      ),
      /* @__PURE__ */ import_react130.default.createElement(
        form_default.Item,
        {
          name: "remember",
          valuePropName: "checked",
          wrapperCol: {
            offset: 8,
            span: 16
          }
        },
        /* @__PURE__ */ import_react130.default.createElement(checkbox_default, null, "\u8BB0\u4F4F\u6211")
      ),
      /* @__PURE__ */ import_react130.default.createElement(
        form_default.Item,
        {
          wrapperCol: {
            offset: 8,
            span: 16
          }
        },
        /* @__PURE__ */ import_react130.default.createElement(button_default2, { type: "primary", htmlType: "submit", loading }, "\u767B\u5F55")
      )
    );
  });

  // src/pages/signIn/SingInPage.tsx
  var SignInPage = import_react132.default.memo(() => {
    return /* @__PURE__ */ import_react132.default.createElement(UserLayout, null, /* @__PURE__ */ import_react132.default.createElement(SignInForm, null));
  });

  // src/pages/register/RegisterPage.tsx
  var import_react134 = __toESM(require_react());

  // src/pages/register/RegisterForm.tsx
  var import_react133 = __toESM(require_react());

  // src/pages/register/RegisterForm.module.css
  var RegisterForm_default = {
    "register-form": "RegisterForm_register-form"
  };

  // src/pages/register/RegisterForm.tsx
  var RegisterForm = import_react133.default.memo(() => {
    const navigate = useNavigate();
    const onFinish = async (values) => {
      try {
        const { status } = await axios_default2.post("/auth/register", {
          email: values.username,
          password: values.password,
          confirmPassword: values.confirm
        });
        if (status == 200) {
          message_default.success("\u6CE8\u518C\u6210\u529F");
          navigate("/signIn");
        }
      } catch (error2) {
        console.log("error===> ", error2);
        message_default.error("\u6CE8\u518C\u5931\u8D25");
      }
    };
    const onFinishFailed = (errorInfo) => {
      console.log("Failed:", errorInfo);
    };
    return /* @__PURE__ */ import_react133.default.createElement(
      form_default,
      {
        name: "basic",
        labelCol: {
          span: 8
        },
        wrapperCol: {
          span: 16
        },
        initialValues: {
          remember: true
        },
        onFinish,
        onFinishFailed,
        autoComplete: "off",
        className: RegisterForm_default["register-form"]
      },
      /* @__PURE__ */ import_react133.default.createElement(
        form_default.Item,
        {
          label: "\u7528\u6237\u540D",
          name: "username",
          rules: [
            {
              required: true,
              message: "Please input your username!"
            }
          ]
        },
        /* @__PURE__ */ import_react133.default.createElement(input_default, null)
      ),
      /* @__PURE__ */ import_react133.default.createElement(
        form_default.Item,
        {
          label: "\u5BC6\u7801",
          name: "password",
          rules: [
            {
              required: true,
              message: "Please input your password!"
            }
          ]
        },
        /* @__PURE__ */ import_react133.default.createElement(input_default.Password, null)
      ),
      /* @__PURE__ */ import_react133.default.createElement(
        form_default.Item,
        {
          label: "\u786E\u8BA4\u5BC6\u7801",
          name: "confirm",
          dependencies: ["password"],
          rules: [
            {
              required: true,
              message: "\u8BF7\u518D\u6B21\u8F93\u5165\u5BC6\u7801\uFF01"
            },
            ({ getFieldValue }) => ({
              validator(_24, value) {
                if (!value || getFieldValue("password") === value) {
                  return Promise.resolve();
                }
                return Promise.reject(new Error("\u4E24\u6B21\u8F93\u5165\u7684\u5BC6\u7801\u4E0D\u5339\u914D\uFF01"));
              }
            })
          ],
          hasFeedback: true
        },
        /* @__PURE__ */ import_react133.default.createElement(input_default.Password, null)
      ),
      /* @__PURE__ */ import_react133.default.createElement(
        form_default.Item,
        {
          wrapperCol: {
            offset: 8,
            span: 16
          }
        },
        /* @__PURE__ */ import_react133.default.createElement(button_default2, { type: "primary", htmlType: "submit" }, "\u6CE8\u518C")
      )
    );
  });

  // src/pages/register/RegisterPage.tsx
  var RegisterPage = import_react134.default.memo(() => {
    return /* @__PURE__ */ import_react134.default.createElement(UserLayout, null, /* @__PURE__ */ import_react134.default.createElement(RegisterForm, null));
  });

  // src/pages/detail/DetailPage.module.css
  var DetailPage_default = {
    "page-content": "DetailPage_page-content",
    "product-intro-container": "DetailPage_product-intro-container",
    "product-detail-anchor": "DetailPage_product-detail-anchor",
    "product-detail-container": "DetailPage_product-detail-container"
  };

  // src/pages/detail/DetailPage.tsx
  var import_react135 = __toESM(require_react());

  // src/redux/productDetail/slice.ts
  var initialState6 = {
    loading: true,
    error: null,
    data: null
  };
  var getProductDetail = createAsyncThunk(
    "productDetail/getProductDetail",
    async (touristRouteId, thunkAPI) => {
      const { data } = await axios_default2.get(`/api/touristRoutes/${touristRouteId}`);
      return data;
    }
  );
  var productDetailSlice = createSlice({
    name: "productDetail",
    initialState: initialState6,
    reducers: {
      pageOut: (state) => {
        state.data = null;
        state.error = null;
        state.loading = true;
      }
    },
    extraReducers: {
      [getProductDetail.pending.type]: (state) => {
        state.loading = true;
      },
      [getProductDetail.fulfilled.type]: (state, action) => {
        state.loading = false;
        state.data = action.payload;
      },
      [getProductDetail.rejected.type]: (state, action) => {
        state.loading = false;
        state.error = action.payload;
      }
    }
  });

  // src/pages/detail/mockup.ts
  var commentMockData = [
    {
      author: "Han Solo",
      avatar: "https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png",
      content: `\u524D\u5F80\u7801\u5934\u642D\u4E58\u5FEB\u8247\u524D\u5F80\u6F5C\u6C34\u8247\u5E73\u53F0\uFF0C\u642D\u4E58\u6F5C\u6C34\u8247\u6F5C\u51657\u7C73\u6DF1\u7EA2\u6D77\uFF0C\u6B23\u8D4F\u795E\u79D8\u7F8E\u4E3D\u7684\u7EA2\u6D77\u6D77\u5E95\u4E16\u754C\u3002\u5E76\u6709\u6F5C\u6C34\u5458\u4E3A\u60A8\u732E\u4E0A\u6D77\u5E95\u5582\u9C7C\u7684\u8868\u6F14\u3002\u542B\u63A5\u9001\uFF0C\u4E2D\u6587\u5BFC\u6E38\u966A\u540C`,
      createDate: "2020-01-05"
    },
    {
      author: "Han Solo",
      avatar: "https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png",
      content: `\u65E9\u4E0A5\u70B9\u5DE6\u53F3\u4ECE\u9152\u5E97\u51FA\u53D1\u524D\u5F80\u7801\u5934\uFF0C\u642D\u4E58\u5C0F\u8239\u524D\u5F80\u5C3C\u7F57\u6CB3\u897F\u5CB8\u3002\u5C0F\u8239\u4E0A\u51C6\u5907\u6709\u70ED\u5496\u5561\uFF0C\u8336\uFF0C\u4EE5\u53CA\u5C0F\u70B9\u5FC3\u3002\u642D\u4E58\u70ED\u6C14\u7403\u8FCE\u63A5\u65E5\u51FA\uFF0C\u5E76\u4FEF\u77B0\u5362\u514B\u7D22\u3002\u9014\u5F84\u54C8\u5E03\u57CE\uFF0C\u5973\u738B\u795E\u5E99\uFF0C\u5E1D\u738B\u8C37\u7B49\u666F\u70B9\uFF0C\u4ECE\u9AD8\u7A7A\u4F53\u9A8C\u4E0D\u4E00\u6837\u7684\u5362\u514B\u7D22\u3002\u843D\u5730\u540E\u4F1A\u4E3E\u529E\u4E00\u4E2A\u5C0F\u7684\u5E86\u795D\u4EEA\u5F0F\uFF0C\u5E76\u4E3A\u5BA2\u4EBA\u9881\u53D1\u8BC1\u4E66\u3002\u4E4B\u540E\u4E13\u8F66\u9001\u8FD4\u9152\u5E97\u3002`,
      createDate: "2020-02-06"
    },
    {
      author: "Han Solo",
      avatar: "https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png",
      content: `\u884C\u7A0B\u5B89\u6392\u4EC5\u4F9B\u53C2\u8003\uFF0C\u89C6\u5F53\u5929\u5177\u4F53\u5929\u6C14\u60C5\u51B5\u800C\u5B9A\u3002\u82E5\u56E0\u5929\u6C14\u72B6\u51B5\u800C\u65E0\u6CD5\u4E58\u5750\u70ED\u6C14\u7403\uFF0C\u5219\u539F\u4EF7\u9000\u8FD8\uFF01`,
      createDate: "2020-01-04"
    },
    {
      author: "Han Solo",
      avatar: "https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png",
      content: `\u642D\u4E58\u7279\u6B8A\u5B9A\u5236\u7684\u6E38\u8239\uFF0C\u5728\u6E38\u8239\u5E95\u90E8\u8BBE\u6709\u5927\u578B\u89C2\u5149\u7A97\uFF0C\u4FBF\u4E8E\u6B23\u8D4F\u5947\u5999\u7684\u6D77\u5E95\u4E16\u754C\u3002\u5305\u542B\u63A5\u9001\uFF0C\u4E2D\u6587\u5BFC\u6E38\u966A\u540C\u6CE8\u610F\uFF1A\u4E0A\u4E0B\u8239\u65F6\u8BF7\u6CE8\u610F\u5B89\u5168\uFF0C\u4F9D\u6B21\u6392\u961F\u5207\u52FF\u62E5\u6324\u3001\u5C0F\u5FC3\u5730\u6ED1\u300270\u7F8E\u91D1/\u4EBA\uFF084\u4EBA\u8D77\uFF09`,
      createDate: "2020-02-05"
    }
  ];

  // src/pages/detail/DetailPage.tsx
  var { RangePicker: RangePicker2 } = date_picker_default;
  var DetailPage = import_react135.default.memo(() => {
    const { touristRouteId } = useParams();
    const loading = useSelector2((state) => state.productDetail.loading);
    const error2 = useSelector2((state) => state.productDetail.error);
    const product = useSelector2((state) => state.productDetail.data);
    const dispatch2 = useDispatch();
    const jwt = useSelector2((s2) => s2.user.token);
    const shoppingCartLoading = useSelector2((s2) => s2.user.loading);
    const items = [
      getItem(/* @__PURE__ */ import_react135.default.createElement(anchor_default.Link, { href: "#feature", title: "\u4EA7\u54C1\u7279\u8272" }), "1"),
      getItem(/* @__PURE__ */ import_react135.default.createElement(anchor_default.Link, { href: "#fees", title: "\u8D39\u7528" }), "3"),
      getItem(/* @__PURE__ */ import_react135.default.createElement(anchor_default.Link, { href: "#notes", title: "\u9884\u5B9A\u987B\u77E5" }), "4"),
      getItem(/* @__PURE__ */ import_react135.default.createElement(anchor_default.Link, { href: "#comments", title: "\u7528\u6237\u8BC4\u8BBA" }), "5")
    ];
    (0, import_react135.useEffect)(() => {
      if (touristRouteId) {
        dispatch2(getProductDetail(touristRouteId));
      }
      return () => {
        dispatch2(productDetailSlice.actions.pageOut());
      };
    }, [dispatch2, touristRouteId]);
    if (loading) {
      return /* @__PURE__ */ import_react135.default.createElement(
        spin_default,
        {
          size: "large",
          style: {
            marginTop: 200,
            marginBottom: 200,
            marginLeft: "auto",
            marginRight: "auto",
            width: "100%"
          }
        }
      );
    }
    if (error2) {
      return /* @__PURE__ */ import_react135.default.createElement("div", null, "\u7F51\u7AD9\u51FA\u9519:", error2);
    }
    return /* @__PURE__ */ import_react135.default.createElement(MainLayout, null, /* @__PURE__ */ import_react135.default.createElement("div", { className: DetailPage_default["product-intro-container"] }, /* @__PURE__ */ import_react135.default.createElement(row_default2, null, /* @__PURE__ */ import_react135.default.createElement(col_default2, { span: 13 }, /* @__PURE__ */ import_react135.default.createElement(
      ProductIntro,
      {
        title: product.title,
        shortDescription: product.description,
        price: product.originalPrice,
        coupons: product.coupons,
        points: product.points,
        discount: product.price,
        rating: product.rating,
        pictures: product.touristRoutePictures.map((p2) => p2.url)
      }
    )), /* @__PURE__ */ import_react135.default.createElement(col_default2, { span: 11 }, /* @__PURE__ */ import_react135.default.createElement(
      button_default2,
      {
        style: { marginTop: 50, marginBottom: 30, display: "block" },
        type: "primary",
        danger: true,
        loading: shoppingCartLoading,
        onClick: () => {
          dispatch2(
            addShoppingCartItem({ jwt, touristRouteId: product.id })
          );
          setTimeout(() => {
            dispatch2(getShoppingCart(jwt));
          }, 200);
        }
      },
      /* @__PURE__ */ import_react135.default.createElement(ShoppingCartOutlined_default2, null),
      "\u653E\u5165\u8D2D\u7269\u8F66"
    ), /* @__PURE__ */ import_react135.default.createElement(RangePicker2, { open: true, style: { marginTop: 20 } })))), /* @__PURE__ */ import_react135.default.createElement(anchor_default, { className: DetailPage_default["product-detail-anchor"] }, /* @__PURE__ */ import_react135.default.createElement(menu_default, { mode: "horizontal", items })), /* @__PURE__ */ import_react135.default.createElement("div", { id: "feature", className: DetailPage_default["product-detail-container"] }, /* @__PURE__ */ import_react135.default.createElement(divider_default, { orientation: "center" }, /* @__PURE__ */ import_react135.default.createElement(typography_default.Title, { level: 3 }, "\u4EA7\u54C1\u7279\u8272")), /* @__PURE__ */ import_react135.default.createElement(
      "div",
      {
        dangerouslySetInnerHTML: { __html: product.features },
        style: { margin: 50 }
      }
    )), /* @__PURE__ */ import_react135.default.createElement("div", { id: "fees", className: DetailPage_default["product-detail-container"] }, /* @__PURE__ */ import_react135.default.createElement(divider_default, { orientation: "center" }, /* @__PURE__ */ import_react135.default.createElement(typography_default.Title, { level: 3 }, "\u8D39\u7528")), /* @__PURE__ */ import_react135.default.createElement(
      "div",
      {
        dangerouslySetInnerHTML: { __html: product.fees },
        style: { margin: 50 }
      }
    )), /* @__PURE__ */ import_react135.default.createElement("div", { id: "notes", className: DetailPage_default["product-detail-container"] }, /* @__PURE__ */ import_react135.default.createElement(divider_default, { orientation: "center" }, /* @__PURE__ */ import_react135.default.createElement(typography_default.Title, { level: 3 }, "\u9884\u5B9A\u987B\u77E5")), /* @__PURE__ */ import_react135.default.createElement(
      "div",
      {
        dangerouslySetInnerHTML: { __html: product.notes },
        style: { margin: 50 }
      }
    )), /* @__PURE__ */ import_react135.default.createElement("div", { id: "comments", className: DetailPage_default["product-detail-container"] }, /* @__PURE__ */ import_react135.default.createElement(divider_default, { orientation: "center" }, /* @__PURE__ */ import_react135.default.createElement(typography_default.Title, { level: 3 }, "\u7528\u6237\u8BC4\u8BBA")), /* @__PURE__ */ import_react135.default.createElement("div", { style: { margin: 40 } }, /* @__PURE__ */ import_react135.default.createElement(ProductComments, { data: commentMockData }))));
  });
  DetailPage.displayName = "DetailPage";

  // src/pages/search/SearchPage.tsx
  var import_react136 = __toESM(require_react());

  // src/pages/search/SearchPage.module.css
  var SearchPage_default = {
    "page-content": "SearchPage_page-content",
    "product-list-container": "SearchPage_product-list-container"
  };

  // src/pages/search/SearchPage.tsx
  var import_react137 = __toESM(require_react());

  // src/redux/productSearch/slice.ts
  var initialState7 = {
    loading: true,
    error: null,
    data: null,
    pagination: null
  };
  var searchProduct = createAsyncThunk(
    "productSearch/searchProduct",
    async (parameters, thunkAPI) => {
      let url2 = `/api/touristRoutes?pageNumber=${parameters.nextPage}&pageSize=${parameters.pageSize}&p=` + Math.random();
      if (parameters.keyword) {
        url2 += `&keyword=${parameters.keyword}`;
      }
      const response = await axios_default2.get(url2);
      console.log("search result==>", response.data);
      let pagination = response.headers["x-pagination"];
      if (response.data.length == 0) {
        message_default.warn("\u65E0\u6B64\u65C5\u6E38\u7EBF\u8DEF", 3);
        return {
          data: [],
          pagination: null
        };
      }
      return {
        data: response.data,
        //  注意：这里的需要判断pagination是否存在，否则JSON.parse有可能会解析失败, redux action不会派发成功，
        //  action状态会一直处于reject状态, 并报错：undefined" is not valid JSON
        pagination: JSON.parse(pagination ? pagination : "")
      };
    }
  );
  var productSearchSlice = createSlice({
    name: "productSearch",
    initialState: initialState7,
    reducers: {},
    extraReducers: {
      [searchProduct.pending.type]: (state) => {
        state.loading = true;
      },
      [searchProduct.fulfilled.type]: (state, action) => {
        state.loading = false;
        state.pagination = action.payload.pagination;
        state.data = action.payload.data;
        state.error = null;
      },
      [searchProduct.rejected.type]: (state, action) => {
        state.loading = false;
        state.error = action.payload;
      }
    }
  });

  // src/pages/search/SearchPage.tsx
  var SearchPage = import_react136.default.memo(() => {
    const { keyword } = useParams();
    const loading = useSelector2((state) => state.productSearch.loading);
    const error2 = useSelector2((state) => state.productSearch.error);
    const pagination = useSelector2((state) => state.productSearch.pagination);
    const productList = useSelector2((state) => state.productSearch.data);
    const dispatch2 = useDispatch();
    const location = useLocation();
    (0, import_react137.useEffect)(() => {
      dispatch2(
        searchProduct({
          nextPage: 1,
          pageSize: 5,
          keyword
        })
      );
    }, [dispatch2, keyword, location]);
    const onPageChange = (curPage, clickPage, pageSize) => {
      if (curPage == clickPage)
        return;
      dispatch2(
        searchProduct({
          nextPage: clickPage,
          pageSize,
          keyword
        })
      );
    };
    if (loading) {
      return /* @__PURE__ */ import_react136.default.createElement(
        spin_default,
        {
          size: "large",
          style: {
            marginTop: 200,
            marginBottom: 200,
            marginLeft: "auto",
            marginRight: "auto",
            width: "100%"
          }
        }
      );
    }
    if (error2) {
      return /* @__PURE__ */ import_react136.default.createElement("div", null, "\u7F51\u7AD9\u51FA\u9519:", error2);
    }
    return /* @__PURE__ */ import_react136.default.createElement(MainLayout, null, /* @__PURE__ */ import_react136.default.createElement("div", { className: SearchPage_default["product-list-container"] }, /* @__PURE__ */ import_react136.default.createElement(FilterArea, null)), productList.length == 0 && /* @__PURE__ */ import_react136.default.createElement(TestExport, { msg: "\u65E0\u6B64\u65C5\u6E38\u7EBF\u8DEF\uFF01" }), /* @__PURE__ */ import_react136.default.createElement("div", { className: SearchPage_default["product-list-container"] }, /* @__PURE__ */ import_react136.default.createElement(
      ProductList,
      {
        data: productList,
        paging: pagination,
        isSearch: true,
        onPageChange
      }
    )));
  });

  // src/pages/shoppingCart/ShoppingCart.tsx
  var import_react138 = __toESM(require_react());

  // src/pages/shoppingCart/ShoppingCart.module.css
  var ShoppingCart_default = {
    "product-list-container": "ShoppingCart_product-list-container",
    "payment-card-container": "ShoppingCart_payment-card-container"
  };

  // src/pages/shoppingCart/ShoppingCart.tsx
  var ShoppingCartPage = import_react138.default.memo(() => {
    const loading = useSelector2((s2) => s2.shoppingCart.loading);
    const shoppingCartItems = useSelector2((s2) => s2.shoppingCart.items);
    const jwt = useSelector2((s2) => s2.user.token);
    const dispatch2 = useDispatch();
    const navigate = useNavigate();
    return /* @__PURE__ */ import_react138.default.createElement(MainLayout, null, /* @__PURE__ */ import_react138.default.createElement(row_default2, null, /* @__PURE__ */ import_react138.default.createElement(col_default2, { span: 16 }, /* @__PURE__ */ import_react138.default.createElement("div", { className: ShoppingCart_default["product-list-container"] }, /* @__PURE__ */ import_react138.default.createElement(
      ProductList,
      {
        data: shoppingCartItems.map(
          (s2) => Object.assign({}, s2, { cid: s2.id })
        )
      }
    ))), /* @__PURE__ */ import_react138.default.createElement(col_default2, { span: 8 }, /* @__PURE__ */ import_react138.default.createElement(affix_default, null, /* @__PURE__ */ import_react138.default.createElement("div", { className: ShoppingCart_default["payment-card-container"] }, /* @__PURE__ */ import_react138.default.createElement(
      PaymentCard,
      {
        loading,
        originalPrice: shoppingCartItems.map((s2) => s2.originalPrice).reduce((a2, b2) => a2 + b2, 0),
        price: shoppingCartItems.map(
          (s2) => s2.originalPrice * (s2.discountPresent ? s2.discountPresent : 1)
        ).reduce((a2, b2) => a2 + b2, 0),
        onCheckout: () => {
          if (shoppingCartItems.length <= 0) {
            return;
          }
          dispatch2(checkout(jwt));
          navigate("/placeOrder");
        },
        onShoppingCartClear: () => {
          dispatch2(
            clearShoppingCartItem({
              jwt,
              itemIds: shoppingCartItems.map((s2) => s2.id)
            })
          );
        }
      }
    ))))));
  });

  // src/pages/placeOrder/PlaceOrder.tsx
  var import_react139 = __toESM(require_react());

  // src/redux/order/slice.ts
  var initialState8 = {
    loading: false,
    error: null,
    currentOrder: null
  };
  var placeOrder = createAsyncThunk(
    "order/placeOrder",
    async (parameters, thunkAPI) => {
      const response = await axios_default2.post(
        `/api/orders/placeOrder/${parameters.orderId}`,
        null,
        {
          headers: {
            Authorization: `bearer ${parameters.jwt}`
          }
        }
      );
      if (response.status == 200)
        return "Completed";
    }
  );
  var orderSlice = createSlice({
    name: "order",
    initialState: initialState8,
    reducers: {},
    extraReducers: {
      [placeOrder.pending.type]: (state) => {
        state.loading = true;
      },
      [placeOrder.fulfilled.type]: (state, action) => {
        state.loading = false;
        state.currentOrder.state = action.payload;
        state.error = null;
      },
      [placeOrder.rejected.type]: (state, action) => {
        state.loading = false;
        state.error = action.payload;
      },
      [checkout.pending.type]: (state) => {
        state.loading = true;
      },
      [checkout.fulfilled.type]: (state, action) => {
        state.loading = false;
        state.currentOrder = action.payload;
        state.error = null;
      },
      [checkout.rejected.type]: (state, action) => {
        state.loading = false;
        state.error = action.payload;
      }
    }
  });

  // src/pages/placeOrder/PlaceOrder.tsx
  var PlaceOrderPage = import_react139.default.memo(() => {
    const jwt = useSelector2((s2) => s2.user.token);
    const loading = useSelector2((s2) => s2.order.loading);
    const order = useSelector2((s2) => s2.order.currentOrder);
    const dispatch2 = useDispatch();
    return /* @__PURE__ */ import_react139.default.createElement(MainLayout, null, /* @__PURE__ */ import_react139.default.createElement(row_default2, null, /* @__PURE__ */ import_react139.default.createElement(col_default2, { span: 12 }, /* @__PURE__ */ import_react139.default.createElement(PaymentForm, null)), /* @__PURE__ */ import_react139.default.createElement(col_default2, { span: 12 }, /* @__PURE__ */ import_react139.default.createElement(
      CheckOutCard,
      {
        loading,
        order,
        onCheckout: () => {
          dispatch2(placeOrder({ jwt, orderId: order.id }));
        }
      }
    ))));
  });
  PlaceOrderPage.displayName = "PlaceOrderPage";

  // src/App.tsx
  var PrivateRoute = ({ children }) => {
    const jwt = useSelector2((s2) => s2.user.token);
    return jwt ? children : /* @__PURE__ */ import_react140.default.createElement(Navigate, { to: "/signin" });
  };
  var App = import_react140.default.memo(() => {
    const jwt = useSelector2((s2) => s2.user.token);
    const dispatch2 = useDispatch();
    return /* @__PURE__ */ import_react140.default.createElement("div", { className: App_default.App }, /* @__PURE__ */ import_react140.default.createElement(HistoryRouter, { history: history_default }, /* @__PURE__ */ import_react140.default.createElement(Routes, null, /* @__PURE__ */ import_react140.default.createElement(Route, { path: "/", element: /* @__PURE__ */ import_react140.default.createElement(HomePage, null) }), /* @__PURE__ */ import_react140.default.createElement(Route, { path: "/signIn", element: /* @__PURE__ */ import_react140.default.createElement(SignInPage, null) }), /* @__PURE__ */ import_react140.default.createElement(Route, { path: "/register", element: /* @__PURE__ */ import_react140.default.createElement(RegisterPage, null) }), /* @__PURE__ */ import_react140.default.createElement(Route, { path: "/detail/:touristRouteId", element: /* @__PURE__ */ import_react140.default.createElement(DetailPage, null) }), /* @__PURE__ */ import_react140.default.createElement(Route, { path: "/search/:keyword", element: /* @__PURE__ */ import_react140.default.createElement(SearchPage, null) }), /* @__PURE__ */ import_react140.default.createElement(Route, { path: "/search", element: /* @__PURE__ */ import_react140.default.createElement(SearchPage, null) }), /* @__PURE__ */ import_react140.default.createElement(Route, { path: "/test/:info", element: /* @__PURE__ */ import_react140.default.createElement(TestPage_default, null) }), /* @__PURE__ */ import_react140.default.createElement(
      Route,
      {
        path: "/shoppingCart",
        element: /* @__PURE__ */ import_react140.default.createElement(PrivateRoute, null, /* @__PURE__ */ import_react140.default.createElement(ShoppingCartPage, null))
      }
    ), /* @__PURE__ */ import_react140.default.createElement(
      Route,
      {
        path: "/placeOrder",
        element: /* @__PURE__ */ import_react140.default.createElement(PrivateRoute, null, /* @__PURE__ */ import_react140.default.createElement(PlaceOrderPage, null))
      }
    ), /* @__PURE__ */ import_react140.default.createElement(Route, { element: /* @__PURE__ */ import_react140.default.createElement("h1", null, "404 not found \u9875\u9762\u53BB\u706B\u661F\u4E86\uFF01") }))));
  });
  var App_default2 = App;

  // src/redux/store.ts
  var import_storage = __toESM(require_storage());

  // node_modules/redux-persist/es/constants.js
  var KEY_PREFIX = "persist:";
  var FLUSH = "persist/FLUSH";
  var REHYDRATE = "persist/REHYDRATE";
  var PAUSE = "persist/PAUSE";
  var PERSIST = "persist/PERSIST";
  var PURGE = "persist/PURGE";
  var REGISTER = "persist/REGISTER";
  var DEFAULT_VERSION = -1;

  // node_modules/redux-persist/es/stateReconciler/autoMergeLevel1.js
  function _typeof4(obj) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof4 = function _typeof6(obj2) {
        return typeof obj2;
      };
    } else {
      _typeof4 = function _typeof6(obj2) {
        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      };
    }
    return _typeof4(obj);
  }
  function ownKeys5(object4, enumerableOnly) {
    var keys2 = Object.keys(object4);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object4);
      if (enumerableOnly)
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object4, sym).enumerable;
        });
      keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread4(target) {
    for (var i3 = 1; i3 < arguments.length; i3++) {
      var source = arguments[i3] != null ? arguments[i3] : {};
      if (i3 % 2) {
        ownKeys5(source, true).forEach(function(key2) {
          _defineProperty4(target, key2, source[key2]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys5(source).forEach(function(key2) {
          Object.defineProperty(target, key2, Object.getOwnPropertyDescriptor(source, key2));
        });
      }
    }
    return target;
  }
  function _defineProperty4(obj, key2, value) {
    if (key2 in obj) {
      Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key2] = value;
    }
    return obj;
  }
  function autoMergeLevel1(inboundState, originalState, reducedState, _ref) {
    var debug = _ref.debug;
    var newState = _objectSpread4({}, reducedState);
    if (inboundState && _typeof4(inboundState) === "object") {
      Object.keys(inboundState).forEach(function(key2) {
        if (key2 === "_persist")
          return;
        if (originalState[key2] !== reducedState[key2]) {
          if (debug)
            console.log("redux-persist/stateReconciler: sub state for key `%s` modified, skipping.", key2);
          return;
        }
        newState[key2] = inboundState[key2];
      });
    }
    if (debug && inboundState && _typeof4(inboundState) === "object")
      console.log("redux-persist/stateReconciler: rehydrated keys '".concat(Object.keys(inboundState).join(", "), "'"));
    return newState;
  }

  // node_modules/redux-persist/es/createPersistoid.js
  function createPersistoid(config) {
    var blacklist = config.blacklist || null;
    var whitelist = config.whitelist || null;
    var transforms = config.transforms || [];
    var throttle3 = config.throttle || 0;
    var storageKey = "".concat(config.keyPrefix !== void 0 ? config.keyPrefix : KEY_PREFIX).concat(config.key);
    var storage2 = config.storage;
    var serialize;
    if (config.serialize === false) {
      serialize = function serialize2(x2) {
        return x2;
      };
    } else if (typeof config.serialize === "function") {
      serialize = config.serialize;
    } else {
      serialize = defaultSerialize;
    }
    var writeFailHandler = config.writeFailHandler || null;
    var lastState = {};
    var stagedState = {};
    var keysToProcess = [];
    var timeIterator = null;
    var writePromise = null;
    var update = function update2(state) {
      Object.keys(state).forEach(function(key2) {
        if (!passWhitelistBlacklist(key2))
          return;
        if (lastState[key2] === state[key2])
          return;
        if (keysToProcess.indexOf(key2) !== -1)
          return;
        keysToProcess.push(key2);
      });
      Object.keys(lastState).forEach(function(key2) {
        if (state[key2] === void 0 && passWhitelistBlacklist(key2) && keysToProcess.indexOf(key2) === -1 && lastState[key2] !== void 0) {
          keysToProcess.push(key2);
        }
      });
      if (timeIterator === null) {
        timeIterator = setInterval(processNextKey, throttle3);
      }
      lastState = state;
    };
    function processNextKey() {
      if (keysToProcess.length === 0) {
        if (timeIterator)
          clearInterval(timeIterator);
        timeIterator = null;
        return;
      }
      var key2 = keysToProcess.shift();
      var endState = transforms.reduce(function(subState, transformer) {
        return transformer.in(subState, key2, lastState);
      }, lastState[key2]);
      if (endState !== void 0) {
        try {
          stagedState[key2] = serialize(endState);
        } catch (err) {
          console.error("redux-persist/createPersistoid: error serializing state", err);
        }
      } else {
        delete stagedState[key2];
      }
      if (keysToProcess.length === 0) {
        writeStagedState();
      }
    }
    function writeStagedState() {
      Object.keys(stagedState).forEach(function(key2) {
        if (lastState[key2] === void 0) {
          delete stagedState[key2];
        }
      });
      writePromise = storage2.setItem(storageKey, serialize(stagedState)).catch(onWriteFail);
    }
    function passWhitelistBlacklist(key2) {
      if (whitelist && whitelist.indexOf(key2) === -1 && key2 !== "_persist")
        return false;
      if (blacklist && blacklist.indexOf(key2) !== -1)
        return false;
      return true;
    }
    function onWriteFail(err) {
      if (writeFailHandler)
        writeFailHandler(err);
      if (err && true) {
        console.error("Error storing data", err);
      }
    }
    var flush = function flush2() {
      while (keysToProcess.length !== 0) {
        processNextKey();
      }
      return writePromise || Promise.resolve();
    };
    return {
      update,
      flush
    };
  }
  function defaultSerialize(data) {
    return JSON.stringify(data);
  }

  // node_modules/redux-persist/es/getStoredState.js
  function getStoredState(config) {
    var transforms = config.transforms || [];
    var storageKey = "".concat(config.keyPrefix !== void 0 ? config.keyPrefix : KEY_PREFIX).concat(config.key);
    var storage2 = config.storage;
    var debug = config.debug;
    var deserialize;
    if (config.deserialize === false) {
      deserialize = function deserialize2(x2) {
        return x2;
      };
    } else if (typeof config.deserialize === "function") {
      deserialize = config.deserialize;
    } else {
      deserialize = defaultDeserialize;
    }
    return storage2.getItem(storageKey).then(function(serialized) {
      if (!serialized)
        return void 0;
      else {
        try {
          var state = {};
          var rawState = deserialize(serialized);
          Object.keys(rawState).forEach(function(key2) {
            state[key2] = transforms.reduceRight(function(subState, transformer) {
              return transformer.out(subState, key2, rawState);
            }, deserialize(rawState[key2]));
          });
          return state;
        } catch (err) {
          if (debug)
            console.log("redux-persist/getStoredState: Error restoring data ".concat(serialized), err);
          throw err;
        }
      }
    });
  }
  function defaultDeserialize(serial) {
    return JSON.parse(serial);
  }

  // node_modules/redux-persist/es/purgeStoredState.js
  function purgeStoredState(config) {
    var storage2 = config.storage;
    var storageKey = "".concat(config.keyPrefix !== void 0 ? config.keyPrefix : KEY_PREFIX).concat(config.key);
    return storage2.removeItem(storageKey, warnIfRemoveError);
  }
  function warnIfRemoveError(err) {
    if (err && true) {
      console.error("redux-persist/purgeStoredState: Error purging data stored state", err);
    }
  }

  // node_modules/redux-persist/es/persistReducer.js
  function ownKeys6(object4, enumerableOnly) {
    var keys2 = Object.keys(object4);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object4);
      if (enumerableOnly)
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object4, sym).enumerable;
        });
      keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread5(target) {
    for (var i3 = 1; i3 < arguments.length; i3++) {
      var source = arguments[i3] != null ? arguments[i3] : {};
      if (i3 % 2) {
        ownKeys6(source, true).forEach(function(key2) {
          _defineProperty5(target, key2, source[key2]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys6(source).forEach(function(key2) {
          Object.defineProperty(target, key2, Object.getOwnPropertyDescriptor(source, key2));
        });
      }
    }
    return target;
  }
  function _defineProperty5(obj, key2, value) {
    if (key2 in obj) {
      Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key2] = value;
    }
    return obj;
  }
  function _objectWithoutProperties2(source, excluded) {
    if (source == null)
      return {};
    var target = _objectWithoutPropertiesLoose3(source, excluded);
    var key2, i3;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i3 = 0; i3 < sourceSymbolKeys.length; i3++) {
        key2 = sourceSymbolKeys[i3];
        if (excluded.indexOf(key2) >= 0)
          continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key2))
          continue;
        target[key2] = source[key2];
      }
    }
    return target;
  }
  function _objectWithoutPropertiesLoose3(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key2, i3;
    for (i3 = 0; i3 < sourceKeys.length; i3++) {
      key2 = sourceKeys[i3];
      if (excluded.indexOf(key2) >= 0)
        continue;
      target[key2] = source[key2];
    }
    return target;
  }
  var DEFAULT_TIMEOUT = 5e3;
  function persistReducer(config, baseReducer) {
    if (true) {
      if (!config)
        throw new Error("config is required for persistReducer");
      if (!config.key)
        throw new Error("key is required in persistor config");
      if (!config.storage)
        throw new Error("redux-persist: config.storage is required. Try using one of the provided storage engines `import storage from 'redux-persist/lib/storage'`");
    }
    var version2 = config.version !== void 0 ? config.version : DEFAULT_VERSION;
    var debug = config.debug || false;
    var stateReconciler = config.stateReconciler === void 0 ? autoMergeLevel1 : config.stateReconciler;
    var getStoredState2 = config.getStoredState || getStoredState;
    var timeout = config.timeout !== void 0 ? config.timeout : DEFAULT_TIMEOUT;
    var _persistoid = null;
    var _purge = false;
    var _paused = true;
    var conditionalUpdate = function conditionalUpdate2(state) {
      state._persist.rehydrated && _persistoid && !_paused && _persistoid.update(state);
      return state;
    };
    return function(state, action) {
      var _ref = state || {}, _persist = _ref._persist, rest = _objectWithoutProperties2(_ref, ["_persist"]);
      var restState = rest;
      if (action.type === PERSIST) {
        var _sealed = false;
        var _rehydrate = function _rehydrate2(payload, err) {
          if (_sealed)
            console.error('redux-persist: rehydrate for "'.concat(config.key, '" called after timeout.'), payload, err);
          if (!_sealed) {
            action.rehydrate(config.key, payload, err);
            _sealed = true;
          }
        };
        timeout && setTimeout(function() {
          !_sealed && _rehydrate(void 0, new Error('redux-persist: persist timed out for persist key "'.concat(config.key, '"')));
        }, timeout);
        _paused = false;
        if (!_persistoid)
          _persistoid = createPersistoid(config);
        if (_persist) {
          return _objectSpread5({}, baseReducer(restState, action), {
            _persist
          });
        }
        if (typeof action.rehydrate !== "function" || typeof action.register !== "function")
          throw new Error("redux-persist: either rehydrate or register is not a function on the PERSIST action. This can happen if the action is being replayed. This is an unexplored use case, please open an issue and we will figure out a resolution.");
        action.register(config.key);
        getStoredState2(config).then(function(restoredState) {
          var migrate = config.migrate || function(s2, v2) {
            return Promise.resolve(s2);
          };
          migrate(restoredState, version2).then(function(migratedState) {
            _rehydrate(migratedState);
          }, function(migrateErr) {
            if (migrateErr)
              console.error("redux-persist: migration error", migrateErr);
            _rehydrate(void 0, migrateErr);
          });
        }, function(err) {
          _rehydrate(void 0, err);
        });
        return _objectSpread5({}, baseReducer(restState, action), {
          _persist: {
            version: version2,
            rehydrated: false
          }
        });
      } else if (action.type === PURGE) {
        _purge = true;
        action.result(purgeStoredState(config));
        return _objectSpread5({}, baseReducer(restState, action), {
          _persist
        });
      } else if (action.type === FLUSH) {
        action.result(_persistoid && _persistoid.flush());
        return _objectSpread5({}, baseReducer(restState, action), {
          _persist
        });
      } else if (action.type === PAUSE) {
        _paused = true;
      } else if (action.type === REHYDRATE) {
        if (_purge)
          return _objectSpread5({}, restState, {
            _persist: _objectSpread5({}, _persist, {
              rehydrated: true
            })
            // @NOTE if key does not match, will continue to default else below
          });
        if (action.key === config.key) {
          var reducedState = baseReducer(restState, action);
          var inboundState = action.payload;
          var reconciledRest = stateReconciler !== false && inboundState !== void 0 ? stateReconciler(inboundState, state, reducedState, config) : reducedState;
          var _newState = _objectSpread5({}, reconciledRest, {
            _persist: _objectSpread5({}, _persist, {
              rehydrated: true
            })
          });
          return conditionalUpdate(_newState);
        }
      }
      if (!_persist)
        return baseReducer(state, action);
      var newState = baseReducer(restState, action);
      if (newState === restState)
        return state;
      return conditionalUpdate(_objectSpread5({}, newState, {
        _persist
      }));
    };
  }

  // node_modules/redux-persist/es/persistStore.js
  function _toConsumableArray2(arr) {
    return _arrayWithoutHoles2(arr) || _iterableToArray2(arr) || _nonIterableSpread2();
  }
  function _nonIterableSpread2() {
    throw new TypeError("Invalid attempt to spread non-iterable instance");
  }
  function _iterableToArray2(iter) {
    if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]")
      return Array.from(iter);
  }
  function _arrayWithoutHoles2(arr) {
    if (Array.isArray(arr)) {
      for (var i3 = 0, arr2 = new Array(arr.length); i3 < arr.length; i3++) {
        arr2[i3] = arr[i3];
      }
      return arr2;
    }
  }
  function ownKeys7(object4, enumerableOnly) {
    var keys2 = Object.keys(object4);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object4);
      if (enumerableOnly)
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object4, sym).enumerable;
        });
      keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread6(target) {
    for (var i3 = 1; i3 < arguments.length; i3++) {
      var source = arguments[i3] != null ? arguments[i3] : {};
      if (i3 % 2) {
        ownKeys7(source, true).forEach(function(key2) {
          _defineProperty6(target, key2, source[key2]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys7(source).forEach(function(key2) {
          Object.defineProperty(target, key2, Object.getOwnPropertyDescriptor(source, key2));
        });
      }
    }
    return target;
  }
  function _defineProperty6(obj, key2, value) {
    if (key2 in obj) {
      Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key2] = value;
    }
    return obj;
  }
  var initialState9 = {
    registry: [],
    bootstrapped: false
  };
  var persistorReducer = function persistorReducer2() {
    var state = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : initialState9;
    var action = arguments.length > 1 ? arguments[1] : void 0;
    switch (action.type) {
      case REGISTER:
        return _objectSpread6({}, state, {
          registry: [].concat(_toConsumableArray2(state.registry), [action.key])
        });
      case REHYDRATE:
        var firstIndex = state.registry.indexOf(action.key);
        var registry = _toConsumableArray2(state.registry);
        registry.splice(firstIndex, 1);
        return _objectSpread6({}, state, {
          registry,
          bootstrapped: registry.length === 0
        });
      default:
        return state;
    }
  };
  function persistStore(store3, options, cb) {
    if (true) {
      var optionsToTest = options || {};
      var bannedKeys = ["blacklist", "whitelist", "transforms", "storage", "keyPrefix", "migrate"];
      bannedKeys.forEach(function(k2) {
        if (!!optionsToTest[k2])
          console.error('redux-persist: invalid option passed to persistStore: "'.concat(k2, '". You may be incorrectly passing persistConfig into persistStore, whereas it should be passed into persistReducer.'));
      });
    }
    var boostrappedCb = cb || false;
    var _pStore = createStore(persistorReducer, initialState9, options && options.enhancer ? options.enhancer : void 0);
    var register3 = function register4(key2) {
      _pStore.dispatch({
        type: REGISTER,
        key: key2
      });
    };
    var rehydrate = function rehydrate2(key2, payload, err) {
      var rehydrateAction = {
        type: REHYDRATE,
        payload,
        err,
        key: key2
        // dispatch to `store` to rehydrate and `persistor` to track result
      };
      store3.dispatch(rehydrateAction);
      _pStore.dispatch(rehydrateAction);
      if (boostrappedCb && persistor2.getState().bootstrapped) {
        boostrappedCb();
        boostrappedCb = false;
      }
    };
    var persistor2 = _objectSpread6({}, _pStore, {
      purge: function purge() {
        var results = [];
        store3.dispatch({
          type: PURGE,
          result: function result2(purgeResult) {
            results.push(purgeResult);
          }
        });
        return Promise.all(results);
      },
      flush: function flush() {
        var results = [];
        store3.dispatch({
          type: FLUSH,
          result: function result2(flushResult) {
            results.push(flushResult);
          }
        });
        return Promise.all(results);
      },
      pause: function pause() {
        store3.dispatch({
          type: PAUSE
        });
      },
      persist: function persist() {
        store3.dispatch({
          type: PERSIST,
          register: register3,
          rehydrate
        });
      }
    });
    if (!(options && options.manualPersist)) {
      persistor2.persist();
    }
    return persistor2;
  }

  // node_modules/@babel/runtime/helpers/esm/objectSpread.js
  function _objectSpread7(target) {
    for (var i3 = 1; i3 < arguments.length; i3++) {
      var source = arguments[i3] != null ? Object(arguments[i3]) : {};
      var ownKeys8 = Object.keys(source);
      if (typeof Object.getOwnPropertySymbols === "function") {
        ownKeys8.push.apply(ownKeys8, Object.getOwnPropertySymbols(source).filter(function(sym) {
          return Object.getOwnPropertyDescriptor(source, sym).enumerable;
        }));
      }
      ownKeys8.forEach(function(key2) {
        _defineProperty(target, key2, source[key2]);
      });
    }
    return target;
  }

  // node_modules/i18next/dist/esm/i18next.js
  var consoleLogger = {
    type: "logger",
    log: function log(args) {
      this.output("log", args);
    },
    warn: function warn2(args) {
      this.output("warn", args);
    },
    error: function error(args) {
      this.output("error", args);
    },
    output: function output(type4, args) {
      if (console && console[type4])
        console[type4].apply(console, args);
    }
  };
  var Logger = function() {
    function Logger2(concreteLogger) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      _classCallCheck(this, Logger2);
      this.init(concreteLogger, options);
    }
    _createClass(Logger2, [{
      key: "init",
      value: function init2(concreteLogger) {
        var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        this.prefix = options.prefix || "i18next:";
        this.logger = concreteLogger || consoleLogger;
        this.options = options;
        this.debug = options.debug;
      }
    }, {
      key: "setDebug",
      value: function setDebug(bool) {
        this.debug = bool;
      }
    }, {
      key: "log",
      value: function log2() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        return this.forward(args, "log", "", true);
      }
    }, {
      key: "warn",
      value: function warn3() {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }
        return this.forward(args, "warn", "", true);
      }
    }, {
      key: "error",
      value: function error2() {
        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          args[_key3] = arguments[_key3];
        }
        return this.forward(args, "error", "");
      }
    }, {
      key: "deprecate",
      value: function deprecate() {
        for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
          args[_key4] = arguments[_key4];
        }
        return this.forward(args, "warn", "WARNING DEPRECATED: ", true);
      }
    }, {
      key: "forward",
      value: function forward(args, lvl, prefix2, debugOnly) {
        if (debugOnly && !this.debug)
          return null;
        if (typeof args[0] === "string")
          args[0] = "".concat(prefix2).concat(this.prefix, " ").concat(args[0]);
        return this.logger[lvl](args);
      }
    }, {
      key: "create",
      value: function create(moduleName) {
        return new Logger2(this.logger, _objectSpread7({}, {
          prefix: "".concat(this.prefix, ":").concat(moduleName, ":")
        }, this.options));
      }
    }]);
    return Logger2;
  }();
  var baseLogger = new Logger();
  var EventEmitter = function() {
    function EventEmitter2() {
      _classCallCheck(this, EventEmitter2);
      this.observers = {};
    }
    _createClass(EventEmitter2, [{
      key: "on",
      value: function on2(events, listener2) {
        var _this = this;
        events.split(" ").forEach(function(event) {
          _this.observers[event] = _this.observers[event] || [];
          _this.observers[event].push(listener2);
        });
        return this;
      }
    }, {
      key: "off",
      value: function off(event, listener2) {
        if (!this.observers[event])
          return;
        if (!listener2) {
          delete this.observers[event];
          return;
        }
        this.observers[event] = this.observers[event].filter(function(l2) {
          return l2 !== listener2;
        });
      }
    }, {
      key: "emit",
      value: function emit(event) {
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        if (this.observers[event]) {
          var cloned = [].concat(this.observers[event]);
          cloned.forEach(function(observer) {
            observer.apply(void 0, args);
          });
        }
        if (this.observers["*"]) {
          var _cloned = [].concat(this.observers["*"]);
          _cloned.forEach(function(observer) {
            observer.apply(observer, [event].concat(args));
          });
        }
      }
    }]);
    return EventEmitter2;
  }();
  function defer2() {
    var res;
    var rej;
    var promise2 = new Promise(function(resolve, reject) {
      res = resolve;
      rej = reject;
    });
    promise2.resolve = res;
    promise2.reject = rej;
    return promise2;
  }
  function makeString(object4) {
    if (object4 == null)
      return "";
    return "" + object4;
  }
  function copy2(a2, s2, t4) {
    a2.forEach(function(m2) {
      if (s2[m2])
        t4[m2] = s2[m2];
    });
  }
  function getLastOfPath(object4, path2, Empty5) {
    function cleanKey(key3) {
      return key3 && key3.indexOf("###") > -1 ? key3.replace(/###/g, ".") : key3;
    }
    function canNotTraverseDeeper() {
      return !object4 || typeof object4 === "string";
    }
    var stack = typeof path2 !== "string" ? [].concat(path2) : path2.split(".");
    while (stack.length > 1) {
      if (canNotTraverseDeeper())
        return {};
      var key2 = cleanKey(stack.shift());
      if (!object4[key2] && Empty5)
        object4[key2] = new Empty5();
      object4 = object4[key2];
    }
    if (canNotTraverseDeeper())
      return {};
    return {
      obj: object4,
      k: cleanKey(stack.shift())
    };
  }
  function setPath(object4, path2, newValue) {
    var _getLastOfPath = getLastOfPath(object4, path2, Object), obj = _getLastOfPath.obj, k2 = _getLastOfPath.k;
    obj[k2] = newValue;
  }
  function pushPath(object4, path2, newValue, concat) {
    var _getLastOfPath2 = getLastOfPath(object4, path2, Object), obj = _getLastOfPath2.obj, k2 = _getLastOfPath2.k;
    obj[k2] = obj[k2] || [];
    if (concat)
      obj[k2] = obj[k2].concat(newValue);
    if (!concat)
      obj[k2].push(newValue);
  }
  function getPath(object4, path2) {
    var _getLastOfPath3 = getLastOfPath(object4, path2), obj = _getLastOfPath3.obj, k2 = _getLastOfPath3.k;
    if (!obj)
      return void 0;
    return obj[k2];
  }
  function getPathWithDefaults(data, defaultData, key2) {
    var value = getPath(data, key2);
    if (value !== void 0) {
      return value;
    }
    return getPath(defaultData, key2);
  }
  function deepExtend(target, source, overwrite) {
    for (var prop in source) {
      if (prop !== "__proto__" && prop !== "constructor") {
        if (prop in target) {
          if (typeof target[prop] === "string" || target[prop] instanceof String || typeof source[prop] === "string" || source[prop] instanceof String) {
            if (overwrite)
              target[prop] = source[prop];
          } else {
            deepExtend(target[prop], source[prop], overwrite);
          }
        } else {
          target[prop] = source[prop];
        }
      }
    }
    return target;
  }
  function regexEscape(str) {
    return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
  }
  var _entityMap = {
    "&": "&amp;",
    "<": "&lt;",
    ">": "&gt;",
    '"': "&quot;",
    "'": "&#39;",
    "/": "&#x2F;"
  };
  function escape(data) {
    if (typeof data === "string") {
      return data.replace(/[&<>"'\/]/g, function(s2) {
        return _entityMap[s2];
      });
    }
    return data;
  }
  var isIE10 = typeof window !== "undefined" && window.navigator && window.navigator.userAgent && window.navigator.userAgent.indexOf("MSIE") > -1;
  var ResourceStore = function(_EventEmitter) {
    _inherits(ResourceStore2, _EventEmitter);
    function ResourceStore2(data) {
      var _this;
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
        ns: ["translation"],
        defaultNS: "translation"
      };
      _classCallCheck(this, ResourceStore2);
      _this = _possibleConstructorReturn(this, _getPrototypeOf(ResourceStore2).call(this));
      if (isIE10) {
        EventEmitter.call(_assertThisInitialized(_this));
      }
      _this.data = data || {};
      _this.options = options;
      if (_this.options.keySeparator === void 0) {
        _this.options.keySeparator = ".";
      }
      return _this;
    }
    _createClass(ResourceStore2, [{
      key: "addNamespaces",
      value: function addNamespaces(ns) {
        if (this.options.ns.indexOf(ns) < 0) {
          this.options.ns.push(ns);
        }
      }
    }, {
      key: "removeNamespaces",
      value: function removeNamespaces(ns) {
        var index2 = this.options.ns.indexOf(ns);
        if (index2 > -1) {
          this.options.ns.splice(index2, 1);
        }
      }
    }, {
      key: "getResource",
      value: function getResource(lng, ns, key2) {
        var options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
        var keySeparator = options.keySeparator !== void 0 ? options.keySeparator : this.options.keySeparator;
        var path2 = [lng, ns];
        if (key2 && typeof key2 !== "string")
          path2 = path2.concat(key2);
        if (key2 && typeof key2 === "string")
          path2 = path2.concat(keySeparator ? key2.split(keySeparator) : key2);
        if (lng.indexOf(".") > -1) {
          path2 = lng.split(".");
        }
        return getPath(this.data, path2);
      }
    }, {
      key: "addResource",
      value: function addResource(lng, ns, key2, value) {
        var options = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : {
          silent: false
        };
        var keySeparator = this.options.keySeparator;
        if (keySeparator === void 0)
          keySeparator = ".";
        var path2 = [lng, ns];
        if (key2)
          path2 = path2.concat(keySeparator ? key2.split(keySeparator) : key2);
        if (lng.indexOf(".") > -1) {
          path2 = lng.split(".");
          value = ns;
          ns = path2[1];
        }
        this.addNamespaces(ns);
        setPath(this.data, path2, value);
        if (!options.silent)
          this.emit("added", lng, ns, key2, value);
      }
    }, {
      key: "addResources",
      value: function addResources(lng, ns, resources2) {
        var options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {
          silent: false
        };
        for (var m2 in resources2) {
          if (typeof resources2[m2] === "string" || Object.prototype.toString.apply(resources2[m2]) === "[object Array]")
            this.addResource(lng, ns, m2, resources2[m2], {
              silent: true
            });
        }
        if (!options.silent)
          this.emit("added", lng, ns, resources2);
      }
    }, {
      key: "addResourceBundle",
      value: function addResourceBundle(lng, ns, resources2, deep, overwrite) {
        var options = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : {
          silent: false
        };
        var path2 = [lng, ns];
        if (lng.indexOf(".") > -1) {
          path2 = lng.split(".");
          deep = resources2;
          resources2 = ns;
          ns = path2[1];
        }
        this.addNamespaces(ns);
        var pack = getPath(this.data, path2) || {};
        if (deep) {
          deepExtend(pack, resources2, overwrite);
        } else {
          pack = _objectSpread7({}, pack, resources2);
        }
        setPath(this.data, path2, pack);
        if (!options.silent)
          this.emit("added", lng, ns, resources2);
      }
    }, {
      key: "removeResourceBundle",
      value: function removeResourceBundle(lng, ns) {
        if (this.hasResourceBundle(lng, ns)) {
          delete this.data[lng][ns];
        }
        this.removeNamespaces(ns);
        this.emit("removed", lng, ns);
      }
    }, {
      key: "hasResourceBundle",
      value: function hasResourceBundle(lng, ns) {
        return this.getResource(lng, ns) !== void 0;
      }
    }, {
      key: "getResourceBundle",
      value: function getResourceBundle(lng, ns) {
        if (!ns)
          ns = this.options.defaultNS;
        if (this.options.compatibilityAPI === "v1")
          return _objectSpread7({}, {}, this.getResource(lng, ns));
        return this.getResource(lng, ns);
      }
    }, {
      key: "getDataByLanguage",
      value: function getDataByLanguage(lng) {
        return this.data[lng];
      }
    }, {
      key: "toJSON",
      value: function toJSON2() {
        return this.data;
      }
    }]);
    return ResourceStore2;
  }(EventEmitter);
  var postProcessor = {
    processors: {},
    addPostProcessor: function addPostProcessor(module2) {
      this.processors[module2.name] = module2;
    },
    handle: function handle(processors, value, key2, options, translator) {
      var _this = this;
      processors.forEach(function(processor) {
        if (_this.processors[processor])
          value = _this.processors[processor].process(value, key2, options, translator);
      });
      return value;
    }
  };
  var checkedLoadedFor = {};
  var Translator = function(_EventEmitter) {
    _inherits(Translator2, _EventEmitter);
    function Translator2(services) {
      var _this;
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      _classCallCheck(this, Translator2);
      _this = _possibleConstructorReturn(this, _getPrototypeOf(Translator2).call(this));
      if (isIE10) {
        EventEmitter.call(_assertThisInitialized(_this));
      }
      copy2(["resourceStore", "languageUtils", "pluralResolver", "interpolator", "backendConnector", "i18nFormat", "utils"], services, _assertThisInitialized(_this));
      _this.options = options;
      if (_this.options.keySeparator === void 0) {
        _this.options.keySeparator = ".";
      }
      _this.logger = baseLogger.create("translator");
      return _this;
    }
    _createClass(Translator2, [{
      key: "changeLanguage",
      value: function changeLanguage2(lng) {
        if (lng)
          this.language = lng;
      }
    }, {
      key: "exists",
      value: function exists(key2) {
        var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
          interpolation: {}
        };
        var resolved = this.resolve(key2, options);
        return resolved && resolved.res !== void 0;
      }
    }, {
      key: "extractFromKey",
      value: function extractFromKey(key2, options) {
        var nsSeparator = options.nsSeparator !== void 0 ? options.nsSeparator : this.options.nsSeparator;
        if (nsSeparator === void 0)
          nsSeparator = ":";
        var keySeparator = options.keySeparator !== void 0 ? options.keySeparator : this.options.keySeparator;
        var namespaces = options.ns || this.options.defaultNS;
        if (nsSeparator && key2.indexOf(nsSeparator) > -1) {
          var m2 = key2.match(this.interpolator.nestingRegexp);
          if (m2 && m2.length > 0) {
            return {
              key: key2,
              namespaces
            };
          }
          var parts = key2.split(nsSeparator);
          if (nsSeparator !== keySeparator || nsSeparator === keySeparator && this.options.ns.indexOf(parts[0]) > -1)
            namespaces = parts.shift();
          key2 = parts.join(keySeparator);
        }
        if (typeof namespaces === "string")
          namespaces = [namespaces];
        return {
          key: key2,
          namespaces
        };
      }
    }, {
      key: "translate",
      value: function translate(keys2, options, lastKey) {
        var _this2 = this;
        if (_typeof(options) !== "object" && this.options.overloadTranslationOptionHandler) {
          options = this.options.overloadTranslationOptionHandler(arguments);
        }
        if (!options)
          options = {};
        if (keys2 === void 0 || keys2 === null)
          return "";
        if (!Array.isArray(keys2))
          keys2 = [String(keys2)];
        var keySeparator = options.keySeparator !== void 0 ? options.keySeparator : this.options.keySeparator;
        var _this$extractFromKey = this.extractFromKey(keys2[keys2.length - 1], options), key2 = _this$extractFromKey.key, namespaces = _this$extractFromKey.namespaces;
        var namespace = namespaces[namespaces.length - 1];
        var lng = options.lng || this.language;
        var appendNamespaceToCIMode = options.appendNamespaceToCIMode || this.options.appendNamespaceToCIMode;
        if (lng && lng.toLowerCase() === "cimode") {
          if (appendNamespaceToCIMode) {
            var nsSeparator = options.nsSeparator || this.options.nsSeparator;
            return namespace + nsSeparator + key2;
          }
          return key2;
        }
        var resolved = this.resolve(keys2, options);
        var res = resolved && resolved.res;
        var resUsedKey = resolved && resolved.usedKey || key2;
        var resExactUsedKey = resolved && resolved.exactUsedKey || key2;
        var resType = Object.prototype.toString.apply(res);
        var noObject = ["[object Number]", "[object Function]", "[object RegExp]"];
        var joinArrays = options.joinArrays !== void 0 ? options.joinArrays : this.options.joinArrays;
        var handleAsObjectInI18nFormat = !this.i18nFormat || this.i18nFormat.handleAsObject;
        var handleAsObject = typeof res !== "string" && typeof res !== "boolean" && typeof res !== "number";
        if (handleAsObjectInI18nFormat && res && handleAsObject && noObject.indexOf(resType) < 0 && !(typeof joinArrays === "string" && resType === "[object Array]")) {
          if (!options.returnObjects && !this.options.returnObjects) {
            this.logger.warn("accessing an object - but returnObjects options is not enabled!");
            return this.options.returnedObjectHandler ? this.options.returnedObjectHandler(resUsedKey, res, options) : "key '".concat(key2, " (").concat(this.language, ")' returned an object instead of string.");
          }
          if (keySeparator) {
            var resTypeIsArray = resType === "[object Array]";
            var copy$$1 = resTypeIsArray ? [] : {};
            var newKeyToUse = resTypeIsArray ? resExactUsedKey : resUsedKey;
            for (var m2 in res) {
              if (Object.prototype.hasOwnProperty.call(res, m2)) {
                var deepKey = "".concat(newKeyToUse).concat(keySeparator).concat(m2);
                copy$$1[m2] = this.translate(deepKey, _objectSpread7({}, options, {
                  joinArrays: false,
                  ns: namespaces
                }));
                if (copy$$1[m2] === deepKey)
                  copy$$1[m2] = res[m2];
              }
            }
            res = copy$$1;
          }
        } else if (handleAsObjectInI18nFormat && typeof joinArrays === "string" && resType === "[object Array]") {
          res = res.join(joinArrays);
          if (res)
            res = this.extendTranslation(res, keys2, options, lastKey);
        } else {
          var usedDefault = false;
          var usedKey = false;
          if (!this.isValidLookup(res) && options.defaultValue !== void 0) {
            usedDefault = true;
            if (options.count !== void 0) {
              var suffix = this.pluralResolver.getSuffix(lng, options.count);
              res = options["defaultValue".concat(suffix)];
            }
            if (!res)
              res = options.defaultValue;
          }
          if (!this.isValidLookup(res)) {
            usedKey = true;
            res = key2;
          }
          var updateMissing = options.defaultValue && options.defaultValue !== res && this.options.updateMissing;
          if (usedKey || usedDefault || updateMissing) {
            this.logger.log(updateMissing ? "updateKey" : "missingKey", lng, namespace, key2, updateMissing ? options.defaultValue : res);
            if (keySeparator) {
              var fk = this.resolve(key2, _objectSpread7({}, options, {
                keySeparator: false
              }));
              if (fk && fk.res)
                this.logger.warn("Seems the loaded translations were in flat JSON format instead of nested. Either set keySeparator: false on init or make sure your translations are published in nested format.");
            }
            var lngs = [];
            var fallbackLngs = this.languageUtils.getFallbackCodes(this.options.fallbackLng, options.lng || this.language);
            if (this.options.saveMissingTo === "fallback" && fallbackLngs && fallbackLngs[0]) {
              for (var i3 = 0; i3 < fallbackLngs.length; i3++) {
                lngs.push(fallbackLngs[i3]);
              }
            } else if (this.options.saveMissingTo === "all") {
              lngs = this.languageUtils.toResolveHierarchy(options.lng || this.language);
            } else {
              lngs.push(options.lng || this.language);
            }
            var send = function send2(l2, k2) {
              if (_this2.options.missingKeyHandler) {
                _this2.options.missingKeyHandler(l2, namespace, k2, updateMissing ? options.defaultValue : res, updateMissing, options);
              } else if (_this2.backendConnector && _this2.backendConnector.saveMissing) {
                _this2.backendConnector.saveMissing(l2, namespace, k2, updateMissing ? options.defaultValue : res, updateMissing, options);
              }
              _this2.emit("missingKey", l2, namespace, k2, res);
            };
            if (this.options.saveMissing) {
              var needsPluralHandling = options.count !== void 0 && typeof options.count !== "string";
              if (this.options.saveMissingPlurals && needsPluralHandling) {
                lngs.forEach(function(l2) {
                  var plurals = _this2.pluralResolver.getPluralFormsOfKey(l2, key2);
                  plurals.forEach(function(p2) {
                    return send([l2], p2);
                  });
                });
              } else {
                send(lngs, key2);
              }
            }
          }
          res = this.extendTranslation(res, keys2, options, resolved, lastKey);
          if (usedKey && res === key2 && this.options.appendNamespaceToMissingKey)
            res = "".concat(namespace, ":").concat(key2);
          if (usedKey && this.options.parseMissingKeyHandler)
            res = this.options.parseMissingKeyHandler(res);
        }
        return res;
      }
    }, {
      key: "extendTranslation",
      value: function extendTranslation(res, key2, options, resolved, lastKey) {
        var _this3 = this;
        if (this.i18nFormat && this.i18nFormat.parse) {
          res = this.i18nFormat.parse(res, options, resolved.usedLng, resolved.usedNS, resolved.usedKey, {
            resolved
          });
        } else if (!options.skipInterpolation) {
          if (options.interpolation)
            this.interpolator.init(_objectSpread7({}, options, {
              interpolation: _objectSpread7({}, this.options.interpolation, options.interpolation)
            }));
          var skipOnVariables = options.interpolation && options.interpolation.skipOnVariables || this.options.interpolation.skipOnVariables;
          var nestBef;
          if (skipOnVariables) {
            var nb = res.match(this.interpolator.nestingRegexp);
            nestBef = nb && nb.length;
          }
          var data = options.replace && typeof options.replace !== "string" ? options.replace : options;
          if (this.options.interpolation.defaultVariables)
            data = _objectSpread7({}, this.options.interpolation.defaultVariables, data);
          res = this.interpolator.interpolate(res, data, options.lng || this.language, options);
          if (skipOnVariables) {
            var na = res.match(this.interpolator.nestingRegexp);
            var nestAft = na && na.length;
            if (nestBef < nestAft)
              options.nest = false;
          }
          if (options.nest !== false)
            res = this.interpolator.nest(res, function() {
              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
              }
              if (lastKey && lastKey[0] === args[0] && !options.context) {
                _this3.logger.warn("It seems you are nesting recursively key: ".concat(args[0], " in key: ").concat(key2[0]));
                return null;
              }
              return _this3.translate.apply(_this3, args.concat([key2]));
            }, options);
          if (options.interpolation)
            this.interpolator.reset();
        }
        var postProcess = options.postProcess || this.options.postProcess;
        var postProcessorNames = typeof postProcess === "string" ? [postProcess] : postProcess;
        if (res !== void 0 && res !== null && postProcessorNames && postProcessorNames.length && options.applyPostProcessor !== false) {
          res = postProcessor.handle(postProcessorNames, res, key2, this.options && this.options.postProcessPassResolved ? _objectSpread7({
            i18nResolved: resolved
          }, options) : options, this);
        }
        return res;
      }
    }, {
      key: "resolve",
      value: function resolve(keys2) {
        var _this4 = this;
        var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        var found;
        var usedKey;
        var exactUsedKey;
        var usedLng;
        var usedNS;
        if (typeof keys2 === "string")
          keys2 = [keys2];
        keys2.forEach(function(k2) {
          if (_this4.isValidLookup(found))
            return;
          var extracted = _this4.extractFromKey(k2, options);
          var key2 = extracted.key;
          usedKey = key2;
          var namespaces = extracted.namespaces;
          if (_this4.options.fallbackNS)
            namespaces = namespaces.concat(_this4.options.fallbackNS);
          var needsPluralHandling = options.count !== void 0 && typeof options.count !== "string";
          var needsContextHandling = options.context !== void 0 && typeof options.context === "string" && options.context !== "";
          var codes = options.lngs ? options.lngs : _this4.languageUtils.toResolveHierarchy(options.lng || _this4.language, options.fallbackLng);
          namespaces.forEach(function(ns) {
            if (_this4.isValidLookup(found))
              return;
            usedNS = ns;
            if (!checkedLoadedFor["".concat(codes[0], "-").concat(ns)] && _this4.utils && _this4.utils.hasLoadedNamespace && !_this4.utils.hasLoadedNamespace(usedNS)) {
              checkedLoadedFor["".concat(codes[0], "-").concat(ns)] = true;
              _this4.logger.warn('key "'.concat(usedKey, '" for languages "').concat(codes.join(", "), `" won't get resolved as namespace "`).concat(usedNS, '" was not yet loaded'), "This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!");
            }
            codes.forEach(function(code) {
              if (_this4.isValidLookup(found))
                return;
              usedLng = code;
              var finalKey = key2;
              var finalKeys = [finalKey];
              if (_this4.i18nFormat && _this4.i18nFormat.addLookupKeys) {
                _this4.i18nFormat.addLookupKeys(finalKeys, key2, code, ns, options);
              } else {
                var pluralSuffix;
                if (needsPluralHandling)
                  pluralSuffix = _this4.pluralResolver.getSuffix(code, options.count);
                if (needsPluralHandling && needsContextHandling)
                  finalKeys.push(finalKey + pluralSuffix);
                if (needsContextHandling)
                  finalKeys.push(finalKey += "".concat(_this4.options.contextSeparator).concat(options.context));
                if (needsPluralHandling)
                  finalKeys.push(finalKey += pluralSuffix);
              }
              var possibleKey;
              while (possibleKey = finalKeys.pop()) {
                if (!_this4.isValidLookup(found)) {
                  exactUsedKey = possibleKey;
                  found = _this4.getResource(code, ns, possibleKey, options);
                }
              }
            });
          });
        });
        return {
          res: found,
          usedKey,
          exactUsedKey,
          usedLng,
          usedNS
        };
      }
    }, {
      key: "isValidLookup",
      value: function isValidLookup(res) {
        return res !== void 0 && !(!this.options.returnNull && res === null) && !(!this.options.returnEmptyString && res === "");
      }
    }, {
      key: "getResource",
      value: function getResource(code, ns, key2) {
        var options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
        if (this.i18nFormat && this.i18nFormat.getResource)
          return this.i18nFormat.getResource(code, ns, key2, options);
        return this.resourceStore.getResource(code, ns, key2, options);
      }
    }]);
    return Translator2;
  }(EventEmitter);
  function capitalize(string3) {
    return string3.charAt(0).toUpperCase() + string3.slice(1);
  }
  var LanguageUtil = function() {
    function LanguageUtil2(options) {
      _classCallCheck(this, LanguageUtil2);
      this.options = options;
      this.whitelist = this.options.supportedLngs || false;
      this.supportedLngs = this.options.supportedLngs || false;
      this.logger = baseLogger.create("languageUtils");
    }
    _createClass(LanguageUtil2, [{
      key: "getScriptPartFromCode",
      value: function getScriptPartFromCode(code) {
        if (!code || code.indexOf("-") < 0)
          return null;
        var p2 = code.split("-");
        if (p2.length === 2)
          return null;
        p2.pop();
        if (p2[p2.length - 1].toLowerCase() === "x")
          return null;
        return this.formatLanguageCode(p2.join("-"));
      }
    }, {
      key: "getLanguagePartFromCode",
      value: function getLanguagePartFromCode(code) {
        if (!code || code.indexOf("-") < 0)
          return code;
        var p2 = code.split("-");
        return this.formatLanguageCode(p2[0]);
      }
    }, {
      key: "formatLanguageCode",
      value: function formatLanguageCode(code) {
        if (typeof code === "string" && code.indexOf("-") > -1) {
          var specialCases = ["hans", "hant", "latn", "cyrl", "cans", "mong", "arab"];
          var p2 = code.split("-");
          if (this.options.lowerCaseLng) {
            p2 = p2.map(function(part) {
              return part.toLowerCase();
            });
          } else if (p2.length === 2) {
            p2[0] = p2[0].toLowerCase();
            p2[1] = p2[1].toUpperCase();
            if (specialCases.indexOf(p2[1].toLowerCase()) > -1)
              p2[1] = capitalize(p2[1].toLowerCase());
          } else if (p2.length === 3) {
            p2[0] = p2[0].toLowerCase();
            if (p2[1].length === 2)
              p2[1] = p2[1].toUpperCase();
            if (p2[0] !== "sgn" && p2[2].length === 2)
              p2[2] = p2[2].toUpperCase();
            if (specialCases.indexOf(p2[1].toLowerCase()) > -1)
              p2[1] = capitalize(p2[1].toLowerCase());
            if (specialCases.indexOf(p2[2].toLowerCase()) > -1)
              p2[2] = capitalize(p2[2].toLowerCase());
          }
          return p2.join("-");
        }
        return this.options.cleanCode || this.options.lowerCaseLng ? code.toLowerCase() : code;
      }
    }, {
      key: "isWhitelisted",
      value: function isWhitelisted(code) {
        this.logger.deprecate("languageUtils.isWhitelisted", `function "isWhitelisted" will be renamed to "isSupportedCode" in the next major - please make sure to rename it's usage asap.`);
        return this.isSupportedCode(code);
      }
    }, {
      key: "isSupportedCode",
      value: function isSupportedCode(code) {
        if (this.options.load === "languageOnly" || this.options.nonExplicitSupportedLngs) {
          code = this.getLanguagePartFromCode(code);
        }
        return !this.supportedLngs || !this.supportedLngs.length || this.supportedLngs.indexOf(code) > -1;
      }
    }, {
      key: "getBestMatchFromCodes",
      value: function getBestMatchFromCodes(codes) {
        var _this = this;
        if (!codes)
          return null;
        var found;
        codes.forEach(function(code) {
          if (found)
            return;
          var cleanedLng = _this.formatLanguageCode(code);
          if (!_this.options.supportedLngs || _this.isSupportedCode(cleanedLng))
            found = cleanedLng;
        });
        if (!found && this.options.supportedLngs) {
          codes.forEach(function(code) {
            if (found)
              return;
            var lngOnly = _this.getLanguagePartFromCode(code);
            if (_this.isSupportedCode(lngOnly))
              return found = lngOnly;
            found = _this.options.supportedLngs.find(function(supportedLng) {
              if (supportedLng.indexOf(lngOnly) === 0)
                return supportedLng;
            });
          });
        }
        if (!found)
          found = this.getFallbackCodes(this.options.fallbackLng)[0];
        return found;
      }
    }, {
      key: "getFallbackCodes",
      value: function getFallbackCodes(fallbacks, code) {
        if (!fallbacks)
          return [];
        if (typeof fallbacks === "function")
          fallbacks = fallbacks(code);
        if (typeof fallbacks === "string")
          fallbacks = [fallbacks];
        if (Object.prototype.toString.apply(fallbacks) === "[object Array]")
          return fallbacks;
        if (!code)
          return fallbacks["default"] || [];
        var found = fallbacks[code];
        if (!found)
          found = fallbacks[this.getScriptPartFromCode(code)];
        if (!found)
          found = fallbacks[this.formatLanguageCode(code)];
        if (!found)
          found = fallbacks[this.getLanguagePartFromCode(code)];
        if (!found)
          found = fallbacks["default"];
        return found || [];
      }
    }, {
      key: "toResolveHierarchy",
      value: function toResolveHierarchy(code, fallbackCode) {
        var _this2 = this;
        var fallbackCodes = this.getFallbackCodes(fallbackCode || this.options.fallbackLng || [], code);
        var codes = [];
        var addCode = function addCode2(c2) {
          if (!c2)
            return;
          if (_this2.isSupportedCode(c2)) {
            codes.push(c2);
          } else {
            _this2.logger.warn("rejecting language code not found in supportedLngs: ".concat(c2));
          }
        };
        if (typeof code === "string" && code.indexOf("-") > -1) {
          if (this.options.load !== "languageOnly")
            addCode(this.formatLanguageCode(code));
          if (this.options.load !== "languageOnly" && this.options.load !== "currentOnly")
            addCode(this.getScriptPartFromCode(code));
          if (this.options.load !== "currentOnly")
            addCode(this.getLanguagePartFromCode(code));
        } else if (typeof code === "string") {
          addCode(this.formatLanguageCode(code));
        }
        fallbackCodes.forEach(function(fc) {
          if (codes.indexOf(fc) < 0)
            addCode(_this2.formatLanguageCode(fc));
        });
        return codes;
      }
    }]);
    return LanguageUtil2;
  }();
  var sets = [{
    lngs: ["ach", "ak", "am", "arn", "br", "fil", "gun", "ln", "mfe", "mg", "mi", "oc", "pt", "pt-BR", "tg", "ti", "tr", "uz", "wa"],
    nr: [1, 2],
    fc: 1
  }, {
    lngs: ["af", "an", "ast", "az", "bg", "bn", "ca", "da", "de", "dev", "el", "en", "eo", "es", "et", "eu", "fi", "fo", "fur", "fy", "gl", "gu", "ha", "hi", "hu", "hy", "ia", "it", "kn", "ku", "lb", "mai", "ml", "mn", "mr", "nah", "nap", "nb", "ne", "nl", "nn", "no", "nso", "pa", "pap", "pms", "ps", "pt-PT", "rm", "sco", "se", "si", "so", "son", "sq", "sv", "sw", "ta", "te", "tk", "ur", "yo"],
    nr: [1, 2],
    fc: 2
  }, {
    lngs: ["ay", "bo", "cgg", "fa", "ht", "id", "ja", "jbo", "ka", "kk", "km", "ko", "ky", "lo", "ms", "sah", "su", "th", "tt", "ug", "vi", "wo", "zh"],
    nr: [1],
    fc: 3
  }, {
    lngs: ["be", "bs", "cnr", "dz", "hr", "ru", "sr", "uk"],
    nr: [1, 2, 5],
    fc: 4
  }, {
    lngs: ["ar"],
    nr: [0, 1, 2, 3, 11, 100],
    fc: 5
  }, {
    lngs: ["cs", "sk"],
    nr: [1, 2, 5],
    fc: 6
  }, {
    lngs: ["csb", "pl"],
    nr: [1, 2, 5],
    fc: 7
  }, {
    lngs: ["cy"],
    nr: [1, 2, 3, 8],
    fc: 8
  }, {
    lngs: ["fr"],
    nr: [1, 2],
    fc: 9
  }, {
    lngs: ["ga"],
    nr: [1, 2, 3, 7, 11],
    fc: 10
  }, {
    lngs: ["gd"],
    nr: [1, 2, 3, 20],
    fc: 11
  }, {
    lngs: ["is"],
    nr: [1, 2],
    fc: 12
  }, {
    lngs: ["jv"],
    nr: [0, 1],
    fc: 13
  }, {
    lngs: ["kw"],
    nr: [1, 2, 3, 4],
    fc: 14
  }, {
    lngs: ["lt"],
    nr: [1, 2, 10],
    fc: 15
  }, {
    lngs: ["lv"],
    nr: [1, 2, 0],
    fc: 16
  }, {
    lngs: ["mk"],
    nr: [1, 2],
    fc: 17
  }, {
    lngs: ["mnk"],
    nr: [0, 1, 2],
    fc: 18
  }, {
    lngs: ["mt"],
    nr: [1, 2, 11, 20],
    fc: 19
  }, {
    lngs: ["or"],
    nr: [2, 1],
    fc: 2
  }, {
    lngs: ["ro"],
    nr: [1, 2, 20],
    fc: 20
  }, {
    lngs: ["sl"],
    nr: [5, 1, 2, 3],
    fc: 21
  }, {
    lngs: ["he", "iw"],
    nr: [1, 2, 20, 21],
    fc: 22
  }];
  var _rulesPluralsTypes = {
    1: function _2(n4) {
      return Number(n4 > 1);
    },
    2: function _3(n4) {
      return Number(n4 != 1);
    },
    3: function _4(n4) {
      return 0;
    },
    4: function _5(n4) {
      return Number(n4 % 10 == 1 && n4 % 100 != 11 ? 0 : n4 % 10 >= 2 && n4 % 10 <= 4 && (n4 % 100 < 10 || n4 % 100 >= 20) ? 1 : 2);
    },
    5: function _6(n4) {
      return Number(n4 == 0 ? 0 : n4 == 1 ? 1 : n4 == 2 ? 2 : n4 % 100 >= 3 && n4 % 100 <= 10 ? 3 : n4 % 100 >= 11 ? 4 : 5);
    },
    6: function _7(n4) {
      return Number(n4 == 1 ? 0 : n4 >= 2 && n4 <= 4 ? 1 : 2);
    },
    7: function _8(n4) {
      return Number(n4 == 1 ? 0 : n4 % 10 >= 2 && n4 % 10 <= 4 && (n4 % 100 < 10 || n4 % 100 >= 20) ? 1 : 2);
    },
    8: function _9(n4) {
      return Number(n4 == 1 ? 0 : n4 == 2 ? 1 : n4 != 8 && n4 != 11 ? 2 : 3);
    },
    9: function _10(n4) {
      return Number(n4 >= 2);
    },
    10: function _11(n4) {
      return Number(n4 == 1 ? 0 : n4 == 2 ? 1 : n4 < 7 ? 2 : n4 < 11 ? 3 : 4);
    },
    11: function _12(n4) {
      return Number(n4 == 1 || n4 == 11 ? 0 : n4 == 2 || n4 == 12 ? 1 : n4 > 2 && n4 < 20 ? 2 : 3);
    },
    12: function _13(n4) {
      return Number(n4 % 10 != 1 || n4 % 100 == 11);
    },
    13: function _14(n4) {
      return Number(n4 !== 0);
    },
    14: function _15(n4) {
      return Number(n4 == 1 ? 0 : n4 == 2 ? 1 : n4 == 3 ? 2 : 3);
    },
    15: function _16(n4) {
      return Number(n4 % 10 == 1 && n4 % 100 != 11 ? 0 : n4 % 10 >= 2 && (n4 % 100 < 10 || n4 % 100 >= 20) ? 1 : 2);
    },
    16: function _17(n4) {
      return Number(n4 % 10 == 1 && n4 % 100 != 11 ? 0 : n4 !== 0 ? 1 : 2);
    },
    17: function _18(n4) {
      return Number(n4 == 1 || n4 % 10 == 1 && n4 % 100 != 11 ? 0 : 1);
    },
    18: function _19(n4) {
      return Number(n4 == 0 ? 0 : n4 == 1 ? 1 : 2);
    },
    19: function _20(n4) {
      return Number(n4 == 1 ? 0 : n4 == 0 || n4 % 100 > 1 && n4 % 100 < 11 ? 1 : n4 % 100 > 10 && n4 % 100 < 20 ? 2 : 3);
    },
    20: function _21(n4) {
      return Number(n4 == 1 ? 0 : n4 == 0 || n4 % 100 > 0 && n4 % 100 < 20 ? 1 : 2);
    },
    21: function _22(n4) {
      return Number(n4 % 100 == 1 ? 1 : n4 % 100 == 2 ? 2 : n4 % 100 == 3 || n4 % 100 == 4 ? 3 : 0);
    },
    22: function _23(n4) {
      return Number(n4 == 1 ? 0 : n4 == 2 ? 1 : (n4 < 0 || n4 > 10) && n4 % 10 == 0 ? 2 : 3);
    }
  };
  function createRules() {
    var rules2 = {};
    sets.forEach(function(set2) {
      set2.lngs.forEach(function(l2) {
        rules2[l2] = {
          numbers: set2.nr,
          plurals: _rulesPluralsTypes[set2.fc]
        };
      });
    });
    return rules2;
  }
  var PluralResolver = function() {
    function PluralResolver2(languageUtils) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      _classCallCheck(this, PluralResolver2);
      this.languageUtils = languageUtils;
      this.options = options;
      this.logger = baseLogger.create("pluralResolver");
      this.rules = createRules();
    }
    _createClass(PluralResolver2, [{
      key: "addRule",
      value: function addRule(lng, obj) {
        this.rules[lng] = obj;
      }
    }, {
      key: "getRule",
      value: function getRule(code) {
        return this.rules[code] || this.rules[this.languageUtils.getLanguagePartFromCode(code)];
      }
    }, {
      key: "needsPlural",
      value: function needsPlural(code) {
        var rule = this.getRule(code);
        return rule && rule.numbers.length > 1;
      }
    }, {
      key: "getPluralFormsOfKey",
      value: function getPluralFormsOfKey(code, key2) {
        var _this = this;
        var ret = [];
        var rule = this.getRule(code);
        if (!rule)
          return ret;
        rule.numbers.forEach(function(n4) {
          var suffix = _this.getSuffix(code, n4);
          ret.push("".concat(key2).concat(suffix));
        });
        return ret;
      }
    }, {
      key: "getSuffix",
      value: function getSuffix(code, count) {
        var _this2 = this;
        var rule = this.getRule(code);
        if (rule) {
          var idx = rule.noAbs ? rule.plurals(count) : rule.plurals(Math.abs(count));
          var suffix = rule.numbers[idx];
          if (this.options.simplifyPluralSuffix && rule.numbers.length === 2 && rule.numbers[0] === 1) {
            if (suffix === 2) {
              suffix = "plural";
            } else if (suffix === 1) {
              suffix = "";
            }
          }
          var returnSuffix = function returnSuffix2() {
            return _this2.options.prepend && suffix.toString() ? _this2.options.prepend + suffix.toString() : suffix.toString();
          };
          if (this.options.compatibilityJSON === "v1") {
            if (suffix === 1)
              return "";
            if (typeof suffix === "number")
              return "_plural_".concat(suffix.toString());
            return returnSuffix();
          } else if (this.options.compatibilityJSON === "v2") {
            return returnSuffix();
          } else if (this.options.simplifyPluralSuffix && rule.numbers.length === 2 && rule.numbers[0] === 1) {
            return returnSuffix();
          }
          return this.options.prepend && idx.toString() ? this.options.prepend + idx.toString() : idx.toString();
        }
        this.logger.warn("no plural rule found for: ".concat(code));
        return "";
      }
    }]);
    return PluralResolver2;
  }();
  var Interpolator = function() {
    function Interpolator2() {
      var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      _classCallCheck(this, Interpolator2);
      this.logger = baseLogger.create("interpolator");
      this.options = options;
      this.format = options.interpolation && options.interpolation.format || function(value) {
        return value;
      };
      this.init(options);
    }
    _createClass(Interpolator2, [{
      key: "init",
      value: function init2() {
        var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        if (!options.interpolation)
          options.interpolation = {
            escapeValue: true
          };
        var iOpts = options.interpolation;
        this.escape = iOpts.escape !== void 0 ? iOpts.escape : escape;
        this.escapeValue = iOpts.escapeValue !== void 0 ? iOpts.escapeValue : true;
        this.useRawValueToEscape = iOpts.useRawValueToEscape !== void 0 ? iOpts.useRawValueToEscape : false;
        this.prefix = iOpts.prefix ? regexEscape(iOpts.prefix) : iOpts.prefixEscaped || "{{";
        this.suffix = iOpts.suffix ? regexEscape(iOpts.suffix) : iOpts.suffixEscaped || "}}";
        this.formatSeparator = iOpts.formatSeparator ? iOpts.formatSeparator : iOpts.formatSeparator || ",";
        this.unescapePrefix = iOpts.unescapeSuffix ? "" : iOpts.unescapePrefix || "-";
        this.unescapeSuffix = this.unescapePrefix ? "" : iOpts.unescapeSuffix || "";
        this.nestingPrefix = iOpts.nestingPrefix ? regexEscape(iOpts.nestingPrefix) : iOpts.nestingPrefixEscaped || regexEscape("$t(");
        this.nestingSuffix = iOpts.nestingSuffix ? regexEscape(iOpts.nestingSuffix) : iOpts.nestingSuffixEscaped || regexEscape(")");
        this.nestingOptionsSeparator = iOpts.nestingOptionsSeparator ? iOpts.nestingOptionsSeparator : iOpts.nestingOptionsSeparator || ",";
        this.maxReplaces = iOpts.maxReplaces ? iOpts.maxReplaces : 1e3;
        this.alwaysFormat = iOpts.alwaysFormat !== void 0 ? iOpts.alwaysFormat : false;
        this.resetRegExp();
      }
    }, {
      key: "reset",
      value: function reset() {
        if (this.options)
          this.init(this.options);
      }
    }, {
      key: "resetRegExp",
      value: function resetRegExp() {
        var regexpStr = "".concat(this.prefix, "(.+?)").concat(this.suffix);
        this.regexp = new RegExp(regexpStr, "g");
        var regexpUnescapeStr = "".concat(this.prefix).concat(this.unescapePrefix, "(.+?)").concat(this.unescapeSuffix).concat(this.suffix);
        this.regexpUnescape = new RegExp(regexpUnescapeStr, "g");
        var nestingRegexpStr = "".concat(this.nestingPrefix, "(.+?)").concat(this.nestingSuffix);
        this.nestingRegexp = new RegExp(nestingRegexpStr, "g");
      }
    }, {
      key: "interpolate",
      value: function interpolate(str, data, lng, options) {
        var _this = this;
        var match2;
        var value;
        var replaces;
        var defaultData = this.options && this.options.interpolation && this.options.interpolation.defaultVariables || {};
        function regexSafe(val) {
          return val.replace(/\$/g, "$$$$");
        }
        var handleFormat = function handleFormat2(key2) {
          if (key2.indexOf(_this.formatSeparator) < 0) {
            var path2 = getPathWithDefaults(data, defaultData, key2);
            return _this.alwaysFormat ? _this.format(path2, void 0, lng) : path2;
          }
          var p2 = key2.split(_this.formatSeparator);
          var k2 = p2.shift().trim();
          var f2 = p2.join(_this.formatSeparator).trim();
          return _this.format(getPathWithDefaults(data, defaultData, k2), f2, lng, options);
        };
        this.resetRegExp();
        var missingInterpolationHandler = options && options.missingInterpolationHandler || this.options.missingInterpolationHandler;
        var skipOnVariables = options && options.interpolation && options.interpolation.skipOnVariables || this.options.interpolation.skipOnVariables;
        var todos = [{
          regex: this.regexpUnescape,
          safeValue: function safeValue(val) {
            return regexSafe(val);
          }
        }, {
          regex: this.regexp,
          safeValue: function safeValue(val) {
            return _this.escapeValue ? regexSafe(_this.escape(val)) : regexSafe(val);
          }
        }];
        todos.forEach(function(todo) {
          replaces = 0;
          while (match2 = todo.regex.exec(str)) {
            value = handleFormat(match2[1].trim());
            if (value === void 0) {
              if (typeof missingInterpolationHandler === "function") {
                var temp = missingInterpolationHandler(str, match2, options);
                value = typeof temp === "string" ? temp : "";
              } else if (skipOnVariables) {
                value = match2[0];
                continue;
              } else {
                _this.logger.warn("missed to pass in variable ".concat(match2[1], " for interpolating ").concat(str));
                value = "";
              }
            } else if (typeof value !== "string" && !_this.useRawValueToEscape) {
              value = makeString(value);
            }
            str = str.replace(match2[0], todo.safeValue(value));
            todo.regex.lastIndex = 0;
            replaces++;
            if (replaces >= _this.maxReplaces) {
              break;
            }
          }
        });
        return str;
      }
    }, {
      key: "nest",
      value: function nest(str, fc) {
        var _this2 = this;
        var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        var match2;
        var value;
        var clonedOptions = _objectSpread7({}, options);
        clonedOptions.applyPostProcessor = false;
        delete clonedOptions.defaultValue;
        function handleHasOptions(key2, inheritedOptions) {
          var sep = this.nestingOptionsSeparator;
          if (key2.indexOf(sep) < 0)
            return key2;
          var c2 = key2.split(new RegExp("".concat(sep, "[ ]*{")));
          var optionsString = "{".concat(c2[1]);
          key2 = c2[0];
          optionsString = this.interpolate(optionsString, clonedOptions);
          optionsString = optionsString.replace(/'/g, '"');
          try {
            clonedOptions = JSON.parse(optionsString);
            if (inheritedOptions)
              clonedOptions = _objectSpread7({}, inheritedOptions, clonedOptions);
          } catch (e3) {
            this.logger.warn("failed parsing options string in nesting for key ".concat(key2), e3);
            return "".concat(key2).concat(sep).concat(optionsString);
          }
          delete clonedOptions.defaultValue;
          return key2;
        }
        while (match2 = this.nestingRegexp.exec(str)) {
          var formatters = [];
          var doReduce = false;
          if (match2[0].includes(this.formatSeparator) && !/{.*}/.test(match2[1])) {
            var r4 = match2[1].split(this.formatSeparator).map(function(elem) {
              return elem.trim();
            });
            match2[1] = r4.shift();
            formatters = r4;
            doReduce = true;
          }
          value = fc(handleHasOptions.call(this, match2[1].trim(), clonedOptions), clonedOptions);
          if (value && match2[0] === str && typeof value !== "string")
            return value;
          if (typeof value !== "string")
            value = makeString(value);
          if (!value) {
            this.logger.warn("missed to resolve ".concat(match2[1], " for nesting ").concat(str));
            value = "";
          }
          if (doReduce) {
            value = formatters.reduce(function(v2, f2) {
              return _this2.format(v2, f2, options.lng, options);
            }, value.trim());
          }
          str = str.replace(match2[0], value);
          this.regexp.lastIndex = 0;
        }
        return str;
      }
    }]);
    return Interpolator2;
  }();
  function remove(arr, what) {
    var found = arr.indexOf(what);
    while (found !== -1) {
      arr.splice(found, 1);
      found = arr.indexOf(what);
    }
  }
  var Connector = function(_EventEmitter) {
    _inherits(Connector2, _EventEmitter);
    function Connector2(backend, store3, services) {
      var _this;
      var options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
      _classCallCheck(this, Connector2);
      _this = _possibleConstructorReturn(this, _getPrototypeOf(Connector2).call(this));
      if (isIE10) {
        EventEmitter.call(_assertThisInitialized(_this));
      }
      _this.backend = backend;
      _this.store = store3;
      _this.services = services;
      _this.languageUtils = services.languageUtils;
      _this.options = options;
      _this.logger = baseLogger.create("backendConnector");
      _this.state = {};
      _this.queue = [];
      if (_this.backend && _this.backend.init) {
        _this.backend.init(services, options.backend, options);
      }
      return _this;
    }
    _createClass(Connector2, [{
      key: "queueLoad",
      value: function queueLoad(languages, namespaces, options, callback) {
        var _this2 = this;
        var toLoad = [];
        var pending = [];
        var toLoadLanguages = [];
        var toLoadNamespaces = [];
        languages.forEach(function(lng) {
          var hasAllNamespaces = true;
          namespaces.forEach(function(ns) {
            var name = "".concat(lng, "|").concat(ns);
            if (!options.reload && _this2.store.hasResourceBundle(lng, ns)) {
              _this2.state[name] = 2;
            } else if (_this2.state[name] < 0)
              ;
            else if (_this2.state[name] === 1) {
              if (pending.indexOf(name) < 0)
                pending.push(name);
            } else {
              _this2.state[name] = 1;
              hasAllNamespaces = false;
              if (pending.indexOf(name) < 0)
                pending.push(name);
              if (toLoad.indexOf(name) < 0)
                toLoad.push(name);
              if (toLoadNamespaces.indexOf(ns) < 0)
                toLoadNamespaces.push(ns);
            }
          });
          if (!hasAllNamespaces)
            toLoadLanguages.push(lng);
        });
        if (toLoad.length || pending.length) {
          this.queue.push({
            pending,
            loaded: {},
            errors: [],
            callback
          });
        }
        return {
          toLoad,
          pending,
          toLoadLanguages,
          toLoadNamespaces
        };
      }
    }, {
      key: "loaded",
      value: function loaded(name, err, data) {
        var s2 = name.split("|");
        var lng = s2[0];
        var ns = s2[1];
        if (err)
          this.emit("failedLoading", lng, ns, err);
        if (data) {
          this.store.addResourceBundle(lng, ns, data);
        }
        this.state[name] = err ? -1 : 2;
        var loaded2 = {};
        this.queue.forEach(function(q2) {
          pushPath(q2.loaded, [lng], ns);
          remove(q2.pending, name);
          if (err)
            q2.errors.push(err);
          if (q2.pending.length === 0 && !q2.done) {
            Object.keys(q2.loaded).forEach(function(l2) {
              if (!loaded2[l2])
                loaded2[l2] = [];
              if (q2.loaded[l2].length) {
                q2.loaded[l2].forEach(function(ns2) {
                  if (loaded2[l2].indexOf(ns2) < 0)
                    loaded2[l2].push(ns2);
                });
              }
            });
            q2.done = true;
            if (q2.errors.length) {
              q2.callback(q2.errors);
            } else {
              q2.callback();
            }
          }
        });
        this.emit("loaded", loaded2);
        this.queue = this.queue.filter(function(q2) {
          return !q2.done;
        });
      }
    }, {
      key: "read",
      value: function read(lng, ns, fcName) {
        var _this3 = this;
        var tried = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0;
        var wait = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 350;
        var callback = arguments.length > 5 ? arguments[5] : void 0;
        if (!lng.length)
          return callback(null, {});
        return this.backend[fcName](lng, ns, function(err, data) {
          if (err && data && tried < 5) {
            setTimeout(function() {
              _this3.read.call(_this3, lng, ns, fcName, tried + 1, wait * 2, callback);
            }, wait);
            return;
          }
          callback(err, data);
        });
      }
    }, {
      key: "prepareLoading",
      value: function prepareLoading(languages, namespaces) {
        var _this4 = this;
        var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        var callback = arguments.length > 3 ? arguments[3] : void 0;
        if (!this.backend) {
          this.logger.warn("No backend was added via i18next.use. Will not load resources.");
          return callback && callback();
        }
        if (typeof languages === "string")
          languages = this.languageUtils.toResolveHierarchy(languages);
        if (typeof namespaces === "string")
          namespaces = [namespaces];
        var toLoad = this.queueLoad(languages, namespaces, options, callback);
        if (!toLoad.toLoad.length) {
          if (!toLoad.pending.length)
            callback();
          return null;
        }
        toLoad.toLoad.forEach(function(name) {
          _this4.loadOne(name);
        });
      }
    }, {
      key: "load",
      value: function load(languages, namespaces, callback) {
        this.prepareLoading(languages, namespaces, {}, callback);
      }
    }, {
      key: "reload",
      value: function reload(languages, namespaces, callback) {
        this.prepareLoading(languages, namespaces, {
          reload: true
        }, callback);
      }
    }, {
      key: "loadOne",
      value: function loadOne(name) {
        var _this5 = this;
        var prefix2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
        var s2 = name.split("|");
        var lng = s2[0];
        var ns = s2[1];
        this.read(lng, ns, "read", void 0, void 0, function(err, data) {
          if (err)
            _this5.logger.warn("".concat(prefix2, "loading namespace ").concat(ns, " for language ").concat(lng, " failed"), err);
          if (!err && data)
            _this5.logger.log("".concat(prefix2, "loaded namespace ").concat(ns, " for language ").concat(lng), data);
          _this5.loaded(name, err, data);
        });
      }
    }, {
      key: "saveMissing",
      value: function saveMissing(languages, namespace, key2, fallbackValue, isUpdate) {
        var options = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : {};
        if (this.services.utils && this.services.utils.hasLoadedNamespace && !this.services.utils.hasLoadedNamespace(namespace)) {
          this.logger.warn('did not save key "'.concat(key2, '" as the namespace "').concat(namespace, '" was not yet loaded'), "This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!");
          return;
        }
        if (key2 === void 0 || key2 === null || key2 === "")
          return;
        if (this.backend && this.backend.create) {
          this.backend.create(languages, namespace, key2, fallbackValue, null, _objectSpread7({}, options, {
            isUpdate
          }));
        }
        if (!languages || !languages[0])
          return;
        this.store.addResource(languages[0], namespace, key2, fallbackValue);
      }
    }]);
    return Connector2;
  }(EventEmitter);
  function get2() {
    return {
      debug: false,
      initImmediate: true,
      ns: ["translation"],
      defaultNS: ["translation"],
      fallbackLng: ["dev"],
      fallbackNS: false,
      whitelist: false,
      nonExplicitWhitelist: false,
      supportedLngs: false,
      nonExplicitSupportedLngs: false,
      load: "all",
      preload: false,
      simplifyPluralSuffix: true,
      keySeparator: ".",
      nsSeparator: ":",
      pluralSeparator: "_",
      contextSeparator: "_",
      partialBundledLanguages: false,
      saveMissing: false,
      updateMissing: false,
      saveMissingTo: "fallback",
      saveMissingPlurals: true,
      missingKeyHandler: false,
      missingInterpolationHandler: false,
      postProcess: false,
      postProcessPassResolved: false,
      returnNull: true,
      returnEmptyString: true,
      returnObjects: false,
      joinArrays: false,
      returnedObjectHandler: false,
      parseMissingKeyHandler: false,
      appendNamespaceToMissingKey: false,
      appendNamespaceToCIMode: false,
      overloadTranslationOptionHandler: function handle2(args) {
        var ret = {};
        if (_typeof(args[1]) === "object")
          ret = args[1];
        if (typeof args[1] === "string")
          ret.defaultValue = args[1];
        if (typeof args[2] === "string")
          ret.tDescription = args[2];
        if (_typeof(args[2]) === "object" || _typeof(args[3]) === "object") {
          var options = args[3] || args[2];
          Object.keys(options).forEach(function(key2) {
            ret[key2] = options[key2];
          });
        }
        return ret;
      },
      interpolation: {
        escapeValue: true,
        format: function format3(value, _format, lng, options) {
          return value;
        },
        prefix: "{{",
        suffix: "}}",
        formatSeparator: ",",
        unescapePrefix: "-",
        nestingPrefix: "$t(",
        nestingSuffix: ")",
        nestingOptionsSeparator: ",",
        maxReplaces: 1e3,
        skipOnVariables: false
      }
    };
  }
  function transformOptions(options) {
    if (typeof options.ns === "string")
      options.ns = [options.ns];
    if (typeof options.fallbackLng === "string")
      options.fallbackLng = [options.fallbackLng];
    if (typeof options.fallbackNS === "string")
      options.fallbackNS = [options.fallbackNS];
    if (options.whitelist) {
      if (options.whitelist && options.whitelist.indexOf("cimode") < 0) {
        options.whitelist = options.whitelist.concat(["cimode"]);
      }
      options.supportedLngs = options.whitelist;
    }
    if (options.nonExplicitWhitelist) {
      options.nonExplicitSupportedLngs = options.nonExplicitWhitelist;
    }
    if (options.supportedLngs && options.supportedLngs.indexOf("cimode") < 0) {
      options.supportedLngs = options.supportedLngs.concat(["cimode"]);
    }
    return options;
  }
  function noop8() {
  }
  var I18n = function(_EventEmitter) {
    _inherits(I18n2, _EventEmitter);
    function I18n2() {
      var _this;
      var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      var callback = arguments.length > 1 ? arguments[1] : void 0;
      _classCallCheck(this, I18n2);
      _this = _possibleConstructorReturn(this, _getPrototypeOf(I18n2).call(this));
      if (isIE10) {
        EventEmitter.call(_assertThisInitialized(_this));
      }
      _this.options = transformOptions(options);
      _this.services = {};
      _this.logger = baseLogger;
      _this.modules = {
        external: []
      };
      if (callback && !_this.isInitialized && !options.isClone) {
        if (!_this.options.initImmediate) {
          _this.init(options, callback);
          return _possibleConstructorReturn(_this, _assertThisInitialized(_this));
        }
        setTimeout(function() {
          _this.init(options, callback);
        }, 0);
      }
      return _this;
    }
    _createClass(I18n2, [{
      key: "init",
      value: function init2() {
        var _this2 = this;
        var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        var callback = arguments.length > 1 ? arguments[1] : void 0;
        if (typeof options === "function") {
          callback = options;
          options = {};
        }
        if (options.whitelist && !options.supportedLngs) {
          this.logger.deprecate("whitelist", 'option "whitelist" will be renamed to "supportedLngs" in the next major - please make sure to rename this option asap.');
        }
        if (options.nonExplicitWhitelist && !options.nonExplicitSupportedLngs) {
          this.logger.deprecate("whitelist", 'options "nonExplicitWhitelist" will be renamed to "nonExplicitSupportedLngs" in the next major - please make sure to rename this option asap.');
        }
        this.options = _objectSpread7({}, get2(), this.options, transformOptions(options));
        this.format = this.options.interpolation.format;
        if (!callback)
          callback = noop8;
        function createClassOnDemand(ClassOrObject) {
          if (!ClassOrObject)
            return null;
          if (typeof ClassOrObject === "function")
            return new ClassOrObject();
          return ClassOrObject;
        }
        if (!this.options.isClone) {
          if (this.modules.logger) {
            baseLogger.init(createClassOnDemand(this.modules.logger), this.options);
          } else {
            baseLogger.init(null, this.options);
          }
          var lu = new LanguageUtil(this.options);
          this.store = new ResourceStore(this.options.resources, this.options);
          var s2 = this.services;
          s2.logger = baseLogger;
          s2.resourceStore = this.store;
          s2.languageUtils = lu;
          s2.pluralResolver = new PluralResolver(lu, {
            prepend: this.options.pluralSeparator,
            compatibilityJSON: this.options.compatibilityJSON,
            simplifyPluralSuffix: this.options.simplifyPluralSuffix
          });
          s2.interpolator = new Interpolator(this.options);
          s2.utils = {
            hasLoadedNamespace: this.hasLoadedNamespace.bind(this)
          };
          s2.backendConnector = new Connector(createClassOnDemand(this.modules.backend), s2.resourceStore, s2, this.options);
          s2.backendConnector.on("*", function(event) {
            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              args[_key - 1] = arguments[_key];
            }
            _this2.emit.apply(_this2, [event].concat(args));
          });
          if (this.modules.languageDetector) {
            s2.languageDetector = createClassOnDemand(this.modules.languageDetector);
            s2.languageDetector.init(s2, this.options.detection, this.options);
          }
          if (this.modules.i18nFormat) {
            s2.i18nFormat = createClassOnDemand(this.modules.i18nFormat);
            if (s2.i18nFormat.init)
              s2.i18nFormat.init(this);
          }
          this.translator = new Translator(this.services, this.options);
          this.translator.on("*", function(event) {
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }
            _this2.emit.apply(_this2, [event].concat(args));
          });
          this.modules.external.forEach(function(m2) {
            if (m2.init)
              m2.init(_this2);
          });
        }
        if (!this.services.languageDetector && !this.options.lng) {
          this.logger.warn("init: no languageDetector is used and no lng is defined");
        }
        var storeApi = ["getResource", "hasResourceBundle", "getResourceBundle", "getDataByLanguage"];
        storeApi.forEach(function(fcName) {
          _this2[fcName] = function() {
            var _this2$store;
            return (_this2$store = _this2.store)[fcName].apply(_this2$store, arguments);
          };
        });
        var storeApiChained = ["addResource", "addResources", "addResourceBundle", "removeResourceBundle"];
        storeApiChained.forEach(function(fcName) {
          _this2[fcName] = function() {
            var _this2$store2;
            (_this2$store2 = _this2.store)[fcName].apply(_this2$store2, arguments);
            return _this2;
          };
        });
        var deferred = defer2();
        var load = function load2() {
          _this2.changeLanguage(_this2.options.lng, function(err, t4) {
            _this2.isInitialized = true;
            if (!_this2.options.isClone)
              _this2.logger.log("initialized", _this2.options);
            _this2.emit("initialized", _this2.options);
            deferred.resolve(t4);
            callback(err, t4);
          });
        };
        if (this.options.resources || !this.options.initImmediate) {
          load();
        } else {
          setTimeout(load, 0);
        }
        return deferred;
      }
    }, {
      key: "loadResources",
      value: function loadResources(language) {
        var _this3 = this;
        var callback = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : noop8;
        var usedCallback = callback;
        var usedLng = typeof language === "string" ? language : this.language;
        if (typeof language === "function")
          usedCallback = language;
        if (!this.options.resources || this.options.partialBundledLanguages) {
          if (usedLng && usedLng.toLowerCase() === "cimode")
            return usedCallback();
          var toLoad = [];
          var append2 = function append3(lng) {
            if (!lng)
              return;
            var lngs = _this3.services.languageUtils.toResolveHierarchy(lng);
            lngs.forEach(function(l2) {
              if (toLoad.indexOf(l2) < 0)
                toLoad.push(l2);
            });
          };
          if (!usedLng) {
            var fallbacks = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);
            fallbacks.forEach(function(l2) {
              return append2(l2);
            });
          } else {
            append2(usedLng);
          }
          if (this.options.preload) {
            this.options.preload.forEach(function(l2) {
              return append2(l2);
            });
          }
          this.services.backendConnector.load(toLoad, this.options.ns, usedCallback);
        } else {
          usedCallback(null);
        }
      }
    }, {
      key: "reloadResources",
      value: function reloadResources(lngs, ns, callback) {
        var deferred = defer2();
        if (!lngs)
          lngs = this.languages;
        if (!ns)
          ns = this.options.ns;
        if (!callback)
          callback = noop8;
        this.services.backendConnector.reload(lngs, ns, function(err) {
          deferred.resolve();
          callback(err);
        });
        return deferred;
      }
    }, {
      key: "use",
      value: function use(module2) {
        if (!module2)
          throw new Error("You are passing an undefined module! Please check the object you are passing to i18next.use()");
        if (!module2.type)
          throw new Error("You are passing a wrong module! Please check the object you are passing to i18next.use()");
        if (module2.type === "backend") {
          this.modules.backend = module2;
        }
        if (module2.type === "logger" || module2.log && module2.warn && module2.error) {
          this.modules.logger = module2;
        }
        if (module2.type === "languageDetector") {
          this.modules.languageDetector = module2;
        }
        if (module2.type === "i18nFormat") {
          this.modules.i18nFormat = module2;
        }
        if (module2.type === "postProcessor") {
          postProcessor.addPostProcessor(module2);
        }
        if (module2.type === "3rdParty") {
          this.modules.external.push(module2);
        }
        return this;
      }
    }, {
      key: "changeLanguage",
      value: function changeLanguage2(lng, callback) {
        var _this4 = this;
        this.isLanguageChangingTo = lng;
        var deferred = defer2();
        this.emit("languageChanging", lng);
        var done = function done2(err, l2) {
          if (l2) {
            _this4.language = l2;
            _this4.languages = _this4.services.languageUtils.toResolveHierarchy(l2);
            _this4.translator.changeLanguage(l2);
            _this4.isLanguageChangingTo = void 0;
            _this4.emit("languageChanged", l2);
            _this4.logger.log("languageChanged", l2);
          } else {
            _this4.isLanguageChangingTo = void 0;
          }
          deferred.resolve(function() {
            return _this4.t.apply(_this4, arguments);
          });
          if (callback)
            callback(err, function() {
              return _this4.t.apply(_this4, arguments);
            });
        };
        var setLng = function setLng2(lngs) {
          var l2 = typeof lngs === "string" ? lngs : _this4.services.languageUtils.getBestMatchFromCodes(lngs);
          if (l2) {
            if (!_this4.language) {
              _this4.language = l2;
              _this4.languages = _this4.services.languageUtils.toResolveHierarchy(l2);
            }
            if (!_this4.translator.language)
              _this4.translator.changeLanguage(l2);
            if (_this4.services.languageDetector)
              _this4.services.languageDetector.cacheUserLanguage(l2);
          }
          _this4.loadResources(l2, function(err) {
            done(err, l2);
          });
        };
        if (!lng && this.services.languageDetector && !this.services.languageDetector.async) {
          setLng(this.services.languageDetector.detect());
        } else if (!lng && this.services.languageDetector && this.services.languageDetector.async) {
          this.services.languageDetector.detect(setLng);
        } else {
          setLng(lng);
        }
        return deferred;
      }
    }, {
      key: "getFixedT",
      value: function getFixedT(lng, ns) {
        var _this5 = this;
        var fixedT = function fixedT2(key2, opts) {
          var options;
          if (_typeof(opts) !== "object") {
            for (var _len3 = arguments.length, rest = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
              rest[_key3 - 2] = arguments[_key3];
            }
            options = _this5.options.overloadTranslationOptionHandler([key2, opts].concat(rest));
          } else {
            options = _objectSpread7({}, opts);
          }
          options.lng = options.lng || fixedT2.lng;
          options.lngs = options.lngs || fixedT2.lngs;
          options.ns = options.ns || fixedT2.ns;
          return _this5.t(key2, options);
        };
        if (typeof lng === "string") {
          fixedT.lng = lng;
        } else {
          fixedT.lngs = lng;
        }
        fixedT.ns = ns;
        return fixedT;
      }
    }, {
      key: "t",
      value: function t4() {
        var _this$translator;
        return this.translator && (_this$translator = this.translator).translate.apply(_this$translator, arguments);
      }
    }, {
      key: "exists",
      value: function exists() {
        var _this$translator2;
        return this.translator && (_this$translator2 = this.translator).exists.apply(_this$translator2, arguments);
      }
    }, {
      key: "setDefaultNamespace",
      value: function setDefaultNamespace(ns) {
        this.options.defaultNS = ns;
      }
    }, {
      key: "hasLoadedNamespace",
      value: function hasLoadedNamespace2(ns) {
        var _this6 = this;
        var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        if (!this.isInitialized) {
          this.logger.warn("hasLoadedNamespace: i18next was not initialized", this.languages);
          return false;
        }
        if (!this.languages || !this.languages.length) {
          this.logger.warn("hasLoadedNamespace: i18n.languages were undefined or empty", this.languages);
          return false;
        }
        var lng = this.languages[0];
        var fallbackLng = this.options ? this.options.fallbackLng : false;
        var lastLng = this.languages[this.languages.length - 1];
        if (lng.toLowerCase() === "cimode")
          return true;
        var loadNotPending = function loadNotPending2(l2, n4) {
          var loadState = _this6.services.backendConnector.state["".concat(l2, "|").concat(n4)];
          return loadState === -1 || loadState === 2;
        };
        if (options.precheck) {
          var preResult = options.precheck(this, loadNotPending);
          if (preResult !== void 0)
            return preResult;
        }
        if (this.hasResourceBundle(lng, ns))
          return true;
        if (!this.services.backendConnector.backend)
          return true;
        if (loadNotPending(lng, ns) && (!fallbackLng || loadNotPending(lastLng, ns)))
          return true;
        return false;
      }
    }, {
      key: "loadNamespaces",
      value: function loadNamespaces2(ns, callback) {
        var _this7 = this;
        var deferred = defer2();
        if (!this.options.ns) {
          callback && callback();
          return Promise.resolve();
        }
        if (typeof ns === "string")
          ns = [ns];
        ns.forEach(function(n4) {
          if (_this7.options.ns.indexOf(n4) < 0)
            _this7.options.ns.push(n4);
        });
        this.loadResources(function(err) {
          deferred.resolve();
          if (callback)
            callback(err);
        });
        return deferred;
      }
    }, {
      key: "loadLanguages",
      value: function loadLanguages(lngs, callback) {
        var deferred = defer2();
        if (typeof lngs === "string")
          lngs = [lngs];
        var preloaded = this.options.preload || [];
        var newLngs = lngs.filter(function(lng) {
          return preloaded.indexOf(lng) < 0;
        });
        if (!newLngs.length) {
          if (callback)
            callback();
          return Promise.resolve();
        }
        this.options.preload = preloaded.concat(newLngs);
        this.loadResources(function(err) {
          deferred.resolve();
          if (callback)
            callback(err);
        });
        return deferred;
      }
    }, {
      key: "dir",
      value: function dir(lng) {
        if (!lng)
          lng = this.languages && this.languages.length > 0 ? this.languages[0] : this.language;
        if (!lng)
          return "rtl";
        var rtlLngs = ["ar", "shu", "sqr", "ssh", "xaa", "yhd", "yud", "aao", "abh", "abv", "acm", "acq", "acw", "acx", "acy", "adf", "ads", "aeb", "aec", "afb", "ajp", "apc", "apd", "arb", "arq", "ars", "ary", "arz", "auz", "avl", "ayh", "ayl", "ayn", "ayp", "bbz", "pga", "he", "iw", "ps", "pbt", "pbu", "pst", "prp", "prd", "ug", "ur", "ydd", "yds", "yih", "ji", "yi", "hbo", "men", "xmn", "fa", "jpr", "peo", "pes", "prs", "dv", "sam"];
        return rtlLngs.indexOf(this.services.languageUtils.getLanguagePartFromCode(lng)) >= 0 ? "rtl" : "ltr";
      }
    }, {
      key: "createInstance",
      value: function createInstance2() {
        var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        var callback = arguments.length > 1 ? arguments[1] : void 0;
        return new I18n2(options, callback);
      }
    }, {
      key: "cloneInstance",
      value: function cloneInstance() {
        var _this8 = this;
        var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        var callback = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : noop8;
        var mergedOptions = _objectSpread7({}, this.options, options, {
          isClone: true
        });
        var clone2 = new I18n2(mergedOptions);
        var membersToCopy = ["store", "services", "language"];
        membersToCopy.forEach(function(m2) {
          clone2[m2] = _this8[m2];
        });
        clone2.services = _objectSpread7({}, this.services);
        clone2.services.utils = {
          hasLoadedNamespace: clone2.hasLoadedNamespace.bind(clone2)
        };
        clone2.translator = new Translator(clone2.services, clone2.options);
        clone2.translator.on("*", function(event) {
          for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
            args[_key4 - 1] = arguments[_key4];
          }
          clone2.emit.apply(clone2, [event].concat(args));
        });
        clone2.init(mergedOptions, callback);
        clone2.translator.options = clone2.options;
        clone2.translator.backendConnector.services.utils = {
          hasLoadedNamespace: clone2.hasLoadedNamespace.bind(clone2)
        };
        return clone2;
      }
    }]);
    return I18n2;
  }(EventEmitter);
  var i18next = new I18n();
  var i18next_default = i18next;

  // src/redux/middlewares/changeLanguage.ts
  var changeLanguage = (store3) => (next) => (action) => {
    if (action.type === "language/changeLanguage") {
      i18next_default.changeLanguage(action.payload);
    }
    next(action);
  };

  // src/redux/store.ts
  var persistConfig = {
    key: "root",
    storage: import_storage.default,
    whitelist: ["user", "shoppingCart"]
  };
  var rootReducer = combineReducers({
    language: languageSlice.reducer,
    recommendProduct: recommendProductSlice.reducer,
    productDetail: productDetailSlice.reducer,
    productSearch: productSearchSlice.reducer,
    user: userSlice.reducer,
    shoppingCart: shoppingCartSlice.reducer,
    order: orderSlice.reducer
  });
  var persistedReducer = persistReducer(persistConfig, rootReducer);
  var store2 = configureStore({
    reducer: persistedReducer,
    middleware: (getDefaultMiddleware2) => getDefaultMiddleware2({ serializableCheck: false }).concat(changeLanguage),
    devTools: true
  });
  var persistor = persistStore(store2);
  var exports = {
    store: store2,
    persistor
  };
  var store_default = exports;

  // src/i18n/en.json
  var en_default = {
    header: {
      slogan: "Make travel happier",
      add_new_language: "add new language",
      title: "React Travel",
      register: "Register",
      signin: "Sign In",
      home_page: "Home",
      weekend: "Weekend",
      group: "Group",
      backpack: "Backpack",
      private: "Private",
      cruise: "Cruise",
      hotel: "Hotel & Attractions",
      local: "Local",
      theme: "Theme",
      custom: "Custom",
      study: "Study",
      visa: "Visa",
      enterprise: "Enterprise",
      high_end: "High-end",
      outdoor: "Outdoor",
      insurance: "Insurance",
      shoppingCart: "Shopping Cart",
      signOut: "Sign Out",
      welcome: "welcome"
    },
    footer: {
      detail: "All rights reserved @ ReactTravel.com"
    },
    home_page: {
      hot_recommended: "Hot Recommended",
      new_arrival: "New arrival",
      domestic_travel: "Domestic travel",
      joint_venture: "Joint Venture",
      start_from: "(start from)"
    }
  };

  // src/i18n/zh.json
  var zh_default = {
    header: {
      slogan: "\u8BA9\u65C5\u884C\u66F4\u5E78\u798F",
      add_new_language: "\u6DFB\u52A0\u65B0\u8BED\u8A00",
      title: "\u767D\u8017\u513F\u65C5\u6E38\u7F51",
      register: "\u6CE8\u518C",
      signin: "\u767B\u5F55",
      home_page: "\u65C5\u6E38\u9996\u9875",
      weekend: "\u5468\u672B\u6E38",
      group: "\u8DDF\u56E2\u6E38",
      backpack: "\u81EA\u7531\u884C",
      private: "\u79C1\u5BB6\u56E2",
      cruise: "\u90AE\u8F6E",
      hotel: "\u9152\u5E97+\u666F\u70B9",
      local: "\u5F53\u5730\u73A9\u4E50",
      theme: "\u4E3B\u9898\u6E38",
      custom: "\u5B9A\u5236\u6E38",
      study: "\u6E38\u5B66",
      visa: "\u7B7E\u8BC1",
      enterprise: "\u4F01\u4E1A\u6E38",
      high_end: "\u9AD8\u7AEF\u6E38",
      outdoor: "\u7231\u73A9\u6237\u5916",
      insurance: "\u4FDD\u9669",
      shoppingCart: "\u8D2D\u7269\u8F66",
      signOut: "\u6CE8\u9500",
      welcome: "\u6B22\u8FCE\u56DE\u6765"
    },
    footer: {
      detail: "\u7248\u6743\u6240\u6709 @ \u767D\u8017\u513F\u65C5\u6E38\u7F51"
    },
    home_page: {
      hot_recommended: "\u7206\u6B3E\u63A8\u8350",
      new_arrival: "\u65B0\u54C1\u4E0A\u5E02",
      domestic_travel: "\u56FD\u5185\u6E38\u63A8\u8350",
      joint_venture: "\u5408\u4F5C\u4F01\u4E1A",
      start_from: "(\u8D77)"
    }
  };

  // src/i18n/configs.ts
  var resources = {
    en: {
      translation: en_default
    },
    zh: {
      translation: zh_default
    }
  };
  i18next_default.use(initReactI18next).init({
    resources,
    lng: "zh",
    interpolation: {
      escapeValue: false
    }
  });

  // node_modules/redux-persist/es/integration/react.js
  var import_react141 = __toESM(require_react());
  function _typeof5(obj) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof5 = function _typeof6(obj2) {
        return typeof obj2;
      };
    } else {
      _typeof5 = function _typeof6(obj2) {
        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      };
    }
    return _typeof5(obj);
  }
  function _classCallCheck3(instance2, Constructor) {
    if (!(instance2 instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties3(target, props) {
    for (var i3 = 0; i3 < props.length; i3++) {
      var descriptor = props[i3];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  function _createClass3(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties3(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties3(Constructor, staticProps);
    return Constructor;
  }
  function _possibleConstructorReturn3(self2, call2) {
    if (call2 && (_typeof5(call2) === "object" || typeof call2 === "function")) {
      return call2;
    }
    return _assertThisInitialized3(self2);
  }
  function _getPrototypeOf4(o3) {
    _getPrototypeOf4 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf5(o4) {
      return o4.__proto__ || Object.getPrototypeOf(o4);
    };
    return _getPrototypeOf4(o3);
  }
  function _assertThisInitialized3(self2) {
    if (self2 === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self2;
  }
  function _inherits3(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
    if (superClass)
      _setPrototypeOf4(subClass, superClass);
  }
  function _setPrototypeOf4(o3, p2) {
    _setPrototypeOf4 = Object.setPrototypeOf || function _setPrototypeOf5(o4, p3) {
      o4.__proto__ = p3;
      return o4;
    };
    return _setPrototypeOf4(o3, p2);
  }
  function _defineProperty7(obj, key2, value) {
    if (key2 in obj) {
      Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key2] = value;
    }
    return obj;
  }
  var PersistGate = /* @__PURE__ */ function(_PureComponent) {
    _inherits3(PersistGate2, _PureComponent);
    function PersistGate2() {
      var _getPrototypeOf22;
      var _this;
      _classCallCheck3(this, PersistGate2);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _possibleConstructorReturn3(this, (_getPrototypeOf22 = _getPrototypeOf4(PersistGate2)).call.apply(_getPrototypeOf22, [this].concat(args)));
      _defineProperty7(_assertThisInitialized3(_this), "state", {
        bootstrapped: false
      });
      _defineProperty7(_assertThisInitialized3(_this), "_unsubscribe", void 0);
      _defineProperty7(_assertThisInitialized3(_this), "handlePersistorState", function() {
        var persistor2 = _this.props.persistor;
        var _persistor$getState = persistor2.getState(), bootstrapped = _persistor$getState.bootstrapped;
        if (bootstrapped) {
          if (_this.props.onBeforeLift) {
            Promise.resolve(_this.props.onBeforeLift()).finally(function() {
              return _this.setState({
                bootstrapped: true
              });
            });
          } else {
            _this.setState({
              bootstrapped: true
            });
          }
          _this._unsubscribe && _this._unsubscribe();
        }
      });
      return _this;
    }
    _createClass3(PersistGate2, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this._unsubscribe = this.props.persistor.subscribe(this.handlePersistorState);
        this.handlePersistorState();
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this._unsubscribe && this._unsubscribe();
      }
    }, {
      key: "render",
      value: function render2() {
        if (true) {
          if (typeof this.props.children === "function" && this.props.loading)
            console.error("redux-persist: PersistGate expects either a function child or loading prop, but not both. The loading prop will be ignored.");
        }
        if (typeof this.props.children === "function") {
          return this.props.children(this.state.bootstrapped);
        }
        return this.state.bootstrapped ? this.props.children : this.props.loading;
      }
    }]);
    return PersistGate2;
  }(import_react141.PureComponent);
  _defineProperty7(PersistGate, "defaultProps", {
    children: null,
    loading: null
  });

  // src/index.tsx
  injectStore(store_default.store);
  var root2 = import_client.default.createRoot(
    document.getElementById("root")
  );
  root2.render(
    /* @__PURE__ */ import_react142.default.createElement(Provider_default, { store: store_default.store }, /* @__PURE__ */ import_react142.default.createElement(PersistGate, { persistor: store_default.persistor, loading: /* @__PURE__ */ import_react142.default.createElement(spin_default, null) }, /* @__PURE__ */ import_react142.default.createElement(App_default2, null)))
  );
})();
/*! Bundled license information:

react/cjs/react.development.js:
  (**
   * @license React
   * react.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

scheduler/cjs/scheduler.development.js:
  (**
   * @license React
   * scheduler.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom.development.js:
  (**
   * @license React
   * react-dom.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
  (**
   * Checks if an event is supported in the current execution environment.
   *
   * NOTE: This will not work correctly for non-generic events such as `change`,
   * `reset`, `load`, `error`, and `select`.
   *
   * Borrows from Modernizr.
   *
   * @param {string} eventNameSuffix Event name, e.g. "click".
   * @return {boolean} True if the event is supported.
   * @internal
   * @license Modernizr 3.0.0pre (Custom Build) | MIT
   *)

react-is/cjs/react-is.development.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

object-assign/index.js:
  (*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  *)

classnames/index.js:
  (*!
  	Copyright (c) 2018 Jed Watson.
  	Licensed under the MIT License (MIT), see
  	http://jedwatson.github.io/classnames
  *)

moment/moment.js:
  (*! moment.js *)
  (*! version : 2.29.4 *)
  (*! authors : Tim Wood, Iskren Chernev, Moment.js contributors *)
  (*! license : MIT *)
  (*! momentjs.com *)

@remix-run/router/dist/router.js:
  (**
   * @remix-run/router v1.9.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

react-router/dist/index.js:
  (**
   * React Router v6.16.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

react-router-dom/dist/index.js:
  (**
   * React Router DOM v6.16.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@babel/runtime/helpers/esm/regeneratorRuntime.js:
  (*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE *)
*/
